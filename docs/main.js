!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=11)}([,,function(t,e,n){var r;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,(function(n,i){"use strict";var o=[],a=n.document,s=Object.getPrototypeOf,l=o.slice,u=o.concat,c=o.push,f=o.indexOf,h={},p=h.toString,d=h.hasOwnProperty,g=d.toString,m=g.call(Object),v={},y=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},_=function(t){return null!=t&&t===t.window},w={type:!0,src:!0,nonce:!0,noModule:!0};function b(t,e,n){var r,i,o=(n=n||a).createElement("script");if(o.text=t,e)for(r in w)(i=e[r]||e.getAttribute&&e.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function x(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?h[p.call(t)]||"object":typeof t}var T=function(t,e){return new T.fn.init(t,e)},E=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(t){var e=!!t&&"length"in t&&t.length,n=x(t);return!y(t)&&!_(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}T.fn=T.prototype={jquery:"3.4.1",constructor:T,length:0,toArray:function(){return l.call(this)},get:function(t){return null==t?l.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=T.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return T.each(this,t)},map:function(t){return this.pushStack(T.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(l.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},T.extend=T.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||y(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(t=arguments[s]))for(e in t)r=t[e],"__proto__"!==e&&a!==r&&(u&&r&&(T.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[e],o=i&&!Array.isArray(n)?[]:i||T.isPlainObject(n)?n:{},i=!1,a[e]=T.extend(u,o,r)):void 0!==r&&(a[e]=r));return a},T.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==p.call(t))&&(!(e=s(t))||"function"==typeof(n=d.call(e,"constructor")&&e.constructor)&&g.call(n)===m)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e){b(t,{nonce:e&&e.nonce})},each:function(t,e){var n,r=0;if(C(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},trim:function(t){return null==t?"":(t+"").replace(E,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(C(Object(t))?T.merge(n,"string"==typeof t?[t]:t):c.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:f.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,a=!n;i<o;i++)!e(t[i],i)!==a&&r.push(t[i]);return r},map:function(t,e,n){var r,i,o=0,a=[];if(C(t))for(r=t.length;o<r;o++)null!=(i=e(t[o],o,n))&&a.push(i);else for(o in t)null!=(i=e(t[o],o,n))&&a.push(i);return u.apply([],a)},guid:1,support:v}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=o[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){h["[object "+e+"]"]=e.toLowerCase()}));var S=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(t){var e,n,r,i,o,a,s,l,u,c,f,h,p,d,g,m,v,y,_,w="sizzle"+1*new Date,b=t.document,x=0,T=0,E=lt(),C=lt(),S=lt(),A=lt(),N=function(t,e){return t===e&&(f=!0),0},D={}.hasOwnProperty,k=[],M=k.pop,I=k.push,O=k.push,L=k.slice,R=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",j="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",F="\\["+j+"*("+H+")(?:"+j+"*([*^$|!~]?=)"+j+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+j+"*\\]",q=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",U=new RegExp(j+"+","g"),B=new RegExp("^"+j+"+|((?:^|[^\\\\])(?:\\\\.)*)"+j+"+$","g"),W=new RegExp("^"+j+"*,"+j+"*"),z=new RegExp("^"+j+"*([>+~]|"+j+")"+j+"*"),Y=new RegExp(j+"|>"),V=new RegExp(q),G=new RegExp("^"+H+"$"),$={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+j+"*(even|odd|(([+-]|)(\\d*)n|)"+j+"*(?:([+-]|)"+j+"*(\\d+)|))"+j+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+j+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+j+"*((?:-\\d)?\\d*)"+j+"*\\)|)(?=[^-]|$)","i")},X=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\([\\da-f]{1,6}"+j+"?|("+j+")|.)","ig"),nt=function(t,e,n){var r="0x"+e-65536;return r!=r||n?e:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},rt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,it=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},ot=function(){h()},at=wt((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{O.apply(k=L.call(b.childNodes),b.childNodes),k[b.childNodes.length].nodeType}catch(t){O={apply:k.length?function(t,e){I.apply(t,L.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}function st(t,e,r,i){var o,s,u,c,f,d,v,y=e&&e.ownerDocument,x=e?e.nodeType:9;if(r=r||[],"string"!=typeof t||!t||1!==x&&9!==x&&11!==x)return r;if(!i&&((e?e.ownerDocument||e:b)!==p&&h(e),e=e||p,g)){if(11!==x&&(f=J.exec(t)))if(o=f[1]){if(9===x){if(!(u=e.getElementById(o)))return r;if(u.id===o)return r.push(u),r}else if(y&&(u=y.getElementById(o))&&_(e,u)&&u.id===o)return r.push(u),r}else{if(f[2])return O.apply(r,e.getElementsByTagName(t)),r;if((o=f[3])&&n.getElementsByClassName&&e.getElementsByClassName)return O.apply(r,e.getElementsByClassName(o)),r}if(n.qsa&&!A[t+" "]&&(!m||!m.test(t))&&(1!==x||"object"!==e.nodeName.toLowerCase())){if(v=t,y=e,1===x&&Y.test(t)){for((c=e.getAttribute("id"))?c=c.replace(rt,it):e.setAttribute("id",c=w),s=(d=a(t)).length;s--;)d[s]="#"+c+" "+_t(d[s]);v=d.join(","),y=tt.test(t)&&vt(e.parentNode)||e}try{return O.apply(r,y.querySelectorAll(v)),r}catch(e){A(t,!0)}finally{c===w&&e.removeAttribute("id")}}}return l(t.replace(B,"$1"),e,r,i)}function lt(){var t=[];return function e(n,i){return t.push(n+" ")>r.cacheLength&&delete e[t.shift()],e[n+" "]=i}}function ut(t){return t[w]=!0,t}function ct(t){var e=p.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ft(t,e){for(var n=t.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=e}function ht(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function pt(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function dt(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function gt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&at(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function mt(t){return ut((function(e){return e=+e,ut((function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=st.support={},o=st.isXML=function(t){var e=t.namespaceURI,n=(t.ownerDocument||t).documentElement;return!X.test(e||n&&n.nodeName||"HTML")},h=st.setDocument=function(t){var e,i,a=t?t.ownerDocument||t:b;return a!==p&&9===a.nodeType&&a.documentElement?(d=(p=a).documentElement,g=!o(p),b!==p&&(i=p.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",ot,!1):i.attachEvent&&i.attachEvent("onunload",ot)),n.attributes=ct((function(t){return t.className="i",!t.getAttribute("className")})),n.getElementsByTagName=ct((function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length})),n.getElementsByClassName=Z.test(p.getElementsByClassName),n.getById=ct((function(t){return d.appendChild(t).id=w,!p.getElementsByName||!p.getElementsByName(w).length})),n.getById?(r.filter.ID=function(t){var e=t.replace(et,nt);return function(t){return t.getAttribute("id")===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n=e.getElementById(t);return n?[n]:[]}}):(r.filter.ID=function(t){var e=t.replace(et,nt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},v=[],m=[],(n.qsa=Z.test(p.querySelectorAll))&&(ct((function(t){d.appendChild(t).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+j+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+j+"*(?:value|"+P+")"),t.querySelectorAll("[id~="+w+"-]").length||m.push("~="),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+w+"+*").length||m.push(".#.+[+~]")})),ct((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+j+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),d.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=Z.test(y=d.matches||d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&ct((function(t){n.disconnectedMatch=y.call(t,"*"),y.call(t,"[s!='']:x"),v.push("!=",q)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),e=Z.test(d.compareDocumentPosition),_=e||Z.test(d.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},N=e?function(t,e){if(t===e)return f=!0,0;var r=!t.compareDocumentPosition-!e.compareDocumentPosition;return r||(1&(r=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===r?t===p||t.ownerDocument===b&&_(b,t)?-1:e===p||e.ownerDocument===b&&_(b,e)?1:c?R(c,t)-R(c,e):0:4&r?-1:1)}:function(t,e){if(t===e)return f=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,a=[t],s=[e];if(!i||!o)return t===p?-1:e===p?1:i?-1:o?1:c?R(c,t)-R(c,e):0;if(i===o)return ht(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?ht(a[r],s[r]):a[r]===b?-1:s[r]===b?1:0},p):p},st.matches=function(t,e){return st(t,null,null,e)},st.matchesSelector=function(t,e){if((t.ownerDocument||t)!==p&&h(t),n.matchesSelector&&g&&!A[e+" "]&&(!v||!v.test(e))&&(!m||!m.test(e)))try{var r=y.call(t,e);if(r||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(t){A(e,!0)}return st(e,p,null,[t]).length>0},st.contains=function(t,e){return(t.ownerDocument||t)!==p&&h(t),_(t,e)},st.attr=function(t,e){(t.ownerDocument||t)!==p&&h(t);var i=r.attrHandle[e.toLowerCase()],o=i&&D.call(r.attrHandle,e.toLowerCase())?i(t,e,!g):void 0;return void 0!==o?o:n.attributes||!g?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},st.escape=function(t){return(t+"").replace(rt,it)},st.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},st.uniqueSort=function(t){var e,r=[],i=0,o=0;if(f=!n.detectDuplicates,c=!n.sortStable&&t.slice(0),t.sort(N),f){for(;e=t[o++];)e===t[o]&&(i=r.push(o));for(;i--;)t.splice(r[i],1)}return c=null,t},i=st.getText=function(t){var e,n="",r=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=i(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[r++];)n+=i(e);return n},(r=st.selectors={cacheLength:50,createPseudo:ut,match:$,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,nt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,nt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||st.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&st.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return $.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&V.test(n)&&(e=a(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,nt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=E[t+" "];return e||(e=new RegExp("(^|"+j+")"+t+"("+j+"|$)"))&&E(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(r){var i=st.attr(r,t);return null==i?"!="===e:!e||(i+="","="===e?i===n:"!="===e?i!==n:"^="===e?n&&0===i.indexOf(n):"*="===e?n&&i.indexOf(n)>-1:"$="===e?n&&i.slice(-n.length)===n:"~="===e?(" "+i.replace(U," ")+" ").indexOf(n)>-1:"|="===e&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,l){var u,c,f,h,p,d,g=o!==a?"nextSibling":"previousSibling",m=e.parentNode,v=s&&e.nodeName.toLowerCase(),y=!l&&!s,_=!1;if(m){if(o){for(;g;){for(h=e;h=h[g];)if(s?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;d=g="only"===t&&!d&&"nextSibling"}return!0}if(d=[a?m.firstChild:m.lastChild],a&&y){for(_=(p=(u=(c=(f=(h=m)[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===x&&u[1])&&u[2],h=p&&m.childNodes[p];h=++p&&h&&h[g]||(_=p=0)||d.pop();)if(1===h.nodeType&&++_&&h===e){c[t]=[x,p,_];break}}else if(y&&(_=p=(u=(c=(f=(h=e)[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===x&&u[1]),!1===_)for(;(h=++p&&h&&h[g]||(_=p=0)||d.pop())&&((s?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++_||(y&&((c=(f=h[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]=[x,_]),h!==e)););return(_-=i)===r||_%r==0&&_/r>=0}}},PSEUDO:function(t,e){var n,i=r.pseudos[t]||r.setFilters[t.toLowerCase()]||st.error("unsupported pseudo: "+t);return i[w]?i(e):i.length>1?(n=[t,t,"",e],r.setFilters.hasOwnProperty(t.toLowerCase())?ut((function(t,n){for(var r,o=i(t,e),a=o.length;a--;)t[r=R(t,o[a])]=!(n[r]=o[a])})):function(t){return i(t,0,n)}):i}},pseudos:{not:ut((function(t){var e=[],n=[],r=s(t.replace(B,"$1"));return r[w]?ut((function(t,e,n,i){for(var o,a=r(t,null,i,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))})):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}})),has:ut((function(t){return function(e){return st(t,e).length>0}})),contains:ut((function(t){return t=t.replace(et,nt),function(e){return(e.textContent||i(e)).indexOf(t)>-1}})),lang:ut((function(t){return G.test(t||"")||st.error("unsupported lang: "+t),t=t.replace(et,nt).toLowerCase(),function(e){var n;do{if(n=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===d},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!r.pseudos.empty(t)},header:function(t){return Q.test(t.nodeName)},input:function(t){return K.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:mt((function(){return[0]})),last:mt((function(t,e){return[e-1]})),eq:mt((function(t,e,n){return[n<0?n+e:n]})),even:mt((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:mt((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:mt((function(t,e,n){for(var r=n<0?n+e:n>e?e:n;--r>=0;)t.push(r);return t})),gt:mt((function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[e]=pt(e);for(e in{submit:!0,reset:!0})r.pseudos[e]=dt(e);function yt(){}function _t(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function wt(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,s=T++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,l){var u,c,f,h=[x,s];if(l){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,l))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(c=(f=e[w]||(e[w]={}))[e.uniqueID]||(f[e.uniqueID]={}),i&&i===e.nodeName.toLowerCase())e=e[r]||e;else{if((u=c[o])&&u[0]===x&&u[1]===s)return h[2]=u[2];if(c[o]=h,h[2]=t(e,n,l))return!0}return!1}}function bt(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function xt(t,e,n,r,i){for(var o,a=[],s=0,l=t.length,u=null!=e;s<l;s++)(o=t[s])&&(n&&!n(o,r,i)||(a.push(o),u&&e.push(s)));return a}function Tt(t,e,n,r,i,o){return r&&!r[w]&&(r=Tt(r)),i&&!i[w]&&(i=Tt(i,o)),ut((function(o,a,s,l){var u,c,f,h=[],p=[],d=a.length,g=o||function(t,e,n){for(var r=0,i=e.length;r<i;r++)st(t,e[r],n);return n}(e||"*",s.nodeType?[s]:s,[]),m=!t||!o&&e?g:xt(g,h,t,s,l),v=n?i||(o?t:d||r)?[]:a:m;if(n&&n(m,v,s,l),r)for(u=xt(v,p),r(u,[],s,l),c=u.length;c--;)(f=u[c])&&(v[p[c]]=!(m[p[c]]=f));if(o){if(i||t){if(i){for(u=[],c=v.length;c--;)(f=v[c])&&u.push(m[c]=f);i(null,v=[],u,l)}for(c=v.length;c--;)(f=v[c])&&(u=i?R(o,f):h[c])>-1&&(o[u]=!(a[u]=f))}}else v=xt(v===a?v.splice(d,v.length):v),i?i(null,a,v,l):O.apply(a,v)}))}function Et(t){for(var e,n,i,o=t.length,a=r.relative[t[0].type],s=a||r.relative[" "],l=a?1:0,c=wt((function(t){return t===e}),s,!0),f=wt((function(t){return R(e,t)>-1}),s,!0),h=[function(t,n,r){var i=!a&&(r||n!==u)||((e=n).nodeType?c(t,n,r):f(t,n,r));return e=null,i}];l<o;l++)if(n=r.relative[t[l].type])h=[wt(bt(h),n)];else{if((n=r.filter[t[l].type].apply(null,t[l].matches))[w]){for(i=++l;i<o&&!r.relative[t[i].type];i++);return Tt(l>1&&bt(h),l>1&&_t(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(B,"$1"),n,l<i&&Et(t.slice(l,i)),i<o&&Et(t=t.slice(i)),i<o&&_t(t))}h.push(n)}return bt(h)}return yt.prototype=r.filters=r.pseudos,r.setFilters=new yt,a=st.tokenize=function(t,e){var n,i,o,a,s,l,u,c=C[t+" "];if(c)return e?0:c.slice(0);for(s=t,l=[],u=r.preFilter;s;){for(a in n&&!(i=W.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(o=[])),n=!1,(i=z.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(B," ")}),s=s.slice(n.length)),r.filter)!(i=$[a].exec(s))||u[a]&&!(i=u[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return e?s.length:s?st.error(t):C(t,l).slice(0)},s=st.compile=function(t,e){var n,i=[],o=[],s=S[t+" "];if(!s){for(e||(e=a(t)),n=e.length;n--;)(s=Et(e[n]))[w]?i.push(s):o.push(s);(s=S(t,function(t,e){var n=e.length>0,i=t.length>0,o=function(o,a,s,l,c){var f,d,m,v=0,y="0",_=o&&[],w=[],b=u,T=o||i&&r.find.TAG("*",c),E=x+=null==b?1:Math.random()||.1,C=T.length;for(c&&(u=a===p||a||c);y!==C&&null!=(f=T[y]);y++){if(i&&f){for(d=0,a||f.ownerDocument===p||(h(f),s=!g);m=t[d++];)if(m(f,a||p,s)){l.push(f);break}c&&(x=E)}n&&((f=!m&&f)&&v--,o&&_.push(f))}if(v+=y,n&&y!==v){for(d=0;m=e[d++];)m(_,w,a,s);if(o){if(v>0)for(;y--;)_[y]||w[y]||(w[y]=M.call(l));w=xt(w)}O.apply(l,w),c&&!o&&w.length>0&&v+e.length>1&&st.uniqueSort(l)}return c&&(x=E,u=b),_};return n?ut(o):o}(o,i))).selector=t}return s},l=st.select=function(t,e,n,i){var o,l,u,c,f,h="function"==typeof t&&t,p=!i&&a(t=h.selector||t);if(n=n||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===e.nodeType&&g&&r.relative[l[1].type]){if(!(e=(r.find.ID(u.matches[0].replace(et,nt),e)||[])[0]))return n;h&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(o=$.needsContext.test(t)?0:l.length;o--&&(u=l[o],!r.relative[c=u.type]);)if((f=r.find[c])&&(i=f(u.matches[0].replace(et,nt),tt.test(l[0].type)&&vt(e.parentNode)||e))){if(l.splice(o,1),!(t=i.length&&_t(l)))return O.apply(n,i),n;break}}return(h||s(t,p))(i,e,!g,n,!e||tt.test(t)&&vt(e.parentNode)||e),n},n.sortStable=w.split("").sort(N).join("")===w,n.detectDuplicates=!!f,h(),n.sortDetached=ct((function(t){return 1&t.compareDocumentPosition(p.createElement("fieldset"))})),ct((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||ft("type|href|height|width",(function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),n.attributes&&ct((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||ft("value",(function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),ct((function(t){return null==t.getAttribute("disabled")}))||ft(P,(function(t,e,n){var r;if(!n)return!0===t[e]?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null})),st}(n);T.find=S,T.expr=S.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=S.uniqueSort,T.text=S.getText,T.isXMLDoc=S.isXML,T.contains=S.contains,T.escapeSelector=S.escape;var A=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&T(t).is(n))break;r.push(t)}return r},N=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},D=T.expr.match.needsContext;function k(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var M=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function I(t,e,n){return y(e)?T.grep(t,(function(t,r){return!!e.call(t,r,t)!==n})):e.nodeType?T.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?T.grep(t,(function(t){return f.call(e,t)>-1!==n})):T.filter(e,t,n)}T.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?T.find.matchesSelector(r,t)?[r]:[]:T.find.matches(t,T.grep(e,(function(t){return 1===t.nodeType})))},T.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(T(t).filter((function(){for(e=0;e<r;e++)if(T.contains(i[e],this))return!0})));for(n=this.pushStack([]),e=0;e<r;e++)T.find(t,i[e],n);return r>1?T.uniqueSort(n):n},filter:function(t){return this.pushStack(I(this,t||[],!1))},not:function(t){return this.pushStack(I(this,t||[],!0))},is:function(t){return!!I(this,"string"==typeof t&&D.test(t)?T(t):t||[],!1).length}});var O,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||O,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:L.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof T?e[0]:e,T.merge(this,T.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:a,!0)),M.test(r[1])&&T.isPlainObject(e))for(r in e)y(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(i=a.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):y(t)?void 0!==n.ready?n.ready(t):t(T):T.makeArray(t,this)}).prototype=T.fn,O=T(a);var R=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function j(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}T.fn.extend({has:function(t){var e=T(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(T.contains(this,e[t]))return!0}))},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&T(t);if(!D.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&T.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?T.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?f.call(T(t),this[0]):f.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),T.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return A(t,"parentNode")},parentsUntil:function(t,e,n){return A(t,"parentNode",n)},next:function(t){return j(t,"nextSibling")},prev:function(t){return j(t,"previousSibling")},nextAll:function(t){return A(t,"nextSibling")},prevAll:function(t){return A(t,"previousSibling")},nextUntil:function(t,e,n){return A(t,"nextSibling",n)},prevUntil:function(t,e,n){return A(t,"previousSibling",n)},siblings:function(t){return N((t.parentNode||{}).firstChild,t)},children:function(t){return N(t.firstChild)},contents:function(t){return void 0!==t.contentDocument?t.contentDocument:(k(t,"template")&&(t=t.content||t),T.merge([],t.childNodes))}},(function(t,e){T.fn[t]=function(n,r){var i=T.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=T.filter(r,i)),this.length>1&&(P[t]||T.uniqueSort(i),R.test(t)&&i.reverse()),this.pushStack(i)}}));var H=/[^\x20\t\r\n\f]+/g;function F(t){return t}function q(t){throw t}function U(t,e,n,r){var i;try{t&&y(i=t.promise)?i.call(t).done(e).fail(n):t&&y(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}T.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return T.each(t.match(H)||[],(function(t,n){e[n]=!0})),e}(t):T.extend({},t);var e,n,r,i,o=[],a=[],s=-1,l=function(){for(i=i||t.once,r=e=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&t.stopOnFalse&&(s=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},u={add:function(){return o&&(n&&!e&&(s=o.length-1,a.push(n)),function e(n){T.each(n,(function(n,r){y(r)?t.unique&&u.has(r)||o.push(r):r&&r.length&&"string"!==x(r)&&e(r)}))}(arguments),n&&!e&&l()),this},remove:function(){return T.each(arguments,(function(t,e){for(var n;(n=T.inArray(e,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(t){return t?T.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=[t,(n=n||[]).slice?n.slice():n],a.push(n),e||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},T.extend({Deferred:function(t){var e=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return T.Deferred((function(n){T.each(e,(function(e,r){var i=y(t[r[4]])&&t[r[4]];o[r[1]]((function(){var t=i&&i.apply(this,arguments);t&&y(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[t]:arguments)}))})),t=null})).promise()},then:function(t,r,i){var o=0;function a(t,e,r,i){return function(){var s=this,l=arguments,u=function(){var n,u;if(!(t<o)){if((n=r.apply(s,l))===e.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(u)?i?u.call(n,a(o,e,F,i),a(o,e,q,i)):(o++,u.call(n,a(o,e,F,i),a(o,e,q,i),a(o,e,F,e.notifyWith))):(r!==F&&(s=void 0,l=[n]),(i||e.resolveWith)(s,l))}},c=i?u:function(){try{u()}catch(n){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(n,c.stackTrace),t+1>=o&&(r!==q&&(s=void 0,l=[n]),e.rejectWith(s,l))}};t?c():(T.Deferred.getStackHook&&(c.stackTrace=T.Deferred.getStackHook()),n.setTimeout(c))}}return T.Deferred((function(n){e[0][3].add(a(0,n,y(i)?i:F,n.notifyWith)),e[1][3].add(a(0,n,y(t)?t:F)),e[2][3].add(a(0,n,y(r)?r:q))})).promise()},promise:function(t){return null!=t?T.extend(t,i):i}},o={};return T.each(e,(function(t,n){var a=n[2],s=n[5];i[n[1]]=a.add,s&&a.add((function(){r=s}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith})),i.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),i=l.call(arguments),o=T.Deferred(),a=function(t){return function(n){r[t]=this,i[t]=arguments.length>1?l.call(arguments):n,--e||o.resolveWith(r,i)}};if(e<=1&&(U(t,o.done(a(n)).resolve,o.reject,!e),"pending"===o.state()||y(i[n]&&i[n].then)))return o.then();for(;n--;)U(i[n],a(n),o.reject);return o.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&B.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},T.readyException=function(t){n.setTimeout((function(){throw t}))};var W=T.Deferred();function z(){a.removeEventListener("DOMContentLoaded",z),n.removeEventListener("load",z),T.ready()}T.fn.ready=function(t){return W.then(t).catch((function(t){T.readyException(t)})),this},T.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--T.readyWait:T.isReady)||(T.isReady=!0,!0!==t&&--T.readyWait>0||W.resolveWith(a,[T]))}}),T.ready.then=W.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(T.ready):(a.addEventListener("DOMContentLoaded",z),n.addEventListener("load",z));var Y=function(t,e,n,r,i,o,a){var s=0,l=t.length,u=null==n;if("object"===x(n))for(s in i=!0,n)Y(t,e,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,y(r)||(a=!0),u&&(a?(e.call(t,r),e=null):(u=e,e=function(t,e,n){return u.call(T(t),n)})),e))for(;s<l;s++)e(t[s],n,a?r:r.call(t[s],s,e(t[s],n)));return i?t:u?e.call(t):l?e(t[0],n):o},V=/^-ms-/,G=/-([a-z])/g;function $(t,e){return e.toUpperCase()}function X(t){return t.replace(V,"ms-").replace(G,$)}var K=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function Q(){this.expando=T.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(t){var e=t[this.expando];return e||(e={},K(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[X(e)]=n;else for(r in e)i[X(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][X(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(X):(e=X(e))in r?[e]:e.match(H)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||T.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!T.isEmptyObject(e)}};var Z=new Q,J=new Q,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}J.set(t,e,n)}else n=void 0;return n}T.extend({hasData:function(t){return J.hasData(t)||Z.hasData(t)},data:function(t,e,n){return J.access(t,e,n)},removeData:function(t,e){J.remove(t,e)},_data:function(t,e,n){return Z.access(t,e,n)},_removeData:function(t,e){Z.remove(t,e)}}),T.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=J.get(o),1===o.nodeType&&!Z.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=X(r.slice(5)),nt(o,r,i[r]));Z.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each((function(){J.set(this,t)})):Y(this,(function(e){var n;if(o&&void 0===e)return void 0!==(n=J.get(o,t))?n:void 0!==(n=nt(o,t))?n:void 0;this.each((function(){J.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){J.remove(this,t)}))}}),T.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=Z.get(t,e),n&&(!r||Array.isArray(n)?r=Z.access(t,e,T.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=T.queue(t,e),r=n.length,i=n.shift(),o=T._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,(function(){T.dequeue(t,e)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Z.get(t,n)||Z.access(t,n,{empty:T.Callbacks("once memory").add((function(){Z.remove(t,[e+"queue",n])}))})}}),T.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?T.queue(this[0],t):void 0===e?this:this.each((function(){var n=T.queue(this,t,e);T._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&T.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){T.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=T.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=Z.get(o[a],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(e)}});var rt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,it=new RegExp("^(?:([+-])=|)("+rt+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],at=a.documentElement,st=function(t){return T.contains(t.ownerDocument,t)},lt={composed:!0};at.getRootNode&&(st=function(t){return T.contains(t.ownerDocument,t)||t.getRootNode(lt)===t.ownerDocument});var ut=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&st(t)&&"none"===T.css(t,"display")},ct=function(t,e,n,r){var i,o,a={};for(o in e)a[o]=t.style[o],t.style[o]=e[o];for(o in i=n.apply(t,r||[]),e)t.style[o]=a[o];return i};function ft(t,e,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return T.css(t,e,"")},l=s(),u=n&&n[3]||(T.cssNumber[e]?"":"px"),c=t.nodeType&&(T.cssNumber[e]||"px"!==u&&+l)&&it.exec(T.css(t,e));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;a--;)T.style(t,e,c+u),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),c/=o;c*=2,T.style(t,e,c+u),n=n||[]}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}var ht={};function pt(t){var e,n=t.ownerDocument,r=t.nodeName,i=ht[r];return i||(e=n.body.appendChild(n.createElement(r)),i=T.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),ht[r]=i,i)}function dt(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)(r=t[o]).style&&(n=r.style.display,e?("none"===n&&(i[o]=Z.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ut(r)&&(i[o]=pt(r))):"none"!==n&&(i[o]="none",Z.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}T.fn.extend({show:function(){return dt(this,!0)},hide:function(){return dt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){ut(this)?T(this).show():T(this).hide()}))}});var gt=/^(?:checkbox|radio)$/i,mt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,vt=/^$|^module$|\/(?:java|ecma)script/i,yt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function _t(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&k(t,e)?T.merge([t],n):n}function wt(t,e){for(var n=0,r=t.length;n<r;n++)Z.set(t[n],"globalEval",!e||Z.get(e[n],"globalEval"))}yt.optgroup=yt.option,yt.tbody=yt.tfoot=yt.colgroup=yt.caption=yt.thead,yt.th=yt.td;var bt,xt,Tt=/<|&#?\w+;/;function Et(t,e,n,r,i){for(var o,a,s,l,u,c,f=e.createDocumentFragment(),h=[],p=0,d=t.length;p<d;p++)if((o=t[p])||0===o)if("object"===x(o))T.merge(h,o.nodeType?[o]:o);else if(Tt.test(o)){for(a=a||f.appendChild(e.createElement("div")),s=(mt.exec(o)||["",""])[1].toLowerCase(),l=yt[s]||yt._default,a.innerHTML=l[1]+T.htmlPrefilter(o)+l[2],c=l[0];c--;)a=a.lastChild;T.merge(h,a.childNodes),(a=f.firstChild).textContent=""}else h.push(e.createTextNode(o));for(f.textContent="",p=0;o=h[p++];)if(r&&T.inArray(o,r)>-1)i&&i.push(o);else if(u=st(o),a=_t(f.appendChild(o),"script"),u&&wt(a),n)for(c=0;o=a[c++];)vt.test(o.type||"")&&n.push(o);return f}bt=a.createDocumentFragment().appendChild(a.createElement("div")),(xt=a.createElement("input")).setAttribute("type","radio"),xt.setAttribute("checked","checked"),xt.setAttribute("name","t"),bt.appendChild(xt),v.checkClone=bt.cloneNode(!0).cloneNode(!0).lastChild.checked,bt.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!bt.cloneNode(!0).lastChild.defaultValue;var Ct=/^key/,St=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,At=/^([^.]*)(?:\.(.+)|)/;function Nt(){return!0}function Dt(){return!1}function kt(t,e){return t===function(){try{return a.activeElement}catch(t){}}()==("focus"===e)}function Mt(t,e,n,r,i,o){var a,s;if("object"==typeof e){for(s in"string"!=typeof n&&(r=r||n,n=void 0),e)Mt(t,s,n,r,e[s],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Dt;else if(!i)return t;return 1===o&&(a=i,(i=function(t){return T().off(t),a.apply(this,arguments)}).guid=a.guid||(a.guid=T.guid++)),t.each((function(){T.event.add(this,e,i,r,n)}))}function It(t,e,n){n?(Z.set(t,e,!1),T.event.add(t,e,{namespace:!1,handler:function(t){var r,i,o=Z.get(this,e);if(1&t.isTrigger&&this[e]){if(o.length)(T.event.special[e]||{}).delegateType&&t.stopPropagation();else if(o=l.call(arguments),Z.set(this,e,o),r=n(this,e),this[e](),o!==(i=Z.get(this,e))||r?Z.set(this,e,!1):i={},o!==i)return t.stopImmediatePropagation(),t.preventDefault(),i.value}else o.length&&(Z.set(this,e,{value:T.event.trigger(T.extend(o[0],T.Event.prototype),o.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===Z.get(t,e)&&T.event.add(t,e,Nt)}T.event={global:{},add:function(t,e,n,r,i){var o,a,s,l,u,c,f,h,p,d,g,m=Z.get(t);if(m)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&T.find.matchesSelector(at,i),n.guid||(n.guid=T.guid++),(l=m.events)||(l=m.events={}),(a=m.handle)||(a=m.handle=function(e){return void 0!==T&&T.event.triggered!==e.type?T.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(H)||[""]).length;u--;)p=g=(s=At.exec(e[u])||[])[1],d=(s[2]||"").split(".").sort(),p&&(f=T.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=T.event.special[p]||{},c=T.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&T.expr.match.needsContext.test(i),namespace:d.join(".")},o),(h=l[p])||((h=l[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,d,a)||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,c):h.push(c),T.event.global[p]=!0)},remove:function(t,e,n,r,i){var o,a,s,l,u,c,f,h,p,d,g,m=Z.hasData(t)&&Z.get(t);if(m&&(l=m.events)){for(u=(e=(e||"").match(H)||[""]).length;u--;)if(p=g=(s=At.exec(e[u])||[])[1],d=(s[2]||"").split(".").sort(),p){for(f=T.event.special[p]||{},h=l[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)c=h[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,f.remove&&f.remove.call(t,c));a&&!h.length&&(f.teardown&&!1!==f.teardown.call(t,d,m.handle)||T.removeEvent(t,p,m.handle),delete l[p])}else for(p in l)T.event.remove(t,p+e[u],n,r,!0);T.isEmptyObject(l)&&Z.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,s=T.event.fix(t),l=new Array(arguments.length),u=(Z.get(this,"events")||{})[s.type]||[],c=T.event.special[s.type]||{};for(l[0]=s,e=1;e<arguments.length;e++)l[e]=arguments[e];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(a=T.event.handlers.call(this,s,u),e=0;(i=a[e++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==o.namespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((T.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,l))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(t,e){var n,r,i,o,a,s=[],l=e.delegateCount,u=t.target;if(l&&u.nodeType&&!("click"===t.type&&t.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==t.type||!0!==u.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[i=(r=e[n]).selector+" "]&&(a[i]=r.needsContext?T(i,this).index(u)>-1:T.find(i,this,null,[u]).length),a[i]&&o.push(r);o.length&&s.push({elem:u,handlers:o})}return u=this,l<e.length&&s.push({elem:u,handlers:e.slice(l)}),s},addProp:function(t,e){Object.defineProperty(T.Event.prototype,t,{enumerable:!0,configurable:!0,get:y(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[T.expando]?t:new T.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return gt.test(e.type)&&e.click&&k(e,"input")&&It(e,"click",Nt),!1},trigger:function(t){var e=this||t;return gt.test(e.type)&&e.click&&k(e,"input")&&It(e,"click"),!0},_default:function(t){var e=t.target;return gt.test(e.type)&&e.click&&k(e,"input")&&Z.get(e,"click")||k(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},T.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},T.Event=function(t,e){if(!(this instanceof T.Event))return new T.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Nt:Dt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&T.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:Dt,isPropagationStopped:Dt,isImmediatePropagationStopped:Dt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Nt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Nt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Nt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Ct.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&St.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},(function(t,e){T.event.special[t]={setup:function(){return It(this,t,kt),!1},trigger:function(){return It(this,t),!0},delegateType:e}})),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){T.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=this,i=t.relatedTarget,o=t.handleObj;return i&&(i===r||T.contains(r,i))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}})),T.fn.extend({on:function(t,e,n,r){return Mt(this,t,e,n,r)},one:function(t,e,n,r){return Mt(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,T(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Dt),this.each((function(){T.event.remove(this,t,n,e)}))}});var Ot=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Lt=/<script|<style|<link/i,Rt=/checked\s*(?:[^=]|=\s*.checked.)/i,Pt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function jt(t,e){return k(t,"table")&&k(11!==e.nodeType?e:e.firstChild,"tr")&&T(t).children("tbody")[0]||t}function Ht(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Ft(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function qt(t,e){var n,r,i,o,a,s,l,u;if(1===e.nodeType){if(Z.hasData(t)&&(o=Z.access(t),a=Z.set(e,o),u=o.events))for(i in delete a.handle,a.events={},u)for(n=0,r=u[i].length;n<r;n++)T.event.add(e,i,u[i][n]);J.hasData(t)&&(s=J.access(t),l=T.extend({},s),J.set(e,l))}}function Ut(t,e){var n=e.nodeName.toLowerCase();"input"===n&&gt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function Bt(t,e,n,r){e=u.apply([],e);var i,o,a,s,l,c,f=0,h=t.length,p=h-1,d=e[0],g=y(d);if(g||h>1&&"string"==typeof d&&!v.checkClone&&Rt.test(d))return t.each((function(i){var o=t.eq(i);g&&(e[0]=d.call(this,i,o.html())),Bt(o,e,n,r)}));if(h&&(o=(i=Et(e,t[0].ownerDocument,!1,t,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=(a=T.map(_t(i,"script"),Ht)).length;f<h;f++)l=i,f!==p&&(l=T.clone(l,!0,!0),s&&T.merge(a,_t(l,"script"))),n.call(t[f],l,f);if(s)for(c=a[a.length-1].ownerDocument,T.map(a,Ft),f=0;f<s;f++)l=a[f],vt.test(l.type||"")&&!Z.access(l,"globalEval")&&T.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?T._evalUrl&&!l.noModule&&T._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):b(l.textContent.replace(Pt,""),l,c))}return t}function Wt(t,e,n){for(var r,i=e?T.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||T.cleanData(_t(r)),r.parentNode&&(n&&st(r)&&wt(_t(r,"script")),r.parentNode.removeChild(r));return t}T.extend({htmlPrefilter:function(t){return t.replace(Ot,"<$1></$2>")},clone:function(t,e,n){var r,i,o,a,s=t.cloneNode(!0),l=st(t);if(!(v.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||T.isXMLDoc(t)))for(a=_t(s),r=0,i=(o=_t(t)).length;r<i;r++)Ut(o[r],a[r]);if(e)if(n)for(o=o||_t(t),a=a||_t(s),r=0,i=o.length;r<i;r++)qt(o[r],a[r]);else qt(t,s);return(a=_t(s,"script")).length>0&&wt(a,!l&&_t(t,"script")),s},cleanData:function(t){for(var e,n,r,i=T.event.special,o=0;void 0!==(n=t[o]);o++)if(K(n)){if(e=n[Z.expando]){if(e.events)for(r in e.events)i[r]?T.event.remove(n,r):T.removeEvent(n,r,e.handle);n[Z.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),T.fn.extend({detach:function(t){return Wt(this,t,!0)},remove:function(t){return Wt(this,t)},text:function(t){return Y(this,(function(t){return void 0===t?T.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Bt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||jt(this,t).appendChild(t)}))},prepend:function(){return Bt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=jt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Bt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Bt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(T.cleanData(_t(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return T.clone(this,t,e)}))},html:function(t){return Y(this,(function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Lt.test(t)&&!yt[(mt.exec(t)||["",""])[1].toLowerCase()]){t=T.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(T.cleanData(_t(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Bt(this,arguments,(function(e){var n=this.parentNode;T.inArray(this,t)<0&&(T.cleanData(_t(this)),n&&n.replaceChild(e,this))}),t)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){T.fn[t]=function(t){for(var n,r=[],i=T(t),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),T(i[a])[e](n),c.apply(r,n.get());return this.pushStack(r)}}));var zt=new RegExp("^("+rt+")(?!px)[a-z%]+$","i"),Yt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},Vt=new RegExp(ot.join("|"),"i");function Gt(t,e,n){var r,i,o,a,s=t.style;return(n=n||Yt(t))&&(""!==(a=n.getPropertyValue(e)||n[e])||st(t)||(a=T.style(t,e)),!v.pixelBoxStyles()&&zt.test(a)&&Vt.test(e)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function $t(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",at.appendChild(u).appendChild(c);var t=n.getComputedStyle(c);r="1%"!==t.top,l=12===e(t.marginLeft),c.style.right="60%",s=36===e(t.right),i=36===e(t.width),c.style.position="absolute",o=12===e(c.offsetWidth/3),at.removeChild(u),c=null}}function e(t){return Math.round(parseFloat(t))}var r,i,o,s,l,u=a.createElement("div"),c=a.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===c.style.backgroundClip,T.extend(v,{boxSizingReliable:function(){return t(),i},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),r},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),o}}))}();var Xt=["Webkit","Moz","ms"],Kt=a.createElement("div").style,Qt={};function Zt(t){var e=T.cssProps[t]||Qt[t];return e||(t in Kt?t:Qt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Xt.length;n--;)if((t=Xt[n]+e)in Kt)return t}(t)||t)}var Jt=/^(none|table(?!-c[ea]).+)/,te=/^--/,ee={position:"absolute",visibility:"hidden",display:"block"},ne={letterSpacing:"0",fontWeight:"400"};function re(t,e,n){var r=it.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function ie(t,e,n,r,i,o){var a="width"===e?1:0,s=0,l=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=T.css(t,n+ot[a],!0,i)),r?("content"===n&&(l-=T.css(t,"padding"+ot[a],!0,i)),"margin"!==n&&(l-=T.css(t,"border"+ot[a]+"Width",!0,i))):(l+=T.css(t,"padding"+ot[a],!0,i),"padding"!==n?l+=T.css(t,"border"+ot[a]+"Width",!0,i):s+=T.css(t,"border"+ot[a]+"Width",!0,i));return!r&&o>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-l-s-.5))||0),l}function oe(t,e,n){var r=Yt(t),i=(!v.boxSizingReliable()||n)&&"border-box"===T.css(t,"boxSizing",!1,r),o=i,a=Gt(t,e,r),s="offset"+e[0].toUpperCase()+e.slice(1);if(zt.test(a)){if(!n)return a;a="auto"}return(!v.boxSizingReliable()&&i||"auto"===a||!parseFloat(a)&&"inline"===T.css(t,"display",!1,r))&&t.getClientRects().length&&(i="border-box"===T.css(t,"boxSizing",!1,r),(o=s in t)&&(a=t[s])),(a=parseFloat(a)||0)+ie(t,e,n||(i?"border":"content"),o,r,a)+"px"}function ae(t,e,n,r,i){return new ae.prototype.init(t,e,n,r,i)}T.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Gt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,s=X(e),l=te.test(e),u=t.style;if(l||(e=Zt(s)),a=T.cssHooks[e]||T.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:u[e];"string"===(o=typeof n)&&(i=it.exec(n))&&i[1]&&(n=ft(t,e,i),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=i&&i[3]||(T.cssNumber[s]?"":"px")),v.clearCloneStyle||""!==n||0!==e.indexOf("background")||(u[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(l?u.setProperty(e,n):u[e]=n))}},css:function(t,e,n,r){var i,o,a,s=X(e);return te.test(e)||(e=Zt(s)),(a=T.cssHooks[e]||T.cssHooks[s])&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=Gt(t,e,r)),"normal"===i&&e in ne&&(i=ne[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),T.each(["height","width"],(function(t,e){T.cssHooks[e]={get:function(t,n,r){if(n)return!Jt.test(T.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?oe(t,e,r):ct(t,ee,(function(){return oe(t,e,r)}))},set:function(t,n,r){var i,o=Yt(t),a=!v.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===T.css(t,"boxSizing",!1,o),l=r?ie(t,e,r,s,o):0;return s&&a&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-ie(t,e,"border",!1,o)-.5)),l&&(i=it.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=T.css(t,e)),re(0,n,l)}}})),T.cssHooks.marginLeft=$t(v.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Gt(t,"marginLeft"))||t.getBoundingClientRect().left-ct(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),T.each({margin:"",padding:"",border:"Width"},(function(t,e){T.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+ot[r]+e]=o[r]||o[r-2]||o[0];return i}},"margin"!==t&&(T.cssHooks[t+e].set=re)})),T.fn.extend({css:function(t,e){return Y(this,(function(t,e,n){var r,i,o={},a=0;if(Array.isArray(e)){for(r=Yt(t),i=e.length;a<i;a++)o[e[a]]=T.css(t,e[a],!1,r);return o}return void 0!==n?T.style(t,e,n):T.css(t,e)}),t,e,arguments.length>1)}}),T.Tween=ae,ae.prototype={constructor:ae,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||T.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(T.cssNumber[n]?"":"px")},cur:function(){var t=ae.propHooks[this.prop];return t&&t.get?t.get(this):ae.propHooks._default.get(this)},run:function(t){var e,n=ae.propHooks[this.prop];return this.options.duration?this.pos=e=T.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ae.propHooks._default.set(this),this}},ae.prototype.init.prototype=ae.prototype,ae.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=T.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){T.fx.step[t.prop]?T.fx.step[t.prop](t):1!==t.elem.nodeType||!T.cssHooks[t.prop]&&null==t.elem.style[Zt(t.prop)]?t.elem[t.prop]=t.now:T.style(t.elem,t.prop,t.now+t.unit)}}},ae.propHooks.scrollTop=ae.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},T.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},T.fx=ae.prototype.init,T.fx.step={};var se,le,ue=/^(?:toggle|show|hide)$/,ce=/queueHooks$/;function fe(){le&&(!1===a.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(fe):n.setTimeout(fe,T.fx.interval),T.fx.tick())}function he(){return n.setTimeout((function(){se=void 0})),se=Date.now()}function pe(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)i["margin"+(n=ot[r])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function de(t,e,n){for(var r,i=(ge.tweeners[e]||[]).concat(ge.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function ge(t,e,n){var r,i,o=0,a=ge.prefilters.length,s=T.Deferred().always((function(){delete l.elem})),l=function(){if(i)return!1;for(var e=se||he(),n=Math.max(0,u.startTime+u.duration-e),r=1-(n/u.duration||0),o=0,a=u.tweens.length;o<a;o++)u.tweens[o].run(r);return s.notifyWith(t,[u,r,n]),r<1&&a?n:(a||s.notifyWith(t,[u,1,0]),s.resolveWith(t,[u]),!1)},u=s.promise({elem:t,props:T.extend({},e),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},n),originalProperties:e,originalOptions:n,startTime:se||he(),duration:n.duration,tweens:[],createTween:function(e,n){var r=T.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(r),r},stop:function(e){var n=0,r=e?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return e?(s.notifyWith(t,[u,1,0]),s.resolveWith(t,[u,e])):s.rejectWith(t,[u,e]),this}}),c=u.props;for(!function(t,e){var n,r,i,o,a;for(n in t)if(i=e[r=X(n)],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(a=T.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete t[r],o)n in t||(t[n]=o[n],e[n]=i);else e[r]=i}(c,u.opts.specialEasing);o<a;o++)if(r=ge.prefilters[o].call(u,t,c,u.opts))return y(r.stop)&&(T._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return T.map(c,de,u),y(u.opts.start)&&u.opts.start.call(t,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),T.fx.timer(T.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u}T.Animation=T.extend(ge,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ft(n.elem,t,it.exec(e),n),n}]},tweener:function(t,e){y(t)?(e=t,t=["*"]):t=t.match(H);for(var n,r=0,i=t.length;r<i;r++)n=t[r],ge.tweeners[n]=ge.tweeners[n]||[],ge.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,i,o,a,s,l,u,c,f="width"in e||"height"in e,h=this,p={},d=t.style,g=t.nodeType&&ut(t),m=Z.get(t,"fxshow");for(r in n.queue||(null==(a=T._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,h.always((function(){h.always((function(){a.unqueued--,T.queue(t,"fx").length||a.empty.fire()}))}))),e)if(i=e[r],ue.test(i)){if(delete e[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;g=!0}p[r]=m&&m[r]||T.style(t,r)}if((l=!T.isEmptyObject(e))||!T.isEmptyObject(p))for(r in f&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(u=m&&m.display)&&(u=Z.get(t,"display")),"none"===(c=T.css(t,"display"))&&(u?c=u:(dt([t],!0),u=t.style.display||u,c=T.css(t,"display"),dt([t]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===T.css(t,"float")&&(l||(h.done((function(){d.display=u})),null==u&&(c=d.display,u="none"===c?"":c)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",h.always((function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}))),l=!1,p)l||(m?"hidden"in m&&(g=m.hidden):m=Z.access(t,"fxshow",{display:u}),o&&(m.hidden=!g),g&&dt([t],!0),h.done((function(){for(r in g||dt([t]),Z.remove(t,"fxshow"),p)T.style(t,r,p[r])}))),l=de(g?m[r]:0,r,h),r in m||(m[r]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?ge.prefilters.unshift(t):ge.prefilters.push(t)}}),T.speed=function(t,e,n){var r=t&&"object"==typeof t?T.extend({},t):{complete:n||!n&&e||y(t)&&t,duration:t,easing:n&&e||e&&!y(e)&&e};return T.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in T.fx.speeds?r.duration=T.fx.speeds[r.duration]:r.duration=T.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&T.dequeue(this,r.queue)},r},T.fn.extend({fadeTo:function(t,e,n,r){return this.filter(ut).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=T.isEmptyObject(t),o=T.speed(e,n,r),a=function(){var e=ge(this,T.extend({},t),o);(i||Z.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each((function(){var e=!0,i=null!=t&&t+"queueHooks",o=T.timers,a=Z.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ce.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||T.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=Z.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=T.timers,a=r?r.length:0;for(n.finish=!0,T.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish}))}}),T.each(["toggle","show","hide"],(function(t,e){var n=T.fn[e];T.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(pe(e,!0),t,r,i)}})),T.each({slideDown:pe("show"),slideUp:pe("hide"),slideToggle:pe("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){T.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}})),T.timers=[],T.fx.tick=function(){var t,e=0,n=T.timers;for(se=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||T.fx.stop(),se=void 0},T.fx.timer=function(t){T.timers.push(t),T.fx.start()},T.fx.interval=13,T.fx.start=function(){le||(le=!0,fe())},T.fx.stop=function(){le=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(t,e){return t=T.fx&&T.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,r){var i=n.setTimeout(e,t);r.stop=function(){n.clearTimeout(i)}}))},function(){var t=a.createElement("input"),e=a.createElement("select").appendChild(a.createElement("option"));t.type="checkbox",v.checkOn=""!==t.value,v.optSelected=e.selected,(t=a.createElement("input")).value="t",t.type="radio",v.radioValue="t"===t.value}();var me,ve=T.expr.attrHandle;T.fn.extend({attr:function(t,e){return Y(this,T.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){T.removeAttr(this,t)}))}}),T.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?T.prop(t,e,n):(1===o&&T.isXMLDoc(t)||(i=T.attrHooks[e.toLowerCase()]||(T.expr.match.bool.test(e)?me:void 0)),void 0!==n?null===n?void T.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:null==(r=T.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!v.radioValue&&"radio"===e&&k(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(H);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),me={set:function(t,e,n){return!1===e?T.removeAttr(t,n):t.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=ve[e]||T.find.attr;ve[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=ve[a],ve[a]=i,i=null!=n(t,e,r)?a:null,ve[a]=o),i}}));var ye=/^(?:input|select|textarea|button)$/i,_e=/^(?:a|area)$/i;function we(t){return(t.match(H)||[]).join(" ")}function be(t){return t.getAttribute&&t.getAttribute("class")||""}function xe(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(H)||[]}T.fn.extend({prop:function(t,e){return Y(this,T.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[T.propFix[t]||t]}))}}),T.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&T.isXMLDoc(t)||(e=T.propFix[e]||e,i=T.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=T.find.attr(t,"tabindex");return e?parseInt(e,10):ye.test(t.nodeName)||_e.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(T.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){T.propFix[this.toLowerCase()]=this})),T.fn.extend({addClass:function(t){var e,n,r,i,o,a,s,l=0;if(y(t))return this.each((function(e){T(this).addClass(t.call(this,e,be(this)))}));if((e=xe(t)).length)for(;n=this[l++];)if(i=be(n),r=1===n.nodeType&&" "+we(i)+" "){for(a=0;o=e[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=we(r))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,a,s,l=0;if(y(t))return this.each((function(e){T(this).removeClass(t.call(this,e,be(this)))}));if(!arguments.length)return this.attr("class","");if((e=xe(t)).length)for(;n=this[l++];)if(i=be(n),r=1===n.nodeType&&" "+we(i)+" "){for(a=0;o=e[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(s=we(r))&&n.setAttribute("class",s)}return this},toggleClass:function(t,e){var n=typeof t,r="string"===n||Array.isArray(t);return"boolean"==typeof e&&r?e?this.addClass(t):this.removeClass(t):y(t)?this.each((function(n){T(this).toggleClass(t.call(this,n,be(this),e),e)})):this.each((function(){var e,i,o,a;if(r)for(i=0,o=T(this),a=xe(t);e=a[i++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=be(this))&&Z.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Z.get(this,"__className__")||""))}))},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+we(be(n))+" ").indexOf(e)>-1)return!0;return!1}});var Te=/\r/g;T.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=y(t),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?t.call(this,n,T(this).val()):t)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=T.map(i,(function(t){return null==t?"":t+""}))),(e=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))}))):i?(e=T.valHooks[i.type]||T.valHooks[i.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Te,""):null==n?"":n:void 0}}),T.extend({valHooks:{option:{get:function(t){var e=T.find.attr(t,"value");return null!=e?e:we(T.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,a="select-one"===t.type,s=a?null:[],l=a?o+1:i.length;for(r=o<0?l:a?o:0;r<l;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!k(n.parentNode,"optgroup"))){if(e=T(n).val(),a)return e;s.push(e)}return s},set:function(t,e){for(var n,r,i=t.options,o=T.makeArray(e),a=i.length;a--;)((r=i[a]).selected=T.inArray(T.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),T.each(["radio","checkbox"],(function(){T.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=T.inArray(T(t).val(),e)>-1}},v.checkOn||(T.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),v.focusin="onfocusin"in n;var Ee=/^(?:focusinfocus|focusoutblur)$/,Ce=function(t){t.stopPropagation()};T.extend(T.event,{trigger:function(t,e,r,i){var o,s,l,u,c,f,h,p,g=[r||a],m=d.call(t,"type")?t.type:t,v=d.call(t,"namespace")?t.namespace.split("."):[];if(s=p=l=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!Ee.test(m+T.event.triggered)&&(m.indexOf(".")>-1&&(v=m.split("."),m=v.shift(),v.sort()),c=m.indexOf(":")<0&&"on"+m,(t=t[T.expando]?t:new T.Event(m,"object"==typeof t&&t)).isTrigger=i?2:3,t.namespace=v.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),e=null==e?[t]:T.makeArray(e,[t]),h=T.event.special[m]||{},i||!h.trigger||!1!==h.trigger.apply(r,e))){if(!i&&!h.noBubble&&!_(r)){for(u=h.delegateType||m,Ee.test(u+m)||(s=s.parentNode);s;s=s.parentNode)g.push(s),l=s;l===(r.ownerDocument||a)&&g.push(l.defaultView||l.parentWindow||n)}for(o=0;(s=g[o++])&&!t.isPropagationStopped();)p=s,t.type=o>1?u:h.bindType||m,(f=(Z.get(s,"events")||{})[t.type]&&Z.get(s,"handle"))&&f.apply(s,e),(f=c&&s[c])&&f.apply&&K(s)&&(t.result=f.apply(s,e),!1===t.result&&t.preventDefault());return t.type=m,i||t.isDefaultPrevented()||h._default&&!1!==h._default.apply(g.pop(),e)||!K(r)||c&&y(r[m])&&!_(r)&&((l=r[c])&&(r[c]=null),T.event.triggered=m,t.isPropagationStopped()&&p.addEventListener(m,Ce),r[m](),t.isPropagationStopped()&&p.removeEventListener(m,Ce),T.event.triggered=void 0,l&&(r[c]=l)),t.result}},simulate:function(t,e,n){var r=T.extend(new T.Event,n,{type:t,isSimulated:!0});T.event.trigger(r,null,e)}}),T.fn.extend({trigger:function(t,e){return this.each((function(){T.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return T.event.trigger(t,e,n,!0)}}),v.focusin||T.each({focus:"focusin",blur:"focusout"},(function(t,e){var n=function(t){T.event.simulate(e,t.target,T.event.fix(t))};T.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=Z.access(r,e);i||r.addEventListener(t,n,!0),Z.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Z.access(r,e)-1;i?Z.access(r,e,i):(r.removeEventListener(t,n,!0),Z.remove(r,e))}}}));var Se=n.location,Ae=Date.now(),Ne=/\?/;T.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+t),e};var De=/\[\]$/,ke=/\r?\n/g,Me=/^(?:submit|button|image|reset|file)$/i,Ie=/^(?:input|select|textarea|keygen)/i;function Oe(t,e,n,r){var i;if(Array.isArray(e))T.each(e,(function(e,i){n||De.test(t)?r(t,i):Oe(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)}));else if(n||"object"!==x(e))r(t,e);else for(i in e)Oe(t+"["+i+"]",e[i],n,r)}T.param=function(t,e){var n,r=[],i=function(t,e){var n=y(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!T.isPlainObject(t))T.each(t,(function(){i(this.name,this.value)}));else for(n in t)Oe(n,t[n],e,i);return r.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=T.prop(this,"elements");return t?T.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!T(this).is(":disabled")&&Ie.test(this.nodeName)&&!Me.test(t)&&(this.checked||!gt.test(t))})).map((function(t,e){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,(function(t){return{name:e.name,value:t.replace(ke,"\r\n")}})):{name:e.name,value:n.replace(ke,"\r\n")}})).get()}});var Le=/%20/g,Re=/#.*$/,Pe=/([?&])_=[^&]*/,je=/^(.*?):[ \t]*([^\r\n]*)$/gm,He=/^(?:GET|HEAD)$/,Fe=/^\/\//,qe={},Ue={},Be="*/".concat("*"),We=a.createElement("a");function ze(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(H)||[];if(y(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function Ye(t,e,n,r){var i={},o=t===Ue;function a(s){var l;return i[s]=!0,T.each(t[s]||[],(function(t,s){var u=s(e,n,r);return"string"!=typeof u||o||i[u]?o?!(l=u):void 0:(e.dataTypes.unshift(u),a(u),!1)})),l}return a(e.dataTypes[0])||!i["*"]&&a("*")}function Ve(t,e){var n,r,i=T.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&T.extend(!0,t,r),t}We.href=Se.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Se.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Se.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Be,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ve(Ve(t,T.ajaxSettings),e):Ve(T.ajaxSettings,t)},ajaxPrefilter:ze(qe),ajaxTransport:ze(Ue),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var r,i,o,s,l,u,c,f,h,p,d=T.ajaxSetup({},e),g=d.context||d,m=d.context&&(g.nodeType||g.jquery)?T(g):T.event,v=T.Deferred(),y=T.Callbacks("once memory"),_=d.statusCode||{},w={},b={},x="canceled",E={readyState:0,getResponseHeader:function(t){var e;if(c){if(!s)for(s={};e=je.exec(o);)s[e[1].toLowerCase()+" "]=(s[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=s[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(t,e){return null==c&&(t=b[t.toLowerCase()]=b[t.toLowerCase()]||t,w[t]=e),this},overrideMimeType:function(t){return null==c&&(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)E.always(t[E.status]);else for(e in t)_[e]=[_[e],t[e]];return this},abort:function(t){var e=t||x;return r&&r.abort(e),C(0,e),this}};if(v.promise(E),d.url=((t||d.url||Se.href)+"").replace(Fe,Se.protocol+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(H)||[""],null==d.crossDomain){u=a.createElement("a");try{u.href=d.url,u.href=u.href,d.crossDomain=We.protocol+"//"+We.host!=u.protocol+"//"+u.host}catch(t){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=T.param(d.data,d.traditional)),Ye(qe,d,e,E),c)return E;for(h in(f=T.event&&d.global)&&0==T.active++&&T.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!He.test(d.type),i=d.url.replace(Re,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(Le,"+")):(p=d.url.slice(i.length),d.data&&(d.processData||"string"==typeof d.data)&&(i+=(Ne.test(i)?"&":"?")+d.data,delete d.data),!1===d.cache&&(i=i.replace(Pe,"$1"),p=(Ne.test(i)?"&":"?")+"_="+Ae+++p),d.url=i+p),d.ifModified&&(T.lastModified[i]&&E.setRequestHeader("If-Modified-Since",T.lastModified[i]),T.etag[i]&&E.setRequestHeader("If-None-Match",T.etag[i])),(d.data&&d.hasContent&&!1!==d.contentType||e.contentType)&&E.setRequestHeader("Content-Type",d.contentType),E.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Be+"; q=0.01":""):d.accepts["*"]),d.headers)E.setRequestHeader(h,d.headers[h]);if(d.beforeSend&&(!1===d.beforeSend.call(g,E,d)||c))return E.abort();if(x="abort",y.add(d.complete),E.done(d.success),E.fail(d.error),r=Ye(Ue,d,e,E)){if(E.readyState=1,f&&m.trigger("ajaxSend",[E,d]),c)return E;d.async&&d.timeout>0&&(l=n.setTimeout((function(){E.abort("timeout")}),d.timeout));try{c=!1,r.send(w,C)}catch(t){if(c)throw t;C(-1,t)}}else C(-1,"No Transport");function C(t,e,a,s){var u,h,p,w,b,x=e;c||(c=!0,l&&n.clearTimeout(l),r=void 0,o=s||"",E.readyState=t>0?4:0,u=t>=200&&t<300||304===t,a&&(w=function(t,e,n){for(var r,i,o,a,s=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||t.converters[i+" "+l[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(d,E,a)),w=function(t,e,n,r){var i,o,a,s,l,u={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)u[a.toLowerCase()]=t.converters[a];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=u[l+" "+o]||u["* "+o]))for(i in u)if((s=i.split(" "))[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[i]:!0!==u[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(d,w,E,u),u?(d.ifModified&&((b=E.getResponseHeader("Last-Modified"))&&(T.lastModified[i]=b),(b=E.getResponseHeader("etag"))&&(T.etag[i]=b)),204===t||"HEAD"===d.type?x="nocontent":304===t?x="notmodified":(x=w.state,h=w.data,u=!(p=w.error))):(p=x,!t&&x||(x="error",t<0&&(t=0))),E.status=t,E.statusText=(e||x)+"",u?v.resolveWith(g,[h,x,E]):v.rejectWith(g,[E,x,p]),E.statusCode(_),_=void 0,f&&m.trigger(u?"ajaxSuccess":"ajaxError",[E,d,u?h:p]),y.fireWith(g,[E,x]),f&&(m.trigger("ajaxComplete",[E,d]),--T.active||T.event.trigger("ajaxStop")))}return E},getJSON:function(t,e,n){return T.get(t,e,n,"json")},getScript:function(t,e){return T.get(t,void 0,e,"script")}}),T.each(["get","post"],(function(t,e){T[e]=function(t,n,r,i){return y(n)&&(i=i||r,r=n,n=void 0),T.ajax(T.extend({url:t,type:e,dataType:i,data:n,success:r},T.isPlainObject(t)&&t))}})),T._evalUrl=function(t,e){return T.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){T.globalEval(t,e)}})},T.fn.extend({wrapAll:function(t){var e;return this[0]&&(y(t)&&(t=t.call(this[0])),e=T(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return y(t)?this.each((function(e){T(this).wrapInner(t.call(this,e))})):this.each((function(){var e=T(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=y(t);return this.each((function(n){T(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){T(this).replaceWith(this.childNodes)})),this}}),T.expr.pseudos.hidden=function(t){return!T.expr.pseudos.visible(t)},T.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var Ge={0:200,1223:204},$e=T.ajaxSettings.xhr();v.cors=!!$e&&"withCredentials"in $e,v.ajax=$e=!!$e,T.ajaxTransport((function(t){var e,r;if(v.cors||$e&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];for(a in t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);e=function(t){return function(){e&&(e=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Ge[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=e(),r=s.onerror=s.ontimeout=e("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){e&&r()}))},e=e("abort");try{s.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),T.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return T.globalEval(t),t}}}),T.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),T.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(r,i){e=T("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),a.head.appendChild(e[0])},abort:function(){n&&n()}}}));var Xe,Ke=[],Qe=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ke.pop()||T.expando+"_"+Ae++;return this[t]=!0,t}}),T.ajaxPrefilter("json jsonp",(function(t,e,r){var i,o,a,s=!1!==t.jsonp&&(Qe.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qe.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=y(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Qe,"$1"+i):!1!==t.jsonp&&(t.url+=(Ne.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||T.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always((function(){void 0===o?T(n).removeProp(i):n[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,Ke.push(i)),a&&y(o)&&o(a[0]),a=o=void 0})),"script"})),v.createHTMLDocument=((Xe=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Xe.childNodes.length),T.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(v.createHTMLDocument?((r=(e=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,e.head.appendChild(r)):e=a),o=!n&&[],(i=M.exec(t))?[e.createElement(i[1])]:(i=Et([t],e,o),o&&o.length&&T(o).remove(),T.merge([],i.childNodes)));var r,i,o},T.fn.load=function(t,e,n){var r,i,o,a=this,s=t.indexOf(" ");return s>-1&&(r=we(t.slice(s)),t=t.slice(0,s)),y(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&T.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done((function(t){o=arguments,a.html(r?T("<div>").append(T.parseHTML(t)).find(r):t)})).always(n&&function(t,e){a.each((function(){n.apply(this,o||[t.responseText,e,t])}))}),this},T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){T.fn[e]=function(t){return this.on(e,t)}})),T.expr.pseudos.animated=function(t){return T.grep(T.timers,(function(e){return t===e.elem})).length},T.offset={setOffset:function(t,e,n){var r,i,o,a,s,l,u=T.css(t,"position"),c=T(t),f={};"static"===u&&(t.style.position="relative"),s=c.offset(),o=T.css(t,"top"),l=T.css(t,"left"),("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(l)||0),y(e)&&(e=e.call(t,n,T.extend({},s))),null!=e.top&&(f.top=e.top-s.top+a),null!=e.left&&(f.left=e.left-s.left+i),"using"in e?e.using.call(t,f):c.css(f)}},T.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){T.offset.setOffset(this,t,e)}));var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,r=this[0],i={top:0,left:0};if("fixed"===T.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),n=r.ownerDocument,t=r.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===T.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((i=T(t).offset()).top+=T.css(t,"borderTopWidth",!0),i.left+=T.css(t,"borderLeftWidth",!0))}return{top:e.top-i.top-T.css(r,"marginTop",!0),left:e.left-i.left-T.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===T.css(t,"position");)t=t.offsetParent;return t||at}))}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;T.fn[t]=function(r){return Y(this,(function(t,r,i){var o;if(_(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[e]:t[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i}),t,r,arguments.length)}})),T.each(["top","left"],(function(t,e){T.cssHooks[e]=$t(v.pixelPosition,(function(t,n){if(n)return n=Gt(t,e),zt.test(n)?T(t).position()[e]+"px":n}))})),T.each({Height:"height",Width:"width"},(function(t,e){T.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,r){T.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return Y(this,(function(e,n,i){var o;return _(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?T.css(e,n,s):T.style(e,n,i,s)}),e,a?i:void 0,a)}}))})),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){T.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}})),T.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),T.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),T.proxy=function(t,e){var n,r,i;if("string"==typeof e&&(n=t[e],e=t,t=n),y(t))return r=l.call(arguments,2),(i=function(){return t.apply(e||this,r.concat(l.call(arguments)))}).guid=t.guid=t.guid||T.guid++,i},T.holdReady=function(t){t?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=k,T.isFunction=y,T.isWindow=_,T.camelCase=X,T.type=x,T.now=Date.now,T.isNumeric=function(t){var e=T.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},void 0===(r=function(){return T}.apply(e,[]))||(t.exports=r);var Ze=n.jQuery,Je=n.$;return T.noConflict=function(t){return n.$===T&&(n.$=Je),t&&n.jQuery===T&&(n.jQuery=Ze),T},i||(n.jQuery=n.$=T),T}))},function(t,e,n){var r,i;
/*!
 * ScrollMagic v2.0.7 (2019-05-07)
 * The javascript library for magical scroll interactions.
 * (c) 2019 Jan Paepke (@janpaepke)
 * Project Website: http://scrollmagic.io
 * 
 * @version 2.0.7
 * @license Dual licensed under MIT license and GPL.
 * @author Jan Paepke - e-mail@janpaepke.de
 *
 * @file ScrollMagic main library.
 */void 0===(i="function"==typeof(r=function(){"use strict";var t=function(){r.log(2,"(COMPATIBILITY NOTICE) -> As of ScrollMagic 2.0.0 you need to use 'new ScrollMagic.Controller()' to create a new controller instance. Use 'new ScrollMagic.Scene()' to instance a scene.")};t.version="2.0.7",window.addEventListener("mousewheel",(function(){})),t.Controller=function(n){var i,o,a="ScrollMagic.Controller",s=e.defaults,l=this,u=r.extend({},s,n),c=[],f=!1,h=0,p="PAUSED",d=!0,g=0,m=!0,v=function(){u.refreshInterval>0&&(o=window.setTimeout(E,u.refreshInterval))},y=function(){return u.vertical?r.get.scrollTop(u.container):r.get.scrollLeft(u.container)},_=function(){return u.vertical?r.get.height(u.container):r.get.width(u.container)},w=this._setScrollPos=function(t){u.vertical?d?window.scrollTo(r.get.scrollLeft(),t):u.container.scrollTop=t:d?window.scrollTo(t,r.get.scrollTop()):u.container.scrollLeft=t},b=function(){if(m&&f){var t=r.type.Array(f)?f:c.slice(0);f=!1;var e=h,n=(h=l.scrollPos())-e;0!==n&&(p=n>0?"FORWARD":"REVERSE"),"REVERSE"===p&&t.reverse(),t.forEach((function(e,n){C(3,"updating Scene "+(n+1)+"/"+t.length+" ("+c.length+" total)"),e.update(!0)})),0===t.length&&u.loglevel>=3&&C(3,"updating 0 Scenes (nothing added to controller)")}},x=function(){i=r.rAF(b)},T=function(t){C(3,"event fired causing an update:",t.type),"resize"==t.type&&(g=_(),p="PAUSED"),!0!==f&&(f=!0,x())},E=function(){if(!d&&g!=_()){var t;try{t=new Event("resize",{bubbles:!1,cancelable:!1})}catch(e){(t=document.createEvent("Event")).initEvent("resize",!1,!1)}u.container.dispatchEvent(t)}c.forEach((function(t,e){t.refresh()})),v()},C=this._log=function(t,e){u.loglevel>=t&&(Array.prototype.splice.call(arguments,1,0,"("+a+") ->"),r.log.apply(window,arguments))};this._options=u;var S=function(t){if(t.length<=1)return t;var e=t.slice(0);return e.sort((function(t,e){return t.scrollOffset()>e.scrollOffset()?1:-1})),e};return this.addScene=function(e){if(r.type.Array(e))e.forEach((function(t,e){l.addScene(t)}));else if(e instanceof t.Scene){if(e.controller()!==l)e.addTo(l);else if(c.indexOf(e)<0){for(var n in c.push(e),c=S(c),e.on("shift.controller_sort",(function(){c=S(c)})),u.globalSceneOptions)e[n]&&e[n].call(e,u.globalSceneOptions[n]);C(3,"adding Scene (now "+c.length+" total)")}}else C(1,"ERROR: invalid argument supplied for '.addScene()'");return l},this.removeScene=function(t){if(r.type.Array(t))t.forEach((function(t,e){l.removeScene(t)}));else{var e=c.indexOf(t);e>-1&&(t.off("shift.controller_sort"),c.splice(e,1),C(3,"removing Scene (now "+c.length+" left)"),t.remove())}return l},this.updateScene=function(e,n){return r.type.Array(e)?e.forEach((function(t,e){l.updateScene(t,n)})):n?e.update(!0):!0!==f&&e instanceof t.Scene&&(-1==(f=f||[]).indexOf(e)&&f.push(e),f=S(f),x()),l},this.update=function(t){return T({type:"resize"}),t&&b(),l},this.scrollTo=function(e,n){if(r.type.Number(e))w.call(u.container,e,n);else if(e instanceof t.Scene)e.controller()===l?l.scrollTo(e.scrollOffset(),n):C(2,"scrollTo(): The supplied scene does not belong to this controller. Scroll cancelled.",e);else if(r.type.Function(e))w=e;else{var i=r.get.elements(e)[0];if(i){for(;i.parentNode.hasAttribute("data-scrollmagic-pin-spacer");)i=i.parentNode;var o=u.vertical?"top":"left",a=r.get.offset(u.container),s=r.get.offset(i);d||(a[o]-=l.scrollPos()),l.scrollTo(s[o]-a[o],n)}else C(2,"scrollTo(): The supplied argument is invalid. Scroll cancelled.",e)}return l},this.scrollPos=function(t){return arguments.length?(r.type.Function(t)?y=t:C(2,"Provided value for method 'scrollPos' is not a function. To change the current scroll position use 'scrollTo()'."),l):y.call(l)},this.info=function(t){var e={size:g,vertical:u.vertical,scrollPos:h,scrollDirection:p,container:u.container,isDocument:d};return arguments.length?void 0!==e[t]?e[t]:void C(1,'ERROR: option "'+t+'" is not available'):e},this.loglevel=function(t){return arguments.length?(u.loglevel!=t&&(u.loglevel=t),l):u.loglevel},this.enabled=function(t){return arguments.length?(m!=t&&(m=!!t,l.updateScene(c,!0)),l):m},this.destroy=function(t){window.clearTimeout(o);for(var e=c.length;e--;)c[e].destroy(t);return u.container.removeEventListener("resize",T),u.container.removeEventListener("scroll",T),r.cAF(i),C(3,"destroyed "+a+" (reset: "+(t?"true":"false")+")"),null},function(){for(var e in u)s.hasOwnProperty(e)||(C(2,'WARNING: Unknown option "'+e+'"'),delete u[e]);if(u.container=r.get.elements(u.container)[0],!u.container)throw C(1,"ERROR creating object "+a+": No valid scroll container supplied"),a+" init failed.";(d=u.container===window||u.container===document.body||!document.body.contains(u.container))&&(u.container=window),g=_(),u.container.addEventListener("resize",T),u.container.addEventListener("scroll",T);var n=parseInt(u.refreshInterval,10);u.refreshInterval=r.type.Number(n)?n:s.refreshInterval,v(),C(3,"added new "+a+" controller (v"+t.version+")")}(),l};var e={defaults:{container:window,vertical:!0,globalSceneOptions:{},loglevel:2,refreshInterval:100}};t.Controller.addOption=function(t,n){e.defaults[t]=n},t.Controller.extend=function(e){var n=this;t.Controller=function(){return n.apply(this,arguments),this.$super=r.extend({},this),e.apply(this,arguments)||this},r.extend(t.Controller,n),t.Controller.prototype=n.prototype,t.Controller.prototype.constructor=t.Controller},t.Scene=function(e){var i,o,a="ScrollMagic.Scene",s=n.defaults,l=this,u=r.extend({},s,e),c="BEFORE",f=0,h={start:0,end:0},p=0,d=!0,g={};this.on=function(t,e){return r.type.Function(e)?(t=t.trim().split(" ")).forEach((function(t){var n=t.split("."),r=n[0],i=n[1];"*"!=r&&(g[r]||(g[r]=[]),g[r].push({namespace:i||"",callback:e}))})):m(1,"ERROR when calling '.on()': Supplied callback for '"+t+"' is not a valid function!"),l},this.off=function(t,e){return t?((t=t.trim().split(" ")).forEach((function(t,n){var r=t.split("."),i=r[0],o=r[1]||"";("*"===i?Object.keys(g):[i]).forEach((function(t){for(var n=g[t]||[],r=n.length;r--;){var i=n[r];!i||o!==i.namespace&&"*"!==o||e&&e!=i.callback||n.splice(r,1)}n.length||delete g[t]}))})),l):(m(1,"ERROR: Invalid event name supplied."),l)},this.trigger=function(e,n){if(e){var r=e.trim().split("."),i=r[0],o=r[1],a=g[i];m(3,"event fired:",i,n?"->":"",n||""),a&&a.forEach((function(e,r){o&&o!==e.namespace||e.callback.call(l,new t.Event(i,e.namespace,l,n))}))}else m(1,"ERROR: Invalid event name supplied.");return l},l.on("change.internal",(function(t){"loglevel"!==t.what&&"tweenChanges"!==t.what&&("triggerElement"===t.what?b():"reverse"===t.what&&l.update())})).on("shift.internal",(function(t){_(),l.update()}));var m=this._log=function(t,e){u.loglevel>=t&&(Array.prototype.splice.call(arguments,1,0,"("+a+") ->"),r.log.apply(window,arguments))};this.addTo=function(e){return e instanceof t.Controller?o!=e&&(o&&o.removeScene(l),o=e,E(),w(!0),b(!0),_(),o.info("container").addEventListener("resize",x),e.addScene(l),l.trigger("add",{controller:o}),m(3,"added "+a+" to controller"),l.update()):m(1,"ERROR: supplied argument of 'addTo()' is not a valid ScrollMagic Controller"),l},this.enabled=function(t){return arguments.length?(d!=t&&(d=!!t,l.update(!0)),l):d},this.remove=function(){if(o){o.info("container").removeEventListener("resize",x);var t=o;o=void 0,t.removeScene(l),l.trigger("remove"),m(3,"removed "+a+" from controller")}return l},this.destroy=function(t){return l.trigger("destroy",{reset:t}),l.remove(),l.off("*.*"),m(3,"destroyed "+a+" (reset: "+(t?"true":"false")+")"),null},this.update=function(t){if(o)if(t)if(o.enabled()&&d){var e,n=o.info("scrollPos");e=u.duration>0?(n-h.start)/(h.end-h.start):n>=h.start?1:0,l.trigger("update",{startPos:h.start,endPos:h.end,scrollPos:n}),l.progress(e)}else v&&"DURING"===c&&A(!0);else o.updateScene(l,!1);return l},this.refresh=function(){return w(),b(),l},this.progress=function(t){if(arguments.length){var e=!1,n=c,r=o?o.info("scrollDirection"):"PAUSED",i=u.reverse||t>=f;if(0===u.duration?(e=f!=t,c=0==(f=t<1&&i?0:1)?"BEFORE":"DURING"):t<0&&"BEFORE"!==c&&i?(f=0,c="BEFORE",e=!0):t>=0&&t<1&&i?(f=t,c="DURING",e=!0):t>=1&&"AFTER"!==c?(f=1,c="AFTER",e=!0):"DURING"!==c||i||A(),e){var a={progress:f,state:c,scrollDirection:r},s=c!=n,h=function(t){l.trigger(t,a)};s&&"DURING"!==n&&(h("enter"),h("BEFORE"===n?"start":"end")),h("progress"),s&&"DURING"!==c&&(h("BEFORE"===c?"start":"end"),h("leave"))}return l}return f};var v,y,_=function(){h={start:p+u.offset},o&&u.triggerElement&&(h.start-=o.info("size")*u.triggerHook),h.end=h.start+u.duration},w=function(t){i&&C("duration",i.call(l))&&!t&&(l.trigger("change",{what:"duration",newval:u.duration}),l.trigger("shift",{reason:"duration"}))},b=function(t){var e=0,n=u.triggerElement;if(o&&(n||p>0)){if(n)if(n.parentNode){for(var i=o.info(),a=r.get.offset(i.container),s=i.vertical?"top":"left";n.parentNode.hasAttribute("data-scrollmagic-pin-spacer");)n=n.parentNode;var c=r.get.offset(n);i.isDocument||(a[s]-=o.scrollPos()),e=c[s]-a[s]}else m(2,"WARNING: triggerElement was removed from DOM and will be reset to",void 0),l.triggerElement(void 0);var f=e!=p;p=e,f&&!t&&l.trigger("shift",{reason:"triggerElementPosition"})}},x=function(t){u.triggerHook>0&&l.trigger("shift",{reason:"containerResize"})},T=r.extend(n.validate,{duration:function(t){if(r.type.String(t)&&t.match(/^(\.|\d)*\d+%$/)){var e=parseFloat(t)/100;t=function(){return o?o.info("size")*e:0}}if(r.type.Function(t)){i=t;try{t=parseFloat(i.call(l))}catch(e){t=-1}}if(t=parseFloat(t),!r.type.Number(t)||t<0)throw i?(i=void 0,['Invalid return value of supplied function for option "duration":',t]):['Invalid value for option "duration":',t];return t}}),E=function(t){(t=arguments.length?[t]:Object.keys(T)).forEach((function(t,e){var n;if(T[t])try{n=T[t](u[t])}catch(e){n=s[t];var i=r.type.String(e)?[e]:e;r.type.Array(i)?(i[0]="ERROR: "+i[0],i.unshift(1),m.apply(this,i)):m(1,"ERROR: Problem executing validation callback for option '"+t+"':",e.message)}finally{u[t]=n}}))},C=function(t,e){var n=!1,r=u[t];return u[t]!=e&&(u[t]=e,E(t),n=r!=u[t]),n},S=function(t){l[t]||(l[t]=function(e){return arguments.length?("duration"===t&&(i=void 0),C(t,e)&&(l.trigger("change",{what:t,newval:u[t]}),n.shifts.indexOf(t)>-1&&l.trigger("shift",{reason:t})),l):u[t]})};this.controller=function(){return o},this.state=function(){return c},this.scrollOffset=function(){return h.start},this.triggerPosition=function(){var t=u.offset;return o&&(u.triggerElement?t+=p:t+=o.info("size")*l.triggerHook()),t},l.on("shift.internal",(function(t){var e="duration"===t.reason;("AFTER"===c&&e||"DURING"===c&&0===u.duration)&&A(),e&&N()})).on("progress.internal",(function(t){A()})).on("add.internal",(function(t){N()})).on("destroy.internal",(function(t){l.removePin(t.reset)}));var A=function(t){if(v&&o){var e=o.info(),n=y.spacer.firstChild;if(t||"DURING"!==c){var i={position:y.inFlow?"relative":"absolute",top:0,left:0},a=r.css(n,"position")!=i.position;y.pushFollowers?u.duration>0&&("AFTER"===c&&0===parseFloat(r.css(y.spacer,"padding-top"))?a=!0:"BEFORE"===c&&0===parseFloat(r.css(y.spacer,"padding-bottom"))&&(a=!0)):i[e.vertical?"top":"left"]=u.duration*f,r.css(n,i),a&&N()}else{"fixed"!=r.css(n,"position")&&(r.css(n,{position:"fixed"}),N());var s=r.get.offset(y.spacer,!0),l=u.reverse||0===u.duration?e.scrollPos-h.start:Math.round(f*u.duration*10)/10;s[e.vertical?"top":"left"]+=l,r.css(y.spacer.firstChild,{top:s.top,left:s.left})}}},N=function(){if(v&&o&&y.inFlow){var t="DURING"===c,e=o.info("vertical"),n=y.spacer.firstChild,i=r.isMarginCollapseType(r.css(y.spacer,"display")),a={};y.relSize.width||y.relSize.autoFullWidth?t?r.css(v,{width:r.get.width(y.spacer)}):r.css(v,{width:"100%"}):(a["min-width"]=r.get.width(e?v:n,!0,!0),a.width=t?a["min-width"]:"auto"),y.relSize.height?t?r.css(v,{height:r.get.height(y.spacer)-(y.pushFollowers?u.duration:0)}):r.css(v,{height:"100%"}):(a["min-height"]=r.get.height(e?n:v,!0,!i),a.height=t?a["min-height"]:"auto"),y.pushFollowers&&(a["padding"+(e?"Top":"Left")]=u.duration*f,a["padding"+(e?"Bottom":"Right")]=u.duration*(1-f)),r.css(y.spacer,a)}},D=function(){o&&v&&"DURING"===c&&!o.info("isDocument")&&A()},k=function(){o&&v&&"DURING"===c&&((y.relSize.width||y.relSize.autoFullWidth)&&r.get.width(window)!=r.get.width(y.spacer.parentNode)||y.relSize.height&&r.get.height(window)!=r.get.height(y.spacer.parentNode))&&N()},M=function(t){o&&v&&"DURING"===c&&!o.info("isDocument")&&(t.preventDefault(),o._setScrollPos(o.info("scrollPos")-((t.wheelDelta||t[o.info("vertical")?"wheelDeltaY":"wheelDeltaX"])/3||30*-t.detail)))};this.setPin=function(t,e){var n=e&&e.hasOwnProperty("pushFollowers");if(e=r.extend({},{pushFollowers:!0,spacerClass:"scrollmagic-pin-spacer"},e),!(t=r.get.elements(t)[0]))return m(1,"ERROR calling method 'setPin()': Invalid pin element supplied."),l;if("fixed"===r.css(t,"position"))return m(1,"ERROR calling method 'setPin()': Pin does not work with elements that are positioned 'fixed'."),l;if(v){if(v===t)return l;l.removePin()}var i=(v=t).parentNode.style.display,o=["top","left","bottom","right","margin","marginLeft","marginRight","marginTop","marginBottom"];v.parentNode.style.display="none";var a="absolute"!=r.css(v,"position"),s=r.css(v,o.concat(["display"])),c=r.css(v,["width","height"]);v.parentNode.style.display=i,!a&&e.pushFollowers&&(m(2,"WARNING: If the pinned element is positioned absolutely pushFollowers will be disabled."),e.pushFollowers=!1),window.setTimeout((function(){v&&0===u.duration&&n&&e.pushFollowers&&m(2,"WARNING: pushFollowers =",!0,"has no effect, when scene duration is 0.")}),0);var f=v.parentNode.insertBefore(document.createElement("div"),v),h=r.extend(s,{position:a?"relative":"absolute",boxSizing:"content-box",mozBoxSizing:"content-box",webkitBoxSizing:"content-box"});if(a||r.extend(h,r.css(v,["width","height"])),r.css(f,h),f.setAttribute("data-scrollmagic-pin-spacer",""),r.addClass(f,e.spacerClass),y={spacer:f,relSize:{width:"%"===c.width.slice(-1),height:"%"===c.height.slice(-1),autoFullWidth:"auto"===c.width&&a&&r.isMarginCollapseType(s.display)},pushFollowers:e.pushFollowers,inFlow:a},!v.___origStyle){v.___origStyle={};var p=v.style;o.concat(["width","height","position","boxSizing","mozBoxSizing","webkitBoxSizing"]).forEach((function(t){v.___origStyle[t]=p[t]||""}))}return y.relSize.width&&r.css(f,{width:c.width}),y.relSize.height&&r.css(f,{height:c.height}),f.appendChild(v),r.css(v,{position:a?"relative":"absolute",margin:"auto",top:"auto",left:"auto",bottom:"auto",right:"auto"}),(y.relSize.width||y.relSize.autoFullWidth)&&r.css(v,{boxSizing:"border-box",mozBoxSizing:"border-box",webkitBoxSizing:"border-box"}),window.addEventListener("scroll",D),window.addEventListener("resize",D),window.addEventListener("resize",k),v.addEventListener("mousewheel",M),v.addEventListener("DOMMouseScroll",M),m(3,"added pin"),A(),l},this.removePin=function(t){if(v){if("DURING"===c&&A(!0),t||!o){var e=y.spacer.firstChild;if(e.hasAttribute("data-scrollmagic-pin-spacer")){var n=y.spacer.style,i={};["margin","marginLeft","marginRight","marginTop","marginBottom"].forEach((function(t){i[t]=n[t]||""})),r.css(e,i)}y.spacer.parentNode.insertBefore(e,y.spacer),y.spacer.parentNode.removeChild(y.spacer),v.parentNode.hasAttribute("data-scrollmagic-pin-spacer")||(r.css(v,v.___origStyle),delete v.___origStyle)}window.removeEventListener("scroll",D),window.removeEventListener("resize",D),window.removeEventListener("resize",k),v.removeEventListener("mousewheel",M),v.removeEventListener("DOMMouseScroll",M),v=void 0,m(3,"removed pin (reset: "+(t?"true":"false")+")")}return l};var I,O=[];return l.on("destroy.internal",(function(t){l.removeClassToggle(t.reset)})),this.setClassToggle=function(t,e){var n=r.get.elements(t);return 0!==n.length&&r.type.String(e)?(O.length>0&&l.removeClassToggle(),I=e,O=n,l.on("enter.internal_class leave.internal_class",(function(t){var e="enter"===t.type?r.addClass:r.removeClass;O.forEach((function(t,n){e(t,I)}))})),l):(m(1,"ERROR calling method 'setClassToggle()': Invalid "+(0===n.length?"element":"classes")+" supplied."),l)},this.removeClassToggle=function(t){return t&&O.forEach((function(t,e){r.removeClass(t,I)})),l.off("start.internal_class end.internal_class"),I=void 0,O=[],l},function(){for(var t in u)s.hasOwnProperty(t)||(m(2,'WARNING: Unknown option "'+t+'"'),delete u[t]);for(var e in s)S(e);E()}(),l};var n={defaults:{duration:0,offset:0,triggerElement:void 0,triggerHook:.5,reverse:!0,loglevel:2},validate:{offset:function(t){if(t=parseFloat(t),!r.type.Number(t))throw['Invalid value for option "offset":',t];return t},triggerElement:function(t){if(t=t||void 0){var e=r.get.elements(t)[0];if(!e||!e.parentNode)throw['Element defined in option "triggerElement" was not found:',t];t=e}return t},triggerHook:function(t){var e={onCenter:.5,onEnter:1,onLeave:0};if(r.type.Number(t))t=Math.max(0,Math.min(parseFloat(t),1));else{if(!(t in e))throw['Invalid value for option "triggerHook": ',t];t=e[t]}return t},reverse:function(t){return!!t},loglevel:function(t){if(t=parseInt(t),!r.type.Number(t)||t<0||t>3)throw['Invalid value for option "loglevel":',t];return t}},shifts:["duration","offset","triggerHook"]};t.Scene.addOption=function(e,r,i,o){e in n.defaults?t._util.log(1,"[static] ScrollMagic.Scene -> Cannot add Scene option '"+e+"', because it already exists."):(n.defaults[e]=r,n.validate[e]=i,o&&n.shifts.push(e))},t.Scene.extend=function(e){var n=this;t.Scene=function(){return n.apply(this,arguments),this.$super=r.extend({},this),e.apply(this,arguments)||this},r.extend(t.Scene,n),t.Scene.prototype=n.prototype,t.Scene.prototype.constructor=t.Scene},t.Event=function(t,e,n,r){for(var i in r=r||{})this[i]=r[i];return this.type=t,this.target=this.currentTarget=n,this.namespace=e||"",this.timeStamp=this.timestamp=Date.now(),this};var r=t._util=function(t){var e,n={},r=function(t){return parseFloat(t)||0},i=function(e){return e.currentStyle?e.currentStyle:t.getComputedStyle(e)},o=function(e,n,o,a){if((n=n===document?t:n)===t)a=!1;else if(!d.DomElement(n))return 0;e=e.charAt(0).toUpperCase()+e.substr(1).toLowerCase();var s=(o?n["offset"+e]||n["outer"+e]:n["client"+e]||n["inner"+e])||0;if(o&&a){var l=i(n);s+="Height"===e?r(l.marginTop)+r(l.marginBottom):r(l.marginLeft)+r(l.marginRight)}return s},a=function(t){return t.replace(/^[^a-z]+([a-z])/g,"$1").replace(/-([a-z])/g,(function(t){return t[1].toUpperCase()}))};n.extend=function(t){for(t=t||{},e=1;e<arguments.length;e++)if(arguments[e])for(var n in arguments[e])arguments[e].hasOwnProperty(n)&&(t[n]=arguments[e][n]);return t},n.isMarginCollapseType=function(t){return["block","flex","list-item","table","-webkit-box"].indexOf(t)>-1};var s=0,l=["ms","moz","webkit","o"],u=t.requestAnimationFrame,c=t.cancelAnimationFrame;for(e=0;!u&&e<l.length;++e)u=t[l[e]+"RequestAnimationFrame"],c=t[l[e]+"CancelAnimationFrame"]||t[l[e]+"CancelRequestAnimationFrame"];u||(u=function(e){var n=(new Date).getTime(),r=Math.max(0,16-(n-s)),i=t.setTimeout((function(){e(n+r)}),r);return s=n+r,i}),c||(c=function(e){t.clearTimeout(e)}),n.rAF=u.bind(t),n.cAF=c.bind(t);var f=["error","warn","log"],h=t.console||{};for(h.log=h.log||function(){},e=0;e<f.length;e++){var p=f[e];h[p]||(h[p]=h.log)}n.log=function(t){(t>f.length||t<=0)&&(t=f.length);var e=new Date,n=("0"+e.getHours()).slice(-2)+":"+("0"+e.getMinutes()).slice(-2)+":"+("0"+e.getSeconds()).slice(-2)+":"+("00"+e.getMilliseconds()).slice(-3),r=f[t-1],i=Array.prototype.splice.call(arguments,1),o=Function.prototype.bind.call(h[r],h);i.unshift(n),o.apply(h,i)};var d=n.type=function(t){return Object.prototype.toString.call(t).replace(/^\[object (.+)\]$/,"$1").toLowerCase()};d.String=function(t){return"string"===d(t)},d.Function=function(t){return"function"===d(t)},d.Array=function(t){return Array.isArray(t)},d.Number=function(t){return!d.Array(t)&&t-parseFloat(t)+1>=0},d.DomElement=function(t){return"object"==typeof HTMLElement||"function"==typeof HTMLElement?t instanceof HTMLElement||t instanceof SVGElement:t&&"object"==typeof t&&null!==t&&1===t.nodeType&&"string"==typeof t.nodeName};var g=n.get={};return g.elements=function(e){var n=[];if(d.String(e))try{e=document.querySelectorAll(e)}catch(t){return n}if("nodelist"===d(e)||d.Array(e)||e instanceof NodeList)for(var r=0,i=n.length=e.length;r<i;r++){var o=e[r];n[r]=d.DomElement(o)?o:g.elements(o)}else(d.DomElement(e)||e===document||e===t)&&(n=[e]);return n},g.scrollTop=function(e){return e&&"number"==typeof e.scrollTop?e.scrollTop:t.pageYOffset||0},g.scrollLeft=function(e){return e&&"number"==typeof e.scrollLeft?e.scrollLeft:t.pageXOffset||0},g.width=function(t,e,n){return o("width",t,e,n)},g.height=function(t,e,n){return o("height",t,e,n)},g.offset=function(t,e){var n={top:0,left:0};if(t&&t.getBoundingClientRect){var r=t.getBoundingClientRect();n.top=r.top,n.left=r.left,e||(n.top+=g.scrollTop(),n.left+=g.scrollLeft())}return n},n.addClass=function(t,e){e&&(t.classList?t.classList.add(e):t.className+=" "+e)},n.removeClass=function(t,e){e&&(t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," "))},n.css=function(t,e){if(d.String(e))return i(t)[a(e)];if(d.Array(e)){var n={},r=i(t);return e.forEach((function(t,e){n[t]=r[a(t)]})),n}for(var o in e){var s=e[o];s==parseFloat(s)&&(s+="px"),t.style[a(o)]=s}},n}(window||{});return t.Scene.prototype.addIndicators=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling addIndicators() due to missing Plugin 'debug.addIndicators'. Please make sure to include plugins/debug.addIndicators.js"),this},t.Scene.prototype.removeIndicators=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeIndicators() due to missing Plugin 'debug.addIndicators'. Please make sure to include plugins/debug.addIndicators.js"),this},t.Scene.prototype.setTween=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling setTween() due to missing Plugin 'animation.gsap'. Please make sure to include plugins/animation.gsap.js"),this},t.Scene.prototype.removeTween=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeTween() due to missing Plugin 'animation.gsap'. Please make sure to include plugins/animation.gsap.js"),this},t.Scene.prototype.setVelocity=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling setVelocity() due to missing Plugin 'animation.velocity'. Please make sure to include plugins/animation.velocity.js"),this},t.Scene.prototype.removeVelocity=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeVelocity() due to missing Plugin 'animation.velocity'. Please make sure to include plugins/animation.velocity.js"),this},t})?r.call(e,n,e,t):r)||(t.exports=i)},,,,,function(t,e,n){
/*!
  * Bootstrap v4.3.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){o(t,e,n[e])}))}return t}e=e&&e.hasOwnProperty("default")?e.default:e,n=n&&n.hasOwnProperty("default")?n.default:n;var s="transitionend";function l(t){var n=this,r=!1;return e(this).one(u.TRANSITION_END,(function(){r=!0})),setTimeout((function(){r||u.triggerTransitionEnd(n)}),t),this}var u={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");if(!e||"#"===e){var n=t.getAttribute("href");e=n&&"#"!==n?n.trim():""}try{return document.querySelector(e)?e:null}catch(t){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var n=e(t).css("transition-duration"),r=e(t).css("transition-delay"),i=parseFloat(n),o=parseFloat(r);return i||o?(n=n.split(",")[0],r=r.split(",")[0],1e3*(parseFloat(n)+parseFloat(r))):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){e(t).trigger(s)},supportsTransitionEnd:function(){return Boolean(s)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var i=n[r],o=e[r],a=o&&u.isElement(o)?"element":(s=o,{}.toString.call(s).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(i).test(a))throw new Error(t.toUpperCase()+': Option "'+r+'" provided type "'+a+'" but expected type "'+i+'".')}var s},findShadowRoot:function(t){if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){var e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?u.findShadowRoot(t.parentNode):null}};e.fn.emulateTransitionEnd=l,e.event.special[u.TRANSITION_END]={bindType:s,delegateType:s,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}};var c=e.fn.alert,f={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},h="alert",p="fade",d="show",g=function(){function t(t){this._element=t}var n=t.prototype;return n.close=function(t){var e=this._element;t&&(e=this._getRootElement(t)),this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},n.dispose=function(){e.removeData(this._element,"bs.alert"),this._element=null},n._getRootElement=function(t){var n=u.getSelectorFromElement(t),r=!1;return n&&(r=document.querySelector(n)),r||(r=e(t).closest("."+h)[0]),r},n._triggerCloseEvent=function(t){var n=e.Event(f.CLOSE);return e(t).trigger(n),n},n._removeElement=function(t){var n=this;if(e(t).removeClass(d),e(t).hasClass(p)){var r=u.getTransitionDurationFromElement(t);e(t).one(u.TRANSITION_END,(function(e){return n._destroyElement(t,e)})).emulateTransitionEnd(r)}else this._destroyElement(t)},n._destroyElement=function(t){e(t).detach().trigger(f.CLOSED).remove()},t._jQueryInterface=function(n){return this.each((function(){var r=e(this),i=r.data("bs.alert");i||(i=new t(this),r.data("bs.alert",i)),"close"===n&&i[n](this)}))},t._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),t}();e(document).on(f.CLICK_DATA_API,'[data-dismiss="alert"]',g._handleDismiss(new g)),e.fn.alert=g._jQueryInterface,e.fn.alert.Constructor=g,e.fn.alert.noConflict=function(){return e.fn.alert=c,g._jQueryInterface};var m=e.fn.button,v="active",y="btn",_="focus",w='[data-toggle^="button"]',b='[data-toggle="buttons"]',x='input:not([type="hidden"])',T=".active",E=".btn",C={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},S=function(){function t(t){this._element=t}var n=t.prototype;return n.toggle=function(){var t=!0,n=!0,r=e(this._element).closest(b)[0];if(r){var i=this._element.querySelector(x);if(i){if("radio"===i.type)if(i.checked&&this._element.classList.contains(v))t=!1;else{var o=r.querySelector(T);o&&e(o).removeClass(v)}if(t){if(i.hasAttribute("disabled")||r.hasAttribute("disabled")||i.classList.contains("disabled")||r.classList.contains("disabled"))return;i.checked=!this._element.classList.contains(v),e(i).trigger("change")}i.focus(),n=!1}}n&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(v)),t&&e(this._element).toggleClass(v)},n.dispose=function(){e.removeData(this._element,"bs.button"),this._element=null},t._jQueryInterface=function(n){return this.each((function(){var r=e(this).data("bs.button");r||(r=new t(this),e(this).data("bs.button",r)),"toggle"===n&&r[n]()}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),t}();e(document).on(C.CLICK_DATA_API,w,(function(t){t.preventDefault();var n=t.target;e(n).hasClass(y)||(n=e(n).closest(E)),S._jQueryInterface.call(e(n),"toggle")})).on(C.FOCUS_BLUR_DATA_API,w,(function(t){var n=e(t.target).closest(E)[0];e(n).toggleClass(_,/^focus(in)?$/.test(t.type))})),e.fn.button=S._jQueryInterface,e.fn.button.Constructor=S,e.fn.button.noConflict=function(){return e.fn.button=m,S._jQueryInterface};var A="carousel",N=".bs.carousel",D=e.fn[A],k={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},M={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},I="next",O="prev",L="left",R="right",P={SLIDE:"slide.bs.carousel",SLID:"slid.bs.carousel",KEYDOWN:"keydown.bs.carousel",MOUSEENTER:"mouseenter.bs.carousel",MOUSELEAVE:"mouseleave.bs.carousel",TOUCHSTART:"touchstart.bs.carousel",TOUCHMOVE:"touchmove.bs.carousel",TOUCHEND:"touchend.bs.carousel",POINTERDOWN:"pointerdown.bs.carousel",POINTERUP:"pointerup.bs.carousel",DRAG_START:"dragstart.bs.carousel",LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},j="carousel",H="active",F="slide",q="carousel-item-right",U="carousel-item-left",B="carousel-item-next",W="carousel-item-prev",z="pointer-event",Y={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",ITEM_IMG:".carousel-item img",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},V={TOUCH:"touch",PEN:"pen"},G=function(){function t(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._element=t,this._indicatorsElement=this._element.querySelector(Y.INDICATORS),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}var n=t.prototype;return n.next=function(){this._isSliding||this._slide(I)},n.nextWhenVisible=function(){!document.hidden&&e(this._element).is(":visible")&&"hidden"!==e(this._element).css("visibility")&&this.next()},n.prev=function(){this._isSliding||this._slide(O)},n.pause=function(t){t||(this._isPaused=!0),this._element.querySelector(Y.NEXT_PREV)&&(u.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},n.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},n.to=function(t){var n=this;this._activeElement=this._element.querySelector(Y.ACTIVE_ITEM);var r=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)e(this._element).one(P.SLID,(function(){return n.to(t)}));else{if(r===t)return this.pause(),void this.cycle();var i=t>r?I:O;this._slide(i,this._items[t])}},n.dispose=function(){e(this._element).off(N),e.removeData(this._element,"bs.carousel"),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},n._getConfig=function(t){return t=a({},k,t),u.typeCheckConfig(A,t,M),t},n._handleSwipe=function(){var t=Math.abs(this.touchDeltaX);if(!(t<=40)){var e=t/this.touchDeltaX;e>0&&this.prev(),e<0&&this.next()}},n._addEventListeners=function(){var t=this;this._config.keyboard&&e(this._element).on(P.KEYDOWN,(function(e){return t._keydown(e)})),"hover"===this._config.pause&&e(this._element).on(P.MOUSEENTER,(function(e){return t.pause(e)})).on(P.MOUSELEAVE,(function(e){return t.cycle(e)})),this._config.touch&&this._addTouchEventListeners()},n._addTouchEventListeners=function(){var t=this;if(this._touchSupported){var n=function(e){t._pointerEvent&&V[e.originalEvent.pointerType.toUpperCase()]?t.touchStartX=e.originalEvent.clientX:t._pointerEvent||(t.touchStartX=e.originalEvent.touches[0].clientX)},r=function(e){t._pointerEvent&&V[e.originalEvent.pointerType.toUpperCase()]&&(t.touchDeltaX=e.originalEvent.clientX-t.touchStartX),t._handleSwipe(),"hover"===t._config.pause&&(t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout((function(e){return t.cycle(e)}),500+t._config.interval))};e(this._element.querySelectorAll(Y.ITEM_IMG)).on(P.DRAG_START,(function(t){return t.preventDefault()})),this._pointerEvent?(e(this._element).on(P.POINTERDOWN,(function(t){return n(t)})),e(this._element).on(P.POINTERUP,(function(t){return r(t)})),this._element.classList.add(z)):(e(this._element).on(P.TOUCHSTART,(function(t){return n(t)})),e(this._element).on(P.TOUCHMOVE,(function(e){return function(e){e.originalEvent.touches&&e.originalEvent.touches.length>1?t.touchDeltaX=0:t.touchDeltaX=e.originalEvent.touches[0].clientX-t.touchStartX}(e)})),e(this._element).on(P.TOUCHEND,(function(t){return r(t)})))}},n._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},n._getItemIndex=function(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(Y.ITEM)):[],this._items.indexOf(t)},n._getItemByDirection=function(t,e){var n=t===I,r=t===O,i=this._getItemIndex(e),o=this._items.length-1;if((r&&0===i||n&&i===o)&&!this._config.wrap)return e;var a=(i+(t===O?-1:1))%this._items.length;return-1===a?this._items[this._items.length-1]:this._items[a]},n._triggerSlideEvent=function(t,n){var r=this._getItemIndex(t),i=this._getItemIndex(this._element.querySelector(Y.ACTIVE_ITEM)),o=e.Event(P.SLIDE,{relatedTarget:t,direction:n,from:i,to:r});return e(this._element).trigger(o),o},n._setActiveIndicatorElement=function(t){if(this._indicatorsElement){var n=[].slice.call(this._indicatorsElement.querySelectorAll(Y.ACTIVE));e(n).removeClass(H);var r=this._indicatorsElement.children[this._getItemIndex(t)];r&&e(r).addClass(H)}},n._slide=function(t,n){var r,i,o,a=this,s=this._element.querySelector(Y.ACTIVE_ITEM),l=this._getItemIndex(s),c=n||s&&this._getItemByDirection(t,s),f=this._getItemIndex(c),h=Boolean(this._interval);if(t===I?(r=U,i=B,o=L):(r=q,i=W,o=R),c&&e(c).hasClass(H))this._isSliding=!1;else if(!this._triggerSlideEvent(c,o).isDefaultPrevented()&&s&&c){this._isSliding=!0,h&&this.pause(),this._setActiveIndicatorElement(c);var p=e.Event(P.SLID,{relatedTarget:c,direction:o,from:l,to:f});if(e(this._element).hasClass(F)){e(c).addClass(i),u.reflow(c),e(s).addClass(r),e(c).addClass(r);var d=parseInt(c.getAttribute("data-interval"),10);d?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=d):this._config.interval=this._config.defaultInterval||this._config.interval;var g=u.getTransitionDurationFromElement(s);e(s).one(u.TRANSITION_END,(function(){e(c).removeClass(r+" "+i).addClass(H),e(s).removeClass(H+" "+i+" "+r),a._isSliding=!1,setTimeout((function(){return e(a._element).trigger(p)}),0)})).emulateTransitionEnd(g)}else e(s).removeClass(H),e(c).addClass(H),this._isSliding=!1,e(this._element).trigger(p);h&&this.cycle()}},t._jQueryInterface=function(n){return this.each((function(){var r=e(this).data("bs.carousel"),i=a({},k,e(this).data());"object"==typeof n&&(i=a({},i,n));var o="string"==typeof n?n:i.slide;if(r||(r=new t(this,i),e(this).data("bs.carousel",r)),"number"==typeof n)r.to(n);else if("string"==typeof o){if(void 0===r[o])throw new TypeError('No method named "'+o+'"');r[o]()}else i.interval&&i.ride&&(r.pause(),r.cycle())}))},t._dataApiClickHandler=function(n){var r=u.getSelectorFromElement(this);if(r){var i=e(r)[0];if(i&&e(i).hasClass(j)){var o=a({},e(i).data(),e(this).data()),s=this.getAttribute("data-slide-to");s&&(o.interval=!1),t._jQueryInterface.call(e(i),o),s&&e(i).data("bs.carousel").to(s),n.preventDefault()}}},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return k}}]),t}();e(document).on(P.CLICK_DATA_API,Y.DATA_SLIDE,G._dataApiClickHandler),e(window).on(P.LOAD_DATA_API,(function(){for(var t=[].slice.call(document.querySelectorAll(Y.DATA_RIDE)),n=0,r=t.length;n<r;n++){var i=e(t[n]);G._jQueryInterface.call(i,i.data())}})),e.fn[A]=G._jQueryInterface,e.fn[A].Constructor=G,e.fn[A].noConflict=function(){return e.fn[A]=D,G._jQueryInterface};var $="collapse",X=e.fn[$],K={toggle:!0,parent:""},Q={toggle:"boolean",parent:"(string|element)"},Z={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},J="show",tt="collapse",et="collapsing",nt="collapsed",rt="width",it="height",ot={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},at=function(){function t(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(ot.DATA_TOGGLE)),r=0,i=n.length;r<i;r++){var o=n[r],a=u.getSelectorFromElement(o),s=[].slice.call(document.querySelectorAll(a)).filter((function(e){return e===t}));null!==a&&s.length>0&&(this._selector=a,this._triggerArray.push(o))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var n=t.prototype;return n.toggle=function(){e(this._element).hasClass(J)?this.hide():this.show()},n.show=function(){var n,r,i=this;if(!(this._isTransitioning||e(this._element).hasClass(J)||(this._parent&&0===(n=[].slice.call(this._parent.querySelectorAll(ot.ACTIVES)).filter((function(t){return"string"==typeof i._config.parent?t.getAttribute("data-parent")===i._config.parent:t.classList.contains(tt)}))).length&&(n=null),n&&(r=e(n).not(this._selector).data("bs.collapse"))&&r._isTransitioning))){var o=e.Event(Z.SHOW);if(e(this._element).trigger(o),!o.isDefaultPrevented()){n&&(t._jQueryInterface.call(e(n).not(this._selector),"hide"),r||e(n).data("bs.collapse",null));var a=this._getDimension();e(this._element).removeClass(tt).addClass(et),this._element.style[a]=0,this._triggerArray.length&&e(this._triggerArray).removeClass(nt).attr("aria-expanded",!0),this.setTransitioning(!0);var s="scroll"+(a[0].toUpperCase()+a.slice(1)),l=u.getTransitionDurationFromElement(this._element);e(this._element).one(u.TRANSITION_END,(function(){e(i._element).removeClass(et).addClass(tt).addClass(J),i._element.style[a]="",i.setTransitioning(!1),e(i._element).trigger(Z.SHOWN)})).emulateTransitionEnd(l),this._element.style[a]=this._element[s]+"px"}}},n.hide=function(){var t=this;if(!this._isTransitioning&&e(this._element).hasClass(J)){var n=e.Event(Z.HIDE);if(e(this._element).trigger(n),!n.isDefaultPrevented()){var r=this._getDimension();this._element.style[r]=this._element.getBoundingClientRect()[r]+"px",u.reflow(this._element),e(this._element).addClass(et).removeClass(tt).removeClass(J);var i=this._triggerArray.length;if(i>0)for(var o=0;o<i;o++){var a=this._triggerArray[o],s=u.getSelectorFromElement(a);null!==s&&(e([].slice.call(document.querySelectorAll(s))).hasClass(J)||e(a).addClass(nt).attr("aria-expanded",!1))}this.setTransitioning(!0),this._element.style[r]="";var l=u.getTransitionDurationFromElement(this._element);e(this._element).one(u.TRANSITION_END,(function(){t.setTransitioning(!1),e(t._element).removeClass(et).addClass(tt).trigger(Z.HIDDEN)})).emulateTransitionEnd(l)}}},n.setTransitioning=function(t){this._isTransitioning=t},n.dispose=function(){e.removeData(this._element,"bs.collapse"),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},n._getConfig=function(t){return(t=a({},K,t)).toggle=Boolean(t.toggle),u.typeCheckConfig($,t,Q),t},n._getDimension=function(){return e(this._element).hasClass(rt)?rt:it},n._getParent=function(){var n,r=this;u.isElement(this._config.parent)?(n=this._config.parent,void 0!==this._config.parent.jquery&&(n=this._config.parent[0])):n=document.querySelector(this._config.parent);var i='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',o=[].slice.call(n.querySelectorAll(i));return e(o).each((function(e,n){r._addAriaAndCollapsedClass(t._getTargetFromElement(n),[n])})),n},n._addAriaAndCollapsedClass=function(t,n){var r=e(t).hasClass(J);n.length&&e(n).toggleClass(nt,!r).attr("aria-expanded",r)},t._getTargetFromElement=function(t){var e=u.getSelectorFromElement(t);return e?document.querySelector(e):null},t._jQueryInterface=function(n){return this.each((function(){var r=e(this),i=r.data("bs.collapse"),o=a({},K,r.data(),"object"==typeof n&&n?n:{});if(!i&&o.toggle&&/show|hide/.test(n)&&(o.toggle=!1),i||(i=new t(this,o),r.data("bs.collapse",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return K}}]),t}();e(document).on(Z.CLICK_DATA_API,ot.DATA_TOGGLE,(function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var n=e(this),r=u.getSelectorFromElement(this),i=[].slice.call(document.querySelectorAll(r));e(i).each((function(){var t=e(this),r=t.data("bs.collapse")?"toggle":n.data();at._jQueryInterface.call(t,r)}))})),e.fn[$]=at._jQueryInterface,e.fn[$].Constructor=at,e.fn[$].noConflict=function(){return e.fn[$]=X,at._jQueryInterface};var st="dropdown",lt=e.fn[st],ut=new RegExp("38|40|27"),ct={HIDE:"hide.bs.dropdown",HIDDEN:"hidden.bs.dropdown",SHOW:"show.bs.dropdown",SHOWN:"shown.bs.dropdown",CLICK:"click.bs.dropdown",CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},ft="disabled",ht="show",pt="dropup",dt="dropright",gt="dropleft",mt="dropdown-menu-right",vt="position-static",yt='[data-toggle="dropdown"]',_t=".dropdown form",wt=".dropdown-menu",bt=".navbar-nav",xt=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",Tt="top-start",Et="top-end",Ct="bottom-start",St="bottom-end",At="right-start",Nt="left-start",Dt={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},kt={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},Mt=function(){function t(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var r=t.prototype;return r.toggle=function(){if(!this._element.disabled&&!e(this._element).hasClass(ft)){var r=t._getParentFromElement(this._element),i=e(this._menu).hasClass(ht);if(t._clearMenus(),!i){var o={relatedTarget:this._element},a=e.Event(ct.SHOW,o);if(e(r).trigger(a),!a.isDefaultPrevented()){if(!this._inNavbar){if(void 0===n)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var s=this._element;"parent"===this._config.reference?s=r:u.isElement(this._config.reference)&&(s=this._config.reference,void 0!==this._config.reference.jquery&&(s=this._config.reference[0])),"scrollParent"!==this._config.boundary&&e(r).addClass(vt),this._popper=new n(s,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===e(r).closest(bt).length&&e(document.body).children().on("mouseover",null,e.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),e(this._menu).toggleClass(ht),e(r).toggleClass(ht).trigger(e.Event(ct.SHOWN,o))}}}},r.show=function(){if(!(this._element.disabled||e(this._element).hasClass(ft)||e(this._menu).hasClass(ht))){var n={relatedTarget:this._element},r=e.Event(ct.SHOW,n),i=t._getParentFromElement(this._element);e(i).trigger(r),r.isDefaultPrevented()||(e(this._menu).toggleClass(ht),e(i).toggleClass(ht).trigger(e.Event(ct.SHOWN,n)))}},r.hide=function(){if(!this._element.disabled&&!e(this._element).hasClass(ft)&&e(this._menu).hasClass(ht)){var n={relatedTarget:this._element},r=e.Event(ct.HIDE,n),i=t._getParentFromElement(this._element);e(i).trigger(r),r.isDefaultPrevented()||(e(this._menu).toggleClass(ht),e(i).toggleClass(ht).trigger(e.Event(ct.HIDDEN,n)))}},r.dispose=function(){e.removeData(this._element,"bs.dropdown"),e(this._element).off(".bs.dropdown"),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},r.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},r._addEventListeners=function(){var t=this;e(this._element).on(ct.CLICK,(function(e){e.preventDefault(),e.stopPropagation(),t.toggle()}))},r._getConfig=function(t){return t=a({},this.constructor.Default,e(this._element).data(),t),u.typeCheckConfig(st,t,this.constructor.DefaultType),t},r._getMenuElement=function(){if(!this._menu){var e=t._getParentFromElement(this._element);e&&(this._menu=e.querySelector(wt))}return this._menu},r._getPlacement=function(){var t=e(this._element.parentNode),n=Ct;return t.hasClass(pt)?(n=Tt,e(this._menu).hasClass(mt)&&(n=Et)):t.hasClass(dt)?n=At:t.hasClass(gt)?n=Nt:e(this._menu).hasClass(mt)&&(n=St),n},r._detectNavbar=function(){return e(this._element).closest(".navbar").length>0},r._getOffset=function(){var t=this,e={};return"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=a({},e.offsets,t._config.offset(e.offsets,t._element)||{}),e}:e.offset=this._config.offset,e},r._getPopperConfig=function(){var t={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(t.modifiers.applyStyle={enabled:!1}),t},t._jQueryInterface=function(n){return this.each((function(){var r=e(this).data("bs.dropdown");if(r||(r=new t(this,"object"==typeof n?n:null),e(this).data("bs.dropdown",r)),"string"==typeof n){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}}))},t._clearMenus=function(n){if(!n||3!==n.which&&("keyup"!==n.type||9===n.which))for(var r=[].slice.call(document.querySelectorAll(yt)),i=0,o=r.length;i<o;i++){var a=t._getParentFromElement(r[i]),s=e(r[i]).data("bs.dropdown"),l={relatedTarget:r[i]};if(n&&"click"===n.type&&(l.clickEvent=n),s){var u=s._menu;if(e(a).hasClass(ht)&&!(n&&("click"===n.type&&/input|textarea/i.test(n.target.tagName)||"keyup"===n.type&&9===n.which)&&e.contains(a,n.target))){var c=e.Event(ct.HIDE,l);e(a).trigger(c),c.isDefaultPrevented()||("ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),r[i].setAttribute("aria-expanded","false"),e(u).removeClass(ht),e(a).removeClass(ht).trigger(e.Event(ct.HIDDEN,l)))}}}},t._getParentFromElement=function(t){var e,n=u.getSelectorFromElement(t);return n&&(e=document.querySelector(n)),e||t.parentNode},t._dataApiKeydownHandler=function(n){if((/input|textarea/i.test(n.target.tagName)?!(32===n.which||27!==n.which&&(40!==n.which&&38!==n.which||e(n.target).closest(wt).length)):ut.test(n.which))&&(n.preventDefault(),n.stopPropagation(),!this.disabled&&!e(this).hasClass(ft))){var r=t._getParentFromElement(this),i=e(r).hasClass(ht);if(i&&(!i||27!==n.which&&32!==n.which)){var o=[].slice.call(r.querySelectorAll(xt));if(0!==o.length){var a=o.indexOf(n.target);38===n.which&&a>0&&a--,40===n.which&&a<o.length-1&&a++,a<0&&(a=0),o[a].focus()}}else{if(27===n.which){var s=r.querySelector(yt);e(s).trigger("focus")}e(this).trigger("click")}}},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Dt}},{key:"DefaultType",get:function(){return kt}}]),t}();e(document).on(ct.KEYDOWN_DATA_API,yt,Mt._dataApiKeydownHandler).on(ct.KEYDOWN_DATA_API,wt,Mt._dataApiKeydownHandler).on(ct.CLICK_DATA_API+" "+ct.KEYUP_DATA_API,Mt._clearMenus).on(ct.CLICK_DATA_API,yt,(function(t){t.preventDefault(),t.stopPropagation(),Mt._jQueryInterface.call(e(this),"toggle")})).on(ct.CLICK_DATA_API,_t,(function(t){t.stopPropagation()})),e.fn[st]=Mt._jQueryInterface,e.fn[st].Constructor=Mt,e.fn[st].noConflict=function(){return e.fn[st]=lt,Mt._jQueryInterface};var It=e.fn.modal,Ot={backdrop:!0,keyboard:!0,focus:!0,show:!0},Lt={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},Rt={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},Pt="modal-dialog-scrollable",jt="modal-scrollbar-measure",Ht="modal-backdrop",Ft="modal-open",qt="fade",Ut="show",Bt={DIALOG:".modal-dialog",MODAL_BODY:".modal-body",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top"},Wt=function(){function t(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=t.querySelector(Bt.DIALOG),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}var n=t.prototype;return n.toggle=function(t){return this._isShown?this.hide():this.show(t)},n.show=function(t){var n=this;if(!this._isShown&&!this._isTransitioning){e(this._element).hasClass(qt)&&(this._isTransitioning=!0);var r=e.Event(Rt.SHOW,{relatedTarget:t});e(this._element).trigger(r),this._isShown||r.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),e(this._element).on(Rt.CLICK_DISMISS,Bt.DATA_DISMISS,(function(t){return n.hide(t)})),e(this._dialog).on(Rt.MOUSEDOWN_DISMISS,(function(){e(n._element).one(Rt.MOUSEUP_DISMISS,(function(t){e(t.target).is(n._element)&&(n._ignoreBackdropClick=!0)}))})),this._showBackdrop((function(){return n._showElement(t)})))}},n.hide=function(t){var n=this;if(t&&t.preventDefault(),this._isShown&&!this._isTransitioning){var r=e.Event(Rt.HIDE);if(e(this._element).trigger(r),this._isShown&&!r.isDefaultPrevented()){this._isShown=!1;var i=e(this._element).hasClass(qt);if(i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),e(document).off(Rt.FOCUSIN),e(this._element).removeClass(Ut),e(this._element).off(Rt.CLICK_DISMISS),e(this._dialog).off(Rt.MOUSEDOWN_DISMISS),i){var o=u.getTransitionDurationFromElement(this._element);e(this._element).one(u.TRANSITION_END,(function(t){return n._hideModal(t)})).emulateTransitionEnd(o)}else this._hideModal()}}},n.dispose=function(){[window,this._element,this._dialog].forEach((function(t){return e(t).off(".bs.modal")})),e(document).off(Rt.FOCUSIN),e.removeData(this._element,"bs.modal"),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},n.handleUpdate=function(){this._adjustDialog()},n._getConfig=function(t){return t=a({},Ot,t),u.typeCheckConfig("modal",t,Lt),t},n._showElement=function(t){var n=this,r=e(this._element).hasClass(qt);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),e(this._dialog).hasClass(Pt)?this._dialog.querySelector(Bt.MODAL_BODY).scrollTop=0:this._element.scrollTop=0,r&&u.reflow(this._element),e(this._element).addClass(Ut),this._config.focus&&this._enforceFocus();var i=e.Event(Rt.SHOWN,{relatedTarget:t}),o=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,e(n._element).trigger(i)};if(r){var a=u.getTransitionDurationFromElement(this._dialog);e(this._dialog).one(u.TRANSITION_END,o).emulateTransitionEnd(a)}else o()},n._enforceFocus=function(){var t=this;e(document).off(Rt.FOCUSIN).on(Rt.FOCUSIN,(function(n){document!==n.target&&t._element!==n.target&&0===e(t._element).has(n.target).length&&t._element.focus()}))},n._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?e(this._element).on(Rt.KEYDOWN_DISMISS,(function(e){27===e.which&&(e.preventDefault(),t.hide())})):this._isShown||e(this._element).off(Rt.KEYDOWN_DISMISS)},n._setResizeEvent=function(){var t=this;this._isShown?e(window).on(Rt.RESIZE,(function(e){return t.handleUpdate(e)})):e(window).off(Rt.RESIZE)},n._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._isTransitioning=!1,this._showBackdrop((function(){e(document.body).removeClass(Ft),t._resetAdjustments(),t._resetScrollbar(),e(t._element).trigger(Rt.HIDDEN)}))},n._removeBackdrop=function(){this._backdrop&&(e(this._backdrop).remove(),this._backdrop=null)},n._showBackdrop=function(t){var n=this,r=e(this._element).hasClass(qt)?qt:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=Ht,r&&this._backdrop.classList.add(r),e(this._backdrop).appendTo(document.body),e(this._element).on(Rt.CLICK_DISMISS,(function(t){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())})),r&&u.reflow(this._backdrop),e(this._backdrop).addClass(Ut),!t)return;if(!r)return void t();var i=u.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(u.TRANSITION_END,t).emulateTransitionEnd(i)}else if(!this._isShown&&this._backdrop){e(this._backdrop).removeClass(Ut);var o=function(){n._removeBackdrop(),t&&t()};if(e(this._element).hasClass(qt)){var a=u.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(u.TRANSITION_END,o).emulateTransitionEnd(a)}else o()}else t&&t()},n._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},n._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},n._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},n._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){var n=[].slice.call(document.querySelectorAll(Bt.FIXED_CONTENT)),r=[].slice.call(document.querySelectorAll(Bt.STICKY_CONTENT));e(n).each((function(n,r){var i=r.style.paddingRight,o=e(r).css("padding-right");e(r).data("padding-right",i).css("padding-right",parseFloat(o)+t._scrollbarWidth+"px")})),e(r).each((function(n,r){var i=r.style.marginRight,o=e(r).css("margin-right");e(r).data("margin-right",i).css("margin-right",parseFloat(o)-t._scrollbarWidth+"px")}));var i=document.body.style.paddingRight,o=e(document.body).css("padding-right");e(document.body).data("padding-right",i).css("padding-right",parseFloat(o)+this._scrollbarWidth+"px")}e(document.body).addClass(Ft)},n._resetScrollbar=function(){var t=[].slice.call(document.querySelectorAll(Bt.FIXED_CONTENT));e(t).each((function(t,n){var r=e(n).data("padding-right");e(n).removeData("padding-right"),n.style.paddingRight=r||""}));var n=[].slice.call(document.querySelectorAll(""+Bt.STICKY_CONTENT));e(n).each((function(t,n){var r=e(n).data("margin-right");void 0!==r&&e(n).css("margin-right",r).removeData("margin-right")}));var r=e(document.body).data("padding-right");e(document.body).removeData("padding-right"),document.body.style.paddingRight=r||""},n._getScrollbarWidth=function(){var t=document.createElement("div");t.className=jt,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},t._jQueryInterface=function(n,r){return this.each((function(){var i=e(this).data("bs.modal"),o=a({},Ot,e(this).data(),"object"==typeof n&&n?n:{});if(i||(i=new t(this,o),e(this).data("bs.modal",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n](r)}else o.show&&i.show(r)}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Ot}}]),t}();e(document).on(Rt.CLICK_DATA_API,Bt.DATA_TOGGLE,(function(t){var n,r=this,i=u.getSelectorFromElement(this);i&&(n=document.querySelector(i));var o=e(n).data("bs.modal")?"toggle":a({},e(n).data(),e(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var s=e(n).one(Rt.SHOW,(function(t){t.isDefaultPrevented()||s.one(Rt.HIDDEN,(function(){e(r).is(":visible")&&r.focus()}))}));Wt._jQueryInterface.call(e(n),o,this)})),e.fn.modal=Wt._jQueryInterface,e.fn.modal.Constructor=Wt,e.fn.modal.noConflict=function(){return e.fn.modal=It,Wt._jQueryInterface};var zt=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],Yt={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},Vt=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,Gt=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;function $t(t,e,n){if(0===t.length)return t;if(n&&"function"==typeof n)return n(t);for(var r=(new window.DOMParser).parseFromString(t,"text/html"),i=Object.keys(e),o=[].slice.call(r.body.querySelectorAll("*")),a=function(t,n){var r=o[t],a=r.nodeName.toLowerCase();if(-1===i.indexOf(r.nodeName.toLowerCase()))return r.parentNode.removeChild(r),"continue";var s=[].slice.call(r.attributes),l=[].concat(e["*"]||[],e[a]||[]);s.forEach((function(t){(function(t,e){var n=t.nodeName.toLowerCase();if(-1!==e.indexOf(n))return-1===zt.indexOf(n)||Boolean(t.nodeValue.match(Vt)||t.nodeValue.match(Gt));for(var r=e.filter((function(t){return t instanceof RegExp})),i=0,o=r.length;i<o;i++)if(n.match(r[i]))return!0;return!1})(t,l)||r.removeAttribute(t.nodeName)}))},s=0,l=o.length;s<l;s++)a(s);return r.body.innerHTML}var Xt="tooltip",Kt=e.fn.tooltip,Qt=new RegExp("(^|\\s)bs-tooltip\\S+","g"),Zt=["sanitize","whiteList","sanitizeFn"],Jt={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string|function)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)",sanitize:"boolean",sanitizeFn:"(null|function)",whiteList:"object"},te={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},ee={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent",sanitize:!0,sanitizeFn:null,whiteList:Yt},ne="show",re="out",ie={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},oe="fade",ae="show",se=".tooltip-inner",le=".arrow",ue="hover",ce="focus",fe="click",he="manual",pe=function(){function t(t,e){if(void 0===n)throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var r=t.prototype;return r.enable=function(){this._isEnabled=!0},r.disable=function(){this._isEnabled=!1},r.toggleEnabled=function(){this._isEnabled=!this._isEnabled},r.toggle=function(t){if(this._isEnabled)if(t){var n=this.constructor.DATA_KEY,r=e(t.currentTarget).data(n);r||(r=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(n,r)),r._activeTrigger.click=!r._activeTrigger.click,r._isWithActiveTrigger()?r._enter(null,r):r._leave(null,r)}else{if(e(this.getTipElement()).hasClass(ae))return void this._leave(null,this);this._enter(null,this)}},r.dispose=function(){clearTimeout(this._timeout),e.removeData(this.element,this.constructor.DATA_KEY),e(this.element).off(this.constructor.EVENT_KEY),e(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&e(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},r.show=function(){var t=this;if("none"===e(this.element).css("display"))throw new Error("Please use show on visible elements");var r=e.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){e(this.element).trigger(r);var i=u.findShadowRoot(this.element),o=e.contains(null!==i?i:this.element.ownerDocument.documentElement,this.element);if(r.isDefaultPrevented()||!o)return;var a=this.getTipElement(),s=u.getUID(this.constructor.NAME);a.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&e(a).addClass(oe);var l="function"==typeof this.config.placement?this.config.placement.call(this,a,this.element):this.config.placement,c=this._getAttachment(l);this.addAttachmentClass(c);var f=this._getContainer();e(a).data(this.constructor.DATA_KEY,this),e.contains(this.element.ownerDocument.documentElement,this.tip)||e(a).appendTo(f),e(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new n(this.element,a,{placement:c,modifiers:{offset:this._getOffset(),flip:{behavior:this.config.fallbackPlacement},arrow:{element:le},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){return t._handlePopperPlacementChange(e)}}),e(a).addClass(ae),"ontouchstart"in document.documentElement&&e(document.body).children().on("mouseover",null,e.noop);var h=function(){t.config.animation&&t._fixTransition();var n=t._hoverState;t._hoverState=null,e(t.element).trigger(t.constructor.Event.SHOWN),n===re&&t._leave(null,t)};if(e(this.tip).hasClass(oe)){var p=u.getTransitionDurationFromElement(this.tip);e(this.tip).one(u.TRANSITION_END,h).emulateTransitionEnd(p)}else h()}},r.hide=function(t){var n=this,r=this.getTipElement(),i=e.Event(this.constructor.Event.HIDE),o=function(){n._hoverState!==ne&&r.parentNode&&r.parentNode.removeChild(r),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),e(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),t&&t()};if(e(this.element).trigger(i),!i.isDefaultPrevented()){if(e(r).removeClass(ae),"ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),this._activeTrigger[fe]=!1,this._activeTrigger[ce]=!1,this._activeTrigger[ue]=!1,e(this.tip).hasClass(oe)){var a=u.getTransitionDurationFromElement(r);e(r).one(u.TRANSITION_END,o).emulateTransitionEnd(a)}else o();this._hoverState=""}},r.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},r.isWithContent=function(){return Boolean(this.getTitle())},r.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-tooltip-"+t)},r.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},r.setContent=function(){var t=this.getTipElement();this.setElementContent(e(t.querySelectorAll(se)),this.getTitle()),e(t).removeClass(oe+" "+ae)},r.setElementContent=function(t,n){"object"!=typeof n||!n.nodeType&&!n.jquery?this.config.html?(this.config.sanitize&&(n=$t(n,this.config.whiteList,this.config.sanitizeFn)),t.html(n)):t.text(n):this.config.html?e(n).parent().is(t)||t.empty().append(n):t.text(e(n).text())},r.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},r._getOffset=function(){var t=this,e={};return"function"==typeof this.config.offset?e.fn=function(e){return e.offsets=a({},e.offsets,t.config.offset(e.offsets,t.element)||{}),e}:e.offset=this.config.offset,e},r._getContainer=function(){return!1===this.config.container?document.body:u.isElement(this.config.container)?e(this.config.container):e(document).find(this.config.container)},r._getAttachment=function(t){return te[t.toUpperCase()]},r._setListeners=function(){var t=this;this.config.trigger.split(" ").forEach((function(n){if("click"===n)e(t.element).on(t.constructor.Event.CLICK,t.config.selector,(function(e){return t.toggle(e)}));else if(n!==he){var r=n===ue?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,i=n===ue?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;e(t.element).on(r,t.config.selector,(function(e){return t._enter(e)})).on(i,t.config.selector,(function(e){return t._leave(e)}))}})),e(this.element).closest(".modal").on("hide.bs.modal",(function(){t.element&&t.hide()})),this.config.selector?this.config=a({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},r._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},r._enter=function(t,n){var r=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(r))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(r,n)),t&&(n._activeTrigger["focusin"===t.type?ce:ue]=!0),e(n.getTipElement()).hasClass(ae)||n._hoverState===ne?n._hoverState=ne:(clearTimeout(n._timeout),n._hoverState=ne,n.config.delay&&n.config.delay.show?n._timeout=setTimeout((function(){n._hoverState===ne&&n.show()}),n.config.delay.show):n.show())},r._leave=function(t,n){var r=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(r))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(r,n)),t&&(n._activeTrigger["focusout"===t.type?ce:ue]=!1),n._isWithActiveTrigger()||(clearTimeout(n._timeout),n._hoverState=re,n.config.delay&&n.config.delay.hide?n._timeout=setTimeout((function(){n._hoverState===re&&n.hide()}),n.config.delay.hide):n.hide())},r._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},r._getConfig=function(t){var n=e(this.element).data();return Object.keys(n).forEach((function(t){-1!==Zt.indexOf(t)&&delete n[t]})),"number"==typeof(t=a({},this.constructor.Default,n,"object"==typeof t&&t?t:{})).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),u.typeCheckConfig(Xt,t,this.constructor.DefaultType),t.sanitize&&(t.template=$t(t.template,t.whiteList,t.sanitizeFn)),t},r._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},r._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(Qt);null!==n&&n.length&&t.removeClass(n.join(""))},r._handlePopperPlacementChange=function(t){var e=t.instance;this.tip=e.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},r._fixTransition=function(){var t=this.getTipElement(),n=this.config.animation;null===t.getAttribute("x-placement")&&(e(t).removeClass(oe),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},t._jQueryInterface=function(n){return this.each((function(){var r=e(this).data("bs.tooltip"),i="object"==typeof n&&n;if((r||!/dispose|hide/.test(n))&&(r||(r=new t(this,i),e(this).data("bs.tooltip",r)),"string"==typeof n)){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return ee}},{key:"NAME",get:function(){return Xt}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return ie}},{key:"EVENT_KEY",get:function(){return".bs.tooltip"}},{key:"DefaultType",get:function(){return Jt}}]),t}();e.fn.tooltip=pe._jQueryInterface,e.fn.tooltip.Constructor=pe,e.fn.tooltip.noConflict=function(){return e.fn.tooltip=Kt,pe._jQueryInterface};var de="popover",ge=e.fn.popover,me=new RegExp("(^|\\s)bs-popover\\S+","g"),ve=a({},pe.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),ye=a({},pe.DefaultType,{content:"(string|element|function)"}),_e="fade",we="show",be=".popover-header",xe=".popover-body",Te={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"},Ee=function(t){var n,r;function o(){return t.apply(this,arguments)||this}r=t,(n=o).prototype=Object.create(r.prototype),n.prototype.constructor=n,n.__proto__=r;var a=o.prototype;return a.isWithContent=function(){return this.getTitle()||this._getContent()},a.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-popover-"+t)},a.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},a.setContent=function(){var t=e(this.getTipElement());this.setElementContent(t.find(be),this.getTitle());var n=this._getContent();"function"==typeof n&&(n=n.call(this.element)),this.setElementContent(t.find(xe),n),t.removeClass(_e+" "+we)},a._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},a._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(me);null!==n&&n.length>0&&t.removeClass(n.join(""))},o._jQueryInterface=function(t){return this.each((function(){var n=e(this).data("bs.popover"),r="object"==typeof t?t:null;if((n||!/dispose|hide/.test(t))&&(n||(n=new o(this,r),e(this).data("bs.popover",n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}}))},i(o,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return ve}},{key:"NAME",get:function(){return de}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return Te}},{key:"EVENT_KEY",get:function(){return".bs.popover"}},{key:"DefaultType",get:function(){return ye}}]),o}(pe);e.fn.popover=Ee._jQueryInterface,e.fn.popover.Constructor=Ee,e.fn.popover.noConflict=function(){return e.fn.popover=ge,Ee._jQueryInterface};var Ce="scrollspy",Se=e.fn[Ce],Ae={offset:10,method:"auto",target:""},Ne={offset:"number",method:"string",target:"(string|element)"},De={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},ke="dropdown-item",Me="active",Ie={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},Oe="offset",Le="position",Re=function(){function t(t,n){var r=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(n),this._selector=this._config.target+" "+Ie.NAV_LINKS+","+this._config.target+" "+Ie.LIST_ITEMS+","+this._config.target+" "+Ie.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,e(this._scrollElement).on(De.SCROLL,(function(t){return r._process(t)})),this.refresh(),this._process()}var n=t.prototype;return n.refresh=function(){var t=this,n=this._scrollElement===this._scrollElement.window?Oe:Le,r="auto"===this._config.method?n:this._config.method,i=r===Le?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map((function(t){var n,o=u.getSelectorFromElement(t);if(o&&(n=document.querySelector(o)),n){var a=n.getBoundingClientRect();if(a.width||a.height)return[e(n)[r]().top+i,o]}return null})).filter((function(t){return t})).sort((function(t,e){return t[0]-e[0]})).forEach((function(e){t._offsets.push(e[0]),t._targets.push(e[1])}))},n.dispose=function(){e.removeData(this._element,"bs.scrollspy"),e(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},n._getConfig=function(t){if("string"!=typeof(t=a({},Ae,"object"==typeof t&&t?t:{})).target){var n=e(t.target).attr("id");n||(n=u.getUID(Ce),e(t.target).attr("id",n)),t.target="#"+n}return u.typeCheckConfig(Ce,t,Ne),t},n._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},n._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},n._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},n._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){var r=this._targets[this._targets.length-1];this._activeTarget!==r&&this._activate(r)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var i=this._offsets.length;i--;)this._activeTarget!==this._targets[i]&&t>=this._offsets[i]&&(void 0===this._offsets[i+1]||t<this._offsets[i+1])&&this._activate(this._targets[i])}},n._activate=function(t){this._activeTarget=t,this._clear();var n=this._selector.split(",").map((function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'})),r=e([].slice.call(document.querySelectorAll(n.join(","))));r.hasClass(ke)?(r.closest(Ie.DROPDOWN).find(Ie.DROPDOWN_TOGGLE).addClass(Me),r.addClass(Me)):(r.addClass(Me),r.parents(Ie.NAV_LIST_GROUP).prev(Ie.NAV_LINKS+", "+Ie.LIST_ITEMS).addClass(Me),r.parents(Ie.NAV_LIST_GROUP).prev(Ie.NAV_ITEMS).children(Ie.NAV_LINKS).addClass(Me)),e(this._scrollElement).trigger(De.ACTIVATE,{relatedTarget:t})},n._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter((function(t){return t.classList.contains(Me)})).forEach((function(t){return t.classList.remove(Me)}))},t._jQueryInterface=function(n){return this.each((function(){var r=e(this).data("bs.scrollspy");if(r||(r=new t(this,"object"==typeof n&&n),e(this).data("bs.scrollspy",r)),"string"==typeof n){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Ae}}]),t}();e(window).on(De.LOAD_DATA_API,(function(){for(var t=[].slice.call(document.querySelectorAll(Ie.DATA_SPY)),n=t.length;n--;){var r=e(t[n]);Re._jQueryInterface.call(r,r.data())}})),e.fn[Ce]=Re._jQueryInterface,e.fn[Ce].Constructor=Re,e.fn[Ce].noConflict=function(){return e.fn[Ce]=Se,Re._jQueryInterface};var Pe=e.fn.tab,je={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},He="dropdown-menu",Fe="active",qe="disabled",Ue="fade",Be="show",We=".dropdown",ze=".nav, .list-group",Ye=".active",Ve="> li > .active",Ge='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',$e=".dropdown-toggle",Xe="> .dropdown-menu .active",Ke=function(){function t(t){this._element=t}var n=t.prototype;return n.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&e(this._element).hasClass(Fe)||e(this._element).hasClass(qe))){var n,r,i=e(this._element).closest(ze)[0],o=u.getSelectorFromElement(this._element);if(i){var a="UL"===i.nodeName||"OL"===i.nodeName?Ve:Ye;r=(r=e.makeArray(e(i).find(a)))[r.length-1]}var s=e.Event(je.HIDE,{relatedTarget:this._element}),l=e.Event(je.SHOW,{relatedTarget:r});if(r&&e(r).trigger(s),e(this._element).trigger(l),!l.isDefaultPrevented()&&!s.isDefaultPrevented()){o&&(n=document.querySelector(o)),this._activate(this._element,i);var c=function(){var n=e.Event(je.HIDDEN,{relatedTarget:t._element}),i=e.Event(je.SHOWN,{relatedTarget:r});e(r).trigger(n),e(t._element).trigger(i)};n?this._activate(n,n.parentNode,c):c()}}},n.dispose=function(){e.removeData(this._element,"bs.tab"),this._element=null},n._activate=function(t,n,r){var i=this,o=(!n||"UL"!==n.nodeName&&"OL"!==n.nodeName?e(n).children(Ye):e(n).find(Ve))[0],a=r&&o&&e(o).hasClass(Ue),s=function(){return i._transitionComplete(t,o,r)};if(o&&a){var l=u.getTransitionDurationFromElement(o);e(o).removeClass(Be).one(u.TRANSITION_END,s).emulateTransitionEnd(l)}else s()},n._transitionComplete=function(t,n,r){if(n){e(n).removeClass(Fe);var i=e(n.parentNode).find(Xe)[0];i&&e(i).removeClass(Fe),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!1)}if(e(t).addClass(Fe),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),u.reflow(t),t.classList.contains(Ue)&&t.classList.add(Be),t.parentNode&&e(t.parentNode).hasClass(He)){var o=e(t).closest(We)[0];if(o){var a=[].slice.call(o.querySelectorAll($e));e(a).addClass(Fe)}t.setAttribute("aria-expanded",!0)}r&&r()},t._jQueryInterface=function(n){return this.each((function(){var r=e(this),i=r.data("bs.tab");if(i||(i=new t(this),r.data("bs.tab",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),t}();e(document).on(je.CLICK_DATA_API,Ge,(function(t){t.preventDefault(),Ke._jQueryInterface.call(e(this),"show")})),e.fn.tab=Ke._jQueryInterface,e.fn.tab.Constructor=Ke,e.fn.tab.noConflict=function(){return e.fn.tab=Pe,Ke._jQueryInterface};var Qe=e.fn.toast,Ze={CLICK_DISMISS:"click.dismiss.bs.toast",HIDE:"hide.bs.toast",HIDDEN:"hidden.bs.toast",SHOW:"show.bs.toast",SHOWN:"shown.bs.toast"},Je="fade",tn="hide",en="show",nn="showing",rn={animation:"boolean",autohide:"boolean",delay:"number"},on={animation:!0,autohide:!0,delay:500},an='[data-dismiss="toast"]',sn=function(){function t(t,e){this._element=t,this._config=this._getConfig(e),this._timeout=null,this._setListeners()}var n=t.prototype;return n.show=function(){var t=this;e(this._element).trigger(Ze.SHOW),this._config.animation&&this._element.classList.add(Je);var n=function(){t._element.classList.remove(nn),t._element.classList.add(en),e(t._element).trigger(Ze.SHOWN),t._config.autohide&&t.hide()};if(this._element.classList.remove(tn),this._element.classList.add(nn),this._config.animation){var r=u.getTransitionDurationFromElement(this._element);e(this._element).one(u.TRANSITION_END,n).emulateTransitionEnd(r)}else n()},n.hide=function(t){var n=this;this._element.classList.contains(en)&&(e(this._element).trigger(Ze.HIDE),t?this._close():this._timeout=setTimeout((function(){n._close()}),this._config.delay))},n.dispose=function(){clearTimeout(this._timeout),this._timeout=null,this._element.classList.contains(en)&&this._element.classList.remove(en),e(this._element).off(Ze.CLICK_DISMISS),e.removeData(this._element,"bs.toast"),this._element=null,this._config=null},n._getConfig=function(t){return t=a({},on,e(this._element).data(),"object"==typeof t&&t?t:{}),u.typeCheckConfig("toast",t,this.constructor.DefaultType),t},n._setListeners=function(){var t=this;e(this._element).on(Ze.CLICK_DISMISS,an,(function(){return t.hide(!0)}))},n._close=function(){var t=this,n=function(){t._element.classList.add(tn),e(t._element).trigger(Ze.HIDDEN)};if(this._element.classList.remove(en),this._config.animation){var r=u.getTransitionDurationFromElement(this._element);e(this._element).one(u.TRANSITION_END,n).emulateTransitionEnd(r)}else n()},t._jQueryInterface=function(n){return this.each((function(){var r=e(this),i=r.data("bs.toast");if(i||(i=new t(this,"object"==typeof n&&n),r.data("bs.toast",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n](this)}}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"DefaultType",get:function(){return rn}},{key:"Default",get:function(){return on}}]),t}();e.fn.toast=sn._jQueryInterface,e.fn.toast.Constructor=sn,e.fn.toast.noConflict=function(){return e.fn.toast=Qe,sn._jQueryInterface},function(){if(void 0===e)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(),t.Util=u,t.Alert=g,t.Button=S,t.Carousel=G,t.Collapse=at,t.Dropdown=Mt,t.Modal=Wt,t.Popover=Ee,t.Scrollspy=Re,t.Tab=Ke,t.Toast=sn,t.Tooltip=pe,Object.defineProperty(t,"__esModule",{value:!0})}(e,n(2),n(9))},function(t,e,n){"use strict";n.r(e),function(t){
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.0
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,r=function(){for(var t=["Edge","Trident","Firefox"],e=0;e<t.length;e+=1)if(n&&navigator.userAgent.indexOf(t[e])>=0)return 1;return 0}();var i=n&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then((function(){e=!1,t()})))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout((function(){e=!1,t()}),r))}};function o(t){return t&&"[object Function]"==={}.toString.call(t)}function a(t,e){if(1!==t.nodeType)return[];var n=t.ownerDocument.defaultView.getComputedStyle(t,null);return e?n[e]:n}function s(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function l(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=a(t),n=e.overflow,r=e.overflowX,i=e.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?t:l(s(t))}function u(t){return t&&t.referenceNode?t.referenceNode:t}var c=n&&!(!window.MSInputMethodContext||!document.documentMode),f=n&&/MSIE 10/.test(navigator.userAgent);function h(t){return 11===t?c:10===t?f:c||f}function p(t){if(!t)return document.documentElement;for(var e=h(10)?document.body:null,n=t.offsetParent||null;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===a(n,"position")?p(n):n:t?t.ownerDocument.documentElement:document.documentElement}function d(t){return null!==t.parentNode?d(t.parentNode):t}function g(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?t:e,i=n?e:t,o=document.createRange();o.setStart(r,0),o.setEnd(i,0);var a,s,l=o.commonAncestorContainer;if(t!==l&&e!==l||r.contains(i))return"BODY"===(s=(a=l).nodeName)||"HTML"!==s&&p(a.firstElementChild)!==a?p(l):l;var u=d(t);return u.host?g(u.host,e):g(t,d(e).host)}function m(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var r=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||r)[e]}return t[e]}function v(t,e){var n="x"===e?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+r+"Width"],10)}function y(t,e,n,r){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],h(10)?parseInt(n["offset"+t])+parseInt(r["margin"+("Height"===t?"Top":"Left")])+parseInt(r["margin"+("Height"===t?"Bottom":"Right")]):0)}function _(t){var e=t.body,n=t.documentElement,r=h(10)&&getComputedStyle(n);return{height:y("Height",e,n,r),width:y("Width",e,n,r)}}var w=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},b=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),x=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},T=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function E(t){return T({},t,{right:t.left+t.width,bottom:t.top+t.height})}function C(t){var e={};try{if(h(10)){e=t.getBoundingClientRect();var n=m(t,"top"),r=m(t,"left");e.top+=n,e.left+=r,e.bottom+=n,e.right+=r}else e=t.getBoundingClientRect()}catch(t){}var i={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},o="HTML"===t.nodeName?_(t.ownerDocument):{},s=o.width||t.clientWidth||i.width,l=o.height||t.clientHeight||i.height,u=t.offsetWidth-s,c=t.offsetHeight-l;if(u||c){var f=a(t);u-=v(f,"x"),c-=v(f,"y"),i.width-=u,i.height-=c}return E(i)}function S(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=h(10),i="HTML"===e.nodeName,o=C(t),s=C(e),u=l(t),c=a(e),f=parseFloat(c.borderTopWidth,10),p=parseFloat(c.borderLeftWidth,10);n&&i&&(s.top=Math.max(s.top,0),s.left=Math.max(s.left,0));var d=E({top:o.top-s.top-f,left:o.left-s.left-p,width:o.width,height:o.height});if(d.marginTop=0,d.marginLeft=0,!r&&i){var g=parseFloat(c.marginTop,10),v=parseFloat(c.marginLeft,10);d.top-=f-g,d.bottom-=f-g,d.left-=p-v,d.right-=p-v,d.marginTop=g,d.marginLeft=v}return(r&&!n?e.contains(u):e===u&&"BODY"!==u.nodeName)&&(d=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=m(e,"top"),i=m(e,"left"),o=n?-1:1;return t.top+=r*o,t.bottom+=r*o,t.left+=i*o,t.right+=i*o,t}(d,e)),d}function A(t){if(!t||!t.parentElement||h())return document.documentElement;for(var e=t.parentElement;e&&"none"===a(e,"transform");)e=e.parentElement;return e||document.documentElement}function N(t,e,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},c=i?A(t):g(t,u(e));if("viewport"===r)o=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,r=S(t,n),i=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),a=e?0:m(n),s=e?0:m(n,"left");return E({top:a-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:i,height:o})}(c,i);else{var f=void 0;"scrollParent"===r?"BODY"===(f=l(s(e))).nodeName&&(f=t.ownerDocument.documentElement):f="window"===r?t.ownerDocument.documentElement:r;var h=S(f,c,i);if("HTML"!==f.nodeName||function t(e){var n=e.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===a(e,"position"))return!0;var r=s(e);return!!r&&t(r)}(c))o=h;else{var p=_(t.ownerDocument),d=p.height,v=p.width;o.top+=h.top-h.marginTop,o.bottom=d+h.top,o.left+=h.left-h.marginLeft,o.right=v+h.left}}var y="number"==typeof(n=n||0);return o.left+=y?n:n.left||0,o.top+=y?n:n.top||0,o.right-=y?n:n.right||0,o.bottom-=y?n:n.bottom||0,o}function D(t,e,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var a=N(n,r,o,i),s={top:{width:a.width,height:e.top-a.top},right:{width:a.right-e.right,height:a.height},bottom:{width:a.width,height:a.bottom-e.bottom},left:{width:e.left-a.left,height:a.height}},l=Object.keys(s).map((function(t){return T({key:t},s[t],{area:(e=s[t],e.width*e.height)});var e})).sort((function(t,e){return e.area-t.area})),u=l.filter((function(t){var e=t.width,r=t.height;return e>=n.clientWidth&&r>=n.clientHeight})),c=u.length>0?u[0].key:l[0].key,f=t.split("-")[1];return c+(f?"-"+f:"")}function k(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return S(n,r?A(e):g(e,u(n)),r)}function M(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),n=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),r=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+r,height:t.offsetHeight+n}}function I(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,(function(t){return e[t]}))}function O(t,e,n){n=n.split("-")[0];var r=M(t),i={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",s=o?"left":"top",l=o?"height":"width",u=o?"width":"height";return i[a]=e[a]+e[l]/2-r[l]/2,i[s]=n===s?e[s]-r[u]:e[I(s)],i}function L(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function R(t,e,n){return(void 0===n?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex((function(t){return t[e]===n}));var r=L(t,(function(t){return t[e]===n}));return t.indexOf(r)}(t,"name",n))).forEach((function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&o(n)&&(e.offsets.popper=E(e.offsets.popper),e.offsets.reference=E(e.offsets.reference),e=n(e,t))})),e}function P(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=k(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=D(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=O(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=R(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}function j(t,e){return t.some((function(t){var n=t.name;return t.enabled&&n===e}))}function H(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),r=0;r<e.length;r++){var i=e[r],o=i?""+i+n:t;if(void 0!==document.body.style[o])return o}return null}function F(){return this.state.isDestroyed=!0,j(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function q(t){var e=t.ownerDocument;return e?e.defaultView:window}function U(t,e,n,r){n.updateBound=r,q(t).addEventListener("resize",n.updateBound,{passive:!0});var i=l(t);return function t(e,n,r,i){var o="BODY"===e.nodeName,a=o?e.ownerDocument.defaultView:e;a.addEventListener(n,r,{passive:!0}),o||t(l(a.parentNode),n,r,i),i.push(a)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function B(){this.state.eventsEnabled||(this.state=U(this.reference,this.options,this.state,this.scheduleUpdate))}function W(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,q(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach((function(t){t.removeEventListener("scroll",e.updateBound)})),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function z(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function Y(t,e){Object.keys(e).forEach((function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&z(e[n])&&(r="px"),t.style[n]=e[n]+r}))}var V=n&&/Firefox/i.test(navigator.userAgent);function G(t,e,n){var r=L(t,(function(t){return t.name===e})),i=!!r&&t.some((function(t){return t.name===n&&t.enabled&&t.order<r.order}));if(!i){var o="`"+e+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var $=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],X=$.slice(3);function K(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=X.indexOf(t),r=X.slice(n+1).concat(X.slice(0,n));return e?r.reverse():r}var Q={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function Z(t,e,n,r){var i=[0,0],o=-1!==["right","left"].indexOf(r),a=t.split(/(\+|\-)/).map((function(t){return t.trim()})),s=a.indexOf(L(a,(function(t){return-1!==t.search(/,|\s/)})));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,u=-1!==s?[a.slice(0,s).concat([a[s].split(l)[0]]),[a[s].split(l)[1]].concat(a.slice(s+1))]:[a];return(u=u.map((function(t,r){var i=(1===r?!o:o)?"height":"width",a=!1;return t.reduce((function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,a=!0,t):a?(t[t.length-1]+=e,a=!1,t):t.concat(e)}),[]).map((function(t){return function(t,e,n,r){var i=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],a=i[2];if(!o)return t;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=r}return E(s)[e]/100*o}if("vh"===a||"vw"===a){return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o}return o}(t,i,e,n)}))}))).forEach((function(t,e){t.forEach((function(n,r){z(n)&&(i[e]+=n*("-"===t[r-1]?-1:1))}))})),i}var J={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],r=e.split("-")[1];if(r){var i=t.offsets,o=i.reference,a=i.popper,s=-1!==["bottom","top"].indexOf(n),l=s?"left":"top",u=s?"width":"height",c={start:x({},l,o[l]),end:x({},l,o[l]+o[u]-a[u])};t.offsets.popper=T({},a,c[r])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,r=t.placement,i=t.offsets,o=i.popper,a=i.reference,s=r.split("-")[0],l=void 0;return l=z(+n)?[+n,0]:Z(n,o,a,s),"left"===s?(o.top+=l[0],o.left-=l[1]):"right"===s?(o.top+=l[0],o.left+=l[1]):"top"===s?(o.left+=l[0],o.top-=l[1]):"bottom"===s&&(o.left+=l[0],o.top+=l[1]),t.popper=o,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||p(t.instance.popper);t.instance.reference===n&&(n=p(n));var r=H("transform"),i=t.instance.popper.style,o=i.top,a=i.left,s=i[r];i.top="",i.left="",i[r]="";var l=N(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);i.top=o,i.left=a,i[r]=s,e.boundaries=l;var u=e.priority,c=t.offsets.popper,f={primary:function(t){var n=c[t];return c[t]<l[t]&&!e.escapeWithReference&&(n=Math.max(c[t],l[t])),x({},t,n)},secondary:function(t){var n="right"===t?"left":"top",r=c[n];return c[t]>l[t]&&!e.escapeWithReference&&(r=Math.min(c[n],l[t]-("right"===t?c.width:c.height))),x({},n,r)}};return u.forEach((function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";c=T({},c,f[e](t))})),t.offsets.popper=c,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,r=e.reference,i=t.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(i),s=a?"right":"bottom",l=a?"left":"top",u=a?"width":"height";return n[s]<o(r[l])&&(t.offsets.popper[l]=o(r[l])-n[u]),n[l]>o(r[s])&&(t.offsets.popper[l]=o(r[s])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!G(t.instance.modifiers,"arrow","keepTogether"))return t;var r=e.element;if("string"==typeof r){if(!(r=t.instance.popper.querySelector(r)))return t}else if(!t.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var i=t.placement.split("-")[0],o=t.offsets,s=o.popper,l=o.reference,u=-1!==["left","right"].indexOf(i),c=u?"height":"width",f=u?"Top":"Left",h=f.toLowerCase(),p=u?"left":"top",d=u?"bottom":"right",g=M(r)[c];l[d]-g<s[h]&&(t.offsets.popper[h]-=s[h]-(l[d]-g)),l[h]+g>s[d]&&(t.offsets.popper[h]+=l[h]+g-s[d]),t.offsets.popper=E(t.offsets.popper);var m=l[h]+l[c]/2-g/2,v=a(t.instance.popper),y=parseFloat(v["margin"+f],10),_=parseFloat(v["border"+f+"Width"],10),w=m-t.offsets.popper[h]-y-_;return w=Math.max(Math.min(s[c]-g,w),0),t.arrowElement=r,t.offsets.arrow=(x(n={},h,Math.round(w)),x(n,p,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(j(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=N(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),r=t.placement.split("-")[0],i=I(r),o=t.placement.split("-")[1]||"",a=[];switch(e.behavior){case Q.FLIP:a=[r,i];break;case Q.CLOCKWISE:a=K(r);break;case Q.COUNTERCLOCKWISE:a=K(r,!0);break;default:a=e.behavior}return a.forEach((function(s,l){if(r!==s||a.length===l+1)return t;r=t.placement.split("-")[0],i=I(r);var u=t.offsets.popper,c=t.offsets.reference,f=Math.floor,h="left"===r&&f(u.right)>f(c.left)||"right"===r&&f(u.left)<f(c.right)||"top"===r&&f(u.bottom)>f(c.top)||"bottom"===r&&f(u.top)<f(c.bottom),p=f(u.left)<f(n.left),d=f(u.right)>f(n.right),g=f(u.top)<f(n.top),m=f(u.bottom)>f(n.bottom),v="left"===r&&p||"right"===r&&d||"top"===r&&g||"bottom"===r&&m,y=-1!==["top","bottom"].indexOf(r),_=!!e.flipVariations&&(y&&"start"===o&&p||y&&"end"===o&&d||!y&&"start"===o&&g||!y&&"end"===o&&m),w=!!e.flipVariationsByContent&&(y&&"start"===o&&d||y&&"end"===o&&p||!y&&"start"===o&&m||!y&&"end"===o&&g),b=_||w;(h||v||b)&&(t.flipped=!0,(h||v)&&(r=a[l+1]),b&&(o=function(t){return"end"===t?"start":"start"===t?"end":t}(o)),t.placement=r+(o?"-"+o:""),t.offsets.popper=T({},t.offsets.popper,O(t.instance.popper,t.offsets.reference,t.placement)),t=R(t.instance.modifiers,t,"flip"))})),t},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],r=t.offsets,i=r.popper,o=r.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return i[a?"left":"top"]=o[n]-(s?i[a?"width":"height"]:0),t.placement=I(e),t.offsets.popper=E(i),t}},hide:{order:800,enabled:!0,fn:function(t){if(!G(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=L(t.instance.modifiers,(function(t){return"preventOverflow"===t.name})).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,r=e.y,i=t.offsets.popper,o=L(t.instance.modifiers,(function(t){return"applyStyle"===t.name})).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:e.gpuAcceleration,s=p(t.instance.popper),l=C(s),u={position:i.position},c=function(t,e){var n=t.offsets,r=n.popper,i=n.reference,o=Math.round,a=Math.floor,s=function(t){return t},l=o(i.width),u=o(r.width),c=-1!==["left","right"].indexOf(t.placement),f=-1!==t.placement.indexOf("-"),h=e?c||f||l%2==u%2?o:a:s,p=e?o:s;return{left:h(l%2==1&&u%2==1&&!f&&e?r.left-1:r.left),top:p(r.top),bottom:p(r.bottom),right:h(r.right)}}(t,window.devicePixelRatio<2||!V),f="bottom"===n?"top":"bottom",h="right"===r?"left":"right",d=H("transform"),g=void 0,m=void 0;if(m="bottom"===f?"HTML"===s.nodeName?-s.clientHeight+c.bottom:-l.height+c.bottom:c.top,g="right"===h?"HTML"===s.nodeName?-s.clientWidth+c.right:-l.width+c.right:c.left,a&&d)u[d]="translate3d("+g+"px, "+m+"px, 0)",u[f]=0,u[h]=0,u.willChange="transform";else{var v="bottom"===f?-1:1,y="right"===h?-1:1;u[f]=m*v,u[h]=g*y,u.willChange=f+", "+h}var _={"x-placement":t.placement};return t.attributes=T({},_,t.attributes),t.styles=T({},u,t.styles),t.arrowStyles=T({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return Y(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach((function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)})),t.arrowElement&&Object.keys(t.arrowStyles).length&&Y(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,r,i){var o=k(i,e,t,n.positionFixed),a=D(n.placement,o,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",a),Y(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},tt=function(){function t(e,n){var r=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};w(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=i(this.update.bind(this)),this.options=T({},t.Defaults,a),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(T({},t.Defaults.modifiers,a.modifiers)).forEach((function(e){r.options.modifiers[e]=T({},t.Defaults.modifiers[e]||{},a.modifiers?a.modifiers[e]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(t){return T({name:t},r.options.modifiers[t])})).sort((function(t,e){return t.order-e.order})),this.modifiers.forEach((function(t){t.enabled&&o(t.onLoad)&&t.onLoad(r.reference,r.popper,r.options,t,r.state)})),this.update();var s=this.options.eventsEnabled;s&&this.enableEventListeners(),this.state.eventsEnabled=s}return b(t,[{key:"update",value:function(){return P.call(this)}},{key:"destroy",value:function(){return F.call(this)}},{key:"enableEventListeners",value:function(){return B.call(this)}},{key:"disableEventListeners",value:function(){return W.call(this)}}]),t}();tt.Utils=("undefined"!=typeof window?window:t).PopperUtils,tt.placements=$,tt.Defaults=J,e.default=tt}.call(this,n(10))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";n.r(e);n(8);var r=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},i=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return r(e(t),n)}),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}};var o=i(r),a=o.right,s=(o.left,a);var l=function(t,e){var n,r,i,o=t.length,a=-1;if(null==e){for(;++a<o;)if(null!=(n=t[a])&&n>=n)for(r=i=n;++a<o;)null!=(n=t[a])&&(r>n&&(r=n),i<n&&(i=n))}else for(;++a<o;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=i=n;++a<o;)null!=(n=e(t[a],a,t))&&(r>n&&(r=n),i<n&&(i=n));return[r,i]},u=Array.prototype,c=u.slice,f=(u.map,function(t){return function(){return t}}),h=function(t){return t},p=function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o},d=Math.sqrt(50),g=Math.sqrt(10),m=Math.sqrt(2),v=function(t,e,n){var r,i,o,a,s=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=y(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),o=new Array(i=Math.ceil(t-e+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o};function y(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=d?10:o>=g?5:o>=m?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=d?10:o>=g?5:o>=m?2:1)}function _(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=d?i*=10:o>=g?i*=5:o>=m&&(i*=2),e<t?-i:i}var w=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},b=function(){var t=h,e=l,n=w;function r(r){var i,o,a=r.length,l=new Array(a);for(i=0;i<a;++i)l[i]=t(r[i],i,r);var u=e(l),c=u[0],f=u[1],h=n(l,c,f);Array.isArray(h)||(h=_(c,f,h),h=p(Math.ceil(c/h)*h,f,h));for(var d=h.length;h[0]<=c;)h.shift(),--d;for(;h[d-1]>f;)h.pop(),--d;var g,m=new Array(d+1);for(i=0;i<=d;++i)(g=m[i]=[]).x0=i>0?h[i-1]:c,g.x1=i<d?h[i]:f;for(i=0;i<a;++i)c<=(o=l[i])&&o<=f&&m[s(h,o,0,d)].push(r[i]);return m}return r.value=function(e){return arguments.length?(t="function"==typeof e?e:f(e),r):t},r.domain=function(t){return arguments.length?(e="function"==typeof t?t:f([t[0],t[1]]),r):e},r.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?f(c.call(t)):f(t),r):n},r},x=function(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&n>r&&(r=n);return r};var T=Array.prototype.slice,E=function(t){return t},C=1,S=2,A=3,N=4,D=1e-6;function k(t){return"translate("+(t+.5)+",0)"}function M(t){return"translate(0,"+(t+.5)+")"}function I(t){return function(e){return+t(e)}}function O(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function L(){return!this.__axis}function R(t,e){var n=[],r=null,i=null,o=6,a=6,s=3,l=t===C||t===N?-1:1,u=t===N||t===S?"x":"y",c=t===C||t===A?k:M;function f(f){var h=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,p=null==i?e.tickFormat?e.tickFormat.apply(e,n):E:i,d=Math.max(o,0)+s,g=e.range(),m=+g[0]+.5,v=+g[g.length-1]+.5,y=(e.bandwidth?O:I)(e.copy()),_=f.selection?f.selection():f,w=_.selectAll(".domain").data([null]),b=_.selectAll(".tick").data(h,e).order(),x=b.exit(),T=b.enter().append("g").attr("class","tick"),k=b.select("line"),M=b.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),b=b.merge(T),k=k.merge(T.append("line").attr("stroke","currentColor").attr(u+"2",l*o)),M=M.merge(T.append("text").attr("fill","currentColor").attr(u,l*d).attr("dy",t===C?"0em":t===A?"0.71em":"0.32em")),f!==_&&(w=w.transition(f),b=b.transition(f),k=k.transition(f),M=M.transition(f),x=x.transition(f).attr("opacity",D).attr("transform",(function(t){return isFinite(t=y(t))?c(t):this.getAttribute("transform")})),T.attr("opacity",D).attr("transform",(function(t){var e=this.parentNode.__axis;return c(e&&isFinite(e=e(t))?e:y(t))}))),x.remove(),w.attr("d",t===N||t==S?a?"M"+l*a+","+m+"H0.5V"+v+"H"+l*a:"M0.5,"+m+"V"+v:a?"M"+m+","+l*a+"V0.5H"+v+"V"+l*a:"M"+m+",0.5H"+v),b.attr("opacity",1).attr("transform",(function(t){return c(y(t))})),k.attr(u+"2",l*o),M.attr(u,l*d).text(p),_.filter(L).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===S?"start":t===N?"end":"middle"),_.each((function(){this.__axis=y}))}return f.scale=function(t){return arguments.length?(e=t,f):e},f.ticks=function(){return n=T.call(arguments),f},f.tickArguments=function(t){return arguments.length?(n=null==t?[]:T.call(t),f):n.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:T.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(o=a=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(a=+t,f):a},f.tickPadding=function(t){return arguments.length?(s=+t,f):s},f}function P(t){return R(A,t)}function j(t){return R(N,t)}var H={value:function(){}};function F(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new q(r)}function q(t){this._=t}function U(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function B(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function W(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=H,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}q.prototype=F.prototype={constructor:q,on:function(t,e){var n,r=this._,i=U(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<a;)if(n=(t=i[o]).type)r[n]=W(r[n],t.name,e);else if(null==e)for(n in r)r[n]=W(r[n],t.name,null);return this}for(;++o<a;)if((n=(t=i[o]).type)&&(n=B(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new q(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var z=F,Y="http://www.w3.org/1999/xhtml",V={svg:"http://www.w3.org/2000/svg",xhtml:Y,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},G=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),V.hasOwnProperty(e)?{space:V[e],local:t}:t};function $(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===Y&&e.documentElement.namespaceURI===Y?e.createElement(t):e.createElementNS(n,t)}}function X(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var K=function(t){var e=G(t);return(e.local?X:$)(e)};function Q(){}var Z=function(t){return null==t?Q:function(){return this.querySelector(t)}};function J(){return[]}var tt=function(t){return null==t?J:function(){return this.querySelectorAll(t)}},et=function(t){return function(){return this.matches(t)}},nt=function(t){return new Array(t.length)};function rt(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}rt.prototype={constructor:rt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var it="$";function ot(t,e,n,r,i,o){for(var a,s=0,l=e.length,u=o.length;s<u;++s)(a=e[s])?(a.__data__=o[s],r[s]=a):n[s]=new rt(t,o[s]);for(;s<l;++s)(a=e[s])&&(i[s]=a)}function at(t,e,n,r,i,o,a){var s,l,u,c={},f=e.length,h=o.length,p=new Array(f);for(s=0;s<f;++s)(l=e[s])&&(p[s]=u=it+a.call(l,l.__data__,s,e),u in c?i[s]=l:c[u]=l);for(s=0;s<h;++s)(l=c[u=it+a.call(t,o[s],s,o)])?(r[s]=l,l.__data__=o[s],c[u]=null):n[s]=new rt(t,o[s]);for(s=0;s<f;++s)(l=e[s])&&c[p[s]]===l&&(i[s]=l)}function st(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function lt(t){return function(){this.removeAttribute(t)}}function ut(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ct(t,e){return function(){this.setAttribute(t,e)}}function ft(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function ht(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function pt(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var dt=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function gt(t){return function(){this.style.removeProperty(t)}}function mt(t,e,n){return function(){this.style.setProperty(t,e,n)}}function vt(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function yt(t,e){return t.style.getPropertyValue(e)||dt(t).getComputedStyle(t,null).getPropertyValue(e)}function _t(t){return function(){delete this[t]}}function wt(t,e){return function(){this[t]=e}}function bt(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function xt(t){return t.trim().split(/^|\s+/)}function Tt(t){return t.classList||new Et(t)}function Et(t){this._node=t,this._names=xt(t.getAttribute("class")||"")}function Ct(t,e){for(var n=Tt(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function St(t,e){for(var n=Tt(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function At(t){return function(){Ct(this,t)}}function Nt(t){return function(){St(this,t)}}function Dt(t,e){return function(){(e.apply(this,arguments)?Ct:St)(this,t)}}Et.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function kt(){this.textContent=""}function Mt(t){return function(){this.textContent=t}}function It(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function Ot(){this.innerHTML=""}function Lt(t){return function(){this.innerHTML=t}}function Rt(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Pt(){this.nextSibling&&this.parentNode.appendChild(this)}function jt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Ht(){return null}function Ft(){var t=this.parentNode;t&&t.removeChild(this)}function qt(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Ut(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Bt={},Wt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Bt={mouseenter:"mouseover",mouseleave:"mouseout"}));function zt(t,e,n){return t=Yt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function Yt(t,e,n){return function(r){var i=Wt;Wt=r;try{t.call(this,this.__data__,e,n)}finally{Wt=i}}}function Vt(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function Gt(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function $t(t,e,n){var r=Bt.hasOwnProperty(t.type)?zt:Yt;return function(i,o,a){var s,l=this.__on,u=r(e,o,a);if(l)for(var c=0,f=l.length;c<f;++c)if((s=l[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=u,s.capture=n),void(s.value=e);this.addEventListener(t.type,u,n),s={type:t.type,name:t.name,value:e,listener:u,capture:n},l?l.push(s):this.__on=[s]}}function Xt(t,e,n){var r=dt(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function Kt(t,e){return function(){return Xt(this,t,e)}}function Qt(t,e){return function(){return Xt(this,t,e.apply(this,arguments))}}var Zt=[null];function Jt(t,e){this._groups=t,this._parents=e}function te(){return new Jt([[document.documentElement]],Zt)}Jt.prototype=te.prototype={constructor:Jt,select:function(t){"function"!=typeof t&&(t=Z(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,s=e[i],l=s.length,u=r[i]=new Array(l),c=0;c<l;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),u[c]=a);return new Jt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=tt(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var a,s=e[o],l=s.length,u=0;u<l;++u)(a=s[u])&&(r.push(t.call(a,a.__data__,u,s)),i.push(a));return new Jt(r,i)},filter:function(t){"function"!=typeof t&&(t=et(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],u=0;u<s;++u)(o=a[u])&&t.call(o,o.__data__,u,a)&&l.push(o);return new Jt(r,this._parents)},data:function(t,e){if(!t)return d=new Array(this.size()),c=-1,this.each((function(t){d[++c]=t})),d;var n,r=e?at:ot,i=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var a=o.length,s=new Array(a),l=new Array(a),u=new Array(a),c=0;c<a;++c){var f=i[c],h=o[c],p=h.length,d=t.call(f,f&&f.__data__,c,i),g=d.length,m=l[c]=new Array(g),v=s[c]=new Array(g);r(f,h,m,v,u[c]=new Array(p),d,e);for(var y,_,w=0,b=0;w<g;++w)if(y=m[w]){for(w>=b&&(b=w+1);!(_=v[b])&&++b<g;);y._next=_||null}}return(s=new Jt(s,i))._enter=l,s._exit=u,s},enter:function(){return new Jt(this._enter||this._groups.map(nt),this._parents)},exit:function(){return new Jt(this._exit||this._groups.map(nt),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,u=e[s],c=n[s],f=u.length,h=a[s]=new Array(f),p=0;p<f;++p)(l=u[p]||c[p])&&(h[p]=l);for(;s<r;++s)a[s]=e[s];return new Jt(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=st);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],l=s.length,u=i[o]=new Array(l),c=0;c<l;++c)(a=s[c])&&(u[c]=a);u.sort(e)}return new Jt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=G(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?ut:lt:"function"==typeof e?n.local?pt:ht:n.local?ft:ct)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?gt:"function"==typeof e?vt:mt)(t,e,null==n?"":n)):yt(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?_t:"function"==typeof e?bt:wt)(t,e)):this.node()[t]},classed:function(t,e){var n=xt(t+"");if(arguments.length<2){for(var r=Tt(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?Dt:e?At:Nt)(n,e))},text:function(t){return arguments.length?this.each(null==t?kt:("function"==typeof t?It:Mt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Ot:("function"==typeof t?Rt:Lt)(t)):this.node().innerHTML},raise:function(){return this.each(Pt)},lower:function(){return this.each(jt)},append:function(t){var e="function"==typeof t?t:K(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:K(t),r=null==e?Ht:"function"==typeof e?e:Z(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Ft)},clone:function(t){return this.select(t?Ut:qt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=Vt(t+""),a=o.length;if(!(arguments.length<2)){for(s=e?$t:Gt,null==n&&(n=!1),r=0;r<a;++r)this.each(s(o[r],e,n));return this}var s=this.node().__on;if(s)for(var l,u=0,c=s.length;u<c;++u)for(r=0,l=s[u];r<a;++r)if((i=o[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?Qt:Kt)(t,e))}};var ee=te,ne=function(t){return"string"==typeof t?new Jt([[document.querySelector(t)]],[document.documentElement]):new Jt([[t]],Zt)},re=0;function ie(){this._="@"+(++re).toString(36)}ie.prototype=function(){return new ie}.prototype={constructor:ie,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var oe=function(t){return"string"==typeof t?new Jt([document.querySelectorAll(t)],[document.documentElement]):new Jt([null==t?[]:t],Zt)};function ae(t,e,n,r,i,o,a,s,l,u){this.target=t,this.type=e,this.subject=n,this.identifier=r,this.active=i,this.x=o,this.y=a,this.dx=s,this.dy=l,this._=u}ae.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var se=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function le(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function ue(){}var ce="\\s*([+-]?\\d+)\\s*",fe="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",he="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",pe=/^#([0-9a-f]{3,8})$/,de=new RegExp("^rgb\\("+[ce,ce,ce]+"\\)$"),ge=new RegExp("^rgb\\("+[he,he,he]+"\\)$"),me=new RegExp("^rgba\\("+[ce,ce,ce,fe]+"\\)$"),ve=new RegExp("^rgba\\("+[he,he,he,fe]+"\\)$"),ye=new RegExp("^hsl\\("+[fe,he,he]+"\\)$"),_e=new RegExp("^hsla\\("+[fe,he,he,fe]+"\\)$"),we={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function be(){return this.rgb().formatHex()}function xe(){return this.rgb().formatRgb()}function Te(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=pe.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Ee(e):3===n?new Ne(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?new Ne(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?new Ne(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=de.exec(t))?new Ne(e[1],e[2],e[3],1):(e=ge.exec(t))?new Ne(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=me.exec(t))?Ce(e[1],e[2],e[3],e[4]):(e=ve.exec(t))?Ce(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ye.exec(t))?Ie(e[1],e[2]/100,e[3]/100,1):(e=_e.exec(t))?Ie(e[1],e[2]/100,e[3]/100,e[4]):we.hasOwnProperty(t)?Ee(we[t]):"transparent"===t?new Ne(NaN,NaN,NaN,0):null}function Ee(t){return new Ne(t>>16&255,t>>8&255,255&t,1)}function Ce(t,e,n,r){return r<=0&&(t=e=n=NaN),new Ne(t,e,n,r)}function Se(t){return t instanceof ue||(t=Te(t)),t?new Ne((t=t.rgb()).r,t.g,t.b,t.opacity):new Ne}function Ae(t,e,n,r){return 1===arguments.length?Se(t):new Ne(t,e,n,null==r?1:r)}function Ne(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function De(){return"#"+Me(this.r)+Me(this.g)+Me(this.b)}function ke(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Me(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Ie(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Re(t,e,n,r)}function Oe(t){if(t instanceof Re)return new Re(t.h,t.s,t.l,t.opacity);if(t instanceof ue||(t=Te(t)),!t)return new Re;if(t instanceof Re)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,s=o-i,l=(o+i)/2;return s?(a=e===o?(n-r)/s+6*(n<r):n===o?(r-e)/s+2:(e-n)/s+4,s/=l<.5?o+i:2-o-i,a*=60):s=l>0&&l<1?0:a,new Re(a,s,l,t.opacity)}function Le(t,e,n,r){return 1===arguments.length?Oe(t):new Re(t,e,n,null==r?1:r)}function Re(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Pe(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function je(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}se(ue,Te,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:be,formatHex:be,formatHsl:function(){return Oe(this).formatHsl()},formatRgb:xe,toString:xe}),se(Ne,Ae,le(ue,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ne(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ne(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:De,formatHex:De,formatRgb:ke,toString:ke})),se(Re,Le,le(ue,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Re(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Re(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new Ne(Pe(t>=240?t-240:t+120,i,r),Pe(t,i,r),Pe(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var He=function(t){return function(){return t}};function Fe(t,e){return function(n){return t+n*e}}function qe(t,e){var n=e-t;return n?Fe(t,n>180||n<-180?n-360*Math.round(n/360):n):He(isNaN(t)?e:t)}function Ue(t){return 1==(t=+t)?Be:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):He(isNaN(e)?n:e)}}function Be(t,e){var n=e-t;return n?Fe(t,n):He(isNaN(t)?e:t)}var We=function t(e){var n=Ue(e);function r(t,e){var r=n((t=Ae(t)).r,(e=Ae(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=Be(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function ze(t){return function(e){var n,r,i=e.length,o=new Array(i),a=new Array(i),s=new Array(i);for(n=0;n<i;++n)r=Ae(e[n]),o[n]=r.r||0,a[n]=r.g||0,s[n]=r.b||0;return o=t(o),a=t(a),s=t(s),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=s(t),r+""}}}ze((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<e-1?t[r+2]:2*o-i;return je((n-r/e)*e,a,i,o,s)}})),ze((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],a=t[(r+1)%e],s=t[(r+2)%e];return je((n-r/e)*e,i,o,a,s)}}));var Ye=function(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=nn(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}},Ve=function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}},Ge=function(t,e){return e-=t=+t,function(n){return t+e*n}},$e=function(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=nn(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}},Xe=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ke=new RegExp(Xe.source,"g");var Qe,Ze,Je,tn,en=function(t,e){var n,r,i,o=Xe.lastIndex=Ke.lastIndex=0,a=-1,s=[],l=[];for(t+="",e+="";(n=Xe.exec(t))&&(r=Ke.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,l.push({i:a,x:Ge(n,r)})),o=Ke.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,r=0;r<e;++r)s[(n=l[r]).i]=n.x(t);return s.join("")})},nn=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?He(e):("number"===r?Ge:"string"===r?(n=Te(e))?(e=n,We):en:e instanceof Te?We:e instanceof Date?Ve:Array.isArray(e)?Ye:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?$e:Ge)(t,e)},rn=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},on=180/Math.PI,an={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},sn=function(t,e,n,r,i,o){var a,s,l;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,l/=s),t*r<e*n&&(t=-t,e=-e,l=-l,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*on,skewX:Math.atan(l)*on,scaleX:a,scaleY:s}};function ln(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],l=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var l=a.push("translate(",null,e,null,n);s.push({i:l-4,x:Ge(t,i)},{i:l-2,x:Ge(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,l),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Ge(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,s,l),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Ge(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,s,l),function(t,e,n,r,o,a){if(t!==n||e!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:Ge(t,n)},{i:s-2,x:Ge(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,l),o=a=null,function(t){for(var e,n=-1,r=l.length;++n<r;)s[(e=l[n]).i]=e.x(t);return s.join("")}}}var un=ln((function(t){return"none"===t?an:(Qe||(Qe=document.createElement("DIV"),Ze=document.documentElement,Je=document.defaultView),Qe.style.transform=t,t=Je.getComputedStyle(Ze.appendChild(Qe),null).getPropertyValue("transform"),Ze.removeChild(Qe),t=t.slice(7,-1).split(","),sn(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),cn=ln((function(t){return null==t?an:(tn||(tn=document.createElementNS("http://www.w3.org/2000/svg","g")),tn.setAttribute("transform",t),(t=tn.transform.baseVal.consolidate())?(t=t.matrix,sn(t.a,t.b,t.c,t.d,t.e,t.f)):an)}),", ",")",")");Math.SQRT2;function fn(t){return function(e,n){var r=t((e=Le(e)).h,(n=Le(n)).h),i=Be(e.s,n.s),o=Be(e.l,n.l),a=Be(e.opacity,n.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=o(t),e.opacity=a(t),e+""}}}fn(qe),fn(Be);var hn=Math.PI/180,pn=180/Math.PI,dn=.96422,gn=1,mn=.82521,vn=4/29,yn=6/29,_n=3*yn*yn,wn=yn*yn*yn;function bn(t){if(t instanceof Tn)return new Tn(t.l,t.a,t.b,t.opacity);if(t instanceof kn)return Mn(t);t instanceof Ne||(t=Se(t));var e,n,r=An(t.r),i=An(t.g),o=An(t.b),a=En((.2225045*r+.7168786*i+.0606169*o)/gn);return r===i&&i===o?e=n=a:(e=En((.4360747*r+.3850649*i+.1430804*o)/dn),n=En((.0139322*r+.0971045*i+.7141733*o)/mn)),new Tn(116*a-16,500*(e-a),200*(a-n),t.opacity)}function xn(t,e,n,r){return 1===arguments.length?bn(t):new Tn(t,e,n,null==r?1:r)}function Tn(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function En(t){return t>wn?Math.pow(t,1/3):t/_n+vn}function Cn(t){return t>yn?t*t*t:_n*(t-vn)}function Sn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function An(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Nn(t){if(t instanceof kn)return new kn(t.h,t.c,t.l,t.opacity);if(t instanceof Tn||(t=bn(t)),0===t.a&&0===t.b)return new kn(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*pn;return new kn(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Dn(t,e,n,r){return 1===arguments.length?Nn(t):new kn(t,e,n,null==r?1:r)}function kn(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function Mn(t){if(isNaN(t.h))return new Tn(t.l,0,0,t.opacity);var e=t.h*hn;return new Tn(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}function In(t){return function(e,n){var r=t((e=Dn(e)).h,(n=Dn(n)).h),i=Be(e.c,n.c),o=Be(e.l,n.l),a=Be(e.opacity,n.opacity);return function(t){return e.h=r(t),e.c=i(t),e.l=o(t),e.opacity=a(t),e+""}}}se(Tn,xn,le(ue,{brighter:function(t){return new Tn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Tn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Ne(Sn(3.1338561*(e=dn*Cn(e))-1.6168667*(t=gn*Cn(t))-.4906146*(n=mn*Cn(n))),Sn(-.9787684*e+1.9161415*t+.033454*n),Sn(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),se(kn,Dn,le(ue,{brighter:function(t){return new kn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new kn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Mn(this).rgb()}}));In(qe),In(Be);var On=-.14861,Ln=-.29227,Rn=-.90649,Pn=1.97294,jn=Pn*Rn,Hn=1.78277*Pn,Fn=1.78277*Ln-Rn*On;function qn(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Un)return new Un(t.h,t.s,t.l,t.opacity);t instanceof Ne||(t=Se(t));var e=t.r/255,n=t.g/255,r=t.b/255,i=(Fn*r+jn*e-Hn*n)/(Fn+jn-Hn),o=r-i,a=(Pn*(n-i)-Ln*o)/Rn,s=Math.sqrt(a*a+o*o)/(Pn*i*(1-i)),l=s?Math.atan2(a,o)*pn-120:NaN;return new Un(l<0?l+360:l,s,i,t.opacity)}(t):new Un(t,e,n,null==r?1:r)}function Un(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Bn(t){return function e(n){function r(e,r){var i=t((e=qn(e)).h,(r=qn(r)).h),o=Be(e.s,r.s),a=Be(e.l,r.l),s=Be(e.opacity,r.opacity);return function(t){return e.h=i(t),e.s=o(t),e.l=a(Math.pow(t,n)),e.opacity=s(t),e+""}}return n=+n,r.gamma=e,r}(1)}se(Un,qn,le(ue,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Un(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Un(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*hn,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),i=Math.sin(t);return new Ne(255*(e+n*(On*r+1.78277*i)),255*(e+n*(Ln*r+Rn*i)),255*(e+n*(Pn*r)),this.opacity)}}));Bn(qe),Bn(Be);var Wn,zn,Yn=0,Vn=0,Gn=0,$n=1e3,Xn=0,Kn=0,Qn=0,Zn="object"==typeof performance&&performance.now?performance:Date,Jn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function tr(){return Kn||(Jn(er),Kn=Zn.now()+Qn)}function er(){Kn=0}function nr(){this._call=this._time=this._next=null}function rr(t,e,n){var r=new nr;return r.restart(t,e,n),r}function ir(){Kn=(Xn=Zn.now())+Qn,Yn=Vn=0;try{!function(){tr(),++Yn;for(var t,e=Wn;e;)(t=Kn-e._time)>=0&&e._call.call(null,t),e=e._next;--Yn}()}finally{Yn=0,function(){var t,e,n=Wn,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Wn=e);zn=t,ar(r)}(),Kn=0}}function or(){var t=Zn.now(),e=t-Xn;e>$n&&(Qn-=e,Xn=t)}function ar(t){Yn||(Vn&&(Vn=clearTimeout(Vn)),t-Kn>24?(t<1/0&&(Vn=setTimeout(ir,t-Zn.now()-Qn)),Gn&&(Gn=clearInterval(Gn))):(Gn||(Xn=Zn.now(),Gn=setInterval(or,$n)),Yn=1,Jn(ir)))}nr.prototype=rr.prototype={constructor:nr,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?tr():+n)+(null==e?0:+e),this._next||zn===this||(zn?zn._next=this:Wn=this,zn=this),this._call=t,this._time=n,ar()},stop:function(){this._call&&(this._call=null,this._time=1/0,ar())}};var sr=function(t,e,n){var r=new nr;return e=null==e?0:+e,r.restart((function(n){r.stop(),t(n+e)}),e,n),r},lr=z("start","end","cancel","interrupt"),ur=[],cr=0,fr=1,hr=2,pr=3,dr=4,gr=5,mr=6,vr=function(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(l){var u,c,f,h;if(n.state!==fr)return s();for(u in i)if((h=i[u]).name===n.name){if(h.state===pr)return sr(o);h.state===dr?(h.state=mr,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[u]):+u<e&&(h.state=mr,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[u])}if(sr((function(){n.state===pr&&(n.state=dr,n.timer.restart(a,n.delay,n.time),a(l))})),n.state=hr,n.on.call("start",t,t.__data__,n.index,n.group),n.state===hr){for(n.state=pr,r=new Array(f=n.tween.length),u=0,c=-1;u<f;++u)(h=n.tween[u].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=h);r.length=c+1}}function a(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(s),n.state=gr,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);n.state===gr&&(n.on.call("end",t,t.__data__,n.index,n.group),s())}function s(){for(var r in n.state=mr,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=rr((function(t){n.state=fr,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:i,on:lr,tween:ur,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:cr})};function yr(t,e){var n=wr(t,e);if(n.state>cr)throw new Error("too late; already scheduled");return n}function _r(t,e){var n=wr(t,e);if(n.state>pr)throw new Error("too late; already running");return n}function wr(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var br=function(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>hr&&n.state<gr,n.state=mr,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}};function xr(t,e){var n,r;return function(){var i=_r(this,t),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function Tr(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=_r(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:e,value:n},l=0,u=i.length;l<u;++l)if(i[l].name===e){i[l]=s;break}l===u&&i.push(s)}o.tween=i}}function Er(t,e,n){var r=t._id;return t.each((function(){var t=_r(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return wr(t,r).value[e]}}var Cr=function(t,e){var n;return("number"==typeof e?Ge:e instanceof Te?We:(n=Te(e))?(e=n,We):en)(t,e)};function Sr(t){return function(){this.removeAttribute(t)}}function Ar(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Nr(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function Dr(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function kr(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttribute(t))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttribute(t)}}function Mr(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttributeNS(t.space,t.local))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttributeNS(t.space,t.local)}}function Ir(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e(n))}}(t,i)),n}return i._value=e,i}function Or(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttribute(t,e(n))}}(t,i)),n}return i._value=e,i}function Lr(t,e){return function(){yr(this,t).delay=+e.apply(this,arguments)}}function Rr(t,e){return e=+e,function(){yr(this,t).delay=e}}function Pr(t,e){return function(){_r(this,t).duration=+e.apply(this,arguments)}}function jr(t,e){return e=+e,function(){_r(this,t).duration=e}}function Hr(t,e){if("function"!=typeof e)throw new Error;return function(){_r(this,t).ease=e}}function Fr(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?yr:_r;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(e,n),a.on=i}}var qr=ee.prototype.constructor;function Ur(t){return function(){this.style.removeProperty(t)}}function Br(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,e,n){return function(r){this.style.setProperty(t,e(r),n)}}(t,o,n)),r}return o._value=e,o}var Wr=0;function zr(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Yr(){return++Wr}var Vr=ee.prototype;zr.prototype=function(t){return ee().transition(t)}.prototype={constructor:zr,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Z(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,l,u=r[a],c=u.length,f=o[a]=new Array(c),h=0;h<c;++h)(s=u[h])&&(l=t.call(s,s.__data__,h,u))&&("__data__"in s&&(l.__data__=s.__data__),f[h]=l,vr(f[h],e,n,h,f,wr(s,n)));return new zr(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=tt(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var l,u=r[s],c=u.length,f=0;f<c;++f)if(l=u[f]){for(var h,p=t.call(l,l.__data__,f,u),d=wr(l,n),g=0,m=p.length;g<m;++g)(h=p[g])&&vr(h,e,n,g,p,d);o.push(p),a.push(l)}return new zr(o,a,e,n)},filter:function(t){"function"!=typeof t&&(t=et(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],u=0;u<s;++u)(o=a[u])&&t.call(o,o.__data__,u,a)&&l.push(o);return new zr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,u=e[s],c=n[s],f=u.length,h=a[s]=new Array(f),p=0;p<f;++p)(l=u[p]||c[p])&&(h[p]=l);for(;s<r;++s)a[s]=e[s];return new zr(a,this._parents,this._name,this._id)},selection:function(){return new qr(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Yr(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,u=0;u<l;++u)if(a=s[u]){var c=wr(a,e);vr(a,t,n,u,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new zr(r,this._parents,t,n)},call:Vr.call,nodes:Vr.nodes,node:Vr.node,size:Vr.size,empty:Vr.empty,each:Vr.each,on:function(t,e){var n=this._id;return arguments.length<2?wr(this.node(),n).on.on(t):this.each(Fr(n,t,e))},attr:function(t,e){var n=G(t),r="transform"===n?cn:Cr;return this.attrTween(t,"function"==typeof e?(n.local?Mr:kr)(n,r,Er(this,"attr."+t,e)):null==e?(n.local?Ar:Sr)(n):(n.local?Dr:Nr)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=G(t);return this.tween(n,(r.local?Ir:Or)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?un:Cr;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=yt(this,t),a=(this.style.removeProperty(t),yt(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,Ur(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=yt(this,t),s=n(this),l=s+"";return null==s&&(this.style.removeProperty(t),l=s=yt(this,t)),a===l?null:a===r&&l===i?o:(i=l,o=e(r=a,s))}}(t,r,Er(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,s="end."+a;return function(){var l=_r(this,t),u=l.on,c=null==l.value[a]?o||(o=Ur(e)):void 0;u===n&&i===c||(r=(n=u).copy()).on(s,i=c),l.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=yt(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,Br(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Er(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=wr(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?xr:Tr)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Lr:Rr)(e,t)):wr(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Pr:jr)(e,t)):wr(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(Hr(e,t)):wr(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},l={value:function(){0==--i&&o()}};n.each((function(){var n=_r(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(l)),n.on=e}))}))}};(function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n})(3),function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),Math.PI;(function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n})(1.70158),function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158);var Gr=2*Math.PI,$r=(function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Gr);function i(t){return e*Math.pow(2,10*--t)*Math.sin((r-t)/n)}return i.amplitude=function(e){return t(e,n*Gr)},i.period=function(n){return t(e,n)},i}(1,.3),function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Gr);function i(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/n)}return i.amplitude=function(e){return t(e,n*Gr)},i.period=function(n){return t(e,n)},i}(1,.3),function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Gr);function i(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((r-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((r+t)/n))/2}return i.amplitude=function(e){return t(e,n*Gr)},i.period=function(n){return t(e,n)},i}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function Xr(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return $r.time=tr(),$r;return n}ee.prototype.interrupt=function(t){return this.each((function(){br(this,t)}))},ee.prototype.transition=function(t){var e,n;t instanceof zr?(e=t._id,t=t._name):(e=Yr(),(n=$r).time=tr(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,u=0;u<l;++u)(a=s[u])&&vr(a,t,e,u,s,n||Xr(a,e));return new zr(r,this._parents,t,e)};function Kr(t){return[+t[0],+t[1]]}function Qr(t){return[Kr(t[0]),Kr(t[1])]}["w","e"].map(Zr),["n","s"].map(Zr),["n","w","e","s","nw","ne","sw","se"].map(Zr);function Zr(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Jr=Math.PI,ti=2*Jr,ei=ti-1e-6;function ni(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ri(){return new ni}ni.prototype=ri.prototype={constructor:ni,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,s=n-t,l=r-e,u=o-t,c=a-e,f=u*u+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>1e-6)if(Math.abs(c*s-l*u)>1e-6&&i){var h=n-o,p=r-a,d=s*s+l*l,g=h*h+p*p,m=Math.sqrt(d),v=Math.sqrt(f),y=i*Math.tan((Jr-Math.acos((d+f-g)/(2*m*v)))/2),_=y/v,w=y/m;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*u)+","+(e+_*c)),this._+="A"+i+","+i+",0,0,"+ +(c*h>u*p)+","+(this._x1=t+w*s)+","+(this._y1=e+w*l)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var a=(n=+n)*Math.cos(r),s=n*Math.sin(r),l=t+a,u=e+s,c=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+l+","+u:(Math.abs(this._x1-l)>1e-6||Math.abs(this._y1-u)>1e-6)&&(this._+="L"+l+","+u),n&&(f<0&&(f=f%ti+ti),f>ei?this._+="A"+n+","+n+",0,1,"+c+","+(t-a)+","+(e-s)+"A"+n+","+n+",0,1,"+c+","+(this._x1=l)+","+(this._y1=u):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=Jr)+","+c+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var ii=ri;function oi(){}function ai(t,e){var n=new oi;if(t instanceof oi)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==e)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e(r=t[i],i,t),r)}else if(t)for(var a in t)n.set(a,t[a]);return n}oi.prototype=ai.prototype={constructor:oi,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var si=ai;function li(){}var ui=si.prototype;function ci(t,e){var n=new li;if(t instanceof li)t.each((function(t){n.add(t)}));else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}li.prototype=ci.prototype={constructor:li,has:ui.has,add:function(t){return this["$"+(t+="")]=t,this},remove:ui.remove,clear:ui.clear,values:ui.keys,size:ui.size,empty:ui.empty,each:ui.each};var fi=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e};Array.prototype.slice;var hi={},pi={},di=34,gi=10,mi=13;function vi(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+"]"})).join(",")+"}")}function yi(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var r in t)r in e||n.push(e[r]=r)})),n}function _i(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function wi(t){var e,n=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+_i(-e,6):e>9999?"+"+_i(e,6):_i(e,4))+"-"+_i(t.getUTCMonth()+1,2)+"-"+_i(t.getUTCDate(),2)+(o?"T"+_i(n,2)+":"+_i(r,2)+":"+_i(i,2)+"."+_i(o,3)+"Z":i?"T"+_i(n,2)+":"+_i(r,2)+":"+_i(i,2)+"Z":r||n?"T"+_i(n,2)+":"+_i(r,2)+"Z":"")}var bi=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,i=[],o=t.length,a=0,s=0,l=o<=0,u=!1;function c(){if(l)return pi;if(u)return u=!1,hi;var e,r,i=a;if(t.charCodeAt(i)===di){for(;a++<o&&t.charCodeAt(a)!==di||t.charCodeAt(++a)===di;);return(e=a)>=o?l=!0:(r=t.charCodeAt(a++))===gi?u=!0:r===mi&&(u=!0,t.charCodeAt(a)===gi&&++a),t.slice(i+1,e-1).replace(/""/g,'"')}for(;a<o;){if((r=t.charCodeAt(e=a++))===gi)u=!0;else if(r===mi)u=!0,t.charCodeAt(a)===gi&&++a;else if(r!==n)continue;return t.slice(i,e)}return l=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===gi&&--o,t.charCodeAt(o-1)===mi&&--o;(r=c())!==pi;){for(var f=[];r!==hi&&r!==pi;)f.push(r),r=c();e&&null==(f=e(f,s++))||i.push(f)}return i}function i(e,n){return e.map((function(e){return n.map((function(t){return a(e[t])})).join(t)}))}function o(e){return e.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?wi(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,i,o=r(t,(function(t,r){if(n)return n(t,r-1);i=t,n=e?function(t,e){var n=vi(t);return function(r,i){return e(n(r),i,t)}}(t,e):vi(t)}));return o.columns=i||[],o},parseRows:r,format:function(e,n){return null==n&&(n=yi(e)),[n.map(a).join(t)].concat(i(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=yi(t)),i(t,e).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},xi=bi(","),Ti=xi.parse,Ei=(xi.parseRows,xi.format,xi.formatBody,xi.formatRows,bi("\t")),Ci=Ei.parse;Ei.parseRows,Ei.format,Ei.formatBody,Ei.formatRows;function Si(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Ai=function(t,e){return fetch(t,e).then(Si)};function Ni(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),Ai(e,n).then((function(e){return t(e,r)}))}}var Di=Ni(Ti);Ni(Ci);function ki(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var Mi=function(t,e){return fetch(t,e).then(ki)};function Ii(t){return function(e,n){return Ai(e,n).then((function(e){return(new DOMParser).parseFromString(e,t)}))}}Ii("application/xml"),Ii("text/html"),Ii("image/svg+xml");function Oi(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var i,o,a,s,l,u,c,f,h,p=t._root,d={data:r},g=t._x0,m=t._y0,v=t._x1,y=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((u=e>=(o=(g+v)/2))?g=o:v=o,(c=n>=(a=(m+y)/2))?m=a:y=a,i=p,!(p=p[f=c<<1|u]))return i[f]=d,t;if(s=+t._x.call(null,p.data),l=+t._y.call(null,p.data),e===s&&n===l)return d.next=p,i?i[f]=d:t._root=d,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(u=e>=(o=(g+v)/2))?g=o:v=o,(c=n>=(a=(m+y)/2))?m=a:y=a}while((f=c<<1|u)==(h=(l>=a)<<1|s>=o));return i[h]=p,i[f]=d,t}var Li=function(t,e,n,r,i){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=i};function Ri(t){return t[0]}function Pi(t){return t[1]}function ji(t,e,n){var r=new Hi(null==e?Ri:e,null==n?Pi:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Hi(t,e,n,r,i,o){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Fi(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var qi=ji.prototype=Hi.prototype;qi.copy=function(){var t,e,n=new Hi(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=Fi(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(e=r.source[i])&&(e.length?t.push({source:e,target:r.target[i]=new Array(4)}):r.target[i]=Fi(e));return n},qi.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return Oi(this.cover(e,n),e,n,t)},qi.addAll=function(t){var e,n,r,i,o=t.length,a=new Array(o),s=new Array(o),l=1/0,u=1/0,c=-1/0,f=-1/0;for(n=0;n<o;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(i=+this._y.call(null,e))||(a[n]=r,s[n]=i,r<l&&(l=r),r>c&&(c=r),i<u&&(u=i),i>f&&(f=i));if(l>c||u>f)return this;for(this.cover(l,u).cover(c,f),n=0;n<o;++n)Oi(this,a[n],s[n],t[n]);return this},qi.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(n))i=(n=Math.floor(t))+1,o=(r=Math.floor(e))+1;else{for(var a,s,l=i-n,u=this._root;n>t||t>=i||r>e||e>=o;)switch(s=(e<r)<<1|t<n,(a=new Array(4))[s]=u,u=a,l*=2,s){case 0:i=n+l,o=r+l;break;case 1:n=i-l,o=r+l;break;case 2:i=n+l,r=o-l;break;case 3:n=i-l,r=o-l}this._root&&this._root.length&&(this._root=u)}return this._x0=n,this._y0=r,this._x1=i,this._y1=o,this},qi.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},qi.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},qi.find=function(t,e,n){var r,i,o,a,s,l,u,c=this._x0,f=this._y0,h=this._x1,p=this._y1,d=[],g=this._root;for(g&&d.push(new Li(g,c,f,h,p)),null==n?n=1/0:(c=t-n,f=e-n,h=t+n,p=e+n,n*=n);l=d.pop();)if(!(!(g=l.node)||(i=l.x0)>h||(o=l.y0)>p||(a=l.x1)<c||(s=l.y1)<f))if(g.length){var m=(i+a)/2,v=(o+s)/2;d.push(new Li(g[3],m,v,a,s),new Li(g[2],i,v,m,s),new Li(g[1],m,o,a,v),new Li(g[0],i,o,m,v)),(u=(e>=v)<<1|t>=m)&&(l=d[d.length-1],d[d.length-1]=d[d.length-1-u],d[d.length-1-u]=l)}else{var y=t-+this._x.call(null,g.data),_=e-+this._y.call(null,g.data),w=y*y+_*_;if(w<n){var b=Math.sqrt(n=w);c=t-b,f=e-b,h=t+b,p=e+b,r=g.data}}return r},qi.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var e,n,r,i,o,a,s,l,u,c,f,h,p=this._root,d=this._x0,g=this._y0,m=this._x1,v=this._y1;if(!p)return this;if(p.length)for(;;){if((u=o>=(s=(d+m)/2))?d=s:m=s,(c=a>=(l=(g+v)/2))?g=l:v=l,e=p,!(p=p[f=c<<1|u]))return this;if(!p.length)break;(e[f+1&3]||e[f+2&3]||e[f+3&3])&&(n=e,h=f)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):e?(i?e[f]=i:delete e[f],(p=e[0]||e[1]||e[2]||e[3])&&p===(e[3]||e[2]||e[1]||e[0])&&!p.length&&(n?n[h]=p:this._root=p),this):(this._root=i,this)},qi.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},qi.root=function(){return this._root},qi.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},qi.visit=function(t){var e,n,r,i,o,a,s=[],l=this._root;for(l&&s.push(new Li(l,this._x0,this._y0,this._x1,this._y1));e=s.pop();)if(!t(l=e.node,r=e.x0,i=e.y0,o=e.x1,a=e.y1)&&l.length){var u=(r+o)/2,c=(i+a)/2;(n=l[3])&&s.push(new Li(n,u,c,o,a)),(n=l[2])&&s.push(new Li(n,r,c,u,a)),(n=l[1])&&s.push(new Li(n,u,i,o,c)),(n=l[0])&&s.push(new Li(n,r,i,u,c))}return this},qi.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new Li(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var i=e.node;if(i.length){var o,a=e.x0,s=e.y0,l=e.x1,u=e.y1,c=(a+l)/2,f=(s+u)/2;(o=i[0])&&n.push(new Li(o,a,s,c,f)),(o=i[1])&&n.push(new Li(o,c,s,l,f)),(o=i[2])&&n.push(new Li(o,a,f,c,u)),(o=i[3])&&n.push(new Li(o,c,f,l,u))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},qi.x=function(t){return arguments.length?(this._x=t,this):this._x},qi.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Ui=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},Bi=function(t){return(t=Ui(Math.abs(t)))?t[1]:NaN},Wi=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function zi(t){if(!(e=Wi.exec(t)))throw new Error("invalid format: "+t);var e;return new Yi({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Yi(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}zi.prototype=Yi.prototype,Yi.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Vi,Gi,$i,Xi,Ki=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(e+1):t},Qi=function(t,e){var n=Ui(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Zi={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Qi(100*t,e)},r:Qi,s:function(t,e){var n=Ui(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(Vi=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Ui(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Ji=function(t){return t},to=Array.prototype.map,eo=["y","z","a","f","p","n","Âµ","m","","k","M","G","T","P","E","Z","Y"];Gi=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?Ji:(e=to.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=e[0],l=0;i>0&&s>0&&(l+s+1>r&&(s=Math.max(1,r-l)),o.push(t.substring(i-=s,i+s)),!((l+=s+1)>r));)s=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?Ji:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(to.call(t.numerals,String)),l=void 0===t.percent?"%":t.percent+"",u=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=zi(t)).fill,n=t.align,f=t.sign,h=t.symbol,p=t.zero,d=t.width,g=t.comma,m=t.precision,v=t.trim,y=t.type;"n"===y?(g=!0,y="g"):Zi[y]||(void 0===m&&(m=12),v=!0,y="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var _="$"===h?i:"#"===h&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",w="$"===h?o:/[%p]/.test(y)?l:"",b=Zi[y],x=/[defgprs%]/.test(y);function T(t){var i,o,l,h=_,T=w;if("c"===y)T=b(t)+T,t="";else{var E=(t=+t)<0;if(t=isNaN(t)?c:b(Math.abs(t),m),v&&(t=Ki(t)),E&&0==+t&&(E=!1),h=(E?"("===f?f:u:"-"===f||"("===f?"":f)+h,T=("s"===y?eo[8+Vi/3]:"")+T+(E&&"("===f?")":""),x)for(i=-1,o=t.length;++i<o;)if(48>(l=t.charCodeAt(i))||l>57){T=(46===l?a+t.slice(i+1):t.slice(i))+T,t=t.slice(0,i);break}}g&&!p&&(t=r(t,1/0));var C=h.length+t.length+T.length,S=C<d?new Array(d-C+1).join(e):"";switch(g&&p&&(t=r(S+t,S.length?d-T.length:1/0),S=""),n){case"<":t=h+t+T+S;break;case"=":t=h+S+t+T;break;case"^":t=S.slice(0,C=S.length>>1)+h+t+T+S.slice(C);break;default:t=S+h+t+T}return s(t)}return m=void 0===m?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),T.toString=function(){return t+""},T}return{format:f,formatPrefix:function(t,e){var n=f(((t=zi(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Bi(e)/3))),i=Math.pow(10,-r),o=eo[8+r/3];return function(t){return n(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),$i=Gi.format,Xi=Gi.formatPrefix;function no(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function ro(t,e){var n,r,i,o,a,s=new so(t),l=+t.value&&(s.value=t.value),u=[s];for(null==e&&(e=io);n=u.pop();)if(l&&(n.value=+n.data.value),(i=e(n.data))&&(a=i.length))for(n.children=new Array(a),o=a-1;o>=0;--o)u.push(r=n.children[o]=new so(i[o])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(ao)}function io(t){return t.children}function oo(t){t.data=t.data.data}function ao(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function so(t){this.data=t,this.depth=this.height=0,this.parent=null}so.prototype=ro.prototype={constructor:so,count:function(){return this.eachAfter(no)},each:function(t){var e,n,r,i,o=this,a=[o];do{for(e=a.reverse(),a=[];o=e.pop();)if(t(o),n=o.children)for(r=0,i=n.length;r<i;++r)a.push(n[r])}while(a.length);return this},eachAfter:function(t){for(var e,n,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),e=i.children)for(n=0,r=e.length;n<r;++n)o.push(e[n]);for(;i=a.pop();)t(i);return this},eachBefore:function(t){for(var e,n,r=this,i=[r];r=i.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)i.push(e[n]);return this},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;t=n.pop(),e=r.pop();for(;t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return ro(this).eachBefore(oo)}};var lo=Array.prototype.slice;var uo=function(t){for(var e,n,r=0,i=(t=function(t){for(var e,n,r=t.length;r;)n=Math.random()*r--|0,e=t[r],t[r]=t[n],t[n]=e;return t}(lo.call(t))).length,o=[];r<i;)e=t[r],n&&ho(n,e)?++r:(n=go(o=co(o,e)),r=0);return n};function co(t,e){var n,r;if(po(e,t))return[e];for(n=0;n<t.length;++n)if(fo(e,t[n])&&po(mo(t[n],e),t))return[t[n],e];for(n=0;n<t.length-1;++n)for(r=n+1;r<t.length;++r)if(fo(mo(t[n],t[r]),e)&&fo(mo(t[n],e),t[r])&&fo(mo(t[r],e),t[n])&&po(vo(t[n],t[r],e),t))return[t[n],t[r],e];throw new Error}function fo(t,e){var n=t.r-e.r,r=e.x-t.x,i=e.y-t.y;return n<0||n*n<r*r+i*i}function ho(t,e){var n=t.r-e.r+1e-6,r=e.x-t.x,i=e.y-t.y;return n>0&&n*n>r*r+i*i}function po(t,e){for(var n=0;n<e.length;++n)if(!ho(t,e[n]))return!1;return!0}function go(t){switch(t.length){case 1:return{x:(e=t[0]).x,y:e.y,r:e.r};case 2:return mo(t[0],t[1]);case 3:return vo(t[0],t[1],t[2])}var e}function mo(t,e){var n=t.x,r=t.y,i=t.r,o=e.x,a=e.y,s=e.r,l=o-n,u=a-r,c=s-i,f=Math.sqrt(l*l+u*u);return{x:(n+o+l/f*c)/2,y:(r+a+u/f*c)/2,r:(f+i+s)/2}}function vo(t,e,n){var r=t.x,i=t.y,o=t.r,a=e.x,s=e.y,l=e.r,u=n.x,c=n.y,f=n.r,h=r-a,p=r-u,d=i-s,g=i-c,m=l-o,v=f-o,y=r*r+i*i-o*o,_=y-a*a-s*s+l*l,w=y-u*u-c*c+f*f,b=p*d-h*g,x=(d*w-g*_)/(2*b)-r,T=(g*m-d*v)/b,E=(p*_-h*w)/(2*b)-i,C=(h*v-p*m)/b,S=T*T+C*C-1,A=2*(o+x*T+E*C),N=x*x+E*E-o*o,D=-(S?(A+Math.sqrt(A*A-4*S*N))/(2*S):N/A);return{x:r+x+T*D,y:i+E+C*D,r:D}}function yo(t,e,n){var r,i,o,a,s=t.x-e.x,l=t.y-e.y,u=s*s+l*l;u?(i=e.r+n.r,i*=i,a=t.r+n.r,i>(a*=a)?(r=(u+a-i)/(2*u),o=Math.sqrt(Math.max(0,a/u-r*r)),n.x=t.x-r*s-o*l,n.y=t.y-r*l+o*s):(r=(u+i-a)/(2*u),o=Math.sqrt(Math.max(0,i/u-r*r)),n.x=e.x+r*s-o*l,n.y=e.y+r*l+o*s)):(n.x=e.x+n.r,n.y=e.y)}function _o(t,e){var n=t.r+e.r-1e-6,r=e.x-t.x,i=e.y-t.y;return n>0&&n*n>r*r+i*i}function wo(t){var e=t._,n=t.next._,r=e.r+n.r,i=(e.x*n.r+n.x*e.r)/r,o=(e.y*n.r+n.y*e.r)/r;return i*i+o*o}function bo(t){this._=t,this.next=null,this.previous=null}function xo(t){if(!(i=t.length))return 0;var e,n,r,i,o,a,s,l,u,c,f;if((e=t[0]).x=0,e.y=0,!(i>1))return e.r;if(n=t[1],e.x=-n.r,n.x=e.r,n.y=0,!(i>2))return e.r+n.r;yo(n,e,r=t[2]),e=new bo(e),n=new bo(n),r=new bo(r),e.next=r.previous=n,n.next=e.previous=r,r.next=n.previous=e;t:for(s=3;s<i;++s){yo(e._,n._,r=t[s]),r=new bo(r),l=n.next,u=e.previous,c=n._.r,f=e._.r;do{if(c<=f){if(_o(l._,r._)){n=l,e.next=n,n.previous=e,--s;continue t}c+=l._.r,l=l.next}else{if(_o(u._,r._)){(e=u).next=n,n.previous=e,--s;continue t}f+=u._.r,u=u.previous}}while(l!==u.next);for(r.previous=e,r.next=n,e.next=n.previous=n=r,o=wo(e);(r=r.next)!==n;)(a=wo(r))<o&&(e=r,o=a);n=e.next}for(e=[n._],r=n;(r=r.next)!==n;)e.push(r._);for(r=uo(e),s=0;s<i;++s)(e=t[s]).x-=r.x,e.y-=r.y;return r.r}function To(t){return null==t?null:Eo(t)}function Eo(t){if("function"!=typeof t)throw new Error;return t}function Co(){return 0}var So=function(t){return function(){return t}};function Ao(t){return Math.sqrt(t.value)}var No=function(){var t=null,e=1,n=1,r=Co;function i(i){return i.x=e/2,i.y=n/2,t?i.eachBefore(Do(t)).eachAfter(ko(r,.5)).eachBefore(Mo(1)):i.eachBefore(Do(Ao)).eachAfter(ko(Co,1)).eachAfter(ko(r,i.r/Math.min(e,n))).eachBefore(Mo(Math.min(e,n)/(2*i.r))),i}return i.radius=function(e){return arguments.length?(t=To(e),i):t},i.size=function(t){return arguments.length?(e=+t[0],n=+t[1],i):[e,n]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:So(+t),i):r},i};function Do(t){return function(e){e.children||(e.r=Math.max(0,+t(e)||0))}}function ko(t,e){return function(n){if(r=n.children){var r,i,o,a=r.length,s=t(n)*e||0;if(s)for(i=0;i<a;++i)r[i].r+=s;if(o=xo(r),s)for(i=0;i<a;++i)r[i].r-=s;n.r=o+s}}}function Mo(t){return function(e){var n=e.parent;e.r*=t,n&&(e.x=n.x+t*e.x,e.y=n.y+t*e.y)}}var Io=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},Oo=function(t,e,n,r,i){for(var o,a=t.children,s=-1,l=a.length,u=t.value&&(r-e)/t.value;++s<l;)(o=a[s]).y0=n,o.y1=i,o.x0=e,o.x1=e+=o.value*u},Lo="$",Ro={depth:-1},Po={};function jo(t){return t.id}function Ho(t){return t.parentId}function Fo(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}Fo.prototype=Object.create(so.prototype);var qo=function(t,e,n,r,i){for(var o,a=t.children,s=-1,l=a.length,u=t.value&&(i-n)/t.value;++s<l;)(o=a[s]).x0=e,o.x1=r,o.y0=n,o.y1=n+=o.value*u},Uo=(1+Math.sqrt(5))/2;function Bo(t,e,n,r,i,o){for(var a,s,l,u,c,f,h,p,d,g,m,v=[],y=e.children,_=0,w=0,b=y.length,x=e.value;_<b;){l=i-n,u=o-r;do{c=y[w++].value}while(!c&&w<b);for(f=h=c,m=c*c*(g=Math.max(u/l,l/u)/(x*t)),d=Math.max(h/m,m/f);w<b;++w){if(c+=s=y[w].value,s<f&&(f=s),s>h&&(h=s),m=c*c*g,(p=Math.max(h/m,m/f))>d){c-=s;break}d=p}v.push(a={value:c,dice:l<u,children:y.slice(_,w)}),a.dice?Oo(a,n,r,i,x?r+=u*c/x:o):qo(a,n,r,x?n+=l*c/x:i,o),x-=c,_=w}return v}var Wo=function t(e){function n(t,n,r,i,o){Bo(e,t,n,r,i,o)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(Uo),zo=function(){var t=Wo,e=!1,n=1,r=1,i=[0],o=Co,a=Co,s=Co,l=Co,u=Co;function c(t){return t.x0=t.y0=0,t.x1=n,t.y1=r,t.eachBefore(f),i=[0],e&&t.eachBefore(Io),t}function f(e){var n=i[e.depth],r=e.x0+n,c=e.y0+n,f=e.x1-n,h=e.y1-n;f<r&&(r=f=(r+f)/2),h<c&&(c=h=(c+h)/2),e.x0=r,e.y0=c,e.x1=f,e.y1=h,e.children&&(n=i[e.depth+1]=o(e)/2,r+=u(e)-n,c+=a(e)-n,(f-=s(e)-n)<r&&(r=f=(r+f)/2),(h-=l(e)-n)<c&&(c=h=(c+h)/2),t(e,r,c,f,h))}return c.round=function(t){return arguments.length?(e=!!t,c):e},c.size=function(t){return arguments.length?(n=+t[0],r=+t[1],c):[n,r]},c.tile=function(e){return arguments.length?(t=Eo(e),c):t},c.padding=function(t){return arguments.length?c.paddingInner(t).paddingOuter(t):c.paddingInner()},c.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:So(+t),c):o},c.paddingOuter=function(t){return arguments.length?c.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):c.paddingTop()},c.paddingTop=function(t){return arguments.length?(a="function"==typeof t?t:So(+t),c):a},c.paddingRight=function(t){return arguments.length?(s="function"==typeof t?t:So(+t),c):s},c.paddingBottom=function(t){return arguments.length?(l="function"==typeof t?t:So(+t),c):l},c.paddingLeft=function(t){return arguments.length?(u="function"==typeof t?t:So(+t),c):u},c};(function t(e){function n(t,n,r,i,o){if((a=t._squarify)&&a.ratio===e)for(var a,s,l,u,c,f=-1,h=a.length,p=t.value;++f<h;){for(l=(s=a[f]).children,u=s.value=0,c=l.length;u<c;++u)s.value+=l[u].value;s.dice?Oo(s,n,r,i,r+=(o-r)*s.value/p):qo(s,n,r,n+=(i-n)*s.value/p,o),p-=s.value}else t._squarify=a=Bo(e,t,n,r,i,o),a.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n})(Uo);var Yo=function(){return Math.random()},Vo=(function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(Yo),function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*e()-1,o=2*e()-1,i=r*r+o*o}while(!i||i>1);return t+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(Yo)),Go=(function t(e){function n(){var t=Vo.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(Yo),function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(Yo));(function t(e){function n(t){var n=Go.source(e)(t);return function(){return n()/t}}return n.source=t,n})(Yo),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(Yo);function $o(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}var Xo=Array.prototype,Ko=Xo.map,Qo=Xo.slice,Zo={name:"implicit"};function Jo(){var t=si(),e=[],n=[],r=Zo;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==Zo)return r;t.set(o,a=e.push(i))}return n[(a-1)%n.length]}return i.domain=function(n){if(!arguments.length)return e.slice();e=[],t=si();for(var r,o,a=-1,s=n.length;++a<s;)t.has(o=(r=n[a])+"")||t.set(o,e.push(r));return i},i.range=function(t){return arguments.length?(n=Qo.call(t),i):n.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Jo(e,n).unknown(r)},$o.apply(i,arguments),i}var ta=function(t){return function(){return t}},ea=function(t){return+t},na=[0,1];function ra(t){return t}function ia(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:ta(isNaN(e)?NaN:.5)}function oa(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function aa(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=ia(i,r),o=n(a,o)):(r=ia(r,i),o=n(o,a)),function(t){return o(r(t))}}function sa(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=ia(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=s(t,e,1,r)-1;return o[n](i[n](e))}}function la(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function ua(){var t,e,n,r,i,o,a=na,s=na,l=nn,u=ra;function c(){return r=Math.min(a.length,s.length)>2?sa:aa,i=o=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),s,l)))(t(u(e)))}return f.invert=function(n){return u(e((o||(o=r(s,a.map(t),Ge)))(n)))},f.domain=function(t){return arguments.length?(a=Ko.call(t,ea),u===ra||(u=oa(a)),c()):a.slice()},f.range=function(t){return arguments.length?(s=Qo.call(t),c()):s.slice()},f.rangeRound=function(t){return s=Qo.call(t),l=rn,c()},f.clamp=function(t){return arguments.length?(u=t?oa(a):ra,f):u!==ra},f.interpolate=function(t){return arguments.length?(l=t,c()):l},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}function ca(t,e){return ua()(t,e)}var fa=function(t,e,n,r){var i,o=_(t,e,n);switch((r=zi(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Bi(e)/3)))-Bi(Math.abs(t)))}(o,a))||(r.precision=i),Xi(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Bi(e)-Bi(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Bi(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return $i(r)};function ha(t){var e=t.domain;return t.ticks=function(t){var n=e();return v(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return fa(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),o=0,a=i.length-1,s=i[o],l=i[a];return l<s&&(r=s,s=l,l=r,r=o,o=a,a=r),(r=y(s,l,n))>0?r=y(s=Math.floor(s/r)*r,l=Math.ceil(l/r)*r,n):r<0&&(r=y(s=Math.ceil(s*r)/r,l=Math.floor(l*r)/r,n)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(l/r)*r,e(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(l*r)/r,e(i)),t},t}function pa(){var t=ca(ra,ra);return t.copy=function(){return la(t,pa())},$o.apply(t,arguments),ha(t)}var da=function(t,e){var n,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(n=r,r=i,i=n,n=o,o=a,a=n),t[r]=e.floor(o),t[i]=e.ceil(a),t};var ga=new Date,ma=new Date;function va(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=function(e){return t(e=new Date(+e)),e},i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,o){var a,s=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return s;do{s.push(a=new Date(+n)),e(n,o),t(n)}while(a<n&&n<r);return s},i.filter=function(n){return va((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(i.count=function(e,r){return ga.setTime(+e),ma.setTime(+r),t(ga),t(ma),Math.floor(n(ga,ma))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var ya=va((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));ya.every=function(t){return isFinite(t=Math.floor(t))&&t>0?va((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var _a=ya,wa=(ya.range,va((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),ba=wa,xa=(wa.range,6e4),Ta=6048e5;function Ea(t){return va((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*xa)/Ta}))}var Ca=Ea(0),Sa=Ea(1),Aa=Ea(2),Na=Ea(3),Da=Ea(4),ka=Ea(5),Ma=Ea(6),Ia=(Ca.range,Sa.range,Aa.range,Na.range,Da.range,ka.range,Ma.range,va((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*xa)/864e5}),(function(t){return t.getDate()-1}))),Oa=Ia,La=(Ia.range,va((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*xa)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()}))),Ra=La,Pa=(La.range,va((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+e*xa)}),(function(t,e){return(e-t)/xa}),(function(t){return t.getMinutes()}))),ja=Pa,Ha=(Pa.range,va((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Fa=Ha,qa=(Ha.range,va((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t})));qa.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?va((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):qa:null};var Ua=qa;qa.range;function Ba(t){return va((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/Ta}))}var Wa=Ba(0),za=Ba(1),Ya=Ba(2),Va=Ba(3),Ga=Ba(4),$a=Ba(5),Xa=Ba(6),Ka=(Wa.range,za.range,Ya.range,Va.range,Ga.range,$a.range,Xa.range,va((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Qa=Ka,Za=(Ka.range,va((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));Za.every=function(t){return isFinite(t=Math.floor(t))&&t>0?va((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var Ja=Za;Za.range;function ts(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function es(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function ns(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var rs,is,os,as={"-":"",_:" ",0:"0"},ss=/^\s*\d+/,ls=/^%/,us=/[\\^$*+?|[\]().{}]/g;function cs(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function fs(t){return t.replace(us,"\\$&")}function hs(t){return new RegExp("^(?:"+t.map(fs).join("|")+")","i")}function ps(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function ds(t,e,n){var r=ss.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function gs(t,e,n){var r=ss.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function ms(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function vs(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function ys(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function _s(t,e,n){var r=ss.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function ws(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function bs(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function xs(t,e,n){var r=ss.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function Ts(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function Es(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Cs(t,e,n){var r=ss.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Ss(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function As(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Ns(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Ds(t,e,n){var r=ss.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function ks(t,e,n){var r=ss.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Ms(t,e,n){var r=ls.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Is(t,e,n){var r=ss.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Os(t,e,n){var r=ss.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function Ls(t,e){return cs(t.getDate(),e,2)}function Rs(t,e){return cs(t.getHours(),e,2)}function Ps(t,e){return cs(t.getHours()%12||12,e,2)}function js(t,e){return cs(1+Oa.count(_a(t),t),e,3)}function Hs(t,e){return cs(t.getMilliseconds(),e,3)}function Fs(t,e){return Hs(t,e)+"000"}function qs(t,e){return cs(t.getMonth()+1,e,2)}function Us(t,e){return cs(t.getMinutes(),e,2)}function Bs(t,e){return cs(t.getSeconds(),e,2)}function Ws(t){var e=t.getDay();return 0===e?7:e}function zs(t,e){return cs(Ca.count(_a(t)-1,t),e,2)}function Ys(t,e){var n=t.getDay();return t=n>=4||0===n?Da(t):Da.ceil(t),cs(Da.count(_a(t),t)+(4===_a(t).getDay()),e,2)}function Vs(t){return t.getDay()}function Gs(t,e){return cs(Sa.count(_a(t)-1,t),e,2)}function $s(t,e){return cs(t.getFullYear()%100,e,2)}function Xs(t,e){return cs(t.getFullYear()%1e4,e,4)}function Ks(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+cs(e/60|0,"0",2)+cs(e%60,"0",2)}function Qs(t,e){return cs(t.getUTCDate(),e,2)}function Zs(t,e){return cs(t.getUTCHours(),e,2)}function Js(t,e){return cs(t.getUTCHours()%12||12,e,2)}function tl(t,e){return cs(1+Qa.count(Ja(t),t),e,3)}function el(t,e){return cs(t.getUTCMilliseconds(),e,3)}function nl(t,e){return el(t,e)+"000"}function rl(t,e){return cs(t.getUTCMonth()+1,e,2)}function il(t,e){return cs(t.getUTCMinutes(),e,2)}function ol(t,e){return cs(t.getUTCSeconds(),e,2)}function al(t){var e=t.getUTCDay();return 0===e?7:e}function sl(t,e){return cs(Wa.count(Ja(t)-1,t),e,2)}function ll(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Ga(t):Ga.ceil(t),cs(Ga.count(Ja(t),t)+(4===Ja(t).getUTCDay()),e,2)}function ul(t){return t.getUTCDay()}function cl(t,e){return cs(za.count(Ja(t)-1,t),e,2)}function fl(t,e){return cs(t.getUTCFullYear()%100,e,2)}function hl(t,e){return cs(t.getUTCFullYear()%1e4,e,4)}function pl(){return"+0000"}function dl(){return"%"}function gl(t){return+t}function ml(t){return Math.floor(+t/1e3)}!function(t){rs=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,s=t.months,l=t.shortMonths,u=hs(i),c=ps(i),f=hs(o),h=ps(o),p=hs(a),d=ps(a),g=hs(s),m=ps(s),v=hs(l),y=ps(l),_={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return l[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:Ls,e:Ls,f:Fs,H:Rs,I:Ps,j:js,L:Hs,m:qs,M:Us,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:gl,s:ml,S:Bs,u:Ws,U:zs,V:Ys,w:Vs,W:Gs,x:null,X:null,y:$s,Y:Xs,Z:Ks,"%":dl},w={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return l[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:Qs,e:Qs,f:nl,H:Zs,I:Js,j:tl,L:el,m:rl,M:il,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:gl,s:ml,S:ol,u:al,U:sl,V:ll,w:ul,W:cl,x:null,X:null,y:fl,Y:hl,Z:pl,"%":dl},b={a:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=h[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=v.exec(e.slice(n));return r?(t.m=y[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.m=m[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return E(t,e,n,r)},d:Es,e:Es,f:ks,H:Ss,I:Ss,j:Cs,L:Ds,m:Ts,M:As,p:function(t,e,n){var r=u.exec(e.slice(n));return r?(t.p=c[r[0].toLowerCase()],n+r[0].length):-1},q:xs,Q:Is,s:Os,S:Ns,u:gs,U:ms,V:vs,w:ds,W:ys,x:function(t,e,r){return E(t,n,e,r)},X:function(t,e,n){return E(t,r,e,n)},y:ws,Y:_s,Z:bs,"%":Ms};function x(t,e){return function(n){var r,i,o,a=[],s=-1,l=0,u=t.length;for(n instanceof Date||(n=new Date(+n));++s<u;)37===t.charCodeAt(s)&&(a.push(t.slice(l,s)),null!=(i=as[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(o=e[r])&&(r=o(n,i)),a.push(r),l=s+1);return a.push(t.slice(l,s)),a.join("")}}function T(t,e){return function(n){var r,i,o=ns(1900,void 0,1);if(E(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(!e||"Z"in o||(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=es(ns(o.y,0,1))).getUTCDay(),r=i>4||0===i?za.ceil(r):za(r),r=Qa.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=ts(ns(o.y,0,1))).getDay(),r=i>4||0===i?Sa.ceil(r):Sa(r),r=Oa.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?es(ns(o.y,0,1)).getUTCDay():ts(ns(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,es(o)):ts(o)}}function E(t,e,n,r){for(var i,o,a=0,s=e.length,l=n.length;a<s;){if(r>=l)return-1;if(37===(i=e.charCodeAt(a++))){if(i=e.charAt(a++),!(o=b[i in as?e.charAt(a++):i])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return(_.x=x(n,_),_.X=x(r,_),_.c=x(e,_),w.x=x(n,w),w.X=x(r,w),w.c=x(e,w),{format:function(t){var e=x(t+="",_);return e.toString=function(){return t},e},parse:function(t){var e=T(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=x(t+="",w);return e.toString=function(){return t},e},utcParse:function(t){var e=T(t+="",!0);return e.toString=function(){return t},e}})}(t),is=rs.format,os=rs.parse,rs.utcFormat,rs.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var vl=1e3,yl=60*vl,_l=60*yl,wl=24*_l,bl=7*wl,xl=30*wl,Tl=365*wl;function El(t){return new Date(t)}function Cl(t){return t instanceof Date?+t:+new Date(+t)}function Sl(t,e,n,r,o,a,s,l,u){var c=ca(ra,ra),f=c.invert,h=c.domain,p=u(".%L"),d=u(":%S"),g=u("%I:%M"),m=u("%I %p"),v=u("%a %d"),y=u("%b %d"),w=u("%B"),b=u("%Y"),x=[[s,1,vl],[s,5,5*vl],[s,15,15*vl],[s,30,30*vl],[a,1,yl],[a,5,5*yl],[a,15,15*yl],[a,30,30*yl],[o,1,_l],[o,3,3*_l],[o,6,6*_l],[o,12,12*_l],[r,1,wl],[r,2,2*wl],[n,1,bl],[e,1,xl],[e,3,3*xl],[t,1,Tl]];function T(i){return(s(i)<i?p:a(i)<i?d:o(i)<i?g:r(i)<i?m:e(i)<i?n(i)<i?v:y:t(i)<i?w:b)(i)}function E(e,n,r,o){if(null==e&&(e=10),"number"==typeof e){var a=Math.abs(r-n)/e,s=i((function(t){return t[2]})).right(x,a);s===x.length?(o=_(n/Tl,r/Tl,e),e=t):s?(o=(s=x[a/x[s-1][2]<x[s][2]/a?s-1:s])[1],e=s[0]):(o=Math.max(_(n,r,e),1),e=l)}return null==o?e:e.every(o)}return c.invert=function(t){return new Date(f(t))},c.domain=function(t){return arguments.length?h(Ko.call(t,Cl)):h().map(El)},c.ticks=function(t,e){var n,r=h(),i=r[0],o=r[r.length-1],a=o<i;return a&&(n=i,i=o,o=n),n=(n=E(t,i,o,e))?n.range(i,o+1):[],a?n.reverse():n},c.tickFormat=function(t,e){return null==e?T:u(e)},c.nice=function(t,e){var n=h();return(t=E(t,n[0],n[n.length-1],e))?h(da(n,t)):c},c.copy=function(){return la(c,Sl(t,e,n,r,o,a,s,l,u))},c}var Al=va((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),Nl=(Al.range,va((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}))),Dl=(Nl.range,va((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+e*xa)}),(function(t,e){return(e-t)/xa}),(function(t){return t.getUTCMinutes()})));Dl.range;var kl=function(t){return function(){return t}},Ml=Math.abs,Il=Math.atan2,Ol=Math.cos,Ll=Math.max,Rl=Math.min,Pl=Math.sin,jl=Math.sqrt,Hl=1e-12,Fl=Math.PI,ql=Fl/2,Ul=2*Fl;function Bl(t){return t>=1?ql:t<=-1?-ql:Math.asin(t)}function Wl(t){return t.innerRadius}function zl(t){return t.outerRadius}function Yl(t){return t.startAngle}function Vl(t){return t.endAngle}function Gl(t){return t&&t.padAngle}function $l(t,e,n,r,i,o,a){var s=t-n,l=e-r,u=(a?o:-o)/jl(s*s+l*l),c=u*l,f=-u*s,h=t+c,p=e+f,d=n+c,g=r+f,m=(h+d)/2,v=(p+g)/2,y=d-h,_=g-p,w=y*y+_*_,b=i-o,x=h*g-d*p,T=(_<0?-1:1)*jl(Ll(0,b*b*w-x*x)),E=(x*_-y*T)/w,C=(-x*y-_*T)/w,S=(x*_+y*T)/w,A=(-x*y+_*T)/w,N=E-m,D=C-v,k=S-m,M=A-v;return N*N+D*D>k*k+M*M&&(E=S,C=A),{cx:E,cy:C,x01:-c,y01:-f,x11:E*(i/b-1),y11:C*(i/b-1)}}var Xl=function(){var t=Wl,e=zl,n=kl(0),r=null,i=Yl,o=Vl,a=Gl,s=null;function l(){var l,u,c,f=+t.apply(this,arguments),h=+e.apply(this,arguments),p=i.apply(this,arguments)-ql,d=o.apply(this,arguments)-ql,g=Ml(d-p),m=d>p;if(s||(s=l=ii()),h<f&&(u=h,h=f,f=u),h>Hl)if(g>Ul-Hl)s.moveTo(h*Ol(p),h*Pl(p)),s.arc(0,0,h,p,d,!m),f>Hl&&(s.moveTo(f*Ol(d),f*Pl(d)),s.arc(0,0,f,d,p,m));else{var v,y,_=p,w=d,b=p,x=d,T=g,E=g,C=a.apply(this,arguments)/2,S=C>Hl&&(r?+r.apply(this,arguments):jl(f*f+h*h)),A=Rl(Ml(h-f)/2,+n.apply(this,arguments)),N=A,D=A;if(S>Hl){var k=Bl(S/f*Pl(C)),M=Bl(S/h*Pl(C));(T-=2*k)>Hl?(b+=k*=m?1:-1,x-=k):(T=0,b=x=(p+d)/2),(E-=2*M)>Hl?(_+=M*=m?1:-1,w-=M):(E=0,_=w=(p+d)/2)}var I=h*Ol(_),O=h*Pl(_),L=f*Ol(x),R=f*Pl(x);if(A>Hl){var P,j=h*Ol(w),H=h*Pl(w),F=f*Ol(b),q=f*Pl(b);if(g<Fl&&(P=function(t,e,n,r,i,o,a,s){var l=n-t,u=r-e,c=a-i,f=s-o,h=f*l-c*u;if(!(h*h<Hl))return[t+(h=(c*(e-o)-f*(t-i))/h)*l,e+h*u]}(I,O,F,q,j,H,L,R))){var U=I-P[0],B=O-P[1],W=j-P[0],z=H-P[1],Y=1/Pl(((c=(U*W+B*z)/(jl(U*U+B*B)*jl(W*W+z*z)))>1?0:c<-1?Fl:Math.acos(c))/2),V=jl(P[0]*P[0]+P[1]*P[1]);N=Rl(A,(f-V)/(Y-1)),D=Rl(A,(h-V)/(Y+1))}}E>Hl?D>Hl?(v=$l(F,q,I,O,h,D,m),y=$l(j,H,L,R,h,D,m),s.moveTo(v.cx+v.x01,v.cy+v.y01),D<A?s.arc(v.cx,v.cy,D,Il(v.y01,v.x01),Il(y.y01,y.x01),!m):(s.arc(v.cx,v.cy,D,Il(v.y01,v.x01),Il(v.y11,v.x11),!m),s.arc(0,0,h,Il(v.cy+v.y11,v.cx+v.x11),Il(y.cy+y.y11,y.cx+y.x11),!m),s.arc(y.cx,y.cy,D,Il(y.y11,y.x11),Il(y.y01,y.x01),!m))):(s.moveTo(I,O),s.arc(0,0,h,_,w,!m)):s.moveTo(I,O),f>Hl&&T>Hl?N>Hl?(v=$l(L,R,j,H,f,-N,m),y=$l(I,O,F,q,f,-N,m),s.lineTo(v.cx+v.x01,v.cy+v.y01),N<A?s.arc(v.cx,v.cy,N,Il(v.y01,v.x01),Il(y.y01,y.x01),!m):(s.arc(v.cx,v.cy,N,Il(v.y01,v.x01),Il(v.y11,v.x11),!m),s.arc(0,0,f,Il(v.cy+v.y11,v.cx+v.x11),Il(y.cy+y.y11,y.cx+y.x11),m),s.arc(y.cx,y.cy,N,Il(y.y11,y.x11),Il(y.y01,y.x01),!m))):s.arc(0,0,f,x,b,m):s.lineTo(L,R)}else s.moveTo(0,0);if(s.closePath(),l)return s=null,l+""||null}return l.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-Fl/2;return[Ol(r)*n,Pl(r)*n]},l.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:kl(+e),l):t},l.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:kl(+t),l):e},l.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:kl(+t),l):n},l.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:kl(+t),l):r},l.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:kl(+t),l):i},l.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:kl(+t),l):o},l.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:kl(+t),l):a},l.context=function(t){return arguments.length?(s=null==t?null:t,l):s},l};function Kl(t){this._context=t}Kl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Ql=function(t){return new Kl(t)};var Zl=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},Jl=function(t){return t},tu=function(){var t=Jl,e=Zl,n=null,r=kl(0),i=kl(Ul),o=kl(0);function a(a){var s,l,u,c,f,h=a.length,p=0,d=new Array(h),g=new Array(h),m=+r.apply(this,arguments),v=Math.min(Ul,Math.max(-Ul,i.apply(this,arguments)-m)),y=Math.min(Math.abs(v)/h,o.apply(this,arguments)),_=y*(v<0?-1:1);for(s=0;s<h;++s)(f=g[d[s]=s]=+t(a[s],s,a))>0&&(p+=f);for(null!=e?d.sort((function(t,n){return e(g[t],g[n])})):null!=n&&d.sort((function(t,e){return n(a[t],a[e])})),s=0,u=p?(v-h*_)/p:0;s<h;++s,m=c)l=d[s],c=m+((f=g[l])>0?f*u:0)+_,g[l]={data:a[l],index:s,value:f,startAngle:m,endAngle:c,padAngle:y};return g}return a.value=function(e){return arguments.length?(t="function"==typeof e?e:kl(+e),a):t},a.sortValues=function(t){return arguments.length?(e=t,n=null,a):e},a.sort=function(t){return arguments.length?(n=t,e=null,a):n},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:kl(+t),a):r},a.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:kl(+t),a):i},a.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:kl(+t),a):o},a};nu(Ql);function eu(t){this._curve=t}function nu(t){function e(e){return new eu(t(e))}return e._curve=t,e}eu.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var ru=Math.sin(Fl/10)/Math.sin(7*Fl/10),iu=(Math.sin(Ul/10),Math.cos(Ul/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function ou(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function au(t){this._context=t}au.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:ou(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:ou(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function su(t){this._context=t}su.prototype={areaStart:iu,areaEnd:iu,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:ou(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function lu(t){this._context=t}lu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:ou(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function uu(t,e){this._basis=new au(t),this._beta=e}uu.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,i=t[0],o=e[0],a=t[n]-i,s=e[n]-o,l=-1;++l<=n;)r=l/n,this._basis.point(this._beta*t[l]+(1-this._beta)*(i+r*a),this._beta*e[l]+(1-this._beta)*(o+r*s));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};(function t(e){function n(t){return 1===e?new au(t):new uu(t,e)}return n.beta=function(e){return t(+e)},n})(.85);function cu(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function fu(t,e){this._context=t,this._k=(1-e)/6}fu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:cu(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:cu(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new fu(t,e)}return n.tension=function(e){return t(+e)},n})(0);function hu(t,e){this._context=t,this._k=(1-e)/6}hu.prototype={areaStart:iu,areaEnd:iu,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:cu(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new hu(t,e)}return n.tension=function(e){return t(+e)},n})(0);function pu(t,e){this._context=t,this._k=(1-e)/6}pu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:cu(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new pu(t,e)}return n.tension=function(e){return t(+e)},n})(0);function du(t,e,n){var r=t._x1,i=t._y1,o=t._x2,a=t._y2;if(t._l01_a>Hl){var s=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,l=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*s-t._x0*t._l12_2a+t._x2*t._l01_2a)/l,i=(i*s-t._y0*t._l12_2a+t._y2*t._l01_2a)/l}if(t._l23_a>Hl){var u=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*u+t._x1*t._l23_2a-e*t._l12_2a)/c,a=(a*u+t._y1*t._l23_2a-n*t._l12_2a)/c}t._context.bezierCurveTo(r,i,o,a,t._x2,t._y2)}function gu(t,e){this._context=t,this._alpha=e}gu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:du(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new gu(t,e):new fu(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function mu(t,e){this._context=t,this._alpha=e}mu.prototype={areaStart:iu,areaEnd:iu,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:du(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new mu(t,e):new hu(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function vu(t,e){this._context=t,this._alpha=e}vu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:du(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new vu(t,e):new pu(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function yu(t){this._context=t}yu.prototype={areaStart:iu,areaEnd:iu,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};function _u(t){return t<0?-1:1}function wu(t,e,n){var r=t._x1-t._x0,i=e-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(n-t._y1)/(i||r<0&&-0),s=(o*i+a*r)/(r+i);return(_u(o)+_u(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(s))||0}function bu(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function xu(t,e,n){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,s=(o-r)/3;t._context.bezierCurveTo(r+s,i+s*e,o-s,a-s*n,o,a)}function Tu(t){this._context=t}function Eu(t){this._context=new Cu(t)}function Cu(t){this._context=t}function Su(t){this._context=t}function Au(t){var e,n,r=t.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=t[0]+2*t[1],e=1;e<r-1;++e)i[e]=1,o[e]=4,a[e]=4*t[e]+2*t[e+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=i[e]/o[e-1],o[e]-=n,a[e]-=n*a[e-1];for(i[r-1]=a[r-1]/o[r-1],e=r-2;e>=0;--e)i[e]=(a[e]-i[e+1])/o[e];for(o[r-1]=(t[r]+i[r-1])/2,e=0;e<r-1;++e)o[e]=2*t[e+1]-i[e+1];return[i,o]}Tu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:xu(this,this._t0,bu(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,xu(this,bu(this,n=wu(this,t,e)),n);break;default:xu(this,this._t0,n=wu(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(Eu.prototype=Object.create(Tu.prototype)).point=function(t,e){Tu.prototype.point.call(this,e,t)},Cu.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,o){this._context.bezierCurveTo(e,t,r,n,o,i)}},Su.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=Au(t),i=Au(e),o=0,a=1;a<n;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[a],e[a]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};function Nu(t,e){this._context=t,this._t=e}Nu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};function Du(){this._=null}function ku(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Mu(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Iu(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Ou(t){for(;t.L;)t=t.L;return t}Du.prototype={constructor:Du,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Ou(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(Mu(this,n),n=(t=n).U),n.C=!1,r.C=!0,Iu(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(Iu(this,n),n=(t=n).U),n.C=!1,r.C=!0,Mu(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,a=t.R;if(n=o?a?Ou(a):o:a,i?i.L===t?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=a,a.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,Mu(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,Iu(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,Mu(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,Iu(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,Mu(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,Iu(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Lu=Du;function Ru(t,e,n,r){var i=[null,null],o=oc.push(i)-1;return i.left=t,i.right=e,n&&ju(i,t,e,n),r&&ju(i,e,t,r),rc[t.index].halfedges.push(o),rc[e.index].halfedges.push(o),i}function Pu(t,e,n){var r=[e,n];return r.left=t,r}function ju(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function Hu(t,e,n,r,i){var o,a=t[0],s=t[1],l=a[0],u=a[1],c=0,f=1,h=s[0]-l,p=s[1]-u;if(o=e-l,h||!(o>0)){if(o/=h,h<0){if(o<c)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>c&&(c=o)}if(o=r-l,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>c&&(c=o)}else if(h>0){if(o<c)return;o<f&&(f=o)}if(o=n-u,p||!(o>0)){if(o/=p,p<0){if(o<c)return;o<f&&(f=o)}else if(p>0){if(o>f)return;o>c&&(c=o)}if(o=i-u,p||!(o<0)){if(o/=p,p<0){if(o>f)return;o>c&&(c=o)}else if(p>0){if(o<c)return;o<f&&(f=o)}return!(c>0||f<1)||(c>0&&(t[0]=[l+c*h,u+c*p]),f<1&&(t[1]=[l+f*h,u+f*p]),!0)}}}}}function Fu(t,e,n,r,i){var o=t[1];if(o)return!0;var a,s,l=t[0],u=t.left,c=t.right,f=u[0],h=u[1],p=c[0],d=c[1],g=(f+p)/2,m=(h+d)/2;if(d===h){if(g<e||g>=r)return;if(f>p){if(l){if(l[1]>=i)return}else l=[g,n];o=[g,i]}else{if(l){if(l[1]<n)return}else l=[g,i];o=[g,n]}}else if(s=m-(a=(f-p)/(d-h))*g,a<-1||a>1)if(f>p){if(l){if(l[1]>=i)return}else l=[(n-s)/a,n];o=[(i-s)/a,i]}else{if(l){if(l[1]<n)return}else l=[(i-s)/a,i];o=[(n-s)/a,n]}else if(h<d){if(l){if(l[0]>=r)return}else l=[e,a*e+s];o=[r,a*r+s]}else{if(l){if(l[0]<e)return}else l=[r,a*r+s];o=[e,a*e+s]}return t[0]=l,t[1]=o,!0}function qu(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Uu(t,e){return e[+(e.left!==t.site)]}function Bu(t,e){return e[+(e.left===t.site)]}var Wu,zu=[];function Yu(){ku(this),this.x=this.y=this.arc=this.site=this.cy=null}function Vu(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var a=i[0],s=i[1],l=r[0]-a,u=r[1]-s,c=o[0]-a,f=o[1]-s,h=2*(l*f-u*c);if(!(h>=-sc)){var p=l*l+u*u,d=c*c+f*f,g=(f*p-u*d)/h,m=(l*d-c*p)/h,v=zu.pop()||new Yu;v.arc=t,v.site=i,v.x=g+a,v.y=(v.cy=m+s)+Math.sqrt(g*g+m*m),t.circle=v;for(var y=null,_=ic._;_;)if(v.y<_.y||v.y===_.y&&v.x<=_.x){if(!_.L){y=_.P;break}_=_.L}else{if(!_.R){y=_;break}_=_.R}ic.insert(y,v),y||(Wu=v)}}}}function Gu(t){var e=t.circle;e&&(e.P||(Wu=e.N),ic.remove(e),zu.push(e),ku(e),t.circle=null)}var $u=[];function Xu(){ku(this),this.edge=this.site=this.circle=null}function Ku(t){var e=$u.pop()||new Xu;return e.site=t,e}function Qu(t){Gu(t),nc.remove(t),$u.push(t),ku(t)}function Zu(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],o=t.P,a=t.N,s=[t];Qu(t);for(var l=o;l.circle&&Math.abs(n-l.circle.x)<ac&&Math.abs(r-l.circle.cy)<ac;)o=l.P,s.unshift(l),Qu(l),l=o;s.unshift(l),Gu(l);for(var u=a;u.circle&&Math.abs(n-u.circle.x)<ac&&Math.abs(r-u.circle.cy)<ac;)a=u.N,s.push(u),Qu(u),u=a;s.push(u),Gu(u);var c,f=s.length;for(c=1;c<f;++c)u=s[c],l=s[c-1],ju(u.edge,l.site,u.site,i);l=s[0],(u=s[f-1]).edge=Ru(l.site,u.site,null,i),Vu(l),Vu(u)}function Ju(t){for(var e,n,r,i,o=t[0],a=t[1],s=nc._;s;)if((r=tc(s,a)-o)>ac)s=s.L;else{if(!((i=o-ec(s,a))>ac)){r>-ac?(e=s.P,n=s):i>-ac?(e=s,n=s.N):e=n=s;break}if(!s.R){e=s;break}s=s.R}!function(t){rc[t.index]={site:t,halfedges:[]}}(t);var l=Ku(t);if(nc.insert(e,l),e||n){if(e===n)return Gu(e),n=Ku(e.site),nc.insert(l,n),l.edge=n.edge=Ru(e.site,l.site),Vu(e),void Vu(n);if(n){Gu(e),Gu(n);var u=e.site,c=u[0],f=u[1],h=t[0]-c,p=t[1]-f,d=n.site,g=d[0]-c,m=d[1]-f,v=2*(h*m-p*g),y=h*h+p*p,_=g*g+m*m,w=[(m*y-p*_)/v+c,(h*_-g*y)/v+f];ju(n.edge,u,d,w),l.edge=Ru(u,t,null,w),n.edge=Ru(t,d,null,w),Vu(e),Vu(n)}else l.edge=Ru(e.site,l.site)}}function tc(t,e){var n=t.site,r=n[0],i=n[1],o=i-e;if(!o)return r;var a=t.P;if(!a)return-1/0;var s=(n=a.site)[0],l=n[1],u=l-e;if(!u)return s;var c=s-r,f=1/o-1/u,h=c/u;return f?(-h+Math.sqrt(h*h-2*f*(c*c/(-2*u)-l+u/2+i-o/2)))/f+r:(r+s)/2}function ec(t,e){var n=t.N;if(n)return tc(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var nc,rc,ic,oc,ac=1e-6,sc=1e-12;function lc(t,e){return e[1]-t[1]||e[0]-t[0]}function uc(t,e){var n,r,i,o=t.sort(lc).pop();for(oc=[],rc=new Array(t.length),nc=new Lu,ic=new Lu;;)if(i=Wu,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(Ju(o),n=o[0],r=o[1]),o=t.pop();else{if(!i)break;Zu(i.arc)}if(function(){for(var t,e,n,r,i=0,o=rc.length;i<o;++i)if((t=rc[i])&&(r=(e=t.halfedges).length)){var a=new Array(r),s=new Array(r);for(n=0;n<r;++n)a[n]=n,s[n]=qu(t,oc[e[n]]);for(a.sort((function(t,e){return s[e]-s[t]})),n=0;n<r;++n)s[n]=e[a[n]];for(n=0;n<r;++n)e[n]=s[n]}}(),e){var a=+e[0][0],s=+e[0][1],l=+e[1][0],u=+e[1][1];!function(t,e,n,r){for(var i,o=oc.length;o--;)Fu(i=oc[o],t,e,n,r)&&Hu(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>ac||Math.abs(i[0][1]-i[1][1])>ac)||delete oc[o]}(a,s,l,u),function(t,e,n,r){var i,o,a,s,l,u,c,f,h,p,d,g,m=rc.length,v=!0;for(i=0;i<m;++i)if(o=rc[i]){for(a=o.site,s=(l=o.halfedges).length;s--;)oc[l[s]]||l.splice(s,1);for(s=0,u=l.length;s<u;)d=(p=Bu(o,oc[l[s]]))[0],g=p[1],f=(c=Uu(o,oc[l[++s%u]]))[0],h=c[1],(Math.abs(d-f)>ac||Math.abs(g-h)>ac)&&(l.splice(s,0,oc.push(Pu(a,p,Math.abs(d-t)<ac&&r-g>ac?[t,Math.abs(f-t)<ac?h:r]:Math.abs(g-r)<ac&&n-d>ac?[Math.abs(h-r)<ac?f:n,r]:Math.abs(d-n)<ac&&g-e>ac?[n,Math.abs(f-n)<ac?h:e]:Math.abs(g-e)<ac&&d-t>ac?[Math.abs(h-e)<ac?f:t,e]:null))-1),++u);u&&(v=!1)}if(v){var y,_,w,b=1/0;for(i=0,v=null;i<m;++i)(o=rc[i])&&(w=(y=(a=o.site)[0]-t)*y+(_=a[1]-e)*_)<b&&(b=w,v=o);if(v){var x=[t,e],T=[t,r],E=[n,r],C=[n,e];v.halfedges.push(oc.push(Pu(a=v.site,x,T))-1,oc.push(Pu(a,T,E))-1,oc.push(Pu(a,E,C))-1,oc.push(Pu(a,C,x))-1)}}for(i=0;i<m;++i)(o=rc[i])&&(o.halfedges.length||delete rc[i])}(a,s,l,u)}this.edges=oc,this.cells=rc,nc=ic=oc=rc=null}uc.prototype={constructor:uc,polygons:function(){var t=this.edges;return this.cells.map((function(e){var n=e.halfedges.map((function(n){return Uu(e,t[n])}));return n.data=e.site.data,n}))},triangles:function(){var t=[],e=this.edges;return this.cells.forEach((function(n,r){if(o=(i=n.halfedges).length)for(var i,o,a,s,l,u,c=n.site,f=-1,h=e[i[o-1]],p=h.left===c?h.right:h.left;++f<o;)a=p,p=(h=e[i[f]]).left===c?h.right:h.left,a&&p&&r<a.index&&r<p.index&&(l=a,u=p,((s=c)[0]-u[0])*(l[1]-s[1])-(s[0]-l[0])*(u[1]-s[1])<0)&&t.push([c.data,a.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,e,n){for(var r,i,o=this,a=o._found||0,s=o.cells.length;!(i=o.cells[a]);)if(++a>=s)return null;var l=t-i.site[0],u=e-i.site[1],c=l*l+u*u;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(n){var r=o.edges[n],s=r.left;if(s!==i.site&&s||(s=r.right)){var l=t-s[0],u=e-s[1],f=l*l+u*u;f<c&&(c=f,a=s.index)}}))}while(null!==a);return o._found=r,null==n||c<=n*n?i.site:null}};function cc(t,e,n){this.k=t,this.x=e,this.y=n}cc.prototype={constructor:cc,scale:function(t){return 1===t?this:new cc(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new cc(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new cc(1,0,0);cc.prototype;var fc=n(3),hc=n.n(fc);var pc={DARK_BG:"#333333",LIGHTER_BG:"#5F5F5F",LIGHT_GREY:"#ACACAC",TITLE_WHITE:"#DADADA",TEAL:"#00C89D",SELECTION_GREEN:"#A0C29E",TED_RED:"#E62B1E",BRIGHT_GREEN:"#13B100",BRIGHT_RED:"#B10007",BRIGHT_ORANGE:"#B17D00",HIGHLIGHT_COLOR:"#00C89D"};function dc(t){return"function"==typeof t?t:function(){return t}}var gc=function(){function t(){const t=ne(document.createElement("div"));return t.style("position","absolute").style("top",0).style("opacity",0).style("pointer-events","none").style("box-sizing","border-box"),t.node()}let e="n",n=[0,0],r=" ",i=t(),o=null,a=null,s=null;function l(t){var e;null!=t.node()&&(o="svg"===(e=(e=t).node()).tagName.toLowerCase()?e:e.ownerSVGElement,a=o.createSVGPoint(),document.body.appendChild(i))}function u(){return null==i&&(i=t(),document.body.appendChild(i)),ne(i)}function c(){let t=s||Wt.target;for(;void 0===t.getScreenCTM&&"undefined"===t.parentNode;)t=t.parentNode;const e=t.getScreenCTM(),n=t.getBBox(),r=n.width,i=n.height,o=n.y,l={nw:a.matrixTransform(e),ne:a.matrixTransform(e),se:a.matrixTransform(e),w:a.matrixTransform(e),e:a.matrixTransform(e),n:a.matrixTransform(e),s:a.matrixTransform(e),sw:a.matrixTransform(e)};return a.x=n.x,a.y=o,l.nw=a.matrixTransform(e),a.x+=r,l.nw=a.matrixTransform(e),a.y+=i,l.se=a.matrixTransform(e),a.x-=r,l.nw=a.matrixTransform(e),a.y-=i/2,l.w=a.matrixTransform(e),a.x+=r,l.e=a.matrixTransform(e),a.x-=r/2,a.y-=i/2,l.n=a.matrixTransform(e),a.y+=i,l.s=a.matrixTransform(e),l}const f={n:function(){const t=c();return{top:t.n.y-i.offsetHeight,left:t.n.x-i.offsetWidth/2}},s:function(){const t=c();return{top:t.s.y,left:t.s.x-i.offsetWidth/2}},e:function(){const t=c();return{top:t.e.y-i.offsetHeight/2,left:t.e.x}},w:function(){const t=c();return{top:t.w.y-i.offsetHeight/2,left:t.w.x-i.offsetWidth}},nw:function(){const t=c();return{top:t.nw.y-i.offsetHeight,left:t.nw.x-i.offsetWidth}},ne:function(){const t=c();return{top:t.ne.y-i.offsetHeight,left:t.ne.x}},sw:function(){const t=c();return{top:t.sw.y,left:t.sw.x-i.offsetWidth}},se:function(){const t=c();return{top:t.se.y,left:t.e.x}}},h=Object.keys(f);return l.show=function(){const t=Array.prototype.slice.call(arguments);t[t.length-1]instanceof SVGElement&&(s=t.pop());const i=r.apply(this,t),o=n,a=e,c=u();let p=h.length;const d=document.documentElement.scrollTop||document.body.scrollTop,g=document.documentElement.scrollLeft||document.body.scrollLeft;for(c.html(i).style("position","absolute").style("opacity",1).style("pointer-events","all");p--;)c.classed(h[p],!1);let m;switch(a){case"n":m=f.n.apply(this);break;case"s":m=f.s.apply(this);break;case"e":m=f.e.apply(this);break;case"w":m=f.w.apply(this);break;case"nw":m=f.nw.apply(this);break;case"sw":m=f.sw.apply(this);break;case"ne":m=f.ne.apply(this);break;case"se":m=f.se.apply(this)}return c.classed(a,!0).style("top",m.top+o[0]+d+"px").style("left",m.left+o[1]+g+"px"),l},l.hide=function(){return u().style("opacity",0).style("pointer-events","none"),l},l.attr=function(t,e){if(arguments.length<2&&"string"==typeof t)return u().attr(t);{const t=Array.prototype.slice.call(arguments);ee.prototype.attr.apply(u(),t)}return l},l.style=function(t,e){if(arguments.length<2&&"string"==typeof t)return u().style(t);{const t=Array.prototype.slice.call(arguments);if(1===t.length){const e=t[0];Object.keys(e).forEach((function(t){return ee.prototype.style.apply(u(),[t,e[t]])}))}}return l},l.direction=function(t){return arguments.length?(e=null==t?t:dc(t),l):e},l.offset=function(t){return arguments.length?(n=null==t?t:dc(t),l):n},l.html=function(t){return arguments.length?(r=null==t?t:dc(t),l):r},l.destroy=function(){return i&&(u().remove(),i=null),l},l},mc=function(t,e){const n=10,r=80,i=800-r-30,o=500-n-80;t.attr("viewBox","0 0 800 500");const a=t.append("g");a.attr("transform","translate("+r+","+n+")");const s=os("%s"),u=l(e,t=>s(t.film_date)),c=function(){return $o.apply(Sl(_a,ba,Ca,Oa,Ra,ja,Fa,Ua,is).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}().domain(u).range([0,i]),f=P(c).tickFormat(is("%Y"));a.append("g").attr("transform","translate(0,"+o+")").call(f);const h=l(e,t=>+t.views),p=pa().domain(h).range([o,0]);a.append("g").call(j(p).tickFormat($i("~s")));const d=gc().attr("class","d3-tip").html((function(t){return`${t.name}: ${t.views} views`}));a.selectAll("circle").data(e).enter().append("circle").attr("transform",(function(t){return"translate("+c(s(t.film_date))+","+p(+t.views)+")"})).attr("r",2).style("opacity","0.75").style("fill",pc.TEAL).call(d).on("mouseover",d.show).on("mouseout",d.hide),a.append("text").attr("transform","translate(-50, 250) rotate(-90)").attr("fill",pc.TITLE_WHITE).text("Number of Views"),a.append("text").attr("transform","translate(320, 450)").attr("fill",pc.TITLE_WHITE).text("Year")};var vc=function(t,e){const n=10,r=80,i=800-r-30,o=500-n-80;t.append("h2").text("What Do TED Talkers Do For a Living?"),t.append("hr").attr("color",pc.LIGHT_GREY);const a=t.append("select").attr("id","viewSelect");a.append("option").text("Circle Packing").attr("value","Circle Packing"),a.append("option").text("Treemap").attr("value","Treemap"),a.on("change",(function(){const t=ne("#viewSelect"),e=t._groups[0][0].options[t._groups[0][0].selectedIndex].value;console.log(e),"Circle Packing"==e?(oe(".circlePackNode").style("opacity","1"),oe(".treemapNode").style("opacity","0")):(oe(".circlePackNode").style("opacity","0"),oe(".treemapNode").style("opacity","1"))}));const s=t.append("svg").attr("id","professionsView");s.attr("viewBox","0 0 800 500"),s.append("g").attr("transform","translate("+r+","+n+")");const l=function(){var t=jo,e=Ho;function n(n){var r,i,o,a,s,l,u,c=n.length,f=new Array(c),h={};for(i=0;i<c;++i)r=n[i],s=f[i]=new so(r),null!=(l=t(r,i,n))&&(l+="")&&(h[u=Lo+(s.id=l)]=u in h?Po:s);for(i=0;i<c;++i)if(s=f[i],null!=(l=e(n[i],i,n))&&(l+="")){if(!(a=h[Lo+l]))throw new Error("missing: "+l);if(a===Po)throw new Error("ambiguous: "+l);a.children?a.children.push(s):a.children=[s],s.parent=a}else{if(o)throw new Error("multiple roots");o=s}if(!o)throw new Error("no root");if(o.parent=Ro,o.eachBefore((function(t){t.depth=t.parent.depth+1,--c})).eachBefore(ao),o.parent=null,c>0)throw new Error("cycle");return o}return n.id=function(e){return arguments.length?(t=Eo(e),n):t},n.parentId=function(t){return arguments.length?(e=Eo(t),n):e},n}().id(t=>t.profession).parentId(t=>"Root"!=t.profession?"Root":"")(e).sum(t=>+t.count).sort((t,e)=>+e.data.count-+t.data.count);!function(t,e,n,r){const i=No().size([n,r]).padding(3)(e),o=t.selectAll(".circlePackNode").data(i.leaves()).enter().append("g").attr("transform",t=>`translate(${t.x+1},${t.y+1})`).attr("class","circlePackNode").style("opacity","1");o.append("circle").attr("r",t=>t.r).attr("fill",pc.TED_RED).attr("stroke",pc.LIGHT_GREY).attr("stroke-weight",5),o.append("text").text(t=>t.data.profession).style("font-size","1px").each((function(t){const e=this.getBBox(),n=this.parentNode.getBBox();t.data.scale=Math.min(n.width/e.width,n.height/e.height)})).style("font-size",(function(t){return t.data.scale+"px"})).attr("fill",pc.LIGHT_GREY).attr("class","professionLabel")}(s,l,800,500-2*n),function(t,e,n,r){const i=zo().size([n,r]).padding(3)(e),o=t.selectAll(".treemapNode").data(i.leaves()).enter().append("g").attr("transform",t=>`translate(${t.x0+1},${t.y0+1})`).attr("class","treemapNode").style("opacity","0");o.append("rect").attr("width",t=>t.x1-t.x0).attr("height",t=>t.y1-t.y0).attr("fill",pc.LIGHT_GREY).attr("stroke",pc.LIGHTER_BG).attr("stroke-weight",5),o.append("text").text(t=>t.data.profession).style("font-size","1px").each((function(t){const e=this.getBBox(),n=this.parentNode.getBBox();t.data.scale=Math.min(n.width/e.width,n.height/e.height)})).style("font-size",(function(t){return t.data.scale+"px"})).attr("fill",pc.DARK_BG).attr("transform",t=>"translate("+(t.x1-t.x0)/2+","+(t.y1-t.y0)/2+")").attr("class","professionLabel")}(s,l,i,o)},yc=function(t){return"./images/icon_svgs/icon_"+(t=t.toLowerCase())+".svg"};var _c=function(t,e){const n=900,r=50,i=e.length/r,o=5,a=(1110-(i+1)*o)/i,s=3*a/4;t.append("svg").attr("width",1110).attr("height",n).selectAll("image").data(e).enter().append("image").attr("class","thumbnail").attr("href",t=>"./images/thumbnails/"+t.thumbnail_path).attr("width",a).attr("height",s).attr("transform",(t,e)=>{const i=function(t){const e=Math.floor(t/r);return[t%r,e]}(e);return"translate("+function(t){return+o*(t+1)+a*t}(i[0])+","+function(t){return n-o*(t+1)-s*(t+1)}(i[1])+")"})},wc=n(2),bc=n.n(wc);n.d(e,"controller",(function(){return xc}));const xc=new hc.a.Controller,Tc=(document.getElementById("showFigure1"),new hc.a.Scene({triggerElement:"#showFigure1"}).on("start",(function(){bc()("svg.figure1").removeClass("visible-false").addClass("animated").addClass("fadeInLeft"),console.log("start of scene")})).addTo(xc),ne("svg.figure1")),Ec=ne("svg.figure2"),Cc=ne("svg.figure3"),Sc=ne("div.figure4"),Ac=ne("div.ratingsDiv"),Nc=(ne("div.topicsDiv"),ne("div.thumbnailGrid"));Di("./data/ted_all.csv").then(t=>{!function(t){t.forEach(t=>{const e=new Date(1e3*parseInt(t.film_date,10));t.year=e.getFullYear().toString()})}(t),_c(Nc,t),function(t,e){const n=10,r=80,i=800-r-30,o=500-n-80;t.attr("width",800),t.attr("height",500);const a=t.append("g");a.attr("transform","translate("+r+","+n+")");const s=l(e,t=>parseInt(t.year,10)),u=pa().domain(s).range([0,i]);a.append("g").attr("transform","translate(0,"+o+")").call(P(u).tickFormat($i("d")));const c=b().domain(u.domain()).thresholds(u.ticks(s[1]-s[0]))(e.map(t=>parseInt(t.year,10))),f=pa().domain([0,x(c,t=>t.length)]).range([o,0]);a.append("g").call(j(f)),a.selectAll("rect").data(c).enter().append("rect").attr("x",1).attr("transform",(function(t){return"translate("+u(t.x0)+","+f(t.length)+")"})).attr("width",(function(t){return u(t.x1)-u(t.x0)-1})).attr("height",(function(t){return o-f(t.length)})).style("fill",pc.TED_RED),a.append("text").attr("transform","translate(-50, 250) rotate(-90)").attr("fill",pc.TITLE_WHITE).text("Number of talks"),a.append("text").attr("transform","translate(320, 450)").attr("fill",pc.TITLE_WHITE).text("Year")}(Tc,t),mc(Ec,t),function(t,e){const n={top:10,right:30,bottom:80,left:80},r=800,i=r-n.left-n.right,o=500-n.top-n.bottom,a=r/30,s=.8*a,u=s,c=(a-s)/2,f=.22*o,h=.78*f;function p(){const t=ne("#talkSelector"),i=t._groups[0][0].options[t._groups[0][0].selectedIndex].value;let p=0;for(let t=0;t<e.length;t++)if(e[t].name==i){p=t;break}const d=e[p].ratings.replace(/'/g,'"'),g=JSON.parse(d);g.sort((function(t,e){return+e.count-+t.count}));const m=g.length,v=(r-s*m)/(m+1),y=l(g,t=>+t.count),_=ne("#ratingsIconBarGroup"),w=pa().domain([0,y[1]]).range([0,o-s/2]),b=gc().attr("class","d3-tip").html((function(t){return`${t.name}: ${t.count}`})),x=_.selectAll(".ratingsG").data(g,t=>t.name),T=x.enter().append("g").attr("class","ratingsG").call(b).on("mouseover",b.show).on("mouseout",b.hide);T.append("path").attr("class","ratingBar").attr("fill",(function(t){switch(t.name.toLowerCase()){case"confusing":case"longwinded":case"unconvincing":return pc.BRIGHT_RED;case"obnoxious":case"ok":return pc.BRIGHT_ORANGE;default:return pc.BRIGHT_GREEN}})),T.append("image").attr("class","icon-image").attr("href",t=>yc(t.name)).attr("width",s).attr("height",s).attr("transform","translate(0,"+c+")"),x.merge(T).transition().duration(750).attr("transform",(t,e)=>"translate("+(v*(e+1)+s*e)+",0)").select(".ratingBar").attr("d",(function(t){const e=w(+t.count);return function(t,e,n,r,i){let o="M"+t+","+e+"v"+(-r+i);return o+="a"+i+","+i+" 0 0 1 "+i+","+-i,o+="h"+(n-2*i),o+="a"+i+","+i+" 0 0 1 "+i+","+i,o+="v"+(r-i)+"z"}(0,0,u,e,a/6)}));const E={good:0,bad:0,ok:0};for(let t=0;t<g.length;t++)switch(g[t].name.toLowerCase()){case"confusing":case"longwinded":case"unconvincing":E.bad+=+g[t].count;break;case"obnoxious":case"ok":E.ok+=+g[t].count;break;default:E.good+=+g[t].count}const C=E.good+E.bad+E.ok,S=gc().attr("class","d3-tip").html(t=>`${t.data.key.toUpperCase()}: ${(+t.data.value/t.voteTotal*100).toFixed(1)}%`),A=Jo().domain(["good","bad","ok"]).range([pc.BRIGHT_GREEN,pc.BRIGHT_RED,pc.BRIGHT_ORANGE]),N=tu().value((function(t){return t.value}))(fi(E));N.forEach(t=>{t.voteTotal=C});const D=ne(".ratingsSVG").selectAll(".pieChart").data(N,(function(t){return t.data.key})).enter().append("path").attr("class","pieChart").attr("fill",(function(t){return A(t.data.key)})).attr("transform","translate("+(r-n.right-f)+","+(3*n.top+f)+")").call(S).on("mouseover",S.show).on("mouseout",S.hide);ne(".ratingsSVG").selectAll(".pieChart").data(N,(function(t){return t.data.key})).merge(D).transition().duration(750).attr("d",Xl().innerRadius(h).outerRadius(f))}t.append("h2").text("Talk Ratings"),t.append("hr").attr("color",pc.LIGHT_GREY);const d=t.append("select").attr("id","talkSelector").style("width",i+"px");for(let t=0;t<e.length;t++)d.append("option").attr("value",e[t].name).text(e[t].name);d.on("change",p),t.append("svg").attr("viewBox",`0 0 ${r} 500`).attr("class","ratingsSVG").append("g").attr("id","ratingsIconBarGroup").attr("transform","translate(0,"+(500-n.bottom)+")").append("rect").attr("id","iconBar").attr("width",r).attr("height",a).attr("fill",pc.LIGHT_GREY).attr("rx",a/6),p()}(Ac,t)}),Di("./data/fk_scores.csv").then(t=>{!function(t,e){const n=10,r=80,i=800-r-30,o=500-n-80;t.attr("viewBox","0 0 800 500");const a=t.append("g");a.attr("transform","translate("+r+","+n+")");const s=l(e,t=>parseInt(t.level,10)),u=pa().domain(s).range([0,i]);a.append("g").attr("transform","translate(0,"+o+")").call(P(u).tickFormat($i("d")));const c=b().domain(u.domain()).thresholds(u.ticks(40))(e.map(t=>parseInt(t.level,10))),f=pa().domain([0,x(c,t=>t.length)]).range([o,0]);a.append("g").call(j(f)),a.selectAll("rect").data(c).enter().append("rect").attr("x",1).attr("transform",(function(t){return"translate("+u(t.x0)+","+f(t.length)+")"})).attr("width",(function(t){return u(t.x1)-u(t.x0)-1})).attr("height",(function(t){return o-f(t.length)})).style("fill",pc.TED_RED),a.append("text").attr("transform","translate(-50, 250) rotate(-90)").attr("fill",pc.TITLE_WHITE).text("Number of talks"),a.append("text").attr("transform","translate(320, 450)").attr("fill",pc.TITLE_WHITE).text("Reading Level")}(Cc,t)}),Mi("./data/profession_counts.json").then(t=>{vc(Sc,t)}),Mi("./data/topic_relationships.json").then(t=>{})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2Nyb2xsbWFnaWMvc2Nyb2xsbWFnaWMvdW5jb21wcmVzc2VkL1Njcm9sbE1hZ2ljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib290c3RyYXAvZGlzdC9qcy9ib290c3RyYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9kaXN0L2VzbS9wb3BwZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvY3Jvc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9leHRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9yYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGhyZXNob2xkL3N0dXJnZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9oaXN0b2dyYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tYXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy96aXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvYXhpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZGlzcGF0Y2gvc3JjL2Rpc3BhdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NyZWF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3JBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbWF0Y2hlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXR0ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3N0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xhc3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmFpc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2xvd2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbnNlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0QWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2V4aXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2pvaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL21lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vcmRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VtcHR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hcHBlbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdHVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9sb2NhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zb3VyY2VFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL2V2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9kcmFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yZ2IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpc0Nsb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL29iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9wYXJzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3ZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vZGVjb21wb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvem9vbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2hzbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL21hdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9sYWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9oY2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9jdWJlaGVsaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jdWJlaGVsaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9xdWFudGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZW91dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zY2hlZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvaW50ZXJydXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3R3ZWVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ludGVycG9sYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0clR3ZWVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2RlbGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2R1cmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2Vhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vcmVtb3ZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zdHlsZVR3ZWVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdEFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL3BvbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL3Npbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvYmFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvZWxhc3RpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2N1YmljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbnRlcnJ1cHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9icnVzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY2hvcmQvc3JjL21hdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNob3JkL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY2hvcmQvc3JjL2Nob3JkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1wYXRoL3NyYy9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL3NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29udG91ci9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2RlbnNpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvZHN2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Nzdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHN2L3NyYy90c3YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy90ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvZHN2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL3htbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2FkZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2NvdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvcXVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy95LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvcXVhZHRyZWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9kYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvZXh0ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvZmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9zaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvdmlzaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy92aXNpdEFmdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvc2ltdWxhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXREZWNpbWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2V4cG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRUcmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXROdW1lcmFscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvY291bnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9lYWNoQWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2VhY2hCZWZvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L3N1bS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvYW5jZXN0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9kZXNjZW5kYW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvbGVhdmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9saW5rcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9wYWNrL2VuY2xvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvcGFjay9zaWJsaW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9hY2Nlc3NvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvcGFjay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL3JvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvZGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9zdHJhdGlmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9zcXVhcmlmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvcmVzcXVhcmlmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcG9seWdvbi9zcmMvaHVsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9kZWZhdWx0U291cmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL25vcm1hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy91bmlmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2lyd2luSGFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9sb2dOb3JtYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvYmF0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvZXhwb25lbnRpYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9pbml0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9vcmRpbmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb250aW51b3VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGlja0Zvcm1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25QcmVmaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uRml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9saW5lYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9uaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9pbnRlcnZhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMveWVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbW9udGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2R1cmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy93ZWVrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9kYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2hvdXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbnV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvc2Vjb25kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9taWxsaXNlY29uZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjV2Vlay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjRGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNZZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvbG9jYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01vbnRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNIb3VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNNaW51dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL21hdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9saW5lYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvZGVzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvcmFkaWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvZGlhbW9uZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3N5bWJvbC9jaXJjbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvc3Rhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL25vb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvdHJpYW5nbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvd3llLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvYmFzaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9iYXNpc0Nsb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2Jhc2lzT3Blbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2J1bmRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhcmRpbmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2FyZGluYWxDbG9zZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXJkaW5hbE9wZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXRtdWxsUm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2F0bXVsbFJvbUNsb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhdG11bGxSb21PcGVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbGluZWFyQ2xvc2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbW9ub3RvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9uYXR1cmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvUmVkQmxhY2tUcmVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9FZGdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9DZWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9DaXJjbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL0JlYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9EaWFncmFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy16b29tL3NyYy90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL3pvb20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvVG9vbFRpcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvdGVkU2l0ZVZpZXdzLmpzIiwid2VicGFjazovLy8uL3NyYy90cy9wcm9mZXNzaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY2lyY2xlUGFja1Byb2Zlc3Npb25zLmpzIiwid2VicGFjazovLy8uL3NyYy90cy90cmVlbWFwUHJvZmVzc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2ltYWdlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL3JhdGluZ3NCcmVha2Rvd24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2FsbFRhbGtUaHVtYm5haWxHcmlkLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvdGFsa0RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL3JlYWRpbmdMZXZlbC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImdsb2JhbCIsImZhY3RvcnkiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsInRoaXMiLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJzbGljZSIsImNvbmNhdCIsInB1c2giLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwic3VwcG9ydCIsImlzRnVuY3Rpb24iLCJvYmoiLCJub2RlVHlwZSIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInR5cGUiLCJzcmMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJub2RlIiwiZG9jIiwidmFsIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJ0b1R5cGUiLCJqUXVlcnkiLCJzZWxlY3RvciIsImNvbnRleHQiLCJmbiIsImluaXQiLCJydHJpbSIsImlzQXJyYXlMaWtlIiwibGVuZ3RoIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImxlbiIsImoiLCJlbmQiLCJzb3J0Iiwic3BsaWNlIiwiZXh0ZW5kIiwib3B0aW9ucyIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwidGFyZ2V0IiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwiTWF0aCIsInJhbmRvbSIsInJlcGxhY2UiLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJ0cmltIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJncmVwIiwiaW52ZXJ0IiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiZ3VpZCIsIml0ZXJhdG9yIiwic3BsaXQiLCJ0b0xvd2VyQ2FzZSIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJEYXRlIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJhIiwiYiIsInBvcCIsInB1c2hfbmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmRlc2NlbmQiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJyaHRtbCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsIl8iLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJjaCIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsInVubG9hZEhhbmRsZXIiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJub2RlTmFtZSIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwiZSIsImVscyIsInNlZWQiLCJuaWQiLCJtYXRjaCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsIm93bmVyRG9jdW1lbnQiLCJleGVjIiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInRlc3QiLCJ0b1NlbGVjdG9yIiwiam9pbiIsInRlc3RDb250ZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwia2V5cyIsImNhY2hlIiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJuYW1lc3BhY2UiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmlsdGVyIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbm5lckhUTUwiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4Iiwic3RhcnQiLCJwYXJlbnQiLCJ1c2VDYWNoZSIsImxhc3RDaGlsZCIsInVuaXF1ZUlEIiwicHNldWRvIiwiYXJncyIsInNldEZpbHRlcnMiLCJpZHgiLCJtYXRjaGVkIiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsInRva2VucyIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJzZXRNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwidG9rZW4iLCJjb21waWxlZCIsImRlZmF1bHRWYWx1ZSIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsInJuZWVkc0NvbnRleHQiLCJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwibm90Iiwic2VsZiIsInJvb3RqUXVlcnkiLCJyb290IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsInByZXYiLCJzaWJsaW5nIiwiaGFzIiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJpbmRleCIsInByZXZBbGwiLCJhZGQiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50IiwicmV2ZXJzZSIsInJub3RodG1sd2hpdGUiLCJJZGVudGl0eSIsInYiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJtZXRob2QiLCJwcm9taXNlIiwiZmFpbCIsInRoZW4iLCJDYWxsYmFja3MiLCJmbGFnIiwiY3JlYXRlT3B0aW9ucyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJyZW1vdmUiLCJlbXB0eSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsImFsd2F5cyIsImRlZmVycmVkIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwiZGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic2V0VGltZW91dCIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsIm1hc3RlciIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2F0Y2giLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJhbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsImNhbWVsQ2FzZSIsInN0cmluZyIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJjb25maWd1cmFibGUiLCJzZXQiLCJkYXRhIiwicHJvcCIsImhhc0RhdGEiLCJkYXRhUHJpdiIsImRhdGFVc2VyIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImRhdGFBdHRyIiwiSlNPTiIsInBhcnNlIiwiZ2V0RGF0YSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiaG9va3MiLCJfcXVldWVIb29rcyIsInN0b3AiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInBudW0iLCJzb3VyY2UiLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNBdHRhY2hlZCIsImNvbXBvc2VkIiwiZ2V0Um9vdE5vZGUiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJzdHlsZSIsImRpc3BsYXkiLCJjc3MiLCJzd2FwIiwib2xkIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsImdldERlZmF1bHREaXNwbGF5IiwiYm9keSIsInNob3dIaWRlIiwic2hvdyIsInZhbHVlcyIsImhpZGUiLCJ0b2dnbGUiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJ3cmFwTWFwIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwiX2RlZmF1bHQiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImRpdiIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsIndyYXAiLCJhdHRhY2hlZCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm5vZGVzIiwiaHRtbFByZWZpbHRlciIsImNyZWF0ZVRleHROb2RlIiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsImV4cGVjdFN5bmMiLCJlcnIiLCJzYWZlQWN0aXZlRWxlbWVudCIsIm9uIiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJldmVudCIsIm9mZiIsImxldmVyYWdlTmF0aXZlIiwibm90QXN5bmMiLCJzYXZlZCIsImlzVHJpZ2dlciIsImRlbGVnYXRlVHlwZSIsInN0b3BQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwidHJpZ2dlciIsIkV2ZW50IiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImV2ZW50cyIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImJpbmRUeXBlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImJ1dHRvbiIsImFkZFByb3AiLCJob29rIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsImZvY3VzIiwiYmx1ciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJyeGh0bWxUYWciLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJmaXhJbnB1dCIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsInZhbHVlSXNGdW5jdGlvbiIsImh0bWwiLCJfZXZhbFVybCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJhcHBlbmQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJybnVtbm9ucHgiLCJnZXRTdHlsZXMiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwicmJveFN0eWxlIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY29udGFpbmVyIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJyaWdodCIsInBpeGVsQm94U3R5bGVzVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJwb3NpdGlvbiIsInNjcm9sbGJveFNpemVWYWwiLCJvZmZzZXRXaWR0aCIsIm1lYXN1cmUiLCJyb3VuZCIsInBhcnNlRmxvYXQiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJ2ZW5kb3JQcm9wcyIsImZpbmFsUHJvcE5hbWUiLCJmaW5hbCIsImNzc1Byb3BzIiwiY2FwTmFtZSIsInZlbmRvclByb3BOYW1lIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0Iiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1heCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY29tcHV0ZWRWYWwiLCJleHRyYSIsImRlbHRhIiwiY2VpbCIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0UHJvcCIsImdldENsaWVudFJlY3RzIiwiVHdlZW4iLCJlYXNpbmciLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzY3JvbGxib3hTaXplQnVnZ3kiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInByZWZpeCIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJwcm9wSG9va3MiLCJydW4iLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsInBvcyIsInN0ZXAiLCJmeCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiaGVpZ2h0IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwidHdlZW5lciIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJib29sIiwiYXR0ck5hbWVzIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImZvY3VzaW4iLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImF0dGFjaGVzIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJ1bmNhY2hlZCIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwibWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsInNlbmQiLCJuYXRpdmVTdGF0dXNUZXh0IiwicmVzcG9uc2VzIiwiaXNTdWNjZXNzIiwicmVzcG9uc2UiLCJtb2RpZmllZCIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJpc051bWVyaWMiLCJpc05hTiIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwiU2Nyb2xsTWFnaWMiLCJfdXRpbCIsImxvZyIsInZlcnNpb24iLCJDb250cm9sbGVyIiwiX3VwZGF0ZVRpbWVvdXQiLCJfcmVmcmVzaFRpbWVvdXQiLCJOQU1FU1BBQ0UiLCJERUZBVUxUX09QVElPTlMiLCJDT05UUk9MTEVSX09QVElPTlMiLCJkZWZhdWx0cyIsIl9vcHRpb25zIiwiX3NjZW5lT2JqZWN0cyIsIl91cGRhdGVTY2VuZXNPbk5leHRDeWNsZSIsIl9zY3JvbGxQb3MiLCJfc2Nyb2xsRGlyZWN0aW9uIiwiX2lzRG9jdW1lbnQiLCJfdmlld1BvcnRTaXplIiwiX2VuYWJsZWQiLCJzY2hlZHVsZVJlZnJlc2giLCJyZWZyZXNoSW50ZXJ2YWwiLCJyZWZyZXNoIiwiZ2V0U2Nyb2xsUG9zIiwidmVydGljYWwiLCJnZXRWaWV3cG9ydFNpemUiLCJzZXRTY3JvbGxQb3MiLCJfc2V0U2Nyb2xsUG9zIiwidXBkYXRlU2NlbmVzIiwic2NlbmVzVG9VcGRhdGUiLCJvbGRTY3JvbGxQb3MiLCJkZWx0YVNjcm9sbCIsInNjcm9sbFBvcyIsImZvckVhY2giLCJzY2VuZSIsInVwZGF0ZSIsImxvZ2xldmVsIiwiZGVib3VuY2VVcGRhdGUiLCJyQUYiLCJvbkNoYW5nZSIsInJlc2l6ZUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiX2xvZyIsIm91dHB1dCIsInNvcnRTY2VuZXMiLCJTY2VuZXNBcnJheSIsInNjZW5lcyIsInNjcm9sbE9mZnNldCIsImFkZFNjZW5lIiwibmV3U2NlbmUiLCJTY2VuZSIsImNvbnRyb2xsZXIiLCJhZGRUbyIsImdsb2JhbFNjZW5lT3B0aW9ucyIsInJlbW92ZVNjZW5lIiwidXBkYXRlU2NlbmUiLCJpbW1lZGlhdGVseSIsInNjcm9sbFRhcmdldCIsImFkZGl0aW9uYWxQYXJhbWV0ZXIiLCJOdW1iZXIiLCJGdW5jdGlvbiIsImhhc0F0dHJpYnV0ZSIsImNvbnRhaW5lck9mZnNldCIsImVsZW1lbnRPZmZzZXQiLCJzY3JvbGxQb3NNZXRob2QiLCJpbmZvIiwiYWJvdXQiLCJzaXplIiwic2Nyb2xsRGlyZWN0aW9uIiwiaXNEb2N1bWVudCIsIm5ld0xvZ2xldmVsIiwiZW5hYmxlZCIsIm5ld1N0YXRlIiwiZGVzdHJveSIsInJlc2V0U2NlbmVzIiwiY0FGIiwicmkiLCJjb25zdHJ1Y3QiLCJhZGRPcHRpb24iLCJleHRlbnNpb24iLCJvbGRDbGFzcyIsIiRzdXBlciIsIl9kdXJhdGlvblVwZGF0ZU1ldGhvZCIsIl9jb250cm9sbGVyIiwiU0NFTkVfT1BUSU9OUyIsIl9zdGF0ZSIsIl9wcm9ncmVzcyIsIl9zY3JvbGxPZmZzZXQiLCJfdHJpZ2dlclBvcyIsIl9saXN0ZW5lcnMiLCJuYW1lcyIsImZ1bGxuYW1lIiwibmFtZXBhcnRzIiwiZXZlbnRuYW1lIiwibGlzdGVuZXIiLCJ2YXJzIiwibGlzdGVuZXJzIiwidXBkYXRlVHJpZ2dlckVsZW1lbnRQb3NpdGlvbiIsInVwZGF0ZVNjcm9sbE9mZnNldCIsInZhbGlkYXRlT3B0aW9uIiwidXBkYXRlRHVyYXRpb24iLCJvbkNvbnRhaW5lclJlc2l6ZSIsInRtcFBhcmVudCIsIm5ld1Byb2dyZXNzIiwic3RhcnRQb3MiLCJlbmRQb3MiLCJfcGluIiwidXBkYXRlUGluU3RhdGUiLCJkb1VwZGF0ZSIsIm9sZFN0YXRlIiwicmV2ZXJzZU9yRm9yd2FyZCIsImV2ZW50VmFycyIsInN0YXRlQ2hhbmdlZCIsImV2ZW50TmFtZSIsIl9waW5PcHRpb25zIiwidHJpZ2dlckVsZW1lbnQiLCJ0cmlnZ2VySG9vayIsInN1cHByZXNzRXZlbnRzIiwiY2hhbmdlT3B0aW9uIiwibmV3dmFsIiwicmVhc29uIiwiZWxlbWVudFBvcyIsInRlbGVtIiwiY29udHJvbGxlckluZm8iLCJjaGFuZ2VkIiwiX3ZhbGlkYXRlIiwidmFsaWRhdGUiLCJwZXJjIiwib3B0aW9uTmFtZSIsImxvZ01TRyIsInZhcm5hbWUiLCJvbGR2YWwiLCJhZGRTY2VuZU9wdGlvbiIsIm5ld1ZhbCIsInNoaWZ0cyIsInRyaWdnZXJQb3NpdGlvbiIsImR1cmF0aW9uQ2hhbmdlZCIsInVwZGF0ZVBpbkRpbWVuc2lvbnMiLCJyZW1vdmVQaW4iLCJmb3JjZVVucGluIiwiY29udGFpbmVySW5mbyIsInBpblRhcmdldCIsInNwYWNlciIsIm5ld0NTUyIsImluRmxvdyIsImNoYW5nZSIsInB1c2hGb2xsb3dlcnMiLCJmaXhlZFBvcyIsInNjcm9sbERpc3RhbmNlIiwiZHVyaW5nIiwibWFyZ2luQ29sbGFwc2UiLCJpc01hcmdpbkNvbGxhcHNlVHlwZSIsInJlbFNpemUiLCJhdXRvRnVsbFdpZHRoIiwidXBkYXRlUGluSW5Db250YWluZXIiLCJ1cGRhdGVSZWxhdGl2ZVBpblNwYWNlciIsIm9uTW91c2V3aGVlbE92ZXJQaW4iLCJ3aGVlbERlbHRhIiwic2V0UGluIiwiZWxlbWVudCIsInB1c2hGb2xsb3dlcnNBY3RpdmVseVNldCIsInNwYWNlckNsYXNzIiwicGFyZW50RGlzcGxheSIsImJvdW5kc1BhcmFtcyIsInBpbkNTUyIsInNpemVDU1MiLCJzcGFjZXJDU1MiLCJib3hTaXppbmciLCJtb3pCb3hTaXppbmciLCJ3ZWJraXRCb3hTaXppbmciLCJfX19vcmlnU3R5bGUiLCJwaW5JbmxpbmVDU1MiLCJib3R0b20iLCJtYXJnaW5zIiwiX2Nzc0NsYXNzZXMiLCJfY3NzQ2xhc3NFbGVtcyIsInJlbW92ZUNsYXNzVG9nZ2xlIiwic2V0Q2xhc3NUb2dnbGUiLCJ0cmFuc2xhdGUiLCJtaW4iLCJ2YWxpZGF0aW9uQ2FsbGJhY2siLCJ0aW1lc3RhbXAiLCJVIiwiZmxvYXR2YWwiLCJudW1iZXIiLCJfZ2V0Q29tcHV0ZWRTdHlsZSIsImN1cnJlbnRTdHlsZSIsIl9kaW1lbnNpb24iLCJvdXRlciIsImluY2x1ZGVNYXJnaW4iLCJfdHlwZSIsIkRvbUVsZW1lbnQiLCJjaGFyQXQiLCJzdWJzdHIiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5SaWdodCIsIl9jYW1lbENhc2UiLCJzdHIiLCJnIiwibGFzdFRpbWUiLCJ2ZW5kb3JzIiwiX3JlcXVlc3RBbmltYXRpb25GcmFtZSIsIl9jYW5jZWxBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiY3VyclRpbWUiLCJnZXRUaW1lIiwidGltZVRvQ2FsbCIsImxvZ2xldmVscyIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJIVE1MRWxlbWVudCIsIlNWR0VsZW1lbnQiLCJfZ2V0IiwiTm9kZUxpc3QiLCJyZWYiLCJyZWxhdGl2ZVRvVmlld3BvcnQiLCJjbGFzc25hbWUiLCJjbGFzc0xpc3QiLCJhZGRJbmRpY2F0b3JzIiwicmVtb3ZlSW5kaWNhdG9ycyIsInNldFR3ZWVuIiwicmVtb3ZlVHdlZW4iLCJzZXRWZWxvY2l0eSIsInJlbW92ZVZlbG9jaXR5IiwiUG9wcGVyIiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiX2NyZWF0ZUNsYXNzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfZGVmaW5lUHJvcGVydHkiLCJfb2JqZWN0U3ByZWFkIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlRSQU5TSVRJT05fRU5EIiwidHJhbnNpdGlvbkVuZEVtdWxhdG9yIiwiX3RoaXMiLCJjYWxsZWQiLCJVdGlsIiwidHJpZ2dlclRyYW5zaXRpb25FbmQiLCJnZXRVSUQiLCJnZXRTZWxlY3RvckZyb21FbGVtZW50IiwiaHJlZkF0dHIiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiIsImZsb2F0VHJhbnNpdGlvbkRlbGF5IiwicmVmbG93Iiwic3VwcG9ydHNUcmFuc2l0aW9uRW5kIiwiQm9vbGVhbiIsImlzRWxlbWVudCIsInR5cGVDaGVja0NvbmZpZyIsImNvbXBvbmVudE5hbWUiLCJjb25maWciLCJjb25maWdUeXBlcyIsImV4cGVjdGVkVHlwZXMiLCJ2YWx1ZVR5cGUiLCJmaW5kU2hhZG93Um9vdCIsImF0dGFjaFNoYWRvdyIsIlNoYWRvd1Jvb3QiLCJlbXVsYXRlVHJhbnNpdGlvbkVuZCIsIkpRVUVSWV9OT19DT05GTElDVCIsIkNMT1NFIiwiQ0xPU0VEIiwiQ0xJQ0tfREFUQV9BUEkiLCJDbGFzc05hbWUiLCJBbGVydCIsIl9lbGVtZW50IiwiX3Byb3RvIiwiY2xvc2UiLCJyb290RWxlbWVudCIsIl9nZXRSb290RWxlbWVudCIsIl90cmlnZ2VyQ2xvc2VFdmVudCIsIl9yZW1vdmVFbGVtZW50IiwiZGlzcG9zZSIsImNsb3NlRXZlbnQiLCJfZGVzdHJveUVsZW1lbnQiLCJfalF1ZXJ5SW50ZXJmYWNlIiwiJGVsZW1lbnQiLCJfaGFuZGxlRGlzbWlzcyIsImFsZXJ0SW5zdGFuY2UiLCJKUVVFUllfTk9fQ09ORkxJQ1QkMSIsIkNsYXNzTmFtZSQxIiwiU2VsZWN0b3IkMSIsIkV2ZW50JDEiLCJGT0NVU19CTFVSX0RBVEFfQVBJIiwiQnV0dG9uIiwidHJpZ2dlckNoYW5nZUV2ZW50IiwiYWRkQXJpYVByZXNzZWQiLCJOQU1FJDIiLCJFVkVOVF9LRVkkMiIsIkpRVUVSWV9OT19DT05GTElDVCQyIiwiRGVmYXVsdCIsImtleWJvYXJkIiwic2xpZGUiLCJwYXVzZSIsInRvdWNoIiwiRGVmYXVsdFR5cGUiLCJEaXJlY3Rpb24iLCJFdmVudCQyIiwiU0xJREUiLCJTTElEIiwiS0VZRE9XTiIsIk1PVVNFRU5URVIiLCJNT1VTRUxFQVZFIiwiVE9VQ0hTVEFSVCIsIlRPVUNITU9WRSIsIlRPVUNIRU5EIiwiUE9JTlRFUkRPV04iLCJQT0lOVEVSVVAiLCJEUkFHX1NUQVJUIiwiTE9BRF9EQVRBX0FQSSIsIkNsYXNzTmFtZSQyIiwiU2VsZWN0b3IkMiIsIkFDVElWRSIsIkFDVElWRV9JVEVNIiwiSVRFTSIsIklURU1fSU1HIiwiTkVYVF9QUkVWIiwiSU5ESUNBVE9SUyIsIkRBVEFfU0xJREUiLCJEQVRBX1JJREUiLCJQb2ludGVyVHlwZSIsIlRPVUNIIiwiUEVOIiwiQ2Fyb3VzZWwiLCJfaXRlbXMiLCJfaW50ZXJ2YWwiLCJfYWN0aXZlRWxlbWVudCIsIl9pc1BhdXNlZCIsIl9pc1NsaWRpbmciLCJ0b3VjaFRpbWVvdXQiLCJ0b3VjaFN0YXJ0WCIsInRvdWNoRGVsdGFYIiwiX2NvbmZpZyIsIl9nZXRDb25maWciLCJfaW5kaWNhdG9yc0VsZW1lbnQiLCJfdG91Y2hTdXBwb3J0ZWQiLCJuYXZpZ2F0b3IiLCJtYXhUb3VjaFBvaW50cyIsIl9wb2ludGVyRXZlbnQiLCJQb2ludGVyRXZlbnQiLCJNU1BvaW50ZXJFdmVudCIsIl9hZGRFdmVudExpc3RlbmVycyIsIl9zbGlkZSIsIm5leHRXaGVuVmlzaWJsZSIsImN5Y2xlIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwidmlzaWJpbGl0eVN0YXRlIiwiYWN0aXZlSW5kZXgiLCJfZ2V0SXRlbUluZGV4IiwiZGlyZWN0aW9uIiwiX2hhbmRsZVN3aXBlIiwiYWJzRGVsdGF4IiwiYWJzIiwiX3RoaXMyIiwiX2tleWRvd24iLCJfYWRkVG91Y2hFdmVudExpc3RlbmVycyIsIl90aGlzMyIsIm1vdmUiLCJ0YWdOYW1lIiwiX2dldEl0ZW1CeURpcmVjdGlvbiIsImlzTmV4dERpcmVjdGlvbiIsImlzUHJldkRpcmVjdGlvbiIsImxhc3RJdGVtSW5kZXgiLCJpdGVtSW5kZXgiLCJfdHJpZ2dlclNsaWRlRXZlbnQiLCJldmVudERpcmVjdGlvbk5hbWUiLCJ0YXJnZXRJbmRleCIsImZyb21JbmRleCIsInNsaWRlRXZlbnQiLCJmcm9tIiwiX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQiLCJpbmRpY2F0b3JzIiwibmV4dEluZGljYXRvciIsImRpcmVjdGlvbmFsQ2xhc3NOYW1lIiwib3JkZXJDbGFzc05hbWUiLCJfdGhpczQiLCJhY3RpdmVFbGVtZW50SW5kZXgiLCJuZXh0RWxlbWVudCIsIm5leHRFbGVtZW50SW5kZXgiLCJpc0N5Y2xpbmciLCJzbGlkRXZlbnQiLCJuZXh0RWxlbWVudEludGVydmFsIiwiZGVmYXVsdEludGVydmFsIiwiYWN0aW9uIiwicmlkZSIsIl9kYXRhQXBpQ2xpY2tIYW5kbGVyIiwic2xpZGVJbmRleCIsImNhcm91c2VscyIsIiRjYXJvdXNlbCIsIk5BTUUkMyIsIkpRVUVSWV9OT19DT05GTElDVCQzIiwiRGVmYXVsdCQxIiwiRGVmYXVsdFR5cGUkMSIsIkV2ZW50JDMiLCJTSE9XIiwiU0hPV04iLCJISURFIiwiSElEREVOIiwiQ2xhc3NOYW1lJDMiLCJEaW1lbnNpb24iLCJTZWxlY3RvciQzIiwiQUNUSVZFUyIsIkRBVEFfVE9HR0xFIiwiQ29sbGFwc2UiLCJfaXNUcmFuc2l0aW9uaW5nIiwiX3RyaWdnZXJBcnJheSIsInRvZ2dsZUxpc3QiLCJmaWx0ZXJFbGVtZW50IiwiZm91bmRFbGVtIiwiX3NlbGVjdG9yIiwiX3BhcmVudCIsIl9nZXRQYXJlbnQiLCJfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzIiwiYWN0aXZlcyIsImFjdGl2ZXNEYXRhIiwic3RhcnRFdmVudCIsIl9nZXREaW1lbnNpb24iLCJzZXRUcmFuc2l0aW9uaW5nIiwic2Nyb2xsU2l6ZSIsInRyaWdnZXJBcnJheUxlbmd0aCIsImlzVHJhbnNpdGlvbmluZyIsIl9nZXRUYXJnZXRGcm9tRWxlbWVudCIsInRyaWdnZXJBcnJheSIsImlzT3BlbiIsIiR0aGlzIiwiJHRyaWdnZXIiLCIkdGFyZ2V0IiwiTkFNRSQ0IiwiSlFVRVJZX05PX0NPTkZMSUNUJDQiLCJSRUdFWFBfS0VZRE9XTiIsIkFSUk9XX1VQX0tFWUNPREUiLCJFdmVudCQ0IiwiQ0xJQ0siLCJLRVlET1dOX0RBVEFfQVBJIiwiS0VZVVBfREFUQV9BUEkiLCJDbGFzc05hbWUkNCIsIlNlbGVjdG9yJDQiLCJBdHRhY2htZW50TWFwIiwiRGVmYXVsdCQyIiwiZmxpcCIsImJvdW5kYXJ5IiwicmVmZXJlbmNlIiwiRGVmYXVsdFR5cGUkMiIsIkRyb3Bkb3duIiwiX3BvcHBlciIsIl9tZW51IiwiX2dldE1lbnVFbGVtZW50IiwiX2luTmF2YmFyIiwiX2RldGVjdE5hdmJhciIsIl9nZXRQYXJlbnRGcm9tRWxlbWVudCIsImlzQWN0aXZlIiwiX2NsZWFyTWVudXMiLCJzaG93RXZlbnQiLCJyZWZlcmVuY2VFbGVtZW50IiwiX2dldFBvcHBlckNvbmZpZyIsImhpZGVFdmVudCIsInNjaGVkdWxlVXBkYXRlIiwiX2dldFBsYWNlbWVudCIsIiRwYXJlbnREcm9wZG93biIsInBsYWNlbWVudCIsIl9nZXRPZmZzZXQiLCJvZmZzZXRzIiwicG9wcGVyQ29uZmlnIiwibW9kaWZpZXJzIiwicHJldmVudE92ZXJmbG93IiwiYm91bmRhcmllc0VsZW1lbnQiLCJhcHBseVN0eWxlIiwidG9nZ2xlcyIsImNsaWNrRXZlbnQiLCJkcm9wZG93bk1lbnUiLCJfZGF0YUFwaUtleWRvd25IYW5kbGVyIiwiaXRlbXMiLCJKUVVFUllfTk9fQ09ORkxJQ1QkNSIsIkRlZmF1bHQkMyIsImJhY2tkcm9wIiwiRGVmYXVsdFR5cGUkMyIsIkV2ZW50JDUiLCJGT0NVU0lOIiwiUkVTSVpFIiwiQ0xJQ0tfRElTTUlTUyIsIktFWURPV05fRElTTUlTUyIsIk1PVVNFVVBfRElTTUlTUyIsIk1PVVNFRE9XTl9ESVNNSVNTIiwiQ2xhc3NOYW1lJDUiLCJTZWxlY3RvciQ1IiwiRElBTE9HIiwiTU9EQUxfQk9EWSIsIkRBVEFfRElTTUlTUyIsIkZJWEVEX0NPTlRFTlQiLCJTVElDS1lfQ09OVEVOVCIsIk1vZGFsIiwiX2RpYWxvZyIsIl9iYWNrZHJvcCIsIl9pc1Nob3duIiwiX2lzQm9keU92ZXJmbG93aW5nIiwiX2lnbm9yZUJhY2tkcm9wQ2xpY2siLCJfc2Nyb2xsYmFyV2lkdGgiLCJfY2hlY2tTY3JvbGxiYXIiLCJfc2V0U2Nyb2xsYmFyIiwiX2FkanVzdERpYWxvZyIsIl9zZXRFc2NhcGVFdmVudCIsIl9zZXRSZXNpemVFdmVudCIsIl9zaG93QmFja2Ryb3AiLCJfc2hvd0VsZW1lbnQiLCJ0cmFuc2l0aW9uIiwiX2hpZGVNb2RhbCIsImh0bWxFbGVtZW50IiwiaGFuZGxlVXBkYXRlIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsIl9lbmZvcmNlRm9jdXMiLCJzaG93bkV2ZW50IiwidHJhbnNpdGlvbkNvbXBsZXRlIiwiX3RoaXM1IiwiX3RoaXM2IiwiX3RoaXM3IiwiX3Jlc2V0QWRqdXN0bWVudHMiLCJfcmVzZXRTY3JvbGxiYXIiLCJfcmVtb3ZlQmFja2Ryb3AiLCJfdGhpczgiLCJiYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbiIsImNhbGxiYWNrUmVtb3ZlIiwiX2JhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uIiwiaXNNb2RhbE92ZXJmbG93aW5nIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJpbm5lcldpZHRoIiwiX2dldFNjcm9sbGJhcldpZHRoIiwiX3RoaXM5IiwiZml4ZWRDb250ZW50Iiwic3RpY2t5Q29udGVudCIsImFjdHVhbFBhZGRpbmciLCJjYWxjdWxhdGVkUGFkZGluZyIsImFjdHVhbE1hcmdpbiIsImNhbGN1bGF0ZWRNYXJnaW4iLCJzY3JvbGxEaXYiLCJzY3JvbGxiYXJXaWR0aCIsImNsaWVudFdpZHRoIiwiX3RoaXMxMCIsInVyaUF0dHJzIiwiRGVmYXVsdFdoaXRlbGlzdCIsImFyZWEiLCJiciIsImVtIiwiaHIiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJpbWciLCJsaSIsIm9sIiwicHJlIiwic21hbGwiLCJzcGFuIiwic3ViIiwic3VwIiwic3Ryb25nIiwidSIsInVsIiwiU0FGRV9VUkxfUEFUVEVSTiIsIkRBVEFfVVJMX1BBVFRFUk4iLCJzYW5pdGl6ZUh0bWwiLCJ1bnNhZmVIdG1sIiwid2hpdGVMaXN0Iiwic2FuaXRpemVGbiIsImNyZWF0ZWREb2N1bWVudCIsIndoaXRlbGlzdEtleXMiLCJfbG9vcCIsImVsTmFtZSIsImF0dHJpYnV0ZUxpc3QiLCJ3aGl0ZWxpc3RlZEF0dHJpYnV0ZXMiLCJhbGxvd2VkQXR0cmlidXRlTGlzdCIsImF0dHJOYW1lIiwicmVnRXhwIiwiYXR0clJlZ2V4IiwiYWxsb3dlZEF0dHJpYnV0ZSIsIk5BTUUkNiIsIkpRVUVSWV9OT19DT05GTElDVCQ2IiwiQlNDTFNfUFJFRklYX1JFR0VYIiwiRElTQUxMT1dFRF9BVFRSSUJVVEVTIiwiRGVmYXVsdFR5cGUkNCIsInRlbXBsYXRlIiwidGl0bGUiLCJmYWxsYmFja1BsYWNlbWVudCIsInNhbml0aXplIiwiQXR0YWNobWVudE1hcCQxIiwiQVVUTyIsIlRPUCIsIlJJR0hUIiwiQk9UVE9NIiwiTEVGVCIsIkRlZmF1bHQkNCIsIkhvdmVyU3RhdGUiLCJFdmVudCQ2IiwiSU5TRVJURUQiLCJGT0NVU09VVCIsIkNsYXNzTmFtZSQ2IiwiU2VsZWN0b3IkNiIsIlRyaWdnZXIiLCJUb29sdGlwIiwiX2lzRW5hYmxlZCIsIl90aW1lb3V0IiwiX2hvdmVyU3RhdGUiLCJfYWN0aXZlVHJpZ2dlciIsInRpcCIsIl9zZXRMaXN0ZW5lcnMiLCJlbmFibGUiLCJ0b2dnbGVFbmFibGVkIiwiZGF0YUtleSIsIkRBVEFfS0VZIiwiX2dldERlbGVnYXRlQ29uZmlnIiwiX2lzV2l0aEFjdGl2ZVRyaWdnZXIiLCJfZW50ZXIiLCJfbGVhdmUiLCJnZXRUaXBFbGVtZW50IiwiRVZFTlRfS0VZIiwiaXNXaXRoQ29udGVudCIsInNoYWRvd1Jvb3QiLCJpc0luVGhlRG9tIiwidGlwSWQiLCJOQU1FIiwic2V0Q29udGVudCIsImF0dGFjaG1lbnQiLCJfZ2V0QXR0YWNobWVudCIsImFkZEF0dGFjaG1lbnRDbGFzcyIsIl9nZXRDb250YWluZXIiLCJiZWhhdmlvciIsImFycm93Iiwib25DcmVhdGUiLCJvcmlnaW5hbFBsYWNlbWVudCIsIl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UiLCJvblVwZGF0ZSIsIl9maXhUcmFuc2l0aW9uIiwicHJldkhvdmVyU3RhdGUiLCJfY2xlYW5UaXBDbGFzcyIsImdldFRpdGxlIiwiQ0xBU1NfUFJFRklYIiwic2V0RWxlbWVudENvbnRlbnQiLCJldmVudEluIiwiZXZlbnRPdXQiLCJfZml4VGl0bGUiLCJ0aXRsZVR5cGUiLCJkYXRhQXR0cmlidXRlcyIsIiR0aXAiLCJ0YWJDbGFzcyIsInBvcHBlckRhdGEiLCJwb3BwZXJJbnN0YW5jZSIsImluc3RhbmNlIiwicG9wcGVyIiwiaW5pdENvbmZpZ0FuaW1hdGlvbiIsIk5BTUUkNyIsIkpRVUVSWV9OT19DT05GTElDVCQ3IiwiQlNDTFNfUFJFRklYX1JFR0VYJDEiLCJEZWZhdWx0JDUiLCJEZWZhdWx0VHlwZSQ1IiwiQ2xhc3NOYW1lJDciLCJTZWxlY3RvciQ3IiwiRXZlbnQkNyIsIlBvcG92ZXIiLCJfVG9vbHRpcCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9fcHJvdG9fXyIsIl9nZXRDb250ZW50IiwiQ0xBU1NfUFJFRklYJDEiLCJOQU1FJDgiLCJKUVVFUllfTk9fQ09ORkxJQ1QkOCIsIkRlZmF1bHQkNiIsIkRlZmF1bHRUeXBlJDYiLCJFdmVudCQ4IiwiQUNUSVZBVEUiLCJTQ1JPTEwiLCJDbGFzc05hbWUkOCIsIlNlbGVjdG9yJDgiLCJEQVRBX1NQWSIsIk5BVl9MSVNUX0dST1VQIiwiTkFWX0xJTktTIiwiTkFWX0lURU1TIiwiTElTVF9JVEVNUyIsIkRST1BET1dOIiwiRFJPUERPV05fSVRFTVMiLCJEUk9QRE9XTl9UT0dHTEUiLCJPZmZzZXRNZXRob2QiLCJTY3JvbGxTcHkiLCJfc2Nyb2xsRWxlbWVudCIsIl9vZmZzZXRzIiwiX3RhcmdldHMiLCJfYWN0aXZlVGFyZ2V0IiwiX3Njcm9sbEhlaWdodCIsIl9wcm9jZXNzIiwiYXV0b01ldGhvZCIsIm9mZnNldE1ldGhvZCIsIm9mZnNldEJhc2UiLCJfZ2V0U2Nyb2xsVG9wIiwiX2dldFNjcm9sbEhlaWdodCIsInRhcmdldFNlbGVjdG9yIiwidGFyZ2V0QkNSIiwiaXRlbSIsIl9nZXRPZmZzZXRIZWlnaHQiLCJpbm5lckhlaWdodCIsIm1heFNjcm9sbCIsIl9hY3RpdmF0ZSIsIl9jbGVhciIsInF1ZXJpZXMiLCIkbGluayIsInNjcm9sbFNweXMiLCIkc3B5IiwiSlFVRVJZX05PX0NPTkZMSUNUJDkiLCJFdmVudCQ5IiwiQ2xhc3NOYW1lJDkiLCJTZWxlY3RvciQ5IiwiVGFiIiwicHJldmlvdXMiLCJsaXN0RWxlbWVudCIsIml0ZW1TZWxlY3RvciIsImhpZGRlbkV2ZW50IiwiX3RyYW5zaXRpb25Db21wbGV0ZSIsImRyb3Bkb3duQ2hpbGQiLCJkcm9wZG93bkVsZW1lbnQiLCJkcm9wZG93blRvZ2dsZUxpc3QiLCJKUVVFUllfTk9fQ09ORkxJQ1QkYSIsIkV2ZW50JGEiLCJDbGFzc05hbWUkYSIsIkRlZmF1bHRUeXBlJDciLCJhdXRvaGlkZSIsIkRlZmF1bHQkNyIsIlNlbGVjdG9yJGEiLCJUb2FzdCIsIndpdGhvdXRUaW1lb3V0IiwiX2Nsb3NlIiwiU2Nyb2xsc3B5IiwiaXNCcm93c2VyIiwidGltZW91dER1cmF0aW9uIiwibG9uZ2VyVGltZW91dEJyb3dzZXJzIiwidXNlckFnZW50IiwiZGVib3VuY2UiLCJQcm9taXNlIiwic2NoZWR1bGVkIiwiZnVuY3Rpb25Ub0NoZWNrIiwiZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IiwiZ2V0UGFyZW50Tm9kZSIsImdldFNjcm9sbFBhcmVudCIsIl9nZXRTdHlsZUNvbXB1dGVkUHJvcCIsImdldFJlZmVyZW5jZU5vZGUiLCJyZWZlcmVuY2VOb2RlIiwiaXNJRTExIiwiTVNJbnB1dE1ldGhvZENvbnRleHQiLCJkb2N1bWVudE1vZGUiLCJpc0lFMTAiLCJpc0lFIiwiZ2V0T2Zmc2V0UGFyZW50Iiwibm9PZmZzZXRQYXJlbnQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJnZXRSb290IiwiZmluZENvbW1vbk9mZnNldFBhcmVudCIsImVsZW1lbnQxIiwiZWxlbWVudDIiLCJvcmRlciIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsInJhbmdlIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInNldEVuZCIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwiZWxlbWVudDFyb290IiwiZ2V0U2Nyb2xsIiwidXBwZXJTaWRlIiwic2Nyb2xsaW5nRWxlbWVudCIsImdldEJvcmRlcnNTaXplIiwiYXhpcyIsInNpZGVBIiwic2lkZUIiLCJnZXRTaXplIiwiY29tcHV0ZWRTdHlsZSIsImdldFdpbmRvd1NpemVzIiwiY2xhc3NDYWxsQ2hlY2siLCJjcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImdldENsaWVudFJlY3QiLCJzaXplcyIsImhvcml6U2Nyb2xsYmFyIiwidmVydFNjcm9sbGJhciIsImdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSIsImZpeGVkUG9zaXRpb24iLCJpc0hUTUwiLCJjaGlsZHJlblJlY3QiLCJwYXJlbnRSZWN0Iiwic2Nyb2xsUGFyZW50IiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJMZWZ0V2lkdGgiLCJtb2RpZmllciIsImluY2x1ZGVTY3JvbGwiLCJnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50IiwicGFyZW50RWxlbWVudCIsImdldEJvdW5kYXJpZXMiLCJib3VuZGFyaWVzIiwiZXhjbHVkZVNjcm9sbCIsInJlbGF0aXZlT2Zmc2V0IiwiZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlIiwiYm91bmRhcmllc05vZGUiLCJpc0ZpeGVkIiwiX2dldFdpbmRvd1NpemVzIiwiaXNQYWRkaW5nTnVtYmVyIiwiY29tcHV0ZUF1dG9QbGFjZW1lbnQiLCJyZWZSZWN0IiwicmVjdHMiLCJzb3J0ZWRBcmVhcyIsIl9yZWYiLCJmaWx0ZXJlZEFyZWFzIiwiX3JlZjIiLCJjb21wdXRlZFBsYWNlbWVudCIsInZhcmlhdGlvbiIsImdldFJlZmVyZW5jZU9mZnNldHMiLCJnZXRPdXRlclNpemVzIiwieCIsInkiLCJnZXRPcHBvc2l0ZVBsYWNlbWVudCIsImdldFBvcHBlck9mZnNldHMiLCJyZWZlcmVuY2VPZmZzZXRzIiwicG9wcGVyUmVjdCIsInBvcHBlck9mZnNldHMiLCJpc0hvcml6IiwibWFpblNpZGUiLCJzZWNvbmRhcnlTaWRlIiwibWVhc3VyZW1lbnQiLCJzZWNvbmRhcnlNZWFzdXJlbWVudCIsInJ1bk1vZGlmaWVycyIsImVuZHMiLCJmaW5kSW5kZXgiLCJpc0Rlc3Ryb3llZCIsImFycm93U3R5bGVzIiwiZmxpcHBlZCIsInBvc2l0aW9uRml4ZWQiLCJpc0NyZWF0ZWQiLCJpc01vZGlmaWVyRW5hYmxlZCIsIm1vZGlmaWVyTmFtZSIsInNvbWUiLCJnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUiLCJwcmVmaXhlcyIsInVwcGVyUHJvcCIsInRvQ2hlY2siLCJ3aWxsQ2hhbmdlIiwiZGlzYWJsZUV2ZW50TGlzdGVuZXJzIiwicmVtb3ZlT25EZXN0cm95IiwiZ2V0V2luZG93Iiwic2V0dXBFdmVudExpc3RlbmVycyIsInVwZGF0ZUJvdW5kIiwicGFzc2l2ZSIsInNjcm9sbEVsZW1lbnQiLCJhdHRhY2hUb1Njcm9sbFBhcmVudHMiLCJzY3JvbGxQYXJlbnRzIiwiaXNCb2R5IiwiZXZlbnRzRW5hYmxlZCIsImVuYWJsZUV2ZW50TGlzdGVuZXJzIiwic2V0U3R5bGVzIiwiaXNGaXJlZm94IiwiaXNNb2RpZmllclJlcXVpcmVkIiwicmVxdWVzdGluZ05hbWUiLCJyZXF1ZXN0ZWROYW1lIiwicmVxdWVzdGluZyIsImlzUmVxdWlyZWQiLCJfcmVxdWVzdGluZyIsInJlcXVlc3RlZCIsInBsYWNlbWVudHMiLCJ2YWxpZFBsYWNlbWVudHMiLCJjbG9ja3dpc2UiLCJjb3VudGVyIiwiQkVIQVZJT1JTIiwiRkxJUCIsIkNMT0NLV0lTRSIsIkNPVU5URVJDTE9DS1dJU0UiLCJwYXJzZU9mZnNldCIsImJhc2VQbGFjZW1lbnQiLCJ1c2VIZWlnaHQiLCJmcmFnbWVudHMiLCJmcmFnIiwiZGl2aWRlciIsInNlYXJjaCIsInNwbGl0UmVnZXgiLCJvcHMiLCJvcCIsIm1lcmdlV2l0aFByZXZpb3VzIiwicmVkdWNlIiwidG9WYWx1ZSIsImluZGV4MiIsIkRlZmF1bHRzIiwic2hpZnR2YXJpYXRpb24iLCJfZGF0YSRvZmZzZXRzIiwiaXNWZXJ0aWNhbCIsInNpZGUiLCJzaGlmdE9mZnNldHMiLCJ0cmFuc2Zvcm1Qcm9wIiwicG9wcGVyU3R5bGVzIiwidHJhbnNmb3JtIiwicHJpb3JpdHkiLCJwcmltYXJ5IiwiZXNjYXBlV2l0aFJlZmVyZW5jZSIsInNlY29uZGFyeSIsImtlZXBUb2dldGhlciIsImZsb29yIiwib3BTaWRlIiwiX2RhdGEkb2Zmc2V0cyRhcnJvdyIsImFycm93RWxlbWVudCIsInNpZGVDYXBpdGFsaXplZCIsImFsdFNpZGUiLCJhcnJvd0VsZW1lbnRTaXplIiwiY2VudGVyIiwicG9wcGVyTWFyZ2luU2lkZSIsInBvcHBlckJvcmRlclNpZGUiLCJzaWRlVmFsdWUiLCJwbGFjZW1lbnRPcHBvc2l0ZSIsImZsaXBPcmRlciIsInJlZk9mZnNldHMiLCJvdmVybGFwc1JlZiIsIm92ZXJmbG93c0xlZnQiLCJvdmVyZmxvd3NSaWdodCIsIm92ZXJmbG93c1RvcCIsIm92ZXJmbG93c0JvdHRvbSIsIm92ZXJmbG93c0JvdW5kYXJpZXMiLCJmbGlwcGVkVmFyaWF0aW9uQnlSZWYiLCJmbGlwVmFyaWF0aW9ucyIsImZsaXBwZWRWYXJpYXRpb25CeUNvbnRlbnQiLCJmbGlwVmFyaWF0aW9uc0J5Q29udGVudCIsImZsaXBwZWRWYXJpYXRpb24iLCJnZXRPcHBvc2l0ZVZhcmlhdGlvbiIsImlubmVyIiwic3VidHJhY3RMZW5ndGgiLCJib3VuZCIsImNvbXB1dGVTdHlsZSIsImxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiIsImdwdUFjY2VsZXJhdGlvbiIsIm9mZnNldFBhcmVudFJlY3QiLCJzaG91bGRSb3VuZCIsIm5vUm91bmQiLCJyZWZlcmVuY2VXaWR0aCIsInBvcHBlcldpZHRoIiwiaXNWYXJpYXRpb24iLCJob3Jpem9udGFsVG9JbnRlZ2VyIiwidmVydGljYWxUb0ludGVnZXIiLCJnZXRSb3VuZGVkT2Zmc2V0cyIsImRldmljZVBpeGVsUmF0aW8iLCJwcmVmaXhlZFByb3BlcnR5IiwiaW52ZXJ0VG9wIiwiaW52ZXJ0TGVmdCIsIm9uTG9hZCIsIm1vZGlmaWVyT3B0aW9ucyIsIlV0aWxzIiwiUG9wcGVyVXRpbHMiLCJOYU4iLCJmIiwiYXNjZW5kaW5nIiwibG8iLCJoaSIsIm1pZCIsImFzY2VuZGluZ0Jpc2VjdCIsImJpc2VjdG9yIiwiYmlzZWN0UmlnaHQiLCJiaXNlY3QiLCJ2YWx1ZW9mIiwiZTEwIiwic3FydCIsImU1IiwiZTIiLCJ0aWNrcyIsInRpY2tJbmNyZW1lbnQiLCJwb3dlciIsIkxOMTAiLCJwb3ciLCJ0aWNrU3RlcCIsInN0ZXAwIiwic3RlcDEiLCJMTjIiLCJpZGVudGl0eSIsImRvbWFpbiIsInRocmVzaG9sZCIsInN0dXJnZXMiLCJoaXN0b2dyYW0iLCJ4eiIsIngwIiwieDEiLCJ0eiIsImJpbiIsImJpbnMiLCJjb25zdGFudCIsInRocmVzaG9sZHMiLCJlcHNpbG9uIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJiYW5kd2lkdGgiLCJlbnRlcmluZyIsIl9fYXhpcyIsIm9yaWVudCIsInRpY2tBcmd1bWVudHMiLCJ0aWNrVmFsdWVzIiwidGlja0Zvcm1hdCIsInRpY2tTaXplSW5uZXIiLCJ0aWNrU2l6ZU91dGVyIiwidGlja1BhZGRpbmciLCJrIiwiZm9ybWF0Iiwic3BhY2luZyIsInJhbmdlMCIsInJhbmdlMSIsInBhdGgiLCJzZWxlY3RBbGwiLCJ0aWNrRXhpdCIsImV4aXQiLCJ0aWNrRW50ZXIiLCJlbnRlciIsImxpbmUiLCJ0aWNrU2l6ZSIsImF4aXNCb3R0b20iLCJheGlzTGVmdCIsIkRpc3BhdGNoIiwicGFyc2VUeXBlbmFtZXMiLCJ0eXBlbmFtZXMiLCJ0eXBlbmFtZSIsIlQiLCJ4aHRtbCIsInN2ZyIsInhsaW5rIiwieG1sbnMiLCJzcGFjZSIsImxvY2FsIiwiY3JlYXRvckluaGVyaXQiLCJ1cmkiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdG9yRml4ZWQiLCJub25lIiwiRW50ZXJOb2RlIiwiZGF0dW0iLCJfbmV4dCIsIl9fZGF0YV9fIiwiY2hpbGQiLCJrZXlQcmVmaXgiLCJiaW5kSW5kZXgiLCJncm91cCIsImdyb3VwTGVuZ3RoIiwiZGF0YUxlbmd0aCIsImJpbmRLZXkiLCJrZXlWYWx1ZSIsIm5vZGVCeUtleVZhbHVlIiwia2V5VmFsdWVzIiwiYXR0clJlbW92ZSIsImF0dHJSZW1vdmVOUyIsInJlbW92ZUF0dHJpYnV0ZU5TIiwiYXR0ckNvbnN0YW50IiwiYXR0ckNvbnN0YW50TlMiLCJzZXRBdHRyaWJ1dGVOUyIsImF0dHJGdW5jdGlvbiIsImF0dHJGdW5jdGlvbk5TIiwic3R5bGVSZW1vdmUiLCJyZW1vdmVQcm9wZXJ0eSIsInN0eWxlQ29uc3RhbnQiLCJzdHlsZUZ1bmN0aW9uIiwic3R5bGVWYWx1ZSIsInByb3BlcnR5UmVtb3ZlIiwicHJvcGVydHlDb25zdGFudCIsInByb3BlcnR5RnVuY3Rpb24iLCJjbGFzc0FycmF5IiwiQ2xhc3NMaXN0IiwiX25vZGUiLCJfbmFtZXMiLCJjbGFzc2VkQWRkIiwiY2xhc3NlZFJlbW92ZSIsImNsYXNzZWRUcnVlIiwiY2xhc3NlZEZhbHNlIiwiY2xhc3NlZEZ1bmN0aW9uIiwidGV4dFJlbW92ZSIsInRleHRDb25zdGFudCIsInRleHRGdW5jdGlvbiIsImh0bWxSZW1vdmUiLCJodG1sQ29uc3RhbnQiLCJodG1sRnVuY3Rpb24iLCJyYWlzZSIsImxvd2VyIiwicHJldmlvdXNTaWJsaW5nIiwiY29uc3RhbnROdWxsIiwic2VsZWN0aW9uX2Nsb25lU2hhbGxvdyIsInNlbGVjdGlvbl9jbG9uZURlZXAiLCJmaWx0ZXJFdmVudHMiLCJmaWx0ZXJDb250ZXh0TGlzdGVuZXIiLCJjb250ZXh0TGlzdGVuZXIiLCJldmVudDEiLCJldmVudDAiLCJvblJlbW92ZSIsIl9fb24iLCJjYXB0dXJlIiwib25BZGQiLCJDdXN0b21FdmVudCIsImRpc3BhdGNoQ29uc3RhbnQiLCJkaXNwYXRjaEZ1bmN0aW9uIiwiU2VsZWN0aW9uIiwiX2dyb3VwcyIsIl9wYXJlbnRzIiwic3ViZ3JvdXBzIiwic3Vibm9kZSIsInN1Ymdyb3VwIiwic2VsZWN0b3JBbGwiLCJlbnRlckdyb3VwIiwidXBkYXRlR3JvdXAiLCJpMCIsImkxIiwiX2V4aXQiLCJzcGFyc2UiLCJvbmVudGVyIiwib251cGRhdGUiLCJvbmV4aXQiLCJncm91cHMwIiwiZ3JvdXBzMSIsIm0wIiwibTEiLCJtZXJnZXMiLCJncm91cDAiLCJncm91cDEiLCJjb21wYXJlTm9kZSIsInNvcnRncm91cHMiLCJzb3J0Z3JvdXAiLCJnZXRBdHRyaWJ1dGVOUyIsImNsYXNzZWQiLCJjcmVhdG9yIiwibmV4dElkIiwiTG9jYWwiLCJEcmFnRXZlbnQiLCJzdWJqZWN0IiwiZHgiLCJkeSIsImRlZmluaXRpb24iLCJDb2xvciIsInJlSSIsInJlTiIsInJlUCIsInJlSGV4IiwicmVSZ2JJbnRlZ2VyIiwicmVSZ2JQZXJjZW50IiwicmVSZ2JhSW50ZWdlciIsInJlUmdiYVBlcmNlbnQiLCJyZUhzbFBlcmNlbnQiLCJyZUhzbGFQZXJjZW50IiwibmFtZWQiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJrZ3JleSIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZCIsImdvbGRlbnJvZCIsImdyYXkiLCJncmVlbiIsImdyZWVueWVsbG93IiwiZ3JleSIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsImluZGlnbyIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlciIsImxhdmVuZGVyYmx1c2giLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibGltZWdyZWVuIiwibGluZW4iLCJtYWdlbnRhIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInJlYmVjY2FwdXJwbGUiLCJyZWQiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRhbiIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3ciLCJ5ZWxsb3dncmVlbiIsImNvbG9yX2Zvcm1hdEhleCIsInJnYiIsImZvcm1hdEhleCIsImNvbG9yX2Zvcm1hdFJnYiIsImZvcm1hdFJnYiIsInJnYm4iLCJSZ2IiLCJyZ2JhIiwiaHNsYSIsInJnYkNvbnZlcnQiLCJyZ2JfZm9ybWF0SGV4IiwiaGV4IiwicmdiX2Zvcm1hdFJnYiIsImgiLCJIc2wiLCJoc2xDb252ZXJ0IiwiaHNsIiwiaHNsMnJnYiIsIm0yIiwiYmFzaXMiLCJ0MSIsInYwIiwidjEiLCJ2MiIsInYzIiwidDIiLCJ0MyIsImRlZmluZSIsImNoYW5uZWxzIiwiZGlzcGxheWFibGUiLCJmb3JtYXRIc2wiLCJicmlnaHRlciIsImRhcmtlciIsImdhbW1hIiwibm9nYW1tYSIsImV4cG9uZW50aWFsIiwiY29sb3IiLCJyZ2JHYW1tYSIsInJnYlNwbGluZSIsInNwbGluZSIsImNvbG9ycyIsIm5iIiwibmEiLCJzZXRUaW1lIiwicmVBIiwicmVCIiwiY3NzTm9kZSIsImNzc1Jvb3QiLCJjc3NWaWV3Iiwic3ZnTm9kZSIsImFtIiwiYm0iLCJicyIsImJpIiwibGFzdEluZGV4IiwicSIsInZhbHVlT2YiLCJkZWdyZWVzIiwicm90YXRlIiwic2tld1giLCJzY2FsZVgiLCJzY2FsZVkiLCJhdGFuMiIsImF0YW4iLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJ4YSIsInlhIiwieGIiLCJ5YiIsImludGVycG9sYXRlVHJhbnNmb3JtQ3NzIiwiZGVjb21wb3NlIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmciLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJtYXRyaXgiLCJTUVJUMiIsImh1ZSIsImRlZzJyYWQiLCJyYWQyZGVnIiwiWG4iLCJZbiIsIlpuIiwibGFiQ29udmVydCIsIkxhYiIsIkhjbCIsImhjbDJsYWIiLCJ6IiwicmdiMmxyZ2IiLCJ4eXoybGFiIiwibGFiIiwibGFiMnh5eiIsImxyZ2IycmdiIiwiaGNsQ29udmVydCIsImhjbCIsInNpbiIsIkEiLCJDIiwiRUQiLCJFQiIsIkJDX0RBIiwiQ3ViZWhlbGl4IiwiYmwiLCJjdWJlaGVsaXhDb252ZXJ0IiwiY3ViZWhlbGl4R2FtbWEiLCJjdWJlaGVsaXgiLCJjb3NoIiwic2luaCIsInRhc2tIZWFkIiwidGFza1RhaWwiLCJwb2tlRGVsYXkiLCJjbG9ja0xhc3QiLCJjbG9ja05vdyIsImNsb2NrU2tldyIsImNsb2NrIiwicGVyZm9ybWFuY2UiLCJzZXRGcmFtZSIsImNsZWFyTm93IiwiVGltZXIiLCJfY2FsbCIsIl90aW1lIiwicmVzdGFydCIsIndha2UiLCJ0aW1lckZsdXNoIiwidDAiLCJJbmZpbml0eSIsInNsZWVwIiwibmFwIiwicG9rZSIsImVsYXBzZWQiLCJlbXB0eU9uIiwiZW1wdHlUd2VlbiIsIkNSRUFURUQiLCJTQ0hFRFVMRUQiLCJTVEFSVElORyIsIlNUQVJURUQiLCJSVU5OSU5HIiwiRU5ESU5HIiwiRU5ERUQiLCJzY2hlZHVsZXMiLCJfX3RyYW5zaXRpb24iLCJlYXNlIiwidGltaW5nIiwidHdlZW5SZW1vdmUiLCJ0d2VlbjAiLCJ0d2VlbjEiLCJ0d2VlbkZ1bmN0aW9uIiwidHdlZW5WYWx1ZSIsIl9pZCIsImludGVycG9sYXRlIiwidmFsdWUxIiwic3RyaW5nMDAiLCJpbnRlcnBvbGF0ZTAiLCJzdHJpbmcxIiwic3RyaW5nMCIsInN0cmluZzEwIiwiYXR0clR3ZWVuTlMiLCJhdHRySW50ZXJwb2xhdGVOUyIsIl92YWx1ZSIsImF0dHJUd2VlbiIsImF0dHJJbnRlcnBvbGF0ZSIsImRlbGF5RnVuY3Rpb24iLCJkZWxheUNvbnN0YW50IiwiZHVyYXRpb25GdW5jdGlvbiIsImR1cmF0aW9uQ29uc3RhbnQiLCJlYXNlQ29uc3RhbnQiLCJvbkZ1bmN0aW9uIiwib24wIiwib24xIiwic2l0IiwiZXZlcnkiLCJzdHlsZVR3ZWVuIiwic3R5bGVJbnRlcnBvbGF0ZSIsIlRyYW5zaXRpb24iLCJfbmFtZSIsIm5ld0lkIiwic2VsZWN0aW9uX3Byb3RvdHlwZSIsImluaGVyaXQiLCJpZDAiLCJpZDEiLCJzdHlsZU51bGwiLCJsaXN0ZW5lcjAiLCJzdHlsZU1heWJlUmVtb3ZlIiwiY2FuY2VsIiwiaW50ZXJydXB0IiwiY3VzdG9tIiwicG9seUluIiwiZXhwb25lbnQiLCJwb2x5T3V0IiwicG9seUluT3V0IiwiYmFja0luIiwib3ZlcnNob290IiwiYmFja091dCIsImJhY2tJbk91dCIsInRhdSIsImRlZmF1bHRUaW1pbmciLCJhc2luIiwiZWxhc3RpY0luIiwiYW1wbGl0dWRlIiwicGVyaW9kIiwiZWxhc3RpY091dCIsImVsYXN0aWNJbk91dCIsIm51bWJlcjEiLCJudW1iZXIyIiwidGF1RXBzaWxvbiIsIlBhdGgiLCJfeDAiLCJfeTAiLCJfeDEiLCJfeTEiLCJtb3ZlVG8iLCJjbG9zZVBhdGgiLCJsaW5lVG8iLCJxdWFkcmF0aWNDdXJ2ZVRvIiwieTEiLCJiZXppZXJDdXJ2ZVRvIiwieDIiLCJ5MiIsImFyY1RvIiwieTAiLCJ4MjEiLCJ5MjEiLCJ4MDEiLCJ5MDEiLCJsMDFfMiIsIngyMCIsInkyMCIsImwyMV8yIiwibDIwXzIiLCJsMjEiLCJsMDEiLCJhY29zIiwidDAxIiwidDIxIiwiYXJjIiwiYTAiLCJhMSIsImNjdyIsImN3IiwiZGEiLCJNYXAiLCJjbGVhciIsImVudHJpZXMiLCJTZXQiLCJFT0wiLCJFT0YiLCJRVU9URSIsIk5FV0xJTkUiLCJSRVRVUk4iLCJvYmplY3RDb252ZXJ0ZXIiLCJjb2x1bW5zIiwic3RyaW5naWZ5IiwiaW5mZXJDb2x1bW5zIiwicm93cyIsImNvbHVtblNldCIsInJvdyIsImNvbHVtbiIsInBhZCIsImZvcm1hdERhdGUiLCJkYXRlIiwieWVhciIsImhvdXJzIiwiZ2V0VVRDSG91cnMiLCJtaW51dGVzIiwiZ2V0VVRDTWludXRlcyIsInNlY29uZHMiLCJnZXRVVENTZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJyZUZvcm1hdCIsImRlbGltaXRlciIsIkRFTElNSVRFUiIsInBhcnNlUm93cyIsIk4iLCJJIiwiZW9mIiwiZW9sIiwicHJlZm9ybWF0Qm9keSIsImZvcm1hdFZhbHVlIiwiZm9ybWF0Um93IiwiY29udmVydCIsImN1c3RvbUNvbnZlcnRlciIsImZvcm1hdEJvZHkiLCJmb3JtYXRSb3dzIiwiY3N2IiwiZHN2IiwiY3N2UGFyc2UiLCJ0c3YiLCJ0c3ZQYXJzZSIsIm9rIiwiZmV0Y2giLCJkc3ZQYXJzZSIsInJlc3BvbnNlSnNvbiIsInBhcnNlciIsInRyZWUiLCJ4bSIsInltIiwieHAiLCJ5cCIsIl9yb290IiwibGVhZiIsIl94IiwiX3kiLCJxdWFkdHJlZSIsIlF1YWR0cmVlIiwiYWRkQWxsIiwibGVhZl9jb3B5IiwidHJlZVByb3RvIiwiY292ZXIiLCJ5eiIsInZpc2l0IiwiZXh0ZW50IiwieDMiLCJ5MyIsInF1YWRzIiwicmFkaXVzIiwiZDIiLCJyZXRhaW5lciIsInJlbW92ZUFsbCIsInZpc2l0QWZ0ZXIiLCJ0b0V4cG9uZW50aWFsIiwiY29lZmZpY2llbnQiLCJmb3JtYXREZWNpbWFsIiwicmUiLCJmb3JtYXRTcGVjaWZpZXIiLCJzcGVjaWZpZXIiLCJGb3JtYXRTcGVjaWZpZXIiLCJmaWxsIiwiYWxpZ24iLCJzaWduIiwic3ltYm9sIiwiemVybyIsImNvbW1hIiwicHJlY2lzaW9uIiwicHJlZml4RXhwb25lbnQiLCJvdXQiLCJ0b0ZpeGVkIiwidG9QcmVjaXNpb24iLCJmb3JtYXRSb3VuZGVkIiwibG9jYWxlIiwiZ3JvdXBpbmciLCJ0aG91c2FuZHMiLCJzdWJzdHJpbmciLCJjdXJyZW5jeVByZWZpeCIsImN1cnJlbmN5IiwiY3VycmVuY3lTdWZmaXgiLCJkZWNpbWFsIiwibnVtZXJhbHMiLCJmb3JtYXROdW1lcmFscyIsIm1pbnVzIiwibmFuIiwibmV3Rm9ybWF0IiwiZm9ybWF0VHlwZXMiLCJmb3JtYXRUeXBlIiwibWF5YmVTdWZmaXgiLCJ2YWx1ZVByZWZpeCIsInZhbHVlU3VmZml4IiwidmFsdWVOZWdhdGl2ZSIsImZvcm1hdFRyaW0iLCJmb3JtYXRQcmVmaXgiLCJzdW0iLCJoaWVyYXJjaHkiLCJjaGlsZHMiLCJ2YWx1ZWQiLCJkZWZhdWx0Q2hpbGRyZW4iLCJlYWNoQmVmb3JlIiwiY29tcHV0ZUhlaWdodCIsImNvcHlEYXRhIiwiZWFjaEFmdGVyIiwiYW5jZXN0b3IiLCJhTm9kZXMiLCJhbmNlc3RvcnMiLCJiTm9kZXMiLCJsZWFzdENvbW1vbkFuY2VzdG9yIiwiZGVzY2VuZGFudHMiLCJsZWF2ZXMiLCJsaW5rcyIsImNpcmNsZXMiLCJhcnJheSIsIkIiLCJlbmNsb3Nlc1dlYWsiLCJlbmNsb3NlQmFzaXMiLCJleHRlbmRCYXNpcyIsImVuY2xvc2VzV2Vha0FsbCIsImVuY2xvc2VzTm90IiwiZW5jbG9zZUJhc2lzMiIsImVuY2xvc2VCYXNpczMiLCJkciIsInIxIiwicjIiLCJyMjEiLCJyMyIsImEyIiwiYTMiLCJiMiIsImIzIiwiYzIiLCJjMyIsImQxIiwiZDMiLCJhYiIsInBsYWNlIiwiaW50ZXJzZWN0cyIsInNjb3JlIiwiY2lyY2xlIiwicGFja0VuY2xvc2UiLCJhYSIsImNhIiwic2oiLCJzayIsInBhY2siLCJlbmNsb3NlIiwib3B0aW9uYWwiLCJyZXF1aXJlZCIsImNvbnN0YW50WmVybyIsInJhZGl1c0xlYWYiLCJwYWNrQ2hpbGRyZW4iLCJ0cmFuc2xhdGVDaGlsZCIsInByZXJvb3QiLCJhbWJpZ3VvdXMiLCJkZWZhdWx0SWQiLCJkZWZhdWx0UGFyZW50SWQiLCJwYXJlbnRJZCIsIlRyZWVOb2RlIiwicGhpIiwic3F1YXJpZnlSYXRpbyIsInJhdGlvIiwic3VtVmFsdWUiLCJtaW5WYWx1ZSIsIm1heFZhbHVlIiwibmV3UmF0aW8iLCJtaW5SYXRpbyIsImFscGhhIiwiYmV0YSIsImRpY2UiLCJzcXVhcmlmeSIsInRpbGUiLCJwYWRkaW5nU3RhY2siLCJwYWRkaW5nSW5uZXIiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsInRyZWVtYXAiLCJwb3NpdGlvbk5vZGUiLCJwYWRkaW5nT3V0ZXIiLCJyZXNxdWFyaWZ5IiwiX3NxdWFyaWZ5IiwicmFuZG9tVW5pZm9ybSIsInNvdXJjZVJhbmRvbVVuaWZvcm0iLCJyYW5kb21Ob3JtYWwiLCJtdSIsInNpZ21hIiwic291cmNlUmFuZG9tTm9ybWFsIiwicmFuZG9tTG9nTm9ybWFsIiwibm9ybWFsIiwiZXhwIiwic291cmNlUmFuZG9tTG9nTm9ybWFsIiwicmFuZG9tSXJ3aW5IYWxsIiwic291cmNlUmFuZG9tSXJ3aW5IYWxsIiwicmFuZG9tQmF0ZXMiLCJpcndpbkhhbGwiLCJzb3VyY2VSYW5kb21CYXRlcyIsInJhbmRvbUV4cG9uZW50aWFsIiwibGFtYmRhIiwic291cmNlUmFuZG9tRXhwb25lbnRpYWwiLCJpbml0UmFuZ2UiLCJpbXBsaWNpdCIsIm9yZGluYWwiLCJ1bmtub3duIiwibm9ybWFsaXplIiwiY2xhbXBlciIsImJpbWFwIiwiZDAiLCJyMCIsInBvbHltYXAiLCJjbGFtcCIsInRyYW5zZm9ybWVyIiwidW50cmFuc2Zvcm0iLCJwaWVjZXdpc2UiLCJyZXNjYWxlIiwicmFuZ2VSb3VuZCIsImNvbnRpbnVvdXMiLCJwcmVjaXNpb25QcmVmaXgiLCJwcmVjaXNpb25Sb3VuZCIsInByZWNpc2lvbkZpeGVkIiwibGluZWFyaXNoIiwibmljZSIsIm5ld0ludGVydmFsIiwiZmxvb3JpIiwib2Zmc2V0aSIsImZpZWxkIiwic2V0TW9udGgiLCJzZXRIb3VycyIsInNldEZ1bGxZZWFyIiwiZ2V0RnVsbFllYXIiLCJzZXREYXRlIiwiZ2V0TW9udGgiLCJkdXJhdGlvbk1pbnV0ZSIsImR1cmF0aW9uV2VlayIsIndlZWtkYXkiLCJnZXREYXRlIiwiZ2V0RGF5IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJzdW5kYXkiLCJtb25kYXkiLCJ0dWVzZGF5Iiwid2VkbmVzZGF5IiwidGh1cnNkYXkiLCJmcmlkYXkiLCJzYXR1cmRheSIsInV0Y1dlZWtkYXkiLCJzZXRVVENEYXRlIiwiZ2V0VVRDRGF5Iiwic2V0VVRDSG91cnMiLCJ1dGNTdW5kYXkiLCJ1dGNNb25kYXkiLCJ1dGNUdWVzZGF5IiwidXRjV2VkbmVzZGF5IiwidXRjVGh1cnNkYXkiLCJ1dGNGcmlkYXkiLCJ1dGNTYXR1cmRheSIsInV0Y0RheSIsInV0Y1llYXIiLCJzZXRVVENNb250aCIsInNldFVUQ0Z1bGxZZWFyIiwibG9jYWxEYXRlIiwiSCIsIk0iLCJTIiwiTCIsInV0Y0RhdGUiLCJVVEMiLCJuZXdEYXRlIiwidGltZUZvcm1hdCIsInRpbWVQYXJzZSIsInBhZHMiLCJudW1iZXJSZSIsInBlcmNlbnRSZSIsInJlcXVvdGVSZSIsInJlcXVvdGUiLCJmb3JtYXRSZSIsImZvcm1hdExvb2t1cCIsInBhcnNlV2Vla2RheU51bWJlclN1bmRheSIsInBhcnNlV2Vla2RheU51bWJlck1vbmRheSIsInBhcnNlV2Vla051bWJlclN1bmRheSIsInBhcnNlV2Vla051bWJlcklTTyIsIlYiLCJwYXJzZVdlZWtOdW1iZXJNb25kYXkiLCJXIiwicGFyc2VGdWxsWWVhciIsInBhcnNlWWVhciIsInBhcnNlWm9uZSIsIloiLCJwYXJzZVF1YXJ0ZXIiLCJwYXJzZU1vbnRoTnVtYmVyIiwicGFyc2VEYXlPZk1vbnRoIiwicGFyc2VEYXlPZlllYXIiLCJwYXJzZUhvdXIyNCIsInBhcnNlTWludXRlcyIsInBhcnNlU2Vjb25kcyIsInBhcnNlTWlsbGlzZWNvbmRzIiwicGFyc2VNaWNyb3NlY29uZHMiLCJwYXJzZUxpdGVyYWxQZXJjZW50IiwicGFyc2VVbml4VGltZXN0YW1wIiwiUSIsInBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMiLCJmb3JtYXREYXlPZk1vbnRoIiwiZm9ybWF0SG91cjI0IiwiZm9ybWF0SG91cjEyIiwiZm9ybWF0RGF5T2ZZZWFyIiwiZm9ybWF0TWlsbGlzZWNvbmRzIiwiZm9ybWF0TWljcm9zZWNvbmRzIiwiZm9ybWF0TW9udGhOdW1iZXIiLCJmb3JtYXRNaW51dGVzIiwiZm9ybWF0U2Vjb25kcyIsImZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkiLCJkYXkiLCJmb3JtYXRXZWVrTnVtYmVyU3VuZGF5IiwiZm9ybWF0V2Vla051bWJlcklTTyIsImZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVyTW9uZGF5IiwiZm9ybWF0RnVsbFllYXIiLCJmb3JtYXRab25lIiwiZm9ybWF0VVRDRGF5T2ZNb250aCIsImZvcm1hdFVUQ0hvdXIyNCIsImZvcm1hdFVUQ0hvdXIxMiIsImZvcm1hdFVUQ0RheU9mWWVhciIsImZvcm1hdFVUQ01pbGxpc2Vjb25kcyIsImZvcm1hdFVUQ01pY3Jvc2Vjb25kcyIsImZvcm1hdFVUQ01vbnRoTnVtYmVyIiwiZm9ybWF0VVRDTWludXRlcyIsImZvcm1hdFVUQ1NlY29uZHMiLCJmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5IiwiZG93IiwiZm9ybWF0VVRDV2Vla051bWJlclN1bmRheSIsImZvcm1hdFVUQ1dlZWtOdW1iZXJJU08iLCJmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSIsImZvcm1hdFVUQ1llYXIiLCJmb3JtYXRVVENGdWxsWWVhciIsImZvcm1hdFVUQ1pvbmUiLCJmb3JtYXRMaXRlcmFsUGVyY2VudCIsImZvcm1hdFVuaXhUaW1lc3RhbXAiLCJmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyIsImxvY2FsZV9kYXRlVGltZSIsImRhdGVUaW1lIiwibG9jYWxlX2RhdGUiLCJsb2NhbGVfdGltZSIsImxvY2FsZV9wZXJpb2RzIiwicGVyaW9kcyIsImxvY2FsZV93ZWVrZGF5cyIsImRheXMiLCJsb2NhbGVfc2hvcnRXZWVrZGF5cyIsInNob3J0RGF5cyIsImxvY2FsZV9tb250aHMiLCJtb250aHMiLCJsb2NhbGVfc2hvcnRNb250aHMiLCJzaG9ydE1vbnRocyIsInBlcmlvZFJlIiwicGVyaW9kTG9va3VwIiwid2Vla2RheVJlIiwid2Vla2RheUxvb2t1cCIsInNob3J0V2Vla2RheVJlIiwic2hvcnRXZWVrZGF5TG9va3VwIiwibW9udGhSZSIsIm1vbnRoTG9va3VwIiwic2hvcnRNb250aFJlIiwic2hvcnRNb250aExvb2t1cCIsImZvcm1hdHMiLCJ1dGNGb3JtYXRzIiwicGFyc2VzIiwicGFyc2VTcGVjaWZpZXIiLCJuZXdQYXJzZSIsIndlZWsiLCJYIiwidXRjRm9ybWF0IiwidXRjUGFyc2UiLCJmb3JtYXRMb2NhbGUiLCJkdXJhdGlvbk1vbnRoIiwiZHVyYXRpb25ZZWFyIiwiY2FsZW5kYXIiLCJtb250aCIsImhvdXIiLCJtaW51dGUiLCJtaWxsaXNlY29uZCIsImZvcm1hdE1pbGxpc2Vjb25kIiwiZm9ybWF0U2Vjb25kIiwiZm9ybWF0TWludXRlIiwiZm9ybWF0SG91ciIsImZvcm1hdERheSIsImZvcm1hdFdlZWsiLCJmb3JtYXRNb250aCIsImZvcm1hdFllYXIiLCJ0aWNrSW50ZXJ2YWxzIiwidGlja0ludGVydmFsIiwidXRjTW9udGgiLCJ1dGNIb3VyIiwic2V0VVRDTWludXRlcyIsInV0Y01pbnV0ZSIsInNldFVUQ1NlY29uZHMiLCJhcmNJbm5lclJhZGl1cyIsImlubmVyUmFkaXVzIiwiYXJjT3V0ZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsImFyY1N0YXJ0QW5nbGUiLCJzdGFydEFuZ2xlIiwiYXJjRW5kQW5nbGUiLCJlbmRBbmdsZSIsImFyY1BhZEFuZ2xlIiwicGFkQW5nbGUiLCJjb3JuZXJUYW5nZW50cyIsInJjIiwib3giLCJveSIsIngxMSIsInkxMSIsIngxMCIsInkxMCIsIngwMCIsInkwMCIsIkQiLCJjeDAiLCJjeTAiLCJjeDEiLCJjeTEiLCJkeDAiLCJkeTAiLCJkeDEiLCJkeTEiLCJjeCIsImN5IiwiY29ybmVyUmFkaXVzIiwicGFkUmFkaXVzIiwiYnVmZmVyIiwiYTAxIiwiYTExIiwiYTAwIiwiYTEwIiwiZGEwIiwiZGExIiwicnAiLCJyYzAiLCJyYzEiLCJwMCIsInAxIiwib2MiLCJ4MzIiLCJ5MzIiLCJpbnRlcnNlY3QiLCJheCIsImF5IiwiYngiLCJieSIsImtjIiwibGMiLCJjZW50cm9pZCIsIkxpbmVhciIsIl9jb250ZXh0IiwiYXJlYVN0YXJ0IiwiX2xpbmUiLCJhcmVhRW5kIiwibGluZVN0YXJ0IiwiX3BvaW50IiwibGluZUVuZCIsInBvaW50Iiwic29ydFZhbHVlcyIsInBpZSIsImFyY3MiLCJwYSIsImN1cnZlUmFkaWFsIiwiUmFkaWFsIiwiY3VydmUiLCJfY3VydmUiLCJyYWRpYWwiLCJrciIsIkJhc2lzIiwiQmFzaXNDbG9zZWQiLCJfeDIiLCJfeDMiLCJfeDQiLCJfeTIiLCJfeTMiLCJfeTQiLCJCYXNpc09wZW4iLCJCdW5kbGUiLCJfYmFzaXMiLCJfYmV0YSIsImJ1bmRsZSIsIl9rIiwiQ2FyZGluYWwiLCJ0ZW5zaW9uIiwiY2FyZGluYWwiLCJDYXJkaW5hbENsb3NlZCIsIl94NSIsIl95NSIsIkNhcmRpbmFsT3BlbiIsIl9sMDFfYSIsIl9sMDFfMmEiLCJfbDEyX2EiLCJfbDEyXzJhIiwiX2wyM19hIiwiX2wyM18yYSIsIkNhdG11bGxSb20iLCJfYWxwaGEiLCJ4MjMiLCJ5MjMiLCJjYXRtdWxsUm9tIiwiQ2F0bXVsbFJvbUNsb3NlZCIsIkNhdG11bGxSb21PcGVuIiwiTGluZWFyQ2xvc2VkIiwic2xvcGUzIiwiaDAiLCJzMCIsInMxIiwic2xvcGUyIiwiTW9ub3RvbmVYIiwiTW9ub3RvbmVZIiwiUmVmbGVjdENvbnRleHQiLCJOYXR1cmFsIiwiY29udHJvbFBvaW50cyIsIl90MCIsInB4IiwicHkiLCJTdGVwIiwiX3QiLCJSZWRCbGFja1RyZWUiLCJSZWRCbGFja05vZGUiLCJSIiwiUCIsIlJlZEJsYWNrUm90YXRlTGVmdCIsIlJlZEJsYWNrUm90YXRlUmlnaHQiLCJSZWRCbGFja0ZpcnN0IiwiZ3JhbmRwYSIsInVuY2xlIiwiY3JlYXRlRWRnZSIsImVkZ2UiLCJzZXRFZGdlRW5kIiwiY2VsbHMiLCJoYWxmZWRnZXMiLCJjcmVhdGVCb3JkZXJFZGdlIiwidmVydGV4IiwiY2xpcEVkZ2UiLCJjb25uZWN0RWRnZSIsImZtIiwiZmIiLCJseCIsImx5IiwicngiLCJyeSIsImZ5IiwiY2VsbEhhbGZlZGdlQW5nbGUiLCJjZWxsIiwic2l0ZSIsInZhIiwidmIiLCJjZWxsSGFsZmVkZ2VTdGFydCIsImNlbGxIYWxmZWRnZUVuZCIsImZpcnN0Q2lyY2xlIiwiY2lyY2xlUG9vbCIsIkNpcmNsZSIsImF0dGFjaENpcmNsZSIsImxBcmMiLCJyQXJjIiwibFNpdGUiLCJjU2l0ZSIsInJTaXRlIiwiaGEiLCJoYyIsImRldGFjaENpcmNsZSIsImJlYWNoUG9vbCIsIkJlYWNoIiwiY3JlYXRlQmVhY2giLCJiZWFjaCIsImRldGFjaEJlYWNoIiwiYmVhY2hlcyIsInJlbW92ZUJlYWNoIiwiZGlzYXBwZWFyaW5nIiwiaUFyYyIsIm5BcmNzIiwiYWRkQmVhY2giLCJkeGwiLCJkeHIiLCJkaXJlY3RyaXgiLCJsZWZ0QnJlYWtQb2ludCIsInJpZ2h0QnJlYWtQb2ludCIsImNyZWF0ZUNlbGwiLCJuZXdBcmMiLCJoYiIsInJmb2N4IiwicmZvY3kiLCJwYnkyIiwibGZvY3giLCJsZm9jeSIsInBsYnkyIiwiaGwiLCJhYnkyIiwibGV4aWNvZ3JhcGhpYyIsIkRpYWdyYW0iLCJzaXRlcyIsInNvcnRDZWxsSGFsZmVkZ2VzIiwiY2xpcEVkZ2VzIiwiaUNlbGwiLCJpSGFsZmVkZ2UiLCJuSGFsZmVkZ2VzIiwic3RhcnRYIiwic3RhcnRZIiwiZW5kWCIsImVuZFkiLCJuQ2VsbHMiLCJkYyIsInYwMCIsInYwMSIsInYxMSIsInYxMCIsImNsaXBDZWxscyIsImVkZ2VzIiwicG9seWdvbnMiLCJwb2x5Z29uIiwidHJpYW5nbGVzIiwiZTEiLCJfZm91bmQiLCJ2eCIsInZ5IiwiVHJhbnNmb3JtIiwiYXBwbHlYIiwiYXBwbHlZIiwiaW52ZXJ0WCIsImludmVydFkiLCJyZXNjYWxlWCIsInJlc2NhbGVZIiwiREFSS19CRyIsIkxJR0hURVJfQkciLCJMSUdIVF9HUkVZIiwiVElUTEVfV0hJVEUiLCJURUFMIiwiU0VMRUNUSU9OX0dSRUVOIiwiVEVEX1JFRCIsIkJSSUdIVF9HUkVFTiIsIkJSSUdIVF9SRUQiLCJCUklHSFRfT1JBTkdFIiwiSElHSExJR0hUX0NPTE9SIiwiZnVuY3RvciIsImluaXROb2RlIiwidmlzIiwib3duZXJTVkdFbGVtZW50IiwiY3JlYXRlU1ZHUG9pbnQiLCJnZXROb2RlRWwiLCJnZXRTY3JlZW5CQm94IiwidGFyZ2V0ZWwiLCJnZXRTY3JlZW5DVE0iLCJ0YmJveCIsImdldEJCb3giLCJiYm94IiwibnciLCJtYXRyaXhUcmFuc2Zvcm0iLCJuZSIsInNlIiwic3ciLCJkaXJlY3Rpb25DYWxsYmFja3MiLCJkaXJlY3Rpb25zIiwicG9mZnNldCIsIm5vZGVsIiwiY29vcmRzIiwicGFyc2VUaW1lIiwiZGF0ZVJhbmdlIiwieEF4aXMiLCJ5RXh0ZW50IiwiVG9vbFRpcCIsInZpZXdzIiwidmlld1NlbGVjdG9yIiwiZHJvcGRvd24iLCJjYXRlZ29yeSIsInN0cmF0aWZ5Iiwibm9kZUlkIiwibm9kZUtleSIsIm5vZGVCeUtleSIsInByb2Zlc3Npb24iLCJjaXJjbGVQYWNrIiwiY2Jib3giLCJjaXJjbGVQYWNrUHJvZmVzc2lvbnMiLCJ0cmVlbWFwUHJvZmVzc2lvbnMiLCJyYXRpbmciLCJzdmdIZWlnaHQiLCJjb2xzIiwidW5pdFdpZHRoIiwidW5pdEhlaWdodCIsImdldENvbFJvdyIsInN2ZzEiLCJzdmcyIiwic3ZnMyIsImRpdjQiLCJyYXRpbmdzRGl2IiwidGh1bWJuYWlsR3JpZCIsInRhbGsiLCJkYXRhQ2xlYW5lciIsImFsbFRhbGtUaHVtYm5haWxHcmlkIiwieWVhclJhbmdlIiwidGFsa0RhdGUiLCJ0ZWRTaXRlVmlld3MiLCJzdmdXaWR0aCIsImJhckhlaWdodCIsImljb25IZWlnaHQiLCJyYXRpbmdCYXJXaWR0aCIsImljb25PZmZzZXQiLCJwaWVPdXRlclJhZGl1cyIsInBpZUlubmVyUmFkaXVzIiwidXBkYXRlQ2hhcnQiLCJzZWxlY3RlZFRhbGtOYW1lIiwic2VsZWN0ZWRSb3ciLCJyYXRpbmdzU3RyaW5nIiwicmF0aW5ncyIsIm51bVJhdGluZ0NhdGVnb3JpZXMiLCJyYXRpbmdzU3BhY2luZyIsInJhdGluZ0RvbWFpbiIsImJhckciLCJ5U2NhbGUiLCJyYXRpbmdzRyIsInJhdGluZ3NFbnRlciIsImltYWdlU2VsZWN0b3IiLCJ0b3BSb3VuZGVkUmVjdCIsInBpZURhdGFSYXciLCJnb29kIiwiYmFkIiwidm90ZVRvdGFsIiwicGllVGlwIiwicGllRGF0YSIsInBpZUVudGVyIiwidGFsa1NlbGVjdG9yIiwicmF0aW5nc0JyZWFrZG93biIsInJlYWRpbmdMZXZlbCIsInByb2Zlc3Npb25zIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25C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QUFpQ3pGLEtBQUt5RixJQUM1QzQzRixHQUFZeEMsR0FBTXAxRixLQUdwQixHQUFRLG1DQUFtQ3pGLEtBQUt5RiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDExKTtcbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My40LjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE5LTA1LTAxVDIxOjA0WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9uY2U6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBub2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksIHZhbCxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNjQrLCBFZGdlIDE4K1xuXHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIFwibm9uY2VcIiBwcm9wZXJ0eSBvbiBzY3JpcHRzLlxuXHRcdFx0XHQvLyBPbiB0aGUgb3RoZXIgaGFuZCwganVzdCB1c2luZyBgZ2V0QXR0cmlidXRlYCBpcyBub3QgZW5vdWdoIGFzXG5cdFx0XHRcdC8vIHRoZSBgbm9uY2VgIGF0dHJpYnV0ZSBpcyByZXNldCB0byBhbiBlbXB0eSBzdHJpbmcgd2hlbmV2ZXIgaXRcblx0XHRcdFx0Ly8gYmVjb21lcyBicm93c2luZy1jb250ZXh0IGNvbm5lY3RlZC5cblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9pc3N1ZXMvMjM2OVxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jbm9uY2UtYXR0cmlidXRlc1xuXHRcdFx0XHQvLyBUaGUgYG5vZGUuZ2V0QXR0cmlidXRlYCBjaGVjayB3YXMgYWRkZWQgZm9yIHRoZSBzYWtlIG9mXG5cdFx0XHRcdC8vIGBqUXVlcnkuZ2xvYmFsRXZhbGAgc28gdGhhdCBpdCBjYW4gZmFrZSBhIG5vbmNlLWNvbnRhaW5pbmcgbm9kZVxuXHRcdFx0XHQvLyB2aWEgYW4gb2JqZWN0LlxuXHRcdFx0XHR2YWwgPSBub2RlWyBpIF0gfHwgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoIGkgKTtcblx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZSggaSwgdmFsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjQuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUsIG9wdGlvbnMgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0gKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuNFxuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pzLmZvdW5kYXRpb24vXG4gKlxuICogRGF0ZTogMjAxOS0wNC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmRlc2NlbmQgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCJ8PlwiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmh0bWwgPSAvSFRNTCQvaSxcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZpZWxkc2V0XCI7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOCBvbmx5XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdChub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIpICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiYgcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSApIHtcblxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRkb2NFbGVtID0gKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdGlmICggcHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJlxuXHRcdChzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbXNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID9cblx0XHRcdFx0YXJndW1lbnQgKyBsZW5ndGggOlxuXHRcdFx0XHRhcmd1bWVudCA+IGxlbmd0aCA/XG5cdFx0XHRcdFx0bGVuZ3RoIDpcblx0XHRcdFx0XHRhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggdHlwZW9mIGVsZW0uY29udGVudERvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIGFsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcbi8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzLCBleGNlcHQgd2hlbiB0aGV5IGFyZSBuby1vcC5cbi8vIFNvIGV4cGVjdCBmb2N1cyB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLFxuLy8gYW5kIGJsdXIgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBub3QgYWxyZWFkeSBhY3RpdmUuXG4vLyAoZm9jdXMgYW5kIGJsdXIgYXJlIGFsd2F5cyBzeW5jaHJvbm91cyBpbiBvdGhlciBzdXBwb3J0ZWQgYnJvd3NlcnMsXG4vLyB0aGlzIGp1c3QgZGVmaW5lcyB3aGVuIHdlIGNhbiBjb3VudCBvbiBpdCkuXG5mdW5jdGlvbiBleHBlY3RTeW5jKCBlbGVtLCB0eXBlICkge1xuXHRyZXR1cm4gKCBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICkgPT09ICggdHlwZSA9PT0gXCJmb2N1c1wiICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBkYXRhUHJpdi5zZXQoIGVsLCBcImNsaWNrXCIsIC4uLiApXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIsIHJldHVyblRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyaW5nIGEgY2xpY2tcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgc3VwcHJlc3MgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHQvLyBBbHNvIHByZXZlbnQgaXQgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZSBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHJldHVybiByY2hlY2thYmxlVHlwZS50ZXN0KCB0YXJnZXQudHlwZSApICYmXG5cdFx0XHRcdFx0dGFyZ2V0LmNsaWNrICYmIG5vZGVOYW1lKCB0YXJnZXQsIFwiaW5wdXRcIiApICYmXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0YXJnZXQsIFwiY2xpY2tcIiApIHx8XG5cdFx0XHRcdFx0bm9kZU5hbWUoIHRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBFbnN1cmUgdGhlIHByZXNlbmNlIG9mIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaGFuZGxlcyBtYW51YWxseS10cmlnZ2VyZWRcbi8vIHN5bnRoZXRpYyBldmVudHMgYnkgaW50ZXJydXB0aW5nIHByb2dyZXNzIHVudGlsIHJlaW52b2tlZCBpbiByZXNwb25zZSB0b1xuLy8gKm5hdGl2ZSogZXZlbnRzIHRoYXQgaXQgZmlyZXMgZGlyZWN0bHksIGVuc3VyaW5nIHRoYXQgc3RhdGUgY2hhbmdlcyBoYXZlXG4vLyBhbHJlYWR5IG9jY3VycmVkIGJlZm9yZSBvdGhlciBsaXN0ZW5lcnMgYXJlIGludm9rZWQuXG5mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZSggZWwsIHR5cGUsIGV4cGVjdFN5bmMgKSB7XG5cblx0Ly8gTWlzc2luZyBleHBlY3RTeW5jIGluZGljYXRlcyBhIHRyaWdnZXIgY2FsbCwgd2hpY2ggbXVzdCBmb3JjZSBzZXR1cCB0aHJvdWdoIGpRdWVyeS5ldmVudC5hZGRcblx0aWYgKCAhZXhwZWN0U3luYyApIHtcblx0XHRpZiAoIGRhdGFQcml2LmdldCggZWwsIHR5cGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHJldHVyblRydWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIG5vdEFzeW5jLCByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdC8vIFNhdmVkIGRhdGEgc2hvdWxkIGJlIGZhbHNlIGluIHN1Y2ggY2FzZXMsIGJ1dCBtaWdodCBiZSBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0XG5cdFx0XHRcdC8vIGZyb20gYW4gYXN5bmMgbmF0aXZlIGhhbmRsZXIgKGdoLTQzNTApXG5cdFx0XHRcdGlmICggIXNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFyZ3VtZW50cyBmb3IgdXNlIHdoZW4gaGFuZGxpbmcgdGhlIGlubmVyIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRcdC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBhcmd1bWVudCAoYW4gZXZlbnQgb2JqZWN0KSwgc28gdGhpcyBhcnJheVxuXHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGNvbmZ1c2VkIHdpdGggYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdC5cblx0XHRcdFx0XHRzYXZlZCA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgc2F2ZWQgKTtcblxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgdGhlIG5hdGl2ZSBldmVudCBhbmQgY2FwdHVyZSBpdHMgcmVzdWx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0Ly8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXNcblx0XHRcdFx0XHRub3RBc3luYyA9IGV4cGVjdFN5bmMoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgfHwgbm90QXN5bmMgKSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0LnZhbHVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCBmb3IgYW4gZXZlbnQgd2l0aCBhIGJ1YmJsaW5nIHN1cnJvZ2F0ZVxuXHRcdFx0XHQvLyAoZm9jdXMgb3IgYmx1ciksIGFzc3VtZSB0aGF0IHRoZSBzdXJyb2dhdGUgYWxyZWFkeSBwcm9wYWdhdGVkIGZyb20gdHJpZ2dlcmluZyB0aGVcblx0XHRcdFx0Ly8gbmF0aXZlIGV2ZW50IGFuZCBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcgYWdhaW4gaGVyZS5cblx0XHRcdFx0Ly8gVGhpcyB0ZWNobmljYWxseSBnZXRzIHRoZSBvcmRlcmluZyB3cm9uZyB3LnIudC4gdG8gYC50cmlnZ2VyKClgIChpbiB3aGljaCB0aGVcblx0XHRcdFx0Ly8gYnViYmxpbmcgc3Vycm9nYXRlIHByb3BhZ2F0ZXMgKmFmdGVyKiB0aGUgbm9uLWJ1YmJsaW5nIGJhc2UpLCBidXQgdGhhdCBzZWVtc1xuXHRcdFx0XHQvLyBsZXNzIGJhZCB0aGFuIGR1cGxpY2F0aW9uLlxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge30gKS5kZWxlZ2F0ZVR5cGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIG5hdGl2ZSBldmVudCB0cmlnZ2VyZWQgYWJvdmUsIGV2ZXJ5dGhpbmcgaXMgbm93IGluIG9yZGVyXG5cdFx0XHQvLyBGaXJlIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCB3aXRoIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyAuLi5hbmQgY2FwdHVyZSB0aGUgcmVzdWx0XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwge1xuXHRcdFx0XHRcdHZhbHVlOiBqUXVlcnkuZXZlbnQudHJpZ2dlcihcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0XHQvLyBFeHRlbmQgd2l0aCB0aGUgcHJvdG90eXBlIHRvIHJlc2V0IHRoZSBhYm92ZSBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggc2F2ZWRbIDAgXSwgalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSApLFxuXHRcdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHRcdHRoaXNcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNvZGU6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxualF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIHR5cGUsIGRlbGVnYXRlVHlwZSApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSA9IHtcblxuXHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJmb2N1c1wiLCAuLi4gKVxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImJsdXJcIiwgLi4uIClcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlLCBleHBlY3RTeW5jICk7XG5cblx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRkZWxlZ2F0ZVR5cGU6IGRlbGVnYXRlVHlwZVxuXHR9O1xufSApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzMyMjlcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksXG5cblx0LyogZXNsaW50LWVuYWJsZSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzIG9ubHlcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIGVsZW0gKS5jaGlsZHJlbiggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdGlmICggKCBlbGVtLnR5cGUgfHwgXCJcIiApLnNsaWNlKCAwLCA1ICkgPT09IFwidHJ1ZS9cIiApIHtcblx0XHRlbGVtLnR5cGUgPSBlbGVtLnR5cGUuc2xpY2UoIDUgKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCAmJiAhbm9kZS5ub01vZHVsZSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRub25jZTogbm9kZS5ub25jZSB8fCBub2RlLmdldEF0dHJpYnV0ZSggXCJub25jZVwiIClcblx0XHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIG5vZGUsIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgaXNBdHRhY2hlZCggbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTY0XG5cdFx0Ly8gRG9uJ3QgZ2V0IHRyaWNrZWQgd2hlbiB6b29tIGFmZmVjdHMgb2Zmc2V0V2lkdGggKGdoLTQwMjkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdi5vZmZzZXRXaWR0aCAvIDMgKSA9PT0gMTI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblxuXHRcdC8vIElmIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyB1bmtub3duLCB0aGVuIHdlIGNhbid0IGRldGVybWluZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyXG5cdFx0Ly8gVXNlIGFuIGV4cGxpY2l0IHplcm8gdG8gYXZvaWQgTmFOIChnaC0zOTY0KVxuXHRcdCkgKSB8fCAwO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtNDMyMikuXG5cdFx0Ly8gRmFrZSBjb250ZW50LWJveCB1bnRpbCB3ZSBrbm93IGl0J3MgbmVlZGVkIHRvIGtub3cgdGhlIHRydWUgdmFsdWUuXG5cdFx0Ym94U2l6aW5nTmVlZGVkID0gIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBleHRyYSxcblx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3gsXG5cblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0b2Zmc2V0UHJvcCA9IFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICk7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblxuXHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0Ly8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG5cdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGVcblx0Ly8gV2UgdXNlIGdldENsaWVudFJlY3RzKCkgdG8gY2hlY2sgZm9yIGhpZGRlbi9kaXNjb25uZWN0ZWQuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveFxuXHRpZiAoICggIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpc0JvcmRlckJveCB8fFxuXHRcdHZhbCA9PT0gXCJhdXRvXCIgfHxcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cdFx0ZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdC8vIFdoZXJlIGF2YWlsYWJsZSwgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGFwcHJveGltYXRlIGJvcmRlciBib3ggZGltZW5zaW9ucy5cblx0XHQvLyBXaGVyZSBub3QgYXZhaWxhYmxlIChlLmcuLCBTVkcpLCBhc3N1bWUgdW5yZWxpYWJsZSBib3gtc2l6aW5nIGFuZCBpbnRlcnByZXQgdGhlXG5cdFx0Ly8gcmV0cmlldmVkIHZhbHVlIGFzIGEgY29udGVudCBib3ggZGltZW5zaW9uLlxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBvZmZzZXRQcm9wIGluIGVsZW07XG5cdFx0aWYgKCB2YWx1ZUlzQm9yZGVyQm94ICkge1xuXHRcdFx0dmFsID0gZWxlbVsgb2Zmc2V0UHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJncmlkQXJlYVwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtbkVuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblN0YXJ0XCI6IHRydWUsXG5cdFx0XCJncmlkUm93XCI6IHRydWUsXG5cdFx0XCJncmlkUm93RW5kXCI6IHRydWUsXG5cdFx0XCJncmlkUm93U3RhcnRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdC8vIFRoZSBpc0N1c3RvbVByb3AgY2hlY2sgY2FuIGJlIHJlbW92ZWQgaW4galF1ZXJ5IDQuMCB3aGVuIHdlIG9ubHkgYXV0by1hcHBlbmRcblx0XHRcdC8vIFwicHhcIiB0byBhIGZldyBoYXJkY29kZWQgdmFsdWVzLlxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gfHxcblx0XHRcdFx0XHR0d2Vlbi5lbGVtLnN0eWxlWyBmaW5hbFByb3BOYW1lKCB0d2Vlbi5wcm9wICkgXSAhPSBudWxsICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBEYXRlLm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdID1cblx0XHRcdFx0XHRcdFx0XHRcdCggcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdIHx8IFtdIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmNvbmNhdCggbWF0Y2hbIDIgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaC5qb2luKCBcIiwgXCIgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXG5cdFx0Ly8gT25seSBldmFsdWF0ZSB0aGUgcmVzcG9uc2UgaWYgaXQgaXMgc3VjY2Vzc2Z1bCAoZ2gtNDEyNilcblx0XHQvLyBkYXRhRmlsdGVyIGlzIG5vdCBpbnZva2VkIGZvciBmYWlsdXJlIHJlc3BvbnNlcywgc28gdXNpbmcgaXQgaW5zdGVhZFxuXHRcdC8vIG9mIHRoZSBkZWZhdWx0IGNvbnZlcnRlciBpcyBrbHVkZ3kgYnV0IGl0IHdvcmtzLlxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oKSB7fVxuXHRcdH0sXG5cdFx0ZGF0YUZpbHRlcjogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHJlc3BvbnNlLCBvcHRpb25zICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIG9yIGZvcmNlZC1ieS1hdHRycyByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gfHwgcy5zY3JpcHRBdHRycyApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIHMuc2NyaXB0QXR0cnMgfHwge30gKVxuXHRcdFx0XHRcdC5wcm9wKCB7IGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCwgc3JjOiBzLnVybCB9IClcblx0XHRcdFx0XHQub24oIFwibG9hZCBlcnJvclwiLCBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fVxufSApO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCAhbm9HbG9iYWwgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIi8qIVxyXG4gKiBTY3JvbGxNYWdpYyB2Mi4wLjcgKDIwMTktMDUtMDcpXHJcbiAqIFRoZSBqYXZhc2NyaXB0IGxpYnJhcnkgZm9yIG1hZ2ljYWwgc2Nyb2xsIGludGVyYWN0aW9ucy5cclxuICogKGMpIDIwMTkgSmFuIFBhZXBrZSAoQGphbnBhZXBrZSlcclxuICogUHJvamVjdCBXZWJzaXRlOiBodHRwOi8vc2Nyb2xsbWFnaWMuaW9cclxuICogXHJcbiAqIEB2ZXJzaW9uIDIuMC43XHJcbiAqIEBsaWNlbnNlIER1YWwgbGljZW5zZWQgdW5kZXIgTUlUIGxpY2Vuc2UgYW5kIEdQTC5cclxuICogQGF1dGhvciBKYW4gUGFlcGtlIC0gZS1tYWlsQGphbnBhZXBrZS5kZVxyXG4gKlxyXG4gKiBAZmlsZSBTY3JvbGxNYWdpYyBtYWluIGxpYnJhcnkuXHJcbiAqL1xyXG4vKipcclxuICogQG5hbWVzcGFjZSBTY3JvbGxNYWdpY1xyXG4gKi9cclxuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XHJcblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG5cdFx0Ly8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxyXG5cdFx0ZGVmaW5lKGZhY3RvcnkpO1xyXG5cdH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XHJcblx0XHQvLyBDb21tb25KU1xyXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XHJcblx0fSBlbHNlIHtcclxuXHRcdC8vIEJyb3dzZXIgZ2xvYmFsXHJcblx0XHRyb290LlNjcm9sbE1hZ2ljID0gZmFjdG9yeSgpO1xyXG5cdH1cclxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XHJcblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5cdHZhciBTY3JvbGxNYWdpYyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdF91dGlsLmxvZygyLCAnKENPTVBBVElCSUxJVFkgTk9USUNFKSAtPiBBcyBvZiBTY3JvbGxNYWdpYyAyLjAuMCB5b3UgbmVlZCB0byB1c2UgXFwnbmV3IFNjcm9sbE1hZ2ljLkNvbnRyb2xsZXIoKVxcJyB0byBjcmVhdGUgYSBuZXcgY29udHJvbGxlciBpbnN0YW5jZS4gVXNlIFxcJ25ldyBTY3JvbGxNYWdpYy5TY2VuZSgpXFwnIHRvIGluc3RhbmNlIGEgc2NlbmUuJyk7XHJcblx0fTtcclxuXHJcblx0U2Nyb2xsTWFnaWMudmVyc2lvbiA9IFwiMi4wLjdcIjtcclxuXHJcblx0Ly8gVE9ETzogdGVtcG9yYXJ5IHdvcmthcm91bmQgZm9yIGNocm9tZSdzIHNjcm9sbCBqaXR0ZXIgYnVnXHJcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXdoZWVsXCIsIGZ1bmN0aW9uICgpIHt9KTtcclxuXHJcblx0Ly8gZ2xvYmFsIGNvbnN0XHJcblx0dmFyIFBJTl9TUEFDRVJfQVRUUklCVVRFID0gXCJkYXRhLXNjcm9sbG1hZ2ljLXBpbi1zcGFjZXJcIjtcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIG1haW4gY2xhc3MgdGhhdCBpcyBuZWVkZWQgb25jZSBwZXIgc2Nyb2xsIGNvbnRhaW5lci5cclxuXHQgKlxyXG5cdCAqIEBjbGFzc1xyXG5cdCAqXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiAvLyBiYXNpYyBpbml0aWFsaXphdGlvblxyXG5cdCAqIHZhciBjb250cm9sbGVyID0gbmV3IFNjcm9sbE1hZ2ljLkNvbnRyb2xsZXIoKTtcclxuXHQgKlxyXG5cdCAqIC8vIHBhc3Npbmcgb3B0aW9uc1xyXG5cdCAqIHZhciBjb250cm9sbGVyID0gbmV3IFNjcm9sbE1hZ2ljLkNvbnRyb2xsZXIoe2NvbnRhaW5lcjogXCIjbXlDb250YWluZXJcIiwgbG9nbGV2ZWw6IDN9KTtcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBBbiBvYmplY3QgY29udGFpbmluZyBvbmUgb3IgbW9yZSBvcHRpb25zIGZvciB0aGUgY29udHJvbGxlci5cclxuXHQgKiBAcGFyYW0geyhzdHJpbmd8b2JqZWN0KX0gW29wdGlvbnMuY29udGFpbmVyPXdpbmRvd10gLSBBIHNlbGVjdG9yLCBET00gb2JqZWN0IHRoYXQgcmVmZXJlbmNlcyB0aGUgbWFpbiBjb250YWluZXIgZm9yIHNjcm9sbGluZy5cclxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnZlcnRpY2FsPXRydWVdIC0gU2V0cyB0aGUgc2Nyb2xsIG1vZGUgdG8gdmVydGljYWwgKGB0cnVlYCkgb3IgaG9yaXpvbnRhbCAoYGZhbHNlYCkgc2Nyb2xsaW5nLlxyXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5nbG9iYWxTY2VuZU9wdGlvbnM9e31dIC0gVGhlc2Ugb3B0aW9ucyB3aWxsIGJlIHBhc3NlZCB0byBldmVyeSBTY2VuZSB0aGF0IGlzIGFkZGVkIHRvIHRoZSBjb250cm9sbGVyIHVzaW5nIHRoZSBhZGRTY2VuZSBtZXRob2QuIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIFNjZW5lIG9wdGlvbnMgc2VlIHtAbGluayBTY3JvbGxNYWdpYy5TY2VuZX0uXHJcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxvZ2xldmVsPTJdIExvZ2xldmVsIGZvciBkZWJ1Z2dpbmcuIE5vdGUgdGhhdCBsb2dnaW5nIGlzIGRpc2FibGVkIGluIHRoZSBtaW5pZmllZCB2ZXJzaW9uIG9mIFNjcm9sbE1hZ2ljLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ICoqIGAwYCA9PiBzaWxlbnRcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCAqKiBgMWAgPT4gZXJyb3JzXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgKiogYDJgID0+IGVycm9ycywgd2FybmluZ3NcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCAqKiBgM2AgPT4gZXJyb3JzLCB3YXJuaW5ncywgZGVidWdpbmZvXHJcblx0ICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZWZyZXNoSW50ZXJ2YWw9MTAwXSAtIFNvbWUgY2hhbmdlcyBkb24ndCBjYWxsIGV2ZW50cyBieSBkZWZhdWx0LCBsaWtlIGNoYW5naW5nIHRoZSBjb250YWluZXIgc2l6ZSBvciBtb3ZpbmcgYSBzY2VuZSB0cmlnZ2VyIGVsZW1lbnQuICBcclxuXHQgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCBUaGlzIGludGVydmFsIHBvbGxzIHRoZXNlIHBhcmFtZXRlcnMgdG8gZmlyZSB0aGUgbmVjZXNzYXJ5IGV2ZW50cy4gIFxyXG5cdCBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0IElmIHlvdSBkb24ndCB1c2UgY3VzdG9tIGNvbnRhaW5lcnMsIHRyaWdnZXIgZWxlbWVudHMgb3IgaGF2ZSBzdGF0aWMgbGF5b3V0cywgd2hlcmUgdGhlIHBvc2l0aW9ucyBvZiB0aGUgdHJpZ2dlciBlbGVtZW50cyBkb24ndCBjaGFuZ2UsIHlvdSBjYW4gc2V0IHRoaXMgdG8gMCBkaXNhYmxlIGludGVydmFsIGNoZWNraW5nIGFuZCBpbXByb3ZlIHBlcmZvcm1hbmNlLlxyXG5cdCAqXHJcblx0ICovXHJcblx0U2Nyb2xsTWFnaWMuQ29udHJvbGxlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcblx0XHQvKlxyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICogc2V0dGluZ3NcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqL1xyXG5cdFx0dmFyXHJcblx0XHRcdE5BTUVTUEFDRSA9ICdTY3JvbGxNYWdpYy5Db250cm9sbGVyJyxcclxuXHRcdFx0U0NST0xMX0RJUkVDVElPTl9GT1JXQVJEID0gJ0ZPUldBUkQnLFxyXG5cdFx0XHRTQ1JPTExfRElSRUNUSU9OX1JFVkVSU0UgPSAnUkVWRVJTRScsXHJcblx0XHRcdFNDUk9MTF9ESVJFQ1RJT05fUEFVU0VEID0gJ1BBVVNFRCcsXHJcblx0XHRcdERFRkFVTFRfT1BUSU9OUyA9IENPTlRST0xMRVJfT1BUSU9OUy5kZWZhdWx0cztcclxuXHJcblx0XHQvKlxyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICogcHJpdmF0ZSB2YXJzXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKi9cclxuXHRcdHZhclxyXG5cdFx0XHRDb250cm9sbGVyID0gdGhpcyxcclxuXHRcdFx0X29wdGlvbnMgPSBfdXRpbC5leHRlbmQoe30sIERFRkFVTFRfT1BUSU9OUywgb3B0aW9ucyksXHJcblx0XHRcdF9zY2VuZU9iamVjdHMgPSBbXSxcclxuXHRcdFx0X3VwZGF0ZVNjZW5lc09uTmV4dEN5Y2xlID0gZmFsc2UsIC8vIGNhbiBiZSBib29sZWFuICh0cnVlID0+IGFsbCBzY2VuZXMpIG9yIGFuIGFycmF5IG9mIHNjZW5lcyB0byBiZSB1cGRhdGVkXHJcblx0XHRcdF9zY3JvbGxQb3MgPSAwLFxyXG5cdFx0XHRfc2Nyb2xsRGlyZWN0aW9uID0gU0NST0xMX0RJUkVDVElPTl9QQVVTRUQsXHJcblx0XHRcdF9pc0RvY3VtZW50ID0gdHJ1ZSxcclxuXHRcdFx0X3ZpZXdQb3J0U2l6ZSA9IDAsXHJcblx0XHRcdF9lbmFibGVkID0gdHJ1ZSxcclxuXHRcdFx0X3VwZGF0ZVRpbWVvdXQsXHJcblx0XHRcdF9yZWZyZXNoVGltZW91dDtcclxuXHJcblx0XHQvKlxyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICogcHJpdmF0ZSBmdW5jdGlvbnNcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqL1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogSW50ZXJuYWwgY29uc3RydWN0b3IgZnVuY3Rpb24gb2YgdGhlIFNjcm9sbE1hZ2ljIENvbnRyb2xsZXJcclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGZvciAodmFyIGtleSBpbiBfb3B0aW9ucykge1xyXG5cdFx0XHRcdGlmICghREVGQVVMVF9PUFRJT05TLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuXHRcdFx0XHRcdGxvZygyLCBcIldBUk5JTkc6IFVua25vd24gb3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcclxuXHRcdFx0XHRcdGRlbGV0ZSBfb3B0aW9uc1trZXldO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRfb3B0aW9ucy5jb250YWluZXIgPSBfdXRpbC5nZXQuZWxlbWVudHMoX29wdGlvbnMuY29udGFpbmVyKVswXTtcclxuXHRcdFx0Ly8gY2hlY2sgU2Nyb2xsQ29udGFpbmVyXHJcblx0XHRcdGlmICghX29wdGlvbnMuY29udGFpbmVyKSB7XHJcblx0XHRcdFx0bG9nKDEsIFwiRVJST1IgY3JlYXRpbmcgb2JqZWN0IFwiICsgTkFNRVNQQUNFICsgXCI6IE5vIHZhbGlkIHNjcm9sbCBjb250YWluZXIgc3VwcGxpZWRcIik7XHJcblx0XHRcdFx0dGhyb3cgTkFNRVNQQUNFICsgXCIgaW5pdCBmYWlsZWQuXCI7IC8vIGNhbmNlbFxyXG5cdFx0XHR9XHJcblx0XHRcdF9pc0RvY3VtZW50ID0gX29wdGlvbnMuY29udGFpbmVyID09PSB3aW5kb3cgfHwgX29wdGlvbnMuY29udGFpbmVyID09PSBkb2N1bWVudC5ib2R5IHx8ICFkb2N1bWVudC5ib2R5LmNvbnRhaW5zKF9vcHRpb25zLmNvbnRhaW5lcik7XHJcblx0XHRcdC8vIG5vcm1hbGl6ZSB0byB3aW5kb3dcclxuXHRcdFx0aWYgKF9pc0RvY3VtZW50KSB7XHJcblx0XHRcdFx0X29wdGlvbnMuY29udGFpbmVyID0gd2luZG93O1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIHVwZGF0ZSBjb250YWluZXIgc2l6ZSBpbW1lZGlhdGVseVxyXG5cdFx0XHRfdmlld1BvcnRTaXplID0gZ2V0Vmlld3BvcnRTaXplKCk7XHJcblx0XHRcdC8vIHNldCBldmVudCBoYW5kbGVyc1xyXG5cdFx0XHRfb3B0aW9ucy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBvbkNoYW5nZSk7XHJcblx0XHRcdF9vcHRpb25zLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIG9uQ2hhbmdlKTtcclxuXHJcblx0XHRcdHZhciByaSA9IHBhcnNlSW50KF9vcHRpb25zLnJlZnJlc2hJbnRlcnZhbCwgMTApO1xyXG5cdFx0XHRfb3B0aW9ucy5yZWZyZXNoSW50ZXJ2YWwgPSBfdXRpbC50eXBlLk51bWJlcihyaSkgPyByaSA6IERFRkFVTFRfT1BUSU9OUy5yZWZyZXNoSW50ZXJ2YWw7XHJcblx0XHRcdHNjaGVkdWxlUmVmcmVzaCgpO1xyXG5cclxuXHRcdFx0bG9nKDMsIFwiYWRkZWQgbmV3IFwiICsgTkFNRVNQQUNFICsgXCIgY29udHJvbGxlciAodlwiICsgU2Nyb2xsTWFnaWMudmVyc2lvbiArIFwiKVwiKTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBTY2hlZHVsZSB0aGUgbmV4dCBleGVjdXRpb24gb2YgdGhlIHJlZnJlc2ggZnVuY3Rpb25cclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciBzY2hlZHVsZVJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGlmIChfb3B0aW9ucy5yZWZyZXNoSW50ZXJ2YWwgPiAwKSB7XHJcblx0XHRcdFx0X3JlZnJlc2hUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQocmVmcmVzaCwgX29wdGlvbnMucmVmcmVzaEludGVydmFsKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIERlZmF1bHQgZnVuY3Rpb24gdG8gZ2V0IHNjcm9sbCBwb3MgLSBvdmVyd3JpdGVhYmxlIHVzaW5nIGBDb250cm9sbGVyLnNjcm9sbFBvcyhuZXdGdW5jdGlvbilgXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgZ2V0U2Nyb2xsUG9zID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRyZXR1cm4gX29wdGlvbnMudmVydGljYWwgPyBfdXRpbC5nZXQuc2Nyb2xsVG9wKF9vcHRpb25zLmNvbnRhaW5lcikgOiBfdXRpbC5nZXQuc2Nyb2xsTGVmdChfb3B0aW9ucy5jb250YWluZXIpO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFJldHVybnMgdGhlIGN1cnJlbnQgdmlld3BvcnQgU2l6ZSAod2lkdGggdm9yIGhvcml6b250YWwsIGhlaWdodCBmb3IgdmVydGljYWwpXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgZ2V0Vmlld3BvcnRTaXplID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRyZXR1cm4gX29wdGlvbnMudmVydGljYWwgPyBfdXRpbC5nZXQuaGVpZ2h0KF9vcHRpb25zLmNvbnRhaW5lcikgOiBfdXRpbC5nZXQud2lkdGgoX29wdGlvbnMuY29udGFpbmVyKTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBEZWZhdWx0IGZ1bmN0aW9uIHRvIHNldCBzY3JvbGwgcG9zIC0gb3ZlcndyaXRlYWJsZSB1c2luZyBgQ29udHJvbGxlci5zY3JvbGxUbyhuZXdGdW5jdGlvbilgXHJcblx0XHQgKiBNYWtlIGF2YWlsYWJsZSBwdWJsaWNseSBmb3IgcGlubmVkIG1vdXNld2hlZWwgd29ya2Fyb3VuZC5cclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciBzZXRTY3JvbGxQb3MgPSB0aGlzLl9zZXRTY3JvbGxQb3MgPSBmdW5jdGlvbiAocG9zKSB7XHJcblx0XHRcdGlmIChfb3B0aW9ucy52ZXJ0aWNhbCkge1xyXG5cdFx0XHRcdGlmIChfaXNEb2N1bWVudCkge1xyXG5cdFx0XHRcdFx0d2luZG93LnNjcm9sbFRvKF91dGlsLmdldC5zY3JvbGxMZWZ0KCksIHBvcyk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdF9vcHRpb25zLmNvbnRhaW5lci5zY3JvbGxUb3AgPSBwb3M7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGlmIChfaXNEb2N1bWVudCkge1xyXG5cdFx0XHRcdFx0d2luZG93LnNjcm9sbFRvKHBvcywgX3V0aWwuZ2V0LnNjcm9sbFRvcCgpKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0X29wdGlvbnMuY29udGFpbmVyLnNjcm9sbExlZnQgPSBwb3M7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogSGFuZGxlIHVwZGF0ZXMgaW4gY3ljbGVzIGluc3RlYWQgb2Ygb24gc2Nyb2xsIChwZXJmb3JtYW5jZSlcclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciB1cGRhdGVTY2VuZXMgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGlmIChfZW5hYmxlZCAmJiBfdXBkYXRlU2NlbmVzT25OZXh0Q3ljbGUpIHtcclxuXHRcdFx0XHQvLyBkZXRlcm1pbmUgc2NlbmVzIHRvIHVwZGF0ZVxyXG5cdFx0XHRcdHZhciBzY2VuZXNUb1VwZGF0ZSA9IF91dGlsLnR5cGUuQXJyYXkoX3VwZGF0ZVNjZW5lc09uTmV4dEN5Y2xlKSA/IF91cGRhdGVTY2VuZXNPbk5leHRDeWNsZSA6IF9zY2VuZU9iamVjdHMuc2xpY2UoMCk7XHJcblx0XHRcdFx0Ly8gcmVzZXQgc2NlbmVzXHJcblx0XHRcdFx0X3VwZGF0ZVNjZW5lc09uTmV4dEN5Y2xlID0gZmFsc2U7XHJcblx0XHRcdFx0dmFyIG9sZFNjcm9sbFBvcyA9IF9zY3JvbGxQb3M7XHJcblx0XHRcdFx0Ly8gdXBkYXRlIHNjcm9sbCBwb3Mgbm93IGluc3RlYWQgb2Ygb25DaGFuZ2UsIGFzIGl0IG1pZ2h0IGhhdmUgY2hhbmdlZCBzaW5jZSBzY2hlZHVsaW5nIChpLmUuIGluLWJyb3dzZXIgc21vb3RoIHNjcm9sbClcclxuXHRcdFx0XHRfc2Nyb2xsUG9zID0gQ29udHJvbGxlci5zY3JvbGxQb3MoKTtcclxuXHRcdFx0XHR2YXIgZGVsdGFTY3JvbGwgPSBfc2Nyb2xsUG9zIC0gb2xkU2Nyb2xsUG9zO1xyXG5cdFx0XHRcdGlmIChkZWx0YVNjcm9sbCAhPT0gMCkgeyAvLyBzY3JvbGwgcG9zaXRpb24gY2hhbmdlZD9cclxuXHRcdFx0XHRcdF9zY3JvbGxEaXJlY3Rpb24gPSAoZGVsdGFTY3JvbGwgPiAwKSA/IFNDUk9MTF9ESVJFQ1RJT05fRk9SV0FSRCA6IFNDUk9MTF9ESVJFQ1RJT05fUkVWRVJTRTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ly8gcmV2ZXJzZSBvcmRlciBvZiBzY2VuZXMgaWYgc2Nyb2xsaW5nIHJldmVyc2VcclxuXHRcdFx0XHRpZiAoX3Njcm9sbERpcmVjdGlvbiA9PT0gU0NST0xMX0RJUkVDVElPTl9SRVZFUlNFKSB7XHJcblx0XHRcdFx0XHRzY2VuZXNUb1VwZGF0ZS5yZXZlcnNlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdC8vIHVwZGF0ZSBzY2VuZXNcclxuXHRcdFx0XHRzY2VuZXNUb1VwZGF0ZS5mb3JFYWNoKGZ1bmN0aW9uIChzY2VuZSwgaW5kZXgpIHtcclxuXHRcdFx0XHRcdGxvZygzLCBcInVwZGF0aW5nIFNjZW5lIFwiICsgKGluZGV4ICsgMSkgKyBcIi9cIiArIHNjZW5lc1RvVXBkYXRlLmxlbmd0aCArIFwiIChcIiArIF9zY2VuZU9iamVjdHMubGVuZ3RoICsgXCIgdG90YWwpXCIpO1xyXG5cdFx0XHRcdFx0c2NlbmUudXBkYXRlKHRydWUpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdGlmIChzY2VuZXNUb1VwZGF0ZS5sZW5ndGggPT09IDAgJiYgX29wdGlvbnMubG9nbGV2ZWwgPj0gMykge1xyXG5cdFx0XHRcdFx0bG9nKDMsIFwidXBkYXRpbmcgMCBTY2VuZXMgKG5vdGhpbmcgYWRkZWQgdG8gY29udHJvbGxlcilcIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogSW5pdGlhbGl6ZXMgckFGIGNhbGxiYWNrXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgZGVib3VuY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdF91cGRhdGVUaW1lb3V0ID0gX3V0aWwuckFGKHVwZGF0ZVNjZW5lcyk7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogSGFuZGxlcyBDb250YWluZXIgY2hhbmdlc1xyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIG9uQ2hhbmdlID0gZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0bG9nKDMsIFwiZXZlbnQgZmlyZWQgY2F1c2luZyBhbiB1cGRhdGU6XCIsIGUudHlwZSk7XHJcblx0XHRcdGlmIChlLnR5cGUgPT0gXCJyZXNpemVcIikge1xyXG5cdFx0XHRcdC8vIHJlc2l6ZVxyXG5cdFx0XHRcdF92aWV3UG9ydFNpemUgPSBnZXRWaWV3cG9ydFNpemUoKTtcclxuXHRcdFx0XHRfc2Nyb2xsRGlyZWN0aW9uID0gU0NST0xMX0RJUkVDVElPTl9QQVVTRUQ7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gc2NoZWR1bGUgdXBkYXRlXHJcblx0XHRcdGlmIChfdXBkYXRlU2NlbmVzT25OZXh0Q3ljbGUgIT09IHRydWUpIHtcclxuXHRcdFx0XHRfdXBkYXRlU2NlbmVzT25OZXh0Q3ljbGUgPSB0cnVlO1xyXG5cdFx0XHRcdGRlYm91bmNlVXBkYXRlKCk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0dmFyIHJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGlmICghX2lzRG9jdW1lbnQpIHtcclxuXHRcdFx0XHQvLyBzaW11bGF0ZSByZXNpemUgZXZlbnQuIE9ubHkgd29ya3MgZm9yIHZpZXdwb3J0IHJlbGV2YW50IHBhcmFtIChwZXJmb3JtYW5jZSlcclxuXHRcdFx0XHRpZiAoX3ZpZXdQb3J0U2l6ZSAhPSBnZXRWaWV3cG9ydFNpemUoKSkge1xyXG5cdFx0XHRcdFx0dmFyIHJlc2l6ZUV2ZW50O1xyXG5cdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0cmVzaXplRXZlbnQgPSBuZXcgRXZlbnQoJ3Jlc2l6ZScsIHtcclxuXHRcdFx0XHRcdFx0XHRidWJibGVzOiBmYWxzZSxcclxuXHRcdFx0XHRcdFx0XHRjYW5jZWxhYmxlOiBmYWxzZVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHsgLy8gc3R1cGlkIElFXHJcblx0XHRcdFx0XHRcdHJlc2l6ZUV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcclxuXHRcdFx0XHRcdFx0cmVzaXplRXZlbnQuaW5pdEV2ZW50KFwicmVzaXplXCIsIGZhbHNlLCBmYWxzZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRfb3B0aW9ucy5jb250YWluZXIuZGlzcGF0Y2hFdmVudChyZXNpemVFdmVudCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdF9zY2VuZU9iamVjdHMuZm9yRWFjaChmdW5jdGlvbiAoc2NlbmUsIGluZGV4KSB7IC8vIHJlZnJlc2ggYWxsIHNjZW5lc1xyXG5cdFx0XHRcdHNjZW5lLnJlZnJlc2goKTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdHNjaGVkdWxlUmVmcmVzaCgpO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFNlbmQgYSBkZWJ1ZyBtZXNzYWdlIHRvIHRoZSBjb25zb2xlLlxyXG5cdFx0ICogcHJvdmlkZWQgcHVibGljbHkgd2l0aCBfbG9nIGZvciBwbHVnaW5zXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBsb2dsZXZlbCAtIFRoZSBsb2dsZXZlbCByZXF1aXJlZCB0byBpbml0aWF0ZSBvdXRwdXQgZm9yIHRoZSBtZXNzYWdlLlxyXG5cdFx0ICogQHBhcmFtIHsuLi5taXhlZH0gb3V0cHV0IC0gT25lIG9yIG1vcmUgdmFyaWFibGVzIHRoYXQgc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgY29uc29sZS5cclxuXHRcdCAqL1xyXG5cdFx0dmFyIGxvZyA9IHRoaXMuX2xvZyA9IGZ1bmN0aW9uIChsb2dsZXZlbCwgb3V0cHV0KSB7XHJcblx0XHRcdGlmIChfb3B0aW9ucy5sb2dsZXZlbCA+PSBsb2dsZXZlbCkge1xyXG5cdFx0XHRcdEFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChhcmd1bWVudHMsIDEsIDAsIFwiKFwiICsgTkFNRVNQQUNFICsgXCIpIC0+XCIpO1xyXG5cdFx0XHRcdF91dGlsLmxvZy5hcHBseSh3aW5kb3csIGFyZ3VtZW50cyk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHQvLyBmb3Igc2NlbmVzIHdlIGhhdmUgZ2V0dGVycyBmb3IgZWFjaCBvcHRpb24sIGJ1dCBmb3IgdGhlIGNvbnRyb2xsZXIgd2UgZG9uJ3QsIHNvIHdlIG5lZWQgdG8gbWFrZSBpdCBhdmFpbGFibGUgZXh0ZXJuYWxseSBmb3IgcGx1Z2luc1xyXG5cdFx0dGhpcy5fb3B0aW9ucyA9IF9vcHRpb25zO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogU29ydCBzY2VuZXMgaW4gYXNjZW5kaW5nIG9yZGVyIG9mIHRoZWlyIHN0YXJ0IG9mZnNldC5cclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHthcnJheX0gU2NlbmVzQXJyYXkgLSBhbiBhcnJheSBvZiBTY3JvbGxNYWdpYyBTY2VuZXMgdGhhdCBzaG91bGQgYmUgc29ydGVkXHJcblx0XHQgKiBAcmV0dXJuIHthcnJheX0gVGhlIHNvcnRlZCBhcnJheSBvZiBTY2VuZXMuXHJcblx0XHQgKi9cclxuXHRcdHZhciBzb3J0U2NlbmVzID0gZnVuY3Rpb24gKFNjZW5lc0FycmF5KSB7XHJcblx0XHRcdGlmIChTY2VuZXNBcnJheS5sZW5ndGggPD0gMSkge1xyXG5cdFx0XHRcdHJldHVybiBTY2VuZXNBcnJheTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR2YXIgc2NlbmVzID0gU2NlbmVzQXJyYXkuc2xpY2UoMCk7XHJcblx0XHRcdFx0c2NlbmVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuXHRcdFx0XHRcdHJldHVybiBhLnNjcm9sbE9mZnNldCgpID4gYi5zY3JvbGxPZmZzZXQoKSA/IDEgOiAtMTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRyZXR1cm4gc2NlbmVzO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICogcHVibGljIGZ1bmN0aW9uc1xyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICovXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBZGQgb25lIG9yZSBtb3JlIHNjZW5lKHMpIHRvIHRoZSBjb250cm9sbGVyLiAgXHJcblx0XHQgKiBUaGlzIGlzIHRoZSBlcXVpdmFsZW50IHRvIGBTY2VuZS5hZGRUbyhjb250cm9sbGVyKWAuXHJcblx0XHQgKiBAcHVibGljXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gd2l0aCBhIHByZXZpb3VzbHkgZGVmaW5lZCBzY2VuZVxyXG5cdFx0ICogY29udHJvbGxlci5hZGRTY2VuZShzY2VuZSk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gd2l0aCBhIG5ld2x5IGNyZWF0ZWQgc2NlbmUuXHJcblx0XHQgKiBjb250cm9sbGVyLmFkZFNjZW5lKG5ldyBTY3JvbGxNYWdpYy5TY2VuZSh7ZHVyYXRpb24gOiAwfSkpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIGFkZGluZyBtdWx0aXBsZSBzY2VuZXNcclxuXHRcdCAqIGNvbnRyb2xsZXIuYWRkU2NlbmUoW3NjZW5lLCBzY2VuZTIsIG5ldyBTY3JvbGxNYWdpYy5TY2VuZSh7ZHVyYXRpb24gOiAwfSldKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0geyhTY3JvbGxNYWdpYy5TY2VuZXxhcnJheSl9IG5ld1NjZW5lIC0gU2Nyb2xsTWFnaWMgU2NlbmUgb3IgQXJyYXkgb2YgU2NlbmVzIHRvIGJlIGFkZGVkIHRvIHRoZSBjb250cm9sbGVyLlxyXG5cdFx0ICogQHJldHVybiB7Q29udHJvbGxlcn0gUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuYWRkU2NlbmUgPSBmdW5jdGlvbiAobmV3U2NlbmUpIHtcclxuXHRcdFx0aWYgKF91dGlsLnR5cGUuQXJyYXkobmV3U2NlbmUpKSB7XHJcblx0XHRcdFx0bmV3U2NlbmUuZm9yRWFjaChmdW5jdGlvbiAoc2NlbmUsIGluZGV4KSB7XHJcblx0XHRcdFx0XHRDb250cm9sbGVyLmFkZFNjZW5lKHNjZW5lKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSBlbHNlIGlmIChuZXdTY2VuZSBpbnN0YW5jZW9mIFNjcm9sbE1hZ2ljLlNjZW5lKSB7XHJcblx0XHRcdFx0aWYgKG5ld1NjZW5lLmNvbnRyb2xsZXIoKSAhPT0gQ29udHJvbGxlcikge1xyXG5cdFx0XHRcdFx0bmV3U2NlbmUuYWRkVG8oQ29udHJvbGxlcik7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChfc2NlbmVPYmplY3RzLmluZGV4T2YobmV3U2NlbmUpIDwgMCkge1xyXG5cdFx0XHRcdFx0Ly8gbmV3IHNjZW5lXHJcblx0XHRcdFx0XHRfc2NlbmVPYmplY3RzLnB1c2gobmV3U2NlbmUpOyAvLyBhZGQgdG8gYXJyYXlcclxuXHRcdFx0XHRcdF9zY2VuZU9iamVjdHMgPSBzb3J0U2NlbmVzKF9zY2VuZU9iamVjdHMpOyAvLyBzb3J0XHJcblx0XHRcdFx0XHRuZXdTY2VuZS5vbihcInNoaWZ0LmNvbnRyb2xsZXJfc29ydFwiLCBmdW5jdGlvbiAoKSB7IC8vIHJlc29ydCB3aGVuZXZlciBzY2VuZSBtb3Zlc1xyXG5cdFx0XHRcdFx0XHRfc2NlbmVPYmplY3RzID0gc29ydFNjZW5lcyhfc2NlbmVPYmplY3RzKTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0Ly8gaW5zZXJ0IEdsb2JhbCBkZWZhdWx0cy5cclxuXHRcdFx0XHRcdGZvciAodmFyIGtleSBpbiBfb3B0aW9ucy5nbG9iYWxTY2VuZU9wdGlvbnMpIHtcclxuXHRcdFx0XHRcdFx0aWYgKG5ld1NjZW5lW2tleV0pIHtcclxuXHRcdFx0XHRcdFx0XHRuZXdTY2VuZVtrZXldLmNhbGwobmV3U2NlbmUsIF9vcHRpb25zLmdsb2JhbFNjZW5lT3B0aW9uc1trZXldKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0bG9nKDMsIFwiYWRkaW5nIFNjZW5lIChub3cgXCIgKyBfc2NlbmVPYmplY3RzLmxlbmd0aCArIFwiIHRvdGFsKVwiKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bG9nKDEsIFwiRVJST1I6IGludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgZm9yICcuYWRkU2NlbmUoKSdcIik7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIENvbnRyb2xsZXI7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogUmVtb3ZlIG9uZSBvcmUgbW9yZSBzY2VuZShzKSBmcm9tIHRoZSBjb250cm9sbGVyLiAgXHJcblx0XHQgKiBUaGlzIGlzIHRoZSBlcXVpdmFsZW50IHRvIGBTY2VuZS5yZW1vdmUoKWAuXHJcblx0XHQgKiBAcHVibGljXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gcmVtb3ZlIGEgc2NlbmUgZnJvbSB0aGUgY29udHJvbGxlclxyXG5cdFx0ICogY29udHJvbGxlci5yZW1vdmVTY2VuZShzY2VuZSk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gcmVtb3ZlIG11bHRpcGxlIHNjZW5lcyBmcm9tIHRoZSBjb250cm9sbGVyXHJcblx0XHQgKiBjb250cm9sbGVyLnJlbW92ZVNjZW5lKFtzY2VuZSwgc2NlbmUyLCBzY2VuZTNdKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0geyhTY3JvbGxNYWdpYy5TY2VuZXxhcnJheSl9IFNjZW5lIC0gU2Nyb2xsTWFnaWMgU2NlbmUgb3IgQXJyYXkgb2YgU2NlbmVzIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgY29udHJvbGxlci5cclxuXHRcdCAqIEByZXR1cm5zIHtDb250cm9sbGVyfSBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5yZW1vdmVTY2VuZSA9IGZ1bmN0aW9uIChTY2VuZSkge1xyXG5cdFx0XHRpZiAoX3V0aWwudHlwZS5BcnJheShTY2VuZSkpIHtcclxuXHRcdFx0XHRTY2VuZS5mb3JFYWNoKGZ1bmN0aW9uIChzY2VuZSwgaW5kZXgpIHtcclxuXHRcdFx0XHRcdENvbnRyb2xsZXIucmVtb3ZlU2NlbmUoc2NlbmUpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHZhciBpbmRleCA9IF9zY2VuZU9iamVjdHMuaW5kZXhPZihTY2VuZSk7XHJcblx0XHRcdFx0aWYgKGluZGV4ID4gLTEpIHtcclxuXHRcdFx0XHRcdFNjZW5lLm9mZihcInNoaWZ0LmNvbnRyb2xsZXJfc29ydFwiKTtcclxuXHRcdFx0XHRcdF9zY2VuZU9iamVjdHMuc3BsaWNlKGluZGV4LCAxKTtcclxuXHRcdFx0XHRcdGxvZygzLCBcInJlbW92aW5nIFNjZW5lIChub3cgXCIgKyBfc2NlbmVPYmplY3RzLmxlbmd0aCArIFwiIGxlZnQpXCIpO1xyXG5cdFx0XHRcdFx0U2NlbmUucmVtb3ZlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBDb250cm9sbGVyO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHQgKiBVcGRhdGUgb25lIG9yZSBtb3JlIHNjZW5lKHMpIGFjY29yZGluZyB0byB0aGUgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBjb250YWluZXIuICBcclxuXHQgKiBUaGlzIGlzIHRoZSBlcXVpdmFsZW50IHRvIGBTY2VuZS51cGRhdGUoKWAuICBcclxuXHQgKiBUaGUgdXBkYXRlIG1ldGhvZCBjYWxjdWxhdGVzIHRoZSBzY2VuZSdzIHN0YXJ0IGFuZCBlbmQgcG9zaXRpb24gKGJhc2VkIG9uIHRoZSB0cmlnZ2VyIGVsZW1lbnQsIHRyaWdnZXIgaG9vaywgZHVyYXRpb24gYW5kIG9mZnNldCkgYW5kIGNoZWNrcyBpdCBhZ2FpbnN0IHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgY29udGFpbmVyLiAgXHJcblx0ICogSXQgdGhlbiB1cGRhdGVzIHRoZSBjdXJyZW50IHNjZW5lIHN0YXRlIGFjY29yZGluZ2x5IChvciBkb2VzIG5vdGhpbmcsIGlmIHRoZSBzdGF0ZSBpcyBhbHJlYWR5IGNvcnJlY3QpIOKAkyBQaW5zIHdpbGwgYmUgc2V0IHRvIHRoZWlyIGNvcnJlY3QgcG9zaXRpb24gYW5kIHR3ZWVucyB3aWxsIGJlIHVwZGF0ZWQgdG8gdGhlaXIgY29ycmVjdCBwcm9ncmVzcy4gIFxyXG5cdCAqIF8qKk5vdGU6KiogVGhpcyBtZXRob2QgZ2V0cyBjYWxsZWQgY29uc3RhbnRseSB3aGVuZXZlciBDb250cm9sbGVyIGRldGVjdHMgYSBjaGFuZ2UuIFRoZSBvbmx5IGFwcGxpY2F0aW9uIGZvciB5b3UgaXMgaWYgeW91IGNoYW5nZSBzb21ldGhpbmcgb3V0c2lkZSBvZiB0aGUgcmVhbG0gb2YgU2Nyb2xsTWFnaWMsIGxpa2UgbW92aW5nIHRoZSB0cmlnZ2VyIG9yIGNoYW5naW5nIHR3ZWVuIHBhcmFtZXRlcnMuX1xyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAZXhhbXBsZVxyXG5cdCAqIC8vIHVwZGF0ZSBhIHNwZWNpZmljIHNjZW5lIG9uIG5leHQgY3ljbGVcclxuIFx0ICogY29udHJvbGxlci51cGRhdGVTY2VuZShzY2VuZSk7XHJcbiBcdCAqXHJcblx0ICogLy8gdXBkYXRlIGEgc3BlY2lmaWMgc2NlbmUgaW1tZWRpYXRlbHlcclxuXHQgKiBjb250cm9sbGVyLnVwZGF0ZVNjZW5lKHNjZW5lLCB0cnVlKTtcclxuIFx0ICpcclxuXHQgKiAvLyB1cGRhdGUgbXVsdGlwbGUgc2NlbmVzIHNjZW5lIG9uIG5leHQgY3ljbGVcclxuXHQgKiBjb250cm9sbGVyLnVwZGF0ZVNjZW5lKFtzY2VuZTEsIHNjZW5lMiwgc2NlbmUzXSk7XHJcblx0ICpcclxuXHQgKiBAcGFyYW0ge1Njcm9sbE1hZ2ljLlNjZW5lfSBTY2VuZSAtIFNjcm9sbE1hZ2ljIFNjZW5lIG9yIEFycmF5IG9mIFNjZW5lcyB0aGF0IGlzL2FyZSBzdXBwb3NlZCB0byBiZSB1cGRhdGVkLlxyXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ltbWVkaWF0ZWx5PWZhbHNlXSAtIElmIGB0cnVlYCB0aGUgdXBkYXRlIHdpbGwgYmUgaW5zdGFudCwgaWYgYGZhbHNlYCBpdCB3aWxsIHdhaXQgdW50aWwgbmV4dCB1cGRhdGUgY3ljbGUuICBcclxuXHQgXHRcdFx0XHRcdFx0XHRcdFx0XHQgIFRoaXMgaXMgdXNlZnVsIHdoZW4gY2hhbmdpbmcgbXVsdGlwbGUgcHJvcGVydGllcyBvZiB0aGUgc2NlbmUgLSB0aGlzIHdheSBpdCB3aWxsIG9ubHkgYmUgdXBkYXRlZCBvbmNlIGFsbCBuZXcgcHJvcGVydGllcyBhcmUgc2V0ICh1cGRhdGVTY2VuZXMpLlxyXG5cdCAqIEByZXR1cm4ge0NvbnRyb2xsZXJ9IFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdCAqL1xyXG5cdFx0dGhpcy51cGRhdGVTY2VuZSA9IGZ1bmN0aW9uIChTY2VuZSwgaW1tZWRpYXRlbHkpIHtcclxuXHRcdFx0aWYgKF91dGlsLnR5cGUuQXJyYXkoU2NlbmUpKSB7XHJcblx0XHRcdFx0U2NlbmUuZm9yRWFjaChmdW5jdGlvbiAoc2NlbmUsIGluZGV4KSB7XHJcblx0XHRcdFx0XHRDb250cm9sbGVyLnVwZGF0ZVNjZW5lKHNjZW5lLCBpbW1lZGlhdGVseSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0aWYgKGltbWVkaWF0ZWx5KSB7XHJcblx0XHRcdFx0XHRTY2VuZS51cGRhdGUodHJ1ZSk7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChfdXBkYXRlU2NlbmVzT25OZXh0Q3ljbGUgIT09IHRydWUgJiYgU2NlbmUgaW5zdGFuY2VvZiBTY3JvbGxNYWdpYy5TY2VuZSkgeyAvLyBpZiBfdXBkYXRlU2NlbmVzT25OZXh0Q3ljbGUgaXMgdHJ1ZSwgYWxsIGNvbm5lY3RlZCBzY2VuZXMgYXJlIGFscmVhZHkgc2NoZWR1bGVkIGZvciB1cGRhdGVcclxuXHRcdFx0XHRcdC8vIHByZXAgYXJyYXkgZm9yIG5leHQgdXBkYXRlIGN5Y2xlXHJcblx0XHRcdFx0XHRfdXBkYXRlU2NlbmVzT25OZXh0Q3ljbGUgPSBfdXBkYXRlU2NlbmVzT25OZXh0Q3ljbGUgfHwgW107XHJcblx0XHRcdFx0XHRpZiAoX3VwZGF0ZVNjZW5lc09uTmV4dEN5Y2xlLmluZGV4T2YoU2NlbmUpID09IC0xKSB7XHJcblx0XHRcdFx0XHRcdF91cGRhdGVTY2VuZXNPbk5leHRDeWNsZS5wdXNoKFNjZW5lKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdF91cGRhdGVTY2VuZXNPbk5leHRDeWNsZSA9IHNvcnRTY2VuZXMoX3VwZGF0ZVNjZW5lc09uTmV4dEN5Y2xlKTsgLy8gc29ydFxyXG5cdFx0XHRcdFx0ZGVib3VuY2VVcGRhdGUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIENvbnRyb2xsZXI7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogVXBkYXRlcyB0aGUgY29udHJvbGxlciBwYXJhbXMgYW5kIGNhbGxzIHVwZGF0ZVNjZW5lIG9uIGV2ZXJ5IHNjZW5lLCB0aGF0IGlzIGF0dGFjaGVkIHRvIHRoZSBjb250cm9sbGVyLiAgXHJcblx0XHQgKiBTZWUgYENvbnRyb2xsZXIudXBkYXRlU2NlbmUoKWAgZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCB0aGlzIG1lYW5zLiAgXHJcblx0XHQgKiBJbiBtb3N0IGNhc2VzIHlvdSB3aWxsIG5vdCBuZWVkIHRoaXMgZnVuY3Rpb24sIGFzIGl0IGlzIGNhbGxlZCBjb25zdGFudGx5LCB3aGVuZXZlciBTY3JvbGxNYWdpYyBkZXRlY3RzIGEgc3RhdGUgY2hhbmdlIGV2ZW50LCBsaWtlIHJlc2l6ZSBvciBzY3JvbGwuICBcclxuXHRcdCAqIFRoZSBvbmx5IGFwcGxpY2F0aW9uIGZvciB0aGlzIG1ldGhvZCBpcyB3aGVuIFNjcm9sbE1hZ2ljIGZhaWxzIHRvIGRldGVjdCB0aGVzZSBldmVudHMuICBcclxuXHRcdCAqIE9uZSBhcHBsaWNhdGlvbiBpcyB3aXRoIHNvbWUgZXh0ZXJuYWwgc2Nyb2xsIGxpYnJhcmllcyAobGlrZSBpU2Nyb2xsKSB0aGF0IG1vdmUgYW4gaW50ZXJuYWwgY29udGFpbmVyIHRvIGEgbmVnYXRpdmUgb2Zmc2V0IGluc3RlYWQgb2YgYWN0dWFsbHkgc2Nyb2xsaW5nLiBJbiB0aGlzIGNhc2UgdGhlIHVwZGF0ZSBvbiB0aGUgY29udHJvbGxlciBuZWVkcyB0byBiZSBjYWxsZWQgd2hlbmV2ZXIgdGhlIGNoaWxkIGNvbnRhaW5lcidzIHBvc2l0aW9uIGNoYW5nZXMuXHJcblx0XHQgKiBGb3IgdGhpcyBjYXNlIHRoZXJlIHdpbGwgYWxzbyBiZSB0aGUgbmVlZCB0byBwcm92aWRlIGEgY3VzdG9tIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSB0aGUgY29ycmVjdCBzY3JvbGwgcG9zaXRpb24uIFNlZSBgQ29udHJvbGxlci5zY3JvbGxQb3MoKWAgZm9yIGRldGFpbHMuXHJcblx0XHQgKiBAcHVibGljXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gdXBkYXRlIHRoZSBjb250cm9sbGVyIG9uIG5leHQgY3ljbGUgKHNhdmVzIHBlcmZvcm1hbmNlIGR1ZSB0byBlbGltaW5hdGlvbiBvZiByZWR1bmRhbnQgdXBkYXRlcylcclxuXHRcdCAqIGNvbnRyb2xsZXIudXBkYXRlKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gdXBkYXRlIHRoZSBjb250cm9sbGVyIGltbWVkaWF0ZWx5XHJcblx0XHQgKiBjb250cm9sbGVyLnVwZGF0ZSh0cnVlKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbW1lZGlhdGVseT1mYWxzZV0gLSBJZiBgdHJ1ZWAgdGhlIHVwZGF0ZSB3aWxsIGJlIGluc3RhbnQsIGlmIGBmYWxzZWAgaXQgd2lsbCB3YWl0IHVudGlsIG5leHQgdXBkYXRlIGN5Y2xlIChiZXR0ZXIgcGVyZm9ybWFuY2UpXHJcblx0XHQgKiBAcmV0dXJuIHtDb250cm9sbGVyfSBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy51cGRhdGUgPSBmdW5jdGlvbiAoaW1tZWRpYXRlbHkpIHtcclxuXHRcdFx0b25DaGFuZ2Uoe1xyXG5cdFx0XHRcdHR5cGU6IFwicmVzaXplXCJcclxuXHRcdFx0fSk7IC8vIHdpbGwgdXBkYXRlIHNpemUgYW5kIHNldCBfdXBkYXRlU2NlbmVzT25OZXh0Q3ljbGUgdG8gdHJ1ZVxyXG5cdFx0XHRpZiAoaW1tZWRpYXRlbHkpIHtcclxuXHRcdFx0XHR1cGRhdGVTY2VuZXMoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gQ29udHJvbGxlcjtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBTY3JvbGwgdG8gYSBudW1lcmljIHNjcm9sbCBvZmZzZXQsIGEgRE9NIGVsZW1lbnQsIHRoZSBzdGFydCBvZiBhIHNjZW5lIG9yIHByb3ZpZGUgYW4gYWx0ZXJuYXRlIG1ldGhvZCBmb3Igc2Nyb2xsaW5nLiAgXHJcblx0XHQgKiBGb3IgdmVydGljYWwgY29udHJvbGxlcnMgaXQgd2lsbCBjaGFuZ2UgdGhlIHRvcCBzY3JvbGwgb2Zmc2V0IGFuZCBmb3IgaG9yaXpvbnRhbCBhcHBsaWNhdGlvbnMgaXQgd2lsbCBjaGFuZ2UgdGhlIGxlZnQgb2Zmc2V0LlxyXG5cdFx0ICogQHB1YmxpY1xyXG5cdFx0ICpcclxuXHRcdCAqIEBzaW5jZSAxLjEuMFxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIHNjcm9sbCB0byBhbiBvZmZzZXQgb2YgMTAwXHJcblx0XHQgKiBjb250cm9sbGVyLnNjcm9sbFRvKDEwMCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gc2Nyb2xsIHRvIGEgRE9NIGVsZW1lbnRcclxuXHRcdCAqIGNvbnRyb2xsZXIuc2Nyb2xsVG8oXCIjYW5jaG9yXCIpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHNjcm9sbCB0byB0aGUgYmVnaW5uaW5nIG9mIGEgc2NlbmVcclxuXHRcdCAqIHZhciBzY2VuZSA9IG5ldyBTY3JvbGxNYWdpYy5TY2VuZSh7b2Zmc2V0OiAyMDB9KTtcclxuXHRcdCAqIGNvbnRyb2xsZXIuc2Nyb2xsVG8oc2NlbmUpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIGRlZmluZSBhIG5ldyBzY3JvbGwgcG9zaXRpb24gbW9kaWZpY2F0aW9uIGZ1bmN0aW9uIChqUXVlcnkgYW5pbWF0ZSBpbnN0ZWFkIG9mIGp1bXApXHJcblx0XHQgKiBjb250cm9sbGVyLnNjcm9sbFRvKGZ1bmN0aW9uIChuZXdTY3JvbGxQb3MpIHtcclxuXHRcdCAqXHQkKFwiaHRtbCwgYm9keVwiKS5hbmltYXRlKHtzY3JvbGxUb3A6IG5ld1Njcm9sbFBvc30pO1xyXG5cdFx0ICogfSk7XHJcblx0XHQgKiBjb250cm9sbGVyLnNjcm9sbFRvKDEwMCk7IC8vIGNhbGwgYXMgdXN1YWwsIGJ1dCB0aGUgbmV3IGZ1bmN0aW9uIHdpbGwgYmUgdXNlZCBpbnN0ZWFkXHJcblx0XHQgKlxyXG5cdFx0ICogLy8gZGVmaW5lIGEgbmV3IHNjcm9sbCBmdW5jdGlvbiB3aXRoIGFuIGFkZGl0aW9uYWwgcGFyYW1ldGVyXHJcblx0XHQgKiBjb250cm9sbGVyLnNjcm9sbFRvKGZ1bmN0aW9uIChuZXdTY3JvbGxQb3MsIG1lc3NhZ2UpIHtcclxuXHRcdCAqICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcclxuXHRcdCAqXHQkKHRoaXMpLmFuaW1hdGUoe3Njcm9sbFRvcDogbmV3U2Nyb2xsUG9zfSk7XHJcblx0XHQgKiB9KTtcclxuXHRcdCAqIC8vIGNhbGwgYXMgdXN1YWwsIGJ1dCBzdXBwbHkgYW4gZXh0cmEgcGFyYW1ldGVyIHRvIHRoZSBkZWZpbmVkIGN1c3RvbSBmdW5jdGlvblxyXG5cdFx0ICogY29udHJvbGxlci5zY3JvbGxUbygxMDAsIFwibXkgbWVzc2FnZVwiKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBkZWZpbmUgYSBuZXcgc2Nyb2xsIGZ1bmN0aW9uIHdpdGggYW4gYWRkaXRpb25hbCBwYXJhbWV0ZXIgY29udGFpbmluZyBtdWx0aXBsZSB2YXJpYWJsZXNcclxuXHRcdCAqIGNvbnRyb2xsZXIuc2Nyb2xsVG8oZnVuY3Rpb24gKG5ld1Njcm9sbFBvcywgb3B0aW9ucykge1xyXG5cdFx0ICogIHNvbWVHbG9iYWxWYXIgPSBvcHRpb25zLmEgKyBvcHRpb25zLmI7XHJcblx0XHQgKlx0JCh0aGlzKS5hbmltYXRlKHtzY3JvbGxUb3A6IG5ld1Njcm9sbFBvc30pO1xyXG5cdFx0ICogfSk7XHJcblx0XHQgKiAvLyBjYWxsIGFzIHVzdWFsLCBidXQgc3VwcGx5IGFuIGV4dHJhIHBhcmFtZXRlciBjb250YWluaW5nIG11bHRpcGxlIG9wdGlvbnNcclxuXHRcdCAqIGNvbnRyb2xsZXIuc2Nyb2xsVG8oMTAwLCB7YTogMSwgYjogMn0pO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIGRlZmluZSBhIG5ldyBzY3JvbGwgZnVuY3Rpb24gd2l0aCBhIGNhbGxiYWNrIHN1cHBsaWVkIGFzIGFuIGFkZGl0aW9uYWwgcGFyYW1ldGVyXHJcblx0XHQgKiBjb250cm9sbGVyLnNjcm9sbFRvKGZ1bmN0aW9uIChuZXdTY3JvbGxQb3MsIGNhbGxiYWNrKSB7XHJcblx0XHQgKlx0JCh0aGlzKS5hbmltYXRlKHtzY3JvbGxUb3A6IG5ld1Njcm9sbFBvc30sIDQwMCwgXCJzd2luZ1wiLCBjYWxsYmFjayk7XHJcblx0XHQgKiB9KTtcclxuXHRcdCAqIC8vIGNhbGwgYXMgdXN1YWwsIGJ1dCBzdXBwbHkgYW4gZXh0cmEgcGFyYW1ldGVyLCB3aGljaCBpcyB1c2VkIGFzIGEgY2FsbGJhY2sgaW4gdGhlIHByZXZpb3VzbHkgZGVmaW5lZCBjdXN0b20gc2Nyb2xsIGZ1bmN0aW9uXHJcblx0XHQgKiBjb250cm9sbGVyLnNjcm9sbFRvKDEwMCwgZnVuY3Rpb24oKSB7XHJcblx0XHQgKlx0Y29uc29sZS5sb2coXCJzY3JvbGwgaGFzIGZpbmlzaGVkLlwiKTtcclxuXHRcdCAqIH0pO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7bWl4ZWR9IHNjcm9sbFRhcmdldCAtIFRoZSBzdXBwbGllZCBhcmd1bWVudCBjYW4gYmUgb25lIG9mIHRoZXNlIHR5cGVzOlxyXG5cdFx0ICogMS4gYG51bWJlcmAgLT4gVGhlIGNvbnRhaW5lciB3aWxsIHNjcm9sbCB0byB0aGlzIG5ldyBzY3JvbGwgb2Zmc2V0LlxyXG5cdFx0ICogMi4gYHN0cmluZ2Agb3IgYG9iamVjdGAgLT4gQ2FuIGJlIGEgc2VsZWN0b3Igb3IgYSBET00gb2JqZWN0LiAgXHJcblx0XHQgKiAgVGhlIGNvbnRhaW5lciB3aWxsIHNjcm9sbCB0byB0aGUgcG9zaXRpb24gb2YgdGhpcyBlbGVtZW50LlxyXG5cdFx0ICogMy4gYFNjcm9sbE1hZ2ljIFNjZW5lYCAtPiBUaGUgY29udGFpbmVyIHdpbGwgc2Nyb2xsIHRvIHRoZSBzdGFydCBvZiB0aGlzIHNjZW5lLlxyXG5cdFx0ICogNC4gYGZ1bmN0aW9uYCAtPiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgdXNlZCBmb3IgZnV0dXJlIHNjcm9sbCBwb3NpdGlvbiBtb2RpZmljYXRpb25zLiAgXHJcblx0XHQgKiAgVGhpcyBwcm92aWRlcyBhIHdheSBmb3IgeW91IHRvIGNoYW5nZSB0aGUgYmVoYXZpb3VyIG9mIHNjcm9sbGluZyBhbmQgYWRkaW5nIG5ldyBiZWhhdmlvdXIgbGlrZSBhbmltYXRpb24uIFRoZSBmdW5jdGlvbiByZWNlaXZlcyB0aGUgbmV3IHNjcm9sbCBwb3NpdGlvbiBhcyBhIHBhcmFtZXRlciBhbmQgYSByZWZlcmVuY2UgdG8gdGhlIGNvbnRhaW5lciBlbGVtZW50IHVzaW5nIGB0aGlzYC4gIFxyXG5cdFx0ICogIEl0IG1heSBhbHNvIG9wdGlvbmFsbHkgcmVjZWl2ZSBhbiBvcHRpb25hbCBhZGRpdGlvbmFsIHBhcmFtZXRlciAoc2VlIGJlbG93KSAgXHJcblx0XHQgKiAgXyoqTk9URToqKiAgXHJcblx0XHQgKiAgQWxsIG90aGVyIG9wdGlvbnMgd2lsbCBzdGlsbCB3b3JrIGFzIGV4cGVjdGVkLCB1c2luZyB0aGUgbmV3IGZ1bmN0aW9uIHRvIHNjcm9sbC5fXHJcblx0XHQgKiBAcGFyYW0ge21peGVkfSBbYWRkaXRpb25hbFBhcmFtZXRlcl0gLSBJZiBhIGN1c3RvbSBzY3JvbGwgZnVuY3Rpb24gd2FzIGRlZmluZWQgKHNlZSBhYm92ZSA0LiksIHlvdSBtYXkgd2FudCB0byBzdXBwbHkgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIHRvIGl0LCB3aGVuIGNhbGxpbmcgaXQuIFlvdSBjYW4gZG8gdGhpcyB1c2luZyB0aGlzIHBhcmFtZXRlciDigJMgc2VlIGV4YW1wbGVzIGZvciBkZXRhaWxzLiBQbGVhc2Ugbm90ZSwgdGhhdCB0aGlzIHBhcmFtZXRlciB3aWxsIGhhdmUgbm8gZWZmZWN0LCBpZiB5b3UgdXNlIHRoZSBkZWZhdWx0IHNjcm9sbGluZyBmdW5jdGlvbi5cclxuXHRcdCAqIEByZXR1cm5zIHtDb250cm9sbGVyfSBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5zY3JvbGxUbyA9IGZ1bmN0aW9uIChzY3JvbGxUYXJnZXQsIGFkZGl0aW9uYWxQYXJhbWV0ZXIpIHtcclxuXHRcdFx0aWYgKF91dGlsLnR5cGUuTnVtYmVyKHNjcm9sbFRhcmdldCkpIHsgLy8gZXhjZWN1dGVcclxuXHRcdFx0XHRzZXRTY3JvbGxQb3MuY2FsbChfb3B0aW9ucy5jb250YWluZXIsIHNjcm9sbFRhcmdldCwgYWRkaXRpb25hbFBhcmFtZXRlcik7XHJcblx0XHRcdH0gZWxzZSBpZiAoc2Nyb2xsVGFyZ2V0IGluc3RhbmNlb2YgU2Nyb2xsTWFnaWMuU2NlbmUpIHsgLy8gc2Nyb2xsIHRvIHNjZW5lXHJcblx0XHRcdFx0aWYgKHNjcm9sbFRhcmdldC5jb250cm9sbGVyKCkgPT09IENvbnRyb2xsZXIpIHsgLy8gY2hlY2sgaWYgdGhlIGNvbnRyb2xsZXIgaXMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgc2NlbmVcclxuXHRcdFx0XHRcdENvbnRyb2xsZXIuc2Nyb2xsVG8oc2Nyb2xsVGFyZ2V0LnNjcm9sbE9mZnNldCgpLCBhZGRpdGlvbmFsUGFyYW1ldGVyKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0bG9nKDIsIFwic2Nyb2xsVG8oKTogVGhlIHN1cHBsaWVkIHNjZW5lIGRvZXMgbm90IGJlbG9uZyB0byB0aGlzIGNvbnRyb2xsZXIuIFNjcm9sbCBjYW5jZWxsZWQuXCIsIHNjcm9sbFRhcmdldCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKF91dGlsLnR5cGUuRnVuY3Rpb24oc2Nyb2xsVGFyZ2V0KSkgeyAvLyBhc3NpZ24gbmV3IHNjcm9sbCBmdW5jdGlvblxyXG5cdFx0XHRcdHNldFNjcm9sbFBvcyA9IHNjcm9sbFRhcmdldDtcclxuXHRcdFx0fSBlbHNlIHsgLy8gc2Nyb2xsIHRvIGVsZW1lbnRcclxuXHRcdFx0XHR2YXIgZWxlbSA9IF91dGlsLmdldC5lbGVtZW50cyhzY3JvbGxUYXJnZXQpWzBdO1xyXG5cdFx0XHRcdGlmIChlbGVtKSB7XHJcblx0XHRcdFx0XHQvLyBpZiBwYXJlbnQgaXMgcGluIHNwYWNlciwgdXNlIHNwYWNlciBwb3NpdGlvbiBpbnN0ZWFkIHNvIGNvcnJlY3Qgc3RhcnQgcG9zaXRpb24gaXMgcmV0dXJuZWQgZm9yIHBpbm5lZCBlbGVtZW50cy5cclxuXHRcdFx0XHRcdHdoaWxlIChlbGVtLnBhcmVudE5vZGUuaGFzQXR0cmlidXRlKFBJTl9TUEFDRVJfQVRUUklCVVRFKSkge1xyXG5cdFx0XHRcdFx0XHRlbGVtID0gZWxlbS5wYXJlbnROb2RlO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0XHRwYXJhbSA9IF9vcHRpb25zLnZlcnRpY2FsID8gXCJ0b3BcIiA6IFwibGVmdFwiLCAvLyB3aGljaCBwYXJhbSBpcyBvZiBpbnRlcmVzdCA/XHJcblx0XHRcdFx0XHRcdGNvbnRhaW5lck9mZnNldCA9IF91dGlsLmdldC5vZmZzZXQoX29wdGlvbnMuY29udGFpbmVyKSwgLy8gY29udGFpbmVyIHBvc2l0aW9uIGlzIG5lZWRlZCBiZWNhdXNlIGVsZW1lbnQgb2Zmc2V0IGlzIHJldHVybmVkIGluIHJlbGF0aW9uIHRvIGRvY3VtZW50LCBub3QgaW4gcmVsYXRpb24gdG8gY29udGFpbmVyLlxyXG5cdFx0XHRcdFx0XHRlbGVtZW50T2Zmc2V0ID0gX3V0aWwuZ2V0Lm9mZnNldChlbGVtKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIV9pc0RvY3VtZW50KSB7IC8vIGNvbnRhaW5lciBpcyBub3QgdGhlIGRvY3VtZW50IHJvb3QsIHNvIHN1YnN0cmFjdCBzY3JvbGwgUG9zaXRpb24gdG8gZ2V0IGNvcnJlY3QgdHJpZ2dlciBlbGVtZW50IHBvc2l0aW9uIHJlbGF0aXZlIHRvIHNjcm9sbGNvbnRlbnRcclxuXHRcdFx0XHRcdFx0Y29udGFpbmVyT2Zmc2V0W3BhcmFtXSAtPSBDb250cm9sbGVyLnNjcm9sbFBvcygpO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdENvbnRyb2xsZXIuc2Nyb2xsVG8oZWxlbWVudE9mZnNldFtwYXJhbV0gLSBjb250YWluZXJPZmZzZXRbcGFyYW1dLCBhZGRpdGlvbmFsUGFyYW1ldGVyKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0bG9nKDIsIFwic2Nyb2xsVG8oKTogVGhlIHN1cHBsaWVkIGFyZ3VtZW50IGlzIGludmFsaWQuIFNjcm9sbCBjYW5jZWxsZWQuXCIsIHNjcm9sbFRhcmdldCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBDb250cm9sbGVyO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqICoqR2V0KiogdGhlIGN1cnJlbnQgc2Nyb2xsUG9zaXRpb24gb3IgKipTZXQqKiBhIG5ldyBtZXRob2QgdG8gY2FsY3VsYXRlIGl0LiAgXHJcblx0XHQgKiAtPiAqKkdFVCoqOlxyXG5cdFx0ICogV2hlbiB1c2VkIGFzIGEgZ2V0dGVyIHRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uLiAgXHJcblx0XHQgKiBUbyBnZXQgYSBjYWNoZWQgdmFsdWUgdXNlIENvbnRyb2xsZXIuaW5mbyhcInNjcm9sbFBvc1wiKSwgd2hpY2ggd2lsbCBiZSB1cGRhdGVkIGluIHRoZSB1cGRhdGUgY3ljbGUuICBcclxuXHRcdCAqIEZvciB2ZXJ0aWNhbCBjb250cm9sbGVycyBpdCB3aWxsIHJldHVybiB0aGUgdG9wIHNjcm9sbCBvZmZzZXQgYW5kIGZvciBob3Jpem9udGFsIGFwcGxpY2F0aW9ucyBpdCB3aWxsIHJldHVybiB0aGUgbGVmdCBvZmZzZXQuXHJcblx0XHQgKlxyXG5cdFx0ICogLT4gKipTRVQqKjpcclxuXHRcdCAqIFdoZW4gdXNlZCBhcyBhIHNldHRlciB0aGlzIG1ldGhvZCBwcm9kZXMgYSB3YXkgdG8gcGVybWFuZW50bHkgb3ZlcndyaXRlIHRoZSBjb250cm9sbGVyJ3Mgc2Nyb2xsIHBvc2l0aW9uIGNhbGN1bGF0aW9uLiAgXHJcblx0XHQgKiBBIHR5cGljYWwgdXNlY2FzZSBpcyB3aGVuIHRoZSBzY3JvbGwgcG9zaXRpb24gaXMgbm90IHJlZmxlY3RlZCBieSB0aGUgY29udGFpbmVycyBzY3JvbGxUb3Agb3Igc2Nyb2xsTGVmdCB2YWx1ZXMsIGJ1dCBmb3IgZXhhbXBsZSBieSB0aGUgaW5uZXIgb2Zmc2V0IG9mIGEgY2hpbGQgY29udGFpbmVyLiAgXHJcblx0XHQgKiBNb3ZpbmcgYSBjaGlsZCBjb250YWluZXIgaW5zaWRlIGEgcGFyZW50IGlzIGEgY29tbW9ubHkgdXNlZCBtZXRob2QgZm9yIHNldmVyYWwgc2Nyb2xsaW5nIGZyYW1ld29ya3MsIGluY2x1ZGluZyBpU2Nyb2xsLiAgXHJcblx0XHQgKiBCeSBwcm92aWRpbmcgYW4gYWx0ZXJuYXRlIGNhbGN1bGF0aW9uIGZ1bmN0aW9uIHlvdSBjYW4gbWFrZSBzdXJlIFNjcm9sbE1hZ2ljIHJlY2VpdmVzIHRoZSBjb3JyZWN0IHNjcm9sbCBwb3NpdGlvbi4gIFxyXG5cdFx0ICogUGxlYXNlIGFsc28gYmVhciBpbiBtaW5kIHRoYXQgeW91ciBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIHkgdmFsdWVzIGZvciB2ZXJ0aWNhbCBzY3JvbGxzIGFuIHggZm9yIGhvcml6b250YWxzLlxyXG5cdFx0ICpcclxuXHRcdCAqIFRvIGNoYW5nZSB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gcGxlYXNlIHVzZSBgQ29udHJvbGxlci5zY3JvbGxUbygpYC5cclxuXHRcdCAqIEBwdWJsaWNcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gZ2V0IHRoZSBjdXJyZW50IHNjcm9sbCBQb3NpdGlvblxyXG5cdFx0ICogdmFyIHNjcm9sbFBvcyA9IGNvbnRyb2xsZXIuc2Nyb2xsUG9zKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gc2V0IGEgbmV3IHNjcm9sbCBwb3NpdGlvbiBjYWxjdWxhdGlvbiBtZXRob2RcclxuXHRcdCAqIGNvbnRyb2xsZXIuc2Nyb2xsUG9zKGZ1bmN0aW9uICgpIHtcclxuXHRcdCAqXHRyZXR1cm4gdGhpcy5pbmZvKFwidmVydGljYWxcIikgPyAtbXljaGlsZGNvbnRhaW5lci55IDogLW15Y2hpbGRjb250YWluZXIueFxyXG5cdFx0ICogfSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbn0gW3Njcm9sbFBvc01ldGhvZF0gLSBUaGUgZnVuY3Rpb24gdG8gYmUgdXNlZCBmb3IgdGhlIHNjcm9sbCBwb3NpdGlvbiBjYWxjdWxhdGlvbiBvZiB0aGUgY29udGFpbmVyLlxyXG5cdFx0ICogQHJldHVybnMgeyhudW1iZXJ8Q29udHJvbGxlcil9IEN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIG9yIHBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLnNjcm9sbFBvcyA9IGZ1bmN0aW9uIChzY3JvbGxQb3NNZXRob2QpIHtcclxuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7IC8vIGdldFxyXG5cdFx0XHRcdHJldHVybiBnZXRTY3JvbGxQb3MuY2FsbChDb250cm9sbGVyKTtcclxuXHRcdFx0fSBlbHNlIHsgLy8gc2V0XHJcblx0XHRcdFx0aWYgKF91dGlsLnR5cGUuRnVuY3Rpb24oc2Nyb2xsUG9zTWV0aG9kKSkge1xyXG5cdFx0XHRcdFx0Z2V0U2Nyb2xsUG9zID0gc2Nyb2xsUG9zTWV0aG9kO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRsb2coMiwgXCJQcm92aWRlZCB2YWx1ZSBmb3IgbWV0aG9kICdzY3JvbGxQb3MnIGlzIG5vdCBhIGZ1bmN0aW9uLiBUbyBjaGFuZ2UgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIHVzZSAnc2Nyb2xsVG8oKScuXCIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gQ29udHJvbGxlcjtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAqKkdldCoqIGFsbCBpbmZvcyBvciBvbmUgaW4gcGFydGljdWxhciBhYm91dCB0aGUgY29udHJvbGxlci5cclxuXHRcdCAqIEBwdWJsaWNcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyByZXR1cm5zIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiAobnVtYmVyKVxyXG5cdFx0ICogdmFyIHNjcm9sbFBvcyA9IGNvbnRyb2xsZXIuaW5mbyhcInNjcm9sbFBvc1wiKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyByZXR1cm5zIGFsbCBpbmZvcyBhcyBhbiBvYmplY3RcclxuXHRcdCAqIHZhciBpbmZvcyA9IGNvbnRyb2xsZXIuaW5mbygpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBbYWJvdXRdIC0gSWYgcGFzc2VkIG9ubHkgdGhpcyBpbmZvIHdpbGwgYmUgcmV0dXJuZWQgaW5zdGVhZCBvZiBhbiBvYmplY3QgY29udGFpbmluZyBhbGwuICBcclxuXHRcdCBcdFx0XHRcdFx0XHRcdCBWYWxpZCBvcHRpb25zIGFyZTpcclxuXHRcdCBcdFx0XHRcdFx0XHRcdCAqKiBgXCJzaXplXCJgID0+IHRoZSBjdXJyZW50IHZpZXdwb3J0IHNpemUgb2YgdGhlIGNvbnRhaW5lclxyXG5cdFx0IFx0XHRcdFx0XHRcdFx0ICoqIGBcInZlcnRpY2FsXCJgID0+IHRydWUgaWYgdmVydGljYWwgc2Nyb2xsaW5nLCBvdGhlcndpc2UgZmFsc2VcclxuXHRcdCBcdFx0XHRcdFx0XHRcdCAqKiBgXCJzY3JvbGxQb3NcImAgPT4gdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXHJcblx0XHQgXHRcdFx0XHRcdFx0XHQgKiogYFwic2Nyb2xsRGlyZWN0aW9uXCJgID0+IHRoZSBsYXN0IGtub3duIGRpcmVjdGlvbiBvZiB0aGUgc2Nyb2xsXHJcblx0XHQgXHRcdFx0XHRcdFx0XHQgKiogYFwiY29udGFpbmVyXCJgID0+IHRoZSBjb250YWluZXIgZWxlbWVudFxyXG5cdFx0IFx0XHRcdFx0XHRcdFx0ICoqIGBcImlzRG9jdW1lbnRcImAgPT4gdHJ1ZSBpZiBjb250YWluZXIgZWxlbWVudCBpcyB0aGUgZG9jdW1lbnQuXHJcblx0XHQgKiBAcmV0dXJucyB7KG1peGVkfG9iamVjdCl9IFRoZSByZXF1ZXN0ZWQgaW5mbyhzKS5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5pbmZvID0gZnVuY3Rpb24gKGFib3V0KSB7XHJcblx0XHRcdHZhciB2YWx1ZXMgPSB7XHJcblx0XHRcdFx0c2l6ZTogX3ZpZXdQb3J0U2l6ZSwgLy8gY29udGFpbnMgaGVpZ2h0IG9yIHdpZHRoIChpbiByZWdhcmQgdG8gb3JpZW50YXRpb24pO1xyXG5cdFx0XHRcdHZlcnRpY2FsOiBfb3B0aW9ucy52ZXJ0aWNhbCxcclxuXHRcdFx0XHRzY3JvbGxQb3M6IF9zY3JvbGxQb3MsXHJcblx0XHRcdFx0c2Nyb2xsRGlyZWN0aW9uOiBfc2Nyb2xsRGlyZWN0aW9uLFxyXG5cdFx0XHRcdGNvbnRhaW5lcjogX29wdGlvbnMuY29udGFpbmVyLFxyXG5cdFx0XHRcdGlzRG9jdW1lbnQ6IF9pc0RvY3VtZW50XHJcblx0XHRcdH07XHJcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkgeyAvLyBnZXQgYWxsIGFzIGFuIG9iamVjdFxyXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XHJcblx0XHRcdH0gZWxzZSBpZiAodmFsdWVzW2Fib3V0XSAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlc1thYm91dF07XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bG9nKDEsIFwiRVJST1I6IG9wdGlvbiBcXFwiXCIgKyBhYm91dCArIFwiXFxcIiBpcyBub3QgYXZhaWxhYmxlXCIpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqICoqR2V0Kiogb3IgKipTZXQqKiB0aGUgY3VycmVudCBsb2dsZXZlbCBvcHRpb24gdmFsdWUuXHJcblx0XHQgKiBAcHVibGljXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGdldCB0aGUgY3VycmVudCB2YWx1ZVxyXG5cdFx0ICogdmFyIGxvZ2xldmVsID0gY29udHJvbGxlci5sb2dsZXZlbCgpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHNldCBhIG5ldyB2YWx1ZVxyXG5cdFx0ICogY29udHJvbGxlci5sb2dsZXZlbCgzKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge251bWJlcn0gW25ld0xvZ2xldmVsXSAtIFRoZSBuZXcgbG9nbGV2ZWwgc2V0dGluZyBvZiB0aGUgQ29udHJvbGxlci4gYFswLTNdYFxyXG5cdFx0ICogQHJldHVybnMgeyhudW1iZXJ8Q29udHJvbGxlcil9IEN1cnJlbnQgbG9nbGV2ZWwgb3IgcGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMubG9nbGV2ZWwgPSBmdW5jdGlvbiAobmV3TG9nbGV2ZWwpIHtcclxuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7IC8vIGdldFxyXG5cdFx0XHRcdHJldHVybiBfb3B0aW9ucy5sb2dsZXZlbDtcclxuXHRcdFx0fSBlbHNlIGlmIChfb3B0aW9ucy5sb2dsZXZlbCAhPSBuZXdMb2dsZXZlbCkgeyAvLyBzZXRcclxuXHRcdFx0XHRfb3B0aW9ucy5sb2dsZXZlbCA9IG5ld0xvZ2xldmVsO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBDb250cm9sbGVyO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqICoqR2V0Kiogb3IgKipTZXQqKiB0aGUgY3VycmVudCBlbmFibGVkIHN0YXRlIG9mIHRoZSBjb250cm9sbGVyLiAgXHJcblx0XHQgKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGRpc2FibGUgYWxsIFNjZW5lcyBjb25uZWN0ZWQgdG8gdGhlIGNvbnRyb2xsZXIgd2l0aG91dCBkZXN0cm95aW5nIG9yIHJlbW92aW5nIHRoZW0uXHJcblx0XHQgKiBAcHVibGljXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGdldCB0aGUgY3VycmVudCB2YWx1ZVxyXG5cdFx0ICogdmFyIGVuYWJsZWQgPSBjb250cm9sbGVyLmVuYWJsZWQoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBkaXNhYmxlIHRoZSBjb250cm9sbGVyXHJcblx0XHQgKiBjb250cm9sbGVyLmVuYWJsZWQoZmFsc2UpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW25ld1N0YXRlXSAtIFRoZSBuZXcgZW5hYmxlZCBzdGF0ZSBvZiB0aGUgY29udHJvbGxlciBgdHJ1ZWAgb3IgYGZhbHNlYC5cclxuXHRcdCAqIEByZXR1cm5zIHsoYm9vbGVhbnxDb250cm9sbGVyKX0gQ3VycmVudCBlbmFibGVkIHN0YXRlIG9yIHBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLmVuYWJsZWQgPSBmdW5jdGlvbiAobmV3U3RhdGUpIHtcclxuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7IC8vIGdldFxyXG5cdFx0XHRcdHJldHVybiBfZW5hYmxlZDtcclxuXHRcdFx0fSBlbHNlIGlmIChfZW5hYmxlZCAhPSBuZXdTdGF0ZSkgeyAvLyBzZXRcclxuXHRcdFx0XHRfZW5hYmxlZCA9ICEhbmV3U3RhdGU7XHJcblx0XHRcdFx0Q29udHJvbGxlci51cGRhdGVTY2VuZShfc2NlbmVPYmplY3RzLCB0cnVlKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gQ29udHJvbGxlcjtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBEZXN0cm95IHRoZSBDb250cm9sbGVyLCBhbGwgU2NlbmVzIGFuZCBldmVyeXRoaW5nLlxyXG5cdFx0ICogQHB1YmxpY1xyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyB3aXRob3V0IHJlc2V0dGluZyB0aGUgc2NlbmVzXHJcblx0XHQgKiBjb250cm9sbGVyID0gY29udHJvbGxlci5kZXN0cm95KCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gd2l0aCBzY2VuZSByZXNldFxyXG5cdFx0ICogY29udHJvbGxlciA9IGNvbnRyb2xsZXIuZGVzdHJveSh0cnVlKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXNldFNjZW5lcz1mYWxzZV0gLSBJZiBgdHJ1ZWAgdGhlIHBpbnMgYW5kIHR3ZWVucyAoaWYgZXhpc3RlbnQpIG9mIGFsbCBzY2VuZXMgd2lsbCBiZSByZXNldC5cclxuXHRcdCAqIEByZXR1cm5zIHtudWxsfSBOdWxsIHRvIHVuc2V0IGhhbmRsZXIgdmFyaWFibGVzLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLmRlc3Ryb3kgPSBmdW5jdGlvbiAocmVzZXRTY2VuZXMpIHtcclxuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dChfcmVmcmVzaFRpbWVvdXQpO1xyXG5cdFx0XHR2YXIgaSA9IF9zY2VuZU9iamVjdHMubGVuZ3RoO1xyXG5cdFx0XHR3aGlsZSAoaS0tKSB7XHJcblx0XHRcdFx0X3NjZW5lT2JqZWN0c1tpXS5kZXN0cm95KHJlc2V0U2NlbmVzKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRfb3B0aW9ucy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBvbkNoYW5nZSk7XHJcblx0XHRcdF9vcHRpb25zLmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIG9uQ2hhbmdlKTtcclxuXHRcdFx0X3V0aWwuY0FGKF91cGRhdGVUaW1lb3V0KTtcclxuXHRcdFx0bG9nKDMsIFwiZGVzdHJveWVkIFwiICsgTkFNRVNQQUNFICsgXCIgKHJlc2V0OiBcIiArIChyZXNldFNjZW5lcyA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiKSArIFwiKVwiKTtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIElOSVRcclxuXHRcdGNvbnN0cnVjdCgpO1xyXG5cdFx0cmV0dXJuIENvbnRyb2xsZXI7XHJcblx0fTtcclxuXHJcblx0Ly8gc3RvcmUgcGFnZXdpZGUgY29udHJvbGxlciBvcHRpb25zXHJcblx0dmFyIENPTlRST0xMRVJfT1BUSU9OUyA9IHtcclxuXHRcdGRlZmF1bHRzOiB7XHJcblx0XHRcdGNvbnRhaW5lcjogd2luZG93LFxyXG5cdFx0XHR2ZXJ0aWNhbDogdHJ1ZSxcclxuXHRcdFx0Z2xvYmFsU2NlbmVPcHRpb25zOiB7fSxcclxuXHRcdFx0bG9nbGV2ZWw6IDIsXHJcblx0XHRcdHJlZnJlc2hJbnRlcnZhbDogMTAwXHJcblx0XHR9XHJcblx0fTtcclxuXHQvKlxyXG5cdCAqIG1ldGhvZCB1c2VkIHRvIGFkZCBhbiBvcHRpb24gdG8gU2Nyb2xsTWFnaWMgU2NlbmVzLlxyXG5cdCAqL1xyXG5cdFNjcm9sbE1hZ2ljLkNvbnRyb2xsZXIuYWRkT3B0aW9uID0gZnVuY3Rpb24gKG5hbWUsIGRlZmF1bHRWYWx1ZSkge1xyXG5cdFx0Q09OVFJPTExFUl9PUFRJT05TLmRlZmF1bHRzW25hbWVdID0gZGVmYXVsdFZhbHVlO1xyXG5cdH07XHJcblx0Ly8gaW5zdGFuY2UgZXh0ZW5zaW9uIGZ1bmN0aW9uIGZvciBwbHVnaW5zXHJcblx0U2Nyb2xsTWFnaWMuQ29udHJvbGxlci5leHRlbmQgPSBmdW5jdGlvbiAoZXh0ZW5zaW9uKSB7XHJcblx0XHR2YXIgb2xkQ2xhc3MgPSB0aGlzO1xyXG5cdFx0U2Nyb2xsTWFnaWMuQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0b2xkQ2xhc3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHRcdFx0dGhpcy4kc3VwZXIgPSBfdXRpbC5leHRlbmQoe30sIHRoaXMpOyAvLyBjb3B5IHBhcmVudCBzdGF0ZVxyXG5cdFx0XHRyZXR1cm4gZXh0ZW5zaW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuXHRcdH07XHJcblx0XHRfdXRpbC5leHRlbmQoU2Nyb2xsTWFnaWMuQ29udHJvbGxlciwgb2xkQ2xhc3MpOyAvLyBjb3B5IHByb3BlcnRpZXNcclxuXHRcdFNjcm9sbE1hZ2ljLkNvbnRyb2xsZXIucHJvdG90eXBlID0gb2xkQ2xhc3MucHJvdG90eXBlOyAvLyBjb3B5IHByb3RvdHlwZVxyXG5cdFx0U2Nyb2xsTWFnaWMuQ29udHJvbGxlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTY3JvbGxNYWdpYy5Db250cm9sbGVyOyAvLyByZXN0b3JlIGNvbnN0cnVjdG9yXHJcblx0fTtcclxuXHJcblxyXG5cdC8qKlxyXG5cdCAqIEEgU2NlbmUgZGVmaW5lcyB3aGVyZSB0aGUgY29udHJvbGxlciBzaG91bGQgcmVhY3QgYW5kIGhvdy5cclxuXHQgKlxyXG5cdCAqIEBjbGFzc1xyXG5cdCAqXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiAvLyBjcmVhdGUgYSBzdGFuZGFyZCBzY2VuZSBhbmQgYWRkIGl0IHRvIGEgY29udHJvbGxlclxyXG5cdCAqIG5ldyBTY3JvbGxNYWdpYy5TY2VuZSgpXHJcblx0ICpcdFx0LmFkZFRvKGNvbnRyb2xsZXIpO1xyXG5cdCAqXHJcblx0ICogLy8gY3JlYXRlIGEgc2NlbmUgd2l0aCBjdXN0b20gb3B0aW9ucyBhbmQgYXNzaWduIGEgaGFuZGxlciB0byBpdC5cclxuXHQgKiB2YXIgc2NlbmUgPSBuZXcgU2Nyb2xsTWFnaWMuU2NlbmUoe1xyXG5cdCAqIFx0XHRkdXJhdGlvbjogMTAwLFxyXG5cdCAqXHRcdG9mZnNldDogMjAwLFxyXG5cdCAqXHRcdHRyaWdnZXJIb29rOiBcIm9uRW50ZXJcIixcclxuXHQgKlx0XHRyZXZlcnNlOiBmYWxzZVxyXG5cdCAqIH0pO1xyXG5cdCAqXHJcblx0ICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIE9wdGlvbnMgZm9yIHRoZSBTY2VuZS4gVGhlIG9wdGlvbnMgY2FuIGJlIHVwZGF0ZWQgYXQgYW55IHRpbWUuICBcclxuXHQgXHRcdFx0XHRcdFx0XHQgICBJbnN0ZWFkIG9mIHNldHRpbmcgdGhlIG9wdGlvbnMgZm9yIGVhY2ggc2NlbmUgaW5kaXZpZHVhbGx5IHlvdSBjYW4gYWxzbyBzZXQgdGhlbSBnbG9iYWxseSBpbiB0aGUgY29udHJvbGxlciBhcyB0aGUgY29udHJvbGxlcnMgYGdsb2JhbFNjZW5lT3B0aW9uc2Agb3B0aW9uLiBUaGUgb2JqZWN0IGFjY2VwdHMgdGhlIHNhbWUgcHJvcGVydGllcyBhcyB0aGUgb25lcyBiZWxvdy4gIFxyXG5cdCBcdFx0XHRcdFx0XHRcdCAgIFdoZW4gYSBzY2VuZSBpcyBhZGRlZCB0byB0aGUgY29udHJvbGxlciB0aGUgb3B0aW9ucyBkZWZpbmVkIHVzaW5nIHRoZSBTY2VuZSBjb25zdHJ1Y3RvciB3aWxsIGJlIG92ZXJ3cml0dGVuIGJ5IHRob3NlIHNldCBpbiBgZ2xvYmFsU2NlbmVPcHRpb25zYC5cclxuXHQgKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nfGZ1bmN0aW9uKX0gW29wdGlvbnMuZHVyYXRpb249MF0gLSBUaGUgZHVyYXRpb24gb2YgdGhlIHNjZW5lLiBcclxuXHQgXHRcdFx0XHRcdFBsZWFzZSBzZWUgYFNjZW5lLmR1cmF0aW9uKClgIGZvciBkZXRhaWxzLlxyXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5vZmZzZXQ9MF0gLSBPZmZzZXQgVmFsdWUgZm9yIHRoZSBUcmlnZ2VyIFBvc2l0aW9uLiBJZiBubyB0cmlnZ2VyRWxlbWVudCBpcyBkZWZpbmVkIHRoaXMgd2lsbCBiZSB0aGUgc2Nyb2xsIGRpc3RhbmNlIGZyb20gdGhlIHN0YXJ0IG9mIHRoZSBwYWdlLCBhZnRlciB3aGljaCB0aGUgc2NlbmUgd2lsbCBzdGFydC5cclxuXHQgKiBAcGFyYW0geyhzdHJpbmd8b2JqZWN0KX0gW29wdGlvbnMudHJpZ2dlckVsZW1lbnQ9bnVsbF0gLSBTZWxlY3RvciBvciBET00gb2JqZWN0IHRoYXQgZGVmaW5lcyB0aGUgc3RhcnQgb2YgdGhlIHNjZW5lLiBJZiB1bmRlZmluZWQgdGhlIHNjZW5lIHdpbGwgc3RhcnQgcmlnaHQgYXQgdGhlIHN0YXJ0IG9mIHRoZSBwYWdlICh1bmxlc3MgYW4gb2Zmc2V0IGlzIHNldCkuXHJcblx0ICogQHBhcmFtIHsobnVtYmVyfHN0cmluZyl9IFtvcHRpb25zLnRyaWdnZXJIb29rPVwib25DZW50ZXJcIl0gLSBDYW4gYmUgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxIGRlZmluaW5nIHRoZSBwb3NpdGlvbiBvZiB0aGUgdHJpZ2dlciBIb29rIGluIHJlbGF0aW9uIHRvIHRoZSB2aWV3cG9ydC4gIFxyXG5cdCBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgIENhbiBhbHNvIGJlIGRlZmluZWQgdXNpbmcgYSBzdHJpbmc6XHJcblx0IFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCAgKiogYFwib25FbnRlclwiYCA9PiBgMWBcclxuXHQgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ICAqKiBgXCJvbkNlbnRlclwiYCA9PiBgMC41YFxyXG5cdCBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgICoqIGBcIm9uTGVhdmVcImAgPT4gYDBgXHJcblx0ICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZXZlcnNlPXRydWVdIC0gU2hvdWxkIHRoZSBzY2VuZSByZXZlcnNlLCB3aGVuIHNjcm9sbGluZyB1cD9cclxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubG9nbGV2ZWw9Ml0gLSBMb2dsZXZlbCBmb3IgZGVidWdnaW5nLiBOb3RlIHRoYXQgbG9nZ2luZyBpcyBkaXNhYmxlZCBpbiB0aGUgbWluaWZpZWQgdmVyc2lvbiBvZiBTY3JvbGxNYWdpYy5cclxuXHQgXHRcdFx0XHRcdFx0XHRcdFx0XHQgICoqIGAwYCA9PiBzaWxlbnRcclxuXHQgXHRcdFx0XHRcdFx0XHRcdFx0XHQgICoqIGAxYCA9PiBlcnJvcnNcclxuXHQgXHRcdFx0XHRcdFx0XHRcdFx0XHQgICoqIGAyYCA9PiBlcnJvcnMsIHdhcm5pbmdzXHJcblx0IFx0XHRcdFx0XHRcdFx0XHRcdFx0ICAqKiBgM2AgPT4gZXJyb3JzLCB3YXJuaW5ncywgZGVidWdpbmZvXHJcblx0ICogXHJcblx0ICovXHJcblx0U2Nyb2xsTWFnaWMuU2NlbmUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG5cclxuXHRcdC8qXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKiBzZXR0aW5nc1xyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICovXHJcblxyXG5cdFx0dmFyXHJcblx0XHRcdE5BTUVTUEFDRSA9ICdTY3JvbGxNYWdpYy5TY2VuZScsXHJcblx0XHRcdFNDRU5FX1NUQVRFX0JFRk9SRSA9ICdCRUZPUkUnLFxyXG5cdFx0XHRTQ0VORV9TVEFURV9EVVJJTkcgPSAnRFVSSU5HJyxcclxuXHRcdFx0U0NFTkVfU1RBVEVfQUZURVIgPSAnQUZURVInLFxyXG5cdFx0XHRERUZBVUxUX09QVElPTlMgPSBTQ0VORV9PUFRJT05TLmRlZmF1bHRzO1xyXG5cclxuXHRcdC8qXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKiBwcml2YXRlIHZhcnNcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqL1xyXG5cclxuXHRcdHZhclxyXG5cdFx0XHRTY2VuZSA9IHRoaXMsXHJcblx0XHRcdF9vcHRpb25zID0gX3V0aWwuZXh0ZW5kKHt9LCBERUZBVUxUX09QVElPTlMsIG9wdGlvbnMpLFxyXG5cdFx0XHRfc3RhdGUgPSBTQ0VORV9TVEFURV9CRUZPUkUsXHJcblx0XHRcdF9wcm9ncmVzcyA9IDAsXHJcblx0XHRcdF9zY3JvbGxPZmZzZXQgPSB7XHJcblx0XHRcdFx0c3RhcnQ6IDAsXHJcblx0XHRcdFx0ZW5kOiAwXHJcblx0XHRcdH0sIC8vIHJlZmxlY3RzIHRoZSBjb250cm9sbGVycydzIHNjcm9sbCBwb3NpdGlvbiBmb3IgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIHNjZW5lIHJlc3BlY3RpdmVseVxyXG5cdFx0XHRfdHJpZ2dlclBvcyA9IDAsXHJcblx0XHRcdF9lbmFibGVkID0gdHJ1ZSxcclxuXHRcdFx0X2R1cmF0aW9uVXBkYXRlTWV0aG9kLFxyXG5cdFx0XHRfY29udHJvbGxlcjtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEludGVybmFsIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIG9mIHRoZSBTY3JvbGxNYWdpYyBTY2VuZVxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0Zm9yICh2YXIga2V5IGluIF9vcHRpb25zKSB7IC8vIGNoZWNrIHN1cHBsaWVkIG9wdGlvbnNcclxuXHRcdFx0XHRpZiAoIURFRkFVTFRfT1BUSU9OUy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcblx0XHRcdFx0XHRsb2coMiwgXCJXQVJOSU5HOiBVbmtub3duIG9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XHJcblx0XHRcdFx0XHRkZWxldGUgX29wdGlvbnNba2V5XTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gYWRkIGdldHRlcnMvc2V0dGVycyBmb3IgYWxsIHBvc3NpYmxlIG9wdGlvbnNcclxuXHRcdFx0Zm9yICh2YXIgb3B0aW9uTmFtZSBpbiBERUZBVUxUX09QVElPTlMpIHtcclxuXHRcdFx0XHRhZGRTY2VuZU9wdGlvbihvcHRpb25OYW1lKTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyB2YWxpZGF0ZSBhbGwgb3B0aW9uc1xyXG5cdFx0XHR2YWxpZGF0ZU9wdGlvbigpO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKlxyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICogRXZlbnQgTWFuYWdlbWVudFxyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICovXHJcblxyXG5cdFx0dmFyIF9saXN0ZW5lcnMgPSB7fTtcclxuXHRcdC8qKlxyXG5cdFx0ICogU2NlbmUgc3RhcnQgZXZlbnQuICBcclxuXHRcdCAqIEZpcmVzIHdoZW5ldmVyIHRoZSBzY3JvbGwgcG9zaXRpb24gaXRzIHRoZSBzdGFydGluZyBwb2ludCBvZiB0aGUgc2NlbmUuICBcclxuXHRcdCAqIEl0IHdpbGwgYWxzbyBmaXJlIHdoZW4gc2Nyb2xsaW5nIGJhY2sgdXAgZ29pbmcgb3ZlciB0aGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHNjZW5lLiBJZiB5b3Ugd2FudCBzb21ldGhpbmcgdG8gaGFwcGVuIG9ubHkgd2hlbiBzY3JvbGxpbmcgZG93bi9yaWdodCwgdXNlIHRoZSBzY3JvbGxEaXJlY3Rpb24gcGFyYW1ldGVyIHBhc3NlZCB0byB0aGUgY2FsbGJhY2suXHJcblx0XHQgKlxyXG5cdFx0ICogRm9yIGRldGFpbHMgb24gdGhpcyBldmVudCBhbmQgdGhlIG9yZGVyIGluIHdoaWNoIGl0IGlzIGZpcmVkLCBwbGVhc2UgcmV2aWV3IHRoZSB7QGxpbmsgU2NlbmUucHJvZ3Jlc3N9IG1ldGhvZC5cclxuXHRcdCAqXHJcblx0XHQgKiBAZXZlbnQgU2Nyb2xsTWFnaWMuU2NlbmUjc3RhcnRcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogc2NlbmUub24oXCJzdGFydFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHRcdCAqIFx0Y29uc29sZS5sb2coXCJIaXQgc3RhcnQgcG9pbnQgb2Ygc2NlbmUuXCIpO1xyXG5cdFx0ICogfSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHByb3BlcnR5IHtvYmplY3R9IGV2ZW50IC0gVGhlIGV2ZW50IE9iamVjdCBwYXNzZWQgdG8gZWFjaCBjYWxsYmFja1xyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnR5cGUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7U2NlbmV9IGV2ZW50LnRhcmdldCAtIFRoZSBTY2VuZSBvYmplY3QgdGhhdCB0cmlnZ2VyZWQgdGhpcyBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtudW1iZXJ9IGV2ZW50LnByb2dyZXNzIC0gUmVmbGVjdHMgdGhlIGN1cnJlbnQgcHJvZ3Jlc3Mgb2YgdGhlIHNjZW5lXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQuc3RhdGUgLSBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgc2NlbmUgYFwiQkVGT1JFXCJgIG9yIGBcIkRVUklOR1wiYFxyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnNjcm9sbERpcmVjdGlvbiAtIEluZGljYXRlcyB3aGljaCB3YXkgd2UgYXJlIHNjcm9sbGluZyBgXCJQQVVTRURcImAsIGBcIkZPUldBUkRcImAgb3IgYFwiUkVWRVJTRVwiYFxyXG5cdFx0ICovXHJcblx0XHQvKipcclxuXHRcdCAqIFNjZW5lIGVuZCBldmVudC4gIFxyXG5cdFx0ICogRmlyZXMgd2hlbmV2ZXIgdGhlIHNjcm9sbCBwb3NpdGlvbiBpdHMgdGhlIGVuZGluZyBwb2ludCBvZiB0aGUgc2NlbmUuICBcclxuXHRcdCAqIEl0IHdpbGwgYWxzbyBmaXJlIHdoZW4gc2Nyb2xsaW5nIGJhY2sgdXAgZnJvbSBhZnRlciB0aGUgc2NlbmUgYW5kIGdvaW5nIG92ZXIgaXRzIGVuZCBwb3NpdGlvbi4gSWYgeW91IHdhbnQgc29tZXRoaW5nIHRvIGhhcHBlbiBvbmx5IHdoZW4gc2Nyb2xsaW5nIGRvd24vcmlnaHQsIHVzZSB0aGUgc2Nyb2xsRGlyZWN0aW9uIHBhcmFtZXRlciBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrLlxyXG5cdFx0ICpcclxuXHRcdCAqIEZvciBkZXRhaWxzIG9uIHRoaXMgZXZlbnQgYW5kIHRoZSBvcmRlciBpbiB3aGljaCBpdCBpcyBmaXJlZCwgcGxlYXNlIHJldmlldyB0aGUge0BsaW5rIFNjZW5lLnByb2dyZXNzfSBtZXRob2QuXHJcblx0XHQgKlxyXG5cdFx0ICogQGV2ZW50IFNjcm9sbE1hZ2ljLlNjZW5lI2VuZFxyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiBzY2VuZS5vbihcImVuZFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHRcdCAqIFx0Y29uc29sZS5sb2coXCJIaXQgZW5kIHBvaW50IG9mIHNjZW5lLlwiKTtcclxuXHRcdCAqIH0pO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBldmVudCAtIFRoZSBldmVudCBPYmplY3QgcGFzc2VkIHRvIGVhY2ggY2FsbGJhY2tcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC50eXBlIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge1NjZW5lfSBldmVudC50YXJnZXQgLSBUaGUgU2NlbmUgb2JqZWN0IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBldmVudC5wcm9ncmVzcyAtIFJlZmxlY3RzIHRoZSBjdXJyZW50IHByb2dyZXNzIG9mIHRoZSBzY2VuZVxyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnN0YXRlIC0gVGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHNjZW5lIGBcIkRVUklOR1wiYCBvciBgXCJBRlRFUlwiYFxyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnNjcm9sbERpcmVjdGlvbiAtIEluZGljYXRlcyB3aGljaCB3YXkgd2UgYXJlIHNjcm9sbGluZyBgXCJQQVVTRURcImAsIGBcIkZPUldBUkRcImAgb3IgYFwiUkVWRVJTRVwiYFxyXG5cdFx0ICovXHJcblx0XHQvKipcclxuXHRcdCAqIFNjZW5lIGVudGVyIGV2ZW50LiAgXHJcblx0XHQgKiBGaXJlcyB3aGVuZXZlciB0aGUgc2NlbmUgZW50ZXJzIHRoZSBcIkRVUklOR1wiIHN0YXRlLiAgXHJcblx0XHQgKiBLZWVwIGluIG1pbmQgdGhhdCBpdCBkb2Vzbid0IG1hdHRlciBpZiB0aGUgc2NlbmUgcGxheXMgZm9yd2FyZCBvciBiYWNrd2FyZDogVGhpcyBldmVudCBhbHdheXMgZmlyZXMgd2hlbiB0aGUgc2NlbmUgZW50ZXJzIGl0cyBhY3RpdmUgc2Nyb2xsIHRpbWVmcmFtZSwgcmVnYXJkbGVzcyBvZiB0aGUgc2Nyb2xsLWRpcmVjdGlvbi5cclxuXHRcdCAqXHJcblx0XHQgKiBGb3IgZGV0YWlscyBvbiB0aGlzIGV2ZW50IGFuZCB0aGUgb3JkZXIgaW4gd2hpY2ggaXQgaXMgZmlyZWQsIHBsZWFzZSByZXZpZXcgdGhlIHtAbGluayBTY2VuZS5wcm9ncmVzc30gbWV0aG9kLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBldmVudCBTY3JvbGxNYWdpYy5TY2VuZSNlbnRlclxyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiBzY2VuZS5vbihcImVudGVyXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cdFx0ICogXHRjb25zb2xlLmxvZyhcIlNjZW5lIGVudGVyZWQuXCIpO1xyXG5cdFx0ICogfSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHByb3BlcnR5IHtvYmplY3R9IGV2ZW50IC0gVGhlIGV2ZW50IE9iamVjdCBwYXNzZWQgdG8gZWFjaCBjYWxsYmFja1xyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnR5cGUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7U2NlbmV9IGV2ZW50LnRhcmdldCAtIFRoZSBTY2VuZSBvYmplY3QgdGhhdCB0cmlnZ2VyZWQgdGhpcyBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtudW1iZXJ9IGV2ZW50LnByb2dyZXNzIC0gUmVmbGVjdHMgdGhlIGN1cnJlbnQgcHJvZ3Jlc3Mgb2YgdGhlIHNjZW5lXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQuc3RhdGUgLSBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgc2NlbmUgLSBhbHdheXMgYFwiRFVSSU5HXCJgXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQuc2Nyb2xsRGlyZWN0aW9uIC0gSW5kaWNhdGVzIHdoaWNoIHdheSB3ZSBhcmUgc2Nyb2xsaW5nIGBcIlBBVVNFRFwiYCwgYFwiRk9SV0FSRFwiYCBvciBgXCJSRVZFUlNFXCJgXHJcblx0XHQgKi9cclxuXHRcdC8qKlxyXG5cdFx0ICogU2NlbmUgbGVhdmUgZXZlbnQuICBcclxuXHRcdCAqIEZpcmVzIHdoZW5ldmVyIHRoZSBzY2VuZSdzIHN0YXRlIGdvZXMgZnJvbSBcIkRVUklOR1wiIHRvIGVpdGhlciBcIkJFRk9SRVwiIG9yIFwiQUZURVJcIi4gIFxyXG5cdFx0ICogS2VlcCBpbiBtaW5kIHRoYXQgaXQgZG9lc24ndCBtYXR0ZXIgaWYgdGhlIHNjZW5lIHBsYXlzIGZvcndhcmQgb3IgYmFja3dhcmQ6IFRoaXMgZXZlbnQgYWx3YXlzIGZpcmVzIHdoZW4gdGhlIHNjZW5lIGxlYXZlcyBpdHMgYWN0aXZlIHNjcm9sbCB0aW1lZnJhbWUsIHJlZ2FyZGxlc3Mgb2YgdGhlIHNjcm9sbC1kaXJlY3Rpb24uXHJcblx0XHQgKlxyXG5cdFx0ICogRm9yIGRldGFpbHMgb24gdGhpcyBldmVudCBhbmQgdGhlIG9yZGVyIGluIHdoaWNoIGl0IGlzIGZpcmVkLCBwbGVhc2UgcmV2aWV3IHRoZSB7QGxpbmsgU2NlbmUucHJvZ3Jlc3N9IG1ldGhvZC5cclxuXHRcdCAqXHJcblx0XHQgKiBAZXZlbnQgU2Nyb2xsTWFnaWMuU2NlbmUjbGVhdmVcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogc2NlbmUub24oXCJsZWF2ZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHRcdCAqIFx0Y29uc29sZS5sb2coXCJTY2VuZSBsZWZ0LlwiKTtcclxuXHRcdCAqIH0pO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBldmVudCAtIFRoZSBldmVudCBPYmplY3QgcGFzc2VkIHRvIGVhY2ggY2FsbGJhY2tcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC50eXBlIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge1NjZW5lfSBldmVudC50YXJnZXQgLSBUaGUgU2NlbmUgb2JqZWN0IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBldmVudC5wcm9ncmVzcyAtIFJlZmxlY3RzIHRoZSBjdXJyZW50IHByb2dyZXNzIG9mIHRoZSBzY2VuZVxyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnN0YXRlIC0gVGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHNjZW5lIGBcIkJFRk9SRVwiYCBvciBgXCJBRlRFUlwiYFxyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnNjcm9sbERpcmVjdGlvbiAtIEluZGljYXRlcyB3aGljaCB3YXkgd2UgYXJlIHNjcm9sbGluZyBgXCJQQVVTRURcImAsIGBcIkZPUldBUkRcImAgb3IgYFwiUkVWRVJTRVwiYFxyXG5cdFx0ICovXHJcblx0XHQvKipcclxuXHRcdCAqIFNjZW5lIHVwZGF0ZSBldmVudC4gIFxyXG5cdFx0ICogRmlyZXMgd2hlbmV2ZXIgdGhlIHNjZW5lIGlzIHVwZGF0ZWQgKGJ1dCBub3QgbmVjZXNzYXJpbHkgY2hhbmdlcyB0aGUgcHJvZ3Jlc3MpLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBldmVudCBTY3JvbGxNYWdpYy5TY2VuZSN1cGRhdGVcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogc2NlbmUub24oXCJ1cGRhdGVcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcblx0XHQgKiBcdGNvbnNvbGUubG9nKFwiU2NlbmUgdXBkYXRlZC5cIik7XHJcblx0XHQgKiB9KTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcHJvcGVydHkge29iamVjdH0gZXZlbnQgLSBUaGUgZXZlbnQgT2JqZWN0IHBhc3NlZCB0byBlYWNoIGNhbGxiYWNrXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQudHlwZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtTY2VuZX0gZXZlbnQudGFyZ2V0IC0gVGhlIFNjZW5lIG9iamVjdCB0aGF0IHRyaWdnZXJlZCB0aGlzIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge251bWJlcn0gZXZlbnQuc3RhcnRQb3MgLSBUaGUgc3RhcnRpbmcgcG9zaXRpb24gb2YgdGhlIHNjZW5lIChpbiByZWxhdGlvbiB0byB0aGUgY29uYWluZXIpXHJcblx0XHQgKiBAcHJvcGVydHkge251bWJlcn0gZXZlbnQuZW5kUG9zIC0gVGhlIGVuZGluZyBwb3NpdGlvbiBvZiB0aGUgc2NlbmUgKGluIHJlbGF0aW9uIHRvIHRoZSBjb25haW5lcilcclxuXHRcdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBldmVudC5zY3JvbGxQb3MgLSBUaGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIGNvbnRhaW5lclxyXG5cdFx0ICovXHJcblx0XHQvKipcclxuXHRcdCAqIFNjZW5lIHByb2dyZXNzIGV2ZW50LiAgXHJcblx0XHQgKiBGaXJlcyB3aGVuZXZlciB0aGUgcHJvZ3Jlc3Mgb2YgdGhlIHNjZW5lIGNoYW5nZXMuXHJcblx0XHQgKlxyXG5cdFx0ICogRm9yIGRldGFpbHMgb24gdGhpcyBldmVudCBhbmQgdGhlIG9yZGVyIGluIHdoaWNoIGl0IGlzIGZpcmVkLCBwbGVhc2UgcmV2aWV3IHRoZSB7QGxpbmsgU2NlbmUucHJvZ3Jlc3N9IG1ldGhvZC5cclxuXHRcdCAqXHJcblx0XHQgKiBAZXZlbnQgU2Nyb2xsTWFnaWMuU2NlbmUjcHJvZ3Jlc3NcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogc2NlbmUub24oXCJwcm9ncmVzc1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHRcdCAqIFx0Y29uc29sZS5sb2coXCJTY2VuZSBwcm9ncmVzcyBjaGFuZ2VkIHRvIFwiICsgZXZlbnQucHJvZ3Jlc3MpO1xyXG5cdFx0ICogfSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHByb3BlcnR5IHtvYmplY3R9IGV2ZW50IC0gVGhlIGV2ZW50IE9iamVjdCBwYXNzZWQgdG8gZWFjaCBjYWxsYmFja1xyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnR5cGUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7U2NlbmV9IGV2ZW50LnRhcmdldCAtIFRoZSBTY2VuZSBvYmplY3QgdGhhdCB0cmlnZ2VyZWQgdGhpcyBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtudW1iZXJ9IGV2ZW50LnByb2dyZXNzIC0gUmVmbGVjdHMgdGhlIGN1cnJlbnQgcHJvZ3Jlc3Mgb2YgdGhlIHNjZW5lXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQuc3RhdGUgLSBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgc2NlbmUgYFwiQkVGT1JFXCJgLCBgXCJEVVJJTkdcImAgb3IgYFwiQUZURVJcImBcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC5zY3JvbGxEaXJlY3Rpb24gLSBJbmRpY2F0ZXMgd2hpY2ggd2F5IHdlIGFyZSBzY3JvbGxpbmcgYFwiUEFVU0VEXCJgLCBgXCJGT1JXQVJEXCJgIG9yIGBcIlJFVkVSU0VcImBcclxuXHRcdCAqL1xyXG5cdFx0LyoqXHJcblx0XHQgKiBTY2VuZSBjaGFuZ2UgZXZlbnQuICBcclxuXHRcdCAqIEZpcmVzIHdoZW52ZXZlciBhIHByb3BlcnR5IG9mIHRoZSBzY2VuZSBpcyBjaGFuZ2VkLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBldmVudCBTY3JvbGxNYWdpYy5TY2VuZSNjaGFuZ2VcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogc2NlbmUub24oXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcblx0XHQgKiBcdGNvbnNvbGUubG9nKFwiU2NlbmUgUHJvcGVydHkgXFxcIlwiICsgZXZlbnQud2hhdCArIFwiXFxcIiBjaGFuZ2VkIHRvIFwiICsgZXZlbnQubmV3dmFsKTtcclxuXHRcdCAqIH0pO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBldmVudCAtIFRoZSBldmVudCBPYmplY3QgcGFzc2VkIHRvIGVhY2ggY2FsbGJhY2tcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC50eXBlIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge1NjZW5lfSBldmVudC50YXJnZXQgLSBUaGUgU2NlbmUgb2JqZWN0IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC53aGF0IC0gSW5kaWNhdGVzIHdoYXQgdmFsdWUgaGFzIGJlZW4gY2hhbmdlZFxyXG5cdFx0ICogQHByb3BlcnR5IHttaXhlZH0gZXZlbnQubmV3dmFsIC0gVGhlIG5ldyB2YWx1ZSBvZiB0aGUgY2hhbmdlZCBwcm9wZXJ0eVxyXG5cdFx0ICovXHJcblx0XHQvKipcclxuXHRcdCAqIFNjZW5lIHNoaWZ0IGV2ZW50LiAgXHJcblx0XHQgKiBGaXJlcyB3aGVudmV2ZXIgdGhlIHN0YXJ0IG9yIGVuZCAqKnNjcm9sbCBvZmZzZXQqKiBvZiB0aGUgc2NlbmUgY2hhbmdlLlxyXG5cdFx0ICogVGhpcyBoYXBwZW5zIGV4cGxpY2l0ZWx5LCB3aGVuIG9uZSBvZiB0aGVzZSB2YWx1ZXMgY2hhbmdlOiBgb2Zmc2V0YCwgYGR1cmF0aW9uYCBvciBgdHJpZ2dlckhvb2tgLlxyXG5cdFx0ICogSXQgd2lsbCBmaXJlIGltcGxpY2l0bHkgd2hlbiB0aGUgYHRyaWdnZXJFbGVtZW50YCBjaGFuZ2VzLCBpZiB0aGUgbmV3IGVsZW1lbnQgaGFzIGEgZGlmZmVyZW50IHBvc2l0aW9uIChtb3N0IGNhc2VzKS5cclxuXHRcdCAqIEl0IHdpbGwgYWxzbyBmaXJlIGltcGxpY2l0bHkgd2hlbiB0aGUgc2l6ZSBvZiB0aGUgY29udGFpbmVyIGNoYW5nZXMgYW5kIHRoZSB0cmlnZ2VySG9vayBpcyBhbnl0aGluZyBvdGhlciB0aGFuIGBvbkxlYXZlYC5cclxuXHRcdCAqXHJcblx0XHQgKiBAZXZlbnQgU2Nyb2xsTWFnaWMuU2NlbmUjc2hpZnRcclxuXHRcdCAqIEBzaW5jZSAxLjEuMFxyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiBzY2VuZS5vbihcInNoaWZ0XCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cdFx0ICogXHRjb25zb2xlLmxvZyhcIlNjZW5lIG1vdmVkLCBiZWNhdXNlIHRoZSBcIiArIGV2ZW50LnJlYXNvbiArIFwiIGhhcyBjaGFuZ2VkLilcIik7XHJcblx0XHQgKiB9KTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcHJvcGVydHkge29iamVjdH0gZXZlbnQgLSBUaGUgZXZlbnQgT2JqZWN0IHBhc3NlZCB0byBlYWNoIGNhbGxiYWNrXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQudHlwZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtTY2VuZX0gZXZlbnQudGFyZ2V0IC0gVGhlIFNjZW5lIG9iamVjdCB0aGF0IHRyaWdnZXJlZCB0aGlzIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQucmVhc29uIC0gSW5kaWNhdGVzIHdoeSB0aGUgc2NlbmUgaGFzIHNoaWZ0ZWRcclxuXHRcdCAqL1xyXG5cdFx0LyoqXHJcblx0XHQgKiBTY2VuZSBkZXN0cm95IGV2ZW50LiAgXHJcblx0XHQgKiBGaXJlcyB3aGVudmV2ZXIgdGhlIHNjZW5lIGlzIGRlc3Ryb3llZC5cclxuXHRcdCAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gdGlkeSB1cCBjdXN0b20gYmVoYXZpb3VyIHVzZWQgaW4gZXZlbnRzLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBldmVudCBTY3JvbGxNYWdpYy5TY2VuZSNkZXN0cm95XHJcblx0XHQgKiBAc2luY2UgMS4xLjBcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogc2NlbmUub24oXCJlbnRlclwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHRcdCAqICAgICAgICAvLyBhZGQgY3VzdG9tIGFjdGlvblxyXG5cdFx0ICogICAgICAgICQoXCIjbXktZWxlbVwiKS5sZWZ0KFwiMjAwXCIpO1xyXG5cdFx0ICogICAgICB9KVxyXG5cdFx0ICogICAgICAub24oXCJkZXN0cm95XCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cdFx0ICogICAgICAgIC8vIHJlc2V0IG15IGVsZW1lbnQgdG8gc3RhcnQgcG9zaXRpb25cclxuXHRcdCAqICAgICAgICBpZiAoZXZlbnQucmVzZXQpIHtcclxuXHRcdCAqICAgICAgICAgICQoXCIjbXktZWxlbVwiKS5sZWZ0KFwiMFwiKTtcclxuXHRcdCAqICAgICAgICB9XHJcblx0XHQgKiAgICAgIH0pO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBldmVudCAtIFRoZSBldmVudCBPYmplY3QgcGFzc2VkIHRvIGVhY2ggY2FsbGJhY2tcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC50eXBlIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge1NjZW5lfSBldmVudC50YXJnZXQgLSBUaGUgU2NlbmUgb2JqZWN0IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZXZlbnQucmVzZXQgLSBJbmRpY2F0ZXMgaWYgdGhlIGRlc3Ryb3kgbWV0aG9kIHdhcyBjYWxsZWQgd2l0aCByZXNldCBgdHJ1ZWAgb3IgYGZhbHNlYC5cclxuXHRcdCAqL1xyXG5cdFx0LyoqXHJcblx0XHQgKiBTY2VuZSBhZGQgZXZlbnQuICBcclxuXHRcdCAqIEZpcmVzIHdoZW4gdGhlIHNjZW5lIGlzIGFkZGVkIHRvIGEgY29udHJvbGxlci5cclxuXHRcdCAqIFRoaXMgaXMgbW9zdGx5IHVzZWQgYnkgcGx1Z2lucyB0byBrbm93IHRoYXQgY2hhbmdlIG1pZ2h0IGJlIGR1ZS5cclxuXHRcdCAqXHJcblx0XHQgKiBAZXZlbnQgU2Nyb2xsTWFnaWMuU2NlbmUjYWRkXHJcblx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogc2NlbmUub24oXCJhZGRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcblx0XHQgKiBcdGNvbnNvbGUubG9nKCdTY2VuZSB3YXMgYWRkZWQgdG8gYSBuZXcgY29udHJvbGxlci4nKTtcclxuXHRcdCAqIH0pO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBldmVudCAtIFRoZSBldmVudCBPYmplY3QgcGFzc2VkIHRvIGVhY2ggY2FsbGJhY2tcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC50eXBlIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge1NjZW5lfSBldmVudC50YXJnZXQgLSBUaGUgU2NlbmUgb2JqZWN0IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZXZlbnQuY29udHJvbGxlciAtIFRoZSBjb250cm9sbGVyIG9iamVjdCB0aGUgc2NlbmUgd2FzIGFkZGVkIHRvLlxyXG5cdFx0ICovXHJcblx0XHQvKipcclxuXHRcdCAqIFNjZW5lIHJlbW92ZSBldmVudC4gIFxyXG5cdFx0ICogRmlyZXMgd2hlbiB0aGUgc2NlbmUgaXMgcmVtb3ZlZCBmcm9tIGEgY29udHJvbGxlci5cclxuXHRcdCAqIFRoaXMgaXMgbW9zdGx5IHVzZWQgYnkgcGx1Z2lucyB0byBrbm93IHRoYXQgY2hhbmdlIG1pZ2h0IGJlIGR1ZS5cclxuXHRcdCAqXHJcblx0XHQgKiBAZXZlbnQgU2Nyb2xsTWFnaWMuU2NlbmUjcmVtb3ZlXHJcblx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogc2NlbmUub24oXCJyZW1vdmVcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcblx0XHQgKiBcdGNvbnNvbGUubG9nKCdTY2VuZSB3YXMgcmVtb3ZlZCBmcm9tIGl0cyBjb250cm9sbGVyLicpO1xyXG5cdFx0ICogfSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHByb3BlcnR5IHtvYmplY3R9IGV2ZW50IC0gVGhlIGV2ZW50IE9iamVjdCBwYXNzZWQgdG8gZWFjaCBjYWxsYmFja1xyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnR5cGUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7U2NlbmV9IGV2ZW50LnRhcmdldCAtIFRoZSBTY2VuZSBvYmplY3QgdGhhdCB0cmlnZ2VyZWQgdGhpcyBldmVudFxyXG5cdFx0ICovXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBZGQgb25lIG9yZSBtb3JlIGV2ZW50IGxpc3RlbmVyLiAgXHJcblx0XHQgKiBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gd2lsbCBiZSBmaXJlZCBhdCB0aGUgcmVzcGVjdGl2ZSBldmVudCwgYW5kIGFuIG9iamVjdCBjb250YWluaW5nIHJlbGV2YW50IGRhdGEgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrLlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNvblxyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiBmdW5jdGlvbiBjYWxsYmFjayAoZXZlbnQpIHtcclxuXHRcdCAqIFx0XHRjb25zb2xlLmxvZyhcIkV2ZW50IGZpcmVkISAoXCIgKyBldmVudC50eXBlICsgXCIpXCIpO1xyXG5cdFx0ICogfVxyXG5cdFx0ICogLy8gYWRkIGxpc3RlbmVyc1xyXG5cdFx0ICogc2NlbmUub24oXCJjaGFuZ2UgdXBkYXRlIHByb2dyZXNzIHN0YXJ0IGVuZCBlbnRlciBsZWF2ZVwiLCBjYWxsYmFjayk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWVzIC0gVGhlIG5hbWUgb3IgbmFtZXMgb2YgdGhlIGV2ZW50IHRoZSBjYWxsYmFjayBzaG91bGQgYmUgYXR0YWNoZWQgdG8uXHJcblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIEEgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgZXhlY3V0ZWQsIHdoZW4gdGhlIGV2ZW50IGlzIGRpc3BhdGNoZWQuIEFuIGV2ZW50IG9iamVjdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgY2FsbGJhY2suXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLm9uID0gZnVuY3Rpb24gKG5hbWVzLCBjYWxsYmFjaykge1xyXG5cdFx0XHRpZiAoX3V0aWwudHlwZS5GdW5jdGlvbihjYWxsYmFjaykpIHtcclxuXHRcdFx0XHRuYW1lcyA9IG5hbWVzLnRyaW0oKS5zcGxpdCgnICcpO1xyXG5cdFx0XHRcdG5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGZ1bGxuYW1lKSB7XHJcblx0XHRcdFx0XHR2YXJcclxuXHRcdFx0XHRcdFx0bmFtZXBhcnRzID0gZnVsbG5hbWUuc3BsaXQoJy4nKSxcclxuXHRcdFx0XHRcdFx0ZXZlbnRuYW1lID0gbmFtZXBhcnRzWzBdLFxyXG5cdFx0XHRcdFx0XHRuYW1lc3BhY2UgPSBuYW1lcGFydHNbMV07XHJcblx0XHRcdFx0XHRpZiAoZXZlbnRuYW1lICE9IFwiKlwiKSB7IC8vIGRpc2FsbG93IHdpbGRjYXJkc1xyXG5cdFx0XHRcdFx0XHRpZiAoIV9saXN0ZW5lcnNbZXZlbnRuYW1lXSkge1xyXG5cdFx0XHRcdFx0XHRcdF9saXN0ZW5lcnNbZXZlbnRuYW1lXSA9IFtdO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdF9saXN0ZW5lcnNbZXZlbnRuYW1lXS5wdXNoKHtcclxuXHRcdFx0XHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZSB8fCAnJyxcclxuXHRcdFx0XHRcdFx0XHRjYWxsYmFjazogY2FsbGJhY2tcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bG9nKDEsIFwiRVJST1Igd2hlbiBjYWxsaW5nICcub24oKSc6IFN1cHBsaWVkIGNhbGxiYWNrIGZvciAnXCIgKyBuYW1lcyArIFwiJyBpcyBub3QgYSB2YWxpZCBmdW5jdGlvbiFcIik7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIFNjZW5lO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFJlbW92ZSBvbmUgb3IgbW9yZSBldmVudCBsaXN0ZW5lci5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjb2ZmXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIGZ1bmN0aW9uIGNhbGxiYWNrIChldmVudCkge1xyXG5cdFx0ICogXHRcdGNvbnNvbGUubG9nKFwiRXZlbnQgZmlyZWQhIChcIiArIGV2ZW50LnR5cGUgKyBcIilcIik7XHJcblx0XHQgKiB9XHJcblx0XHQgKiAvLyBhZGQgbGlzdGVuZXJzXHJcblx0XHQgKiBzY2VuZS5vbihcImNoYW5nZSB1cGRhdGVcIiwgY2FsbGJhY2spO1xyXG5cdFx0ICogLy8gcmVtb3ZlIGxpc3RlbmVyc1xyXG5cdFx0ICogc2NlbmUub2ZmKFwiY2hhbmdlIHVwZGF0ZVwiLCBjYWxsYmFjayk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWVzIC0gVGhlIG5hbWUgb3IgbmFtZXMgb2YgdGhlIGV2ZW50IHRoYXQgc2hvdWxkIGJlIHJlbW92ZWQuXHJcblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBzcGVjaWZpYyBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSByZW1vdmVkLiBJZiBub25lIGlzIHBhc3NlZCBhbGwgY2FsbGJhY2tzIHRvIHRoZSBldmVudCBsaXN0ZW5lciB3aWxsIGJlIHJlbW92ZWQuXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLm9mZiA9IGZ1bmN0aW9uIChuYW1lcywgY2FsbGJhY2spIHtcclxuXHRcdFx0aWYgKCFuYW1lcykge1xyXG5cdFx0XHRcdGxvZygxLCBcIkVSUk9SOiBJbnZhbGlkIGV2ZW50IG5hbWUgc3VwcGxpZWQuXCIpO1xyXG5cdFx0XHRcdHJldHVybiBTY2VuZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRuYW1lcyA9IG5hbWVzLnRyaW0oKS5zcGxpdCgnICcpO1xyXG5cdFx0XHRuYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChmdWxsbmFtZSwga2V5KSB7XHJcblx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRuYW1lcGFydHMgPSBmdWxsbmFtZS5zcGxpdCgnLicpLFxyXG5cdFx0XHRcdFx0ZXZlbnRuYW1lID0gbmFtZXBhcnRzWzBdLFxyXG5cdFx0XHRcdFx0bmFtZXNwYWNlID0gbmFtZXBhcnRzWzFdIHx8ICcnLFxyXG5cdFx0XHRcdFx0cmVtb3ZlTGlzdCA9IGV2ZW50bmFtZSA9PT0gJyonID8gT2JqZWN0LmtleXMoX2xpc3RlbmVycykgOiBbZXZlbnRuYW1lXTtcclxuXHRcdFx0XHRyZW1vdmVMaXN0LmZvckVhY2goZnVuY3Rpb24gKHJlbW92ZSkge1xyXG5cdFx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRcdGxpc3QgPSBfbGlzdGVuZXJzW3JlbW92ZV0gfHwgW10sXHJcblx0XHRcdFx0XHRcdGkgPSBsaXN0Lmxlbmd0aDtcclxuXHRcdFx0XHRcdHdoaWxlIChpLS0pIHtcclxuXHRcdFx0XHRcdFx0dmFyIGxpc3RlbmVyID0gbGlzdFtpXTtcclxuXHRcdFx0XHRcdFx0aWYgKGxpc3RlbmVyICYmIChuYW1lc3BhY2UgPT09IGxpc3RlbmVyLm5hbWVzcGFjZSB8fCBuYW1lc3BhY2UgPT09ICcqJykgJiYgKCFjYWxsYmFjayB8fCBjYWxsYmFjayA9PSBsaXN0ZW5lci5jYWxsYmFjaykpIHtcclxuXHRcdFx0XHRcdFx0XHRsaXN0LnNwbGljZShpLCAxKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCFsaXN0Lmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHRkZWxldGUgX2xpc3RlbmVyc1tyZW1vdmVdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0cmV0dXJuIFNjZW5lO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFRyaWdnZXIgYW4gZXZlbnQuXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI3RyaWdnZXJcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogdGhpcy50cmlnZ2VyKFwiY2hhbmdlXCIpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRoYXQgc2hvdWxkIGJlIHRyaWdnZXJlZC5cclxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBbdmFyc10gLSBBbiBvYmplY3QgY29udGFpbmluZyBpbmZvIHRoYXQgc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgY2FsbGJhY2suXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLnRyaWdnZXIgPSBmdW5jdGlvbiAobmFtZSwgdmFycykge1xyXG5cdFx0XHRpZiAobmFtZSkge1xyXG5cdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0bmFtZXBhcnRzID0gbmFtZS50cmltKCkuc3BsaXQoJy4nKSxcclxuXHRcdFx0XHRcdGV2ZW50bmFtZSA9IG5hbWVwYXJ0c1swXSxcclxuXHRcdFx0XHRcdG5hbWVzcGFjZSA9IG5hbWVwYXJ0c1sxXSxcclxuXHRcdFx0XHRcdGxpc3RlbmVycyA9IF9saXN0ZW5lcnNbZXZlbnRuYW1lXTtcclxuXHRcdFx0XHRsb2coMywgJ2V2ZW50IGZpcmVkOicsIGV2ZW50bmFtZSwgdmFycyA/IFwiLT5cIiA6ICcnLCB2YXJzIHx8ICcnKTtcclxuXHRcdFx0XHRpZiAobGlzdGVuZXJzKSB7XHJcblx0XHRcdFx0XHRsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIsIGtleSkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIW5hbWVzcGFjZSB8fCBuYW1lc3BhY2UgPT09IGxpc3RlbmVyLm5hbWVzcGFjZSkge1xyXG5cdFx0XHRcdFx0XHRcdGxpc3RlbmVyLmNhbGxiYWNrLmNhbGwoU2NlbmUsIG5ldyBTY3JvbGxNYWdpYy5FdmVudChldmVudG5hbWUsIGxpc3RlbmVyLm5hbWVzcGFjZSwgU2NlbmUsIHZhcnMpKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGxvZygxLCBcIkVSUk9SOiBJbnZhbGlkIGV2ZW50IG5hbWUgc3VwcGxpZWQuXCIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBTY2VuZTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gc2V0IGV2ZW50IGxpc3RlbmVyc1xyXG5cdFx0U2NlbmVcclxuXHRcdFx0Lm9uKFwiY2hhbmdlLmludGVybmFsXCIsIGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0aWYgKGUud2hhdCAhPT0gXCJsb2dsZXZlbFwiICYmIGUud2hhdCAhPT0gXCJ0d2VlbkNoYW5nZXNcIikgeyAvLyBubyBuZWVkIGZvciBhIHNjZW5lIHVwZGF0ZSBzY2VuZSB3aXRoIHRoZXNlIG9wdGlvbnMuLi5cclxuXHRcdFx0XHRcdGlmIChlLndoYXQgPT09IFwidHJpZ2dlckVsZW1lbnRcIikge1xyXG5cdFx0XHRcdFx0XHR1cGRhdGVUcmlnZ2VyRWxlbWVudFBvc2l0aW9uKCk7XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGUud2hhdCA9PT0gXCJyZXZlcnNlXCIpIHsgLy8gdGhlIG9ubHkgcHJvcGVydHkgbGVmdCB0aGF0IG1heSBoYXZlIGFuIGltcGFjdCBvbiB0aGUgY3VycmVudCBzY2VuZSBzdGF0ZS4gRXZlcnl0aGluZyBlbHNlIGlzIGhhbmRsZWQgYnkgdGhlIHNoaWZ0IGV2ZW50LlxyXG5cdFx0XHRcdFx0XHRTY2VuZS51cGRhdGUoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5vbihcInNoaWZ0LmludGVybmFsXCIsIGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0dXBkYXRlU2Nyb2xsT2Zmc2V0KCk7XHJcblx0XHRcdFx0U2NlbmUudXBkYXRlKCk7IC8vIHVwZGF0ZSBzY2VuZSB0byByZWZsZWN0IG5ldyBwb3NpdGlvblxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFNlbmQgYSBkZWJ1ZyBtZXNzYWdlIHRvIHRoZSBjb25zb2xlLlxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqIGJ1dCBwcm92aWRlZCBwdWJsaWNseSB3aXRoIF9sb2cgZm9yIHBsdWdpbnNcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge251bWJlcn0gbG9nbGV2ZWwgLSBUaGUgbG9nbGV2ZWwgcmVxdWlyZWQgdG8gaW5pdGlhdGUgb3V0cHV0IGZvciB0aGUgbWVzc2FnZS5cclxuXHRcdCAqIEBwYXJhbSB7Li4ubWl4ZWR9IG91dHB1dCAtIE9uZSBvciBtb3JlIHZhcmlhYmxlcyB0aGF0IHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIGNvbnNvbGUuXHJcblx0XHQgKi9cclxuXHRcdHZhciBsb2cgPSB0aGlzLl9sb2cgPSBmdW5jdGlvbiAobG9nbGV2ZWwsIG91dHB1dCkge1xyXG5cdFx0XHRpZiAoX29wdGlvbnMubG9nbGV2ZWwgPj0gbG9nbGV2ZWwpIHtcclxuXHRcdFx0XHRBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoYXJndW1lbnRzLCAxLCAwLCBcIihcIiArIE5BTUVTUEFDRSArIFwiKSAtPlwiKTtcclxuXHRcdFx0XHRfdXRpbC5sb2cuYXBwbHkod2luZG93LCBhcmd1bWVudHMpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQWRkIHRoZSBzY2VuZSB0byBhIGNvbnRyb2xsZXIuICBcclxuXHRcdCAqIFRoaXMgaXMgdGhlIGVxdWl2YWxlbnQgdG8gYENvbnRyb2xsZXIuYWRkU2NlbmUoc2NlbmUpYC5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjYWRkVG9cclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gYWRkIGEgc2NlbmUgdG8gYSBTY3JvbGxNYWdpYyBDb250cm9sbGVyXHJcblx0XHQgKiBzY2VuZS5hZGRUbyhjb250cm9sbGVyKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge1Njcm9sbE1hZ2ljLkNvbnRyb2xsZXJ9IGNvbnRyb2xsZXIgLSBUaGUgY29udHJvbGxlciB0byB3aGljaCB0aGUgc2NlbmUgc2hvdWxkIGJlIGFkZGVkLlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5hZGRUbyA9IGZ1bmN0aW9uIChjb250cm9sbGVyKSB7XHJcblx0XHRcdGlmICghKGNvbnRyb2xsZXIgaW5zdGFuY2VvZiBTY3JvbGxNYWdpYy5Db250cm9sbGVyKSkge1xyXG5cdFx0XHRcdGxvZygxLCBcIkVSUk9SOiBzdXBwbGllZCBhcmd1bWVudCBvZiAnYWRkVG8oKScgaXMgbm90IGEgdmFsaWQgU2Nyb2xsTWFnaWMgQ29udHJvbGxlclwiKTtcclxuXHRcdFx0fSBlbHNlIGlmIChfY29udHJvbGxlciAhPSBjb250cm9sbGVyKSB7XHJcblx0XHRcdFx0Ly8gbmV3IGNvbnRyb2xsZXJcclxuXHRcdFx0XHRpZiAoX2NvbnRyb2xsZXIpIHsgLy8gd2FzIGFzc29jaWF0ZWQgdG8gYSBkaWZmZXJlbnQgY29udHJvbGxlciBiZWZvcmUsIHNvIHJlbW92ZSBpdC4uLlxyXG5cdFx0XHRcdFx0X2NvbnRyb2xsZXIucmVtb3ZlU2NlbmUoU2NlbmUpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRfY29udHJvbGxlciA9IGNvbnRyb2xsZXI7XHJcblx0XHRcdFx0dmFsaWRhdGVPcHRpb24oKTtcclxuXHRcdFx0XHR1cGRhdGVEdXJhdGlvbih0cnVlKTtcclxuXHRcdFx0XHR1cGRhdGVUcmlnZ2VyRWxlbWVudFBvc2l0aW9uKHRydWUpO1xyXG5cdFx0XHRcdHVwZGF0ZVNjcm9sbE9mZnNldCgpO1xyXG5cdFx0XHRcdF9jb250cm9sbGVyLmluZm8oXCJjb250YWluZXJcIikuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25Db250YWluZXJSZXNpemUpO1xyXG5cdFx0XHRcdGNvbnRyb2xsZXIuYWRkU2NlbmUoU2NlbmUpO1xyXG5cdFx0XHRcdFNjZW5lLnRyaWdnZXIoXCJhZGRcIiwge1xyXG5cdFx0XHRcdFx0Y29udHJvbGxlcjogX2NvbnRyb2xsZXJcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRsb2coMywgXCJhZGRlZCBcIiArIE5BTUVTUEFDRSArIFwiIHRvIGNvbnRyb2xsZXJcIik7XHJcblx0XHRcdFx0U2NlbmUudXBkYXRlKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIFNjZW5lO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqICoqR2V0Kiogb3IgKipTZXQqKiB0aGUgY3VycmVudCBlbmFibGVkIHN0YXRlIG9mIHRoZSBzY2VuZS4gIFxyXG5cdFx0ICogVGhpcyBjYW4gYmUgdXNlZCB0byBkaXNhYmxlIHRoaXMgc2NlbmUgd2l0aG91dCByZW1vdmluZyBvciBkZXN0cm95aW5nIGl0LlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNlbmFibGVkXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGdldCB0aGUgY3VycmVudCB2YWx1ZVxyXG5cdFx0ICogdmFyIGVuYWJsZWQgPSBzY2VuZS5lbmFibGVkKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gZGlzYWJsZSB0aGUgc2NlbmVcclxuXHRcdCAqIHNjZW5lLmVuYWJsZWQoZmFsc2UpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW25ld1N0YXRlXSAtIFRoZSBuZXcgZW5hYmxlZCBzdGF0ZSBvZiB0aGUgc2NlbmUgYHRydWVgIG9yIGBmYWxzZWAuXHJcblx0XHQgKiBAcmV0dXJucyB7KGJvb2xlYW58U2NlbmUpfSBDdXJyZW50IGVuYWJsZWQgc3RhdGUgb3IgcGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuZW5hYmxlZCA9IGZ1bmN0aW9uIChuZXdTdGF0ZSkge1xyXG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHsgLy8gZ2V0XHJcblx0XHRcdFx0cmV0dXJuIF9lbmFibGVkO1xyXG5cdFx0XHR9IGVsc2UgaWYgKF9lbmFibGVkICE9IG5ld1N0YXRlKSB7IC8vIHNldFxyXG5cdFx0XHRcdF9lbmFibGVkID0gISFuZXdTdGF0ZTtcclxuXHRcdFx0XHRTY2VuZS51cGRhdGUodHJ1ZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIFNjZW5lO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFJlbW92ZSB0aGUgc2NlbmUgZnJvbSB0aGUgY29udHJvbGxlci4gIFxyXG5cdFx0ICogVGhpcyBpcyB0aGUgZXF1aXZhbGVudCB0byBgQ29udHJvbGxlci5yZW1vdmVTY2VuZShzY2VuZSlgLlxyXG5cdFx0ICogVGhlIHNjZW5lIHdpbGwgbm90IGJlIHVwZGF0ZWQgYW55bW9yZSB1bnRpbCB5b3UgcmVhZGQgaXQgdG8gYSBjb250cm9sbGVyLlxyXG5cdFx0ICogVG8gcmVtb3ZlIHRoZSBwaW4gb3IgdGhlIHR3ZWVuIHlvdSBuZWVkIHRvIGNhbGwgcmVtb3ZlVHdlZW4oKSBvciByZW1vdmVQaW4oKSByZXNwZWN0aXZlbHkuXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI3JlbW92ZVxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIHJlbW92ZSB0aGUgc2NlbmUgZnJvbSBpdHMgY29udHJvbGxlclxyXG5cdFx0ICogc2NlbmUucmVtb3ZlKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGlmIChfY29udHJvbGxlcikge1xyXG5cdFx0XHRcdF9jb250cm9sbGVyLmluZm8oXCJjb250YWluZXJcIikucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25Db250YWluZXJSZXNpemUpO1xyXG5cdFx0XHRcdHZhciB0bXBQYXJlbnQgPSBfY29udHJvbGxlcjtcclxuXHRcdFx0XHRfY29udHJvbGxlciA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHR0bXBQYXJlbnQucmVtb3ZlU2NlbmUoU2NlbmUpO1xyXG5cdFx0XHRcdFNjZW5lLnRyaWdnZXIoXCJyZW1vdmVcIik7XHJcblx0XHRcdFx0bG9nKDMsIFwicmVtb3ZlZCBcIiArIE5BTUVTUEFDRSArIFwiIGZyb20gY29udHJvbGxlclwiKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gU2NlbmU7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogRGVzdHJveSB0aGUgc2NlbmUgYW5kIGV2ZXJ5dGhpbmcuXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI2Rlc3Ryb3lcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBkZXN0cm95IHRoZSBzY2VuZSB3aXRob3V0IHJlc2V0dGluZyB0aGUgcGluIGFuZCB0d2VlbiB0byB0aGVpciBpbml0aWFsIHBvc2l0aW9uc1xyXG5cdFx0ICogc2NlbmUgPSBzY2VuZS5kZXN0cm95KCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gZGVzdHJveSB0aGUgc2NlbmUgYW5kIHJlc2V0IHRoZSBwaW4gYW5kIHR3ZWVuXHJcblx0XHQgKiBzY2VuZSA9IHNjZW5lLmRlc3Ryb3kodHJ1ZSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBbcmVzZXQ9ZmFsc2VdIC0gSWYgYHRydWVgIHRoZSBwaW4gYW5kIHR3ZWVuIChpZiBleGlzdGVudCkgd2lsbCBiZSByZXNldC5cclxuXHRcdCAqIEByZXR1cm5zIHtudWxsfSBOdWxsIHRvIHVuc2V0IGhhbmRsZXIgdmFyaWFibGVzLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLmRlc3Ryb3kgPSBmdW5jdGlvbiAocmVzZXQpIHtcclxuXHRcdFx0U2NlbmUudHJpZ2dlcihcImRlc3Ryb3lcIiwge1xyXG5cdFx0XHRcdHJlc2V0OiByZXNldFxyXG5cdFx0XHR9KTtcclxuXHRcdFx0U2NlbmUucmVtb3ZlKCk7XHJcblx0XHRcdFNjZW5lLm9mZihcIiouKlwiKTtcclxuXHRcdFx0bG9nKDMsIFwiZGVzdHJveWVkIFwiICsgTkFNRVNQQUNFICsgXCIgKHJlc2V0OiBcIiArIChyZXNldCA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiKSArIFwiKVwiKTtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9O1xyXG5cclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFVwZGF0ZXMgdGhlIFNjZW5lIHRvIHJlZmxlY3QgdGhlIGN1cnJlbnQgc3RhdGUuICBcclxuXHRcdCAqIFRoaXMgaXMgdGhlIGVxdWl2YWxlbnQgdG8gYENvbnRyb2xsZXIudXBkYXRlU2NlbmUoc2NlbmUsIGltbWVkaWF0ZWx5KWAuICBcclxuXHRcdCAqIFRoZSB1cGRhdGUgbWV0aG9kIGNhbGN1bGF0ZXMgdGhlIHNjZW5lJ3Mgc3RhcnQgYW5kIGVuZCBwb3NpdGlvbiAoYmFzZWQgb24gdGhlIHRyaWdnZXIgZWxlbWVudCwgdHJpZ2dlciBob29rLCBkdXJhdGlvbiBhbmQgb2Zmc2V0KSBhbmQgY2hlY2tzIGl0IGFnYWluc3QgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBjb250YWluZXIuICBcclxuXHRcdCAqIEl0IHRoZW4gdXBkYXRlcyB0aGUgY3VycmVudCBzY2VuZSBzdGF0ZSBhY2NvcmRpbmdseSAob3IgZG9lcyBub3RoaW5nLCBpZiB0aGUgc3RhdGUgaXMgYWxyZWFkeSBjb3JyZWN0KSDigJMgUGlucyB3aWxsIGJlIHNldCB0byB0aGVpciBjb3JyZWN0IHBvc2l0aW9uIGFuZCB0d2VlbnMgd2lsbCBiZSB1cGRhdGVkIHRvIHRoZWlyIGNvcnJlY3QgcHJvZ3Jlc3MuXHJcblx0XHQgKiBUaGlzIG1lYW5zIGFuIHVwZGF0ZSBkb2Vzbid0IG5lY2Vzc2FyaWx5IHJlc3VsdCBpbiBhIHByb2dyZXNzIGNoYW5nZS4gVGhlIGBwcm9ncmVzc2AgZXZlbnQgd2lsbCBiZSBmaXJlZCBpZiB0aGUgcHJvZ3Jlc3MgaGFzIGluZGVlZCBjaGFuZ2VkIGJldHdlZW4gdGhpcyB1cGRhdGUgYW5kIHRoZSBsYXN0LiAgXHJcblx0XHQgKiBfKipOT1RFOioqIFRoaXMgbWV0aG9kIGdldHMgY2FsbGVkIGNvbnN0YW50bHkgd2hlbmV2ZXIgU2Nyb2xsTWFnaWMgZGV0ZWN0cyBhIGNoYW5nZS4gVGhlIG9ubHkgYXBwbGljYXRpb24gZm9yIHlvdSBpcyBpZiB5b3UgY2hhbmdlIHNvbWV0aGluZyBvdXRzaWRlIG9mIHRoZSByZWFsbSBvZiBTY3JvbGxNYWdpYywgbGlrZSBtb3ZpbmcgdGhlIHRyaWdnZXIgb3IgY2hhbmdpbmcgdHdlZW4gcGFyYW1ldGVycy5fXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI3VwZGF0ZVxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIHVwZGF0ZSB0aGUgc2NlbmUgb24gbmV4dCB0aWNrXHJcblx0XHQgKiBzY2VuZS51cGRhdGUoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyB1cGRhdGUgdGhlIHNjZW5lIGltbWVkaWF0ZWx5XHJcblx0XHQgKiBzY2VuZS51cGRhdGUodHJ1ZSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQGZpcmVzIFNjZW5lLnVwZGF0ZVxyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ltbWVkaWF0ZWx5PWZhbHNlXSAtIElmIGB0cnVlYCB0aGUgdXBkYXRlIHdpbGwgYmUgaW5zdGFudCwgaWYgYGZhbHNlYCBpdCB3aWxsIHdhaXQgdW50aWwgbmV4dCB1cGRhdGUgY3ljbGUgKGJldHRlciBwZXJmb3JtYW5jZSkuXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uIChpbW1lZGlhdGVseSkge1xyXG5cdFx0XHRpZiAoX2NvbnRyb2xsZXIpIHtcclxuXHRcdFx0XHRpZiAoaW1tZWRpYXRlbHkpIHtcclxuXHRcdFx0XHRcdGlmIChfY29udHJvbGxlci5lbmFibGVkKCkgJiYgX2VuYWJsZWQpIHtcclxuXHRcdFx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRcdFx0c2Nyb2xsUG9zID0gX2NvbnRyb2xsZXIuaW5mbyhcInNjcm9sbFBvc1wiKSxcclxuXHRcdFx0XHRcdFx0XHRuZXdQcm9ncmVzcztcclxuXHJcblx0XHRcdFx0XHRcdGlmIChfb3B0aW9ucy5kdXJhdGlvbiA+IDApIHtcclxuXHRcdFx0XHRcdFx0XHRuZXdQcm9ncmVzcyA9IChzY3JvbGxQb3MgLSBfc2Nyb2xsT2Zmc2V0LnN0YXJ0KSAvIChfc2Nyb2xsT2Zmc2V0LmVuZCAtIF9zY3JvbGxPZmZzZXQuc3RhcnQpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdG5ld1Byb2dyZXNzID0gc2Nyb2xsUG9zID49IF9zY3JvbGxPZmZzZXQuc3RhcnQgPyAxIDogMDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0U2NlbmUudHJpZ2dlcihcInVwZGF0ZVwiLCB7XHJcblx0XHRcdFx0XHRcdFx0c3RhcnRQb3M6IF9zY3JvbGxPZmZzZXQuc3RhcnQsXHJcblx0XHRcdFx0XHRcdFx0ZW5kUG9zOiBfc2Nyb2xsT2Zmc2V0LmVuZCxcclxuXHRcdFx0XHRcdFx0XHRzY3JvbGxQb3M6IHNjcm9sbFBvc1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHRcdFNjZW5lLnByb2dyZXNzKG5ld1Byb2dyZXNzKTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoX3BpbiAmJiBfc3RhdGUgPT09IFNDRU5FX1NUQVRFX0RVUklORykge1xyXG5cdFx0XHRcdFx0XHR1cGRhdGVQaW5TdGF0ZSh0cnVlKTsgLy8gdW5waW4gaW4gcG9zaXRpb25cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0X2NvbnRyb2xsZXIudXBkYXRlU2NlbmUoU2NlbmUsIGZhbHNlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIFNjZW5lO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFVwZGF0ZXMgZHluYW1pYyBzY2VuZSB2YXJpYWJsZXMgbGlrZSB0aGUgdHJpZ2dlciBlbGVtZW50IHBvc2l0aW9uIG9yIHRoZSBkdXJhdGlvbi5cclxuXHRcdCAqIFRoaXMgbWV0aG9kIGlzIGF1dG9tYXRpY2FsbHkgY2FsbGVkIGluIHJlZ3VsYXIgaW50ZXJ2YWxzIGZyb20gdGhlIGNvbnRyb2xsZXIuIFNlZSB7QGxpbmsgU2Nyb2xsTWFnaWMuQ29udHJvbGxlcn0gb3B0aW9uIGByZWZyZXNoSW50ZXJ2YWxgLlxyXG5cdFx0ICogXHJcblx0XHQgKiBZb3UgY2FuIGNhbGwgaXQgdG8gbWluaW1pemUgbGFnLCBmb3IgZXhhbXBsZSB3aGVuIHlvdSBpbnRlbnRpb25hbGx5IGNoYW5nZSB0aGUgcG9zaXRpb24gb2YgdGhlIHRyaWdnZXJFbGVtZW50LlxyXG5cdFx0ICogSWYgeW91IGRvbid0IGl0IHdpbGwgc2ltcGx5IGJlIHVwZGF0ZWQgaW4gdGhlIG5leHQgcmVmcmVzaCBpbnRlcnZhbCBvZiB0aGUgY29udGFpbmVyLCB3aGljaCBpcyB1c3VhbGx5IHN1ZmZpY2llbnQuXHJcblx0XHQgKlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNyZWZyZXNoXHJcblx0XHQgKiBAc2luY2UgMS4xLjBcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiBzY2VuZSA9IG5ldyBTY3JvbGxNYWdpYy5TY2VuZSh7dHJpZ2dlckVsZW1lbnQ6IFwiI3RyaWdnZXJcIn0pO1xyXG5cdFx0ICogXHJcblx0XHQgKiAvLyBjaGFuZ2UgdGhlIHBvc2l0aW9uIG9mIHRoZSB0cmlnZ2VyXHJcblx0XHQgKiAkKFwiI3RyaWdnZXJcIikuY3NzKFwidG9wXCIsIDUwMCk7XHJcblx0XHQgKiAvLyBpbW1lZGlhdGVseSBsZXQgdGhlIHNjZW5lIGtub3cgb2YgdGhpcyBjaGFuZ2VcclxuXHRcdCAqIHNjZW5lLnJlZnJlc2goKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLnNoaWZ0fSwgaWYgdGhlIHRyaWdnZXIgZWxlbWVudCBwb3NpdGlvbiBvciB0aGUgZHVyYXRpb24gY2hhbmdlZFxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5jaGFuZ2V9LCBpZiB0aGUgZHVyYXRpb24gY2hhbmdlZFxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0dXBkYXRlRHVyYXRpb24oKTtcclxuXHRcdFx0dXBkYXRlVHJpZ2dlckVsZW1lbnRQb3NpdGlvbigpO1xyXG5cdFx0XHQvLyB1cGRhdGUgdHJpZ2dlciBlbGVtZW50IHBvc2l0aW9uXHJcblx0XHRcdHJldHVybiBTY2VuZTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAqKkdldCoqIG9yICoqU2V0KiogdGhlIHNjZW5lJ3MgcHJvZ3Jlc3MuICBcclxuXHRcdCAqIFVzdWFsbHkgaXQgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSB0byB1c2UgdGhpcyBhcyBhIHNldHRlciwgYXMgaXQgaXMgc2V0IGF1dG9tYXRpY2FsbHkgYnkgc2NlbmUudXBkYXRlKCkuICBcclxuXHRcdCAqIFRoZSBvcmRlciBpbiB3aGljaCB0aGUgZXZlbnRzIGFyZSBmaXJlZCBkZXBlbmRzIG9uIHRoZSBkdXJhdGlvbiBvZiB0aGUgc2NlbmU6XHJcblx0XHQgKiAgMS4gU2NlbmVzIHdpdGggYGR1cmF0aW9uID09IDBgOiAgXHJcblx0XHQgKiAgU2NlbmVzIHRoYXQgaGF2ZSBubyBkdXJhdGlvbiBieSBkZWZpbml0aW9uIGhhdmUgbm8gZW5kaW5nLiBUaHVzIHRoZSBgZW5kYCBldmVudCB3aWxsIG5ldmVyIGJlIGZpcmVkLiAgXHJcblx0XHQgKiAgV2hlbiB0aGUgdHJpZ2dlciBwb3NpdGlvbiBvZiB0aGUgc2NlbmUgaXMgcGFzc2VkIHRoZSBldmVudHMgYXJlIGFsd2F5cyBmaXJlZCBpbiB0aGlzIG9yZGVyOiAgXHJcblx0XHQgKiAgYGVudGVyYCwgYHN0YXJ0YCwgYHByb2dyZXNzYCB3aGVuIHNjcm9sbGluZyBmb3J3YXJkICBcclxuXHRcdCAqICBhbmQgIFxyXG5cdFx0ICogIGBwcm9ncmVzc2AsIGBzdGFydGAsIGBsZWF2ZWAgd2hlbiBzY3JvbGxpbmcgaW4gcmV2ZXJzZVxyXG5cdFx0ICogIDIuIFNjZW5lcyB3aXRoIGBkdXJhdGlvbiA+IDBgOiAgXHJcblx0XHQgKiAgU2NlbmVzIHdpdGggYSBzZXQgZHVyYXRpb24gaGF2ZSBhIGRlZmluZWQgc3RhcnQgYW5kIGVuZCBwb2ludC4gIFxyXG5cdFx0ICogIFdoZW4gc2Nyb2xsaW5nIHBhc3QgdGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBzY2VuZSBpdCB3aWxsIGZpcmUgdGhlc2UgZXZlbnRzIGluIHRoaXMgb3JkZXI6ICBcclxuXHRcdCAqICBgZW50ZXJgLCBgc3RhcnRgLCBgcHJvZ3Jlc3NgICBcclxuXHRcdCAqICBXaGVuIGNvbnRpbnVpbmcgdG8gc2Nyb2xsIGFuZCBwYXNzaW5nIHRoZSBlbmQgcG9pbnQgaXQgd2lsbCBmaXJlIHRoZXNlIGV2ZW50czogIFxyXG5cdFx0ICogIGBwcm9ncmVzc2AsIGBlbmRgLCBgbGVhdmVgICBcclxuXHRcdCAqICBXaGVuIHJldmVyc2luZyB0aHJvdWdoIHRoZSBlbmQgcG9pbnQgdGhlc2UgZXZlbnRzIGFyZSBmaXJlZDogIFxyXG5cdFx0ICogIGBlbnRlcmAsIGBlbmRgLCBgcHJvZ3Jlc3NgICBcclxuXHRcdCAqICBBbmQgd2hlbiBjb250aW51aW5nIHRvIHNjcm9sbCBwYXN0IHRoZSBzdGFydCBwb3NpdGlvbiBpbiByZXZlcnNlIGl0IHdpbGwgZmlyZTogIFxyXG5cdFx0ICogIGBwcm9ncmVzc2AsIGBzdGFydGAsIGBsZWF2ZWAgIFxyXG5cdFx0ICogIEluIGJldHdlZW4gc3RhcnQgYW5kIGVuZCB0aGUgYHByb2dyZXNzYCBldmVudCB3aWxsIGJlIGNhbGxlZCBjb25zdGFudGx5LCB3aGVuZXZlciB0aGUgcHJvZ3Jlc3MgY2hhbmdlcy5cclxuXHRcdCAqIFxyXG5cdFx0ICogSW4gc2hvcnQ6ICBcclxuXHRcdCAqIGBlbnRlcmAgZXZlbnRzIHdpbGwgYWx3YXlzIHRyaWdnZXIgKipiZWZvcmUqKiB0aGUgcHJvZ3Jlc3MgdXBkYXRlIGFuZCBgbGVhdmVgIGVudmVudHMgd2lsbCB0cmlnZ2VyICoqYWZ0ZXIqKiB0aGUgcHJvZ3Jlc3MgdXBkYXRlLiAgXHJcblx0XHQgKiBgc3RhcnRgIGFuZCBgZW5kYCB3aWxsIGFsd2F5cyB0cmlnZ2VyIGF0IHRoZWlyIHJlc3BlY3RpdmUgcG9zaXRpb24uXHJcblx0XHQgKiBcclxuXHRcdCAqIFBsZWFzZSByZXZpZXcgdGhlIGV2ZW50IGRlc2NyaXB0aW9ucyBmb3IgZGV0YWlscyBvbiB0aGUgZXZlbnRzIGFuZCB0aGUgZXZlbnQgb2JqZWN0IHRoYXQgaXMgcGFzc2VkIHRvIHRoZSBjYWxsYmFjay5cclxuXHRcdCAqIFxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNwcm9ncmVzc1xyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGdldCB0aGUgY3VycmVudCBzY2VuZSBwcm9ncmVzc1xyXG5cdFx0ICogdmFyIHByb2dyZXNzID0gc2NlbmUucHJvZ3Jlc3MoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBzZXQgbmV3IHNjZW5lIHByb2dyZXNzXHJcblx0XHQgKiBzY2VuZS5wcm9ncmVzcygwLjMpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUuZW50ZXJ9LCB3aGVuIHVzZWQgYXMgc2V0dGVyXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLnN0YXJ0fSwgd2hlbiB1c2VkIGFzIHNldHRlclxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5wcm9ncmVzc30sIHdoZW4gdXNlZCBhcyBzZXR0ZXJcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUuZW5kfSwgd2hlbiB1c2VkIGFzIHNldHRlclxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5sZWF2ZX0sIHdoZW4gdXNlZCBhcyBzZXR0ZXJcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge251bWJlcn0gW3Byb2dyZXNzXSAtIFRoZSBuZXcgcHJvZ3Jlc3MgdmFsdWUgb2YgdGhlIHNjZW5lIGBbMC0xXWAuXHJcblx0XHQgKiBAcmV0dXJucyB7bnVtYmVyfSBgZ2V0YCAtICBDdXJyZW50IHNjZW5lIHByb2dyZXNzLlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBgc2V0YCAtICBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5wcm9ncmVzcyA9IGZ1bmN0aW9uIChwcm9ncmVzcykge1xyXG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHsgLy8gZ2V0XHJcblx0XHRcdFx0cmV0dXJuIF9wcm9ncmVzcztcclxuXHRcdFx0fSBlbHNlIHsgLy8gc2V0XHJcblx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRkb1VwZGF0ZSA9IGZhbHNlLFxyXG5cdFx0XHRcdFx0b2xkU3RhdGUgPSBfc3RhdGUsXHJcblx0XHRcdFx0XHRzY3JvbGxEaXJlY3Rpb24gPSBfY29udHJvbGxlciA/IF9jb250cm9sbGVyLmluZm8oXCJzY3JvbGxEaXJlY3Rpb25cIikgOiAnUEFVU0VEJyxcclxuXHRcdFx0XHRcdHJldmVyc2VPckZvcndhcmQgPSBfb3B0aW9ucy5yZXZlcnNlIHx8IHByb2dyZXNzID49IF9wcm9ncmVzcztcclxuXHRcdFx0XHRpZiAoX29wdGlvbnMuZHVyYXRpb24gPT09IDApIHtcclxuXHRcdFx0XHRcdC8vIHplcm8gZHVyYXRpb24gc2NlbmVzXHJcblx0XHRcdFx0XHRkb1VwZGF0ZSA9IF9wcm9ncmVzcyAhPSBwcm9ncmVzcztcclxuXHRcdFx0XHRcdF9wcm9ncmVzcyA9IHByb2dyZXNzIDwgMSAmJiByZXZlcnNlT3JGb3J3YXJkID8gMCA6IDE7XHJcblx0XHRcdFx0XHRfc3RhdGUgPSBfcHJvZ3Jlc3MgPT09IDAgPyBTQ0VORV9TVEFURV9CRUZPUkUgOiBTQ0VORV9TVEFURV9EVVJJTkc7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIHNjZW5lcyB3aXRoIHN0YXJ0IGFuZCBlbmRcclxuXHRcdFx0XHRcdGlmIChwcm9ncmVzcyA8IDAgJiYgX3N0YXRlICE9PSBTQ0VORV9TVEFURV9CRUZPUkUgJiYgcmV2ZXJzZU9yRm9yd2FyZCkge1xyXG5cdFx0XHRcdFx0XHQvLyBnbyBiYWNrIHRvIGluaXRpYWwgc3RhdGVcclxuXHRcdFx0XHRcdFx0X3Byb2dyZXNzID0gMDtcclxuXHRcdFx0XHRcdFx0X3N0YXRlID0gU0NFTkVfU1RBVEVfQkVGT1JFO1xyXG5cdFx0XHRcdFx0XHRkb1VwZGF0ZSA9IHRydWU7XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHByb2dyZXNzID49IDAgJiYgcHJvZ3Jlc3MgPCAxICYmIHJldmVyc2VPckZvcndhcmQpIHtcclxuXHRcdFx0XHRcdFx0X3Byb2dyZXNzID0gcHJvZ3Jlc3M7XHJcblx0XHRcdFx0XHRcdF9zdGF0ZSA9IFNDRU5FX1NUQVRFX0RVUklORztcclxuXHRcdFx0XHRcdFx0ZG9VcGRhdGUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwcm9ncmVzcyA+PSAxICYmIF9zdGF0ZSAhPT0gU0NFTkVfU1RBVEVfQUZURVIpIHtcclxuXHRcdFx0XHRcdFx0X3Byb2dyZXNzID0gMTtcclxuXHRcdFx0XHRcdFx0X3N0YXRlID0gU0NFTkVfU1RBVEVfQUZURVI7XHJcblx0XHRcdFx0XHRcdGRvVXBkYXRlID0gdHJ1ZTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoX3N0YXRlID09PSBTQ0VORV9TVEFURV9EVVJJTkcgJiYgIXJldmVyc2VPckZvcndhcmQpIHtcclxuXHRcdFx0XHRcdFx0dXBkYXRlUGluU3RhdGUoKTsgLy8gaW4gY2FzZSB3ZSBzY3JvbGxlZCBiYWNrd2FyZHMgbWlkLXNjZW5lIGFuZCByZXZlcnNlIGlzIGRpc2FibGVkID0+IHVwZGF0ZSB0aGUgcGluIHBvc2l0aW9uLCBzbyBpdCBkb2Vzbid0IG1vdmUgYmFjayBhcyB3ZWxsLlxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoZG9VcGRhdGUpIHtcclxuXHRcdFx0XHRcdC8vIGZpcmUgZXZlbnRzXHJcblx0XHRcdFx0XHR2YXJcclxuXHRcdFx0XHRcdFx0ZXZlbnRWYXJzID0ge1xyXG5cdFx0XHRcdFx0XHRcdHByb2dyZXNzOiBfcHJvZ3Jlc3MsXHJcblx0XHRcdFx0XHRcdFx0c3RhdGU6IF9zdGF0ZSxcclxuXHRcdFx0XHRcdFx0XHRzY3JvbGxEaXJlY3Rpb246IHNjcm9sbERpcmVjdGlvblxyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHRzdGF0ZUNoYW5nZWQgPSBfc3RhdGUgIT0gb2xkU3RhdGU7XHJcblxyXG5cdFx0XHRcdFx0dmFyIHRyaWdnZXIgPSBmdW5jdGlvbiAoZXZlbnROYW1lKSB7IC8vIHRtcCBoZWxwZXIgdG8gc2ltcGxpZnkgY29kZVxyXG5cdFx0XHRcdFx0XHRTY2VuZS50cmlnZ2VyKGV2ZW50TmFtZSwgZXZlbnRWYXJzKTtcclxuXHRcdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdFx0aWYgKHN0YXRlQ2hhbmdlZCkgeyAvLyBlbnRlciBldmVudHNcclxuXHRcdFx0XHRcdFx0aWYgKG9sZFN0YXRlICE9PSBTQ0VORV9TVEFURV9EVVJJTkcpIHtcclxuXHRcdFx0XHRcdFx0XHR0cmlnZ2VyKFwiZW50ZXJcIik7XHJcblx0XHRcdFx0XHRcdFx0dHJpZ2dlcihvbGRTdGF0ZSA9PT0gU0NFTkVfU1RBVEVfQkVGT1JFID8gXCJzdGFydFwiIDogXCJlbmRcIik7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHRyaWdnZXIoXCJwcm9ncmVzc1wiKTtcclxuXHRcdFx0XHRcdGlmIChzdGF0ZUNoYW5nZWQpIHsgLy8gbGVhdmUgZXZlbnRzXHJcblx0XHRcdFx0XHRcdGlmIChfc3RhdGUgIT09IFNDRU5FX1NUQVRFX0RVUklORykge1xyXG5cdFx0XHRcdFx0XHRcdHRyaWdnZXIoX3N0YXRlID09PSBTQ0VORV9TVEFURV9CRUZPUkUgPyBcInN0YXJ0XCIgOiBcImVuZFwiKTtcclxuXHRcdFx0XHRcdFx0XHR0cmlnZ2VyKFwibGVhdmVcIik7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBTY2VuZTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBVcGRhdGUgdGhlIHN0YXJ0IGFuZCBlbmQgc2Nyb2xsT2Zmc2V0IG9mIHRoZSBjb250YWluZXIuXHJcblx0XHQgKiBUaGUgcG9zaXRpb25zIHJlZmxlY3Qgd2hhdCB0aGUgY29udHJvbGxlcidzIHNjcm9sbCBwb3NpdGlvbiB3aWxsIGJlIGF0IHRoZSBzdGFydCBhbmQgZW5kIHJlc3BlY3RpdmVseS5cclxuXHRcdCAqIElzIGNhbGxlZCwgd2hlbjpcclxuXHRcdCAqICAgLSBTY2VuZSBldmVudCBcImNoYW5nZVwiIGlzIGNhbGxlZCB3aXRoOiBvZmZzZXQsIHRyaWdnZXJIb29rLCBkdXJhdGlvbiBcclxuXHRcdCAqICAgLSBzY3JvbGwgY29udGFpbmVyIGV2ZW50IFwicmVzaXplXCIgaXMgY2FsbGVkXHJcblx0XHQgKiAgIC0gdGhlIHBvc2l0aW9uIG9mIHRoZSB0cmlnZ2VyRWxlbWVudCBjaGFuZ2VzXHJcblx0XHQgKiAgIC0gdGhlIGNvbnRyb2xsZXIgY2hhbmdlcyAtPiBhZGRUbygpXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgdXBkYXRlU2Nyb2xsT2Zmc2V0ID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRfc2Nyb2xsT2Zmc2V0ID0ge1xyXG5cdFx0XHRcdHN0YXJ0OiBfdHJpZ2dlclBvcyArIF9vcHRpb25zLm9mZnNldFxyXG5cdFx0XHR9O1xyXG5cdFx0XHRpZiAoX2NvbnRyb2xsZXIgJiYgX29wdGlvbnMudHJpZ2dlckVsZW1lbnQpIHtcclxuXHRcdFx0XHQvLyB0YWtlIGF3YXkgdHJpZ2dlckhvb2sgcG9ydGlvbiB0byBnZXQgcmVsYXRpdmUgdG8gdG9wXHJcblx0XHRcdFx0X3Njcm9sbE9mZnNldC5zdGFydCAtPSBfY29udHJvbGxlci5pbmZvKFwic2l6ZVwiKSAqIF9vcHRpb25zLnRyaWdnZXJIb29rO1xyXG5cdFx0XHR9XHJcblx0XHRcdF9zY3JvbGxPZmZzZXQuZW5kID0gX3Njcm9sbE9mZnNldC5zdGFydCArIF9vcHRpb25zLmR1cmF0aW9uO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFVwZGF0ZXMgdGhlIGR1cmF0aW9uIGlmIHNldCB0byBhIGR5bmFtaWMgZnVuY3Rpb24uXHJcblx0XHQgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiB0aGUgc2NlbmUgaXMgYWRkZWQgdG8gYSBjb250cm9sbGVyIGFuZCBpbiByZWd1bGFyIGludGVydmFscyBmcm9tIHRoZSBjb250cm9sbGVyIHRocm91Z2ggc2NlbmUucmVmcmVzaCgpLlxyXG5cdFx0ICogXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLmNoYW5nZX0sIGlmIHRoZSBkdXJhdGlvbiBjaGFuZ2VkXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLnNoaWZ0fSwgaWYgdGhlIGR1cmF0aW9uIGNoYW5nZWRcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtzdXBwcmVzc0V2ZW50cz1mYWxzZV0gLSBJZiB0cnVlIHRoZSBzaGlmdCBldmVudCB3aWxsIGJlIHN1cHByZXNzZWQuXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgdXBkYXRlRHVyYXRpb24gPSBmdW5jdGlvbiAoc3VwcHJlc3NFdmVudHMpIHtcclxuXHRcdFx0Ly8gdXBkYXRlIGR1cmF0aW9uXHJcblx0XHRcdGlmIChfZHVyYXRpb25VcGRhdGVNZXRob2QpIHtcclxuXHRcdFx0XHR2YXIgdmFybmFtZSA9IFwiZHVyYXRpb25cIjtcclxuXHRcdFx0XHRpZiAoY2hhbmdlT3B0aW9uKHZhcm5hbWUsIF9kdXJhdGlvblVwZGF0ZU1ldGhvZC5jYWxsKFNjZW5lKSkgJiYgIXN1cHByZXNzRXZlbnRzKSB7IC8vIHNldFxyXG5cdFx0XHRcdFx0U2NlbmUudHJpZ2dlcihcImNoYW5nZVwiLCB7XHJcblx0XHRcdFx0XHRcdHdoYXQ6IHZhcm5hbWUsXHJcblx0XHRcdFx0XHRcdG5ld3ZhbDogX29wdGlvbnNbdmFybmFtZV1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0U2NlbmUudHJpZ2dlcihcInNoaWZ0XCIsIHtcclxuXHRcdFx0XHRcdFx0cmVhc29uOiB2YXJuYW1lXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgdHJpZ2dlckVsZW1lbnQsIGlmIHByZXNlbnQuXHJcblx0XHQgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgLi4uXHJcblx0XHQgKiAgLSAuLi4gd2hlbiB0aGUgdHJpZ2dlckVsZW1lbnQgaXMgY2hhbmdlZFxyXG5cdFx0ICogIC0gLi4uIHdoZW4gdGhlIHNjZW5lIGlzIGFkZGVkIHRvIGEgKG5ldykgY29udHJvbGxlclxyXG5cdFx0ICogIC0gLi4uIGluIHJlZ3VsYXIgaW50ZXJ2YWxzIGZyb20gdGhlIGNvbnRyb2xsZXIgdGhyb3VnaCBzY2VuZS5yZWZyZXNoKCkuXHJcblx0XHQgKiBcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUuc2hpZnR9LCBpZiB0aGUgcG9zaXRpb24gY2hhbmdlZFxyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3N1cHByZXNzRXZlbnRzPWZhbHNlXSAtIElmIHRydWUgdGhlIHNoaWZ0IGV2ZW50IHdpbGwgYmUgc3VwcHJlc3NlZC5cclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciB1cGRhdGVUcmlnZ2VyRWxlbWVudFBvc2l0aW9uID0gZnVuY3Rpb24gKHN1cHByZXNzRXZlbnRzKSB7XHJcblx0XHRcdHZhclxyXG5cdFx0XHRcdGVsZW1lbnRQb3MgPSAwLFxyXG5cdFx0XHRcdHRlbGVtID0gX29wdGlvbnMudHJpZ2dlckVsZW1lbnQ7XHJcblx0XHRcdGlmIChfY29udHJvbGxlciAmJiAodGVsZW0gfHwgX3RyaWdnZXJQb3MgPiAwKSkgeyAvLyBlaXRoZXIgYW4gZWxlbWVudCBleGlzdHMgb3Igd2FzIHJlbW92ZWQgYW5kIHRoZSB0cmlnZ2VyUG9zIGlzIHN0aWxsID4gMFxyXG5cdFx0XHRcdGlmICh0ZWxlbSkgeyAvLyB0aGVyZSBjdXJyZW50bHkgYSB0cmlnZ2VyRWxlbWVudCBzZXRcclxuXHRcdFx0XHRcdGlmICh0ZWxlbS5wYXJlbnROb2RlKSB7IC8vIGNoZWNrIGlmIGVsZW1lbnQgaXMgc3RpbGwgYXR0YWNoZWQgdG8gRE9NXHJcblx0XHRcdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0XHRcdGNvbnRyb2xsZXJJbmZvID0gX2NvbnRyb2xsZXIuaW5mbygpLFxyXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5lck9mZnNldCA9IF91dGlsLmdldC5vZmZzZXQoY29udHJvbGxlckluZm8uY29udGFpbmVyKSwgLy8gY29udGFpbmVyIHBvc2l0aW9uIGlzIG5lZWRlZCBiZWNhdXNlIGVsZW1lbnQgb2Zmc2V0IGlzIHJldHVybmVkIGluIHJlbGF0aW9uIHRvIGRvY3VtZW50LCBub3QgaW4gcmVsYXRpb24gdG8gY29udGFpbmVyLlxyXG5cdFx0XHRcdFx0XHRcdHBhcmFtID0gY29udHJvbGxlckluZm8udmVydGljYWwgPyBcInRvcFwiIDogXCJsZWZ0XCI7IC8vIHdoaWNoIHBhcmFtIGlzIG9mIGludGVyZXN0ID9cclxuXHJcblx0XHRcdFx0XHRcdC8vIGlmIHBhcmVudCBpcyBzcGFjZXIsIHVzZSBzcGFjZXIgcG9zaXRpb24gaW5zdGVhZCBzbyBjb3JyZWN0IHN0YXJ0IHBvc2l0aW9uIGlzIHJldHVybmVkIGZvciBwaW5uZWQgZWxlbWVudHMuXHJcblx0XHRcdFx0XHRcdHdoaWxlICh0ZWxlbS5wYXJlbnROb2RlLmhhc0F0dHJpYnV0ZShQSU5fU1BBQ0VSX0FUVFJJQlVURSkpIHtcclxuXHRcdFx0XHRcdFx0XHR0ZWxlbSA9IHRlbGVtLnBhcmVudE5vZGU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHZhciBlbGVtZW50T2Zmc2V0ID0gX3V0aWwuZ2V0Lm9mZnNldCh0ZWxlbSk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIWNvbnRyb2xsZXJJbmZvLmlzRG9jdW1lbnQpIHsgLy8gY29udGFpbmVyIGlzIG5vdCB0aGUgZG9jdW1lbnQgcm9vdCwgc28gc3Vic3RyYWN0IHNjcm9sbCBQb3NpdGlvbiB0byBnZXQgY29ycmVjdCB0cmlnZ2VyIGVsZW1lbnQgcG9zaXRpb24gcmVsYXRpdmUgdG8gc2Nyb2xsY29udGVudFxyXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5lck9mZnNldFtwYXJhbV0gLT0gX2NvbnRyb2xsZXIuc2Nyb2xsUG9zKCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdGVsZW1lbnRQb3MgPSBlbGVtZW50T2Zmc2V0W3BhcmFtXSAtIGNvbnRhaW5lck9mZnNldFtwYXJhbV07XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHsgLy8gdGhlcmUgd2FzIGFuIGVsZW1lbnQsIGJ1dCBpdCB3YXMgcmVtb3ZlZCBmcm9tIERPTVxyXG5cdFx0XHRcdFx0XHRsb2coMiwgXCJXQVJOSU5HOiB0cmlnZ2VyRWxlbWVudCB3YXMgcmVtb3ZlZCBmcm9tIERPTSBhbmQgd2lsbCBiZSByZXNldCB0b1wiLCB1bmRlZmluZWQpO1xyXG5cdFx0XHRcdFx0XHRTY2VuZS50cmlnZ2VyRWxlbWVudCh1bmRlZmluZWQpOyAvLyB1bnNldCwgc28gYSBjaGFuZ2UgZXZlbnQgaXMgdHJpZ2dlcmVkXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR2YXIgY2hhbmdlZCA9IGVsZW1lbnRQb3MgIT0gX3RyaWdnZXJQb3M7XHJcblx0XHRcdFx0X3RyaWdnZXJQb3MgPSBlbGVtZW50UG9zO1xyXG5cdFx0XHRcdGlmIChjaGFuZ2VkICYmICFzdXBwcmVzc0V2ZW50cykge1xyXG5cdFx0XHRcdFx0U2NlbmUudHJpZ2dlcihcInNoaWZ0XCIsIHtcclxuXHRcdFx0XHRcdFx0cmVhc29uOiBcInRyaWdnZXJFbGVtZW50UG9zaXRpb25cIlxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogVHJpZ2dlciBhIHNoaWZ0IGV2ZW50LCB3aGVuIHRoZSBjb250YWluZXIgaXMgcmVzaXplZCBhbmQgdGhlIHRyaWdnZXJIb29rIGlzID4gMS5cclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciBvbkNvbnRhaW5lclJlc2l6ZSA9IGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdGlmIChfb3B0aW9ucy50cmlnZ2VySG9vayA+IDApIHtcclxuXHRcdFx0XHRTY2VuZS50cmlnZ2VyKFwic2hpZnRcIiwge1xyXG5cdFx0XHRcdFx0cmVhc29uOiBcImNvbnRhaW5lclJlc2l6ZVwiXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cclxuXHRcdHZhciBfdmFsaWRhdGUgPSBfdXRpbC5leHRlbmQoU0NFTkVfT1BUSU9OUy52YWxpZGF0ZSwge1xyXG5cdFx0XHQvLyB2YWxpZGF0aW9uIGZvciBkdXJhdGlvbiBoYW5kbGVkIGludGVybmFsbHkgZm9yIHJlZmVyZW5jZSB0byBwcml2YXRlIHZhciBfZHVyYXRpb25NZXRob2RcclxuXHRcdFx0ZHVyYXRpb246IGZ1bmN0aW9uICh2YWwpIHtcclxuXHRcdFx0XHRpZiAoX3V0aWwudHlwZS5TdHJpbmcodmFsKSAmJiB2YWwubWF0Y2goL14oXFwufFxcZCkqXFxkKyUkLykpIHtcclxuXHRcdFx0XHRcdC8vIHBlcmNlbnRhZ2UgdmFsdWVcclxuXHRcdFx0XHRcdHZhciBwZXJjID0gcGFyc2VGbG9hdCh2YWwpIC8gMTAwO1xyXG5cdFx0XHRcdFx0dmFsID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gX2NvbnRyb2xsZXIgPyBfY29udHJvbGxlci5pbmZvKFwic2l6ZVwiKSAqIHBlcmMgOiAwO1xyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKF91dGlsLnR5cGUuRnVuY3Rpb24odmFsKSkge1xyXG5cdFx0XHRcdFx0Ly8gZnVuY3Rpb25cclxuXHRcdFx0XHRcdF9kdXJhdGlvblVwZGF0ZU1ldGhvZCA9IHZhbDtcclxuXHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdHZhbCA9IHBhcnNlRmxvYXQoX2R1cmF0aW9uVXBkYXRlTWV0aG9kLmNhbGwoU2NlbmUpKTtcclxuXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0XHRcdFx0dmFsID0gLTE7IC8vIHdpbGwgY2F1c2UgZXJyb3IgYmVsb3dcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ly8gdmFsIGhhcyB0byBiZSBmbG9hdFxyXG5cdFx0XHRcdHZhbCA9IHBhcnNlRmxvYXQodmFsKTtcclxuXHRcdFx0XHRpZiAoIV91dGlsLnR5cGUuTnVtYmVyKHZhbCkgfHwgdmFsIDwgMCkge1xyXG5cdFx0XHRcdFx0aWYgKF9kdXJhdGlvblVwZGF0ZU1ldGhvZCkge1xyXG5cdFx0XHRcdFx0XHRfZHVyYXRpb25VcGRhdGVNZXRob2QgPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0XHRcdHRocm93IFtcIkludmFsaWQgcmV0dXJuIHZhbHVlIG9mIHN1cHBsaWVkIGZ1bmN0aW9uIGZvciBvcHRpb24gXFxcImR1cmF0aW9uXFxcIjpcIiwgdmFsXTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHRocm93IFtcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiZHVyYXRpb25cXFwiOlwiLCB2YWxdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdmFsO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIENoZWNrcyB0aGUgdmFsaWRpdHkgb2YgYSBzcGVjaWZpYyBvciBhbGwgb3B0aW9ucyBhbmQgcmVzZXQgdG8gZGVmYXVsdCBpZiBuZWNjZXNzYXJ5LlxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIHZhbGlkYXRlT3B0aW9uID0gZnVuY3Rpb24gKGNoZWNrKSB7XHJcblx0XHRcdGNoZWNrID0gYXJndW1lbnRzLmxlbmd0aCA/IFtjaGVja10gOiBPYmplY3Qua2V5cyhfdmFsaWRhdGUpO1xyXG5cdFx0XHRjaGVjay5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb25OYW1lLCBrZXkpIHtcclxuXHRcdFx0XHR2YXIgdmFsdWU7XHJcblx0XHRcdFx0aWYgKF92YWxpZGF0ZVtvcHRpb25OYW1lXSkgeyAvLyB0aGVyZSBpcyBhIHZhbGlkYXRpb24gbWV0aG9kIGZvciB0aGlzIG9wdGlvblxyXG5cdFx0XHRcdFx0dHJ5IHsgLy8gdmFsaWRhdGUgdmFsdWVcclxuXHRcdFx0XHRcdFx0dmFsdWUgPSBfdmFsaWRhdGVbb3B0aW9uTmFtZV0oX29wdGlvbnNbb3B0aW9uTmFtZV0pO1xyXG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkgeyAvLyB2YWxpZGF0aW9uIGZhaWxlZCAtPiByZXNldCB0byBkZWZhdWx0XHJcblx0XHRcdFx0XHRcdHZhbHVlID0gREVGQVVMVF9PUFRJT05TW29wdGlvbk5hbWVdO1xyXG5cdFx0XHRcdFx0XHR2YXIgbG9nTVNHID0gX3V0aWwudHlwZS5TdHJpbmcoZSkgPyBbZV0gOiBlO1xyXG5cdFx0XHRcdFx0XHRpZiAoX3V0aWwudHlwZS5BcnJheShsb2dNU0cpKSB7XHJcblx0XHRcdFx0XHRcdFx0bG9nTVNHWzBdID0gXCJFUlJPUjogXCIgKyBsb2dNU0dbMF07XHJcblx0XHRcdFx0XHRcdFx0bG9nTVNHLnVuc2hpZnQoMSk7IC8vIGxvZ2xldmVsIDEgZm9yIGVycm9yIG1zZ1xyXG5cdFx0XHRcdFx0XHRcdGxvZy5hcHBseSh0aGlzLCBsb2dNU0cpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdGxvZygxLCBcIkVSUk9SOiBQcm9ibGVtIGV4ZWN1dGluZyB2YWxpZGF0aW9uIGNhbGxiYWNrIGZvciBvcHRpb24gJ1wiICsgb3B0aW9uTmFtZSArIFwiJzpcIiwgZS5tZXNzYWdlKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcclxuXHRcdFx0XHRcdFx0X29wdGlvbnNbb3B0aW9uTmFtZV0gPSB2YWx1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEhlbHBlciB1c2VkIGJ5IHRoZSBzZXR0ZXIvZ2V0dGVycyBmb3Igc2NlbmUgb3B0aW9uc1xyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIGNoYW5nZU9wdGlvbiA9IGZ1bmN0aW9uICh2YXJuYW1lLCBuZXd2YWwpIHtcclxuXHRcdFx0dmFyXHJcblx0XHRcdFx0Y2hhbmdlZCA9IGZhbHNlLFxyXG5cdFx0XHRcdG9sZHZhbCA9IF9vcHRpb25zW3Zhcm5hbWVdO1xyXG5cdFx0XHRpZiAoX29wdGlvbnNbdmFybmFtZV0gIT0gbmV3dmFsKSB7XHJcblx0XHRcdFx0X29wdGlvbnNbdmFybmFtZV0gPSBuZXd2YWw7XHJcblx0XHRcdFx0dmFsaWRhdGVPcHRpb24odmFybmFtZSk7IC8vIHJlc2V0cyB0byBkZWZhdWx0IGlmIG5lY2Vzc2FyeVxyXG5cdFx0XHRcdGNoYW5nZWQgPSBvbGR2YWwgIT0gX29wdGlvbnNbdmFybmFtZV07XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGNoYW5nZWQ7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIGdlbmVyYXRlIGdldHRlcnMvc2V0dGVycyBmb3IgYWxsIG9wdGlvbnNcclxuXHRcdHZhciBhZGRTY2VuZU9wdGlvbiA9IGZ1bmN0aW9uIChvcHRpb25OYW1lKSB7XHJcblx0XHRcdGlmICghU2NlbmVbb3B0aW9uTmFtZV0pIHtcclxuXHRcdFx0XHRTY2VuZVtvcHRpb25OYW1lXSA9IGZ1bmN0aW9uIChuZXdWYWwpIHtcclxuXHRcdFx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkgeyAvLyBnZXRcclxuXHRcdFx0XHRcdFx0cmV0dXJuIF9vcHRpb25zW29wdGlvbk5hbWVdO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0aWYgKG9wdGlvbk5hbWUgPT09IFwiZHVyYXRpb25cIikgeyAvLyBuZXcgZHVyYXRpb24gaXMgc2V0LCBzbyBhbnkgcHJldmlvdXNseSBzZXQgZnVuY3Rpb24gbXVzdCBiZSB1bnNldFxyXG5cdFx0XHRcdFx0XHRcdF9kdXJhdGlvblVwZGF0ZU1ldGhvZCA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAoY2hhbmdlT3B0aW9uKG9wdGlvbk5hbWUsIG5ld1ZhbCkpIHsgLy8gc2V0XHJcblx0XHRcdFx0XHRcdFx0U2NlbmUudHJpZ2dlcihcImNoYW5nZVwiLCB7XHJcblx0XHRcdFx0XHRcdFx0XHR3aGF0OiBvcHRpb25OYW1lLFxyXG5cdFx0XHRcdFx0XHRcdFx0bmV3dmFsOiBfb3B0aW9uc1tvcHRpb25OYW1lXVxyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHRcdGlmIChTQ0VORV9PUFRJT05TLnNoaWZ0cy5pbmRleE9mKG9wdGlvbk5hbWUpID4gLTEpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFNjZW5lLnRyaWdnZXIoXCJzaGlmdFwiLCB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJlYXNvbjogb3B0aW9uTmFtZVxyXG5cdFx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gU2NlbmU7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqICoqR2V0Kiogb3IgKipTZXQqKiB0aGUgZHVyYXRpb24gb3B0aW9uIHZhbHVlLlxyXG5cdFx0ICpcclxuXHRcdCAqIEFzIGEgKipzZXR0ZXIqKiBpdCBhY2NlcHRzIHRocmVlIHR5cGVzIG9mIHBhcmFtZXRlcnM6XHJcblx0XHQgKiAxLiBgbnVtYmVyYDogU2V0cyB0aGUgZHVyYXRpb24gb2YgdGhlIHNjZW5lIHRvIGV4YWN0bHkgdGhpcyBhbW91bnQgb2YgcGl4ZWxzLiAgXHJcblx0XHQgKiAgIFRoaXMgbWVhbnMgdGhlIHNjZW5lIHdpbGwgbGFzdCBmb3IgZXhhY3RseSB0aGlzIGFtb3VudCBvZiBwaXhlbHMgc2Nyb2xsZWQuIFN1Yi1QaXhlbHMgYXJlIGFsc28gdmFsaWQuXHJcblx0XHQgKiAgIEEgdmFsdWUgb2YgYDBgIG1lYW5zIHRoYXQgdGhlIHNjZW5lIGlzICdvcGVuIGVuZCcgYW5kIG5vIGVuZCB3aWxsIGJlIHRyaWdnZXJlZC4gUGlucyB3aWxsIG5ldmVyIHVucGluIGFuZCBhbmltYXRpb25zIHdpbGwgcGxheSBpbmRlcGVuZGVudGx5IG9mIHNjcm9sbCBwcm9ncmVzcy5cclxuXHRcdCAqIDIuIGBzdHJpbmdgOiBBbHdheXMgdXBkYXRlcyB0aGUgZHVyYXRpb24gcmVsYXRpdmUgdG8gcGFyZW50IHNjcm9sbCBjb250YWluZXIuICBcclxuXHRcdCAqICAgRm9yIGV4YW1wbGUgYFwiMTAwJVwiYCB3aWxsIGtlZXAgdGhlIGR1cmF0aW9uIGFsd2F5cyBleGFjdGx5IGF0IHRoZSBpbm5lciBoZWlnaHQgb2YgdGhlIHNjcm9sbCBjb250YWluZXIuXHJcblx0XHQgKiAgIFdoZW4gc2Nyb2xsaW5nIHZlcnRpY2FsbHkgdGhlIHdpZHRoIGlzIHVzZWQgZm9yIHJlZmVyZW5jZSByZXNwZWN0aXZlbHkuXHJcblx0XHQgKiAzLiBgZnVuY3Rpb25gOiBUaGUgc3VwcGxpZWQgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgdG8gcmV0dXJuIHRoZSBzY2VuZSBkdXJhdGlvbi5cclxuXHRcdCAqICAgVGhpcyBpcyB1c2VmdWwgaW4gc2V0dXBzIHdoZXJlIHRoZSBkdXJhdGlvbiBkZXBlbmRzIG9uIG90aGVyIGVsZW1lbnRzIHdobyBtaWdodCBjaGFuZ2Ugc2l6ZS4gQnkgc3VwcGx5aW5nIGEgZnVuY3Rpb24geW91IGNhbiByZXR1cm4gYSB2YWx1ZSBpbnN0ZWFkIG9mIHVwZGF0aW5nIHBvdGVudGlhbGx5IG11bHRpcGxlIHNjZW5lIGR1cmF0aW9ucy4gIFxyXG5cdFx0ICogICBUaGUgc2NlbmUgY2FuIGJlIHJlZmVyZW5jZWQgaW5zaWRlIHRoZSBjYWxsYmFjayB1c2luZyBgdGhpc2AuXHJcblx0XHQgKiAgIF8qKldBUk5JTkc6KiogVGhpcyBpcyBhbiBlYXN5IHdheSB0byBraWxsIHBlcmZvcm1hbmNlLCBhcyB0aGUgY2FsbGJhY2sgd2lsbCBiZSBleGVjdXRlZCBldmVyeSB0aW1lIGBTY2VuZS5yZWZyZXNoKClgIGlzIGNhbGxlZCwgd2hpY2ggaGFwcGVucyBhIGxvdC4gVGhlIGludGVydmFsIGlzIGRlZmluZWQgYnkgdGhlIGNvbnRyb2xsZXIgKHNlZSBTY3JvbGxNYWdpYy5Db250cm9sbGVyIG9wdGlvbiBgcmVmcmVzaEludGVydmFsYCkuICBcclxuXHRcdCAqICAgSXQncyByZWNvbWVuZGVkIHRvIGF2b2lkIGNhbGN1bGF0aW9ucyB3aXRoaW4gdGhlIGZ1bmN0aW9uIGFuZCB1c2UgY2FjaGVkIHZhcmlhYmxlcyBhcyByZXR1cm4gdmFsdWVzLiAgXHJcblx0XHQgKiAgIFRoaXMgY291bnRzIGRvdWJsZSBpZiB5b3UgdXNlIHRoZSBzYW1lIGZ1bmN0aW9uIGZvciBtdWx0aXBsZSBzY2VuZXMuX1xyXG5cdFx0ICpcclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjZHVyYXRpb25cclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBnZXQgdGhlIGN1cnJlbnQgZHVyYXRpb24gdmFsdWVcclxuXHRcdCAqIHZhciBkdXJhdGlvbiA9IHNjZW5lLmR1cmF0aW9uKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gc2V0IGEgbmV3IGR1cmF0aW9uXHJcblx0XHQgKiBzY2VuZS5kdXJhdGlvbigzMDApO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHNldCBkdXJhdGlvbiByZXNwb25zaXZlbHkgdG8gY29udGFpbmVyIHNpemVcclxuXHRcdCAqIHNjZW5lLmR1cmF0aW9uKFwiMTAwJVwiKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyB1c2UgYSBmdW5jdGlvbiB0byByYW5kb21pemUgdGhlIGR1cmF0aW9uIGZvciBzb21lIHJlYXNvbi5cclxuXHRcdCAqIHZhciBkdXJhdGlvblZhbHVlQ2FjaGU7XHJcblx0XHQgKiBmdW5jdGlvbiBkdXJhdGlvbkNhbGxiYWNrICgpIHtcclxuXHRcdCAqICAgcmV0dXJuIGR1cmF0aW9uVmFsdWVDYWNoZTtcclxuXHRcdCAqIH1cclxuXHRcdCAqIGZ1bmN0aW9uIHVwZGF0ZUR1cmF0aW9uICgpIHtcclxuXHRcdCAqICAgZHVyYXRpb25WYWx1ZUNhY2hlID0gTWF0aC5yYW5kb20oKSAqIDEwMDtcclxuXHRcdCAqIH1cclxuXHRcdCAqIHVwZGF0ZUR1cmF0aW9uKCk7IC8vIHNldCB0byBpbml0aWFsIHZhbHVlXHJcblx0XHQgKiBzY2VuZS5kdXJhdGlvbihkdXJhdGlvbkNhbGxiYWNrKTsgLy8gc2V0IGR1cmF0aW9uIGNhbGxiYWNrXHJcblx0XHQgKlxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5jaGFuZ2V9LCB3aGVuIHVzZWQgYXMgc2V0dGVyXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLnNoaWZ0fSwgd2hlbiB1c2VkIGFzIHNldHRlclxyXG5cdFx0ICogQHBhcmFtIHsobnVtYmVyfHN0cmluZ3xmdW5jdGlvbil9IFtuZXdEdXJhdGlvbl0gLSBUaGUgbmV3IGR1cmF0aW9uIHNldHRpbmcgZm9yIHRoZSBzY2VuZS5cclxuXHRcdCAqIEByZXR1cm5zIHtudW1iZXJ9IGBnZXRgIC0gIEN1cnJlbnQgc2NlbmUgZHVyYXRpb24uXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IGBzZXRgIC0gIFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAqKkdldCoqIG9yICoqU2V0KiogdGhlIG9mZnNldCBvcHRpb24gdmFsdWUuXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI29mZnNldFxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGdldCB0aGUgY3VycmVudCBvZmZzZXRcclxuXHRcdCAqIHZhciBvZmZzZXQgPSBzY2VuZS5vZmZzZXQoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBzZXQgYSBuZXcgb2Zmc2V0XHJcblx0XHQgKiBzY2VuZS5vZmZzZXQoMTAwKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLmNoYW5nZX0sIHdoZW4gdXNlZCBhcyBzZXR0ZXJcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUuc2hpZnR9LCB3aGVuIHVzZWQgYXMgc2V0dGVyXHJcblx0XHQgKiBAcGFyYW0ge251bWJlcn0gW25ld09mZnNldF0gLSBUaGUgbmV3IG9mZnNldCBvZiB0aGUgc2NlbmUuXHJcblx0XHQgKiBAcmV0dXJucyB7bnVtYmVyfSBgZ2V0YCAtICBDdXJyZW50IHNjZW5lIG9mZnNldC5cclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gYHNldGAgLSAgUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHJcblx0XHQvKipcclxuXHRcdCAqICoqR2V0Kiogb3IgKipTZXQqKiB0aGUgdHJpZ2dlckVsZW1lbnQgb3B0aW9uIHZhbHVlLlxyXG5cdFx0ICogRG9lcyAqKm5vdCoqIGZpcmUgYFNjZW5lLnNoaWZ0YCwgYmVjYXVzZSBjaGFuZ2luZyB0aGUgdHJpZ2dlciBFbGVtZW50IGRvZXNuJ3QgbmVjZXNzYXJpbHkgbWVhbiB0aGUgc3RhcnQgcG9zaXRpb24gY2hhbmdlcy4gVGhpcyB3aWxsIGJlIGRldGVybWluZWQgaW4gYFNjZW5lLnJlZnJlc2goKWAsIHdoaWNoIGlzIGF1dG9tYXRpY2FsbHkgdHJpZ2dlcmVkLlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSN0cmlnZ2VyRWxlbWVudFxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGdldCB0aGUgY3VycmVudCB0cmlnZ2VyRWxlbWVudFxyXG5cdFx0ICogdmFyIHRyaWdnZXJFbGVtZW50ID0gc2NlbmUudHJpZ2dlckVsZW1lbnQoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBzZXQgYSBuZXcgdHJpZ2dlckVsZW1lbnQgdXNpbmcgYSBzZWxlY3RvclxyXG5cdFx0ICogc2NlbmUudHJpZ2dlckVsZW1lbnQoXCIjdHJpZ2dlclwiKTtcclxuXHRcdCAqIC8vIHNldCBhIG5ldyB0cmlnZ2VyRWxlbWVudCB1c2luZyBhIERPTSBvYmplY3RcclxuXHRcdCAqIHNjZW5lLnRyaWdnZXJFbGVtZW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidHJpZ2dlclwiKSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5jaGFuZ2V9LCB3aGVuIHVzZWQgYXMgc2V0dGVyXHJcblx0XHQgKiBAcGFyYW0geyhzdHJpbmd8b2JqZWN0KX0gW25ld1RyaWdnZXJFbGVtZW50XSAtIFRoZSBuZXcgdHJpZ2dlciBlbGVtZW50IGZvciB0aGUgc2NlbmUuXHJcblx0XHQgKiBAcmV0dXJucyB7KHN0cmluZ3xvYmplY3QpfSBgZ2V0YCAtICBDdXJyZW50IHRyaWdnZXJFbGVtZW50LlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBgc2V0YCAtICBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogKipHZXQqKiBvciAqKlNldCoqIHRoZSB0cmlnZ2VySG9vayBvcHRpb24gdmFsdWUuXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI3RyaWdnZXJIb29rXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gZ2V0IHRoZSBjdXJyZW50IHRyaWdnZXJIb29rIHZhbHVlXHJcblx0XHQgKiB2YXIgdHJpZ2dlckhvb2sgPSBzY2VuZS50cmlnZ2VySG9vaygpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHNldCBhIG5ldyB0cmlnZ2VySG9vayB1c2luZyBhIHN0cmluZ1xyXG5cdFx0ICogc2NlbmUudHJpZ2dlckhvb2soXCJvbkxlYXZlXCIpO1xyXG5cdFx0ICogLy8gc2V0IGEgbmV3IHRyaWdnZXJIb29rIHVzaW5nIGEgbnVtYmVyXHJcblx0XHQgKiBzY2VuZS50cmlnZ2VySG9vaygwLjcpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUuY2hhbmdlfSwgd2hlbiB1c2VkIGFzIHNldHRlclxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5zaGlmdH0sIHdoZW4gdXNlZCBhcyBzZXR0ZXJcclxuXHRcdCAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpfSBbbmV3VHJpZ2dlckhvb2tdIC0gVGhlIG5ldyB0cmlnZ2VySG9vayBvZiB0aGUgc2NlbmUuIFNlZSB7QGxpbmsgU2NlbmV9IHBhcmFtZXRlciBkZXNjcmlwdGlvbiBmb3IgdmFsdWUgb3B0aW9ucy5cclxuXHRcdCAqIEByZXR1cm5zIHtudW1iZXJ9IGBnZXRgIC0gIEN1cnJlbnQgdHJpZ2dlckhvb2sgKEFMV0FZUyBudW1lcmljYWwpLlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBgc2V0YCAtICBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogKipHZXQqKiBvciAqKlNldCoqIHRoZSByZXZlcnNlIG9wdGlvbiB2YWx1ZS5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjcmV2ZXJzZVxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGdldCB0aGUgY3VycmVudCByZXZlcnNlIG9wdGlvblxyXG5cdFx0ICogdmFyIHJldmVyc2UgPSBzY2VuZS5yZXZlcnNlKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gc2V0IG5ldyByZXZlcnNlIG9wdGlvblxyXG5cdFx0ICogc2NlbmUucmV2ZXJzZShmYWxzZSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5jaGFuZ2V9LCB3aGVuIHVzZWQgYXMgc2V0dGVyXHJcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtuZXdSZXZlcnNlXSAtIFRoZSBuZXcgcmV2ZXJzZSBzZXR0aW5nIG9mIHRoZSBzY2VuZS5cclxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufSBgZ2V0YCAtICBDdXJyZW50IHJldmVyc2Ugb3B0aW9uIHZhbHVlLlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBgc2V0YCAtICBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogKipHZXQqKiBvciAqKlNldCoqIHRoZSBsb2dsZXZlbCBvcHRpb24gdmFsdWUuXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI2xvZ2xldmVsXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gZ2V0IHRoZSBjdXJyZW50IGxvZ2xldmVsXHJcblx0XHQgKiB2YXIgbG9nbGV2ZWwgPSBzY2VuZS5sb2dsZXZlbCgpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHNldCBuZXcgbG9nbGV2ZWxcclxuXHRcdCAqIHNjZW5lLmxvZ2xldmVsKDMpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUuY2hhbmdlfSwgd2hlbiB1c2VkIGFzIHNldHRlclxyXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IFtuZXdMb2dsZXZlbF0gLSBUaGUgbmV3IGxvZ2xldmVsIHNldHRpbmcgb2YgdGhlIHNjZW5lLiBgWzAtM11gXHJcblx0XHQgKiBAcmV0dXJucyB7bnVtYmVyfSBgZ2V0YCAtICBDdXJyZW50IGxvZ2xldmVsLlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBgc2V0YCAtICBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogKipHZXQqKiB0aGUgYXNzb2NpYXRlZCBjb250cm9sbGVyLlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNjb250cm9sbGVyXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gZ2V0IHRoZSBjb250cm9sbGVyIG9mIGEgc2NlbmVcclxuXHRcdCAqIHZhciBjb250cm9sbGVyID0gc2NlbmUuY29udHJvbGxlcigpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm5zIHtTY3JvbGxNYWdpYy5Db250cm9sbGVyfSBQYXJlbnQgY29udHJvbGxlciBvciBgdW5kZWZpbmVkYFxyXG5cdFx0ICovXHJcblx0XHR0aGlzLmNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHJldHVybiBfY29udHJvbGxlcjtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAqKkdldCoqIHRoZSBjdXJyZW50IHN0YXRlLlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNzdGF0ZVxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGdldCB0aGUgY3VycmVudCBzdGF0ZVxyXG5cdFx0ICogdmFyIHN0YXRlID0gc2NlbmUuc3RhdGUoKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcmV0dXJucyB7c3RyaW5nfSBgXCJCRUZPUkVcImAsIGBcIkRVUklOR1wiYCBvciBgXCJBRlRFUlwiYFxyXG5cdFx0ICovXHJcblx0XHR0aGlzLnN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRyZXR1cm4gX3N0YXRlO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqICoqR2V0KiogdGhlIGN1cnJlbnQgc2Nyb2xsIG9mZnNldCBmb3IgdGhlIHN0YXJ0IG9mIHRoZSBzY2VuZS4gIFxyXG5cdFx0ICogTWluZCwgdGhhdCB0aGUgc2Nyb2xsT2Zmc2V0IGlzIHJlbGF0ZWQgdG8gdGhlIHNpemUgb2YgdGhlIGNvbnRhaW5lciwgaWYgYHRyaWdnZXJIb29rYCBpcyBiaWdnZXIgdGhhbiBgMGAgKG9yIGBcIm9uTGVhdmVcImApLiAgXHJcblx0XHQgKiBUaGlzIG1lYW5zLCB0aGF0IHJlc2l6aW5nIHRoZSBjb250YWluZXIgb3IgY2hhbmdpbmcgdGhlIGB0cmlnZ2VySG9va2Agd2lsbCBpbmZsdWVuY2UgdGhlIHNjZW5lJ3Mgc3RhcnQgb2Zmc2V0LlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNzY3JvbGxPZmZzZXRcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBnZXQgdGhlIGN1cnJlbnQgc2Nyb2xsIG9mZnNldCBmb3IgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIHNjZW5lLlxyXG5cdFx0ICogdmFyIHN0YXJ0ID0gc2NlbmUuc2Nyb2xsT2Zmc2V0KCk7XHJcblx0XHQgKiB2YXIgZW5kID0gc2NlbmUuc2Nyb2xsT2Zmc2V0KCkgKyBzY2VuZS5kdXJhdGlvbigpO1xyXG5cdFx0ICogY29uc29sZS5sb2coXCJ0aGUgc2NlbmUgc3RhcnRzIGF0XCIsIHN0YXJ0LCBcImFuZCBlbmRzIGF0XCIsIGVuZCk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybnMge251bWJlcn0gVGhlIHNjcm9sbCBvZmZzZXQgKG9mIHRoZSBjb250YWluZXIpIGF0IHdoaWNoIHRoZSBzY2VuZSB3aWxsIHRyaWdnZXIuIFkgdmFsdWUgZm9yIHZlcnRpY2FsIGFuZCBYIHZhbHVlIGZvciBob3Jpem9udGFsIHNjcm9sbHMuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuc2Nyb2xsT2Zmc2V0ID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRyZXR1cm4gX3Njcm9sbE9mZnNldC5zdGFydDtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAqKkdldCoqIHRoZSB0cmlnZ2VyIHBvc2l0aW9uIG9mIHRoZSBzY2VuZSAoaW5jbHVkaW5nIHRoZSB2YWx1ZSBvZiB0aGUgYG9mZnNldGAgb3B0aW9uKS4gIFxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSN0cmlnZ2VyUG9zaXRpb25cclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBnZXQgdGhlIHNjZW5lJ3MgdHJpZ2dlciBwb3NpdGlvblxyXG5cdFx0ICogdmFyIHRyaWdnZXJQb3NpdGlvbiA9IHNjZW5lLnRyaWdnZXJQb3NpdGlvbigpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm5zIHtudW1iZXJ9IFN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBzY2VuZS4gVG9wIHBvc2l0aW9uIHZhbHVlIGZvciB2ZXJ0aWNhbCBhbmQgbGVmdCBwb3NpdGlvbiB2YWx1ZSBmb3IgaG9yaXpvbnRhbCBzY3JvbGxzLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLnRyaWdnZXJQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0dmFyIHBvcyA9IF9vcHRpb25zLm9mZnNldDsgLy8gdGhlIG9mZnNldCBpcyB0aGUgYmFzaXNcclxuXHRcdFx0aWYgKF9jb250cm9sbGVyKSB7XHJcblx0XHRcdFx0Ly8gZ2V0IHRoZSB0cmlnZ2VyIHBvc2l0aW9uXHJcblx0XHRcdFx0aWYgKF9vcHRpb25zLnRyaWdnZXJFbGVtZW50KSB7XHJcblx0XHRcdFx0XHQvLyBFbGVtZW50IGFzIHRyaWdnZXJcclxuXHRcdFx0XHRcdHBvcyArPSBfdHJpZ2dlclBvcztcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8gcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHRyaWdnZXJIb29rIHRvIHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmdcclxuXHRcdFx0XHRcdHBvcyArPSBfY29udHJvbGxlci5pbmZvKFwic2l6ZVwiKSAqIFNjZW5lLnRyaWdnZXJIb29rKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBwb3M7XHJcblx0XHR9O1xyXG5cclxuXHJcblx0XHR2YXJcclxuXHRcdFx0X3BpbixcclxuXHRcdFx0X3Bpbk9wdGlvbnM7XHJcblxyXG5cdFx0U2NlbmVcclxuXHRcdFx0Lm9uKFwic2hpZnQuaW50ZXJuYWxcIiwgZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0XHR2YXIgZHVyYXRpb25DaGFuZ2VkID0gZS5yZWFzb24gPT09IFwiZHVyYXRpb25cIjtcclxuXHRcdFx0XHRpZiAoKF9zdGF0ZSA9PT0gU0NFTkVfU1RBVEVfQUZURVIgJiYgZHVyYXRpb25DaGFuZ2VkKSB8fCAoX3N0YXRlID09PSBTQ0VORV9TVEFURV9EVVJJTkcgJiYgX29wdGlvbnMuZHVyYXRpb24gPT09IDApKSB7XHJcblx0XHRcdFx0XHQvLyBpZiBbZHVyYXRpb24gY2hhbmdlZCBhZnRlciBhIHNjZW5lIChpbnNpZGUgc2NlbmUgcHJvZ3Jlc3MgdXBkYXRlcyBwaW4gcG9zaXRpb24pXSBvciBbZHVyYXRpb24gaXMgMCwgd2UgYXJlIGluIHBpbiBwaGFzZSBhbmQgc29tZSBvdGhlciB2YWx1ZSBjaGFuZ2VkXS5cclxuXHRcdFx0XHRcdHVwZGF0ZVBpblN0YXRlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChkdXJhdGlvbkNoYW5nZWQpIHtcclxuXHRcdFx0XHRcdHVwZGF0ZVBpbkRpbWVuc2lvbnMoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdC5vbihcInByb2dyZXNzLmludGVybmFsXCIsIGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0dXBkYXRlUGluU3RhdGUoKTtcclxuXHRcdFx0fSlcclxuXHRcdFx0Lm9uKFwiYWRkLmludGVybmFsXCIsIGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0dXBkYXRlUGluRGltZW5zaW9ucygpO1xyXG5cdFx0XHR9KVxyXG5cdFx0XHQub24oXCJkZXN0cm95LmludGVybmFsXCIsIGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0U2NlbmUucmVtb3ZlUGluKGUucmVzZXQpO1xyXG5cdFx0XHR9KTtcclxuXHRcdC8qKlxyXG5cdFx0ICogVXBkYXRlIHRoZSBwaW4gc3RhdGUuXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgdXBkYXRlUGluU3RhdGUgPSBmdW5jdGlvbiAoZm9yY2VVbnBpbikge1xyXG5cdFx0XHRpZiAoX3BpbiAmJiBfY29udHJvbGxlcikge1xyXG5cdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0Y29udGFpbmVySW5mbyA9IF9jb250cm9sbGVyLmluZm8oKSxcclxuXHRcdFx0XHRcdHBpblRhcmdldCA9IF9waW5PcHRpb25zLnNwYWNlci5maXJzdENoaWxkOyAvLyBtYXkgYmUgcGluIGVsZW1lbnQgb3IgYW5vdGhlciBzcGFjZXIsIGlmIGNhc2NhZGluZyBwaW5zXHJcblxyXG5cdFx0XHRcdGlmICghZm9yY2VVbnBpbiAmJiBfc3RhdGUgPT09IFNDRU5FX1NUQVRFX0RVUklORykgeyAvLyBkdXJpbmcgc2NlbmUgb3IgaWYgZHVyYXRpb24gaXMgMCBhbmQgd2UgYXJlIHBhc3QgdGhlIHRyaWdnZXJcclxuXHRcdFx0XHRcdC8vIHBpbm5lZCBzdGF0ZVxyXG5cdFx0XHRcdFx0aWYgKF91dGlsLmNzcyhwaW5UYXJnZXQsIFwicG9zaXRpb25cIikgIT0gXCJmaXhlZFwiKSB7XHJcblx0XHRcdFx0XHRcdC8vIGNoYW5nZSBzdGF0ZSBiZWZvcmUgdXBkYXRpbmcgcGluIHNwYWNlciAocG9zaXRpb24gY2hhbmdlcyBkdWUgdG8gZml4ZWQgY29sbGFwc2luZyBtaWdodCBvY2N1ci4pXHJcblx0XHRcdFx0XHRcdF91dGlsLmNzcyhwaW5UYXJnZXQsIHtcclxuXHRcdFx0XHRcdFx0XHRcInBvc2l0aW9uXCI6IFwiZml4ZWRcIlxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0Ly8gdXBkYXRlIHBpbiBzcGFjZXJcclxuXHRcdFx0XHRcdFx0dXBkYXRlUGluRGltZW5zaW9ucygpO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0XHRmaXhlZFBvcyA9IF91dGlsLmdldC5vZmZzZXQoX3Bpbk9wdGlvbnMuc3BhY2VyLCB0cnVlKSwgLy8gZ2V0IHZpZXdwb3J0IHBvc2l0aW9uIG9mIHNwYWNlclxyXG5cdFx0XHRcdFx0XHRzY3JvbGxEaXN0YW5jZSA9IF9vcHRpb25zLnJldmVyc2UgfHwgX29wdGlvbnMuZHVyYXRpb24gPT09IDAgP1xyXG5cdFx0XHRcdFx0XHRjb250YWluZXJJbmZvLnNjcm9sbFBvcyAtIF9zY3JvbGxPZmZzZXQuc3RhcnQgLy8gcXVpY2tlclxyXG5cdFx0XHRcdFx0XHQ6XHJcblx0XHRcdFx0XHRcdE1hdGgucm91bmQoX3Byb2dyZXNzICogX29wdGlvbnMuZHVyYXRpb24gKiAxMCkgLyAxMDsgLy8gaWYgbm8gcmV2ZXJzZSBhbmQgZHVyaW5nIHBpbiB0aGUgcG9zaXRpb24gbmVlZHMgdG8gYmUgcmVjYWxjdWxhdGVkIHVzaW5nIHRoZSBwcm9ncmVzc1xyXG5cclxuXHRcdFx0XHRcdC8vIGFkZCBzY3JvbGxEaXN0YW5jZVxyXG5cdFx0XHRcdFx0Zml4ZWRQb3NbY29udGFpbmVySW5mby52ZXJ0aWNhbCA/IFwidG9wXCIgOiBcImxlZnRcIl0gKz0gc2Nyb2xsRGlzdGFuY2U7XHJcblxyXG5cdFx0XHRcdFx0Ly8gc2V0IG5ldyB2YWx1ZXNcclxuXHRcdFx0XHRcdF91dGlsLmNzcyhfcGluT3B0aW9ucy5zcGFjZXIuZmlyc3RDaGlsZCwge1xyXG5cdFx0XHRcdFx0XHR0b3A6IGZpeGVkUG9zLnRvcCxcclxuXHRcdFx0XHRcdFx0bGVmdDogZml4ZWRQb3MubGVmdFxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIHVucGlubmVkIHN0YXRlXHJcblx0XHRcdFx0XHR2YXJcclxuXHRcdFx0XHRcdFx0bmV3Q1NTID0ge1xyXG5cdFx0XHRcdFx0XHRcdHBvc2l0aW9uOiBfcGluT3B0aW9ucy5pbkZsb3cgPyBcInJlbGF0aXZlXCIgOiBcImFic29sdXRlXCIsXHJcblx0XHRcdFx0XHRcdFx0dG9wOiAwLFxyXG5cdFx0XHRcdFx0XHRcdGxlZnQ6IDBcclxuXHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0Y2hhbmdlID0gX3V0aWwuY3NzKHBpblRhcmdldCwgXCJwb3NpdGlvblwiKSAhPSBuZXdDU1MucG9zaXRpb247XHJcblxyXG5cdFx0XHRcdFx0aWYgKCFfcGluT3B0aW9ucy5wdXNoRm9sbG93ZXJzKSB7XHJcblx0XHRcdFx0XHRcdG5ld0NTU1tjb250YWluZXJJbmZvLnZlcnRpY2FsID8gXCJ0b3BcIiA6IFwibGVmdFwiXSA9IF9vcHRpb25zLmR1cmF0aW9uICogX3Byb2dyZXNzO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChfb3B0aW9ucy5kdXJhdGlvbiA+IDApIHsgLy8gb25seSBjb25jZXJucyBzY2VuZXMgd2l0aCBkdXJhdGlvblxyXG5cdFx0XHRcdFx0XHRpZiAoX3N0YXRlID09PSBTQ0VORV9TVEFURV9BRlRFUiAmJiBwYXJzZUZsb2F0KF91dGlsLmNzcyhfcGluT3B0aW9ucy5zcGFjZXIsIFwicGFkZGluZy10b3BcIikpID09PSAwKSB7XHJcblx0XHRcdFx0XHRcdFx0Y2hhbmdlID0gdHJ1ZTsgLy8gaWYgaW4gYWZ0ZXIgc3RhdGUgYnV0IGhhdmVudCB1cGRhdGVkIHNwYWNlciB5ZXQgKGp1bXBlZCBwYXN0IHBpbilcclxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChfc3RhdGUgPT09IFNDRU5FX1NUQVRFX0JFRk9SRSAmJiBwYXJzZUZsb2F0KF91dGlsLmNzcyhfcGluT3B0aW9ucy5zcGFjZXIsIFwicGFkZGluZy1ib3R0b21cIikpID09PSAwKSB7IC8vIGJlZm9yZVxyXG5cdFx0XHRcdFx0XHRcdGNoYW5nZSA9IHRydWU7IC8vIGp1bXBlZCBwYXN0IGZpeGVkIHN0YXRlIHVwd2FyZCBkaXJlY3Rpb25cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Ly8gc2V0IG5ldyB2YWx1ZXNcclxuXHRcdFx0XHRcdF91dGlsLmNzcyhwaW5UYXJnZXQsIG5ld0NTUyk7XHJcblx0XHRcdFx0XHRpZiAoY2hhbmdlKSB7XHJcblx0XHRcdFx0XHRcdC8vIHVwZGF0ZSBwaW4gc3BhY2VyIGlmIHN0YXRlIGNoYW5nZWRcclxuXHRcdFx0XHRcdFx0dXBkYXRlUGluRGltZW5zaW9ucygpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFVwZGF0ZSB0aGUgcGluIHNwYWNlciBhbmQvb3IgZWxlbWVudCBzaXplLlxyXG5cdFx0ICogVGhlIHNpemUgb2YgdGhlIHNwYWNlciBuZWVkcyB0byBiZSB1cGRhdGVkIHdoZW5ldmVyIHRoZSBkdXJhdGlvbiBvZiB0aGUgc2NlbmUgY2hhbmdlcywgaWYgaXQgaXMgdG8gcHVzaCBkb3duIGZvbGxvd2luZyBlbGVtZW50cy5cclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciB1cGRhdGVQaW5EaW1lbnNpb25zID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRpZiAoX3BpbiAmJiBfY29udHJvbGxlciAmJiBfcGluT3B0aW9ucy5pbkZsb3cpIHsgLy8gbm8gc3BhY2VycmVzaXplLCBpZiBvcmlnaW5hbCBwb3NpdGlvbiBpcyBhYnNvbHV0ZVxyXG5cdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0YWZ0ZXIgPSAoX3N0YXRlID09PSBTQ0VORV9TVEFURV9BRlRFUiksXHJcblx0XHRcdFx0XHRiZWZvcmUgPSAoX3N0YXRlID09PSBTQ0VORV9TVEFURV9CRUZPUkUpLFxyXG5cdFx0XHRcdFx0ZHVyaW5nID0gKF9zdGF0ZSA9PT0gU0NFTkVfU1RBVEVfRFVSSU5HKSxcclxuXHRcdFx0XHRcdHZlcnRpY2FsID0gX2NvbnRyb2xsZXIuaW5mbyhcInZlcnRpY2FsXCIpLFxyXG5cdFx0XHRcdFx0cGluVGFyZ2V0ID0gX3Bpbk9wdGlvbnMuc3BhY2VyLmZpcnN0Q2hpbGQsIC8vIHVzdWFsbHkgdGhlIHBpbmVkIGVsZW1lbnQgYnV0IGNhbiBhbHNvIGJlIGFub3RoZXIgc3BhY2VyIChjYXNjYWRlZCBwaW5zKVxyXG5cdFx0XHRcdFx0bWFyZ2luQ29sbGFwc2UgPSBfdXRpbC5pc01hcmdpbkNvbGxhcHNlVHlwZShfdXRpbC5jc3MoX3Bpbk9wdGlvbnMuc3BhY2VyLCBcImRpc3BsYXlcIikpLFxyXG5cdFx0XHRcdFx0Y3NzID0ge307XHJcblxyXG5cdFx0XHRcdC8vIHNldCBuZXcgc2l6ZVxyXG5cdFx0XHRcdC8vIGlmIHJlbHNpemU6IHNwYWNlciAtPiBwaW4gfCBlbHNlOiBwaW4gLT4gc3BhY2VyXHJcblx0XHRcdFx0aWYgKF9waW5PcHRpb25zLnJlbFNpemUud2lkdGggfHwgX3Bpbk9wdGlvbnMucmVsU2l6ZS5hdXRvRnVsbFdpZHRoKSB7XHJcblx0XHRcdFx0XHRpZiAoZHVyaW5nKSB7XHJcblx0XHRcdFx0XHRcdF91dGlsLmNzcyhfcGluLCB7XHJcblx0XHRcdFx0XHRcdFx0XCJ3aWR0aFwiOiBfdXRpbC5nZXQud2lkdGgoX3Bpbk9wdGlvbnMuc3BhY2VyKVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdF91dGlsLmNzcyhfcGluLCB7XHJcblx0XHRcdFx0XHRcdFx0XCJ3aWR0aFwiOiBcIjEwMCVcIlxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8gbWlud2lkdGggaXMgbmVlZGVkIGZvciBjYXNjYWRlZCBwaW5zLlxyXG5cdFx0XHRcdFx0Y3NzW1wibWluLXdpZHRoXCJdID0gX3V0aWwuZ2V0LndpZHRoKHZlcnRpY2FsID8gX3BpbiA6IHBpblRhcmdldCwgdHJ1ZSwgdHJ1ZSk7XHJcblx0XHRcdFx0XHRjc3Mud2lkdGggPSBkdXJpbmcgPyBjc3NbXCJtaW4td2lkdGhcIl0gOiBcImF1dG9cIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKF9waW5PcHRpb25zLnJlbFNpemUuaGVpZ2h0KSB7XHJcblx0XHRcdFx0XHRpZiAoZHVyaW5nKSB7XHJcblx0XHRcdFx0XHRcdC8vIHRoZSBvbmx5IHBhZGRpbmcgdGhlIHNwYWNlciBzaG91bGQgZXZlciBpbmNsdWRlIGlzIHRoZSBkdXJhdGlvbiAoaWYgcHVzaEZvbGxvd2VycyA9IHRydWUpLCBzbyB3ZSBuZWVkIHRvIHN1YnN0cmFjdCB0aGF0LlxyXG5cdFx0XHRcdFx0XHRfdXRpbC5jc3MoX3Bpbiwge1xyXG5cdFx0XHRcdFx0XHRcdFwiaGVpZ2h0XCI6IF91dGlsLmdldC5oZWlnaHQoX3Bpbk9wdGlvbnMuc3BhY2VyKSAtIChfcGluT3B0aW9ucy5wdXNoRm9sbG93ZXJzID8gX29wdGlvbnMuZHVyYXRpb24gOiAwKVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdF91dGlsLmNzcyhfcGluLCB7XHJcblx0XHRcdFx0XHRcdFx0XCJoZWlnaHRcIjogXCIxMDAlXCJcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIG1hcmdpbiBpcyBvbmx5IGluY2x1ZGVkIGlmIGl0J3MgYSBjYXNjYWRlZCBwaW4gdG8gcmVzb2x2ZSBhbiBJRTkgYnVnXHJcblx0XHRcdFx0XHRjc3NbXCJtaW4taGVpZ2h0XCJdID0gX3V0aWwuZ2V0LmhlaWdodCh2ZXJ0aWNhbCA/IHBpblRhcmdldCA6IF9waW4sIHRydWUsICFtYXJnaW5Db2xsYXBzZSk7IC8vIG5lZWRlZCBmb3IgY2FzY2FkaW5nIHBpbnNcclxuXHRcdFx0XHRcdGNzcy5oZWlnaHQgPSBkdXJpbmcgPyBjc3NbXCJtaW4taGVpZ2h0XCJdIDogXCJhdXRvXCI7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBhZGQgc3BhY2UgZm9yIGR1cmF0aW9uIGlmIHB1c2hGb2xsb3dlcnMgaXMgdHJ1ZVxyXG5cdFx0XHRcdGlmIChfcGluT3B0aW9ucy5wdXNoRm9sbG93ZXJzKSB7XHJcblx0XHRcdFx0XHRjc3NbXCJwYWRkaW5nXCIgKyAodmVydGljYWwgPyBcIlRvcFwiIDogXCJMZWZ0XCIpXSA9IF9vcHRpb25zLmR1cmF0aW9uICogX3Byb2dyZXNzO1xyXG5cdFx0XHRcdFx0Y3NzW1wicGFkZGluZ1wiICsgKHZlcnRpY2FsID8gXCJCb3R0b21cIiA6IFwiUmlnaHRcIildID0gX29wdGlvbnMuZHVyYXRpb24gKiAoMSAtIF9wcm9ncmVzcyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdF91dGlsLmNzcyhfcGluT3B0aW9ucy5zcGFjZXIsIGNzcyk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBVcGRhdGVzIHRoZSBQaW4gc3RhdGUgKGluIGNlcnRhaW4gc2NlbmFyaW9zKVxyXG5cdFx0ICogSWYgdGhlIGNvbnRyb2xsZXIgY29udGFpbmVyIGlzIG5vdCB0aGUgZG9jdW1lbnQgYW5kIHdlIGFyZSBtaWQtcGluLXBoYXNlIHNjcm9sbGluZyBvciByZXNpemluZyB0aGUgbWFpbiBkb2N1bWVudCBjYW4gcmVzdWx0IHRvIHdyb25nIHBpbiBwb3NpdGlvbnMuXHJcblx0XHQgKiBTbyB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiByZXNpemUgYW5kIHNjcm9sbCBvZiB0aGUgZG9jdW1lbnQuXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgdXBkYXRlUGluSW5Db250YWluZXIgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGlmIChfY29udHJvbGxlciAmJiBfcGluICYmIF9zdGF0ZSA9PT0gU0NFTkVfU1RBVEVfRFVSSU5HICYmICFfY29udHJvbGxlci5pbmZvKFwiaXNEb2N1bWVudFwiKSkge1xyXG5cdFx0XHRcdHVwZGF0ZVBpblN0YXRlKCk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBVcGRhdGVzIHRoZSBQaW4gc3BhY2VyIHNpemUgc3RhdGUgKGluIGNlcnRhaW4gc2NlbmFyaW9zKVxyXG5cdFx0ICogSWYgY29udGFpbmVyIGlzIHJlc2l6ZWQgZHVyaW5nIHBpbiBhbmQgcmVsYXRpdmVseSBzaXplZCB0aGUgc2l6ZSBvZiB0aGUgcGluIG1pZ2h0IG5lZWQgdG8gYmUgdXBkYXRlZC4uLlxyXG5cdFx0ICogU28gdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgb24gcmVzaXplIG9mIHRoZSBjb250YWluZXIuXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgdXBkYXRlUmVsYXRpdmVQaW5TcGFjZXIgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGlmIChfY29udHJvbGxlciAmJiBfcGluICYmIC8vIHdlbGwsIGR1aFxyXG5cdFx0XHRcdF9zdGF0ZSA9PT0gU0NFTkVfU1RBVEVfRFVSSU5HICYmIC8vIGVsZW1lbnQgaW4gcGlubmVkIHN0YXRlP1xyXG5cdFx0XHRcdCggLy8gaXMgd2lkdGggb3IgaGVpZ2h0IHJlbGF0aXZlbHkgc2l6ZWQsIGJ1dCBub3QgaW4gcmVsYXRpb24gdG8gYm9keT8gdGhlbiB3ZSBuZWVkIHRvIHJlY2FsYy5cclxuXHRcdFx0XHRcdCgoX3Bpbk9wdGlvbnMucmVsU2l6ZS53aWR0aCB8fCBfcGluT3B0aW9ucy5yZWxTaXplLmF1dG9GdWxsV2lkdGgpICYmIF91dGlsLmdldC53aWR0aCh3aW5kb3cpICE9IF91dGlsLmdldC53aWR0aChfcGluT3B0aW9ucy5zcGFjZXIucGFyZW50Tm9kZSkpIHx8XHJcblx0XHRcdFx0XHQoX3Bpbk9wdGlvbnMucmVsU2l6ZS5oZWlnaHQgJiYgX3V0aWwuZ2V0LmhlaWdodCh3aW5kb3cpICE9IF91dGlsLmdldC5oZWlnaHQoX3Bpbk9wdGlvbnMuc3BhY2VyLnBhcmVudE5vZGUpKVxyXG5cdFx0XHRcdClcclxuXHRcdFx0KSB7XHJcblx0XHRcdFx0dXBkYXRlUGluRGltZW5zaW9ucygpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogSXMgY2FsbGVkLCB3aGVuIHRoZSBtb3VzZXdoZWwgaXMgdXNlZCB3aGlsZSBvdmVyIGEgcGlubmVkIGVsZW1lbnQgaW5zaWRlIGEgZGl2IGNvbnRhaW5lci5cclxuXHRcdCAqIElmIHRoZSBzY2VuZSBpcyBpbiBmaXhlZCBzdGF0ZSBzY3JvbGwgZXZlbnRzIHdvdWxkIGJlIGNvdW50ZWQgdG93YXJkcyB0aGUgYm9keS4gVGhpcyBmb3J3YXJkcyB0aGUgZXZlbnQgdG8gdGhlIHNjcm9sbCBjb250YWluZXIuXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgb25Nb3VzZXdoZWVsT3ZlclBpbiA9IGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdGlmIChfY29udHJvbGxlciAmJiBfcGluICYmIF9zdGF0ZSA9PT0gU0NFTkVfU1RBVEVfRFVSSU5HICYmICFfY29udHJvbGxlci5pbmZvKFwiaXNEb2N1bWVudFwiKSkgeyAvLyBpbiBwaW4gc3RhdGVcclxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0X2NvbnRyb2xsZXIuX3NldFNjcm9sbFBvcyhfY29udHJvbGxlci5pbmZvKFwic2Nyb2xsUG9zXCIpIC0gKChlLndoZWVsRGVsdGEgfHwgZVtfY29udHJvbGxlci5pbmZvKFwidmVydGljYWxcIikgPyBcIndoZWVsRGVsdGFZXCIgOiBcIndoZWVsRGVsdGFYXCJdKSAvIDMgfHwgLWUuZGV0YWlsICogMzApKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFBpbiBhbiBlbGVtZW50IGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIHNjZW5lLlxyXG5cdFx0ICogSWYgdGhlIHNjZW5lIGR1cmF0aW9uIGlzIDAgdGhlIGVsZW1lbnQgd2lsbCBvbmx5IGJlIHVucGlubmVkLCBpZiB0aGUgdXNlciBzY3JvbGxzIGJhY2sgcGFzdCB0aGUgc3RhcnQgcG9zaXRpb24uICBcclxuXHRcdCAqIE1ha2Ugc3VyZSBvbmx5IG9uZSBwaW4gaXMgYXBwbGllZCB0byBhbiBlbGVtZW50IGF0IHRoZSBzYW1lIHRpbWUuXHJcblx0XHQgKiBBbiBlbGVtZW50IGNhbiBiZSBwaW5uZWQgbXVsdGlwbGUgdGltZXMsIGJ1dCBvbmx5IHN1Y2Nlc3NpdmVseS5cclxuXHRcdCAqIF8qKk5PVEU6KiogVGhlIG9wdGlvbiBgcHVzaEZvbGxvd2Vyc2AgaGFzIG5vIGVmZmVjdCwgd2hlbiB0aGUgc2NlbmUgZHVyYXRpb24gaXMgMC5fXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI3NldFBpblxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIHBpbiBlbGVtZW50IGFuZCBwdXNoIGFsbCBmb2xsb3dpbmcgZWxlbWVudHMgZG93biBieSB0aGUgYW1vdW50IG9mIHRoZSBwaW4gZHVyYXRpb24uXHJcblx0XHQgKiBzY2VuZS5zZXRQaW4oXCIjcGluXCIpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHBpbiBlbGVtZW50IGFuZCBrZWVwaW5nIGFsbCBmb2xsb3dpbmcgZWxlbWVudHMgaW4gdGhlaXIgcGxhY2UuIFRoZSBwaW5uZWQgZWxlbWVudCB3aWxsIG1vdmUgcGFzdCB0aGVtLlxyXG5cdFx0ICogc2NlbmUuc2V0UGluKFwiI3BpblwiLCB7cHVzaEZvbGxvd2VyczogZmFsc2V9KTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0geyhzdHJpbmd8b2JqZWN0KX0gZWxlbWVudCAtIEEgU2VsZWN0b3IgdGFyZ2V0aW5nIGFuIGVsZW1lbnQgb3IgYSBET00gb2JqZWN0IHRoYXQgaXMgc3VwcG9zZWQgdG8gYmUgcGlubmVkLlxyXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IFtzZXR0aW5nc10gLSBzZXR0aW5ncyBmb3IgdGhlIHBpblxyXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBbc2V0dGluZ3MucHVzaEZvbGxvd2Vycz10cnVlXSAtIElmIGB0cnVlYCBmb2xsb3dpbmcgZWxlbWVudHMgd2lsbCBiZSBcInB1c2hlZFwiIGRvd24gZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgcGluLCBpZiBgZmFsc2VgIHRoZSBwaW5uZWQgZWxlbWVudCB3aWxsIGp1c3Qgc2Nyb2xsIHBhc3QgdGhlbS4gIFxyXG5cdFx0IFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCAgIElnbm9yZWQsIHdoZW4gZHVyYXRpb24gaXMgYDBgLlxyXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IFtzZXR0aW5ncy5zcGFjZXJDbGFzcz1cInNjcm9sbG1hZ2ljLXBpbi1zcGFjZXJcIl0gLSBDbGFzc25hbWUgb2YgdGhlIHBpbiBzcGFjZXIgZWxlbWVudCwgd2hpY2ggaXMgdXNlZCB0byByZXBsYWNlIHRoZSBlbGVtZW50LlxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuc2V0UGluID0gZnVuY3Rpb24gKGVsZW1lbnQsIHNldHRpbmdzKSB7XHJcblx0XHRcdHZhclxyXG5cdFx0XHRcdGRlZmF1bHRTZXR0aW5ncyA9IHtcclxuXHRcdFx0XHRcdHB1c2hGb2xsb3dlcnM6IHRydWUsXHJcblx0XHRcdFx0XHRzcGFjZXJDbGFzczogXCJzY3JvbGxtYWdpYy1waW4tc3BhY2VyXCJcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR2YXIgcHVzaEZvbGxvd2Vyc0FjdGl2ZWx5U2V0ID0gc2V0dGluZ3MgJiYgc2V0dGluZ3MuaGFzT3duUHJvcGVydHkoJ3B1c2hGb2xsb3dlcnMnKTtcclxuXHRcdFx0c2V0dGluZ3MgPSBfdXRpbC5leHRlbmQoe30sIGRlZmF1bHRTZXR0aW5ncywgc2V0dGluZ3MpO1xyXG5cclxuXHRcdFx0Ly8gdmFsaWRhdGUgRWxlbWVudFxyXG5cdFx0XHRlbGVtZW50ID0gX3V0aWwuZ2V0LmVsZW1lbnRzKGVsZW1lbnQpWzBdO1xyXG5cdFx0XHRpZiAoIWVsZW1lbnQpIHtcclxuXHRcdFx0XHRsb2coMSwgXCJFUlJPUiBjYWxsaW5nIG1ldGhvZCAnc2V0UGluKCknOiBJbnZhbGlkIHBpbiBlbGVtZW50IHN1cHBsaWVkLlwiKTtcclxuXHRcdFx0XHRyZXR1cm4gU2NlbmU7IC8vIGNhbmNlbFxyXG5cdFx0XHR9IGVsc2UgaWYgKF91dGlsLmNzcyhlbGVtZW50LCBcInBvc2l0aW9uXCIpID09PSBcImZpeGVkXCIpIHtcclxuXHRcdFx0XHRsb2coMSwgXCJFUlJPUiBjYWxsaW5nIG1ldGhvZCAnc2V0UGluKCknOiBQaW4gZG9lcyBub3Qgd29yayB3aXRoIGVsZW1lbnRzIHRoYXQgYXJlIHBvc2l0aW9uZWQgJ2ZpeGVkJy5cIik7XHJcblx0XHRcdFx0cmV0dXJuIFNjZW5lOyAvLyBjYW5jZWxcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKF9waW4pIHsgLy8gcHJlZXhpc3RpbmcgcGluP1xyXG5cdFx0XHRcdGlmIChfcGluID09PSBlbGVtZW50KSB7XHJcblx0XHRcdFx0XHQvLyBzYW1lIHBpbiB3ZSBhbHJlYWR5IGhhdmUgLT4gZG8gbm90aGluZ1xyXG5cdFx0XHRcdFx0cmV0dXJuIFNjZW5lOyAvLyBjYW5jZWxcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8ga2lsbCBvbGQgcGluXHJcblx0XHRcdFx0XHRTY2VuZS5yZW1vdmVQaW4oKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblx0XHRcdF9waW4gPSBlbGVtZW50O1xyXG5cclxuXHRcdFx0dmFyXHJcblx0XHRcdFx0cGFyZW50RGlzcGxheSA9IF9waW4ucGFyZW50Tm9kZS5zdHlsZS5kaXNwbGF5LFxyXG5cdFx0XHRcdGJvdW5kc1BhcmFtcyA9IFtcInRvcFwiLCBcImxlZnRcIiwgXCJib3R0b21cIiwgXCJyaWdodFwiLCBcIm1hcmdpblwiLCBcIm1hcmdpbkxlZnRcIiwgXCJtYXJnaW5SaWdodFwiLCBcIm1hcmdpblRvcFwiLCBcIm1hcmdpbkJvdHRvbVwiXTtcclxuXHJcblx0XHRcdF9waW4ucGFyZW50Tm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOyAvLyBoYWNrIHN0YXJ0IHRvIGZvcmNlIGNzcyB0byByZXR1cm4gc3R5bGVzaGVldCB2YWx1ZXMgaW5zdGVhZCBvZiBjYWxjdWxhdGVkIHB4IHZhbHVlcy5cclxuXHRcdFx0dmFyXHJcblx0XHRcdFx0aW5GbG93ID0gX3V0aWwuY3NzKF9waW4sIFwicG9zaXRpb25cIikgIT0gXCJhYnNvbHV0ZVwiLFxyXG5cdFx0XHRcdHBpbkNTUyA9IF91dGlsLmNzcyhfcGluLCBib3VuZHNQYXJhbXMuY29uY2F0KFtcImRpc3BsYXlcIl0pKSxcclxuXHRcdFx0XHRzaXplQ1NTID0gX3V0aWwuY3NzKF9waW4sIFtcIndpZHRoXCIsIFwiaGVpZ2h0XCJdKTtcclxuXHRcdFx0X3Bpbi5wYXJlbnROb2RlLnN0eWxlLmRpc3BsYXkgPSBwYXJlbnREaXNwbGF5OyAvLyBoYWNrIGVuZC5cclxuXHJcblx0XHRcdGlmICghaW5GbG93ICYmIHNldHRpbmdzLnB1c2hGb2xsb3dlcnMpIHtcclxuXHRcdFx0XHRsb2coMiwgXCJXQVJOSU5HOiBJZiB0aGUgcGlubmVkIGVsZW1lbnQgaXMgcG9zaXRpb25lZCBhYnNvbHV0ZWx5IHB1c2hGb2xsb3dlcnMgd2lsbCBiZSBkaXNhYmxlZC5cIik7XHJcblx0XHRcdFx0c2V0dGluZ3MucHVzaEZvbGxvd2VycyA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgLy8gd2FpdCB1bnRpbCBhbGwgZmluaXNoZWQsIGJlY2F1c2Ugd2l0aCByZXNwb25zaXZlIGR1cmF0aW9uIGl0IHdpbGwgb25seSBiZSBzZXQgYWZ0ZXIgc2NlbmUgaXMgYWRkZWQgdG8gY29udHJvbGxlclxyXG5cdFx0XHRcdGlmIChfcGluICYmIF9vcHRpb25zLmR1cmF0aW9uID09PSAwICYmIHB1c2hGb2xsb3dlcnNBY3RpdmVseVNldCAmJiBzZXR0aW5ncy5wdXNoRm9sbG93ZXJzKSB7XHJcblx0XHRcdFx0XHRsb2coMiwgXCJXQVJOSU5HOiBwdXNoRm9sbG93ZXJzID1cIiwgdHJ1ZSwgXCJoYXMgbm8gZWZmZWN0LCB3aGVuIHNjZW5lIGR1cmF0aW9uIGlzIDAuXCIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgMCk7XHJcblxyXG5cdFx0XHQvLyBjcmVhdGUgc3BhY2VyIGFuZCBpbnNlcnRcclxuXHRcdFx0dmFyXHJcblx0XHRcdFx0c3BhY2VyID0gX3Bpbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwgX3BpbiksXHJcblx0XHRcdFx0c3BhY2VyQ1NTID0gX3V0aWwuZXh0ZW5kKHBpbkNTUywge1xyXG5cdFx0XHRcdFx0cG9zaXRpb246IGluRmxvdyA/IFwicmVsYXRpdmVcIiA6IFwiYWJzb2x1dGVcIixcclxuXHRcdFx0XHRcdGJveFNpemluZzogXCJjb250ZW50LWJveFwiLFxyXG5cdFx0XHRcdFx0bW96Qm94U2l6aW5nOiBcImNvbnRlbnQtYm94XCIsXHJcblx0XHRcdFx0XHR3ZWJraXRCb3hTaXppbmc6IFwiY29udGVudC1ib3hcIlxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0aWYgKCFpbkZsb3cpIHsgLy8gY29weSBzaXplIGlmIHBvc2l0aW9uZWQgYWJzb2x1dGVseSwgdG8gd29yayBmb3IgYm90dG9tL3JpZ2h0IHBvc2l0aW9uZWQgZWxlbWVudHMuXHJcblx0XHRcdFx0X3V0aWwuZXh0ZW5kKHNwYWNlckNTUywgX3V0aWwuY3NzKF9waW4sIFtcIndpZHRoXCIsIFwiaGVpZ2h0XCJdKSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdF91dGlsLmNzcyhzcGFjZXIsIHNwYWNlckNTUyk7XHJcblx0XHRcdHNwYWNlci5zZXRBdHRyaWJ1dGUoUElOX1NQQUNFUl9BVFRSSUJVVEUsIFwiXCIpO1xyXG5cdFx0XHRfdXRpbC5hZGRDbGFzcyhzcGFjZXIsIHNldHRpbmdzLnNwYWNlckNsYXNzKTtcclxuXHJcblx0XHRcdC8vIHNldCB0aGUgcGluIE9wdGlvbnNcclxuXHRcdFx0X3Bpbk9wdGlvbnMgPSB7XHJcblx0XHRcdFx0c3BhY2VyOiBzcGFjZXIsXHJcblx0XHRcdFx0cmVsU2l6ZTogeyAvLyBzYXZlIGlmIHNpemUgaXMgZGVmaW5lZCB1c2luZyAlIHZhbHVlcy4gaWYgc28sIGhhbmRsZSBzcGFjZXIgcmVzaXplIGRpZmZlcmVudGx5Li4uXHJcblx0XHRcdFx0XHR3aWR0aDogc2l6ZUNTUy53aWR0aC5zbGljZSgtMSkgPT09IFwiJVwiLFxyXG5cdFx0XHRcdFx0aGVpZ2h0OiBzaXplQ1NTLmhlaWdodC5zbGljZSgtMSkgPT09IFwiJVwiLFxyXG5cdFx0XHRcdFx0YXV0b0Z1bGxXaWR0aDogc2l6ZUNTUy53aWR0aCA9PT0gXCJhdXRvXCIgJiYgaW5GbG93ICYmIF91dGlsLmlzTWFyZ2luQ29sbGFwc2VUeXBlKHBpbkNTUy5kaXNwbGF5KVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0cHVzaEZvbGxvd2Vyczogc2V0dGluZ3MucHVzaEZvbGxvd2VycyxcclxuXHRcdFx0XHRpbkZsb3c6IGluRmxvdywgLy8gc3RvcmVzIGlmIHRoZSBlbGVtZW50IHRha2VzIHVwIHNwYWNlIGluIHRoZSBkb2N1bWVudCBmbG93XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRpZiAoIV9waW4uX19fb3JpZ1N0eWxlKSB7XHJcblx0XHRcdFx0X3Bpbi5fX19vcmlnU3R5bGUgPSB7fTtcclxuXHRcdFx0XHR2YXJcclxuXHRcdFx0XHRcdHBpbklubGluZUNTUyA9IF9waW4uc3R5bGUsXHJcblx0XHRcdFx0XHRjb3B5U3R5bGVzID0gYm91bmRzUGFyYW1zLmNvbmNhdChbXCJ3aWR0aFwiLCBcImhlaWdodFwiLCBcInBvc2l0aW9uXCIsIFwiYm94U2l6aW5nXCIsIFwibW96Qm94U2l6aW5nXCIsIFwid2Via2l0Qm94U2l6aW5nXCJdKTtcclxuXHRcdFx0XHRjb3B5U3R5bGVzLmZvckVhY2goZnVuY3Rpb24gKHZhbCkge1xyXG5cdFx0XHRcdFx0X3Bpbi5fX19vcmlnU3R5bGVbdmFsXSA9IHBpbklubGluZUNTU1t2YWxdIHx8IFwiXCI7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGlmIHJlbGF0aXZlIHNpemUsIHRyYW5zZmVyIGl0IHRvIHNwYWNlciBhbmQgbWFrZSBwaW4gY2FsY3VsYXRlIGl0Li4uXHJcblx0XHRcdGlmIChfcGluT3B0aW9ucy5yZWxTaXplLndpZHRoKSB7XHJcblx0XHRcdFx0X3V0aWwuY3NzKHNwYWNlciwge1xyXG5cdFx0XHRcdFx0d2lkdGg6IHNpemVDU1Mud2lkdGhcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoX3Bpbk9wdGlvbnMucmVsU2l6ZS5oZWlnaHQpIHtcclxuXHRcdFx0XHRfdXRpbC5jc3Moc3BhY2VyLCB7XHJcblx0XHRcdFx0XHRoZWlnaHQ6IHNpemVDU1MuaGVpZ2h0XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIG5vdyBwbGFjZSB0aGUgcGluIGVsZW1lbnQgaW5zaWRlIHRoZSBzcGFjZXJcdFxyXG5cdFx0XHRzcGFjZXIuYXBwZW5kQ2hpbGQoX3Bpbik7XHJcblx0XHRcdC8vIGFuZCBzZXQgbmV3IGNzc1xyXG5cdFx0XHRfdXRpbC5jc3MoX3Bpbiwge1xyXG5cdFx0XHRcdHBvc2l0aW9uOiBpbkZsb3cgPyBcInJlbGF0aXZlXCIgOiBcImFic29sdXRlXCIsXHJcblx0XHRcdFx0bWFyZ2luOiBcImF1dG9cIixcclxuXHRcdFx0XHR0b3A6IFwiYXV0b1wiLFxyXG5cdFx0XHRcdGxlZnQ6IFwiYXV0b1wiLFxyXG5cdFx0XHRcdGJvdHRvbTogXCJhdXRvXCIsXHJcblx0XHRcdFx0cmlnaHQ6IFwiYXV0b1wiXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0aWYgKF9waW5PcHRpb25zLnJlbFNpemUud2lkdGggfHwgX3Bpbk9wdGlvbnMucmVsU2l6ZS5hdXRvRnVsbFdpZHRoKSB7XHJcblx0XHRcdFx0X3V0aWwuY3NzKF9waW4sIHtcclxuXHRcdFx0XHRcdGJveFNpemluZzogXCJib3JkZXItYm94XCIsXHJcblx0XHRcdFx0XHRtb3pCb3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxyXG5cdFx0XHRcdFx0d2Via2l0Qm94U2l6aW5nOiBcImJvcmRlci1ib3hcIlxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBhZGQgbGlzdGVuZXIgdG8gZG9jdW1lbnQgdG8gdXBkYXRlIHBpbiBwb3NpdGlvbiBpbiBjYXNlIGNvbnRyb2xsZXIgaXMgbm90IHRoZSBkb2N1bWVudC5cclxuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHVwZGF0ZVBpbkluQ29udGFpbmVyKTtcclxuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHVwZGF0ZVBpbkluQ29udGFpbmVyKTtcclxuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHVwZGF0ZVJlbGF0aXZlUGluU3BhY2VyKTtcclxuXHRcdFx0Ly8gYWRkIG1vdXNld2hlZWwgbGlzdGVuZXIgdG8gY2F0Y2ggc2Nyb2xscyBvdmVyIGZpeGVkIGVsZW1lbnRzXHJcblx0XHRcdF9waW4uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNld2hlZWxcIiwgb25Nb3VzZXdoZWVsT3ZlclBpbik7XHJcblx0XHRcdF9waW4uYWRkRXZlbnRMaXN0ZW5lcihcIkRPTU1vdXNlU2Nyb2xsXCIsIG9uTW91c2V3aGVlbE92ZXJQaW4pO1xyXG5cclxuXHRcdFx0bG9nKDMsIFwiYWRkZWQgcGluXCIpO1xyXG5cclxuXHRcdFx0Ly8gZmluYWxseSB1cGRhdGUgdGhlIHBpbiB0byBpbml0XHJcblx0XHRcdHVwZGF0ZVBpblN0YXRlKCk7XHJcblxyXG5cdFx0XHRyZXR1cm4gU2NlbmU7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogUmVtb3ZlIHRoZSBwaW4gZnJvbSB0aGUgc2NlbmUuXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI3JlbW92ZVBpblxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIHJlbW92ZSB0aGUgcGluIGZyb20gdGhlIHNjZW5lIHdpdGhvdXQgcmVzZXR0aW5nIGl0ICh0aGUgc3BhY2VyIGlzIG5vdCByZW1vdmVkKVxyXG5cdFx0ICogc2NlbmUucmVtb3ZlUGluKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gcmVtb3ZlIHRoZSBwaW4gZnJvbSB0aGUgc2NlbmUgYW5kIHJlc2V0IHRoZSBwaW4gZWxlbWVudCB0byBpdHMgaW5pdGlhbCBwb3NpdGlvbiAoc3BhY2VyIGlzIHJlbW92ZWQpXHJcblx0XHQgKiBzY2VuZS5yZW1vdmVQaW4odHJ1ZSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBbcmVzZXQ9ZmFsc2VdIC0gSWYgYGZhbHNlYCB0aGUgc3BhY2VyIHdpbGwgbm90IGJlIHJlbW92ZWQgYW5kIHRoZSBlbGVtZW50J3MgcG9zaXRpb24gd2lsbCBub3QgYmUgcmVzZXQuXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLnJlbW92ZVBpbiA9IGZ1bmN0aW9uIChyZXNldCkge1xyXG5cdFx0XHRpZiAoX3Bpbikge1xyXG5cdFx0XHRcdGlmIChfc3RhdGUgPT09IFNDRU5FX1NUQVRFX0RVUklORykge1xyXG5cdFx0XHRcdFx0dXBkYXRlUGluU3RhdGUodHJ1ZSk7IC8vIGZvcmNlIHVucGluIGF0IHBvc2l0aW9uXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChyZXNldCB8fCAhX2NvbnRyb2xsZXIpIHsgLy8gaWYgdGhlcmUncyBubyBjb250cm9sbGVyIG5vIHByb2dyZXNzIHdhcyBtYWRlIGFueXdheS4uLlxyXG5cdFx0XHRcdFx0dmFyIHBpblRhcmdldCA9IF9waW5PcHRpb25zLnNwYWNlci5maXJzdENoaWxkOyAvLyB1c3VhbGx5IHRoZSBwaW4gZWxlbWVudCwgYnV0IG1heSBiZSBhbm90aGVyIHNwYWNlciAoY2FzY2FkZWQgcGlucykuLi5cclxuXHRcdFx0XHRcdGlmIChwaW5UYXJnZXQuaGFzQXR0cmlidXRlKFBJTl9TUEFDRVJfQVRUUklCVVRFKSkgeyAvLyBjb3B5IG1hcmdpbnMgdG8gY2hpbGQgc3BhY2VyXHJcblx0XHRcdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0XHRcdHN0eWxlID0gX3Bpbk9wdGlvbnMuc3BhY2VyLnN0eWxlLFxyXG5cdFx0XHRcdFx0XHRcdHZhbHVlcyA9IFtcIm1hcmdpblwiLCBcIm1hcmdpbkxlZnRcIiwgXCJtYXJnaW5SaWdodFwiLCBcIm1hcmdpblRvcFwiLCBcIm1hcmdpbkJvdHRvbVwiXSxcclxuXHRcdFx0XHRcdFx0XHRtYXJnaW5zID0ge307XHJcblx0XHRcdFx0XHRcdHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWwpIHtcclxuXHRcdFx0XHRcdFx0XHRtYXJnaW5zW3ZhbF0gPSBzdHlsZVt2YWxdIHx8IFwiXCI7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHRfdXRpbC5jc3MocGluVGFyZ2V0LCBtYXJnaW5zKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdF9waW5PcHRpb25zLnNwYWNlci5wYXJlbnROb2RlLmluc2VydEJlZm9yZShwaW5UYXJnZXQsIF9waW5PcHRpb25zLnNwYWNlcik7XHJcblx0XHRcdFx0XHRfcGluT3B0aW9ucy5zcGFjZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChfcGluT3B0aW9ucy5zcGFjZXIpO1xyXG5cdFx0XHRcdFx0aWYgKCFfcGluLnBhcmVudE5vZGUuaGFzQXR0cmlidXRlKFBJTl9TUEFDRVJfQVRUUklCVVRFKSkgeyAvLyBpZiBpdCdzIHRoZSBsYXN0IHBpbiBmb3IgdGhpcyBlbGVtZW50IC0+IHJlc3RvcmUgaW5saW5lIHN0eWxlc1xyXG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBvbmx5IGNvcnJlY3RseSBzZXQgZm9yIGZpcnN0IHBpbiAod2hlbiBjYXNjYWRpbmcpIC0gaG93IHRvIGZpeD9cclxuXHRcdFx0XHRcdFx0X3V0aWwuY3NzKF9waW4sIF9waW4uX19fb3JpZ1N0eWxlKTtcclxuXHRcdFx0XHRcdFx0ZGVsZXRlIF9waW4uX19fb3JpZ1N0eWxlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdXBkYXRlUGluSW5Db250YWluZXIpO1xyXG5cdFx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB1cGRhdGVQaW5JbkNvbnRhaW5lcik7XHJcblx0XHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHVwZGF0ZVJlbGF0aXZlUGluU3BhY2VyKTtcclxuXHRcdFx0XHRfcGluLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXdoZWVsXCIsIG9uTW91c2V3aGVlbE92ZXJQaW4pO1xyXG5cdFx0XHRcdF9waW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTU1vdXNlU2Nyb2xsXCIsIG9uTW91c2V3aGVlbE92ZXJQaW4pO1xyXG5cdFx0XHRcdF9waW4gPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0bG9nKDMsIFwicmVtb3ZlZCBwaW4gKHJlc2V0OiBcIiArIChyZXNldCA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiKSArIFwiKVwiKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gU2NlbmU7XHJcblx0XHR9O1xyXG5cclxuXHJcblx0XHR2YXJcclxuXHRcdFx0X2Nzc0NsYXNzZXMsXHJcblx0XHRcdF9jc3NDbGFzc0VsZW1zID0gW107XHJcblxyXG5cdFx0U2NlbmVcclxuXHRcdFx0Lm9uKFwiZGVzdHJveS5pbnRlcm5hbFwiLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdFNjZW5lLnJlbW92ZUNsYXNzVG9nZ2xlKGUucmVzZXQpO1xyXG5cdFx0XHR9KTtcclxuXHRcdC8qKlxyXG5cdFx0ICogRGVmaW5lIGEgY3NzIGNsYXNzIG1vZGlmaWNhdGlvbiB3aGlsZSB0aGUgc2NlbmUgaXMgYWN0aXZlLiAgXHJcblx0XHQgKiBXaGVuIHRoZSBzY2VuZSB0cmlnZ2VycyB0aGUgY2xhc3NlcyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBzdXBwbGllZCBlbGVtZW50IGFuZCByZW1vdmVkLCB3aGVuIHRoZSBzY2VuZSBpcyBvdmVyLlxyXG5cdFx0ICogSWYgdGhlIHNjZW5lIGR1cmF0aW9uIGlzIDAgdGhlIGNsYXNzZXMgd2lsbCBvbmx5IGJlIHJlbW92ZWQgaWYgdGhlIHVzZXIgc2Nyb2xscyBiYWNrIHBhc3QgdGhlIHN0YXJ0IHBvc2l0aW9uLlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNzZXRDbGFzc1RvZ2dsZVxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGFkZCB0aGUgY2xhc3MgJ215Y2xhc3MnIHRvIHRoZSBlbGVtZW50IHdpdGggdGhlIGlkICdteS1lbGVtJyBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBzY2VuZVxyXG5cdFx0ICogc2NlbmUuc2V0Q2xhc3NUb2dnbGUoXCIjbXktZWxlbVwiLCBcIm15Y2xhc3NcIik7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gYWRkIG11bHRpcGxlIGNsYXNzZXMgdG8gbXVsdGlwbGUgZWxlbWVudHMgZGVmaW5lZCBieSB0aGUgc2VsZWN0b3IgJy5jbGFzc0NoYW5nZSdcclxuXHRcdCAqIHNjZW5lLnNldENsYXNzVG9nZ2xlKFwiLmNsYXNzQ2hhbmdlXCIsIFwiY2xhc3MxIGNsYXNzMiBjbGFzczNcIik7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHsoc3RyaW5nfG9iamVjdCl9IGVsZW1lbnQgLSBBIFNlbGVjdG9yIHRhcmdldGluZyBvbmUgb3IgbW9yZSBlbGVtZW50cyBvciBhIERPTSBvYmplY3QgdGhhdCBpcyBzdXBwb3NlZCB0byBiZSBtb2RpZmllZC5cclxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc2VzIC0gT25lIG9yIG1vcmUgQ2xhc3NuYW1lcyAoc2VwYXJhdGVkIGJ5IHNwYWNlKSB0aGF0IHNob3VsZCBiZSBhZGRlZCB0byB0aGUgZWxlbWVudCBkdXJpbmcgdGhlIHNjZW5lLlxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuc2V0Q2xhc3NUb2dnbGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3Nlcykge1xyXG5cdFx0XHR2YXIgZWxlbXMgPSBfdXRpbC5nZXQuZWxlbWVudHMoZWxlbWVudCk7XHJcblx0XHRcdGlmIChlbGVtcy5sZW5ndGggPT09IDAgfHwgIV91dGlsLnR5cGUuU3RyaW5nKGNsYXNzZXMpKSB7XHJcblx0XHRcdFx0bG9nKDEsIFwiRVJST1IgY2FsbGluZyBtZXRob2QgJ3NldENsYXNzVG9nZ2xlKCknOiBJbnZhbGlkIFwiICsgKGVsZW1zLmxlbmd0aCA9PT0gMCA/IFwiZWxlbWVudFwiIDogXCJjbGFzc2VzXCIpICsgXCIgc3VwcGxpZWQuXCIpO1xyXG5cdFx0XHRcdHJldHVybiBTY2VuZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoX2Nzc0NsYXNzRWxlbXMubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdC8vIHJlbW92ZSBvbGQgb25lc1xyXG5cdFx0XHRcdFNjZW5lLnJlbW92ZUNsYXNzVG9nZ2xlKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0X2Nzc0NsYXNzZXMgPSBjbGFzc2VzO1xyXG5cdFx0XHRfY3NzQ2xhc3NFbGVtcyA9IGVsZW1zO1xyXG5cdFx0XHRTY2VuZS5vbihcImVudGVyLmludGVybmFsX2NsYXNzIGxlYXZlLmludGVybmFsX2NsYXNzXCIsIGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0dmFyIHRvZ2dsZSA9IGUudHlwZSA9PT0gXCJlbnRlclwiID8gX3V0aWwuYWRkQ2xhc3MgOiBfdXRpbC5yZW1vdmVDbGFzcztcclxuXHRcdFx0XHRfY3NzQ2xhc3NFbGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtLCBrZXkpIHtcclxuXHRcdFx0XHRcdHRvZ2dsZShlbGVtLCBfY3NzQ2xhc3Nlcyk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRyZXR1cm4gU2NlbmU7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogUmVtb3ZlIHRoZSBjbGFzcyBiaW5kaW5nIGZyb20gdGhlIHNjZW5lLlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNyZW1vdmVDbGFzc1RvZ2dsZVxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIHJlbW92ZSBjbGFzcyBiaW5kaW5nIGZyb20gdGhlIHNjZW5lIHdpdGhvdXQgcmVzZXRcclxuXHRcdCAqIHNjZW5lLnJlbW92ZUNsYXNzVG9nZ2xlKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gcmVtb3ZlIGNsYXNzIGJpbmRpbmcgYW5kIHJlbW92ZSB0aGUgY2hhbmdlcyBpdCBjYXVzZWRcclxuXHRcdCAqIHNjZW5lLnJlbW92ZUNsYXNzVG9nZ2xlKHRydWUpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Jlc2V0PWZhbHNlXSAtIElmIGBmYWxzZWAgYW5kIHRoZSBjbGFzc2VzIGFyZSBjdXJyZW50bHkgYWN0aXZlLCB0aGV5IHdpbGwgcmVtYWluIG9uIHRoZSBlbGVtZW50LiBJZiBgdHJ1ZWAgdGhleSB3aWxsIGJlIHJlbW92ZWQuXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLnJlbW92ZUNsYXNzVG9nZ2xlID0gZnVuY3Rpb24gKHJlc2V0KSB7XHJcblx0XHRcdGlmIChyZXNldCkge1xyXG5cdFx0XHRcdF9jc3NDbGFzc0VsZW1zLmZvckVhY2goZnVuY3Rpb24gKGVsZW0sIGtleSkge1xyXG5cdFx0XHRcdFx0X3V0aWwucmVtb3ZlQ2xhc3MoZWxlbSwgX2Nzc0NsYXNzZXMpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdFNjZW5lLm9mZihcInN0YXJ0LmludGVybmFsX2NsYXNzIGVuZC5pbnRlcm5hbF9jbGFzc1wiKTtcclxuXHRcdFx0X2Nzc0NsYXNzZXMgPSB1bmRlZmluZWQ7XHJcblx0XHRcdF9jc3NDbGFzc0VsZW1zID0gW107XHJcblx0XHRcdHJldHVybiBTY2VuZTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gSU5JVFxyXG5cdFx0Y29uc3RydWN0KCk7XHJcblx0XHRyZXR1cm4gU2NlbmU7XHJcblx0fTtcclxuXHJcblx0Ly8gc3RvcmUgcGFnZXdpZGUgc2NlbmUgb3B0aW9uc1xyXG5cdHZhciBTQ0VORV9PUFRJT05TID0ge1xyXG5cdFx0ZGVmYXVsdHM6IHtcclxuXHRcdFx0ZHVyYXRpb246IDAsXHJcblx0XHRcdG9mZnNldDogMCxcclxuXHRcdFx0dHJpZ2dlckVsZW1lbnQ6IHVuZGVmaW5lZCxcclxuXHRcdFx0dHJpZ2dlckhvb2s6IDAuNSxcclxuXHRcdFx0cmV2ZXJzZTogdHJ1ZSxcclxuXHRcdFx0bG9nbGV2ZWw6IDJcclxuXHRcdH0sXHJcblx0XHR2YWxpZGF0ZToge1xyXG5cdFx0XHRvZmZzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcclxuXHRcdFx0XHR2YWwgPSBwYXJzZUZsb2F0KHZhbCk7XHJcblx0XHRcdFx0aWYgKCFfdXRpbC50eXBlLk51bWJlcih2YWwpKSB7XHJcblx0XHRcdFx0XHR0aHJvdyBbXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcIm9mZnNldFxcXCI6XCIsIHZhbF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB2YWw7XHJcblx0XHRcdH0sXHJcblx0XHRcdHRyaWdnZXJFbGVtZW50OiBmdW5jdGlvbiAodmFsKSB7XHJcblx0XHRcdFx0dmFsID0gdmFsIHx8IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRpZiAodmFsKSB7XHJcblx0XHRcdFx0XHR2YXIgZWxlbSA9IF91dGlsLmdldC5lbGVtZW50cyh2YWwpWzBdO1xyXG5cdFx0XHRcdFx0aWYgKGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlKSB7XHJcblx0XHRcdFx0XHRcdHZhbCA9IGVsZW07XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHR0aHJvdyBbXCJFbGVtZW50IGRlZmluZWQgaW4gb3B0aW9uIFxcXCJ0cmlnZ2VyRWxlbWVudFxcXCIgd2FzIG5vdCBmb3VuZDpcIiwgdmFsXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHZhbDtcclxuXHRcdFx0fSxcclxuXHRcdFx0dHJpZ2dlckhvb2s6IGZ1bmN0aW9uICh2YWwpIHtcclxuXHRcdFx0XHR2YXIgdHJhbnNsYXRlID0ge1xyXG5cdFx0XHRcdFx0XCJvbkNlbnRlclwiOiAwLjUsXHJcblx0XHRcdFx0XHRcIm9uRW50ZXJcIjogMSxcclxuXHRcdFx0XHRcdFwib25MZWF2ZVwiOiAwXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRpZiAoX3V0aWwudHlwZS5OdW1iZXIodmFsKSkge1xyXG5cdFx0XHRcdFx0dmFsID0gTWF0aC5tYXgoMCwgTWF0aC5taW4ocGFyc2VGbG9hdCh2YWwpLCAxKSk7IC8vICBtYWtlIHN1cmUgaXRzIGJldHdlZWVuIDAgYW5kIDFcclxuXHRcdFx0XHR9IGVsc2UgaWYgKHZhbCBpbiB0cmFuc2xhdGUpIHtcclxuXHRcdFx0XHRcdHZhbCA9IHRyYW5zbGF0ZVt2YWxdO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0aHJvdyBbXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcInRyaWdnZXJIb29rXFxcIjogXCIsIHZhbF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB2YWw7XHJcblx0XHRcdH0sXHJcblx0XHRcdHJldmVyc2U6IGZ1bmN0aW9uICh2YWwpIHtcclxuXHRcdFx0XHRyZXR1cm4gISF2YWw7IC8vIGZvcmNlIGJvb2xlYW5cclxuXHRcdFx0fSxcclxuXHRcdFx0bG9nbGV2ZWw6IGZ1bmN0aW9uICh2YWwpIHtcclxuXHRcdFx0XHR2YWwgPSBwYXJzZUludCh2YWwpO1xyXG5cdFx0XHRcdGlmICghX3V0aWwudHlwZS5OdW1iZXIodmFsKSB8fCB2YWwgPCAwIHx8IHZhbCA+IDMpIHtcclxuXHRcdFx0XHRcdHRocm93IFtcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwibG9nbGV2ZWxcXFwiOlwiLCB2YWxdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdmFsO1xyXG5cdFx0XHR9XHJcblx0XHR9LCAvLyBob2xkZXIgZm9yICB2YWxpZGF0aW9uIG1ldGhvZHMuIGR1cmF0aW9uIHZhbGlkYXRpb24gaXMgaGFuZGxlZCBpbiAnZ2V0dGVycy1zZXR0ZXJzLmpzJ1xyXG5cdFx0c2hpZnRzOiBbXCJkdXJhdGlvblwiLCBcIm9mZnNldFwiLCBcInRyaWdnZXJIb29rXCJdLCAvLyBsaXN0IG9mIG9wdGlvbnMgdGhhdCB0cmlnZ2VyIGEgYHNoaWZ0YCBldmVudFxyXG5cdH07XHJcblx0LypcclxuXHQgKiBtZXRob2QgdXNlZCB0byBhZGQgYW4gb3B0aW9uIHRvIFNjcm9sbE1hZ2ljIFNjZW5lcy5cclxuXHQgKiBUT0RPOiBET0MgKHByaXZhdGUgZm9yIGRldilcclxuXHQgKi9cclxuXHRTY3JvbGxNYWdpYy5TY2VuZS5hZGRPcHRpb24gPSBmdW5jdGlvbiAobmFtZSwgZGVmYXVsdFZhbHVlLCB2YWxpZGF0aW9uQ2FsbGJhY2ssIHNoaWZ0cykge1xyXG5cdFx0aWYgKCEobmFtZSBpbiBTQ0VORV9PUFRJT05TLmRlZmF1bHRzKSkge1xyXG5cdFx0XHRTQ0VORV9PUFRJT05TLmRlZmF1bHRzW25hbWVdID0gZGVmYXVsdFZhbHVlO1xyXG5cdFx0XHRTQ0VORV9PUFRJT05TLnZhbGlkYXRlW25hbWVdID0gdmFsaWRhdGlvbkNhbGxiYWNrO1xyXG5cdFx0XHRpZiAoc2hpZnRzKSB7XHJcblx0XHRcdFx0U0NFTkVfT1BUSU9OUy5zaGlmdHMucHVzaChuYW1lKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0U2Nyb2xsTWFnaWMuX3V0aWwubG9nKDEsIFwiW3N0YXRpY10gU2Nyb2xsTWFnaWMuU2NlbmUgLT4gQ2Fubm90IGFkZCBTY2VuZSBvcHRpb24gJ1wiICsgbmFtZSArIFwiJywgYmVjYXVzZSBpdCBhbHJlYWR5IGV4aXN0cy5cIik7XHJcblx0XHR9XHJcblx0fTtcclxuXHQvLyBpbnN0YW5jZSBleHRlbnNpb24gZnVuY3Rpb24gZm9yIHBsdWdpbnNcclxuXHQvLyBUT0RPOiBET0MgKHByaXZhdGUgZm9yIGRldilcclxuXHRTY3JvbGxNYWdpYy5TY2VuZS5leHRlbmQgPSBmdW5jdGlvbiAoZXh0ZW5zaW9uKSB7XHJcblx0XHR2YXIgb2xkQ2xhc3MgPSB0aGlzO1xyXG5cdFx0U2Nyb2xsTWFnaWMuU2NlbmUgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdG9sZENsYXNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblx0XHRcdHRoaXMuJHN1cGVyID0gX3V0aWwuZXh0ZW5kKHt9LCB0aGlzKTsgLy8gY29weSBwYXJlbnQgc3RhdGVcclxuXHRcdFx0cmV0dXJuIGV4dGVuc2lvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcblx0XHR9O1xyXG5cdFx0X3V0aWwuZXh0ZW5kKFNjcm9sbE1hZ2ljLlNjZW5lLCBvbGRDbGFzcyk7IC8vIGNvcHkgcHJvcGVydGllc1xyXG5cdFx0U2Nyb2xsTWFnaWMuU2NlbmUucHJvdG90eXBlID0gb2xkQ2xhc3MucHJvdG90eXBlOyAvLyBjb3B5IHByb3RvdHlwZVxyXG5cdFx0U2Nyb2xsTWFnaWMuU2NlbmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2Nyb2xsTWFnaWMuU2NlbmU7IC8vIHJlc3RvcmUgY29uc3RydWN0b3JcclxuXHR9O1xyXG5cclxuXHJcblxyXG5cdC8qKlxyXG5cdCAqIFRPRE86IERPQ1MgKHByaXZhdGUgZm9yIGRldilcclxuXHQgKiBAY2xhc3NcclxuXHQgKiBAcHJpdmF0ZVxyXG5cdCAqL1xyXG5cclxuXHRTY3JvbGxNYWdpYy5FdmVudCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lc3BhY2UsIHRhcmdldCwgdmFycykge1xyXG5cdFx0dmFycyA9IHZhcnMgfHwge307XHJcblx0XHRmb3IgKHZhciBrZXkgaW4gdmFycykge1xyXG5cdFx0XHR0aGlzW2tleV0gPSB2YXJzW2tleV07XHJcblx0XHR9XHJcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xyXG5cdFx0dGhpcy50YXJnZXQgPSB0aGlzLmN1cnJlbnRUYXJnZXQgPSB0YXJnZXQ7XHJcblx0XHR0aGlzLm5hbWVzcGFjZSA9IG5hbWVzcGFjZSB8fCAnJztcclxuXHRcdHRoaXMudGltZVN0YW1wID0gdGhpcy50aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fTtcclxuXHJcblx0LypcclxuXHQgKiBUT0RPOiBET0NTIChwcml2YXRlIGZvciBkZXYpXHJcblx0ICovXHJcblxyXG5cdHZhciBfdXRpbCA9IFNjcm9sbE1hZ2ljLl91dGlsID0gKGZ1bmN0aW9uICh3aW5kb3cpIHtcclxuXHRcdHZhciBVID0ge30sXHJcblx0XHRcdGk7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqIGludGVybmFsIGhlbHBlcnNcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICovXHJcblxyXG5cdFx0Ly8gcGFyc2UgZmxvYXQgYW5kIGZhbGwgYmFjayB0byAwLlxyXG5cdFx0dmFyIGZsb2F0dmFsID0gZnVuY3Rpb24gKG51bWJlcikge1xyXG5cdFx0XHRyZXR1cm4gcGFyc2VGbG9hdChudW1iZXIpIHx8IDA7XHJcblx0XHR9O1xyXG5cdFx0Ly8gZ2V0IGN1cnJlbnQgc3R5bGUgSUUgc2FmZSAob3RoZXJ3aXNlIElFIHdvdWxkIHJldHVybiBjYWxjdWxhdGVkIHZhbHVlcyBmb3IgJ2F1dG8nKVxyXG5cdFx0dmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZnVuY3Rpb24gKGVsZW0pIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0uY3VycmVudFN0eWxlID8gZWxlbS5jdXJyZW50U3R5bGUgOiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gZ2V0IGVsZW1lbnQgZGltZW5zaW9uICh3aWR0aCBvciBoZWlnaHQpXHJcblx0XHR2YXIgX2RpbWVuc2lvbiA9IGZ1bmN0aW9uICh3aGljaCwgZWxlbSwgb3V0ZXIsIGluY2x1ZGVNYXJnaW4pIHtcclxuXHRcdFx0ZWxlbSA9IChlbGVtID09PSBkb2N1bWVudCkgPyB3aW5kb3cgOiBlbGVtO1xyXG5cdFx0XHRpZiAoZWxlbSA9PT0gd2luZG93KSB7XHJcblx0XHRcdFx0aW5jbHVkZU1hcmdpbiA9IGZhbHNlO1xyXG5cdFx0XHR9IGVsc2UgaWYgKCFfdHlwZS5Eb21FbGVtZW50KGVsZW0pKSB7XHJcblx0XHRcdFx0cmV0dXJuIDA7XHJcblx0XHRcdH1cclxuXHRcdFx0d2hpY2ggPSB3aGljaC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdoaWNoLnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHR2YXIgZGltZW5zaW9uID0gKG91dGVyID8gZWxlbVsnb2Zmc2V0JyArIHdoaWNoXSB8fCBlbGVtWydvdXRlcicgKyB3aGljaF0gOiBlbGVtWydjbGllbnQnICsgd2hpY2hdIHx8IGVsZW1bJ2lubmVyJyArIHdoaWNoXSkgfHwgMDtcclxuXHRcdFx0aWYgKG91dGVyICYmIGluY2x1ZGVNYXJnaW4pIHtcclxuXHRcdFx0XHR2YXIgc3R5bGUgPSBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTtcclxuXHRcdFx0XHRkaW1lbnNpb24gKz0gd2hpY2ggPT09ICdIZWlnaHQnID8gZmxvYXR2YWwoc3R5bGUubWFyZ2luVG9wKSArIGZsb2F0dmFsKHN0eWxlLm1hcmdpbkJvdHRvbSkgOiBmbG9hdHZhbChzdHlsZS5tYXJnaW5MZWZ0KSArIGZsb2F0dmFsKHN0eWxlLm1hcmdpblJpZ2h0KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gZGltZW5zaW9uO1xyXG5cdFx0fTtcclxuXHRcdC8vIGNvbnZlcnRzICdtYXJnaW4tdG9wJyBpbnRvICdtYXJnaW5Ub3AnXHJcblx0XHR2YXIgX2NhbWVsQ2FzZSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuXHRcdFx0cmV0dXJuIHN0ci5yZXBsYWNlKC9eW15hLXpdKyhbYS16XSkvZywgJyQxJykucmVwbGFjZSgvLShbYS16XSkvZywgZnVuY3Rpb24gKGcpIHtcclxuXHRcdFx0XHRyZXR1cm4gZ1sxXS50b1VwcGVyQ2FzZSgpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqIGV4dGVybmFsIGhlbHBlcnNcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICovXHJcblxyXG5cdFx0Ly8gZXh0ZW5kIG9iaiDigJMgc2FtZSBhcyBqUXVlcnkuZXh0ZW5kKHt9LCBvYmpBLCBvYmpCKVxyXG5cdFx0VS5leHRlbmQgPSBmdW5jdGlvbiAob2JqKSB7XHJcblx0XHRcdG9iaiA9IG9iaiB8fCB7fTtcclxuXHRcdFx0Zm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdGlmICghYXJndW1lbnRzW2ldKSB7XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZ3VtZW50c1tpXSkge1xyXG5cdFx0XHRcdFx0aWYgKGFyZ3VtZW50c1tpXS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcblx0XHRcdFx0XHRcdG9ialtrZXldID0gYXJndW1lbnRzW2ldW2tleV07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBvYmo7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIGNoZWNrIGlmIGEgY3NzIGRpc3BsYXkgdHlwZSByZXN1bHRzIGluIG1hcmdpbi1jb2xsYXBzZSBvciBub3RcclxuXHRcdFUuaXNNYXJnaW5Db2xsYXBzZVR5cGUgPSBmdW5jdGlvbiAoc3RyKSB7XHJcblx0XHRcdHJldHVybiBbXCJibG9ja1wiLCBcImZsZXhcIiwgXCJsaXN0LWl0ZW1cIiwgXCJ0YWJsZVwiLCBcIi13ZWJraXQtYm94XCJdLmluZGV4T2Yoc3RyKSA+IC0xO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBpbXBsZW1lbnRhdGlvbiBvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcclxuXHRcdC8vIGJhc2VkIG9uIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BhdWxpcmlzaC8xNTc5NjcxXHJcblx0XHR2YXJcclxuXHRcdFx0bGFzdFRpbWUgPSAwLFxyXG5cdFx0XHR2ZW5kb3JzID0gWydtcycsICdtb3onLCAnd2Via2l0JywgJ28nXTtcclxuXHRcdHZhciBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTtcclxuXHRcdHZhciBfY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XHJcblx0XHQvLyB0cnkgdmVuZG9yIHByZWZpeGVzIGlmIHRoZSBhYm92ZSBkb2Vzbid0IHdvcmtcclxuXHRcdGZvciAoaSA9IDA7ICFfcmVxdWVzdEFuaW1hdGlvbkZyYW1lICYmIGkgPCB2ZW5kb3JzLmxlbmd0aDsgKytpKSB7XHJcblx0XHRcdF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdmVuZG9yc1tpXSArICdSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcclxuXHRcdFx0X2NhbmNlbEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZlbmRvcnNbaV0gKyAnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnXSB8fCB3aW5kb3dbdmVuZG9yc1tpXSArICdDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBmYWxsYmFja3NcclxuXHRcdGlmICghX3JlcXVlc3RBbmltYXRpb25GcmFtZSkge1xyXG5cdFx0XHRfcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcblx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRjdXJyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxyXG5cdFx0XHRcdFx0dGltZVRvQ2FsbCA9IE1hdGgubWF4KDAsIDE2IC0gKGN1cnJUaW1lIC0gbGFzdFRpbWUpKSxcclxuXHRcdFx0XHRcdGlkID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0XHRjYWxsYmFjayhjdXJyVGltZSArIHRpbWVUb0NhbGwpO1xyXG5cdFx0XHRcdFx0fSwgdGltZVRvQ2FsbCk7XHJcblx0XHRcdFx0bGFzdFRpbWUgPSBjdXJyVGltZSArIHRpbWVUb0NhbGw7XHJcblx0XHRcdFx0cmV0dXJuIGlkO1xyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdFx0aWYgKCFfY2FuY2VsQW5pbWF0aW9uRnJhbWUpIHtcclxuXHRcdFx0X2NhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gKGlkKSB7XHJcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dChpZCk7XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblx0XHRVLnJBRiA9IF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpO1xyXG5cdFx0VS5jQUYgPSBfY2FuY2VsQW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpO1xyXG5cclxuXHRcdHZhclxyXG5cdFx0XHRsb2dsZXZlbHMgPSBbXCJlcnJvclwiLCBcIndhcm5cIiwgXCJsb2dcIl0sXHJcblx0XHRcdGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZSB8fCB7fTtcclxuXHJcblx0XHRjb25zb2xlLmxvZyA9IGNvbnNvbGUubG9nIHx8IGZ1bmN0aW9uICgpIHt9OyAvLyBubyBjb25zb2xlIGxvZywgd2VsbCAtIGRvIG5vdGhpbmcgdGhlbi4uLlxyXG5cdFx0Ly8gbWFrZSBzdXJlIG1ldGhvZHMgZm9yIGFsbCBsZXZlbHMgZXhpc3QuXHJcblx0XHRmb3IgKGkgPSAwOyBpIDwgbG9nbGV2ZWxzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBtZXRob2QgPSBsb2dsZXZlbHNbaV07XHJcblx0XHRcdGlmICghY29uc29sZVttZXRob2RdKSB7XHJcblx0XHRcdFx0Y29uc29sZVttZXRob2RdID0gY29uc29sZS5sb2c7IC8vIHByZWZlciAubG9nIG92ZXIgbm90aGluZ1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRVLmxvZyA9IGZ1bmN0aW9uIChsb2dsZXZlbCkge1xyXG5cdFx0XHRpZiAobG9nbGV2ZWwgPiBsb2dsZXZlbHMubGVuZ3RoIHx8IGxvZ2xldmVsIDw9IDApIGxvZ2xldmVsID0gbG9nbGV2ZWxzLmxlbmd0aDtcclxuXHRcdFx0dmFyIG5vdyA9IG5ldyBEYXRlKCksXHJcblx0XHRcdFx0dGltZSA9IChcIjBcIiArIG5vdy5nZXRIb3VycygpKS5zbGljZSgtMikgKyBcIjpcIiArIChcIjBcIiArIG5vdy5nZXRNaW51dGVzKCkpLnNsaWNlKC0yKSArIFwiOlwiICsgKFwiMFwiICsgbm93LmdldFNlY29uZHMoKSkuc2xpY2UoLTIpICsgXCI6XCIgKyAoXCIwMFwiICsgbm93LmdldE1pbGxpc2Vjb25kcygpKS5zbGljZSgtMyksXHJcblx0XHRcdFx0bWV0aG9kID0gbG9nbGV2ZWxzW2xvZ2xldmVsIC0gMV0sXHJcblx0XHRcdFx0YXJncyA9IEFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxyXG5cdFx0XHRcdGZ1bmMgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5jYWxsKGNvbnNvbGVbbWV0aG9kXSwgY29uc29sZSk7XHJcblx0XHRcdGFyZ3MudW5zaGlmdCh0aW1lKTtcclxuXHRcdFx0ZnVuYy5hcHBseShjb25zb2xlLCBhcmdzKTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqIHR5cGUgdGVzdGluZ1xyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKi9cclxuXHJcblx0XHR2YXIgX3R5cGUgPSBVLnR5cGUgPSBmdW5jdGlvbiAodikge1xyXG5cdFx0XHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHYpLnJlcGxhY2UoL15cXFtvYmplY3QgKC4rKVxcXSQvLCBcIiQxXCIpLnRvTG93ZXJDYXNlKCk7XHJcblx0XHR9O1xyXG5cdFx0X3R5cGUuU3RyaW5nID0gZnVuY3Rpb24gKHYpIHtcclxuXHRcdFx0cmV0dXJuIF90eXBlKHYpID09PSAnc3RyaW5nJztcclxuXHRcdH07XHJcblx0XHRfdHlwZS5GdW5jdGlvbiA9IGZ1bmN0aW9uICh2KSB7XHJcblx0XHRcdHJldHVybiBfdHlwZSh2KSA9PT0gJ2Z1bmN0aW9uJztcclxuXHRcdH07XHJcblx0XHRfdHlwZS5BcnJheSA9IGZ1bmN0aW9uICh2KSB7XHJcblx0XHRcdHJldHVybiBBcnJheS5pc0FycmF5KHYpO1xyXG5cdFx0fTtcclxuXHRcdF90eXBlLk51bWJlciA9IGZ1bmN0aW9uICh2KSB7XHJcblx0XHRcdHJldHVybiAhX3R5cGUuQXJyYXkodikgJiYgKHYgLSBwYXJzZUZsb2F0KHYpICsgMSkgPj0gMDtcclxuXHRcdH07XHJcblx0XHRfdHlwZS5Eb21FbGVtZW50ID0gZnVuY3Rpb24gKG8pIHtcclxuXHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHR0eXBlb2YgSFRNTEVsZW1lbnQgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIEhUTUxFbGVtZW50ID09PSBcImZ1bmN0aW9uXCIgPyBvIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgbyBpbnN0YW5jZW9mIFNWR0VsZW1lbnQgOiAvL0RPTTJcclxuXHRcdFx0XHRvICYmIHR5cGVvZiBvID09PSBcIm9iamVjdFwiICYmIG8gIT09IG51bGwgJiYgby5ub2RlVHlwZSA9PT0gMSAmJiB0eXBlb2Ygby5ub2RlTmFtZSA9PT0gXCJzdHJpbmdcIlxyXG5cdFx0XHQpO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICogRE9NIEVsZW1lbnQgaW5mb1xyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKi9cclxuXHRcdC8vIGFsd2F5cyByZXR1cm5zIGEgbGlzdCBvZiBtYXRjaGluZyBET00gZWxlbWVudHMsIGZyb20gYSBzZWxlY3RvciwgYSBET00gZWxlbWVudCBvciBhbiBsaXN0IG9mIGVsZW1lbnRzIG9yIGV2ZW4gYW4gYXJyYXkgb2Ygc2VsZWN0b3JzXHJcblx0XHR2YXIgX2dldCA9IFUuZ2V0ID0ge307XHJcblx0XHRfZ2V0LmVsZW1lbnRzID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XHJcblx0XHRcdHZhciBhcnIgPSBbXTtcclxuXHRcdFx0aWYgKF90eXBlLlN0cmluZyhzZWxlY3RvcikpIHtcclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcclxuXHRcdFx0XHR9IGNhdGNoIChlKSB7IC8vIGludmFsaWQgc2VsZWN0b3JcclxuXHRcdFx0XHRcdHJldHVybiBhcnI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChfdHlwZShzZWxlY3RvcikgPT09ICdub2RlbGlzdCcgfHwgX3R5cGUuQXJyYXkoc2VsZWN0b3IpIHx8IHNlbGVjdG9yIGluc3RhbmNlb2YgTm9kZUxpc3QpIHtcclxuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgcmVmID0gYXJyLmxlbmd0aCA9IHNlbGVjdG9yLmxlbmd0aDsgaSA8IHJlZjsgaSsrKSB7IC8vIGxpc3Qgb2YgZWxlbWVudHNcclxuXHRcdFx0XHRcdHZhciBlbGVtID0gc2VsZWN0b3JbaV07XHJcblx0XHRcdFx0XHRhcnJbaV0gPSBfdHlwZS5Eb21FbGVtZW50KGVsZW0pID8gZWxlbSA6IF9nZXQuZWxlbWVudHMoZWxlbSk7IC8vIGlmIG5vdCBhbiBlbGVtZW50LCB0cnkgdG8gcmVzb2x2ZSByZWN1cnNpdmVseVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIGlmIChfdHlwZS5Eb21FbGVtZW50KHNlbGVjdG9yKSB8fCBzZWxlY3RvciA9PT0gZG9jdW1lbnQgfHwgc2VsZWN0b3IgPT09IHdpbmRvdykge1xyXG5cdFx0XHRcdGFyciA9IFtzZWxlY3Rvcl07IC8vIG9ubHkgdGhlIGVsZW1lbnRcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYXJyO1xyXG5cdFx0fTtcclxuXHRcdC8vIGdldCBzY3JvbGwgdG9wIHZhbHVlXHJcblx0XHRfZ2V0LnNjcm9sbFRvcCA9IGZ1bmN0aW9uIChlbGVtKSB7XHJcblx0XHRcdHJldHVybiAoZWxlbSAmJiB0eXBlb2YgZWxlbS5zY3JvbGxUb3AgPT09ICdudW1iZXInKSA/IGVsZW0uc2Nyb2xsVG9wIDogd2luZG93LnBhZ2VZT2Zmc2V0IHx8IDA7XHJcblx0XHR9O1xyXG5cdFx0Ly8gZ2V0IHNjcm9sbCBsZWZ0IHZhbHVlXHJcblx0XHRfZ2V0LnNjcm9sbExlZnQgPSBmdW5jdGlvbiAoZWxlbSkge1xyXG5cdFx0XHRyZXR1cm4gKGVsZW0gJiYgdHlwZW9mIGVsZW0uc2Nyb2xsTGVmdCA9PT0gJ251bWJlcicpID8gZWxlbS5zY3JvbGxMZWZ0IDogd2luZG93LnBhZ2VYT2Zmc2V0IHx8IDA7XHJcblx0XHR9O1xyXG5cdFx0Ly8gZ2V0IGVsZW1lbnQgaGVpZ2h0XHJcblx0XHRfZ2V0LndpZHRoID0gZnVuY3Rpb24gKGVsZW0sIG91dGVyLCBpbmNsdWRlTWFyZ2luKSB7XHJcblx0XHRcdHJldHVybiBfZGltZW5zaW9uKCd3aWR0aCcsIGVsZW0sIG91dGVyLCBpbmNsdWRlTWFyZ2luKTtcclxuXHRcdH07XHJcblx0XHQvLyBnZXQgZWxlbWVudCB3aWR0aFxyXG5cdFx0X2dldC5oZWlnaHQgPSBmdW5jdGlvbiAoZWxlbSwgb3V0ZXIsIGluY2x1ZGVNYXJnaW4pIHtcclxuXHRcdFx0cmV0dXJuIF9kaW1lbnNpb24oJ2hlaWdodCcsIGVsZW0sIG91dGVyLCBpbmNsdWRlTWFyZ2luKTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gZ2V0IGVsZW1lbnQgcG9zaXRpb24gKG9wdGlvbmFsbHkgcmVsYXRpdmUgdG8gdmlld3BvcnQpXHJcblx0XHRfZ2V0Lm9mZnNldCA9IGZ1bmN0aW9uIChlbGVtLCByZWxhdGl2ZVRvVmlld3BvcnQpIHtcclxuXHRcdFx0dmFyIG9mZnNldCA9IHtcclxuXHRcdFx0XHR0b3A6IDAsXHJcblx0XHRcdFx0bGVmdDogMFxyXG5cdFx0XHR9O1xyXG5cdFx0XHRpZiAoZWxlbSAmJiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCkgeyAvLyBjaGVjayBpZiBhdmFpbGFibGVcclxuXHRcdFx0XHR2YXIgcmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblx0XHRcdFx0b2Zmc2V0LnRvcCA9IHJlY3QudG9wO1xyXG5cdFx0XHRcdG9mZnNldC5sZWZ0ID0gcmVjdC5sZWZ0O1xyXG5cdFx0XHRcdGlmICghcmVsYXRpdmVUb1ZpZXdwb3J0KSB7IC8vIGNsaWVudFJlY3QgaXMgYnkgZGVmYXVsdCByZWxhdGl2ZSB0byB2aWV3cG9ydC4uLlxyXG5cdFx0XHRcdFx0b2Zmc2V0LnRvcCArPSBfZ2V0LnNjcm9sbFRvcCgpO1xyXG5cdFx0XHRcdFx0b2Zmc2V0LmxlZnQgKz0gX2dldC5zY3JvbGxMZWZ0KCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBvZmZzZXQ7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKiBET00gRWxlbWVudCBtYW5pcHVsYXRpb25cclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICovXHJcblxyXG5cdFx0VS5hZGRDbGFzcyA9IGZ1bmN0aW9uIChlbGVtLCBjbGFzc25hbWUpIHtcclxuXHRcdFx0aWYgKGNsYXNzbmFtZSkge1xyXG5cdFx0XHRcdGlmIChlbGVtLmNsYXNzTGlzdClcclxuXHRcdFx0XHRcdGVsZW0uY2xhc3NMaXN0LmFkZChjbGFzc25hbWUpO1xyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdGVsZW0uY2xhc3NOYW1lICs9ICcgJyArIGNsYXNzbmFtZTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcdFUucmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiAoZWxlbSwgY2xhc3NuYW1lKSB7XHJcblx0XHRcdGlmIChjbGFzc25hbWUpIHtcclxuXHRcdFx0XHRpZiAoZWxlbS5jbGFzc0xpc3QpXHJcblx0XHRcdFx0XHRlbGVtLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NuYW1lKTtcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRlbGVtLmNsYXNzTmFtZSA9IGVsZW0uY2xhc3NOYW1lLnJlcGxhY2UobmV3IFJlZ0V4cCgnKF58XFxcXGIpJyArIGNsYXNzbmFtZS5zcGxpdCgnICcpLmpvaW4oJ3wnKSArICcoXFxcXGJ8JCknLCAnZ2knKSwgJyAnKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcdC8vIGlmIG9wdGlvbnMgaXMgc3RyaW5nIC0+IHJldHVybnMgY3NzIHZhbHVlXHJcblx0XHQvLyBpZiBvcHRpb25zIGlzIGFycmF5IC0+IHJldHVybnMgb2JqZWN0IHdpdGggY3NzIHZhbHVlIHBhaXJzXHJcblx0XHQvLyBpZiBvcHRpb25zIGlzIG9iamVjdCAtPiBzZXQgbmV3IGNzcyB2YWx1ZXNcclxuXHRcdFUuY3NzID0gZnVuY3Rpb24gKGVsZW0sIG9wdGlvbnMpIHtcclxuXHRcdFx0aWYgKF90eXBlLlN0cmluZyhvcHRpb25zKSkge1xyXG5cdFx0XHRcdHJldHVybiBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKVtfY2FtZWxDYXNlKG9wdGlvbnMpXTtcclxuXHRcdFx0fSBlbHNlIGlmIChfdHlwZS5BcnJheShvcHRpb25zKSkge1xyXG5cdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0b2JqID0ge30sXHJcblx0XHRcdFx0XHRzdHlsZSA9IF9nZXRDb21wdXRlZFN0eWxlKGVsZW0pO1xyXG5cdFx0XHRcdG9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uLCBrZXkpIHtcclxuXHRcdFx0XHRcdG9ialtvcHRpb25dID0gc3R5bGVbX2NhbWVsQ2FzZShvcHRpb24pXTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRyZXR1cm4gb2JqO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGZvciAodmFyIG9wdGlvbiBpbiBvcHRpb25zKSB7XHJcblx0XHRcdFx0XHR2YXIgdmFsID0gb3B0aW9uc1tvcHRpb25dO1xyXG5cdFx0XHRcdFx0aWYgKHZhbCA9PSBwYXJzZUZsb2F0KHZhbCkpIHsgLy8gYXNzdW1lIHBpeGVsIGZvciBzZWVtaW5nbHkgbnVtZXJpY2FsIHZhbHVlc1xyXG5cdFx0XHRcdFx0XHR2YWwgKz0gJ3B4JztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsZW0uc3R5bGVbX2NhbWVsQ2FzZShvcHRpb24pXSA9IHZhbDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0cmV0dXJuIFU7XHJcblx0fSh3aW5kb3cgfHwge30pKTtcclxuXHJcblxyXG5cdFNjcm9sbE1hZ2ljLlNjZW5lLnByb3RvdHlwZS5hZGRJbmRpY2F0b3JzID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0U2Nyb2xsTWFnaWMuX3V0aWwubG9nKDEsICcoU2Nyb2xsTWFnaWMuU2NlbmUpIC0+IEVSUk9SIGNhbGxpbmcgYWRkSW5kaWNhdG9ycygpIGR1ZSB0byBtaXNzaW5nIFBsdWdpbiBcXCdkZWJ1Zy5hZGRJbmRpY2F0b3JzXFwnLiBQbGVhc2UgbWFrZSBzdXJlIHRvIGluY2x1ZGUgcGx1Z2lucy9kZWJ1Zy5hZGRJbmRpY2F0b3JzLmpzJyk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0U2Nyb2xsTWFnaWMuU2NlbmUucHJvdG90eXBlLnJlbW92ZUluZGljYXRvcnMgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRTY3JvbGxNYWdpYy5fdXRpbC5sb2coMSwgJyhTY3JvbGxNYWdpYy5TY2VuZSkgLT4gRVJST1IgY2FsbGluZyByZW1vdmVJbmRpY2F0b3JzKCkgZHVlIHRvIG1pc3NpbmcgUGx1Z2luIFxcJ2RlYnVnLmFkZEluZGljYXRvcnNcXCcuIFBsZWFzZSBtYWtlIHN1cmUgdG8gaW5jbHVkZSBwbHVnaW5zL2RlYnVnLmFkZEluZGljYXRvcnMuanMnKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRTY3JvbGxNYWdpYy5TY2VuZS5wcm90b3R5cGUuc2V0VHdlZW4gPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRTY3JvbGxNYWdpYy5fdXRpbC5sb2coMSwgJyhTY3JvbGxNYWdpYy5TY2VuZSkgLT4gRVJST1IgY2FsbGluZyBzZXRUd2VlbigpIGR1ZSB0byBtaXNzaW5nIFBsdWdpbiBcXCdhbmltYXRpb24uZ3NhcFxcJy4gUGxlYXNlIG1ha2Ugc3VyZSB0byBpbmNsdWRlIHBsdWdpbnMvYW5pbWF0aW9uLmdzYXAuanMnKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRTY3JvbGxNYWdpYy5TY2VuZS5wcm90b3R5cGUucmVtb3ZlVHdlZW4gPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRTY3JvbGxNYWdpYy5fdXRpbC5sb2coMSwgJyhTY3JvbGxNYWdpYy5TY2VuZSkgLT4gRVJST1IgY2FsbGluZyByZW1vdmVUd2VlbigpIGR1ZSB0byBtaXNzaW5nIFBsdWdpbiBcXCdhbmltYXRpb24uZ3NhcFxcJy4gUGxlYXNlIG1ha2Ugc3VyZSB0byBpbmNsdWRlIHBsdWdpbnMvYW5pbWF0aW9uLmdzYXAuanMnKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRTY3JvbGxNYWdpYy5TY2VuZS5wcm90b3R5cGUuc2V0VmVsb2NpdHkgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRTY3JvbGxNYWdpYy5fdXRpbC5sb2coMSwgJyhTY3JvbGxNYWdpYy5TY2VuZSkgLT4gRVJST1IgY2FsbGluZyBzZXRWZWxvY2l0eSgpIGR1ZSB0byBtaXNzaW5nIFBsdWdpbiBcXCdhbmltYXRpb24udmVsb2NpdHlcXCcuIFBsZWFzZSBtYWtlIHN1cmUgdG8gaW5jbHVkZSBwbHVnaW5zL2FuaW1hdGlvbi52ZWxvY2l0eS5qcycpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdFNjcm9sbE1hZ2ljLlNjZW5lLnByb3RvdHlwZS5yZW1vdmVWZWxvY2l0eSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFNjcm9sbE1hZ2ljLl91dGlsLmxvZygxLCAnKFNjcm9sbE1hZ2ljLlNjZW5lKSAtPiBFUlJPUiBjYWxsaW5nIHJlbW92ZVZlbG9jaXR5KCkgZHVlIHRvIG1pc3NpbmcgUGx1Z2luIFxcJ2FuaW1hdGlvbi52ZWxvY2l0eVxcJy4gUGxlYXNlIG1ha2Ugc3VyZSB0byBpbmNsdWRlIHBsdWdpbnMvYW5pbWF0aW9uLnZlbG9jaXR5LmpzJyk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdHJldHVybiBTY3JvbGxNYWdpYztcclxufSkpOyIsIi8qIVxuICAqIEJvb3RzdHJhcCB2NC4zLjEgKGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS8pXG4gICogQ29weXJpZ2h0IDIwMTEtMjAxOSBUaGUgQm9vdHN0cmFwIEF1dGhvcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ncmFwaHMvY29udHJpYnV0b3JzKVxuICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ2pxdWVyeScpLCByZXF1aXJlKCdwb3BwZXIuanMnKSkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJywgJ2pxdWVyeScsICdwb3BwZXIuanMnXSwgZmFjdG9yeSkgOlxuICAoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGZhY3RvcnkoZ2xvYmFsLmJvb3RzdHJhcCA9IHt9LCBnbG9iYWwualF1ZXJ5LCBnbG9iYWwuUG9wcGVyKSk7XG59KHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCAkLCBQb3BwZXIpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICQgPSAkICYmICQuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSA/ICRbJ2RlZmF1bHQnXSA6ICQ7XG4gIFBvcHBlciA9IFBvcHBlciAmJiBQb3BwZXIuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSA/IFBvcHBlclsnZGVmYXVsdCddIDogUG9wcGVyO1xuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgICB9KSk7XG4gICAgICB9XG5cbiAgICAgIG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gICAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gICAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBCb290c3RyYXAgKHY0LjMuMSk6IHV0aWwuanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogUHJpdmF0ZSBUcmFuc2l0aW9uRW5kIEhlbHBlcnNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBUUkFOU0lUSU9OX0VORCA9ICd0cmFuc2l0aW9uZW5kJztcbiAgdmFyIE1BWF9VSUQgPSAxMDAwMDAwO1xuICB2YXIgTUlMTElTRUNPTkRTX01VTFRJUExJRVIgPSAxMDAwOyAvLyBTaG91dG91dCBBbmd1c0Nyb2xsIChodHRwczovL2dvby5nbC9weHdRR3ApXG5cbiAgZnVuY3Rpb24gdG9UeXBlKG9iaikge1xuICAgIHJldHVybiB7fS50b1N0cmluZy5jYWxsKG9iaikubWF0Y2goL1xccyhbYS16XSspL2kpWzFdLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTcGVjaWFsVHJhbnNpdGlvbkVuZEV2ZW50KCkge1xuICAgIHJldHVybiB7XG4gICAgICBiaW5kVHlwZTogVFJBTlNJVElPTl9FTkQsXG4gICAgICBkZWxlZ2F0ZVR5cGU6IFRSQU5TSVRJT05fRU5ELFxuICAgICAgaGFuZGxlOiBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcbiAgICAgICAgaWYgKCQoZXZlbnQudGFyZ2V0KS5pcyh0aGlzKSkge1xuICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZmluZWRcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZEVtdWxhdG9yKGR1cmF0aW9uKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgICAkKHRoaXMpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZChfdGhpcyk7XG4gICAgICB9XG4gICAgfSwgZHVyYXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbkVuZFN1cHBvcnQoKSB7XG4gICAgJC5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZCA9IHRyYW5zaXRpb25FbmRFbXVsYXRvcjtcbiAgICAkLmV2ZW50LnNwZWNpYWxbVXRpbC5UUkFOU0lUSU9OX0VORF0gPSBnZXRTcGVjaWFsVHJhbnNpdGlvbkVuZEV2ZW50KCk7XG4gIH1cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIFB1YmxpYyBVdGlsIEFwaVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gIHZhciBVdGlsID0ge1xuICAgIFRSQU5TSVRJT05fRU5EOiAnYnNUcmFuc2l0aW9uRW5kJyxcbiAgICBnZXRVSUQ6IGZ1bmN0aW9uIGdldFVJRChwcmVmaXgpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgICAgcHJlZml4ICs9IH5+KE1hdGgucmFuZG9tKCkgKiBNQVhfVUlEKTsgLy8gXCJ+flwiIGFjdHMgbGlrZSBhIGZhc3RlciBNYXRoLmZsb29yKCkgaGVyZVxuICAgICAgfSB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSk7XG5cbiAgICAgIHJldHVybiBwcmVmaXg7XG4gICAgfSxcbiAgICBnZXRTZWxlY3RvckZyb21FbGVtZW50OiBmdW5jdGlvbiBnZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRhcmdldCcpO1xuXG4gICAgICBpZiAoIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSAnIycpIHtcbiAgICAgICAgdmFyIGhyZWZBdHRyID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgICAgc2VsZWN0b3IgPSBocmVmQXR0ciAmJiBocmVmQXR0ciAhPT0gJyMnID8gaHJlZkF0dHIudHJpbSgpIDogJyc7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA/IHNlbGVjdG9yIDogbnVsbDtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50OiBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9IC8vIEdldCB0cmFuc2l0aW9uLWR1cmF0aW9uIG9mIHRoZSBlbGVtZW50XG5cblxuICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9ICQoZWxlbWVudCkuY3NzKCd0cmFuc2l0aW9uLWR1cmF0aW9uJyk7XG4gICAgICB2YXIgdHJhbnNpdGlvbkRlbGF5ID0gJChlbGVtZW50KS5jc3MoJ3RyYW5zaXRpb24tZGVsYXknKTtcbiAgICAgIHZhciBmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiA9IHBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIHZhciBmbG9hdFRyYW5zaXRpb25EZWxheSA9IHBhcnNlRmxvYXQodHJhbnNpdGlvbkRlbGF5KTsgLy8gUmV0dXJuIDAgaWYgZWxlbWVudCBvciB0cmFuc2l0aW9uIGR1cmF0aW9uIGlzIG5vdCBmb3VuZFxuXG4gICAgICBpZiAoIWZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uICYmICFmbG9hdFRyYW5zaXRpb25EZWxheSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0gLy8gSWYgbXVsdGlwbGUgZHVyYXRpb25zIGFyZSBkZWZpbmVkLCB0YWtlIHRoZSBmaXJzdFxuXG5cbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbi5zcGxpdCgnLCcpWzBdO1xuICAgICAgdHJhbnNpdGlvbkRlbGF5ID0gdHJhbnNpdGlvbkRlbGF5LnNwbGl0KCcsJylbMF07XG4gICAgICByZXR1cm4gKHBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKSArIHBhcnNlRmxvYXQodHJhbnNpdGlvbkRlbGF5KSkgKiBNSUxMSVNFQ09ORFNfTVVMVElQTElFUjtcbiAgICB9LFxuICAgIHJlZmxvdzogZnVuY3Rpb24gcmVmbG93KGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICB9LFxuICAgIHRyaWdnZXJUcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiB0cmlnZ2VyVHJhbnNpdGlvbkVuZChlbGVtZW50KSB7XG4gICAgICAkKGVsZW1lbnQpLnRyaWdnZXIoVFJBTlNJVElPTl9FTkQpO1xuICAgIH0sXG4gICAgLy8gVE9ETzogUmVtb3ZlIGluIHY1XG4gICAgc3VwcG9ydHNUcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiBzdXBwb3J0c1RyYW5zaXRpb25FbmQoKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbihUUkFOU0lUSU9OX0VORCk7XG4gICAgfSxcbiAgICBpc0VsZW1lbnQ6IGZ1bmN0aW9uIGlzRWxlbWVudChvYmopIHtcbiAgICAgIHJldHVybiAob2JqWzBdIHx8IG9iaikubm9kZVR5cGU7XG4gICAgfSxcbiAgICB0eXBlQ2hlY2tDb25maWc6IGZ1bmN0aW9uIHR5cGVDaGVja0NvbmZpZyhjb21wb25lbnROYW1lLCBjb25maWcsIGNvbmZpZ1R5cGVzKSB7XG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBjb25maWdUeXBlcykge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZ1R5cGVzLCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICB2YXIgZXhwZWN0ZWRUeXBlcyA9IGNvbmZpZ1R5cGVzW3Byb3BlcnR5XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBjb25maWdbcHJvcGVydHldO1xuICAgICAgICAgIHZhciB2YWx1ZVR5cGUgPSB2YWx1ZSAmJiBVdGlsLmlzRWxlbWVudCh2YWx1ZSkgPyAnZWxlbWVudCcgOiB0b1R5cGUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKCFuZXcgUmVnRXhwKGV4cGVjdGVkVHlwZXMpLnRlc3QodmFsdWVUeXBlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGNvbXBvbmVudE5hbWUudG9VcHBlckNhc2UoKSArIFwiOiBcIiArIChcIk9wdGlvbiBcXFwiXCIgKyBwcm9wZXJ0eSArIFwiXFxcIiBwcm92aWRlZCB0eXBlIFxcXCJcIiArIHZhbHVlVHlwZSArIFwiXFxcIiBcIikgKyAoXCJidXQgZXhwZWN0ZWQgdHlwZSBcXFwiXCIgKyBleHBlY3RlZFR5cGVzICsgXCJcXFwiLlwiKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBmaW5kU2hhZG93Um9vdDogZnVuY3Rpb24gZmluZFNoYWRvd1Jvb3QoZWxlbWVudCkge1xuICAgICAgaWYgKCFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXR0YWNoU2hhZG93KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSAvLyBDYW4gZmluZCB0aGUgc2hhZG93IHJvb3Qgb3RoZXJ3aXNlIGl0J2xsIHJldHVybiB0aGUgZG9jdW1lbnRcblxuXG4gICAgICBpZiAodHlwZW9mIGVsZW1lbnQuZ2V0Um9vdE5vZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIHJvb3QgPSBlbGVtZW50LmdldFJvb3ROb2RlKCk7XG4gICAgICAgIHJldHVybiByb290IGluc3RhbmNlb2YgU2hhZG93Um9vdCA/IHJvb3QgOiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICB9IC8vIHdoZW4gd2UgZG9uJ3QgZmluZCBhIHNoYWRvdyByb290XG5cblxuICAgICAgaWYgKCFlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBVdGlsLmZpbmRTaGFkb3dSb290KGVsZW1lbnQucGFyZW50Tm9kZSk7XG4gICAgfVxuICB9O1xuICBzZXRUcmFuc2l0aW9uRW5kU3VwcG9ydCgpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSA9ICdhbGVydCc7XG4gIHZhciBWRVJTSU9OID0gJzQuMy4xJztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmFsZXJ0JztcbiAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBESVNNSVNTOiAnW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJ1xuICB9O1xuICB2YXIgRXZlbnQgPSB7XG4gICAgQ0xPU0U6IFwiY2xvc2VcIiArIEVWRU5UX0tFWSxcbiAgICBDTE9TRUQ6IFwiY2xvc2VkXCIgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICB9O1xuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIEFMRVJUOiAnYWxlcnQnLFxuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcblxuICB2YXIgQWxlcnQgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBbGVydChlbGVtZW50KSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IEFsZXJ0LnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by5jbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKGVsZW1lbnQpIHtcbiAgICAgIHZhciByb290RWxlbWVudCA9IHRoaXMuX2VsZW1lbnQ7XG5cbiAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIHJvb3RFbGVtZW50ID0gdGhpcy5fZ2V0Um9vdEVsZW1lbnQoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjdXN0b21FdmVudCA9IHRoaXMuX3RyaWdnZXJDbG9zZUV2ZW50KHJvb3RFbGVtZW50KTtcblxuICAgICAgaWYgKGN1c3RvbUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVtb3ZlRWxlbWVudChyb290RWxlbWVudCk7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICB9IC8vIFByaXZhdGVcbiAgICA7XG5cbiAgICBfcHJvdG8uX2dldFJvb3RFbGVtZW50ID0gZnVuY3Rpb24gX2dldFJvb3RFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcbiAgICAgIHZhciBwYXJlbnQgPSBmYWxzZTtcblxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXBhcmVudCkge1xuICAgICAgICBwYXJlbnQgPSAkKGVsZW1lbnQpLmNsb3Nlc3QoXCIuXCIgKyBDbGFzc05hbWUuQUxFUlQpWzBdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3RyaWdnZXJDbG9zZUV2ZW50ID0gZnVuY3Rpb24gX3RyaWdnZXJDbG9zZUV2ZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBjbG9zZUV2ZW50ID0gJC5FdmVudChFdmVudC5DTE9TRSk7XG4gICAgICAkKGVsZW1lbnQpLnRyaWdnZXIoY2xvc2VFdmVudCk7XG4gICAgICByZXR1cm4gY2xvc2VFdmVudDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9yZW1vdmVFbGVtZW50ID0gZnVuY3Rpb24gX3JlbW92ZUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgJChlbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgIGlmICghJChlbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveUVsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChlbGVtZW50KTtcbiAgICAgICQoZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuX2Rlc3Ryb3lFbGVtZW50KGVsZW1lbnQsIGV2ZW50KTtcbiAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgfTtcblxuICAgIF9wcm90by5fZGVzdHJveUVsZW1lbnQgPSBmdW5jdGlvbiBfZGVzdHJveUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgJChlbGVtZW50KS5kZXRhY2goKS50cmlnZ2VyKEV2ZW50LkNMT1NFRCkucmVtb3ZlKCk7XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBBbGVydC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpO1xuICAgICAgICB2YXIgZGF0YSA9ICRlbGVtZW50LmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgQWxlcnQodGhpcyk7XG4gICAgICAgICAgJGVsZW1lbnQuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnID09PSAnY2xvc2UnKSB7XG4gICAgICAgICAgZGF0YVtjb25maWddKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgQWxlcnQuX2hhbmRsZURpc21pc3MgPSBmdW5jdGlvbiBfaGFuZGxlRGlzbWlzcyhhbGVydEluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBhbGVydEluc3RhbmNlLmNsb3NlKHRoaXMpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKEFsZXJ0LCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQWxlcnQ7XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuRElTTUlTUywgQWxlcnQuX2hhbmRsZURpc21pc3MobmV3IEFsZXJ0KCkpKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBBbGVydC5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQWxlcnQ7XG5cbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIEFsZXJ0Ll9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJDEgPSAnYnV0dG9uJztcbiAgdmFyIFZFUlNJT04kMSA9ICc0LjMuMSc7XG4gIHZhciBEQVRBX0tFWSQxID0gJ2JzLmJ1dHRvbic7XG4gIHZhciBFVkVOVF9LRVkkMSA9IFwiLlwiICsgREFUQV9LRVkkMTtcbiAgdmFyIERBVEFfQVBJX0tFWSQxID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkMSA9ICQuZm5bTkFNRSQxXTtcbiAgdmFyIENsYXNzTmFtZSQxID0ge1xuICAgIEFDVElWRTogJ2FjdGl2ZScsXG4gICAgQlVUVE9OOiAnYnRuJyxcbiAgICBGT0NVUzogJ2ZvY3VzJ1xuICB9O1xuICB2YXIgU2VsZWN0b3IkMSA9IHtcbiAgICBEQVRBX1RPR0dMRV9DQVJST1Q6ICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJyxcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0nLFxuICAgIElOUFVUOiAnaW5wdXQ6bm90KFt0eXBlPVwiaGlkZGVuXCJdKScsXG4gICAgQUNUSVZFOiAnLmFjdGl2ZScsXG4gICAgQlVUVE9OOiAnLmJ0bidcbiAgfTtcbiAgdmFyIEV2ZW50JDEgPSB7XG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSQxICsgREFUQV9BUElfS0VZJDEsXG4gICAgRk9DVVNfQkxVUl9EQVRBX0FQSTogXCJmb2N1c1wiICsgRVZFTlRfS0VZJDEgKyBEQVRBX0FQSV9LRVkkMSArIFwiIFwiICsgKFwiYmx1clwiICsgRVZFTlRfS0VZJDEgKyBEQVRBX0FQSV9LRVkkMSlcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcblxuICB2YXIgQnV0dG9uID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnV0dG9uKGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gQnV0dG9uLnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICB2YXIgdHJpZ2dlckNoYW5nZUV2ZW50ID0gdHJ1ZTtcbiAgICAgIHZhciBhZGRBcmlhUHJlc3NlZCA9IHRydWU7XG4gICAgICB2YXIgcm9vdEVsZW1lbnQgPSAkKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoU2VsZWN0b3IkMS5EQVRBX1RPR0dMRSlbMF07XG5cbiAgICAgIGlmIChyb290RWxlbWVudCkge1xuICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IkMS5JTlBVVCk7XG5cbiAgICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgICAgaWYgKGlucHV0LnR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGVja2VkICYmIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZSQxLkFDVElWRSkpIHtcbiAgICAgICAgICAgICAgdHJpZ2dlckNoYW5nZUV2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgYWN0aXZlRWxlbWVudCA9IHJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IkMS5BQ1RJVkUpO1xuXG4gICAgICAgICAgICAgIGlmIChhY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgJChhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkMS5BQ1RJVkUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkge1xuICAgICAgICAgICAgaWYgKGlucHV0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSB8fCByb290RWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgfHwgaW5wdXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpIHx8IHJvb3RFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSAhdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lJDEuQUNUSVZFKTtcbiAgICAgICAgICAgICQoaW5wdXQpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgYWRkQXJpYVByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWRkQXJpYVByZXNzZWQpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcsICF0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUkMS5BQ1RJVkUpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZSQxLkFDVElWRSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSQxKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZJDEpO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgQnV0dG9uKHRoaXMpO1xuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSQxLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcgPT09ICd0b2dnbGUnKSB7XG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQnV0dG9uLCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTiQxO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCdXR0b247XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkKGRvY3VtZW50KS5vbihFdmVudCQxLkNMSUNLX0RBVEFfQVBJLCBTZWxlY3RvciQxLkRBVEFfVE9HR0xFX0NBUlJPVCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB2YXIgYnV0dG9uID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgaWYgKCEkKGJ1dHRvbikuaGFzQ2xhc3MoQ2xhc3NOYW1lJDEuQlVUVE9OKSkge1xuICAgICAgYnV0dG9uID0gJChidXR0b24pLmNsb3Nlc3QoU2VsZWN0b3IkMS5CVVRUT04pO1xuICAgIH1cblxuICAgIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJChidXR0b24pLCAndG9nZ2xlJyk7XG4gIH0pLm9uKEV2ZW50JDEuRk9DVVNfQkxVUl9EQVRBX0FQSSwgU2VsZWN0b3IkMS5EQVRBX1RPR0dMRV9DQVJST1QsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBidXR0b24gPSAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdChTZWxlY3RvciQxLkJVVFRPTilbMF07XG4gICAgJChidXR0b24pLnRvZ2dsZUNsYXNzKENsYXNzTmFtZSQxLkZPQ1VTLCAvXmZvY3VzKGluKT8kLy50ZXN0KGV2ZW50LnR5cGUpKTtcbiAgfSk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUUkMV0gPSBCdXR0b24uX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FJDFdLkNvbnN0cnVjdG9yID0gQnV0dG9uO1xuXG4gICQuZm5bTkFNRSQxXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRSQxXSA9IEpRVUVSWV9OT19DT05GTElDVCQxO1xuICAgIHJldHVybiBCdXR0b24uX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUkMiA9ICdjYXJvdXNlbCc7XG4gIHZhciBWRVJTSU9OJDIgPSAnNC4zLjEnO1xuICB2YXIgREFUQV9LRVkkMiA9ICdicy5jYXJvdXNlbCc7XG4gIHZhciBFVkVOVF9LRVkkMiA9IFwiLlwiICsgREFUQV9LRVkkMjtcbiAgdmFyIERBVEFfQVBJX0tFWSQyID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkMiA9ICQuZm5bTkFNRSQyXTtcbiAgdmFyIEFSUk9XX0xFRlRfS0VZQ09ERSA9IDM3OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBsZWZ0IGFycm93IGtleVxuXG4gIHZhciBBUlJPV19SSUdIVF9LRVlDT0RFID0gMzk7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHJpZ2h0IGFycm93IGtleVxuXG4gIHZhciBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUID0gNTAwOyAvLyBUaW1lIGZvciBtb3VzZSBjb21wYXQgZXZlbnRzIHRvIGZpcmUgYWZ0ZXIgdG91Y2hcblxuICB2YXIgU1dJUEVfVEhSRVNIT0xEID0gNDA7XG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIGludGVydmFsOiA1MDAwLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIHNsaWRlOiBmYWxzZSxcbiAgICBwYXVzZTogJ2hvdmVyJyxcbiAgICB3cmFwOiB0cnVlLFxuICAgIHRvdWNoOiB0cnVlXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICBpbnRlcnZhbDogJyhudW1iZXJ8Ym9vbGVhbiknLFxuICAgIGtleWJvYXJkOiAnYm9vbGVhbicsXG4gICAgc2xpZGU6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgICBwYXVzZTogJyhzdHJpbmd8Ym9vbGVhbiknLFxuICAgIHdyYXA6ICdib29sZWFuJyxcbiAgICB0b3VjaDogJ2Jvb2xlYW4nXG4gIH07XG4gIHZhciBEaXJlY3Rpb24gPSB7XG4gICAgTkVYVDogJ25leHQnLFxuICAgIFBSRVY6ICdwcmV2JyxcbiAgICBMRUZUOiAnbGVmdCcsXG4gICAgUklHSFQ6ICdyaWdodCdcbiAgfTtcbiAgdmFyIEV2ZW50JDIgPSB7XG4gICAgU0xJREU6IFwic2xpZGVcIiArIEVWRU5UX0tFWSQyLFxuICAgIFNMSUQ6IFwic2xpZFwiICsgRVZFTlRfS0VZJDIsXG4gICAgS0VZRE9XTjogXCJrZXlkb3duXCIgKyBFVkVOVF9LRVkkMixcbiAgICBNT1VTRUVOVEVSOiBcIm1vdXNlZW50ZXJcIiArIEVWRU5UX0tFWSQyLFxuICAgIE1PVVNFTEVBVkU6IFwibW91c2VsZWF2ZVwiICsgRVZFTlRfS0VZJDIsXG4gICAgVE9VQ0hTVEFSVDogXCJ0b3VjaHN0YXJ0XCIgKyBFVkVOVF9LRVkkMixcbiAgICBUT1VDSE1PVkU6IFwidG91Y2htb3ZlXCIgKyBFVkVOVF9LRVkkMixcbiAgICBUT1VDSEVORDogXCJ0b3VjaGVuZFwiICsgRVZFTlRfS0VZJDIsXG4gICAgUE9JTlRFUkRPV046IFwicG9pbnRlcmRvd25cIiArIEVWRU5UX0tFWSQyLFxuICAgIFBPSU5URVJVUDogXCJwb2ludGVydXBcIiArIEVWRU5UX0tFWSQyLFxuICAgIERSQUdfU1RBUlQ6IFwiZHJhZ3N0YXJ0XCIgKyBFVkVOVF9LRVkkMixcbiAgICBMT0FEX0RBVEFfQVBJOiBcImxvYWRcIiArIEVWRU5UX0tFWSQyICsgREFUQV9BUElfS0VZJDIsXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSQyICsgREFUQV9BUElfS0VZJDJcbiAgfTtcbiAgdmFyIENsYXNzTmFtZSQyID0ge1xuICAgIENBUk9VU0VMOiAnY2Fyb3VzZWwnLFxuICAgIEFDVElWRTogJ2FjdGl2ZScsXG4gICAgU0xJREU6ICdzbGlkZScsXG4gICAgUklHSFQ6ICdjYXJvdXNlbC1pdGVtLXJpZ2h0JyxcbiAgICBMRUZUOiAnY2Fyb3VzZWwtaXRlbS1sZWZ0JyxcbiAgICBORVhUOiAnY2Fyb3VzZWwtaXRlbS1uZXh0JyxcbiAgICBQUkVWOiAnY2Fyb3VzZWwtaXRlbS1wcmV2JyxcbiAgICBJVEVNOiAnY2Fyb3VzZWwtaXRlbScsXG4gICAgUE9JTlRFUl9FVkVOVDogJ3BvaW50ZXItZXZlbnQnXG4gIH07XG4gIHZhciBTZWxlY3RvciQyID0ge1xuICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgIEFDVElWRV9JVEVNOiAnLmFjdGl2ZS5jYXJvdXNlbC1pdGVtJyxcbiAgICBJVEVNOiAnLmNhcm91c2VsLWl0ZW0nLFxuICAgIElURU1fSU1HOiAnLmNhcm91c2VsLWl0ZW0gaW1nJyxcbiAgICBORVhUX1BSRVY6ICcuY2Fyb3VzZWwtaXRlbS1uZXh0LCAuY2Fyb3VzZWwtaXRlbS1wcmV2JyxcbiAgICBJTkRJQ0FUT1JTOiAnLmNhcm91c2VsLWluZGljYXRvcnMnLFxuICAgIERBVEFfU0xJREU6ICdbZGF0YS1zbGlkZV0sIFtkYXRhLXNsaWRlLXRvXScsXG4gICAgREFUQV9SSURFOiAnW2RhdGEtcmlkZT1cImNhcm91c2VsXCJdJ1xuICB9O1xuICB2YXIgUG9pbnRlclR5cGUgPSB7XG4gICAgVE9VQ0g6ICd0b3VjaCcsXG4gICAgUEVOOiAncGVuJ1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBDYXJvdXNlbCA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhcm91c2VsKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdGhpcy5faXRlbXMgPSBudWxsO1xuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLnRvdWNoVGltZW91dCA9IG51bGw7XG4gICAgICB0aGlzLnRvdWNoU3RhcnRYID0gMDtcbiAgICAgIHRoaXMudG91Y2hEZWx0YVggPSAwO1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yJDIuSU5ESUNBVE9SUyk7XG4gICAgICB0aGlzLl90b3VjaFN1cHBvcnRlZCA9ICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwO1xuICAgICAgdGhpcy5fcG9pbnRlckV2ZW50ID0gQm9vbGVhbih3aW5kb3cuUG9pbnRlckV2ZW50IHx8IHdpbmRvdy5NU1BvaW50ZXJFdmVudCk7XG5cbiAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBDYXJvdXNlbC5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8ubmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICBpZiAoIXRoaXMuX2lzU2xpZGluZykge1xuICAgICAgICB0aGlzLl9zbGlkZShEaXJlY3Rpb24uTkVYVCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5uZXh0V2hlblZpc2libGUgPSBmdW5jdGlvbiBuZXh0V2hlblZpc2libGUoKSB7XG4gICAgICAvLyBEb24ndCBjYWxsIG5leHQgd2hlbiB0aGUgcGFnZSBpc24ndCB2aXNpYmxlXG4gICAgICAvLyBvciB0aGUgY2Fyb3VzZWwgb3IgaXRzIHBhcmVudCBpc24ndCB2aXNpYmxlXG4gICAgICBpZiAoIWRvY3VtZW50LmhpZGRlbiAmJiAkKHRoaXMuX2VsZW1lbnQpLmlzKCc6dmlzaWJsZScpICYmICQodGhpcy5fZWxlbWVudCkuY3NzKCd2aXNpYmlsaXR5JykgIT09ICdoaWRkZW4nKSB7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucHJldiA9IGZ1bmN0aW9uIHByZXYoKSB7XG4gICAgICBpZiAoIXRoaXMuX2lzU2xpZGluZykge1xuICAgICAgICB0aGlzLl9zbGlkZShEaXJlY3Rpb24uUFJFVik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5wYXVzZSA9IGZ1bmN0aW9uIHBhdXNlKGV2ZW50KSB7XG4gICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3RvciQyLk5FWFRfUFJFVikpIHtcbiAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgdGhpcy5jeWNsZSh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgfTtcblxuICAgIF9wcm90by5jeWNsZSA9IGZ1bmN0aW9uIGN5Y2xlKGV2ZW50KSB7XG4gICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pbnRlcnZhbCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKTtcbiAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmludGVydmFsICYmICF0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IHNldEludGVydmFsKChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPyB0aGlzLm5leHRXaGVuVmlzaWJsZSA6IHRoaXMubmV4dCkuYmluZCh0aGlzKSwgdGhpcy5fY29uZmlnLmludGVydmFsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnRvID0gZnVuY3Rpb24gdG8oaW5kZXgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IkMi5BQ1RJVkVfSVRFTSk7XG5cbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9hY3RpdmVFbGVtZW50KTtcblxuICAgICAgaWYgKGluZGV4ID4gdGhpcy5faXRlbXMubGVuZ3RoIC0gMSB8fCBpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub25lKEV2ZW50JDIuU0xJRCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy50byhpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChhY3RpdmVJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICB0aGlzLmN5Y2xlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpcmVjdGlvbiA9IGluZGV4ID4gYWN0aXZlSW5kZXggPyBEaXJlY3Rpb24uTkVYVCA6IERpcmVjdGlvbi5QUkVWO1xuXG4gICAgICB0aGlzLl9zbGlkZShkaXJlY3Rpb24sIHRoaXMuX2l0ZW1zW2luZGV4XSk7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEVWRU5UX0tFWSQyKTtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSQyKTtcbiAgICAgIHRoaXMuX2l0ZW1zID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzUGF1c2VkID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzU2xpZGluZyA9IG51bGw7XG4gICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50ID0gbnVsbDtcbiAgICB9IC8vIFByaXZhdGVcbiAgICA7XG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBEZWZhdWx0LCBjb25maWcpO1xuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSQyLCBjb25maWcsIERlZmF1bHRUeXBlKTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5faGFuZGxlU3dpcGUgPSBmdW5jdGlvbiBfaGFuZGxlU3dpcGUoKSB7XG4gICAgICB2YXIgYWJzRGVsdGF4ID0gTWF0aC5hYnModGhpcy50b3VjaERlbHRhWCk7XG5cbiAgICAgIGlmIChhYnNEZWx0YXggPD0gU1dJUEVfVEhSRVNIT0xEKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpcmVjdGlvbiA9IGFic0RlbHRheCAvIHRoaXMudG91Y2hEZWx0YVg7IC8vIHN3aXBlIGxlZnRcblxuICAgICAgaWYgKGRpcmVjdGlvbiA+IDApIHtcbiAgICAgICAgdGhpcy5wcmV2KCk7XG4gICAgICB9IC8vIHN3aXBlIHJpZ2h0XG5cblxuICAgICAgaWYgKGRpcmVjdGlvbiA8IDApIHtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5rZXlib2FyZCkge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50JDIuS0VZRE9XTiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5fa2V5ZG93bihldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnBhdXNlID09PSAnaG92ZXInKSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQkMi5NT1VTRUVOVEVSLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLnBhdXNlKGV2ZW50KTtcbiAgICAgICAgfSkub24oRXZlbnQkMi5NT1VTRUxFQVZFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmN5Y2xlKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcudG91Y2gpIHtcbiAgICAgICAgdGhpcy5fYWRkVG91Y2hFdmVudExpc3RlbmVycygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfYWRkVG91Y2hFdmVudExpc3RlbmVycygpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMuX3RvdWNoU3VwcG9ydGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0ID0gZnVuY3Rpb24gc3RhcnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKF90aGlzMy5fcG9pbnRlckV2ZW50ICYmIFBvaW50ZXJUeXBlW2V2ZW50Lm9yaWdpbmFsRXZlbnQucG9pbnRlclR5cGUudG9VcHBlckNhc2UoKV0pIHtcbiAgICAgICAgICBfdGhpczMudG91Y2hTdGFydFggPSBldmVudC5vcmlnaW5hbEV2ZW50LmNsaWVudFg7XG4gICAgICAgIH0gZWxzZSBpZiAoIV90aGlzMy5fcG9pbnRlckV2ZW50KSB7XG4gICAgICAgICAgX3RoaXMzLnRvdWNoU3RhcnRYID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdLmNsaWVudFg7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBtb3ZlID0gZnVuY3Rpb24gbW92ZShldmVudCkge1xuICAgICAgICAvLyBlbnN1cmUgc3dpcGluZyB3aXRoIG9uZSB0b3VjaCBhbmQgbm90IHBpbmNoaW5nXG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBfdGhpczMudG91Y2hEZWx0YVggPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzMy50b3VjaERlbHRhWCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5jbGllbnRYIC0gX3RoaXMzLnRvdWNoU3RhcnRYO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgZW5kID0gZnVuY3Rpb24gZW5kKGV2ZW50KSB7XG4gICAgICAgIGlmIChfdGhpczMuX3BvaW50ZXJFdmVudCAmJiBQb2ludGVyVHlwZVtldmVudC5vcmlnaW5hbEV2ZW50LnBvaW50ZXJUeXBlLnRvVXBwZXJDYXNlKCldKSB7XG4gICAgICAgICAgX3RoaXMzLnRvdWNoRGVsdGFYID0gZXZlbnQub3JpZ2luYWxFdmVudC5jbGllbnRYIC0gX3RoaXMzLnRvdWNoU3RhcnRYO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMzLl9oYW5kbGVTd2lwZSgpO1xuXG4gICAgICAgIGlmIChfdGhpczMuX2NvbmZpZy5wYXVzZSA9PT0gJ2hvdmVyJykge1xuICAgICAgICAgIC8vIElmIGl0J3MgYSB0b3VjaC1lbmFibGVkIGRldmljZSwgbW91c2VlbnRlci9sZWF2ZSBhcmUgZmlyZWQgYXNcbiAgICAgICAgICAvLyBwYXJ0IG9mIHRoZSBtb3VzZSBjb21wYXRpYmlsaXR5IGV2ZW50cyBvbiBmaXJzdCB0YXAgLSB0aGUgY2Fyb3VzZWxcbiAgICAgICAgICAvLyB3b3VsZCBzdG9wIGN5Y2xpbmcgdW50aWwgdXNlciB0YXBwZWQgb3V0IG9mIGl0O1xuICAgICAgICAgIC8vIGhlcmUsIHdlIGxpc3RlbiBmb3IgdG91Y2hlbmQsIGV4cGxpY2l0bHkgcGF1c2UgdGhlIGNhcm91c2VsXG4gICAgICAgICAgLy8gKGFzIGlmIGl0J3MgdGhlIHNlY29uZCB0aW1lIHdlIHRhcCBvbiBpdCwgbW91c2VlbnRlciBjb21wYXQgZXZlbnRcbiAgICAgICAgICAvLyBpcyBOT1QgZmlyZWQpIGFuZCBhZnRlciBhIHRpbWVvdXQgKHRvIGFsbG93IGZvciBtb3VzZSBjb21wYXRpYmlsaXR5XG4gICAgICAgICAgLy8gZXZlbnRzIHRvIGZpcmUpIHdlIGV4cGxpY2l0bHkgcmVzdGFydCBjeWNsaW5nXG4gICAgICAgICAgX3RoaXMzLnBhdXNlKCk7XG5cbiAgICAgICAgICBpZiAoX3RoaXMzLnRvdWNoVGltZW91dCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzMy50b3VjaFRpbWVvdXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzMy50b3VjaFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5jeWNsZShldmVudCk7XG4gICAgICAgICAgfSwgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCArIF90aGlzMy5fY29uZmlnLmludGVydmFsKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgJCh0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IkMi5JVEVNX0lNRykpLm9uKEV2ZW50JDIuRFJBR19TVEFSVCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5fcG9pbnRlckV2ZW50KSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQkMi5QT0lOVEVSRE9XTiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXJ0KGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQkMi5QT0lOVEVSVVAsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBlbmQoZXZlbnQpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ2xhc3NOYW1lJDIuUE9JTlRFUl9FVkVOVCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50JDIuVE9VQ0hTVEFSVCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXJ0KGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQkMi5UT1VDSE1PVkUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBtb3ZlKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQkMi5UT1VDSEVORCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGVuZChldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2tleWRvd24gPSBmdW5jdGlvbiBfa2V5ZG93bihldmVudCkge1xuICAgICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChldmVudC53aGljaCkge1xuICAgICAgICBjYXNlIEFSUk9XX0xFRlRfS0VZQ09ERTpcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMucHJldigpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQVJST1dfUklHSFRfS0VZQ09ERTpcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0SXRlbUluZGV4ID0gZnVuY3Rpb24gX2dldEl0ZW1JbmRleChlbGVtZW50KSB7XG4gICAgICB0aGlzLl9pdGVtcyA9IGVsZW1lbnQgJiYgZWxlbWVudC5wYXJlbnROb2RlID8gW10uc2xpY2UuY2FsbChlbGVtZW50LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChTZWxlY3RvciQyLklURU0pKSA6IFtdO1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zLmluZGV4T2YoZWxlbWVudCk7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0SXRlbUJ5RGlyZWN0aW9uID0gZnVuY3Rpb24gX2dldEl0ZW1CeURpcmVjdGlvbihkaXJlY3Rpb24sIGFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgIHZhciBpc05leHREaXJlY3Rpb24gPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5ORVhUO1xuICAgICAgdmFyIGlzUHJldkRpcmVjdGlvbiA9IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlBSRVY7XG5cbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KTtcblxuICAgICAgdmFyIGxhc3RJdGVtSW5kZXggPSB0aGlzLl9pdGVtcy5sZW5ndGggLSAxO1xuICAgICAgdmFyIGlzR29pbmdUb1dyYXAgPSBpc1ByZXZEaXJlY3Rpb24gJiYgYWN0aXZlSW5kZXggPT09IDAgfHwgaXNOZXh0RGlyZWN0aW9uICYmIGFjdGl2ZUluZGV4ID09PSBsYXN0SXRlbUluZGV4O1xuXG4gICAgICBpZiAoaXNHb2luZ1RvV3JhcCAmJiAhdGhpcy5fY29uZmlnLndyYXApIHtcbiAgICAgICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBkZWx0YSA9IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlBSRVYgPyAtMSA6IDE7XG4gICAgICB2YXIgaXRlbUluZGV4ID0gKGFjdGl2ZUluZGV4ICsgZGVsdGEpICUgdGhpcy5faXRlbXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGl0ZW1JbmRleCA9PT0gLTEgPyB0aGlzLl9pdGVtc1t0aGlzLl9pdGVtcy5sZW5ndGggLSAxXSA6IHRoaXMuX2l0ZW1zW2l0ZW1JbmRleF07XG4gICAgfTtcblxuICAgIF9wcm90by5fdHJpZ2dlclNsaWRlRXZlbnQgPSBmdW5jdGlvbiBfdHJpZ2dlclNsaWRlRXZlbnQocmVsYXRlZFRhcmdldCwgZXZlbnREaXJlY3Rpb25OYW1lKSB7XG4gICAgICB2YXIgdGFyZ2V0SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgocmVsYXRlZFRhcmdldCk7XG5cbiAgICAgIHZhciBmcm9tSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yJDIuQUNUSVZFX0lURU0pKTtcblxuICAgICAgdmFyIHNsaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50JDIuU0xJREUsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldCxcbiAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICAgIGZyb206IGZyb21JbmRleCxcbiAgICAgICAgdG86IHRhcmdldEluZGV4XG4gICAgICB9KTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzbGlkZUV2ZW50KTtcbiAgICAgIHJldHVybiBzbGlkZUV2ZW50O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQgPSBmdW5jdGlvbiBfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgICBpZiAodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpIHtcbiAgICAgICAgdmFyIGluZGljYXRvcnMgPSBbXS5zbGljZS5jYWxsKHRoaXMuX2luZGljYXRvcnNFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IkMi5BQ1RJVkUpKTtcbiAgICAgICAgJChpbmRpY2F0b3JzKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkMi5BQ1RJVkUpO1xuXG4gICAgICAgIHZhciBuZXh0SW5kaWNhdG9yID0gdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQuY2hpbGRyZW5bdGhpcy5fZ2V0SXRlbUluZGV4KGVsZW1lbnQpXTtcblxuICAgICAgICBpZiAobmV4dEluZGljYXRvcikge1xuICAgICAgICAgICQobmV4dEluZGljYXRvcikuYWRkQ2xhc3MoQ2xhc3NOYW1lJDIuQUNUSVZFKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX3NsaWRlID0gZnVuY3Rpb24gX3NsaWRlKGRpcmVjdGlvbiwgZWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yJDIuQUNUSVZFX0lURU0pO1xuXG4gICAgICB2YXIgYWN0aXZlRWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KGFjdGl2ZUVsZW1lbnQpO1xuXG4gICAgICB2YXIgbmV4dEVsZW1lbnQgPSBlbGVtZW50IHx8IGFjdGl2ZUVsZW1lbnQgJiYgdGhpcy5fZ2V0SXRlbUJ5RGlyZWN0aW9uKGRpcmVjdGlvbiwgYWN0aXZlRWxlbWVudCk7XG5cbiAgICAgIHZhciBuZXh0RWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KG5leHRFbGVtZW50KTtcblxuICAgICAgdmFyIGlzQ3ljbGluZyA9IEJvb2xlYW4odGhpcy5faW50ZXJ2YWwpO1xuICAgICAgdmFyIGRpcmVjdGlvbmFsQ2xhc3NOYW1lO1xuICAgICAgdmFyIG9yZGVyQ2xhc3NOYW1lO1xuICAgICAgdmFyIGV2ZW50RGlyZWN0aW9uTmFtZTtcblxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLk5FWFQpIHtcbiAgICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDbGFzc05hbWUkMi5MRUZUO1xuICAgICAgICBvcmRlckNsYXNzTmFtZSA9IENsYXNzTmFtZSQyLk5FWFQ7XG4gICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5MRUZUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDbGFzc05hbWUkMi5SSUdIVDtcbiAgICAgICAgb3JkZXJDbGFzc05hbWUgPSBDbGFzc05hbWUkMi5QUkVWO1xuICAgICAgICBldmVudERpcmVjdGlvbk5hbWUgPSBEaXJlY3Rpb24uUklHSFQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0RWxlbWVudCAmJiAkKG5leHRFbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUkMi5BQ1RJVkUpKSB7XG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzbGlkZUV2ZW50ID0gdGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQobmV4dEVsZW1lbnQsIGV2ZW50RGlyZWN0aW9uTmFtZSk7XG5cbiAgICAgIGlmIChzbGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhY3RpdmVFbGVtZW50IHx8ICFuZXh0RWxlbWVudCkge1xuICAgICAgICAvLyBTb21lIHdlaXJkbmVzcyBpcyBoYXBwZW5pbmcsIHNvIHdlIGJhaWxcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAoaXNDeWNsaW5nKSB7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChuZXh0RWxlbWVudCk7XG5cbiAgICAgIHZhciBzbGlkRXZlbnQgPSAkLkV2ZW50KEV2ZW50JDIuU0xJRCwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBuZXh0RWxlbWVudCxcbiAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICAgIGZyb206IGFjdGl2ZUVsZW1lbnRJbmRleCxcbiAgICAgICAgdG86IG5leHRFbGVtZW50SW5kZXhcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUkMi5TTElERSkpIHtcbiAgICAgICAgJChuZXh0RWxlbWVudCkuYWRkQ2xhc3Mob3JkZXJDbGFzc05hbWUpO1xuICAgICAgICBVdGlsLnJlZmxvdyhuZXh0RWxlbWVudCk7XG4gICAgICAgICQoYWN0aXZlRWxlbWVudCkuYWRkQ2xhc3MoZGlyZWN0aW9uYWxDbGFzc05hbWUpO1xuICAgICAgICAkKG5leHRFbGVtZW50KS5hZGRDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICAgIHZhciBuZXh0RWxlbWVudEludGVydmFsID0gcGFyc2VJbnQobmV4dEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWludGVydmFsJyksIDEwKTtcblxuICAgICAgICBpZiAobmV4dEVsZW1lbnRJbnRlcnZhbCkge1xuICAgICAgICAgIHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgPSB0aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsIHx8IHRoaXMuX2NvbmZpZy5pbnRlcnZhbDtcbiAgICAgICAgICB0aGlzLl9jb25maWcuaW50ZXJ2YWwgPSBuZXh0RWxlbWVudEludGVydmFsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCA9IHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgfHwgdGhpcy5fY29uZmlnLmludGVydmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQoYWN0aXZlRWxlbWVudCk7XG4gICAgICAgICQoYWN0aXZlRWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkKG5leHRFbGVtZW50KS5yZW1vdmVDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSArIFwiIFwiICsgb3JkZXJDbGFzc05hbWUpLmFkZENsYXNzKENsYXNzTmFtZSQyLkFDVElWRSk7XG4gICAgICAgICAgJChhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkMi5BQ1RJVkUgKyBcIiBcIiArIG9yZGVyQ2xhc3NOYW1lICsgXCIgXCIgKyBkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICAgICAgX3RoaXM0Ll9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAkKF90aGlzNC5fZWxlbWVudCkudHJpZ2dlcihzbGlkRXZlbnQpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkMi5BQ1RJVkUpO1xuICAgICAgICAkKG5leHRFbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUkMi5BQ1RJVkUpO1xuICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNsaWRFdmVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0N5Y2xpbmcpIHtcbiAgICAgICAgdGhpcy5jeWNsZSgpO1xuICAgICAgfVxuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkkMik7XG5cbiAgICAgICAgdmFyIF9jb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBEZWZhdWx0LCAkKHRoaXMpLmRhdGEoKSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgX2NvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIF9jb25maWcsIGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYWN0aW9uID0gdHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycgPyBjb25maWcgOiBfY29uZmlnLnNsaWRlO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgQ2Fyb3VzZWwodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZJDIsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgZGF0YS50byhjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2FjdGlvbl0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGFjdGlvbiArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2FjdGlvbl0oKTtcbiAgICAgICAgfSBlbHNlIGlmIChfY29uZmlnLmludGVydmFsICYmIF9jb25maWcucmlkZSkge1xuICAgICAgICAgIGRhdGEucGF1c2UoKTtcbiAgICAgICAgICBkYXRhLmN5Y2xlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBDYXJvdXNlbC5fZGF0YUFwaUNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIF9kYXRhQXBpQ2xpY2tIYW5kbGVyKGV2ZW50KSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7XG5cbiAgICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGFyZ2V0ID0gJChzZWxlY3RvcilbMF07XG5cbiAgICAgIGlmICghdGFyZ2V0IHx8ICEkKHRhcmdldCkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDIuQ0FST1VTRUwpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sICQodGFyZ2V0KS5kYXRhKCksICQodGhpcykuZGF0YSgpKTtcblxuICAgICAgdmFyIHNsaWRlSW5kZXggPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1zbGlkZS10bycpO1xuXG4gICAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgICBjb25maWcuaW50ZXJ2YWwgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQodGFyZ2V0KSwgY29uZmlnKTtcblxuICAgICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgICAgJCh0YXJnZXQpLmRhdGEoREFUQV9LRVkkMikudG8oc2xpZGVJbmRleCk7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhDYXJvdXNlbCwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kMjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDYXJvdXNlbDtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50JDIuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yJDIuREFUQV9TTElERSwgQ2Fyb3VzZWwuX2RhdGFBcGlDbGlja0hhbmRsZXIpO1xuICAkKHdpbmRvdykub24oRXZlbnQkMi5MT0FEX0RBVEFfQVBJLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhcm91c2VscyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3RvciQyLkRBVEFfUklERSkpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhcm91c2Vscy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyICRjYXJvdXNlbCA9ICQoY2Fyb3VzZWxzW2ldKTtcblxuICAgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRjYXJvdXNlbCwgJGNhcm91c2VsLmRhdGEoKSk7XG4gICAgfVxuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRSQyXSA9IENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRSQyXS5Db25zdHJ1Y3RvciA9IENhcm91c2VsO1xuXG4gICQuZm5bTkFNRSQyXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRSQyXSA9IEpRVUVSWV9OT19DT05GTElDVCQyO1xuICAgIHJldHVybiBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSQzID0gJ2NvbGxhcHNlJztcbiAgdmFyIFZFUlNJT04kMyA9ICc0LjMuMSc7XG4gIHZhciBEQVRBX0tFWSQzID0gJ2JzLmNvbGxhcHNlJztcbiAgdmFyIEVWRU5UX0tFWSQzID0gXCIuXCIgKyBEQVRBX0tFWSQzO1xuICB2YXIgREFUQV9BUElfS0VZJDMgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCQzID0gJC5mbltOQU1FJDNdO1xuICB2YXIgRGVmYXVsdCQxID0ge1xuICAgIHRvZ2dsZTogdHJ1ZSxcbiAgICBwYXJlbnQ6ICcnXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSQxID0ge1xuICAgIHRvZ2dsZTogJ2Jvb2xlYW4nLFxuICAgIHBhcmVudDogJyhzdHJpbmd8ZWxlbWVudCknXG4gIH07XG4gIHZhciBFdmVudCQzID0ge1xuICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZJDMsXG4gICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSQzLFxuICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZJDMsXG4gICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZJDMsXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSQzICsgREFUQV9BUElfS0VZJDNcbiAgfTtcbiAgdmFyIENsYXNzTmFtZSQzID0ge1xuICAgIFNIT1c6ICdzaG93JyxcbiAgICBDT0xMQVBTRTogJ2NvbGxhcHNlJyxcbiAgICBDT0xMQVBTSU5HOiAnY29sbGFwc2luZycsXG4gICAgQ09MTEFQU0VEOiAnY29sbGFwc2VkJ1xuICB9O1xuICB2YXIgRGltZW5zaW9uID0ge1xuICAgIFdJRFRIOiAnd2lkdGgnLFxuICAgIEhFSUdIVDogJ2hlaWdodCdcbiAgfTtcbiAgdmFyIFNlbGVjdG9yJDMgPSB7XG4gICAgQUNUSVZFUzogJy5zaG93LCAuY29sbGFwc2luZycsXG4gICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXSdcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcblxuICB2YXIgQ29sbGFwc2UgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb2xsYXBzZShlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX3RyaWdnZXJBcnJheSA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLXRvZ2dsZT1cXFwiY29sbGFwc2VcXFwiXVtocmVmPVxcXCIjXCIgKyBlbGVtZW50LmlkICsgXCJcXFwiXSxcIiArIChcIltkYXRhLXRvZ2dsZT1cXFwiY29sbGFwc2VcXFwiXVtkYXRhLXRhcmdldD1cXFwiI1wiICsgZWxlbWVudC5pZCArIFwiXFxcIl1cIikpKTtcbiAgICAgIHZhciB0b2dnbGVMaXN0ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yJDMuREFUQV9UT0dHTEUpKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRvZ2dsZUxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIGVsZW0gPSB0b2dnbGVMaXN0W2ldO1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbSk7XG4gICAgICAgIHZhciBmaWx0ZXJFbGVtZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSkuZmlsdGVyKGZ1bmN0aW9uIChmb3VuZEVsZW0pIHtcbiAgICAgICAgICByZXR1cm4gZm91bmRFbGVtID09PSBlbGVtZW50O1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoc2VsZWN0b3IgIT09IG51bGwgJiYgZmlsdGVyRWxlbWVudC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuICAgICAgICAgIHRoaXMuX3RyaWdnZXJBcnJheS5wdXNoKGVsZW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3BhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnQgPyB0aGlzLl9nZXRQYXJlbnQoKSA6IG51bGw7XG5cbiAgICAgIGlmICghdGhpcy5fY29uZmlnLnBhcmVudCkge1xuICAgICAgICB0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy5fZWxlbWVudCwgdGhpcy5fdHJpZ2dlckFycmF5KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy50b2dnbGUpIHtcbiAgICAgICAgdGhpcy50b2dnbGUoKTtcbiAgICAgIH1cbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IENvbGxhcHNlLnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICBpZiAoJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUkMy5TSE9XKSkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDMuU0hPVykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWN0aXZlcztcbiAgICAgIHZhciBhY3RpdmVzRGF0YTtcblxuICAgICAgaWYgKHRoaXMuX3BhcmVudCkge1xuICAgICAgICBhY3RpdmVzID0gW10uc2xpY2UuY2FsbCh0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3RvciQzLkFDVElWRVMpKS5maWx0ZXIoZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgICAgICBpZiAodHlwZW9mIF90aGlzLl9jb25maWcucGFyZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXBhcmVudCcpID09PSBfdGhpcy5fY29uZmlnLnBhcmVudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lJDMuQ09MTEFQU0UpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoYWN0aXZlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBhY3RpdmVzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWN0aXZlcykge1xuICAgICAgICBhY3RpdmVzRGF0YSA9ICQoYWN0aXZlcykubm90KHRoaXMuX3NlbGVjdG9yKS5kYXRhKERBVEFfS0VZJDMpO1xuXG4gICAgICAgIGlmIChhY3RpdmVzRGF0YSAmJiBhY3RpdmVzRGF0YS5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGFydEV2ZW50ID0gJC5FdmVudChFdmVudCQzLlNIT1cpO1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpO1xuXG4gICAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChhY3RpdmVzKSB7XG4gICAgICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKGFjdGl2ZXMpLm5vdCh0aGlzLl9zZWxlY3RvciksICdoaWRlJyk7XG5cbiAgICAgICAgaWYgKCFhY3RpdmVzRGF0YSkge1xuICAgICAgICAgICQoYWN0aXZlcykuZGF0YShEQVRBX0tFWSQzLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKCk7XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDMuQ09MTEFQU0UpLmFkZENsYXNzKENsYXNzTmFtZSQzLkNPTExBUFNJTkcpO1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gMDtcblxuICAgICAgaWYgKHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGgpIHtcbiAgICAgICAgJCh0aGlzLl90cmlnZ2VyQXJyYXkpLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQzLkNPTExBUFNFRCkuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAkKF90aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkMy5DT0xMQVBTSU5HKS5hZGRDbGFzcyhDbGFzc05hbWUkMy5DT0xMQVBTRSkuYWRkQ2xhc3MoQ2xhc3NOYW1lJDMuU0hPVyk7XG4gICAgICAgIF90aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAnJztcblxuICAgICAgICBfdGhpcy5zZXRUcmFuc2l0aW9uaW5nKGZhbHNlKTtcblxuICAgICAgICAkKF90aGlzLl9lbGVtZW50KS50cmlnZ2VyKEV2ZW50JDMuU0hPV04pO1xuICAgICAgfTtcblxuICAgICAgdmFyIGNhcGl0YWxpemVkRGltZW5zaW9uID0gZGltZW5zaW9uWzBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoMSk7XG4gICAgICB2YXIgc2Nyb2xsU2l6ZSA9IFwic2Nyb2xsXCIgKyBjYXBpdGFsaXplZERpbWVuc2lvbjtcbiAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSB0aGlzLl9lbGVtZW50W3Njcm9sbFNpemVdICsgXCJweFwiO1xuICAgIH07XG5cbiAgICBfcHJvdG8uaGlkZSA9IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCAhJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUkMy5TSE9XKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGFydEV2ZW50ID0gJC5FdmVudChFdmVudCQzLkhJREUpO1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpO1xuXG4gICAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gdGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtkaW1lbnNpb25dICsgXCJweFwiO1xuICAgICAgVXRpbC5yZWZsb3codGhpcy5fZWxlbWVudCk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZSQzLkNPTExBUFNJTkcpLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQzLkNPTExBUFNFKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkMy5TSE9XKTtcbiAgICAgIHZhciB0cmlnZ2VyQXJyYXlMZW5ndGggPSB0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAodHJpZ2dlckFycmF5TGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyaWdnZXJBcnJheUxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHRyaWdnZXIgPSB0aGlzLl90cmlnZ2VyQXJyYXlbaV07XG4gICAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRyaWdnZXIpO1xuXG4gICAgICAgICAgaWYgKHNlbGVjdG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgJGVsZW0gPSAkKFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpKTtcblxuICAgICAgICAgICAgaWYgKCEkZWxlbS5oYXNDbGFzcyhDbGFzc05hbWUkMy5TSE9XKSkge1xuICAgICAgICAgICAgICAkKHRyaWdnZXIpLmFkZENsYXNzKENsYXNzTmFtZSQzLkNPTExBUFNFRCkuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKHRydWUpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgX3RoaXMyLnNldFRyYW5zaXRpb25pbmcoZmFsc2UpO1xuXG4gICAgICAgICQoX3RoaXMyLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkMy5DT0xMQVBTSU5HKS5hZGRDbGFzcyhDbGFzc05hbWUkMy5DT0xMQVBTRSkudHJpZ2dlcihFdmVudCQzLkhJRERFTik7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAnJztcbiAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgfTtcblxuICAgIF9wcm90by5zZXRUcmFuc2l0aW9uaW5nID0gZnVuY3Rpb24gc2V0VHJhbnNpdGlvbmluZyhpc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGlzVHJhbnNpdGlvbmluZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZJDMpO1xuICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDtcbiAgICAgIHRoaXMuX3BhcmVudCA9IG51bGw7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX3RyaWdnZXJBcnJheSA9IG51bGw7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBudWxsO1xuICAgIH0gLy8gUHJpdmF0ZVxuICAgIDtcblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQkMSwgY29uZmlnKTtcbiAgICAgIGNvbmZpZy50b2dnbGUgPSBCb29sZWFuKGNvbmZpZy50b2dnbGUpOyAvLyBDb2VyY2Ugc3RyaW5nIHZhbHVlc1xuXG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FJDMsIGNvbmZpZywgRGVmYXVsdFR5cGUkMSk7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldERpbWVuc2lvbiA9IGZ1bmN0aW9uIF9nZXREaW1lbnNpb24oKSB7XG4gICAgICB2YXIgaGFzV2lkdGggPSAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKERpbWVuc2lvbi5XSURUSCk7XG4gICAgICByZXR1cm4gaGFzV2lkdGggPyBEaW1lbnNpb24uV0lEVEggOiBEaW1lbnNpb24uSEVJR0hUO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFBhcmVudCA9IGZ1bmN0aW9uIF9nZXRQYXJlbnQoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIHBhcmVudDtcblxuICAgICAgaWYgKFV0aWwuaXNFbGVtZW50KHRoaXMuX2NvbmZpZy5wYXJlbnQpKSB7XG4gICAgICAgIHBhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnQ7IC8vIEl0J3MgYSBqUXVlcnkgb2JqZWN0XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcucGFyZW50LmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50WzBdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NvbmZpZy5wYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VsZWN0b3IgPSBcIltkYXRhLXRvZ2dsZT1cXFwiY29sbGFwc2VcXFwiXVtkYXRhLXBhcmVudD1cXFwiXCIgKyB0aGlzLl9jb25maWcucGFyZW50ICsgXCJcXFwiXVwiO1xuICAgICAgdmFyIGNoaWxkcmVuID0gW10uc2xpY2UuY2FsbChwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xuICAgICAgJChjaGlsZHJlbikuZWFjaChmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xuICAgICAgICBfdGhpczMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhDb2xsYXBzZS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZWxlbWVudCksIFtlbGVtZW50XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzID0gZnVuY3Rpb24gX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhlbGVtZW50LCB0cmlnZ2VyQXJyYXkpIHtcbiAgICAgIHZhciBpc09wZW4gPSAkKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQzLlNIT1cpO1xuXG4gICAgICBpZiAodHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuICAgICAgICAkKHRyaWdnZXJBcnJheSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lJDMuQ09MTEFQU0VELCAhaXNPcGVuKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKTtcbiAgICAgIH1cbiAgICB9IC8vIFN0YXRpY1xuICAgIDtcblxuICAgIENvbGxhcHNlLl9nZXRUYXJnZXRGcm9tRWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRUYXJnZXRGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICByZXR1cm4gc2VsZWN0b3IgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA6IG51bGw7XG4gICAgfTtcblxuICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICAgIHZhciBkYXRhID0gJHRoaXMuZGF0YShEQVRBX0tFWSQzKTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQkMSwgJHRoaXMuZGF0YSgpLCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fSk7XG5cbiAgICAgICAgaWYgKCFkYXRhICYmIF9jb25maWcudG9nZ2xlICYmIC9zaG93fGhpZGUvLnRlc3QoY29uZmlnKSkge1xuICAgICAgICAgIF9jb25maWcudG9nZ2xlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IENvbGxhcHNlKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICR0aGlzLmRhdGEoREFUQV9LRVkkMywgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKENvbGxhcHNlLCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTiQzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQkMTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ29sbGFwc2U7XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkKGRvY3VtZW50KS5vbihFdmVudCQzLkNMSUNLX0RBVEFfQVBJLCBTZWxlY3RvciQzLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBwcmV2ZW50RGVmYXVsdCBvbmx5IGZvciA8YT4gZWxlbWVudHMgKHdoaWNoIGNoYW5nZSB0aGUgVVJMKSBub3QgaW5zaWRlIHRoZSBjb2xsYXBzaWJsZSBlbGVtZW50XG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQudGFnTmFtZSA9PT0gJ0EnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHZhciAkdHJpZ2dlciA9ICQodGhpcyk7XG4gICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO1xuICAgIHZhciBzZWxlY3RvcnMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbiAgICAkKHNlbGVjdG9ycykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRhcmdldCA9ICQodGhpcyk7XG4gICAgICB2YXIgZGF0YSA9ICR0YXJnZXQuZGF0YShEQVRBX0tFWSQzKTtcbiAgICAgIHZhciBjb25maWcgPSBkYXRhID8gJ3RvZ2dsZScgOiAkdHJpZ2dlci5kYXRhKCk7XG5cbiAgICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkdGFyZ2V0LCBjb25maWcpO1xuICAgIH0pO1xuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRSQzXSA9IENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRSQzXS5Db25zdHJ1Y3RvciA9IENvbGxhcHNlO1xuXG4gICQuZm5bTkFNRSQzXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRSQzXSA9IEpRVUVSWV9OT19DT05GTElDVCQzO1xuICAgIHJldHVybiBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSQ0ID0gJ2Ryb3Bkb3duJztcbiAgdmFyIFZFUlNJT04kNCA9ICc0LjMuMSc7XG4gIHZhciBEQVRBX0tFWSQ0ID0gJ2JzLmRyb3Bkb3duJztcbiAgdmFyIEVWRU5UX0tFWSQ0ID0gXCIuXCIgKyBEQVRBX0tFWSQ0O1xuICB2YXIgREFUQV9BUElfS0VZJDQgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCQ0ID0gJC5mbltOQU1FJDRdO1xuICB2YXIgRVNDQVBFX0tFWUNPREUgPSAyNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgRXNjYXBlIChFc2MpIGtleVxuXG4gIHZhciBTUEFDRV9LRVlDT0RFID0gMzI7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHNwYWNlIGtleVxuXG4gIHZhciBUQUJfS0VZQ09ERSA9IDk7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHRhYiBrZXlcblxuICB2YXIgQVJST1dfVVBfS0VZQ09ERSA9IDM4OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB1cCBhcnJvdyBrZXlcblxuICB2YXIgQVJST1dfRE9XTl9LRVlDT0RFID0gNDA7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIGRvd24gYXJyb3cga2V5XG5cbiAgdmFyIFJJR0hUX01PVVNFX0JVVFRPTl9XSElDSCA9IDM7IC8vIE1vdXNlRXZlbnQud2hpY2ggdmFsdWUgZm9yIHRoZSByaWdodCBidXR0b24gKGFzc3VtaW5nIGEgcmlnaHQtaGFuZGVkIG1vdXNlKVxuXG4gIHZhciBSRUdFWFBfS0VZRE9XTiA9IG5ldyBSZWdFeHAoQVJST1dfVVBfS0VZQ09ERSArIFwifFwiICsgQVJST1dfRE9XTl9LRVlDT0RFICsgXCJ8XCIgKyBFU0NBUEVfS0VZQ09ERSk7XG4gIHZhciBFdmVudCQ0ID0ge1xuICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZJDQsXG4gICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZJDQsXG4gICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVkkNCxcbiAgICBTSE9XTjogXCJzaG93blwiICsgRVZFTlRfS0VZJDQsXG4gICAgQ0xJQ0s6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSQ0LFxuICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkkNCArIERBVEFfQVBJX0tFWSQ0LFxuICAgIEtFWURPV05fREFUQV9BUEk6IFwia2V5ZG93blwiICsgRVZFTlRfS0VZJDQgKyBEQVRBX0FQSV9LRVkkNCxcbiAgICBLRVlVUF9EQVRBX0FQSTogXCJrZXl1cFwiICsgRVZFTlRfS0VZJDQgKyBEQVRBX0FQSV9LRVkkNFxuICB9O1xuICB2YXIgQ2xhc3NOYW1lJDQgPSB7XG4gICAgRElTQUJMRUQ6ICdkaXNhYmxlZCcsXG4gICAgU0hPVzogJ3Nob3cnLFxuICAgIERST1BVUDogJ2Ryb3B1cCcsXG4gICAgRFJPUFJJR0hUOiAnZHJvcHJpZ2h0JyxcbiAgICBEUk9QTEVGVDogJ2Ryb3BsZWZ0JyxcbiAgICBNRU5VUklHSFQ6ICdkcm9wZG93bi1tZW51LXJpZ2h0JyxcbiAgICBNRU5VTEVGVDogJ2Ryb3Bkb3duLW1lbnUtbGVmdCcsXG4gICAgUE9TSVRJT05fU1RBVElDOiAncG9zaXRpb24tc3RhdGljJ1xuICB9O1xuICB2YXIgU2VsZWN0b3IkNCA9IHtcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJdJyxcbiAgICBGT1JNX0NISUxEOiAnLmRyb3Bkb3duIGZvcm0nLFxuICAgIE1FTlU6ICcuZHJvcGRvd24tbWVudScsXG4gICAgTkFWQkFSX05BVjogJy5uYXZiYXItbmF2JyxcbiAgICBWSVNJQkxFX0lURU1TOiAnLmRyb3Bkb3duLW1lbnUgLmRyb3Bkb3duLWl0ZW06bm90KC5kaXNhYmxlZCk6bm90KDpkaXNhYmxlZCknXG4gIH07XG4gIHZhciBBdHRhY2htZW50TWFwID0ge1xuICAgIFRPUDogJ3RvcC1zdGFydCcsXG4gICAgVE9QRU5EOiAndG9wLWVuZCcsXG4gICAgQk9UVE9NOiAnYm90dG9tLXN0YXJ0JyxcbiAgICBCT1RUT01FTkQ6ICdib3R0b20tZW5kJyxcbiAgICBSSUdIVDogJ3JpZ2h0LXN0YXJ0JyxcbiAgICBSSUdIVEVORDogJ3JpZ2h0LWVuZCcsXG4gICAgTEVGVDogJ2xlZnQtc3RhcnQnLFxuICAgIExFRlRFTkQ6ICdsZWZ0LWVuZCdcbiAgfTtcbiAgdmFyIERlZmF1bHQkMiA9IHtcbiAgICBvZmZzZXQ6IDAsXG4gICAgZmxpcDogdHJ1ZSxcbiAgICBib3VuZGFyeTogJ3Njcm9sbFBhcmVudCcsXG4gICAgcmVmZXJlbmNlOiAndG9nZ2xlJyxcbiAgICBkaXNwbGF5OiAnZHluYW1pYydcbiAgfTtcbiAgdmFyIERlZmF1bHRUeXBlJDIgPSB7XG4gICAgb2Zmc2V0OiAnKG51bWJlcnxzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgICBmbGlwOiAnYm9vbGVhbicsXG4gICAgYm91bmRhcnk6ICcoc3RyaW5nfGVsZW1lbnQpJyxcbiAgICByZWZlcmVuY2U6ICcoc3RyaW5nfGVsZW1lbnQpJyxcbiAgICBkaXNwbGF5OiAnc3RyaW5nJ1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBEcm9wZG93biA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERyb3Bkb3duKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl9tZW51ID0gdGhpcy5fZ2V0TWVudUVsZW1lbnQoKTtcbiAgICAgIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKCk7XG5cbiAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBEcm9wZG93bi5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQuZGlzYWJsZWQgfHwgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUkNC5ESVNBQkxFRCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICB2YXIgaXNBY3RpdmUgPSAkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZSQ0LlNIT1cpO1xuXG4gICAgICBEcm9wZG93bi5fY2xlYXJNZW51cygpO1xuXG4gICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgICAgfTtcbiAgICAgIHZhciBzaG93RXZlbnQgPSAkLkV2ZW50KEV2ZW50JDQuU0hPVywgcmVsYXRlZFRhcmdldCk7XG4gICAgICAkKHBhcmVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gRGlzYWJsZSB0b3RhbGx5IFBvcHBlci5qcyBmb3IgRHJvcGRvd24gaW4gTmF2YmFyXG5cblxuICAgICAgaWYgKCF0aGlzLl9pbk5hdmJhcikge1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2sgZm9yIFBvcHBlciBkZXBlbmRlbmN5XG4gICAgICAgICAqIFBvcHBlciAtIGh0dHBzOi8vcG9wcGVyLmpzLm9yZ1xuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9vdHN0cmFwXFwncyBkcm9wZG93bnMgcmVxdWlyZSBQb3BwZXIuanMgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy8pJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQ7XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UgPT09ICdwYXJlbnQnKSB7XG4gICAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHBhcmVudDtcbiAgICAgICAgfSBlbHNlIGlmIChVdGlsLmlzRWxlbWVudCh0aGlzLl9jb25maWcucmVmZXJlbmNlKSkge1xuICAgICAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSB0aGlzLl9jb25maWcucmVmZXJlbmNlOyAvLyBDaGVjayBpZiBpdCdzIGpRdWVyeSBlbGVtZW50XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UuanF1ZXJ5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2NvbmZpZy5yZWZlcmVuY2VbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIElmIGJvdW5kYXJ5IGlzIG5vdCBgc2Nyb2xsUGFyZW50YCwgdGhlbiBzZXQgcG9zaXRpb24gdG8gYHN0YXRpY2BcbiAgICAgICAgLy8gdG8gYWxsb3cgdGhlIG1lbnUgdG8gXCJlc2NhcGVcIiB0aGUgc2Nyb2xsIHBhcmVudCdzIGJvdW5kYXJpZXNcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8yNDI1MVxuXG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5ib3VuZGFyeSAhPT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICAgICAgICAkKHBhcmVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lJDQuUE9TSVRJT05fU1RBVElDKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXIocmVmZXJlbmNlRWxlbWVudCwgdGhpcy5fbWVudSwgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKCkpO1xuICAgICAgfSAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgYWRkIGV4dHJhXG4gICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHRvIHRoZSBib2R5J3MgaW1tZWRpYXRlIGNoaWxkcmVuO1xuICAgICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcbiAgICAgIC8vIGh0dHBzOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxNC8wMi9tb3VzZV9ldmVudF9idWIuaHRtbFxuXG5cbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgJChwYXJlbnQpLmNsb3Nlc3QoU2VsZWN0b3IkNC5OQVZCQVJfTkFWKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgJChkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9uKCdtb3VzZW92ZXInLCBudWxsLCAkLm5vb3ApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbGVtZW50LmZvY3VzKCk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG5cbiAgICAgICQodGhpcy5fbWVudSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lJDQuU0hPVyk7XG4gICAgICAkKHBhcmVudCkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lJDQuU0hPVykudHJpZ2dlcigkLkV2ZW50KEV2ZW50JDQuU0hPV04sIHJlbGF0ZWRUYXJnZXQpKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQuZGlzYWJsZWQgfHwgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUkNC5ESVNBQkxFRCkgfHwgJCh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUkNC5TSE9XKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9O1xuICAgICAgdmFyIHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQkNC5TSE9XLCByZWxhdGVkVGFyZ2V0KTtcblxuICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcblxuICAgICAgJChwYXJlbnQpLnRyaWdnZXIoc2hvd0V2ZW50KTtcblxuICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fbWVudSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lJDQuU0hPVyk7XG4gICAgICAkKHBhcmVudCkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lJDQuU0hPVykudHJpZ2dlcigkLkV2ZW50KEV2ZW50JDQuU0hPV04sIHJlbGF0ZWRUYXJnZXQpKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQuZGlzYWJsZWQgfHwgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUkNC5ESVNBQkxFRCkgfHwgISQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDQuU0hPVykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgICAgfTtcbiAgICAgIHZhciBoaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50JDQuSElERSwgcmVsYXRlZFRhcmdldCk7XG5cbiAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cbiAgICAgICQocGFyZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG5cbiAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkKHRoaXMuX21lbnUpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZSQ0LlNIT1cpO1xuICAgICAgJChwYXJlbnQpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZSQ0LlNIT1cpLnRyaWdnZXIoJC5FdmVudChFdmVudCQ0LkhJRERFTiwgcmVsYXRlZFRhcmdldCkpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkkNCk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9mZihFVkVOVF9LRVkkNCk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX21lbnUgPSBudWxsO1xuXG4gICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XG5cbiAgICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKCk7XG5cbiAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSAvLyBQcml2YXRlXG4gICAgO1xuXG4gICAgX3Byb3RvLl9hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQkNC5DTElDSywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIF90aGlzLnRvZ2dsZSgpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCwgJCh0aGlzLl9lbGVtZW50KS5kYXRhKCksIGNvbmZpZyk7XG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FJDQsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSk7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldE1lbnVFbGVtZW50ID0gZnVuY3Rpb24gX2dldE1lbnVFbGVtZW50KCkge1xuICAgICAgaWYgKCF0aGlzLl9tZW51KSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgIHRoaXMuX21lbnUgPSBwYXJlbnQucXVlcnlTZWxlY3RvcihTZWxlY3RvciQ0Lk1FTlUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9tZW51O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFBsYWNlbWVudCA9IGZ1bmN0aW9uIF9nZXRQbGFjZW1lbnQoKSB7XG4gICAgICB2YXIgJHBhcmVudERyb3Bkb3duID0gJCh0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUpO1xuICAgICAgdmFyIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuQk9UVE9NOyAvLyBIYW5kbGUgZHJvcHVwXG5cbiAgICAgIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ2xhc3NOYW1lJDQuRFJPUFVQKSkge1xuICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlRPUDtcblxuICAgICAgICBpZiAoJCh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUkNC5NRU5VUklHSFQpKSB7XG4gICAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5UT1BFTkQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoJHBhcmVudERyb3Bkb3duLmhhc0NsYXNzKENsYXNzTmFtZSQ0LkRST1BSSUdIVCkpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5SSUdIVDtcbiAgICAgIH0gZWxzZSBpZiAoJHBhcmVudERyb3Bkb3duLmhhc0NsYXNzKENsYXNzTmFtZSQ0LkRST1BMRUZUKSkge1xuICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkxFRlQ7XG4gICAgICB9IGVsc2UgaWYgKCQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDQuTUVOVVJJR0hUKSkge1xuICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkJPVFRPTUVORDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9kZXRlY3ROYXZiYXIgPSBmdW5jdGlvbiBfZGV0ZWN0TmF2YmFyKCkge1xuICAgICAgcmV0dXJuICQodGhpcy5fZWxlbWVudCkuY2xvc2VzdCgnLm5hdmJhcicpLmxlbmd0aCA+IDA7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0T2Zmc2V0ID0gZnVuY3Rpb24gX2dldE9mZnNldCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgb2Zmc2V0ID0ge307XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLm9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvZmZzZXQuZm4gPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGRhdGEub2Zmc2V0cyA9IF9vYmplY3RTcHJlYWQoe30sIGRhdGEub2Zmc2V0cywgX3RoaXMyLl9jb25maWcub2Zmc2V0KGRhdGEub2Zmc2V0cywgX3RoaXMyLl9lbGVtZW50KSB8fCB7fSk7XG4gICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvZmZzZXQub2Zmc2V0ID0gdGhpcy5fY29uZmlnLm9mZnNldDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRQb3BwZXJDb25maWcgPSBmdW5jdGlvbiBfZ2V0UG9wcGVyQ29uZmlnKCkge1xuICAgICAgdmFyIHBvcHBlckNvbmZpZyA9IHtcbiAgICAgICAgcGxhY2VtZW50OiB0aGlzLl9nZXRQbGFjZW1lbnQoKSxcbiAgICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgICAgb2Zmc2V0OiB0aGlzLl9nZXRPZmZzZXQoKSxcbiAgICAgICAgICBmbGlwOiB7XG4gICAgICAgICAgICBlbmFibGVkOiB0aGlzLl9jb25maWcuZmxpcFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgICAgICAgICBib3VuZGFyaWVzRWxlbWVudDogdGhpcy5fY29uZmlnLmJvdW5kYXJ5XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIERpc2FibGUgUG9wcGVyLmpzIGlmIHdlIGhhdmUgYSBzdGF0aWMgZGlzcGxheVxuXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmRpc3BsYXkgPT09ICdzdGF0aWMnKSB7XG4gICAgICAgIHBvcHBlckNvbmZpZy5tb2RpZmllcnMuYXBwbHlTdHlsZSA9IHtcbiAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcG9wcGVyQ29uZmlnO1xuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkkNCk7XG5cbiAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGw7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBEcm9wZG93bih0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVkkNCwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgRHJvcGRvd24uX2NsZWFyTWVudXMgPSBmdW5jdGlvbiBfY2xlYXJNZW51cyhldmVudCkge1xuICAgICAgaWYgKGV2ZW50ICYmIChldmVudC53aGljaCA9PT0gUklHSFRfTU9VU0VfQlVUVE9OX1dISUNIIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQud2hpY2ggIT09IFRBQl9LRVlDT0RFKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0b2dnbGVzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yJDQuREFUQV9UT0dHTEUpKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRvZ2dsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0b2dnbGVzW2ldKTtcblxuICAgICAgICB2YXIgY29udGV4dCA9ICQodG9nZ2xlc1tpXSkuZGF0YShEQVRBX0tFWSQ0KTtcbiAgICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogdG9nZ2xlc1tpXVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChldmVudCAmJiBldmVudC50eXBlID09PSAnY2xpY2snKSB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldC5jbGlja0V2ZW50ID0gZXZlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkcm9wZG93bk1lbnUgPSBjb250ZXh0Ll9tZW51O1xuXG4gICAgICAgIGlmICghJChwYXJlbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQ0LlNIT1cpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycgJiYgL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC53aGljaCA9PT0gVEFCX0tFWUNPREUpICYmICQuY29udGFpbnMocGFyZW50LCBldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaGlkZUV2ZW50ID0gJC5FdmVudChFdmVudCQ0LkhJREUsIHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgICAkKHBhcmVudCkudHJpZ2dlcihoaWRlRXZlbnQpO1xuXG4gICAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxuXG5cbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgICQoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vZmYoJ21vdXNlb3ZlcicsIG51bGwsICQubm9vcCk7XG4gICAgICAgIH1cblxuICAgICAgICB0b2dnbGVzW2ldLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgICAgICAkKGRyb3Bkb3duTWVudSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDQuU0hPVyk7XG4gICAgICAgICQocGFyZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkNC5TSE9XKS50cmlnZ2VyKCQuRXZlbnQoRXZlbnQkNC5ISURERU4sIHJlbGF0ZWRUYXJnZXQpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50ID0gZnVuY3Rpb24gX2dldFBhcmVudEZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBwYXJlbnQ7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBwYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcmVudCB8fCBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuICAgIDtcblxuICAgIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIgPSBmdW5jdGlvbiBfZGF0YUFwaUtleWRvd25IYW5kbGVyKGV2ZW50KSB7XG4gICAgICAvLyBJZiBub3QgaW5wdXQvdGV4dGFyZWE6XG4gICAgICAvLyAgLSBBbmQgbm90IGEga2V5IGluIFJFR0VYUF9LRVlET1dOID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAgIC8vIElmIGlucHV0L3RleHRhcmVhOlxuICAgICAgLy8gIC0gSWYgc3BhY2Uga2V5ID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAgIC8vICAtIElmIGtleSBpcyBvdGhlciB0aGFuIGVzY2FwZVxuICAgICAgLy8gICAgLSBJZiBrZXkgaXMgbm90IHVwIG9yIGRvd24gPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgICAgLy8gICAgLSBJZiB0cmlnZ2VyIGluc2lkZSB0aGUgbWVudSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgPyBldmVudC53aGljaCA9PT0gU1BBQ0VfS0VZQ09ERSB8fCBldmVudC53aGljaCAhPT0gRVNDQVBFX0tFWUNPREUgJiYgKGV2ZW50LndoaWNoICE9PSBBUlJPV19ET1dOX0tFWUNPREUgJiYgZXZlbnQud2hpY2ggIT09IEFSUk9XX1VQX0tFWUNPREUgfHwgJChldmVudC50YXJnZXQpLmNsb3Nlc3QoU2VsZWN0b3IkNC5NRU5VKS5sZW5ndGgpIDogIVJFR0VYUF9LRVlET1dOLnRlc3QoZXZlbnQud2hpY2gpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCAkKHRoaXMpLmhhc0NsYXNzKENsYXNzTmFtZSQ0LkRJU0FCTEVEKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcyk7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICQocGFyZW50KS5oYXNDbGFzcyhDbGFzc05hbWUkNC5TSE9XKTtcblxuICAgICAgaWYgKCFpc0FjdGl2ZSB8fCBpc0FjdGl2ZSAmJiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFKSkge1xuICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFKSB7XG4gICAgICAgICAgdmFyIHRvZ2dsZSA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yJDQuREFUQV9UT0dHTEUpO1xuICAgICAgICAgICQodG9nZ2xlKS50cmlnZ2VyKCdmb2N1cycpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh0aGlzKS50cmlnZ2VyKCdjbGljaycpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpdGVtcyA9IFtdLnNsaWNlLmNhbGwocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IkNC5WSVNJQkxFX0lURU1TKSk7XG5cbiAgICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXggPSBpdGVtcy5pbmRleE9mKGV2ZW50LnRhcmdldCk7XG5cbiAgICAgIGlmIChldmVudC53aGljaCA9PT0gQVJST1dfVVBfS0VZQ09ERSAmJiBpbmRleCA+IDApIHtcbiAgICAgICAgLy8gVXBcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBBUlJPV19ET1dOX0tFWUNPREUgJiYgaW5kZXggPCBpdGVtcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIC8vIERvd25cbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IDA7XG4gICAgICB9XG5cbiAgICAgIGl0ZW1zW2luZGV4XS5mb2N1cygpO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoRHJvcGRvd24sIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OJDQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdCQyO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0VHlwZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0VHlwZSQyO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBEcm9wZG93bjtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50JDQuS0VZRE9XTl9EQVRBX0FQSSwgU2VsZWN0b3IkNC5EQVRBX1RPR0dMRSwgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlcikub24oRXZlbnQkNC5LRVlET1dOX0RBVEFfQVBJLCBTZWxlY3RvciQ0Lk1FTlUsIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLm9uKEV2ZW50JDQuQ0xJQ0tfREFUQV9BUEkgKyBcIiBcIiArIEV2ZW50JDQuS0VZVVBfREFUQV9BUEksIERyb3Bkb3duLl9jbGVhck1lbnVzKS5vbihFdmVudCQ0LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3RvciQ0LkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZS5jYWxsKCQodGhpcyksICd0b2dnbGUnKTtcbiAgfSkub24oRXZlbnQkNC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IkNC5GT1JNX0NISUxELCBmdW5jdGlvbiAoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH0pO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FJDRdID0gRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FJDRdLkNvbnN0cnVjdG9yID0gRHJvcGRvd247XG5cbiAgJC5mbltOQU1FJDRdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FJDRdID0gSlFVRVJZX05PX0NPTkZMSUNUJDQ7XG4gICAgcmV0dXJuIERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJDUgPSAnbW9kYWwnO1xuICB2YXIgVkVSU0lPTiQ1ID0gJzQuMy4xJztcbiAgdmFyIERBVEFfS0VZJDUgPSAnYnMubW9kYWwnO1xuICB2YXIgRVZFTlRfS0VZJDUgPSBcIi5cIiArIERBVEFfS0VZJDU7XG4gIHZhciBEQVRBX0FQSV9LRVkkNSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJDUgPSAkLmZuW05BTUUkNV07XG4gIHZhciBFU0NBUEVfS0VZQ09ERSQxID0gMjc7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIEVzY2FwZSAoRXNjKSBrZXlcblxuICB2YXIgRGVmYXVsdCQzID0ge1xuICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIGZvY3VzOiB0cnVlLFxuICAgIHNob3c6IHRydWVcbiAgfTtcbiAgdmFyIERlZmF1bHRUeXBlJDMgPSB7XG4gICAgYmFja2Ryb3A6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgICBrZXlib2FyZDogJ2Jvb2xlYW4nLFxuICAgIGZvY3VzOiAnYm9vbGVhbicsXG4gICAgc2hvdzogJ2Jvb2xlYW4nXG4gIH07XG4gIHZhciBFdmVudCQ1ID0ge1xuICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZJDUsXG4gICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZJDUsXG4gICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVkkNSxcbiAgICBTSE9XTjogXCJzaG93blwiICsgRVZFTlRfS0VZJDUsXG4gICAgRk9DVVNJTjogXCJmb2N1c2luXCIgKyBFVkVOVF9LRVkkNSxcbiAgICBSRVNJWkU6IFwicmVzaXplXCIgKyBFVkVOVF9LRVkkNSxcbiAgICBDTElDS19ESVNNSVNTOiBcImNsaWNrLmRpc21pc3NcIiArIEVWRU5UX0tFWSQ1LFxuICAgIEtFWURPV05fRElTTUlTUzogXCJrZXlkb3duLmRpc21pc3NcIiArIEVWRU5UX0tFWSQ1LFxuICAgIE1PVVNFVVBfRElTTUlTUzogXCJtb3VzZXVwLmRpc21pc3NcIiArIEVWRU5UX0tFWSQ1LFxuICAgIE1PVVNFRE9XTl9ESVNNSVNTOiBcIm1vdXNlZG93bi5kaXNtaXNzXCIgKyBFVkVOVF9LRVkkNSxcbiAgICBDTElDS19EQVRBX0FQSTogXCJjbGlja1wiICsgRVZFTlRfS0VZJDUgKyBEQVRBX0FQSV9LRVkkNVxuICB9O1xuICB2YXIgQ2xhc3NOYW1lJDUgPSB7XG4gICAgU0NST0xMQUJMRTogJ21vZGFsLWRpYWxvZy1zY3JvbGxhYmxlJyxcbiAgICBTQ1JPTExCQVJfTUVBU1VSRVI6ICdtb2RhbC1zY3JvbGxiYXItbWVhc3VyZScsXG4gICAgQkFDS0RST1A6ICdtb2RhbC1iYWNrZHJvcCcsXG4gICAgT1BFTjogJ21vZGFsLW9wZW4nLFxuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgfTtcbiAgdmFyIFNlbGVjdG9yJDUgPSB7XG4gICAgRElBTE9HOiAnLm1vZGFsLWRpYWxvZycsXG4gICAgTU9EQUxfQk9EWTogJy5tb2RhbC1ib2R5JyxcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cIm1vZGFsXCJdJyxcbiAgICBEQVRBX0RJU01JU1M6ICdbZGF0YS1kaXNtaXNzPVwibW9kYWxcIl0nLFxuICAgIEZJWEVEX0NPTlRFTlQ6ICcuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wJyxcbiAgICBTVElDS1lfQ09OVEVOVDogJy5zdGlja3ktdG9wJ1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBNb2RhbCA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1vZGFsKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX2RpYWxvZyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3RvciQ1LkRJQUxPRyk7XG4gICAgICB0aGlzLl9iYWNrZHJvcCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1Nob3duID0gZmFsc2U7XG4gICAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyA9IGZhbHNlO1xuICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlO1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IDA7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBNb2RhbC5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldCk7XG4gICAgfTtcblxuICAgIF9wcm90by5zaG93ID0gZnVuY3Rpb24gc2hvdyhyZWxhdGVkVGFyZ2V0KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93biB8fCB0aGlzLl9pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUkNS5GQURFKSkge1xuICAgICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2hvd0V2ZW50ID0gJC5FdmVudChFdmVudCQ1LlNIT1csIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldFxuICAgICAgfSk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd0V2ZW50KTtcblxuICAgICAgaWYgKHRoaXMuX2lzU2hvd24gfHwgc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNTaG93biA9IHRydWU7XG5cbiAgICAgIHRoaXMuX2NoZWNrU2Nyb2xsYmFyKCk7XG5cbiAgICAgIHRoaXMuX3NldFNjcm9sbGJhcigpO1xuXG4gICAgICB0aGlzLl9hZGp1c3REaWFsb2coKTtcblxuICAgICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKTtcblxuICAgICAgdGhpcy5fc2V0UmVzaXplRXZlbnQoKTtcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudCQ1LkNMSUNLX0RJU01JU1MsIFNlbGVjdG9yJDUuREFUQV9ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhpZGUoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgICAkKHRoaXMuX2RpYWxvZykub24oRXZlbnQkNS5NT1VTRURPV05fRElTTUlTUywgZnVuY3Rpb24gKCkge1xuICAgICAgICAkKF90aGlzLl9lbGVtZW50KS5vbmUoRXZlbnQkNS5NT1VTRVVQX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmICgkKGV2ZW50LnRhcmdldCkuaXMoX3RoaXMuX2VsZW1lbnQpKSB7XG4gICAgICAgICAgICBfdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9zaG93QmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZShldmVudCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2lzU2hvd24gfHwgdGhpcy5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQkNS5ISURFKTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihoaWRlRXZlbnQpO1xuXG4gICAgICBpZiAoIXRoaXMuX2lzU2hvd24gfHwgaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNTaG93biA9IGZhbHNlO1xuICAgICAgdmFyIHRyYW5zaXRpb24gPSAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQ1LkZBREUpO1xuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zZXRFc2NhcGVFdmVudCgpO1xuXG4gICAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpO1xuXG4gICAgICAkKGRvY3VtZW50KS5vZmYoRXZlbnQkNS5GT0NVU0lOKTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDUuU0hPVyk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9mZihFdmVudCQ1LkNMSUNLX0RJU01JU1MpO1xuICAgICAgJCh0aGlzLl9kaWFsb2cpLm9mZihFdmVudCQ1Lk1PVVNFRE9XTl9ESVNNSVNTKTtcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuX2hpZGVNb2RhbChldmVudCk7XG4gICAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9oaWRlTW9kYWwoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgW3dpbmRvdywgdGhpcy5fZWxlbWVudCwgdGhpcy5fZGlhbG9nXS5mb3JFYWNoKGZ1bmN0aW9uIChodG1sRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gJChodG1sRWxlbWVudCkub2ZmKEVWRU5UX0tFWSQ1KTtcbiAgICAgIH0pO1xuICAgICAgLyoqXG4gICAgICAgKiBgZG9jdW1lbnRgIGhhcyAyIGV2ZW50cyBgRXZlbnQuRk9DVVNJTmAgYW5kIGBFdmVudC5DTElDS19EQVRBX0FQSWBcbiAgICAgICAqIERvIG5vdCBtb3ZlIGBkb2N1bWVudGAgaW4gYGh0bWxFbGVtZW50c2AgYXJyYXlcbiAgICAgICAqIEl0IHdpbGwgcmVtb3ZlIGBFdmVudC5DTElDS19EQVRBX0FQSWAgZXZlbnQgdGhhdCBzaG91bGQgcmVtYWluXG4gICAgICAgKi9cblxuICAgICAgJChkb2N1bWVudCkub2ZmKEV2ZW50JDUuRk9DVVNJTik7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkkNSk7XG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9kaWFsb2cgPSBudWxsO1xuICAgICAgdGhpcy5fYmFja2Ryb3AgPSBudWxsO1xuICAgICAgdGhpcy5faXNTaG93biA9IG51bGw7XG4gICAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyA9IG51bGw7XG4gICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IG51bGw7XG4gICAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IG51bGw7XG4gICAgfTtcblxuICAgIF9wcm90by5oYW5kbGVVcGRhdGUgPSBmdW5jdGlvbiBoYW5kbGVVcGRhdGUoKSB7XG4gICAgICB0aGlzLl9hZGp1c3REaWFsb2coKTtcbiAgICB9IC8vIFByaXZhdGVcbiAgICA7XG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBEZWZhdWx0JDMsIGNvbmZpZyk7XG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FJDUsIGNvbmZpZywgRGVmYXVsdFR5cGUkMyk7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3Nob3dFbGVtZW50ID0gZnVuY3Rpb24gX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDUuRkFERSk7XG5cbiAgICAgIGlmICghdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlIHx8IHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgLy8gRG9uJ3QgbW92ZSBtb2RhbCdzIERPTSBwb3NpdGlvblxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnLCB0cnVlKTtcblxuICAgICAgaWYgKCQodGhpcy5fZGlhbG9nKS5oYXNDbGFzcyhDbGFzc05hbWUkNS5TQ1JPTExBQkxFKSkge1xuICAgICAgICB0aGlzLl9kaWFsb2cucXVlcnlTZWxlY3RvcihTZWxlY3RvciQ1Lk1PREFMX0JPRFkpLnNjcm9sbFRvcCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnNjcm9sbFRvcCA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIFV0aWwucmVmbG93KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZSQ1LlNIT1cpO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmZvY3VzKSB7XG4gICAgICAgIHRoaXMuX2VuZm9yY2VGb2N1cygpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2hvd25FdmVudCA9ICQuRXZlbnQoRXZlbnQkNS5TSE9XTiwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0XG4gICAgICB9KTtcblxuICAgICAgdmFyIHRyYW5zaXRpb25Db21wbGV0ZSA9IGZ1bmN0aW9uIHRyYW5zaXRpb25Db21wbGV0ZSgpIHtcbiAgICAgICAgaWYgKF90aGlzMy5fY29uZmlnLmZvY3VzKSB7XG4gICAgICAgICAgX3RoaXMzLl9lbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICAgICAgICAkKF90aGlzMy5fZWxlbWVudCkudHJpZ2dlcihzaG93bkV2ZW50KTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2RpYWxvZyk7XG4gICAgICAgICQodGhpcy5fZGlhbG9nKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgdHJhbnNpdGlvbkNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNpdGlvbkNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fZW5mb3JjZUZvY3VzID0gZnVuY3Rpb24gX2VuZm9yY2VGb2N1cygpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAkKGRvY3VtZW50KS5vZmYoRXZlbnQkNS5GT0NVU0lOKSAvLyBHdWFyZCBhZ2FpbnN0IGluZmluaXRlIGZvY3VzIGxvb3BcbiAgICAgIC5vbihFdmVudCQ1LkZPQ1VTSU4sIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZG9jdW1lbnQgIT09IGV2ZW50LnRhcmdldCAmJiBfdGhpczQuX2VsZW1lbnQgIT09IGV2ZW50LnRhcmdldCAmJiAkKF90aGlzNC5fZWxlbWVudCkuaGFzKGV2ZW50LnRhcmdldCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgX3RoaXM0Ll9lbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3NldEVzY2FwZUV2ZW50ID0gZnVuY3Rpb24gX3NldEVzY2FwZUV2ZW50KCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc1Nob3duICYmIHRoaXMuX2NvbmZpZy5rZXlib2FyZCkge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50JDUuS0VZRE9XTl9ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFJDEpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIF90aGlzNS5oaWRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzU2hvd24pIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vZmYoRXZlbnQkNS5LRVlET1dOX0RJU01JU1MpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX3NldFJlc2l6ZUV2ZW50ID0gZnVuY3Rpb24gX3NldFJlc2l6ZUV2ZW50KCkge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc1Nob3duKSB7XG4gICAgICAgICQod2luZG93KS5vbihFdmVudCQ1LlJFU0laRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNi5oYW5kbGVVcGRhdGUoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQod2luZG93KS5vZmYoRXZlbnQkNS5SRVNJWkUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2hpZGVNb2RhbCA9IGZ1bmN0aW9uIF9oaWRlTW9kYWwoKSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCB0cnVlKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnKTtcblxuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuX3Nob3dCYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDUuT1BFTik7XG5cbiAgICAgICAgX3RoaXM3Ll9yZXNldEFkanVzdG1lbnRzKCk7XG5cbiAgICAgICAgX3RoaXM3Ll9yZXNldFNjcm9sbGJhcigpO1xuXG4gICAgICAgICQoX3RoaXM3Ll9lbGVtZW50KS50cmlnZ2VyKEV2ZW50JDUuSElEREVOKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3JlbW92ZUJhY2tkcm9wID0gZnVuY3Rpb24gX3JlbW92ZUJhY2tkcm9wKCkge1xuICAgICAgaWYgKHRoaXMuX2JhY2tkcm9wKSB7XG4gICAgICAgICQodGhpcy5fYmFja2Ryb3ApLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLl9iYWNrZHJvcCA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fc2hvd0JhY2tkcm9wID0gZnVuY3Rpb24gX3Nob3dCYWNrZHJvcChjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgIHZhciBhbmltYXRlID0gJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUkNS5GQURFKSA/IENsYXNzTmFtZSQ1LkZBREUgOiAnJztcblxuICAgICAgaWYgKHRoaXMuX2lzU2hvd24gJiYgdGhpcy5fY29uZmlnLmJhY2tkcm9wKSB7XG4gICAgICAgIHRoaXMuX2JhY2tkcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX2JhY2tkcm9wLmNsYXNzTmFtZSA9IENsYXNzTmFtZSQ1LkJBQ0tEUk9QO1xuXG4gICAgICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAgICAgdGhpcy5fYmFja2Ryb3AuY2xhc3NMaXN0LmFkZChhbmltYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQodGhpcy5fYmFja2Ryb3ApLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpO1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50JDUuQ0xJQ0tfRElTTUlTUywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKF90aGlzOC5faWdub3JlQmFja2Ryb3BDbGljaykge1xuICAgICAgICAgICAgX3RoaXM4Ll9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChfdGhpczguX2NvbmZpZy5iYWNrZHJvcCA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgICAgIF90aGlzOC5fZWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpczguaGlkZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICBVdGlsLnJlZmxvdyh0aGlzLl9iYWNrZHJvcCk7XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5hZGRDbGFzcyhDbGFzc05hbWUkNS5TSE9XKTtcblxuICAgICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFhbmltYXRlKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2JhY2tkcm9wKTtcbiAgICAgICAgJCh0aGlzLl9iYWNrZHJvcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNhbGxiYWNrKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChiYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLl9pc1Nob3duICYmIHRoaXMuX2JhY2tkcm9wKSB7XG4gICAgICAgICQodGhpcy5fYmFja2Ryb3ApLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQ1LlNIT1cpO1xuXG4gICAgICAgIHZhciBjYWxsYmFja1JlbW92ZSA9IGZ1bmN0aW9uIGNhbGxiYWNrUmVtb3ZlKCkge1xuICAgICAgICAgIF90aGlzOC5fcmVtb3ZlQmFja2Ryb3AoKTtcblxuICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDUuRkFERSkpIHtcbiAgICAgICAgICB2YXIgX2JhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9iYWNrZHJvcCk7XG5cbiAgICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY2FsbGJhY2tSZW1vdmUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKF9iYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbGJhY2tSZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0gLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIHRoZSBmb2xsb3dpbmcgbWV0aG9kcyBhcmUgdXNlZCB0byBoYW5kbGUgb3ZlcmZsb3dpbmcgbW9kYWxzXG4gICAgLy8gdG9kbyAoZmF0KTogdGhlc2Ugc2hvdWxkIHByb2JhYmx5IGJlIHJlZmFjdG9yZWQgb3V0IG9mIG1vZGFsLmpzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIDtcblxuICAgIF9wcm90by5fYWRqdXN0RGlhbG9nID0gZnVuY3Rpb24gX2FkanVzdERpYWxvZygpIHtcbiAgICAgIHZhciBpc01vZGFsT3ZlcmZsb3dpbmcgPSB0aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cbiAgICAgIGlmICghdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgJiYgaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSB0aGlzLl9zY3JvbGxiYXJXaWR0aCArIFwicHhcIjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2lzQm9keU92ZXJmbG93aW5nICYmICFpc01vZGFsT3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSB0aGlzLl9zY3JvbGxiYXJXaWR0aCArIFwicHhcIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9yZXNldEFkanVzdG1lbnRzID0gZnVuY3Rpb24gX3Jlc2V0QWRqdXN0bWVudHMoKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gJyc7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9ICcnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2NoZWNrU2Nyb2xsYmFyID0gZnVuY3Rpb24gX2NoZWNrU2Nyb2xsYmFyKCkge1xuICAgICAgdmFyIHJlY3QgPSBkb2N1bWVudC5ib2R5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPSByZWN0LmxlZnQgKyByZWN0LnJpZ2h0IDwgd2luZG93LmlubmVyV2lkdGg7XG4gICAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IHRoaXMuX2dldFNjcm9sbGJhcldpZHRoKCk7XG4gICAgfTtcblxuICAgIF9wcm90by5fc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gX3NldFNjcm9sbGJhcigpIHtcbiAgICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgLy8gTm90ZTogRE9NTm9kZS5zdHlsZS5wYWRkaW5nUmlnaHQgcmV0dXJucyB0aGUgYWN0dWFsIHZhbHVlIG9yICcnIGlmIG5vdCBzZXRcbiAgICAgICAgLy8gICB3aGlsZSAkKERPTU5vZGUpLmNzcygncGFkZGluZy1yaWdodCcpIHJldHVybnMgdGhlIGNhbGN1bGF0ZWQgdmFsdWUgb3IgMCBpZiBub3Qgc2V0XG4gICAgICAgIHZhciBmaXhlZENvbnRlbnQgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IkNS5GSVhFRF9DT05URU5UKSk7XG4gICAgICAgIHZhciBzdGlja3lDb250ZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yJDUuU1RJQ0tZX0NPTlRFTlQpKTsgLy8gQWRqdXN0IGZpeGVkIGNvbnRlbnQgcGFkZGluZ1xuXG4gICAgICAgICQoZml4ZWRDb250ZW50KS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgIHZhciBhY3R1YWxQYWRkaW5nID0gZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQ7XG4gICAgICAgICAgdmFyIGNhbGN1bGF0ZWRQYWRkaW5nID0gJChlbGVtZW50KS5jc3MoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgICAkKGVsZW1lbnQpLmRhdGEoJ3BhZGRpbmctcmlnaHQnLCBhY3R1YWxQYWRkaW5nKS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRQYWRkaW5nKSArIF90aGlzOS5fc2Nyb2xsYmFyV2lkdGggKyBcInB4XCIpO1xuICAgICAgICB9KTsgLy8gQWRqdXN0IHN0aWNreSBjb250ZW50IG1hcmdpblxuXG4gICAgICAgICQoc3RpY2t5Q29udGVudCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgYWN0dWFsTWFyZ2luID0gZWxlbWVudC5zdHlsZS5tYXJnaW5SaWdodDtcbiAgICAgICAgICB2YXIgY2FsY3VsYXRlZE1hcmdpbiA9ICQoZWxlbWVudCkuY3NzKCdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgICAkKGVsZW1lbnQpLmRhdGEoJ21hcmdpbi1yaWdodCcsIGFjdHVhbE1hcmdpbikuY3NzKCdtYXJnaW4tcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRNYXJnaW4pIC0gX3RoaXM5Ll9zY3JvbGxiYXJXaWR0aCArIFwicHhcIik7XG4gICAgICAgIH0pOyAvLyBBZGp1c3QgYm9keSBwYWRkaW5nXG5cbiAgICAgICAgdmFyIGFjdHVhbFBhZGRpbmcgPSBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodDtcbiAgICAgICAgdmFyIGNhbGN1bGF0ZWRQYWRkaW5nID0gJChkb2N1bWVudC5ib2R5KS5jc3MoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgJChkb2N1bWVudC5ib2R5KS5kYXRhKCdwYWRkaW5nLXJpZ2h0JywgYWN0dWFsUGFkZGluZykuY3NzKCdwYWRkaW5nLXJpZ2h0JywgcGFyc2VGbG9hdChjYWxjdWxhdGVkUGFkZGluZykgKyB0aGlzLl9zY3JvbGxiYXJXaWR0aCArIFwicHhcIik7XG4gICAgICB9XG5cbiAgICAgICQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoQ2xhc3NOYW1lJDUuT1BFTik7XG4gICAgfTtcblxuICAgIF9wcm90by5fcmVzZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiBfcmVzZXRTY3JvbGxiYXIoKSB7XG4gICAgICAvLyBSZXN0b3JlIGZpeGVkIGNvbnRlbnQgcGFkZGluZ1xuICAgICAgdmFyIGZpeGVkQ29udGVudCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3RvciQ1LkZJWEVEX0NPTlRFTlQpKTtcbiAgICAgICQoZml4ZWRDb250ZW50KS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICB2YXIgcGFkZGluZyA9ICQoZWxlbWVudCkuZGF0YSgncGFkZGluZy1yaWdodCcpO1xuICAgICAgICAkKGVsZW1lbnQpLnJlbW92ZURhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBwYWRkaW5nID8gcGFkZGluZyA6ICcnO1xuICAgICAgfSk7IC8vIFJlc3RvcmUgc3RpY2t5IGNvbnRlbnRcblxuICAgICAgdmFyIGVsZW1lbnRzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiXCIgKyBTZWxlY3RvciQ1LlNUSUNLWV9DT05URU5UKSk7XG4gICAgICAkKGVsZW1lbnRzKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICB2YXIgbWFyZ2luID0gJChlbGVtZW50KS5kYXRhKCdtYXJnaW4tcmlnaHQnKTtcblxuICAgICAgICBpZiAodHlwZW9mIG1hcmdpbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAkKGVsZW1lbnQpLmNzcygnbWFyZ2luLXJpZ2h0JywgbWFyZ2luKS5yZW1vdmVEYXRhKCdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vIFJlc3RvcmUgYm9keSBwYWRkaW5nXG5cbiAgICAgIHZhciBwYWRkaW5nID0gJChkb2N1bWVudC5ib2R5KS5kYXRhKCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAkKGRvY3VtZW50LmJvZHkpLnJlbW92ZURhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGFkZGluZyA/IHBhZGRpbmcgOiAnJztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRTY3JvbGxiYXJXaWR0aCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxiYXJXaWR0aCgpIHtcbiAgICAgIC8vIHRoeCBkLndhbHNoXG4gICAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gQ2xhc3NOYW1lJDUuU0NST0xMQkFSX01FQVNVUkVSO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuICAgICAgdmFyIHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICAgICAgcmV0dXJuIHNjcm9sbGJhcldpZHRoO1xuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgTW9kYWwuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnLCByZWxhdGVkVGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkkNSk7XG5cbiAgICAgICAgdmFyIF9jb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBEZWZhdWx0JDMsICQodGhpcykuZGF0YSgpLCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fSk7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVkkNSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXShyZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgfSBlbHNlIGlmIChfY29uZmlnLnNob3cpIHtcbiAgICAgICAgICBkYXRhLnNob3cocmVsYXRlZFRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoTW9kYWwsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OJDU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdCQzO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBNb2RhbDtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50JDUuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yJDUuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgIHZhciB0YXJnZXQ7XG4gICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICB9XG5cbiAgICB2YXIgY29uZmlnID0gJCh0YXJnZXQpLmRhdGEoREFUQV9LRVkkNSkgPyAndG9nZ2xlJyA6IF9vYmplY3RTcHJlYWQoe30sICQodGFyZ2V0KS5kYXRhKCksICQodGhpcykuZGF0YSgpKTtcblxuICAgIGlmICh0aGlzLnRhZ05hbWUgPT09ICdBJyB8fCB0aGlzLnRhZ05hbWUgPT09ICdBUkVBJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICB2YXIgJHRhcmdldCA9ICQodGFyZ2V0KS5vbmUoRXZlbnQkNS5TSE9XLCBmdW5jdGlvbiAoc2hvd0V2ZW50KSB7XG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIC8vIE9ubHkgcmVnaXN0ZXIgZm9jdXMgcmVzdG9yZXIgaWYgbW9kYWwgd2lsbCBhY3R1YWxseSBnZXQgc2hvd25cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkdGFyZ2V0Lm9uZShFdmVudCQ1LkhJRERFTiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoJChfdGhpczEwKS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgIF90aGlzMTAuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCh0YXJnZXQpLCBjb25maWcsIHRoaXMpO1xuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRSQ1XSA9IE1vZGFsLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRSQ1XS5Db25zdHJ1Y3RvciA9IE1vZGFsO1xuXG4gICQuZm5bTkFNRSQ1XS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRSQ1XSA9IEpRVUVSWV9OT19DT05GTElDVCQ1O1xuICAgIHJldHVybiBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBCb290c3RyYXAgKHY0LjMuMSk6IHRvb2xzL3Nhbml0aXplci5qc1xuICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgdmFyIHVyaUF0dHJzID0gWydiYWNrZ3JvdW5kJywgJ2NpdGUnLCAnaHJlZicsICdpdGVtdHlwZScsICdsb25nZGVzYycsICdwb3N0ZXInLCAnc3JjJywgJ3hsaW5rOmhyZWYnXTtcbiAgdmFyIEFSSUFfQVRUUklCVVRFX1BBVFRFUk4gPSAvXmFyaWEtW1xcdy1dKiQvaTtcbiAgdmFyIERlZmF1bHRXaGl0ZWxpc3QgPSB7XG4gICAgLy8gR2xvYmFsIGF0dHJpYnV0ZXMgYWxsb3dlZCBvbiBhbnkgc3VwcGxpZWQgZWxlbWVudCBiZWxvdy5cbiAgICAnKic6IFsnY2xhc3MnLCAnZGlyJywgJ2lkJywgJ2xhbmcnLCAncm9sZScsIEFSSUFfQVRUUklCVVRFX1BBVFRFUk5dLFxuICAgIGE6IFsndGFyZ2V0JywgJ2hyZWYnLCAndGl0bGUnLCAncmVsJ10sXG4gICAgYXJlYTogW10sXG4gICAgYjogW10sXG4gICAgYnI6IFtdLFxuICAgIGNvbDogW10sXG4gICAgY29kZTogW10sXG4gICAgZGl2OiBbXSxcbiAgICBlbTogW10sXG4gICAgaHI6IFtdLFxuICAgIGgxOiBbXSxcbiAgICBoMjogW10sXG4gICAgaDM6IFtdLFxuICAgIGg0OiBbXSxcbiAgICBoNTogW10sXG4gICAgaDY6IFtdLFxuICAgIGk6IFtdLFxuICAgIGltZzogWydzcmMnLCAnYWx0JywgJ3RpdGxlJywgJ3dpZHRoJywgJ2hlaWdodCddLFxuICAgIGxpOiBbXSxcbiAgICBvbDogW10sXG4gICAgcDogW10sXG4gICAgcHJlOiBbXSxcbiAgICBzOiBbXSxcbiAgICBzbWFsbDogW10sXG4gICAgc3BhbjogW10sXG4gICAgc3ViOiBbXSxcbiAgICBzdXA6IFtdLFxuICAgIHN0cm9uZzogW10sXG4gICAgdTogW10sXG4gICAgdWw6IFtdXG4gICAgLyoqXG4gICAgICogQSBwYXR0ZXJuIHRoYXQgcmVjb2duaXplcyBhIGNvbW1vbmx5IHVzZWZ1bCBzdWJzZXQgb2YgVVJMcyB0aGF0IGFyZSBzYWZlLlxuICAgICAqXG4gICAgICogU2hvdXRvdXQgdG8gQW5ndWxhciA3IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi83LjIuNC9wYWNrYWdlcy9jb3JlL3NyYy9zYW5pdGl6YXRpb24vdXJsX3Nhbml0aXplci50c1xuICAgICAqL1xuXG4gIH07XG4gIHZhciBTQUZFX1VSTF9QQVRURVJOID0gL14oPzooPzpodHRwcz98bWFpbHRvfGZ0cHx0ZWx8ZmlsZSk6fFteJjovPyNdKig/OlsvPyNdfCQpKS9naTtcbiAgLyoqXG4gICAqIEEgcGF0dGVybiB0aGF0IG1hdGNoZXMgc2FmZSBkYXRhIFVSTHMuIE9ubHkgbWF0Y2hlcyBpbWFnZSwgdmlkZW8gYW5kIGF1ZGlvIHR5cGVzLlxuICAgKlxuICAgKiBTaG91dG91dCB0byBBbmd1bGFyIDcgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzcuMi40L3BhY2thZ2VzL2NvcmUvc3JjL3Nhbml0aXphdGlvbi91cmxfc2FuaXRpemVyLnRzXG4gICAqL1xuXG4gIHZhciBEQVRBX1VSTF9QQVRURVJOID0gL15kYXRhOig/OmltYWdlXFwvKD86Ym1wfGdpZnxqcGVnfGpwZ3xwbmd8dGlmZnx3ZWJwKXx2aWRlb1xcLyg/Om1wZWd8bXA0fG9nZ3x3ZWJtKXxhdWRpb1xcLyg/Om1wM3xvZ2F8b2dnfG9wdXMpKTtiYXNlNjQsW2EtejAtOSsvXSs9KiQvaTtcblxuICBmdW5jdGlvbiBhbGxvd2VkQXR0cmlidXRlKGF0dHIsIGFsbG93ZWRBdHRyaWJ1dGVMaXN0KSB7XG4gICAgdmFyIGF0dHJOYW1lID0gYXR0ci5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgaWYgKGFsbG93ZWRBdHRyaWJ1dGVMaXN0LmluZGV4T2YoYXR0ck5hbWUpICE9PSAtMSkge1xuICAgICAgaWYgKHVyaUF0dHJzLmluZGV4T2YoYXR0ck5hbWUpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbihhdHRyLm5vZGVWYWx1ZS5tYXRjaChTQUZFX1VSTF9QQVRURVJOKSB8fCBhdHRyLm5vZGVWYWx1ZS5tYXRjaChEQVRBX1VSTF9QQVRURVJOKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciByZWdFeHAgPSBhbGxvd2VkQXR0cmlidXRlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGF0dHJSZWdleCkge1xuICAgICAgcmV0dXJuIGF0dHJSZWdleCBpbnN0YW5jZW9mIFJlZ0V4cDtcbiAgICB9KTsgLy8gQ2hlY2sgaWYgYSByZWd1bGFyIGV4cHJlc3Npb24gdmFsaWRhdGVzIHRoZSBhdHRyaWJ1dGUuXG5cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHJlZ0V4cC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChhdHRyTmFtZS5tYXRjaChyZWdFeHBbaV0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNhbml0aXplSHRtbCh1bnNhZmVIdG1sLCB3aGl0ZUxpc3QsIHNhbml0aXplRm4pIHtcbiAgICBpZiAodW5zYWZlSHRtbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB1bnNhZmVIdG1sO1xuICAgIH1cblxuICAgIGlmIChzYW5pdGl6ZUZuICYmIHR5cGVvZiBzYW5pdGl6ZUZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2FuaXRpemVGbih1bnNhZmVIdG1sKTtcbiAgICB9XG5cbiAgICB2YXIgZG9tUGFyc2VyID0gbmV3IHdpbmRvdy5ET01QYXJzZXIoKTtcbiAgICB2YXIgY3JlYXRlZERvY3VtZW50ID0gZG9tUGFyc2VyLnBhcnNlRnJvbVN0cmluZyh1bnNhZmVIdG1sLCAndGV4dC9odG1sJyk7XG4gICAgdmFyIHdoaXRlbGlzdEtleXMgPSBPYmplY3Qua2V5cyh3aGl0ZUxpc3QpO1xuICAgIHZhciBlbGVtZW50cyA9IFtdLnNsaWNlLmNhbGwoY3JlYXRlZERvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbCgnKicpKTtcblxuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGksIGxlbikge1xuICAgICAgdmFyIGVsID0gZWxlbWVudHNbaV07XG4gICAgICB2YXIgZWxOYW1lID0gZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgaWYgKHdoaXRlbGlzdEtleXMuaW5kZXhPZihlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSA9PT0gLTEpIHtcbiAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG4gICAgICB9XG5cbiAgICAgIHZhciBhdHRyaWJ1dGVMaXN0ID0gW10uc2xpY2UuY2FsbChlbC5hdHRyaWJ1dGVzKTtcbiAgICAgIHZhciB3aGl0ZWxpc3RlZEF0dHJpYnV0ZXMgPSBbXS5jb25jYXQod2hpdGVMaXN0WycqJ10gfHwgW10sIHdoaXRlTGlzdFtlbE5hbWVdIHx8IFtdKTtcbiAgICAgIGF0dHJpYnV0ZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICBpZiAoIWFsbG93ZWRBdHRyaWJ1dGUoYXR0ciwgd2hpdGVsaXN0ZWRBdHRyaWJ1dGVzKSkge1xuICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShhdHRyLm5vZGVOYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIF9yZXQgPSBfbG9vcChpLCBsZW4pO1xuXG4gICAgICBpZiAoX3JldCA9PT0gXCJjb250aW51ZVwiKSBjb250aW51ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlZERvY3VtZW50LmJvZHkuaW5uZXJIVE1MO1xuICB9XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJDYgPSAndG9vbHRpcCc7XG4gIHZhciBWRVJTSU9OJDYgPSAnNC4zLjEnO1xuICB2YXIgREFUQV9LRVkkNiA9ICdicy50b29sdGlwJztcbiAgdmFyIEVWRU5UX0tFWSQ2ID0gXCIuXCIgKyBEQVRBX0tFWSQ2O1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJDYgPSAkLmZuW05BTUUkNl07XG4gIHZhciBDTEFTU19QUkVGSVggPSAnYnMtdG9vbHRpcCc7XG4gIHZhciBCU0NMU19QUkVGSVhfUkVHRVggPSBuZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIgKyBDTEFTU19QUkVGSVggKyBcIlxcXFxTK1wiLCAnZycpO1xuICB2YXIgRElTQUxMT1dFRF9BVFRSSUJVVEVTID0gWydzYW5pdGl6ZScsICd3aGl0ZUxpc3QnLCAnc2FuaXRpemVGbiddO1xuICB2YXIgRGVmYXVsdFR5cGUkNCA9IHtcbiAgICBhbmltYXRpb246ICdib29sZWFuJyxcbiAgICB0ZW1wbGF0ZTogJ3N0cmluZycsXG4gICAgdGl0bGU6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJyxcbiAgICB0cmlnZ2VyOiAnc3RyaW5nJyxcbiAgICBkZWxheTogJyhudW1iZXJ8b2JqZWN0KScsXG4gICAgaHRtbDogJ2Jvb2xlYW4nLFxuICAgIHNlbGVjdG9yOiAnKHN0cmluZ3xib29sZWFuKScsXG4gICAgcGxhY2VtZW50OiAnKHN0cmluZ3xmdW5jdGlvbiknLFxuICAgIG9mZnNldDogJyhudW1iZXJ8c3RyaW5nfGZ1bmN0aW9uKScsXG4gICAgY29udGFpbmVyOiAnKHN0cmluZ3xlbGVtZW50fGJvb2xlYW4pJyxcbiAgICBmYWxsYmFja1BsYWNlbWVudDogJyhzdHJpbmd8YXJyYXkpJyxcbiAgICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknLFxuICAgIHNhbml0aXplOiAnYm9vbGVhbicsXG4gICAgc2FuaXRpemVGbjogJyhudWxsfGZ1bmN0aW9uKScsXG4gICAgd2hpdGVMaXN0OiAnb2JqZWN0J1xuICB9O1xuICB2YXIgQXR0YWNobWVudE1hcCQxID0ge1xuICAgIEFVVE86ICdhdXRvJyxcbiAgICBUT1A6ICd0b3AnLFxuICAgIFJJR0hUOiAncmlnaHQnLFxuICAgIEJPVFRPTTogJ2JvdHRvbScsXG4gICAgTEVGVDogJ2xlZnQnXG4gIH07XG4gIHZhciBEZWZhdWx0JDQgPSB7XG4gICAgYW5pbWF0aW9uOiB0cnVlLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPicgKyAnPGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+JyArICc8ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PjwvZGl2PicsXG4gICAgdHJpZ2dlcjogJ2hvdmVyIGZvY3VzJyxcbiAgICB0aXRsZTogJycsXG4gICAgZGVsYXk6IDAsXG4gICAgaHRtbDogZmFsc2UsXG4gICAgc2VsZWN0b3I6IGZhbHNlLFxuICAgIHBsYWNlbWVudDogJ3RvcCcsXG4gICAgb2Zmc2V0OiAwLFxuICAgIGNvbnRhaW5lcjogZmFsc2UsXG4gICAgZmFsbGJhY2tQbGFjZW1lbnQ6ICdmbGlwJyxcbiAgICBib3VuZGFyeTogJ3Njcm9sbFBhcmVudCcsXG4gICAgc2FuaXRpemU6IHRydWUsXG4gICAgc2FuaXRpemVGbjogbnVsbCxcbiAgICB3aGl0ZUxpc3Q6IERlZmF1bHRXaGl0ZWxpc3RcbiAgfTtcbiAgdmFyIEhvdmVyU3RhdGUgPSB7XG4gICAgU0hPVzogJ3Nob3cnLFxuICAgIE9VVDogJ291dCdcbiAgfTtcbiAgdmFyIEV2ZW50JDYgPSB7XG4gICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVkkNixcbiAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVkkNixcbiAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSQ2LFxuICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVkkNixcbiAgICBJTlNFUlRFRDogXCJpbnNlcnRlZFwiICsgRVZFTlRfS0VZJDYsXG4gICAgQ0xJQ0s6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSQ2LFxuICAgIEZPQ1VTSU46IFwiZm9jdXNpblwiICsgRVZFTlRfS0VZJDYsXG4gICAgRk9DVVNPVVQ6IFwiZm9jdXNvdXRcIiArIEVWRU5UX0tFWSQ2LFxuICAgIE1PVVNFRU5URVI6IFwibW91c2VlbnRlclwiICsgRVZFTlRfS0VZJDYsXG4gICAgTU9VU0VMRUFWRTogXCJtb3VzZWxlYXZlXCIgKyBFVkVOVF9LRVkkNlxuICB9O1xuICB2YXIgQ2xhc3NOYW1lJDYgPSB7XG4gICAgRkFERTogJ2ZhZGUnLFxuICAgIFNIT1c6ICdzaG93J1xuICB9O1xuICB2YXIgU2VsZWN0b3IkNiA9IHtcbiAgICBUT09MVElQOiAnLnRvb2x0aXAnLFxuICAgIFRPT0xUSVBfSU5ORVI6ICcudG9vbHRpcC1pbm5lcicsXG4gICAgQVJST1c6ICcuYXJyb3cnXG4gIH07XG4gIHZhciBUcmlnZ2VyID0ge1xuICAgIEhPVkVSOiAnaG92ZXInLFxuICAgIEZPQ1VTOiAnZm9jdXMnLFxuICAgIENMSUNLOiAnY2xpY2snLFxuICAgIE1BTlVBTDogJ21hbnVhbCdcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcblxuICB2YXIgVG9vbHRpcCA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRvb2x0aXAoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICAvKipcbiAgICAgICAqIENoZWNrIGZvciBQb3BwZXIgZGVwZW5kZW5jeVxuICAgICAgICogUG9wcGVyIC0gaHR0cHM6Ly9wb3BwZXIuanMub3JnXG4gICAgICAgKi9cbiAgICAgIGlmICh0eXBlb2YgUG9wcGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXBcXCdzIHRvb2x0aXBzIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcvKScpO1xuICAgICAgfSAvLyBwcml2YXRlXG5cblxuICAgICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuX3RpbWVvdXQgPSAwO1xuICAgICAgdGhpcy5faG92ZXJTdGF0ZSA9ICcnO1xuICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlciA9IHt9O1xuICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDsgLy8gUHJvdGVjdGVkXG5cbiAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLmNvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy50aXAgPSBudWxsO1xuXG4gICAgICB0aGlzLl9zZXRMaXN0ZW5lcnMoKTtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IFRvb2x0aXAucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IHRydWU7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBfcHJvdG8udG9nZ2xlRW5hYmxlZCA9IGZ1bmN0aW9uIHRvZ2dsZUVuYWJsZWQoKSB7XG4gICAgICB0aGlzLl9pc0VuYWJsZWQgPSAhdGhpcy5faXNFbmFibGVkO1xuICAgIH07XG5cbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKGV2ZW50KSB7XG4gICAgICBpZiAoIXRoaXMuX2lzRW5hYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICB2YXIgZGF0YUtleSA9IHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7XG4gICAgICAgIHZhciBjb250ZXh0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpO1xuXG4gICAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcbiAgICAgICAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSwgY29udGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrID0gIWNvbnRleHQuX2FjdGl2ZVRyaWdnZXIuY2xpY2s7XG5cbiAgICAgICAgaWYgKGNvbnRleHQuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgICAgIGNvbnRleHQuX2VudGVyKG51bGwsIGNvbnRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuX2xlYXZlKG51bGwsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoJCh0aGlzLmdldFRpcEVsZW1lbnQoKSkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDYuU0hPVykpIHtcbiAgICAgICAgICB0aGlzLl9sZWF2ZShudWxsLCB0aGlzKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2VudGVyKG51bGwsIHRoaXMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZKTtcbiAgICAgICQodGhpcy5lbGVtZW50KS5vZmYodGhpcy5jb25zdHJ1Y3Rvci5FVkVOVF9LRVkpO1xuICAgICAgJCh0aGlzLmVsZW1lbnQpLmNsb3Nlc3QoJy5tb2RhbCcpLm9mZignaGlkZS5icy5tb2RhbCcpO1xuXG4gICAgICBpZiAodGhpcy50aXApIHtcbiAgICAgICAgJCh0aGlzLnRpcCkucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IG51bGw7XG4gICAgICB0aGlzLl90aW1lb3V0ID0gbnVsbDtcbiAgICAgIHRoaXMuX2hvdmVyU3RhdGUgPSBudWxsO1xuICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlciA9IG51bGw7XG5cbiAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDtcbiAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLmNvbmZpZyA9IG51bGw7XG4gICAgICB0aGlzLnRpcCA9IG51bGw7XG4gICAgfTtcblxuICAgIF9wcm90by5zaG93ID0gZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICgkKHRoaXMuZWxlbWVudCkuY3NzKCdkaXNwbGF5JykgPT09ICdub25lJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BsZWFzZSB1c2Ugc2hvdyBvbiB2aXNpYmxlIGVsZW1lbnRzJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzaG93RXZlbnQgPSAkLkV2ZW50KHRoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPVyk7XG5cbiAgICAgIGlmICh0aGlzLmlzV2l0aENvbnRlbnQoKSAmJiB0aGlzLl9pc0VuYWJsZWQpIHtcbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLnRyaWdnZXIoc2hvd0V2ZW50KTtcbiAgICAgICAgdmFyIHNoYWRvd1Jvb3QgPSBVdGlsLmZpbmRTaGFkb3dSb290KHRoaXMuZWxlbWVudCk7XG4gICAgICAgIHZhciBpc0luVGhlRG9tID0gJC5jb250YWlucyhzaGFkb3dSb290ICE9PSBudWxsID8gc2hhZG93Um9vdCA6IHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy5lbGVtZW50KTtcblxuICAgICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8ICFpc0luVGhlRG9tKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgICAgICB2YXIgdGlwSWQgPSBVdGlsLmdldFVJRCh0aGlzLmNvbnN0cnVjdG9yLk5BTUUpO1xuICAgICAgICB0aXAuc2V0QXR0cmlidXRlKCdpZCcsIHRpcElkKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsIHRpcElkKTtcbiAgICAgICAgdGhpcy5zZXRDb250ZW50KCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgICAgICQodGlwKS5hZGRDbGFzcyhDbGFzc05hbWUkNi5GQURFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwbGFjZW1lbnQgPSB0eXBlb2YgdGhpcy5jb25maWcucGxhY2VtZW50ID09PSAnZnVuY3Rpb24nID8gdGhpcy5jb25maWcucGxhY2VtZW50LmNhbGwodGhpcywgdGlwLCB0aGlzLmVsZW1lbnQpIDogdGhpcy5jb25maWcucGxhY2VtZW50O1xuXG4gICAgICAgIHZhciBhdHRhY2htZW50ID0gdGhpcy5fZ2V0QXR0YWNobWVudChwbGFjZW1lbnQpO1xuXG4gICAgICAgIHRoaXMuYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpO1xuXG4gICAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLl9nZXRDb250YWluZXIoKTtcblxuICAgICAgICAkKHRpcCkuZGF0YSh0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLCB0aGlzKTtcblxuICAgICAgICBpZiAoISQuY29udGFpbnModGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLnRpcCkpIHtcbiAgICAgICAgICAkKHRpcCkuYXBwZW5kVG8oY29udGFpbmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQodGhpcy5lbGVtZW50KS50cmlnZ2VyKHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSU5TRVJURUQpO1xuICAgICAgICB0aGlzLl9wb3BwZXIgPSBuZXcgUG9wcGVyKHRoaXMuZWxlbWVudCwgdGlwLCB7XG4gICAgICAgICAgcGxhY2VtZW50OiBhdHRhY2htZW50LFxuICAgICAgICAgIG1vZGlmaWVyczoge1xuICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLl9nZXRPZmZzZXQoKSxcbiAgICAgICAgICAgIGZsaXA6IHtcbiAgICAgICAgICAgICAgYmVoYXZpb3I6IHRoaXMuY29uZmlnLmZhbGxiYWNrUGxhY2VtZW50XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXJyb3c6IHtcbiAgICAgICAgICAgICAgZWxlbWVudDogU2VsZWN0b3IkNi5BUlJPV1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByZXZlbnRPdmVyZmxvdzoge1xuICAgICAgICAgICAgICBib3VuZGFyaWVzRWxlbWVudDogdGhpcy5jb25maWcuYm91bmRhcnlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZShkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5vcmlnaW5hbFBsYWNlbWVudCAhPT0gZGF0YS5wbGFjZW1lbnQpIHtcbiAgICAgICAgICAgICAgX3RoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShkYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAkKHRpcCkuYWRkQ2xhc3MoQ2xhc3NOYW1lJDYuU0hPVyk7IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcbiAgICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcbiAgICAgICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcbiAgICAgICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXG5cbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgICQoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vbignbW91c2VvdmVyJywgbnVsbCwgJC5ub29wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAgIGlmIChfdGhpcy5jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICBfdGhpcy5fZml4VHJhbnNpdGlvbigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBwcmV2SG92ZXJTdGF0ZSA9IF90aGlzLl9ob3ZlclN0YXRlO1xuICAgICAgICAgIF90aGlzLl9ob3ZlclN0YXRlID0gbnVsbDtcbiAgICAgICAgICAkKF90aGlzLmVsZW1lbnQpLnRyaWdnZXIoX3RoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPV04pO1xuXG4gICAgICAgICAgaWYgKHByZXZIb3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLk9VVCkge1xuICAgICAgICAgICAgX3RoaXMuX2xlYXZlKG51bGwsIF90aGlzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCQodGhpcy50aXApLmhhc0NsYXNzKENsYXNzTmFtZSQ2LkZBREUpKSB7XG4gICAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy50aXApO1xuICAgICAgICAgICQodGhpcy50aXApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZShjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcbiAgICAgIHZhciBoaWRlRXZlbnQgPSAkLkV2ZW50KHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSElERSk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICBpZiAoX3RoaXMyLl9ob3ZlclN0YXRlICE9PSBIb3ZlclN0YXRlLlNIT1cgJiYgdGlwLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICB0aXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aXApO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLl9jbGVhblRpcENsYXNzKCk7XG5cbiAgICAgICAgX3RoaXMyLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5Jyk7XG5cbiAgICAgICAgJChfdGhpczIuZWxlbWVudCkudHJpZ2dlcihfdGhpczIuY29uc3RydWN0b3IuRXZlbnQuSElEREVOKTtcblxuICAgICAgICBpZiAoX3RoaXMyLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgICBfdGhpczIuX3BvcHBlci5kZXN0cm95KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAkKHRoaXMuZWxlbWVudCkudHJpZ2dlcihoaWRlRXZlbnQpO1xuXG4gICAgICBpZiAoaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJCh0aXApLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQ2LlNIT1cpOyAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB3ZSBhZGRlZCBmb3IgaU9TIHN1cHBvcnRcblxuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAkKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub2ZmKCdtb3VzZW92ZXInLCBudWxsLCAkLm5vb3ApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RyaWdnZXIuQ0xJQ0tdID0gZmFsc2U7XG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RyaWdnZXIuRk9DVVNdID0gZmFsc2U7XG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RyaWdnZXIuSE9WRVJdID0gZmFsc2U7XG5cbiAgICAgIGlmICgkKHRoaXMudGlwKS5oYXNDbGFzcyhDbGFzc05hbWUkNi5GQURFKSkge1xuICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aXApO1xuICAgICAgICAkKHRpcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faG92ZXJTdGF0ZSA9ICcnO1xuICAgIH07XG5cbiAgICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgIH1cbiAgICB9IC8vIFByb3RlY3RlZFxuICAgIDtcblxuICAgIF9wcm90by5pc1dpdGhDb250ZW50ID0gZnVuY3Rpb24gaXNXaXRoQ29udGVudCgpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuZ2V0VGl0bGUoKSk7XG4gICAgfTtcblxuICAgIF9wcm90by5hZGRBdHRhY2htZW50Q2xhc3MgPSBmdW5jdGlvbiBhZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCkge1xuICAgICAgJCh0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoQ0xBU1NfUFJFRklYICsgXCItXCIgKyBhdHRhY2htZW50KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmdldFRpcEVsZW1lbnQgPSBmdW5jdGlvbiBnZXRUaXBFbGVtZW50KCkge1xuICAgICAgdGhpcy50aXAgPSB0aGlzLnRpcCB8fCAkKHRoaXMuY29uZmlnLnRlbXBsYXRlKVswXTtcbiAgICAgIHJldHVybiB0aGlzLnRpcDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNldENvbnRlbnQgPSBmdW5jdGlvbiBzZXRDb250ZW50KCkge1xuICAgICAgdmFyIHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCgkKHRpcC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yJDYuVE9PTFRJUF9JTk5FUikpLCB0aGlzLmdldFRpdGxlKCkpO1xuICAgICAgJCh0aXApLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQ2LkZBREUgKyBcIiBcIiArIENsYXNzTmFtZSQ2LlNIT1cpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2V0RWxlbWVudENvbnRlbnQgPSBmdW5jdGlvbiBzZXRFbGVtZW50Q29udGVudCgkZWxlbWVudCwgY29udGVudCkge1xuICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnb2JqZWN0JyAmJiAoY29udGVudC5ub2RlVHlwZSB8fCBjb250ZW50LmpxdWVyeSkpIHtcbiAgICAgICAgLy8gQ29udGVudCBpcyBhIERPTSBub2RlIG9yIGEgalF1ZXJ5XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5odG1sKSB7XG4gICAgICAgICAgaWYgKCEkKGNvbnRlbnQpLnBhcmVudCgpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgICAgJGVsZW1lbnQuZW1wdHkoKS5hcHBlbmQoY29udGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRlbGVtZW50LnRleHQoJChjb250ZW50KS50ZXh0KCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jb25maWcuaHRtbCkge1xuICAgICAgICBpZiAodGhpcy5jb25maWcuc2FuaXRpemUpIHtcbiAgICAgICAgICBjb250ZW50ID0gc2FuaXRpemVIdG1sKGNvbnRlbnQsIHRoaXMuY29uZmlnLndoaXRlTGlzdCwgdGhpcy5jb25maWcuc2FuaXRpemVGbik7XG4gICAgICAgIH1cblxuICAgICAgICAkZWxlbWVudC5odG1sKGNvbnRlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGVsZW1lbnQudGV4dChjb250ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmdldFRpdGxlID0gZnVuY3Rpb24gZ2V0VGl0bGUoKSB7XG4gICAgICB2YXIgdGl0bGUgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJyk7XG5cbiAgICAgIGlmICghdGl0bGUpIHtcbiAgICAgICAgdGl0bGUgPSB0eXBlb2YgdGhpcy5jb25maWcudGl0bGUgPT09ICdmdW5jdGlvbicgPyB0aGlzLmNvbmZpZy50aXRsZS5jYWxsKHRoaXMuZWxlbWVudCkgOiB0aGlzLmNvbmZpZy50aXRsZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRpdGxlO1xuICAgIH0gLy8gUHJpdmF0ZVxuICAgIDtcblxuICAgIF9wcm90by5fZ2V0T2Zmc2V0ID0gZnVuY3Rpb24gX2dldE9mZnNldCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgb2Zmc2V0ID0ge307XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5jb25maWcub2Zmc2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9mZnNldC5mbiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgZGF0YS5vZmZzZXRzID0gX29iamVjdFNwcmVhZCh7fSwgZGF0YS5vZmZzZXRzLCBfdGhpczMuY29uZmlnLm9mZnNldChkYXRhLm9mZnNldHMsIF90aGlzMy5lbGVtZW50KSB8fCB7fSk7XG4gICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvZmZzZXQub2Zmc2V0ID0gdGhpcy5jb25maWcub2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldENvbnRhaW5lciA9IGZ1bmN0aW9uIF9nZXRDb250YWluZXIoKSB7XG4gICAgICBpZiAodGhpcy5jb25maWcuY29udGFpbmVyID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgICAgIH1cblxuICAgICAgaWYgKFV0aWwuaXNFbGVtZW50KHRoaXMuY29uZmlnLmNvbnRhaW5lcikpIHtcbiAgICAgICAgcmV0dXJuICQodGhpcy5jb25maWcuY29udGFpbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICQoZG9jdW1lbnQpLmZpbmQodGhpcy5jb25maWcuY29udGFpbmVyKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRBdHRhY2htZW50ID0gZnVuY3Rpb24gX2dldEF0dGFjaG1lbnQocGxhY2VtZW50KSB7XG4gICAgICByZXR1cm4gQXR0YWNobWVudE1hcCQxW3BsYWNlbWVudC50b1VwcGVyQ2FzZSgpXTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfc2V0TGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciB0cmlnZ2VycyA9IHRoaXMuY29uZmlnLnRyaWdnZXIuc3BsaXQoJyAnKTtcbiAgICAgIHRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHtcbiAgICAgICAgaWYgKHRyaWdnZXIgPT09ICdjbGljaycpIHtcbiAgICAgICAgICAkKF90aGlzNC5lbGVtZW50KS5vbihfdGhpczQuY29uc3RydWN0b3IuRXZlbnQuQ0xJQ0ssIF90aGlzNC5jb25maWcuc2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzNC50b2dnbGUoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRyaWdnZXIgIT09IFRyaWdnZXIuTUFOVUFMKSB7XG4gICAgICAgICAgdmFyIGV2ZW50SW4gPSB0cmlnZ2VyID09PSBUcmlnZ2VyLkhPVkVSID8gX3RoaXM0LmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFRU5URVIgOiBfdGhpczQuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNJTjtcbiAgICAgICAgICB2YXIgZXZlbnRPdXQgPSB0cmlnZ2VyID09PSBUcmlnZ2VyLkhPVkVSID8gX3RoaXM0LmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFTEVBVkUgOiBfdGhpczQuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNPVVQ7XG4gICAgICAgICAgJChfdGhpczQuZWxlbWVudCkub24oZXZlbnRJbiwgX3RoaXM0LmNvbmZpZy5zZWxlY3RvciwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM0Ll9lbnRlcihldmVudCk7XG4gICAgICAgICAgfSkub24oZXZlbnRPdXQsIF90aGlzNC5jb25maWcuc2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzNC5fbGVhdmUoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgICQodGhpcy5lbGVtZW50KS5jbG9zZXN0KCcubW9kYWwnKS5vbignaGlkZS5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzNC5lbGVtZW50KSB7XG4gICAgICAgICAgX3RoaXM0LmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLmNvbmZpZy5zZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIHRoaXMuY29uZmlnLCB7XG4gICAgICAgICAgdHJpZ2dlcjogJ21hbnVhbCcsXG4gICAgICAgICAgc2VsZWN0b3I6ICcnXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZml4VGl0bGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9maXhUaXRsZSA9IGZ1bmN0aW9uIF9maXhUaXRsZSgpIHtcbiAgICAgIHZhciB0aXRsZVR5cGUgPSB0eXBlb2YgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScpO1xuXG4gICAgICBpZiAodGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgndGl0bGUnKSB8fCB0aXRsZVR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnLCB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8ICcnKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgndGl0bGUnLCAnJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fZW50ZXIgPSBmdW5jdGlvbiBfZW50ZXIoZXZlbnQsIGNvbnRleHQpIHtcbiAgICAgIHZhciBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KTtcblxuICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcbiAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltldmVudC50eXBlID09PSAnZm9jdXNpbicgPyBUcmlnZ2VyLkZPQ1VTIDogVHJpZ2dlci5IT1ZFUl0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoJChjb250ZXh0LmdldFRpcEVsZW1lbnQoKSkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDYuU0hPVykgfHwgY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5TSE9XKSB7XG4gICAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIb3ZlclN0YXRlLlNIT1c7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpO1xuICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhvdmVyU3RhdGUuU0hPVztcblxuICAgICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuc2hvdykge1xuICAgICAgICBjb250ZXh0LnNob3coKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Ll90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLlNIT1cpIHtcbiAgICAgICAgICBjb250ZXh0LnNob3coKTtcbiAgICAgICAgfVxuICAgICAgfSwgY29udGV4dC5jb25maWcuZGVsYXkuc2hvdyk7XG4gICAgfTtcblxuICAgIF9wcm90by5fbGVhdmUgPSBmdW5jdGlvbiBfbGVhdmUoZXZlbnQsIGNvbnRleHQpIHtcbiAgICAgIHZhciBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KTtcblxuICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcbiAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltldmVudC50eXBlID09PSAnZm9jdXNvdXQnID8gVHJpZ2dlci5GT0NVUyA6IFRyaWdnZXIuSE9WRVJdID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb250ZXh0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjbGVhclRpbWVvdXQoY29udGV4dC5fdGltZW91dCk7XG4gICAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSG92ZXJTdGF0ZS5PVVQ7XG5cbiAgICAgIGlmICghY29udGV4dC5jb25maWcuZGVsYXkgfHwgIWNvbnRleHQuY29uZmlnLmRlbGF5LmhpZGUpIHtcbiAgICAgICAgY29udGV4dC5oaWRlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5PVVQpIHtcbiAgICAgICAgICBjb250ZXh0LmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSk7XG4gICAgfTtcblxuICAgIF9wcm90by5faXNXaXRoQWN0aXZlVHJpZ2dlciA9IGZ1bmN0aW9uIF9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkge1xuICAgICAgZm9yICh2YXIgdHJpZ2dlciBpbiB0aGlzLl9hY3RpdmVUcmlnZ2VyKSB7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVUcmlnZ2VyW3RyaWdnZXJdKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICB2YXIgZGF0YUF0dHJpYnV0ZXMgPSAkKHRoaXMuZWxlbWVudCkuZGF0YSgpO1xuICAgICAgT2JqZWN0LmtleXMoZGF0YUF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGRhdGFBdHRyKSB7XG4gICAgICAgIGlmIChESVNBTExPV0VEX0FUVFJJQlVURVMuaW5kZXhPZihkYXRhQXR0cikgIT09IC0xKSB7XG4gICAgICAgICAgZGVsZXRlIGRhdGFBdHRyaWJ1dGVzW2RhdGFBdHRyXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsIGRhdGFBdHRyaWJ1dGVzLCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fSk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnLmRlbGF5ID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25maWcuZGVsYXkgPSB7XG4gICAgICAgICAgc2hvdzogY29uZmlnLmRlbGF5LFxuICAgICAgICAgIGhpZGU6IGNvbmZpZy5kZWxheVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZy50aXRsZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uZmlnLnRpdGxlID0gY29uZmlnLnRpdGxlLnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnLmNvbnRlbnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmZpZy5jb250ZW50ID0gY29uZmlnLmNvbnRlbnQudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSQ2LCBjb25maWcsIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpO1xuXG4gICAgICBpZiAoY29uZmlnLnNhbml0aXplKSB7XG4gICAgICAgIGNvbmZpZy50ZW1wbGF0ZSA9IHNhbml0aXplSHRtbChjb25maWcudGVtcGxhdGUsIGNvbmZpZy53aGl0ZUxpc3QsIGNvbmZpZy5zYW5pdGl6ZUZuKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXREZWxlZ2F0ZUNvbmZpZyA9IGZ1bmN0aW9uIF9nZXREZWxlZ2F0ZUNvbmZpZygpIHtcbiAgICAgIHZhciBjb25maWcgPSB7fTtcblxuICAgICAgaWYgKHRoaXMuY29uZmlnKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmNvbmZpZykge1xuICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRba2V5XSAhPT0gdGhpcy5jb25maWdba2V5XSkge1xuICAgICAgICAgICAgY29uZmlnW2tleV0gPSB0aGlzLmNvbmZpZ1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2NsZWFuVGlwQ2xhc3MgPSBmdW5jdGlvbiBfY2xlYW5UaXBDbGFzcygpIHtcbiAgICAgIHZhciAkdGlwID0gJCh0aGlzLmdldFRpcEVsZW1lbnQoKSk7XG4gICAgICB2YXIgdGFiQ2xhc3MgPSAkdGlwLmF0dHIoJ2NsYXNzJykubWF0Y2goQlNDTFNfUFJFRklYX1JFR0VYKTtcblxuICAgICAgaWYgKHRhYkNsYXNzICE9PSBudWxsICYmIHRhYkNsYXNzLmxlbmd0aCkge1xuICAgICAgICAkdGlwLnJlbW92ZUNsYXNzKHRhYkNsYXNzLmpvaW4oJycpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UgPSBmdW5jdGlvbiBfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKHBvcHBlckRhdGEpIHtcbiAgICAgIHZhciBwb3BwZXJJbnN0YW5jZSA9IHBvcHBlckRhdGEuaW5zdGFuY2U7XG4gICAgICB0aGlzLnRpcCA9IHBvcHBlckluc3RhbmNlLnBvcHBlcjtcblxuICAgICAgdGhpcy5fY2xlYW5UaXBDbGFzcygpO1xuXG4gICAgICB0aGlzLmFkZEF0dGFjaG1lbnRDbGFzcyh0aGlzLl9nZXRBdHRhY2htZW50KHBvcHBlckRhdGEucGxhY2VtZW50KSk7XG4gICAgfTtcblxuICAgIF9wcm90by5fZml4VHJhbnNpdGlvbiA9IGZ1bmN0aW9uIF9maXhUcmFuc2l0aW9uKCkge1xuICAgICAgdmFyIHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgICAgdmFyIGluaXRDb25maWdBbmltYXRpb24gPSB0aGlzLmNvbmZpZy5hbmltYXRpb247XG5cbiAgICAgIGlmICh0aXAuZ2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcpICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJCh0aXApLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQ2LkZBREUpO1xuICAgICAgdGhpcy5jb25maWcuYW5pbWF0aW9uID0gZmFsc2U7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgdGhpcy5jb25maWcuYW5pbWF0aW9uID0gaW5pdENvbmZpZ0FuaW1hdGlvbjtcbiAgICB9IC8vIFN0YXRpY1xuICAgIDtcblxuICAgIFRvb2x0aXAuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkkNik7XG5cbiAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWc7XG5cbiAgICAgICAgaWYgKCFkYXRhICYmIC9kaXNwb3NlfGhpZGUvLnRlc3QoY29uZmlnKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgVG9vbHRpcCh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVkkNiwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKFRvb2x0aXAsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OJDY7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdCQ0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJOQU1FXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIE5BTUUkNjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiREFUQV9LRVlcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gREFUQV9LRVkkNjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRXZlbnRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRXZlbnQkNjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRVZFTlRfS0VZXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIEVWRU5UX0tFWSQ2O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0VHlwZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0VHlwZSQ0O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBUb29sdGlwO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQuZm5bTkFNRSQ2XSA9IFRvb2x0aXAuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FJDZdLkNvbnN0cnVjdG9yID0gVG9vbHRpcDtcblxuICAkLmZuW05BTUUkNl0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUUkNl0gPSBKUVVFUllfTk9fQ09ORkxJQ1QkNjtcbiAgICByZXR1cm4gVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSQ3ID0gJ3BvcG92ZXInO1xuICB2YXIgVkVSU0lPTiQ3ID0gJzQuMy4xJztcbiAgdmFyIERBVEFfS0VZJDcgPSAnYnMucG9wb3Zlcic7XG4gIHZhciBFVkVOVF9LRVkkNyA9IFwiLlwiICsgREFUQV9LRVkkNztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCQ3ID0gJC5mbltOQU1FJDddO1xuICB2YXIgQ0xBU1NfUFJFRklYJDEgPSAnYnMtcG9wb3Zlcic7XG4gIHZhciBCU0NMU19QUkVGSVhfUkVHRVgkMSA9IG5ldyBSZWdFeHAoXCIoXnxcXFxccylcIiArIENMQVNTX1BSRUZJWCQxICsgXCJcXFxcUytcIiwgJ2cnKTtcblxuICB2YXIgRGVmYXVsdCQ1ID0gX29iamVjdFNwcmVhZCh7fSwgVG9vbHRpcC5EZWZhdWx0LCB7XG4gICAgcGxhY2VtZW50OiAncmlnaHQnLFxuICAgIHRyaWdnZXI6ICdjbGljaycsXG4gICAgY29udGVudDogJycsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwicG9wb3ZlclwiIHJvbGU9XCJ0b29sdGlwXCI+JyArICc8ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj4nICsgJzxoMyBjbGFzcz1cInBvcG92ZXItaGVhZGVyXCI+PC9oMz4nICsgJzxkaXYgY2xhc3M9XCJwb3BvdmVyLWJvZHlcIj48L2Rpdj48L2Rpdj4nXG4gIH0pO1xuXG4gIHZhciBEZWZhdWx0VHlwZSQ1ID0gX29iamVjdFNwcmVhZCh7fSwgVG9vbHRpcC5EZWZhdWx0VHlwZSwge1xuICAgIGNvbnRlbnQ6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJ1xuICB9KTtcblxuICB2YXIgQ2xhc3NOYW1lJDcgPSB7XG4gICAgRkFERTogJ2ZhZGUnLFxuICAgIFNIT1c6ICdzaG93J1xuICB9O1xuICB2YXIgU2VsZWN0b3IkNyA9IHtcbiAgICBUSVRMRTogJy5wb3BvdmVyLWhlYWRlcicsXG4gICAgQ09OVEVOVDogJy5wb3BvdmVyLWJvZHknXG4gIH07XG4gIHZhciBFdmVudCQ3ID0ge1xuICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZJDcsXG4gICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZJDcsXG4gICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVkkNyxcbiAgICBTSE9XTjogXCJzaG93blwiICsgRVZFTlRfS0VZJDcsXG4gICAgSU5TRVJURUQ6IFwiaW5zZXJ0ZWRcIiArIEVWRU5UX0tFWSQ3LFxuICAgIENMSUNLOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkkNyxcbiAgICBGT0NVU0lOOiBcImZvY3VzaW5cIiArIEVWRU5UX0tFWSQ3LFxuICAgIEZPQ1VTT1VUOiBcImZvY3Vzb3V0XCIgKyBFVkVOVF9LRVkkNyxcbiAgICBNT1VTRUVOVEVSOiBcIm1vdXNlZW50ZXJcIiArIEVWRU5UX0tFWSQ3LFxuICAgIE1PVVNFTEVBVkU6IFwibW91c2VsZWF2ZVwiICsgRVZFTlRfS0VZJDdcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcblxuICB2YXIgUG9wb3ZlciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Ub29sdGlwKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUG9wb3ZlciwgX1Rvb2x0aXApO1xuXG4gICAgZnVuY3Rpb24gUG9wb3ZlcigpIHtcbiAgICAgIHJldHVybiBfVG9vbHRpcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFBvcG92ZXIucHJvdG90eXBlO1xuXG4gICAgLy8gT3ZlcnJpZGVzXG4gICAgX3Byb3RvLmlzV2l0aENvbnRlbnQgPSBmdW5jdGlvbiBpc1dpdGhDb250ZW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLl9nZXRDb250ZW50KCk7XG4gICAgfTtcblxuICAgIF9wcm90by5hZGRBdHRhY2htZW50Q2xhc3MgPSBmdW5jdGlvbiBhZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCkge1xuICAgICAgJCh0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoQ0xBU1NfUFJFRklYJDEgKyBcIi1cIiArIGF0dGFjaG1lbnQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZ2V0VGlwRWxlbWVudCA9IGZ1bmN0aW9uIGdldFRpcEVsZW1lbnQoKSB7XG4gICAgICB0aGlzLnRpcCA9IHRoaXMudGlwIHx8ICQodGhpcy5jb25maWcudGVtcGxhdGUpWzBdO1xuICAgICAgcmV0dXJuIHRoaXMudGlwO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2V0Q29udGVudCA9IGZ1bmN0aW9uIHNldENvbnRlbnQoKSB7XG4gICAgICB2YXIgJHRpcCA9ICQodGhpcy5nZXRUaXBFbGVtZW50KCkpOyAvLyBXZSB1c2UgYXBwZW5kIGZvciBodG1sIG9iamVjdHMgdG8gbWFpbnRhaW4ganMgZXZlbnRzXG5cbiAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJHRpcC5maW5kKFNlbGVjdG9yJDcuVElUTEUpLCB0aGlzLmdldFRpdGxlKCkpO1xuXG4gICAgICB2YXIgY29udGVudCA9IHRoaXMuX2dldENvbnRlbnQoKTtcblxuICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LmNhbGwodGhpcy5lbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCgkdGlwLmZpbmQoU2VsZWN0b3IkNy5DT05URU5UKSwgY29udGVudCk7XG4gICAgICAkdGlwLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQ3LkZBREUgKyBcIiBcIiArIENsYXNzTmFtZSQ3LlNIT1cpO1xuICAgIH0gLy8gUHJpdmF0ZVxuICAgIDtcblxuICAgIF9wcm90by5fZ2V0Q29udGVudCA9IGZ1bmN0aW9uIF9nZXRDb250ZW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29udGVudCcpIHx8IHRoaXMuY29uZmlnLmNvbnRlbnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2xlYW5UaXBDbGFzcyA9IGZ1bmN0aW9uIF9jbGVhblRpcENsYXNzKCkge1xuICAgICAgdmFyICR0aXAgPSAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcbiAgICAgIHZhciB0YWJDbGFzcyA9ICR0aXAuYXR0cignY2xhc3MnKS5tYXRjaChCU0NMU19QUkVGSVhfUkVHRVgkMSk7XG5cbiAgICAgIGlmICh0YWJDbGFzcyAhPT0gbnVsbCAmJiB0YWJDbGFzcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICR0aXAucmVtb3ZlQ2xhc3ModGFiQ2xhc3Muam9pbignJykpO1xuICAgICAgfVxuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgUG9wb3Zlci5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSQ3KTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDogbnVsbDtcblxuICAgICAgICBpZiAoIWRhdGEgJiYgL2Rpc3Bvc2V8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBQb3BvdmVyKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSQ3LCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoUG9wb3ZlciwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICAvLyBHZXR0ZXJzXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kNztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIk5BTUVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gTkFNRSQ3O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEQVRBX0tFWVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEQVRBX0tFWSQ3O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJFdmVudFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBFdmVudCQ3O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJFVkVOVF9LRVlcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRVZFTlRfS0VZJDc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlJDU7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFBvcG92ZXI7XG4gIH0oVG9vbHRpcCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQuZm5bTkFNRSQ3XSA9IFBvcG92ZXIuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FJDddLkNvbnN0cnVjdG9yID0gUG9wb3ZlcjtcblxuICAkLmZuW05BTUUkN10ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUUkN10gPSBKUVVFUllfTk9fQ09ORkxJQ1QkNztcbiAgICByZXR1cm4gUG9wb3Zlci5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSQ4ID0gJ3Njcm9sbHNweSc7XG4gIHZhciBWRVJTSU9OJDggPSAnNC4zLjEnO1xuICB2YXIgREFUQV9LRVkkOCA9ICdicy5zY3JvbGxzcHknO1xuICB2YXIgRVZFTlRfS0VZJDggPSBcIi5cIiArIERBVEFfS0VZJDg7XG4gIHZhciBEQVRBX0FQSV9LRVkkNiA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJDggPSAkLmZuW05BTUUkOF07XG4gIHZhciBEZWZhdWx0JDYgPSB7XG4gICAgb2Zmc2V0OiAxMCxcbiAgICBtZXRob2Q6ICdhdXRvJyxcbiAgICB0YXJnZXQ6ICcnXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSQ2ID0ge1xuICAgIG9mZnNldDogJ251bWJlcicsXG4gICAgbWV0aG9kOiAnc3RyaW5nJyxcbiAgICB0YXJnZXQ6ICcoc3RyaW5nfGVsZW1lbnQpJ1xuICB9O1xuICB2YXIgRXZlbnQkOCA9IHtcbiAgICBBQ1RJVkFURTogXCJhY3RpdmF0ZVwiICsgRVZFTlRfS0VZJDgsXG4gICAgU0NST0xMOiBcInNjcm9sbFwiICsgRVZFTlRfS0VZJDgsXG4gICAgTE9BRF9EQVRBX0FQSTogXCJsb2FkXCIgKyBFVkVOVF9LRVkkOCArIERBVEFfQVBJX0tFWSQ2XG4gIH07XG4gIHZhciBDbGFzc05hbWUkOCA9IHtcbiAgICBEUk9QRE9XTl9JVEVNOiAnZHJvcGRvd24taXRlbScsXG4gICAgRFJPUERPV05fTUVOVTogJ2Ryb3Bkb3duLW1lbnUnLFxuICAgIEFDVElWRTogJ2FjdGl2ZSdcbiAgfTtcbiAgdmFyIFNlbGVjdG9yJDggPSB7XG4gICAgREFUQV9TUFk6ICdbZGF0YS1zcHk9XCJzY3JvbGxcIl0nLFxuICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgIE5BVl9MSVNUX0dST1VQOiAnLm5hdiwgLmxpc3QtZ3JvdXAnLFxuICAgIE5BVl9MSU5LUzogJy5uYXYtbGluaycsXG4gICAgTkFWX0lURU1TOiAnLm5hdi1pdGVtJyxcbiAgICBMSVNUX0lURU1TOiAnLmxpc3QtZ3JvdXAtaXRlbScsXG4gICAgRFJPUERPV046ICcuZHJvcGRvd24nLFxuICAgIERST1BET1dOX0lURU1TOiAnLmRyb3Bkb3duLWl0ZW0nLFxuICAgIERST1BET1dOX1RPR0dMRTogJy5kcm9wZG93bi10b2dnbGUnXG4gIH07XG4gIHZhciBPZmZzZXRNZXRob2QgPSB7XG4gICAgT0ZGU0VUOiAnb2Zmc2V0JyxcbiAgICBQT1NJVElPTjogJ3Bvc2l0aW9uJ1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBTY3JvbGxTcHkgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY3JvbGxTcHkoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX3Njcm9sbEVsZW1lbnQgPSBlbGVtZW50LnRhZ05hbWUgPT09ICdCT0RZJyA/IHdpbmRvdyA6IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX3NlbGVjdG9yID0gdGhpcy5fY29uZmlnLnRhcmdldCArIFwiIFwiICsgU2VsZWN0b3IkOC5OQVZfTElOS1MgKyBcIixcIiArICh0aGlzLl9jb25maWcudGFyZ2V0ICsgXCIgXCIgKyBTZWxlY3RvciQ4LkxJU1RfSVRFTVMgKyBcIixcIikgKyAodGhpcy5fY29uZmlnLnRhcmdldCArIFwiIFwiICsgU2VsZWN0b3IkOC5EUk9QRE9XTl9JVEVNUyk7XG4gICAgICB0aGlzLl9vZmZzZXRzID0gW107XG4gICAgICB0aGlzLl90YXJnZXRzID0gW107XG4gICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsO1xuICAgICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gMDtcbiAgICAgICQodGhpcy5fc2Nyb2xsRWxlbWVudCkub24oRXZlbnQkOC5TQ1JPTEwsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuX3Byb2Nlc3MoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnJlZnJlc2goKTtcblxuICAgICAgdGhpcy5fcHJvY2VzcygpO1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gU2Nyb2xsU3B5LnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by5yZWZyZXNoID0gZnVuY3Rpb24gcmVmcmVzaCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgYXV0b01ldGhvZCA9IHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHRoaXMuX3Njcm9sbEVsZW1lbnQud2luZG93ID8gT2Zmc2V0TWV0aG9kLk9GRlNFVCA6IE9mZnNldE1ldGhvZC5QT1NJVElPTjtcbiAgICAgIHZhciBvZmZzZXRNZXRob2QgPSB0aGlzLl9jb25maWcubWV0aG9kID09PSAnYXV0bycgPyBhdXRvTWV0aG9kIDogdGhpcy5fY29uZmlnLm1ldGhvZDtcbiAgICAgIHZhciBvZmZzZXRCYXNlID0gb2Zmc2V0TWV0aG9kID09PSBPZmZzZXRNZXRob2QuUE9TSVRJT04gPyB0aGlzLl9nZXRTY3JvbGxUb3AoKSA6IDA7XG4gICAgICB0aGlzLl9vZmZzZXRzID0gW107XG4gICAgICB0aGlzLl90YXJnZXRzID0gW107XG4gICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcbiAgICAgIHZhciB0YXJnZXRzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX3NlbGVjdG9yKSk7XG4gICAgICB0YXJnZXRzLm1hcChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICB2YXIgdGFyZ2V0O1xuICAgICAgICB2YXIgdGFyZ2V0U2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHRhcmdldFNlbGVjdG9yKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRTZWxlY3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgdmFyIHRhcmdldEJDUiA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgIGlmICh0YXJnZXRCQ1Iud2lkdGggfHwgdGFyZ2V0QkNSLmhlaWdodCkge1xuICAgICAgICAgICAgLy8gVE9ETyAoZmF0KTogcmVtb3ZlIHNrZXRjaCByZWxpYW5jZSBvbiBqUXVlcnkgcG9zaXRpb24vb2Zmc2V0XG4gICAgICAgICAgICByZXR1cm4gWyQodGFyZ2V0KVtvZmZzZXRNZXRob2RdKCkudG9wICsgb2Zmc2V0QmFzZSwgdGFyZ2V0U2VsZWN0b3JdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYVswXSAtIGJbMF07XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIF90aGlzMi5fb2Zmc2V0cy5wdXNoKGl0ZW1bMF0pO1xuXG4gICAgICAgIF90aGlzMi5fdGFyZ2V0cy5wdXNoKGl0ZW1bMV0pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSQ4KTtcbiAgICAgICQodGhpcy5fc2Nyb2xsRWxlbWVudCkub2ZmKEVWRU5UX0tFWSQ4KTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fc2VsZWN0b3IgPSBudWxsO1xuICAgICAgdGhpcy5fb2Zmc2V0cyA9IG51bGw7XG4gICAgICB0aGlzLl90YXJnZXRzID0gbnVsbDtcbiAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG4gICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSBudWxsO1xuICAgIH0gLy8gUHJpdmF0ZVxuICAgIDtcblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQkNiwgdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZy50YXJnZXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBpZCA9ICQoY29uZmlnLnRhcmdldCkuYXR0cignaWQnKTtcblxuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgaWQgPSBVdGlsLmdldFVJRChOQU1FJDgpO1xuICAgICAgICAgICQoY29uZmlnLnRhcmdldCkuYXR0cignaWQnLCBpZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWcudGFyZ2V0ID0gXCIjXCIgKyBpZDtcbiAgICAgIH1cblxuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSQ4LCBjb25maWcsIERlZmF1bHRUeXBlJDYpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRTY3JvbGxUb3AgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsVG9wKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHdpbmRvdyA/IHRoaXMuX3Njcm9sbEVsZW1lbnQucGFnZVlPZmZzZXQgOiB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbFRvcDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRTY3JvbGxIZWlnaHQgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsSGVpZ2h0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IHx8IE1hdGgubWF4KGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0LCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRPZmZzZXRIZWlnaHQgPSBmdW5jdGlvbiBfZ2V0T2Zmc2V0SGVpZ2h0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHdpbmRvdyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IHRoaXMuX3Njcm9sbEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3Byb2Nlc3MgPSBmdW5jdGlvbiBfcHJvY2VzcygpIHtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLl9nZXRTY3JvbGxUb3AoKSArIHRoaXMuX2NvbmZpZy5vZmZzZXQ7XG5cbiAgICAgIHZhciBzY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcblxuICAgICAgdmFyIG1heFNjcm9sbCA9IHRoaXMuX2NvbmZpZy5vZmZzZXQgKyBzY3JvbGxIZWlnaHQgLSB0aGlzLl9nZXRPZmZzZXRIZWlnaHQoKTtcblxuICAgICAgaWYgKHRoaXMuX3Njcm9sbEhlaWdodCAhPT0gc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2Nyb2xsVG9wID49IG1heFNjcm9sbCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5fdGFyZ2V0c1t0aGlzLl90YXJnZXRzLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgIT09IHRhcmdldCkge1xuICAgICAgICAgIHRoaXMuX2FjdGl2YXRlKHRhcmdldCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1swXSAmJiB0aGlzLl9vZmZzZXRzWzBdID4gMCkge1xuICAgICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX2NsZWFyKCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2Zmc2V0TGVuZ3RoID0gdGhpcy5fb2Zmc2V0cy5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGkgPSBvZmZzZXRMZW5ndGg7IGktLTspIHtcbiAgICAgICAgdmFyIGlzQWN0aXZlVGFyZ2V0ID0gdGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0aGlzLl90YXJnZXRzW2ldICYmIHNjcm9sbFRvcCA+PSB0aGlzLl9vZmZzZXRzW2ldICYmICh0eXBlb2YgdGhpcy5fb2Zmc2V0c1tpICsgMV0gPT09ICd1bmRlZmluZWQnIHx8IHNjcm9sbFRvcCA8IHRoaXMuX29mZnNldHNbaSArIDFdKTtcblxuICAgICAgICBpZiAoaXNBY3RpdmVUYXJnZXQpIHtcbiAgICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0aGlzLl90YXJnZXRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2FjdGl2YXRlID0gZnVuY3Rpb24gX2FjdGl2YXRlKHRhcmdldCkge1xuICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gdGFyZ2V0O1xuXG4gICAgICB0aGlzLl9jbGVhcigpO1xuXG4gICAgICB2YXIgcXVlcmllcyA9IHRoaXMuX3NlbGVjdG9yLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gc2VsZWN0b3IgKyBcIltkYXRhLXRhcmdldD1cXFwiXCIgKyB0YXJnZXQgKyBcIlxcXCJdLFwiICsgc2VsZWN0b3IgKyBcIltocmVmPVxcXCJcIiArIHRhcmdldCArIFwiXFxcIl1cIjtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgJGxpbmsgPSAkKFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChxdWVyaWVzLmpvaW4oJywnKSkpKTtcblxuICAgICAgaWYgKCRsaW5rLmhhc0NsYXNzKENsYXNzTmFtZSQ4LkRST1BET1dOX0lURU0pKSB7XG4gICAgICAgICRsaW5rLmNsb3Nlc3QoU2VsZWN0b3IkOC5EUk9QRE9XTikuZmluZChTZWxlY3RvciQ4LkRST1BET1dOX1RPR0dMRSkuYWRkQ2xhc3MoQ2xhc3NOYW1lJDguQUNUSVZFKTtcbiAgICAgICAgJGxpbmsuYWRkQ2xhc3MoQ2xhc3NOYW1lJDguQUNUSVZFKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNldCB0cmlnZ2VyZWQgbGluayBhcyBhY3RpdmVcbiAgICAgICAgJGxpbmsuYWRkQ2xhc3MoQ2xhc3NOYW1lJDguQUNUSVZFKTsgLy8gU2V0IHRyaWdnZXJlZCBsaW5rcyBwYXJlbnRzIGFzIGFjdGl2ZVxuICAgICAgICAvLyBXaXRoIGJvdGggPHVsPiBhbmQgPG5hdj4gbWFya3VwIGEgcGFyZW50IGlzIHRoZSBwcmV2aW91cyBzaWJsaW5nIG9mIGFueSBuYXYgYW5jZXN0b3JcblxuICAgICAgICAkbGluay5wYXJlbnRzKFNlbGVjdG9yJDguTkFWX0xJU1RfR1JPVVApLnByZXYoU2VsZWN0b3IkOC5OQVZfTElOS1MgKyBcIiwgXCIgKyBTZWxlY3RvciQ4LkxJU1RfSVRFTVMpLmFkZENsYXNzKENsYXNzTmFtZSQ4LkFDVElWRSk7IC8vIEhhbmRsZSBzcGVjaWFsIGNhc2Ugd2hlbiAubmF2LWxpbmsgaXMgaW5zaWRlIC5uYXYtaXRlbVxuXG4gICAgICAgICRsaW5rLnBhcmVudHMoU2VsZWN0b3IkOC5OQVZfTElTVF9HUk9VUCkucHJldihTZWxlY3RvciQ4Lk5BVl9JVEVNUykuY2hpbGRyZW4oU2VsZWN0b3IkOC5OQVZfTElOS1MpLmFkZENsYXNzKENsYXNzTmFtZSQ4LkFDVElWRSk7XG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fc2Nyb2xsRWxlbWVudCkudHJpZ2dlcihFdmVudCQ4LkFDVElWQVRFLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRhcmdldFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2xlYXIgPSBmdW5jdGlvbiBfY2xlYXIoKSB7XG4gICAgICBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fc2VsZWN0b3IpKS5maWx0ZXIoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZSQ4LkFDVElWRSk7XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLmNsYXNzTGlzdC5yZW1vdmUoQ2xhc3NOYW1lJDguQUNUSVZFKTtcbiAgICAgIH0pO1xuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZJDgpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgU2Nyb2xsU3B5KHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSQ4LCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoU2Nyb2xsU3B5LCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTiQ4O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQkNjtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU2Nyb2xsU3B5O1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJCh3aW5kb3cpLm9uKEV2ZW50JDguTE9BRF9EQVRBX0FQSSwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JvbGxTcHlzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yJDguREFUQV9TUFkpKTtcbiAgICB2YXIgc2Nyb2xsU3B5c0xlbmd0aCA9IHNjcm9sbFNweXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IHNjcm9sbFNweXNMZW5ndGg7IGktLTspIHtcbiAgICAgIHZhciAkc3B5ID0gJChzY3JvbGxTcHlzW2ldKTtcblxuICAgICAgU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkc3B5LCAkc3B5LmRhdGEoKSk7XG4gICAgfVxuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRSQ4XSA9IFNjcm9sbFNweS5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUUkOF0uQ29uc3RydWN0b3IgPSBTY3JvbGxTcHk7XG5cbiAgJC5mbltOQU1FJDhdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FJDhdID0gSlFVRVJZX05PX0NPTkZMSUNUJDg7XG4gICAgcmV0dXJuIFNjcm9sbFNweS5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSQ5ID0gJ3RhYic7XG4gIHZhciBWRVJTSU9OJDkgPSAnNC4zLjEnO1xuICB2YXIgREFUQV9LRVkkOSA9ICdicy50YWInO1xuICB2YXIgRVZFTlRfS0VZJDkgPSBcIi5cIiArIERBVEFfS0VZJDk7XG4gIHZhciBEQVRBX0FQSV9LRVkkNyA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJDkgPSAkLmZuW05BTUUkOV07XG4gIHZhciBFdmVudCQ5ID0ge1xuICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZJDksXG4gICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZJDksXG4gICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVkkOSxcbiAgICBTSE9XTjogXCJzaG93blwiICsgRVZFTlRfS0VZJDksXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSQ5ICsgREFUQV9BUElfS0VZJDdcbiAgfTtcbiAgdmFyIENsYXNzTmFtZSQ5ID0ge1xuICAgIERST1BET1dOX01FTlU6ICdkcm9wZG93bi1tZW51JyxcbiAgICBBQ1RJVkU6ICdhY3RpdmUnLFxuICAgIERJU0FCTEVEOiAnZGlzYWJsZWQnLFxuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgfTtcbiAgdmFyIFNlbGVjdG9yJDkgPSB7XG4gICAgRFJPUERPV046ICcuZHJvcGRvd24nLFxuICAgIE5BVl9MSVNUX0dST1VQOiAnLm5hdiwgLmxpc3QtZ3JvdXAnLFxuICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgIEFDVElWRV9VTDogJz4gbGkgPiAuYWN0aXZlJyxcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXSwgW2RhdGEtdG9nZ2xlPVwicGlsbFwiXSwgW2RhdGEtdG9nZ2xlPVwibGlzdFwiXScsXG4gICAgRFJPUERPV05fVE9HR0xFOiAnLmRyb3Bkb3duLXRvZ2dsZScsXG4gICAgRFJPUERPV05fQUNUSVZFX0NISUxEOiAnPiAuZHJvcGRvd24tbWVudSAuYWN0aXZlJ1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBUYWIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUYWIoZWxlbWVudCkge1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBUYWIucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSAmJiB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDkuQUNUSVZFKSB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQ5LkRJU0FCTEVEKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0YXJnZXQ7XG4gICAgICB2YXIgcHJldmlvdXM7XG4gICAgICB2YXIgbGlzdEVsZW1lbnQgPSAkKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoU2VsZWN0b3IkOS5OQVZfTElTVF9HUk9VUClbMF07XG4gICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cbiAgICAgIGlmIChsaXN0RWxlbWVudCkge1xuICAgICAgICB2YXIgaXRlbVNlbGVjdG9yID0gbGlzdEVsZW1lbnQubm9kZU5hbWUgPT09ICdVTCcgfHwgbGlzdEVsZW1lbnQubm9kZU5hbWUgPT09ICdPTCcgPyBTZWxlY3RvciQ5LkFDVElWRV9VTCA6IFNlbGVjdG9yJDkuQUNUSVZFO1xuICAgICAgICBwcmV2aW91cyA9ICQubWFrZUFycmF5KCQobGlzdEVsZW1lbnQpLmZpbmQoaXRlbVNlbGVjdG9yKSk7XG4gICAgICAgIHByZXZpb3VzID0gcHJldmlvdXNbcHJldmlvdXMubGVuZ3RoIC0gMV07XG4gICAgICB9XG5cbiAgICAgIHZhciBoaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50JDkuSElERSwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9KTtcbiAgICAgIHZhciBzaG93RXZlbnQgPSAkLkV2ZW50KEV2ZW50JDkuU0hPVywge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICAkKHByZXZpb3VzKS50cmlnZ2VyKGhpZGVFdmVudCk7XG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fYWN0aXZhdGUodGhpcy5fZWxlbWVudCwgbGlzdEVsZW1lbnQpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgdmFyIGhpZGRlbkV2ZW50ID0gJC5FdmVudChFdmVudCQ5LkhJRERFTiwge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IF90aGlzLl9lbGVtZW50XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgc2hvd25FdmVudCA9ICQuRXZlbnQoRXZlbnQkOS5TSE9XTiwge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHByZXZpb3VzXG4gICAgICAgIH0pO1xuICAgICAgICAkKHByZXZpb3VzKS50cmlnZ2VyKGhpZGRlbkV2ZW50KTtcbiAgICAgICAgJChfdGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93bkV2ZW50KTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgdGhpcy5fYWN0aXZhdGUodGFyZ2V0LCB0YXJnZXQucGFyZW50Tm9kZSwgY29tcGxldGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZJDkpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgfSAvLyBQcml2YXRlXG4gICAgO1xuXG4gICAgX3Byb3RvLl9hY3RpdmF0ZSA9IGZ1bmN0aW9uIF9hY3RpdmF0ZShlbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGFjdGl2ZUVsZW1lbnRzID0gY29udGFpbmVyICYmIChjb250YWluZXIubm9kZU5hbWUgPT09ICdVTCcgfHwgY29udGFpbmVyLm5vZGVOYW1lID09PSAnT0wnKSA/ICQoY29udGFpbmVyKS5maW5kKFNlbGVjdG9yJDkuQUNUSVZFX1VMKSA6ICQoY29udGFpbmVyKS5jaGlsZHJlbihTZWxlY3RvciQ5LkFDVElWRSk7XG4gICAgICB2YXIgYWN0aXZlID0gYWN0aXZlRWxlbWVudHNbMF07XG4gICAgICB2YXIgaXNUcmFuc2l0aW9uaW5nID0gY2FsbGJhY2sgJiYgYWN0aXZlICYmICQoYWN0aXZlKS5oYXNDbGFzcyhDbGFzc05hbWUkOS5GQURFKTtcblxuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuX3RyYW5zaXRpb25Db21wbGV0ZShlbGVtZW50LCBhY3RpdmUsIGNhbGxiYWNrKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChhY3RpdmUgJiYgaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KGFjdGl2ZSk7XG4gICAgICAgICQoYWN0aXZlKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkOS5TSE9XKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX3RyYW5zaXRpb25Db21wbGV0ZSA9IGZ1bmN0aW9uIF90cmFuc2l0aW9uQ29tcGxldGUoZWxlbWVudCwgYWN0aXZlLCBjYWxsYmFjaykge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICAkKGFjdGl2ZSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDkuQUNUSVZFKTtcbiAgICAgICAgdmFyIGRyb3Bkb3duQ2hpbGQgPSAkKGFjdGl2ZS5wYXJlbnROb2RlKS5maW5kKFNlbGVjdG9yJDkuRFJPUERPV05fQUNUSVZFX0NISUxEKVswXTtcblxuICAgICAgICBpZiAoZHJvcGRvd25DaGlsZCkge1xuICAgICAgICAgICQoZHJvcGRvd25DaGlsZCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDkuQUNUSVZFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3RpdmUuZ2V0QXR0cmlidXRlKCdyb2xlJykgPT09ICd0YWInKSB7XG4gICAgICAgICAgYWN0aXZlLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAkKGVsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZSQ5LkFDVElWRSk7XG5cbiAgICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgncm9sZScpID09PSAndGFiJykge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBVdGlsLnJlZmxvdyhlbGVtZW50KTtcblxuICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZSQ5LkZBREUpKSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChDbGFzc05hbWUkOS5TSE9XKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSAmJiAkKGVsZW1lbnQucGFyZW50Tm9kZSkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDkuRFJPUERPV05fTUVOVSkpIHtcbiAgICAgICAgdmFyIGRyb3Bkb3duRWxlbWVudCA9ICQoZWxlbWVudCkuY2xvc2VzdChTZWxlY3RvciQ5LkRST1BET1dOKVswXTtcblxuICAgICAgICBpZiAoZHJvcGRvd25FbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGRyb3Bkb3duVG9nZ2xlTGlzdCA9IFtdLnNsaWNlLmNhbGwoZHJvcGRvd25FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IkOS5EUk9QRE9XTl9UT0dHTEUpKTtcbiAgICAgICAgICAkKGRyb3Bkb3duVG9nZ2xlTGlzdCkuYWRkQ2xhc3MoQ2xhc3NOYW1lJDkuQUNUSVZFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgVGFiLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICAgIHZhciBkYXRhID0gJHRoaXMuZGF0YShEQVRBX0tFWSQ5KTtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IFRhYih0aGlzKTtcbiAgICAgICAgICAkdGhpcy5kYXRhKERBVEFfS0VZJDksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhUYWIsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OJDk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFRhYjtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50JDkuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yJDkuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBUYWIuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQodGhpcyksICdzaG93Jyk7XG4gIH0pO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FJDldID0gVGFiLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRSQ5XS5Db25zdHJ1Y3RvciA9IFRhYjtcblxuICAkLmZuW05BTUUkOV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUUkOV0gPSBKUVVFUllfTk9fQ09ORkxJQ1QkOTtcbiAgICByZXR1cm4gVGFiLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJGEgPSAndG9hc3QnO1xuICB2YXIgVkVSU0lPTiRhID0gJzQuMy4xJztcbiAgdmFyIERBVEFfS0VZJGEgPSAnYnMudG9hc3QnO1xuICB2YXIgRVZFTlRfS0VZJGEgPSBcIi5cIiArIERBVEFfS0VZJGE7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkYSA9ICQuZm5bTkFNRSRhXTtcbiAgdmFyIEV2ZW50JGEgPSB7XG4gICAgQ0xJQ0tfRElTTUlTUzogXCJjbGljay5kaXNtaXNzXCIgKyBFVkVOVF9LRVkkYSxcbiAgICBISURFOiBcImhpZGVcIiArIEVWRU5UX0tFWSRhLFxuICAgIEhJRERFTjogXCJoaWRkZW5cIiArIEVWRU5UX0tFWSRhLFxuICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZJGEsXG4gICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSRhXG4gIH07XG4gIHZhciBDbGFzc05hbWUkYSA9IHtcbiAgICBGQURFOiAnZmFkZScsXG4gICAgSElERTogJ2hpZGUnLFxuICAgIFNIT1c6ICdzaG93JyxcbiAgICBTSE9XSU5HOiAnc2hvd2luZydcbiAgfTtcbiAgdmFyIERlZmF1bHRUeXBlJDcgPSB7XG4gICAgYW5pbWF0aW9uOiAnYm9vbGVhbicsXG4gICAgYXV0b2hpZGU6ICdib29sZWFuJyxcbiAgICBkZWxheTogJ251bWJlcidcbiAgfTtcbiAgdmFyIERlZmF1bHQkNyA9IHtcbiAgICBhbmltYXRpb246IHRydWUsXG4gICAgYXV0b2hpZGU6IHRydWUsXG4gICAgZGVsYXk6IDUwMFxuICB9O1xuICB2YXIgU2VsZWN0b3IkYSA9IHtcbiAgICBEQVRBX0RJU01JU1M6ICdbZGF0YS1kaXNtaXNzPVwidG9hc3RcIl0nXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIFRvYXN0ID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVG9hc3QoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy5fdGltZW91dCA9IG51bGw7XG5cbiAgICAgIHRoaXMuX3NldExpc3RlbmVycygpO1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gVG9hc3QucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKEV2ZW50JGEuU0hPVyk7XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDbGFzc05hbWUkYS5GQURFKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIF90aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ2xhc3NOYW1lJGEuU0hPV0lORyk7XG5cbiAgICAgICAgX3RoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDbGFzc05hbWUkYS5TSE9XKTtcblxuICAgICAgICAkKF90aGlzLl9lbGVtZW50KS50cmlnZ2VyKEV2ZW50JGEuU0hPV04pO1xuXG4gICAgICAgIGlmIChfdGhpcy5fY29uZmlnLmF1dG9oaWRlKSB7XG4gICAgICAgICAgX3RoaXMuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ2xhc3NOYW1lJGEuSElERSk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDbGFzc05hbWUkYS5TSE9XSU5HKTtcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKHdpdGhvdXRUaW1lb3V0KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUkYS5TSE9XKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihFdmVudCRhLkhJREUpO1xuXG4gICAgICBpZiAod2l0aG91dFRpbWVvdXQpIHtcbiAgICAgICAgdGhpcy5fY2xvc2UoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIuX2Nsb3NlKCk7XG4gICAgICAgIH0sIHRoaXMuX2NvbmZpZy5kZWxheSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTtcbiAgICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsO1xuXG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lJGEuU0hPVykpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENsYXNzTmFtZSRhLlNIT1cpO1xuICAgICAgfVxuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9mZihFdmVudCRhLkNMSUNLX0RJU01JU1MpO1xuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZJGEpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgIH0gLy8gUHJpdmF0ZVxuICAgIDtcblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQkNywgJCh0aGlzLl9lbGVtZW50KS5kYXRhKCksIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KTtcbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUkYSwgY29uZmlnLCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fc2V0TGlzdGVuZXJzID0gZnVuY3Rpb24gX3NldExpc3RlbmVycygpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50JGEuQ0xJQ0tfRElTTUlTUywgU2VsZWN0b3IkYS5EQVRBX0RJU01JU1MsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMy5oaWRlKHRydWUpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2xvc2UgPSBmdW5jdGlvbiBfY2xvc2UoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIF90aGlzNC5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENsYXNzTmFtZSRhLkhJREUpO1xuXG4gICAgICAgICQoX3RoaXM0Ll9lbGVtZW50KS50cmlnZ2VyKEV2ZW50JGEuSElEREVOKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDbGFzc05hbWUkYS5TSE9XKTtcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9IC8vIFN0YXRpY1xuICAgIDtcblxuICAgIFRvYXN0Ll9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkZWxlbWVudCA9ICQodGhpcyk7XG4gICAgICAgIHZhciBkYXRhID0gJGVsZW1lbnQuZGF0YShEQVRBX0tFWSRhKTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZztcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IFRvYXN0KHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICRlbGVtZW50LmRhdGEoREFUQV9LRVkkYSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhUb2FzdCwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kYTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFR5cGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdFR5cGUkNztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDc7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFRvYXN0O1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQuZm5bTkFNRSRhXSA9IFRvYXN0Ll9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRSRhXS5Db25zdHJ1Y3RvciA9IFRvYXN0O1xuXG4gICQuZm5bTkFNRSRhXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRSRhXSA9IEpRVUVSWV9OT19DT05GTElDVCRhO1xuICAgIHJldHVybiBUb2FzdC5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBCb290c3RyYXAgKHY0LjMuMSk6IGluZGV4LmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiAkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGpRdWVyeS4galF1ZXJ5IG11c3QgYmUgaW5jbHVkZWQgYmVmb3JlIEJvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdC4nKTtcbiAgICB9XG5cbiAgICB2YXIgdmVyc2lvbiA9ICQuZm4uanF1ZXJ5LnNwbGl0KCcgJylbMF0uc3BsaXQoJy4nKTtcbiAgICB2YXIgbWluTWFqb3IgPSAxO1xuICAgIHZhciBsdE1ham9yID0gMjtcbiAgICB2YXIgbWluTWlub3IgPSA5O1xuICAgIHZhciBtaW5QYXRjaCA9IDE7XG4gICAgdmFyIG1heE1ham9yID0gNDtcblxuICAgIGlmICh2ZXJzaW9uWzBdIDwgbHRNYWpvciAmJiB2ZXJzaW9uWzFdIDwgbWluTWlub3IgfHwgdmVyc2lvblswXSA9PT0gbWluTWFqb3IgJiYgdmVyc2lvblsxXSA9PT0gbWluTWlub3IgJiYgdmVyc2lvblsyXSA8IG1pblBhdGNoIHx8IHZlcnNpb25bMF0gPj0gbWF4TWFqb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGF0IGxlYXN0IGpRdWVyeSB2MS45LjEgYnV0IGxlc3MgdGhhbiB2NC4wLjAnKTtcbiAgICB9XG4gIH0pKCk7XG5cbiAgZXhwb3J0cy5VdGlsID0gVXRpbDtcbiAgZXhwb3J0cy5BbGVydCA9IEFsZXJ0O1xuICBleHBvcnRzLkJ1dHRvbiA9IEJ1dHRvbjtcbiAgZXhwb3J0cy5DYXJvdXNlbCA9IENhcm91c2VsO1xuICBleHBvcnRzLkNvbGxhcHNlID0gQ29sbGFwc2U7XG4gIGV4cG9ydHMuRHJvcGRvd24gPSBEcm9wZG93bjtcbiAgZXhwb3J0cy5Nb2RhbCA9IE1vZGFsO1xuICBleHBvcnRzLlBvcG92ZXIgPSBQb3BvdmVyO1xuICBleHBvcnRzLlNjcm9sbHNweSA9IFNjcm9sbFNweTtcbiAgZXhwb3J0cy5UYWIgPSBUYWI7XG4gIGV4cG9ydHMuVG9hc3QgPSBUb2FzdDtcbiAgZXhwb3J0cy5Ub29sdGlwID0gVG9vbHRpcDtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib290c3RyYXAuanMubWFwXG4iLCIvKiohXG4gKiBAZmlsZU92ZXJ2aWV3IEtpY2thc3MgbGlicmFyeSB0byBjcmVhdGUgYW5kIHBsYWNlIHBvcHBlcnMgbmVhciB0aGVpciByZWZlcmVuY2UgZWxlbWVudHMuXG4gKiBAdmVyc2lvbiAxLjE2LjBcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgRmVkZXJpY28gWml2b2xvIGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICovXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJztcblxudmFyIHRpbWVvdXREdXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxvbmdlclRpbWVvdXRCcm93c2VycyA9IFsnRWRnZScsICdUcmlkZW50JywgJ0ZpcmVmb3gnXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb25nZXJUaW1lb3V0QnJvd3NlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoaXNCcm93c2VyICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihsb25nZXJUaW1lb3V0QnJvd3NlcnNbaV0pID49IDApIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gMDtcbn0oKTtcblxuZnVuY3Rpb24gbWljcm90YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWxsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICB3aW5kb3cuUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsZWQgPSBmYWxzZTtcbiAgICAgIGZuKCk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRhc2tEZWJvdW5jZShmbikge1xuICB2YXIgc2NoZWR1bGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzY2hlZHVsZWQpIHtcbiAgICAgIHNjaGVkdWxlZCA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgIGZuKCk7XG4gICAgICB9LCB0aW1lb3V0RHVyYXRpb24pO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHN1cHBvcnRzTWljcm9UYXNrcyA9IGlzQnJvd3NlciAmJiB3aW5kb3cuUHJvbWlzZTtcblxuLyoqXG4qIENyZWF0ZSBhIGRlYm91bmNlZCB2ZXJzaW9uIG9mIGEgbWV0aG9kLCB0aGF0J3MgYXN5bmNocm9ub3VzbHkgZGVmZXJyZWRcbiogYnV0IGNhbGxlZCBpbiB0aGUgbWluaW11bSB0aW1lIHBvc3NpYmxlLlxuKlxuKiBAbWV0aG9kXG4qIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiogQGFyZ3VtZW50IHtGdW5jdGlvbn0gZm5cbiogQHJldHVybnMge0Z1bmN0aW9ufVxuKi9cbnZhciBkZWJvdW5jZSA9IHN1cHBvcnRzTWljcm9UYXNrcyA/IG1pY3JvdGFza0RlYm91bmNlIDogdGFza0RlYm91bmNlO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YXJpYWJsZSBpcyBhIGZ1bmN0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FueX0gZnVuY3Rpb25Ub0NoZWNrIC0gdmFyaWFibGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG86IGlzIGEgZnVuY3Rpb24/XG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oZnVuY3Rpb25Ub0NoZWNrKSB7XG4gIHZhciBnZXRUeXBlID0ge307XG4gIHJldHVybiBmdW5jdGlvblRvQ2hlY2sgJiYgZ2V0VHlwZS50b1N0cmluZy5jYWxsKGZ1bmN0aW9uVG9DaGVjaykgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogR2V0IENTUyBjb21wdXRlZCBwcm9wZXJ0eSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eVxuICovXG5mdW5jdGlvbiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgaWYgKGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIHdpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgdmFyIGNzcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuICByZXR1cm4gcHJvcGVydHkgPyBjc3NbcHJvcGVydHldIDogY3NzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmVudE5vZGUgb3IgdGhlIGhvc3Qgb2YgdGhlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjcm9sbGluZyBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHNjcm9sbCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gUmV0dXJuIGJvZHksIGBnZXRTY3JvbGxgIHdpbGwgdGFrZSBjYXJlIHRvIGdldCB0aGUgY29ycmVjdCBgc2Nyb2xsVG9wYCBmcm9tIGl0XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgc3dpdGNoIChlbGVtZW50Lm5vZGVOYW1lKSB7XG4gICAgY2FzZSAnSFRNTCc6XG4gICAgY2FzZSAnQk9EWSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7XG4gICAgY2FzZSAnI2RvY3VtZW50JzpcbiAgICAgIHJldHVybiBlbGVtZW50LmJvZHk7XG4gIH1cblxuICAvLyBGaXJlZm94IHdhbnQgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcblxuICB2YXIgX2dldFN0eWxlQ29tcHV0ZWRQcm9wID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WTtcblxuICBpZiAoLyhhdXRvfHNjcm9sbHxvdmVybGF5KS8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcmVmZXJlbmNlIG5vZGUgb2YgdGhlIHJlZmVyZW5jZSBvYmplY3QsIG9yIHRoZSByZWZlcmVuY2Ugb2JqZWN0IGl0c2VsZi5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFJlZmVyZW5jZU5vZGUocmVmZXJlbmNlKSB7XG4gIHJldHVybiByZWZlcmVuY2UgJiYgcmVmZXJlbmNlLnJlZmVyZW5jZU5vZGUgPyByZWZlcmVuY2UucmVmZXJlbmNlTm9kZSA6IHJlZmVyZW5jZTtcbn1cblxudmFyIGlzSUUxMSA9IGlzQnJvd3NlciAmJiAhISh3aW5kb3cuTVNJbnB1dE1ldGhvZENvbnRleHQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBpc0lFMTAgPSBpc0Jyb3dzZXIgJiYgL01TSUUgMTAvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgYnJvd3NlciBpcyBJbnRlcm5ldCBFeHBsb3JlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtOdW1iZXJ9IHZlcnNpb24gdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBpc0lFXG4gKi9cbmZ1bmN0aW9uIGlzSUUodmVyc2lvbikge1xuICBpZiAodmVyc2lvbiA9PT0gMTEpIHtcbiAgICByZXR1cm4gaXNJRTExO1xuICB9XG4gIGlmICh2ZXJzaW9uID09PSAxMCkge1xuICAgIHJldHVybiBpc0lFMTA7XG4gIH1cbiAgcmV0dXJuIGlzSUUxMSB8fCBpc0lFMTA7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb2Zmc2V0IHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgdmFyIG5vT2Zmc2V0UGFyZW50ID0gaXNJRSgxMCkgPyBkb2N1bWVudC5ib2R5IDogbnVsbDtcblxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQgfHwgbnVsbDtcbiAgLy8gU2tpcCBoaWRkZW4gZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhbiBvZmZzZXRQYXJlbnRcbiAgd2hpbGUgKG9mZnNldFBhcmVudCA9PT0gbm9PZmZzZXRQYXJlbnQgJiYgZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSAoZWxlbWVudCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKS5vZmZzZXRQYXJlbnQ7XG4gIH1cblxuICB2YXIgbm9kZU5hbWUgPSBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50Lm5vZGVOYW1lO1xuXG4gIGlmICghbm9kZU5hbWUgfHwgbm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gLm9mZnNldFBhcmVudCB3aWxsIHJldHVybiB0aGUgY2xvc2VzdCBUSCwgVEQgb3IgVEFCTEUgaW4gY2FzZVxuICAvLyBubyBvZmZzZXRQYXJlbnQgaXMgcHJlc2VudCwgSSBoYXRlIHRoaXMgam9iLi4uXG4gIGlmIChbJ1RIJywgJ1REJywgJ1RBQkxFJ10uaW5kZXhPZihvZmZzZXRQYXJlbnQubm9kZU5hbWUpICE9PSAtMSAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkob2Zmc2V0UGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycpIHtcbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50O1xufVxuXG5mdW5jdGlvbiBpc09mZnNldENvbnRhaW5lcihlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIG5vZGVOYW1lID09PSAnSFRNTCcgfHwgZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpID09PSBlbGVtZW50O1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSByb290IG5vZGUgKGRvY3VtZW50LCBzaGFkb3dET00gcm9vdCkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybnMge0VsZW1lbnR9IHJvb3Qgbm9kZVxuICovXG5mdW5jdGlvbiBnZXRSb290KG5vZGUpIHtcbiAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBnZXRSb290KG5vZGUucGFyZW50Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgb2Zmc2V0IHBhcmVudCBjb21tb24gdG8gdGhlIHR3byBwcm92aWRlZCBub2Rlc1xuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MVxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MlxuICogQHJldHVybnMge0VsZW1lbnR9IGNvbW1vbiBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGVsZW1lbnQyKSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQxIHx8ICFlbGVtZW50MS5ub2RlVHlwZSB8fCAhZWxlbWVudDIgfHwgIWVsZW1lbnQyLm5vZGVUeXBlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIEhlcmUgd2UgbWFrZSBzdXJlIHRvIGdpdmUgYXMgXCJzdGFydFwiIHRoZSBlbGVtZW50IHRoYXQgY29tZXMgZmlyc3QgaW4gdGhlIERPTVxuICB2YXIgb3JkZXIgPSBlbGVtZW50MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50MikgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORztcbiAgdmFyIHN0YXJ0ID0gb3JkZXIgPyBlbGVtZW50MSA6IGVsZW1lbnQyO1xuICB2YXIgZW5kID0gb3JkZXIgPyBlbGVtZW50MiA6IGVsZW1lbnQxO1xuXG4gIC8vIEdldCBjb21tb24gYW5jZXN0b3IgY29udGFpbmVyXG4gIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKTtcbiAgcmFuZ2Uuc2V0RW5kKGVuZCwgMCk7XG4gIHZhciBjb21tb25BbmNlc3RvckNvbnRhaW5lciA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuXG4gIC8vIEJvdGggbm9kZXMgYXJlIGluc2lkZSAjZG9jdW1lbnRcblxuICBpZiAoZWxlbWVudDEgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyICYmIGVsZW1lbnQyICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciB8fCBzdGFydC5jb250YWlucyhlbmQpKSB7XG4gICAgaWYgKGlzT2Zmc2V0Q29udGFpbmVyKGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSkge1xuICAgICAgcmV0dXJuIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQoY29tbW9uQW5jZXN0b3JDb250YWluZXIpO1xuICB9XG5cbiAgLy8gb25lIG9mIHRoZSBub2RlcyBpcyBpbnNpZGUgc2hhZG93RE9NLCBmaW5kIHdoaWNoIG9uZVxuICB2YXIgZWxlbWVudDFyb290ID0gZ2V0Um9vdChlbGVtZW50MSk7XG4gIGlmIChlbGVtZW50MXJvb3QuaG9zdCkge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxcm9vdC5ob3N0LCBlbGVtZW50Mik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGdldFJvb3QoZWxlbWVudDIpLmhvc3QpO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50IGluIHRoZSBnaXZlbiBzaWRlICh0b3AgYW5kIGxlZnQpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzaWRlIGB0b3BgIG9yIGBsZWZ0YFxuICogQHJldHVybnMge251bWJlcn0gYW1vdW50IG9mIHNjcm9sbGVkIHBpeGVsc1xuICovXG5mdW5jdGlvbiBnZXRTY3JvbGwoZWxlbWVudCkge1xuICB2YXIgc2lkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3RvcCc7XG5cbiAgdmFyIHVwcGVyU2lkZSA9IHNpZGUgPT09ICd0b3AnID8gJ3Njcm9sbFRvcCcgOiAnc2Nyb2xsTGVmdCc7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB2YXIgc2Nyb2xsaW5nRWxlbWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGh0bWw7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnRbdXBwZXJTaWRlXTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50W3VwcGVyU2lkZV07XG59XG5cbi8qXG4gKiBTdW0gb3Igc3VidHJhY3QgdGhlIGVsZW1lbnQgc2Nyb2xsIHZhbHVlcyAobGVmdCBhbmQgdG9wKSBmcm9tIGEgZ2l2ZW4gcmVjdCBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0IC0gUmVjdCBvYmplY3QgeW91IHdhbnQgdG8gY2hhbmdlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgZnJvbSB0aGUgZnVuY3Rpb24gcmVhZHMgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3VidHJhY3QgLSBzZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBzdWJ0cmFjdCB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHJldHVybiB7T2JqZWN0fSByZWN0IC0gVGhlIG1vZGlmaWVyIHJlY3Qgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGluY2x1ZGVTY3JvbGwocmVjdCwgZWxlbWVudCkge1xuICB2YXIgc3VidHJhY3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICB2YXIgbW9kaWZpZXIgPSBzdWJ0cmFjdCA/IC0xIDogMTtcbiAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbi8qXG4gKiBIZWxwZXIgdG8gZGV0ZWN0IGJvcmRlcnMgb2YgYSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xuICogUmVzdWx0IG9mIGBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHlgIG9uIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gYXhpcyAtIGB4YCBvciBgeWBcbiAqIEByZXR1cm4ge251bWJlcn0gYm9yZGVycyAtIFRoZSBib3JkZXJzIHNpemUgb2YgdGhlIGdpdmVuIGF4aXNcbiAqL1xuXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsIGF4aXMpIHtcbiAgdmFyIHNpZGVBID0gYXhpcyA9PT0gJ3gnID8gJ0xlZnQnIDogJ1RvcCc7XG4gIHZhciBzaWRlQiA9IHNpZGVBID09PSAnTGVmdCcgPyAnUmlnaHQnIDogJ0JvdHRvbSc7XG5cbiAgcmV0dXJuIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUEgKyAnV2lkdGgnXSwgMTApICsgcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQiArICdXaWR0aCddLCAxMCk7XG59XG5cbmZ1bmN0aW9uIGdldFNpemUoYXhpcywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSkge1xuICByZXR1cm4gTWF0aC5tYXgoYm9keVsnb2Zmc2V0JyArIGF4aXNdLCBib2R5WydzY3JvbGwnICsgYXhpc10sIGh0bWxbJ2NsaWVudCcgKyBheGlzXSwgaHRtbFsnb2Zmc2V0JyArIGF4aXNdLCBodG1sWydzY3JvbGwnICsgYXhpc10sIGlzSUUoMTApID8gcGFyc2VJbnQoaHRtbFsnb2Zmc2V0JyArIGF4aXNdKSArIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnVG9wJyA6ICdMZWZ0JyldKSArIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnQm90dG9tJyA6ICdSaWdodCcpXSkgOiAwKTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2l6ZXMoZG9jdW1lbnQpIHtcbiAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBpc0lFKDEwKSAmJiBnZXRDb21wdXRlZFN0eWxlKGh0bWwpO1xuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBnZXRTaXplKCdIZWlnaHQnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKVxuICB9O1xufVxuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG5cblxuXG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogR2l2ZW4gZWxlbWVudCBvZmZzZXRzLCBnZW5lcmF0ZSBhbiBvdXRwdXQgc2ltaWxhciB0byBnZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvZmZzZXRzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDbGllbnRSZWN0IGxpa2Ugb3V0cHV0XG4gKi9cbmZ1bmN0aW9uIGdldENsaWVudFJlY3Qob2Zmc2V0cykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG9mZnNldHMsIHtcbiAgICByaWdodDogb2Zmc2V0cy5sZWZ0ICsgb2Zmc2V0cy53aWR0aCxcbiAgICBib3R0b206IG9mZnNldHMudG9wICsgb2Zmc2V0cy5oZWlnaHRcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IGJvdW5kaW5nIGNsaWVudCByZWN0IG9mIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdH0gY2xpZW50IHJlY3RcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSB7fTtcblxuICAvLyBJRTEwIDEwIEZJWDogUGxlYXNlLCBkb24ndCBhc2ssIHRoZSBlbGVtZW50IGlzbid0XG4gIC8vIGNvbnNpZGVyZWQgaW4gRE9NIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy4uLlxuICAvLyBUaGlzIGlzbid0IHJlcHJvZHVjaWJsZSBpbiBJRTEwIGNvbXBhdGliaWxpdHkgbW9kZSBvZiBJRTExXG4gIHRyeSB7XG4gICAgaWYgKGlzSUUoMTApKSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICAgICAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgICAgIHJlY3QudG9wICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0O1xuICAgICAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCxcbiAgICBoZWlnaHQ6IHJlY3QuYm90dG9tIC0gcmVjdC50b3BcbiAgfTtcblxuICAvLyBzdWJ0cmFjdCBzY3JvbGxiYXIgc2l6ZSBmcm9tIHNpemVzXG4gIHZhciBzaXplcyA9IGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJyA/IGdldFdpbmRvd1NpemVzKGVsZW1lbnQub3duZXJEb2N1bWVudCkgOiB7fTtcbiAgdmFyIHdpZHRoID0gc2l6ZXMud2lkdGggfHwgZWxlbWVudC5jbGllbnRXaWR0aCB8fCByZXN1bHQud2lkdGg7XG4gIHZhciBoZWlnaHQgPSBzaXplcy5oZWlnaHQgfHwgZWxlbWVudC5jbGllbnRIZWlnaHQgfHwgcmVzdWx0LmhlaWdodDtcblxuICB2YXIgaG9yaXpTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldFdpZHRoIC0gd2lkdGg7XG4gIHZhciB2ZXJ0U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRIZWlnaHQgLSBoZWlnaHQ7XG5cbiAgLy8gaWYgYW4gaHlwb3RoZXRpY2FsIHNjcm9sbGJhciBpcyBkZXRlY3RlZCwgd2UgbXVzdCBiZSBzdXJlIGl0J3Mgbm90IGEgYGJvcmRlcmBcbiAgLy8gd2UgbWFrZSB0aGlzIGNoZWNrIGNvbmRpdGlvbmFsIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gIGlmIChob3JpelNjcm9sbGJhciB8fCB2ZXJ0U2Nyb2xsYmFyKSB7XG4gICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KTtcbiAgICBob3JpelNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd4Jyk7XG4gICAgdmVydFNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd5Jyk7XG5cbiAgICByZXN1bHQud2lkdGggLT0gaG9yaXpTY3JvbGxiYXI7XG4gICAgcmVzdWx0LmhlaWdodCAtPSB2ZXJ0U2Nyb2xsYmFyO1xuICB9XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3QocmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGNoaWxkcmVuLCBwYXJlbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBpc0lFMTAgPSBpc0lFKDEwKTtcbiAgdmFyIGlzSFRNTCA9IHBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnO1xuICB2YXIgY2hpbGRyZW5SZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGNoaWxkcmVuKTtcbiAgdmFyIHBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QocGFyZW50KTtcbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChjaGlsZHJlbik7XG5cbiAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQpO1xuICB2YXIgYm9yZGVyVG9wV2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJUb3BXaWR0aCwgMTApO1xuICB2YXIgYm9yZGVyTGVmdFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyTGVmdFdpZHRoLCAxMCk7XG5cbiAgLy8gSW4gY2FzZXMgd2hlcmUgdGhlIHBhcmVudCBpcyBmaXhlZCwgd2UgbXVzdCBpZ25vcmUgbmVnYXRpdmUgc2Nyb2xsIGluIG9mZnNldCBjYWxjXG4gIGlmIChmaXhlZFBvc2l0aW9uICYmIGlzSFRNTCkge1xuICAgIHBhcmVudFJlY3QudG9wID0gTWF0aC5tYXgocGFyZW50UmVjdC50b3AsIDApO1xuICAgIHBhcmVudFJlY3QubGVmdCA9IE1hdGgubWF4KHBhcmVudFJlY3QubGVmdCwgMCk7XG4gIH1cbiAgdmFyIG9mZnNldHMgPSBnZXRDbGllbnRSZWN0KHtcbiAgICB0b3A6IGNoaWxkcmVuUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCAtIGJvcmRlclRvcFdpZHRoLFxuICAgIGxlZnQ6IGNoaWxkcmVuUmVjdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0IC0gYm9yZGVyTGVmdFdpZHRoLFxuICAgIHdpZHRoOiBjaGlsZHJlblJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBjaGlsZHJlblJlY3QuaGVpZ2h0XG4gIH0pO1xuICBvZmZzZXRzLm1hcmdpblRvcCA9IDA7XG4gIG9mZnNldHMubWFyZ2luTGVmdCA9IDA7XG5cbiAgLy8gU3VidHJhY3QgbWFyZ2lucyBvZiBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBpdCdzIGJlaW5nIHVzZWQgYXMgcGFyZW50XG4gIC8vIHdlIGRvIHRoaXMgb25seSBvbiBIVE1MIGJlY2F1c2UgaXQncyB0aGUgb25seSBlbGVtZW50IHRoYXQgYmVoYXZlc1xuICAvLyBkaWZmZXJlbnRseSB3aGVuIG1hcmdpbnMgYXJlIGFwcGxpZWQgdG8gaXQuIFRoZSBtYXJnaW5zIGFyZSBpbmNsdWRlZCBpblxuICAvLyB0aGUgYm94IG9mIHRoZSBkb2N1bWVudEVsZW1lbnQsIGluIHRoZSBvdGhlciBjYXNlcyBub3QuXG4gIGlmICghaXNJRTEwICYmIGlzSFRNTCkge1xuICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3AsIDEwKTtcbiAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQsIDEwKTtcblxuICAgIG9mZnNldHMudG9wIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMuYm90dG9tIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubGVmdCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuICAgIG9mZnNldHMucmlnaHQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcblxuICAgIC8vIEF0dGFjaCBtYXJnaW5Ub3AgYW5kIG1hcmdpbkxlZnQgYmVjYXVzZSBpbiBzb21lIGNpcmN1bXN0YW5jZXMgd2UgbWF5IG5lZWQgdGhlbVxuICAgIG9mZnNldHMubWFyZ2luVG9wID0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQ7XG4gIH1cblxuICBpZiAoaXNJRTEwICYmICFmaXhlZFBvc2l0aW9uID8gcGFyZW50LmNvbnRhaW5zKHNjcm9sbFBhcmVudCkgOiBwYXJlbnQgPT09IHNjcm9sbFBhcmVudCAmJiBzY3JvbGxQYXJlbnQubm9kZU5hbWUgIT09ICdCT0RZJykge1xuICAgIG9mZnNldHMgPSBpbmNsdWRlU2Nyb2xsKG9mZnNldHMsIHBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuZnVuY3Rpb24gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKGVsZW1lbnQpIHtcbiAgdmFyIGV4Y2x1ZGVTY3JvbGwgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGVsZW1lbnQsIGh0bWwpO1xuICB2YXIgd2lkdGggPSBNYXRoLm1heChodG1sLmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgdmFyIGhlaWdodCA9IE1hdGgubWF4KGh0bWwuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG5cbiAgdmFyIHNjcm9sbFRvcCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwpIDogMDtcbiAgdmFyIHNjcm9sbExlZnQgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sLCAnbGVmdCcpIDogMDtcblxuICB2YXIgb2Zmc2V0ID0ge1xuICAgIHRvcDogc2Nyb2xsVG9wIC0gcmVsYXRpdmVPZmZzZXQudG9wICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luVG9wLFxuICAgIGxlZnQ6IHNjcm9sbExlZnQgLSByZWxhdGl2ZU9mZnNldC5sZWZ0ICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luTGVmdCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChvZmZzZXQpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIGZpeGVkIG9yIGlzIGluc2lkZSBhIGZpeGVkIHBhcmVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGN1c3RvbUNvbnRhaW5lclxuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0byBcImlzRml4ZWQ/XCJcbiAqL1xuZnVuY3Rpb24gaXNGaXhlZChlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCAncG9zaXRpb24nKSA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBwYXJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcbiAgaWYgKCFwYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc0ZpeGVkKHBhcmVudE5vZGUpO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBmaXJzdCBwYXJlbnQgb2YgYW4gZWxlbWVudCB0aGF0IGhhcyBhIHRyYW5zZm9ybWVkIHByb3BlcnR5IGRlZmluZWRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IGZpcnN0IHRyYW5zZm9ybWVkIHBhcmVudCBvciBkb2N1bWVudEVsZW1lbnRcbiAqL1xuXG5mdW5jdGlvbiBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5wYXJlbnRFbGVtZW50IHx8IGlzSUUoKSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbiAgdmFyIGVsID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICB3aGlsZSAoZWwgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsLCAndHJhbnNmb3JtJykgPT09ICdub25lJykge1xuICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWwgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xufVxuXG4vKipcbiAqIENvbXB1dGVkIHRoZSBib3VuZGFyaWVzIGxpbWl0cyBhbmQgcmV0dXJuIHRoZW1cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gcGFkZGluZ1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQgLSBFbGVtZW50IHVzZWQgdG8gZGVmaW5lIHRoZSBib3VuZGFyaWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGZpeGVkUG9zaXRpb24gLSBJcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDb29yZGluYXRlcyBvZiB0aGUgYm91bmRhcmllc1xuICovXG5mdW5jdGlvbiBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogZmFsc2U7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcblxuICB2YXIgYm91bmRhcmllcyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIGdldFJlZmVyZW5jZU5vZGUocmVmZXJlbmNlKSk7XG5cbiAgLy8gSGFuZGxlIHZpZXdwb3J0IGNhc2VcbiAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAndmlld3BvcnQnKSB7XG4gICAgYm91bmRhcmllcyA9IGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShvZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xuICB9IGVsc2Uge1xuICAgIC8vIEhhbmRsZSBvdGhlciBjYXNlcyBiYXNlZCBvbiBET00gZWxlbWVudCB1c2VkIGFzIGJvdW5kYXJpZXNcbiAgICB2YXIgYm91bmRhcmllc05vZGUgPSB2b2lkIDA7XG4gICAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShyZWZlcmVuY2UpKTtcbiAgICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd3aW5kb3cnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBib3VuZGFyaWVzRWxlbWVudDtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0cyA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShib3VuZGFyaWVzTm9kZSwgb2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcblxuICAgIC8vIEluIGNhc2Ugb2YgSFRNTCwgd2UgbmVlZCBhIGRpZmZlcmVudCBjb21wdXRhdGlvblxuICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0hUTUwnICYmICFpc0ZpeGVkKG9mZnNldFBhcmVudCkpIHtcbiAgICAgIHZhciBfZ2V0V2luZG93U2l6ZXMgPSBnZXRXaW5kb3dTaXplcyhwb3BwZXIub3duZXJEb2N1bWVudCksXG4gICAgICAgICAgaGVpZ2h0ID0gX2dldFdpbmRvd1NpemVzLmhlaWdodCxcbiAgICAgICAgICB3aWR0aCA9IF9nZXRXaW5kb3dTaXplcy53aWR0aDtcblxuICAgICAgYm91bmRhcmllcy50b3AgKz0gb2Zmc2V0cy50b3AgLSBvZmZzZXRzLm1hcmdpblRvcDtcbiAgICAgIGJvdW5kYXJpZXMuYm90dG9tID0gaGVpZ2h0ICsgb2Zmc2V0cy50b3A7XG4gICAgICBib3VuZGFyaWVzLmxlZnQgKz0gb2Zmc2V0cy5sZWZ0IC0gb2Zmc2V0cy5tYXJnaW5MZWZ0O1xuICAgICAgYm91bmRhcmllcy5yaWdodCA9IHdpZHRoICsgb2Zmc2V0cy5sZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3IgYWxsIHRoZSBvdGhlciBET00gZWxlbWVudHMsIHRoaXMgb25lIGlzIGdvb2RcbiAgICAgIGJvdW5kYXJpZXMgPSBvZmZzZXRzO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBwYWRkaW5nc1xuICBwYWRkaW5nID0gcGFkZGluZyB8fCAwO1xuICB2YXIgaXNQYWRkaW5nTnVtYmVyID0gdHlwZW9mIHBhZGRpbmcgPT09ICdudW1iZXInO1xuICBib3VuZGFyaWVzLmxlZnQgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcubGVmdCB8fCAwO1xuICBib3VuZGFyaWVzLnRvcCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy50b3AgfHwgMDtcbiAgYm91bmRhcmllcy5yaWdodCAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5yaWdodCB8fCAwO1xuICBib3VuZGFyaWVzLmJvdHRvbSAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5ib3R0b20gfHwgMDtcblxuICByZXR1cm4gYm91bmRhcmllcztcbn1cblxuZnVuY3Rpb24gZ2V0QXJlYShfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodDtcblxuICByZXR1cm4gd2lkdGggKiBoZWlnaHQ7XG59XG5cbi8qKlxuICogVXRpbGl0eSB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgYGF1dG9gIHBsYWNlbWVudCB0byB0aGUgcGxhY2VtZW50IHdpdGggbW9yZVxuICogYXZhaWxhYmxlIHNwYWNlLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQocGxhY2VtZW50LCByZWZSZWN0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIHBhZGRpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDA7XG5cbiAgaWYgKHBsYWNlbWVudC5pbmRleE9mKCdhdXRvJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpO1xuXG4gIHZhciByZWN0cyA9IHtcbiAgICB0b3A6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiByZWZSZWN0LnRvcCAtIGJvdW5kYXJpZXMudG9wXG4gICAgfSxcbiAgICByaWdodDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMucmlnaHQgLSByZWZSZWN0LnJpZ2h0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH0sXG4gICAgYm90dG9tOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5ib3R0b20gLSByZWZSZWN0LmJvdHRvbVxuICAgIH0sXG4gICAgbGVmdDoge1xuICAgICAgd2lkdGg6IHJlZlJlY3QubGVmdCAtIGJvdW5kYXJpZXMubGVmdCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNvcnRlZEFyZWFzID0gT2JqZWN0LmtleXMocmVjdHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGtleToga2V5XG4gICAgfSwgcmVjdHNba2V5XSwge1xuICAgICAgYXJlYTogZ2V0QXJlYShyZWN0c1trZXldKVxuICAgIH0pO1xuICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGIuYXJlYSAtIGEuYXJlYTtcbiAgfSk7XG5cbiAgdmFyIGZpbHRlcmVkQXJlYXMgPSBzb3J0ZWRBcmVhcy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIHdpZHRoID0gX3JlZjIud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IF9yZWYyLmhlaWdodDtcbiAgICByZXR1cm4gd2lkdGggPj0gcG9wcGVyLmNsaWVudFdpZHRoICYmIGhlaWdodCA+PSBwb3BwZXIuY2xpZW50SGVpZ2h0O1xuICB9KTtcblxuICB2YXIgY29tcHV0ZWRQbGFjZW1lbnQgPSBmaWx0ZXJlZEFyZWFzLmxlbmd0aCA+IDAgPyBmaWx0ZXJlZEFyZWFzWzBdLmtleSA6IHNvcnRlZEFyZWFzWzBdLmtleTtcblxuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgcmV0dXJuIGNvbXB1dGVkUGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7RWxlbWVudH0gZml4ZWRQb3NpdGlvbiAtIGlzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlKSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuXG4gIHZhciBjb21tb25PZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIGdldFJlZmVyZW5jZU5vZGUocmVmZXJlbmNlKSk7XG4gIHJldHVybiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUocmVmZXJlbmNlLCBjb21tb25PZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3V0ZXIgc2l6ZXMgb2YgdGhlIGdpdmVuIGVsZW1lbnQgKG9mZnNldCBzaXplICsgbWFyZ2lucylcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge09iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgd2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGdldE91dGVyU2l6ZXMoZWxlbWVudCkge1xuICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHZhciB4ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wIHx8IDApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luQm90dG9tIHx8IDApO1xuICB2YXIgeSA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5SaWdodCB8fCAwKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCArIHksXG4gICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodCArIHhcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50XG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudFxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgdmFyIGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHBvc2l0aW9uIC0gQ1NTIHBvc2l0aW9uIHRoZSBQb3BwZXIgd2lsbCBnZXQgYXBwbGllZFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cyAtIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge1N0cmluZ30gcGxhY2VtZW50IC0gb25lIG9mIHRoZSB2YWxpZCBwbGFjZW1lbnQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gcG9wcGVyT2Zmc2V0cyAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFBvcHBlck9mZnNldHMocG9wcGVyLCByZWZlcmVuY2VPZmZzZXRzLCBwbGFjZW1lbnQpIHtcbiAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgLy8gR2V0IHBvcHBlciBub2RlIHNpemVzXG4gIHZhciBwb3BwZXJSZWN0ID0gZ2V0T3V0ZXJTaXplcyhwb3BwZXIpO1xuXG4gIC8vIEFkZCBwb3NpdGlvbiwgd2lkdGggYW5kIGhlaWdodCB0byBvdXIgb2Zmc2V0cyBvYmplY3RcbiAgdmFyIHBvcHBlck9mZnNldHMgPSB7XG4gICAgd2lkdGg6IHBvcHBlclJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBwb3BwZXJSZWN0LmhlaWdodFxuICB9O1xuXG4gIC8vIGRlcGVuZGluZyBieSB0aGUgcG9wcGVyIHBsYWNlbWVudCB3ZSBoYXZlIHRvIGNvbXB1dGUgaXRzIG9mZnNldHMgc2xpZ2h0bHkgZGlmZmVyZW50bHlcbiAgdmFyIGlzSG9yaXogPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgbWFpblNpZGUgPSBpc0hvcml6ID8gJ3RvcCcgOiAnbGVmdCc7XG4gIHZhciBzZWNvbmRhcnlTaWRlID0gaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2Vjb25kYXJ5TWVhc3VyZW1lbnQgPSAhaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBwb3BwZXJPZmZzZXRzW21haW5TaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbbWFpblNpZGVdICsgcmVmZXJlbmNlT2Zmc2V0c1ttZWFzdXJlbWVudF0gLyAyIC0gcG9wcGVyUmVjdFttZWFzdXJlbWVudF0gLyAyO1xuICBpZiAocGxhY2VtZW50ID09PSBzZWNvbmRhcnlTaWRlKSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gLSBwb3BwZXJSZWN0W3NlY29uZGFyeU1lYXN1cmVtZW50XTtcbiAgfSBlbHNlIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tnZXRPcHBvc2l0ZVBsYWNlbWVudChzZWNvbmRhcnlTaWRlKV07XG4gIH1cblxuICByZXR1cm4gcG9wcGVyT2Zmc2V0cztcbn1cblxuLyoqXG4gKiBNaW1pY3MgdGhlIGBmaW5kYCBtZXRob2Qgb2YgQXJyYXlcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZChhcnIsIGNoZWNrKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gICAgcmV0dXJuIGFyci5maW5kKGNoZWNrKTtcbiAgfVxuXG4gIC8vIHVzZSBgZmlsdGVyYCB0byBvYnRhaW4gdGhlIHNhbWUgYmVoYXZpb3Igb2YgYGZpbmRgXG4gIHJldHVybiBhcnIuZmlsdGVyKGNoZWNrKVswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGluZGV4IG9mIHRoZSBtYXRjaGluZyBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZEluZGV4KGFyciwgcHJvcCwgdmFsdWUpIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kSW5kZXggaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XG4gICAgcmV0dXJuIGFyci5maW5kSW5kZXgoZnVuY3Rpb24gKGN1cikge1xuICAgICAgcmV0dXJuIGN1cltwcm9wXSA9PT0gdmFsdWU7XG4gICAgfSk7XG4gIH1cblxuICAvLyB1c2UgYGZpbmRgICsgYGluZGV4T2ZgIGlmIGBmaW5kSW5kZXhgIGlzbid0IHN1cHBvcnRlZFxuICB2YXIgbWF0Y2ggPSBmaW5kKGFyciwgZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmpbcHJvcF0gPT09IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIGFyci5pbmRleE9mKG1hdGNoKTtcbn1cblxuLyoqXG4gKiBMb29wIHRyb3VnaCB0aGUgbGlzdCBvZiBtb2RpZmllcnMgYW5kIHJ1biB0aGVtIGluIG9yZGVyLFxuICogZWFjaCBvZiB0aGVtIHdpbGwgdGhlbiBlZGl0IHRoZSBkYXRhIG9iamVjdC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5kcyAtIE9wdGlvbmFsIG1vZGlmaWVyIG5hbWUgdXNlZCBhcyBzdG9wcGVyXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH1cbiAqL1xuZnVuY3Rpb24gcnVuTW9kaWZpZXJzKG1vZGlmaWVycywgZGF0YSwgZW5kcykge1xuICB2YXIgbW9kaWZpZXJzVG9SdW4gPSBlbmRzID09PSB1bmRlZmluZWQgPyBtb2RpZmllcnMgOiBtb2RpZmllcnMuc2xpY2UoMCwgZmluZEluZGV4KG1vZGlmaWVycywgJ25hbWUnLCBlbmRzKSk7XG5cbiAgbW9kaWZpZXJzVG9SdW4uZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAobW9kaWZpZXJbJ2Z1bmN0aW9uJ10pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgICBjb25zb2xlLndhcm4oJ2Btb2RpZmllci5mdW5jdGlvbmAgaXMgZGVwcmVjYXRlZCwgdXNlIGBtb2RpZmllci5mbmAhJyk7XG4gICAgfVxuICAgIHZhciBmbiA9IG1vZGlmaWVyWydmdW5jdGlvbiddIHx8IG1vZGlmaWVyLmZuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgIGlmIChtb2RpZmllci5lbmFibGVkICYmIGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICAvLyBBZGQgcHJvcGVydGllcyB0byBvZmZzZXRzIHRvIG1ha2UgdGhlbSBhIGNvbXBsZXRlIGNsaWVudFJlY3Qgb2JqZWN0XG4gICAgICAvLyB3ZSBkbyB0aGlzIGJlZm9yZSBlYWNoIG1vZGlmaWVyIHRvIG1ha2Ugc3VyZSB0aGUgcHJldmlvdXMgb25lIGRvZXNuJ3RcbiAgICAgIC8vIG1lc3Mgd2l0aCB0aGVzZSB2YWx1ZXNcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuICAgICAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSk7XG5cbiAgICAgIGRhdGEgPSBmbihkYXRhLCBtb2RpZmllcik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLCBjb21wdXRpbmcgdGhlIG5ldyBvZmZzZXRzIGFuZCBhcHBseWluZ1xuICogdGhlIG5ldyBzdHlsZS48YnIgLz5cbiAqIFByZWZlciBgc2NoZWR1bGVVcGRhdGVgIG92ZXIgYHVwZGF0ZWAgYmVjYXVzZSBvZiBwZXJmb3JtYW5jZSByZWFzb25zLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiB1cGRhdGUoKSB7XG4gIC8vIGlmIHBvcHBlciBpcyBkZXN0cm95ZWQsIGRvbid0IHBlcmZvcm0gYW55IGZ1cnRoZXIgdXBkYXRlXG4gIGlmICh0aGlzLnN0YXRlLmlzRGVzdHJveWVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRhdGEgPSB7XG4gICAgaW5zdGFuY2U6IHRoaXMsXG4gICAgc3R5bGVzOiB7fSxcbiAgICBhcnJvd1N0eWxlczoge30sXG4gICAgYXR0cmlidXRlczoge30sXG4gICAgZmxpcHBlZDogZmFsc2UsXG4gICAgb2Zmc2V0czoge31cbiAgfTtcblxuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldFJlZmVyZW5jZU9mZnNldHModGhpcy5zdGF0ZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIGRhdGEucGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQodGhpcy5vcHRpb25zLnBsYWNlbWVudCwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtcblxuICAvLyBzdG9yZSB0aGUgY29tcHV0ZWQgcGxhY2VtZW50IGluc2lkZSBgb3JpZ2luYWxQbGFjZW1lbnRgXG4gIGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcblxuICBkYXRhLnBvc2l0aW9uRml4ZWQgPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZDtcblxuICAvLyBjb21wdXRlIHRoZSBwb3BwZXIgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0UG9wcGVyT2Zmc2V0cyh0aGlzLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIucG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnO1xuXG4gIC8vIHJ1biB0aGUgbW9kaWZpZXJzXG4gIGRhdGEgPSBydW5Nb2RpZmllcnModGhpcy5tb2RpZmllcnMsIGRhdGEpO1xuXG4gIC8vIHRoZSBmaXJzdCBgdXBkYXRlYCB3aWxsIGNhbGwgYG9uQ3JlYXRlYCBjYWxsYmFja1xuICAvLyB0aGUgb3RoZXIgb25lcyB3aWxsIGNhbGwgYG9uVXBkYXRlYCBjYWxsYmFja1xuICBpZiAoIXRoaXMuc3RhdGUuaXNDcmVhdGVkKSB7XG4gICAgdGhpcy5zdGF0ZS5pc0NyZWF0ZWQgPSB0cnVlO1xuICAgIHRoaXMub3B0aW9ucy5vbkNyZWF0ZShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm9wdGlvbnMub25VcGRhdGUoZGF0YSk7XG4gIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBpcyBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgbW9kaWZpZXJOYW1lKSB7XG4gIHJldHVybiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgICBlbmFibGVkID0gX3JlZi5lbmFibGVkO1xuICAgIHJldHVybiBlbmFibGVkICYmIG5hbWUgPT09IG1vZGlmaWVyTmFtZTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBwcmVmaXhlZCBzdXBwb3J0ZWQgcHJvcGVydHkgbmFtZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5IChjYW1lbENhc2UpXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBwcmVmaXhlZCBwcm9wZXJ0eSAoY2FtZWxDYXNlIG9yIFBhc2NhbENhc2UsIGRlcGVuZGluZyBvbiB0aGUgdmVuZG9yIHByZWZpeClcbiAqL1xuZnVuY3Rpb24gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKHByb3BlcnR5KSB7XG4gIHZhciBwcmVmaXhlcyA9IFtmYWxzZSwgJ21zJywgJ1dlYmtpdCcsICdNb3onLCAnTyddO1xuICB2YXIgdXBwZXJQcm9wID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldO1xuICAgIHZhciB0b0NoZWNrID0gcHJlZml4ID8gJycgKyBwcmVmaXggKyB1cHBlclByb3AgOiBwcm9wZXJ0eTtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50LmJvZHkuc3R5bGVbdG9DaGVja10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdG9DaGVjaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRGVzdHJveXMgdGhlIHBvcHBlci5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgdGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCA9IHRydWU7XG5cbiAgLy8gdG91Y2ggRE9NIG9ubHkgaWYgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGlzIGVuYWJsZWRcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKHRoaXMubW9kaWZpZXJzLCAnYXBwbHlTdHlsZScpKSB7XG4gICAgdGhpcy5wb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd4LXBsYWNlbWVudCcpO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnBvc2l0aW9uID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUudG9wID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUubGVmdCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnJpZ2h0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUuYm90dG9tID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUud2lsbENoYW5nZSA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlW2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyldID0gJyc7XG4gIH1cblxuICB0aGlzLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuXG4gIC8vIHJlbW92ZSB0aGUgcG9wcGVyIGlmIHVzZXIgZXhwbGljaXRseSBhc2tlZCBmb3IgdGhlIGRlbGV0aW9uIG9uIGRlc3Ryb3lcbiAgLy8gZG8gbm90IHVzZSBgcmVtb3ZlYCBiZWNhdXNlIElFMTEgZG9lc24ndCBzdXBwb3J0IGl0XG4gIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlT25EZXN0cm95KSB7XG4gICAgdGhpcy5wb3BwZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBvcHBlcik7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogR2V0IHRoZSB3aW5kb3cgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtXaW5kb3d9XG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvdyhlbGVtZW50KSB7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiB3aW5kb3c7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxQYXJlbnQsIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cykge1xuICB2YXIgaXNCb2R5ID0gc2Nyb2xsUGFyZW50Lm5vZGVOYW1lID09PSAnQk9EWSc7XG4gIHZhciB0YXJnZXQgPSBpc0JvZHkgPyBzY3JvbGxQYXJlbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHNjcm9sbFBhcmVudDtcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgaWYgKCFpc0JvZHkpIHtcbiAgICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoZ2V0U2Nyb2xsUGFyZW50KHRhcmdldC5wYXJlbnROb2RlKSwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKTtcbiAgfVxuICBzY3JvbGxQYXJlbnRzLnB1c2godGFyZ2V0KTtcbn1cblxuLyoqXG4gKiBTZXR1cCBuZWVkZWQgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNldHVwRXZlbnRMaXN0ZW5lcnMocmVmZXJlbmNlLCBvcHRpb25zLCBzdGF0ZSwgdXBkYXRlQm91bmQpIHtcbiAgLy8gUmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvd1xuICBzdGF0ZS51cGRhdGVCb3VuZCA9IHVwZGF0ZUJvdW5kO1xuICBnZXRXaW5kb3cocmVmZXJlbmNlKS5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIC8vIFNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xuICB2YXIgc2Nyb2xsRWxlbWVudCA9IGdldFNjcm9sbFBhcmVudChyZWZlcmVuY2UpO1xuICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsRWxlbWVudCwgJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kLCBzdGF0ZS5zY3JvbGxQYXJlbnRzKTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IHNjcm9sbEVsZW1lbnQ7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSB0cnVlO1xuXG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIGFkZCByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgc3RhcnQgcmVjYWxjdWxhdGluZ1xuICogcG9zaXRpb24gb2YgdGhlIHBvcHBlciBlbGVtZW50IHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKCF0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcbiAgICB0aGlzLnN0YXRlID0gc2V0dXBFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLCB0aGlzLnN0YXRlLCB0aGlzLnNjaGVkdWxlVXBkYXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMocmVmZXJlbmNlLCBzdGF0ZSkge1xuICAvLyBSZW1vdmUgcmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvd1xuICBnZXRXaW5kb3cocmVmZXJlbmNlKS5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCk7XG5cbiAgLy8gUmVtb3ZlIHNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCk7XG4gIH0pO1xuXG4gIC8vIFJlc2V0IHN0YXRlXG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gbnVsbDtcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IFtdO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gbnVsbDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGZhbHNlO1xuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCByZW1vdmUgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHdvbid0IHJlY2FsY3VsYXRlIHBvcHBlciBwb3NpdGlvblxuICogd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuIEl0IGFsc28gd29uJ3QgdHJpZ2dlciBgb25VcGRhdGVgIGNhbGxiYWNrIGFueW1vcmUsXG4gKiB1bmxlc3MgeW91IGNhbGwgYHVwZGF0ZWAgbWV0aG9kIG1hbnVhbGx5LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICh0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnNjaGVkdWxlVXBkYXRlKTtcbiAgICB0aGlzLnN0YXRlID0gcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMuc3RhdGUpO1xuICB9XG59XG5cbi8qKlxuICogVGVsbHMgaWYgYSBnaXZlbiBpbnB1dCBpcyBhIG51bWJlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHsqfSBpbnB1dCB0byBjaGVja1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNOdW1lcmljKG4pIHtcbiAgcmV0dXJuIG4gIT09ICcnICYmICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHN0eWxlIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIHN0eWxlIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5mdW5jdGlvbiBzZXRTdHlsZXMoZWxlbWVudCwgc3R5bGVzKSB7XG4gIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIHZhciB1bml0ID0gJyc7XG4gICAgLy8gYWRkIHVuaXQgaWYgdGhlIHZhbHVlIGlzIG51bWVyaWMgYW5kIGlzIG9uZSBvZiB0aGUgZm9sbG93aW5nXG4gICAgaWYgKFsnd2lkdGgnLCAnaGVpZ2h0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLmluZGV4T2YocHJvcCkgIT09IC0xICYmIGlzTnVtZXJpYyhzdHlsZXNbcHJvcF0pKSB7XG4gICAgICB1bml0ID0gJ3B4JztcbiAgICB9XG4gICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHN0eWxlc1twcm9wXSArIHVuaXQ7XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgYXR0cmlidXRlcyB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBhdHRyaWJ1dGVzIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbcHJvcF07XG4gICAgaWYgKHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUocHJvcCwgYXR0cmlidXRlc1twcm9wXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5zdHlsZXMgLSBMaXN0IG9mIHN0eWxlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLmF0dHJpYnV0ZXMgLSBMaXN0IG9mIGF0dHJpYnV0ZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgc2FtZSBkYXRhIG9iamVjdFxuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlKGRhdGEpIHtcbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuc3R5bGVzYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcixcbiAgLy8gaW4gdGhpcyB3YXkgd2UgY2FuIG1ha2UgdGhlIDNyZCBwYXJ0eSBtb2RpZmllcnMgYWRkIGN1c3RvbSBzdHlsZXMgdG8gaXRcbiAgLy8gQmUgYXdhcmUsIG1vZGlmaWVycyBjb3VsZCBvdmVycmlkZSB0aGUgcHJvcGVydGllcyBkZWZpbmVkIGluIHRoZSBwcmV2aW91c1xuICAvLyBsaW5lcyBvZiB0aGlzIG1vZGlmaWVyIVxuICBzZXRTdHlsZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuc3R5bGVzKTtcblxuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5hdHRyaWJ1dGVzYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcixcbiAgLy8gdGhleSB3aWxsIGJlIHNldCBhcyBIVE1MIGF0dHJpYnV0ZXMgb2YgdGhlIGVsZW1lbnRcbiAgc2V0QXR0cmlidXRlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5hdHRyaWJ1dGVzKTtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgZGVmaW5lZCBhbmQgYXJyb3dTdHlsZXMgaGFzIHNvbWUgcHJvcGVydGllc1xuICBpZiAoZGF0YS5hcnJvd0VsZW1lbnQgJiYgT2JqZWN0LmtleXMoZGF0YS5hcnJvd1N0eWxlcykubGVuZ3RoKSB7XG4gICAgc2V0U3R5bGVzKGRhdGEuYXJyb3dFbGVtZW50LCBkYXRhLmFycm93U3R5bGVzKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFNldCB0aGUgeC1wbGFjZW1lbnQgYXR0cmlidXRlIGJlZm9yZSBldmVyeXRoaW5nIGVsc2UgYmVjYXVzZSBpdCBjb3VsZCBiZSB1c2VkXG4gKiB0byBhZGQgbWFyZ2lucyB0byB0aGUgcG9wcGVyIG1hcmdpbnMgbmVlZHMgdG8gYmUgY2FsY3VsYXRlZCB0byBnZXQgdGhlXG4gKiBjb3JyZWN0IHBvcHBlciBvZmZzZXRzLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5tb2RpZmllcnNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIGVsZW1lbnQgdXNlZCBhcyBwb3BwZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUG9wcGVyLmpzIG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsZU9uTG9hZChyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBzdGF0ZSkge1xuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgdmFyIHJlZmVyZW5jZU9mZnNldHMgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSwgb3B0aW9ucy5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgdmFyIHBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KG9wdGlvbnMucGxhY2VtZW50LCByZWZlcmVuY2VPZmZzZXRzLCBwb3BwZXIsIHJlZmVyZW5jZSwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtcblxuICBwb3BwZXIuc2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcsIHBsYWNlbWVudCk7XG5cbiAgLy8gQXBwbHkgYHBvc2l0aW9uYCB0byBwb3BwZXIgYmVmb3JlIGFueXRoaW5nIGVsc2UgYmVjYXVzZVxuICAvLyB3aXRob3V0IHRoZSBwb3NpdGlvbiBhcHBsaWVkIHdlIGNhbid0IGd1YXJhbnRlZSBjb3JyZWN0IGNvbXB1dGF0aW9uc1xuICBzZXRTdHlsZXMocG9wcGVyLCB7IHBvc2l0aW9uOiBvcHRpb25zLnBvc2l0aW9uRml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJyB9KTtcblxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gc2hvdWxkUm91bmQgLSBJZiB0aGUgb2Zmc2V0cyBzaG91bGQgYmUgcm91bmRlZCBhdCBhbGxcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBwb3BwZXIncyBwb3NpdGlvbiBvZmZzZXRzIHJvdW5kZWRcbiAqXG4gKiBUaGUgdGFsZSBvZiBwaXhlbC1wZXJmZWN0IHBvc2l0aW9uaW5nLiBJdCdzIHN0aWxsIG5vdCAxMDAlIHBlcmZlY3QsIGJ1dCBhc1xuICogZ29vZCBhcyBpdCBjYW4gYmUgd2l0aGluIHJlYXNvbi5cbiAqIERpc2N1c3Npb24gaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvcHVsbC83MTVcbiAqXG4gKiBMb3cgRFBJIHNjcmVlbnMgY2F1c2UgYSBwb3BwZXIgdG8gYmUgYmx1cnJ5IGlmIG5vdCB1c2luZyBmdWxsIHBpeGVscyAoU2FmYXJpXG4gKiBhcyB3ZWxsIG9uIEhpZ2ggRFBJIHNjcmVlbnMpLlxuICpcbiAqIEZpcmVmb3ggcHJlZmVycyBubyByb3VuZGluZyBmb3IgcG9zaXRpb25pbmcgYW5kIGRvZXMgbm90IGhhdmUgYmx1cnJpbmVzcyBvblxuICogaGlnaCBEUEkgc2NyZWVucy5cbiAqXG4gKiBPbmx5IGhvcml6b250YWwgcGxhY2VtZW50IGFuZCBsZWZ0L3JpZ2h0IHZhbHVlcyBuZWVkIHRvIGJlIGNvbnNpZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIGdldFJvdW5kZWRPZmZzZXRzKGRhdGEsIHNob3VsZFJvdW5kKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcbiAgdmFyIHJvdW5kID0gTWF0aC5yb3VuZCxcbiAgICAgIGZsb29yID0gTWF0aC5mbG9vcjtcblxuICB2YXIgbm9Sb3VuZCA9IGZ1bmN0aW9uIG5vUm91bmQodikge1xuICAgIHJldHVybiB2O1xuICB9O1xuXG4gIHZhciByZWZlcmVuY2VXaWR0aCA9IHJvdW5kKHJlZmVyZW5jZS53aWR0aCk7XG4gIHZhciBwb3BwZXJXaWR0aCA9IHJvdW5kKHBvcHBlci53aWR0aCk7XG5cbiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGRhdGEucGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBpc1ZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LmluZGV4T2YoJy0nKSAhPT0gLTE7XG4gIHZhciBzYW1lV2lkdGhQYXJpdHkgPSByZWZlcmVuY2VXaWR0aCAlIDIgPT09IHBvcHBlcldpZHRoICUgMjtcbiAgdmFyIGJvdGhPZGRXaWR0aCA9IHJlZmVyZW5jZVdpZHRoICUgMiA9PT0gMSAmJiBwb3BwZXJXaWR0aCAlIDIgPT09IDE7XG5cbiAgdmFyIGhvcml6b250YWxUb0ludGVnZXIgPSAhc2hvdWxkUm91bmQgPyBub1JvdW5kIDogaXNWZXJ0aWNhbCB8fCBpc1ZhcmlhdGlvbiB8fCBzYW1lV2lkdGhQYXJpdHkgPyByb3VuZCA6IGZsb29yO1xuICB2YXIgdmVydGljYWxUb0ludGVnZXIgPSAhc2hvdWxkUm91bmQgPyBub1JvdW5kIDogcm91bmQ7XG5cbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBob3Jpem9udGFsVG9JbnRlZ2VyKGJvdGhPZGRXaWR0aCAmJiAhaXNWYXJpYXRpb24gJiYgc2hvdWxkUm91bmQgPyBwb3BwZXIubGVmdCAtIDEgOiBwb3BwZXIubGVmdCksXG4gICAgdG9wOiB2ZXJ0aWNhbFRvSW50ZWdlcihwb3BwZXIudG9wKSxcbiAgICBib3R0b206IHZlcnRpY2FsVG9JbnRlZ2VyKHBvcHBlci5ib3R0b20pLFxuICAgIHJpZ2h0OiBob3Jpem9udGFsVG9JbnRlZ2VyKHBvcHBlci5yaWdodClcbiAgfTtcbn1cblxudmFyIGlzRmlyZWZveCA9IGlzQnJvd3NlciAmJiAvRmlyZWZveC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZShkYXRhLCBvcHRpb25zKSB7XG4gIHZhciB4ID0gb3B0aW9ucy54LFxuICAgICAgeSA9IG9wdGlvbnMueTtcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgLy8gUmVtb3ZlIHRoaXMgbGVnYWN5IHN1cHBvcnQgaW4gUG9wcGVyLmpzIHYyXG5cbiAgdmFyIGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA9IGZpbmQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAnYXBwbHlTdHlsZSc7XG4gIH0pLmdwdUFjY2VsZXJhdGlvbjtcbiAgaWYgKGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgZ3B1QWNjZWxlcmF0aW9uYCBvcHRpb24gbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXIgYW5kIHdpbGwgbm90IGJlIHN1cHBvcnRlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgUG9wcGVyLmpzIScpO1xuICB9XG4gIHZhciBncHVBY2NlbGVyYXRpb24gPSBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCA/IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA6IG9wdGlvbnMuZ3B1QWNjZWxlcmF0aW9uO1xuXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgb2Zmc2V0UGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQpO1xuXG4gIC8vIFN0eWxlc1xuICB2YXIgc3R5bGVzID0ge1xuICAgIHBvc2l0aW9uOiBwb3BwZXIucG9zaXRpb25cbiAgfTtcblxuICB2YXIgb2Zmc2V0cyA9IGdldFJvdW5kZWRPZmZzZXRzKGRhdGEsIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIDwgMiB8fCAhaXNGaXJlZm94KTtcblxuICB2YXIgc2lkZUEgPSB4ID09PSAnYm90dG9tJyA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gIHZhciBzaWRlQiA9IHkgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuXG4gIC8vIGlmIGdwdUFjY2VsZXJhdGlvbiBpcyBzZXQgdG8gYHRydWVgIGFuZCB0cmFuc2Zvcm0gaXMgc3VwcG9ydGVkLFxuICAvLyAgd2UgdXNlIGB0cmFuc2xhdGUzZGAgdG8gYXBwbHkgdGhlIHBvc2l0aW9uIHRvIHRoZSBwb3BwZXIgd2VcbiAgLy8gYXV0b21hdGljYWxseSB1c2UgdGhlIHN1cHBvcnRlZCBwcmVmaXhlZCB2ZXJzaW9uIGlmIG5lZWRlZFxuICB2YXIgcHJlZml4ZWRQcm9wZXJ0eSA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7XG5cbiAgLy8gbm93LCBsZXQncyBtYWtlIGEgc3RlcCBiYWNrIGFuZCBsb29rIGF0IHRoaXMgY29kZSBjbG9zZWx5ICh3dGY/KVxuICAvLyBJZiB0aGUgY29udGVudCBvZiB0aGUgcG9wcGVyIGdyb3dzIG9uY2UgaXQncyBiZWVuIHBvc2l0aW9uZWQsIGl0XG4gIC8vIG1heSBoYXBwZW4gdGhhdCB0aGUgcG9wcGVyIGdldHMgbWlzcGxhY2VkIGJlY2F1c2Ugb2YgdGhlIG5ldyBjb250ZW50XG4gIC8vIG92ZXJmbG93aW5nIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUbyBhdm9pZCB0aGlzIHByb2JsZW0sIHdlIHByb3ZpZGUgdHdvIG9wdGlvbnMgKHggYW5kIHkpLCB3aGljaCBhbGxvd1xuICAvLyB0aGUgY29uc3VtZXIgdG8gZGVmaW5lIHRoZSBvZmZzZXQgb3JpZ2luLlxuICAvLyBJZiB3ZSBwb3NpdGlvbiBhIHBvcHBlciBvbiB0b3Agb2YgYSByZWZlcmVuY2UgZWxlbWVudCwgd2UgY2FuIHNldFxuICAvLyBgeGAgdG8gYHRvcGAgdG8gbWFrZSB0aGUgcG9wcGVyIGdyb3cgdG93YXJkcyBpdHMgdG9wIGluc3RlYWQgb2ZcbiAgLy8gaXRzIGJvdHRvbS5cbiAgdmFyIGxlZnQgPSB2b2lkIDAsXG4gICAgICB0b3AgPSB2b2lkIDA7XG4gIGlmIChzaWRlQSA9PT0gJ2JvdHRvbScpIHtcbiAgICAvLyB3aGVuIG9mZnNldFBhcmVudCBpcyA8aHRtbD4gdGhlIHBvc2l0aW9uaW5nIGlzIHJlbGF0aXZlIHRvIHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbiAoZXhjbHVkaW5nIHRoZSBzY3JvbGxiYXIpXG4gICAgLy8gYW5kIG5vdCB0aGUgYm90dG9tIG9mIHRoZSBodG1sIGVsZW1lbnRcbiAgICBpZiAob2Zmc2V0UGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICAgIHRvcCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvcCA9IC1vZmZzZXRQYXJlbnRSZWN0LmhlaWdodCArIG9mZnNldHMuYm90dG9tO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0b3AgPSBvZmZzZXRzLnRvcDtcbiAgfVxuICBpZiAoc2lkZUIgPT09ICdyaWdodCcpIHtcbiAgICBpZiAob2Zmc2V0UGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICAgIGxlZnQgPSAtb2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoICsgb2Zmc2V0cy5yaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnRSZWN0LndpZHRoICsgb2Zmc2V0cy5yaWdodDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGVmdCA9IG9mZnNldHMubGVmdDtcbiAgfVxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uICYmIHByZWZpeGVkUHJvcGVydHkpIHtcbiAgICBzdHlsZXNbcHJlZml4ZWRQcm9wZXJ0eV0gPSAndHJhbnNsYXRlM2QoJyArIGxlZnQgKyAncHgsICcgKyB0b3AgKyAncHgsIDApJztcbiAgICBzdHlsZXNbc2lkZUFdID0gMDtcbiAgICBzdHlsZXNbc2lkZUJdID0gMDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9ICd0cmFuc2Zvcm0nO1xuICB9IGVsc2Uge1xuICAgIC8vIG90aHdlcmlzZSwgd2UgdXNlIHRoZSBzdGFuZGFyZCBgdG9wYCwgYGxlZnRgLCBgYm90dG9tYCBhbmQgYHJpZ2h0YCBwcm9wZXJ0aWVzXG4gICAgdmFyIGludmVydFRvcCA9IHNpZGVBID09PSAnYm90dG9tJyA/IC0xIDogMTtcbiAgICB2YXIgaW52ZXJ0TGVmdCA9IHNpZGVCID09PSAncmlnaHQnID8gLTEgOiAxO1xuICAgIHN0eWxlc1tzaWRlQV0gPSB0b3AgKiBpbnZlcnRUb3A7XG4gICAgc3R5bGVzW3NpZGVCXSA9IGxlZnQgKiBpbnZlcnRMZWZ0O1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gc2lkZUEgKyAnLCAnICsgc2lkZUI7XG4gIH1cblxuICAvLyBBdHRyaWJ1dGVzXG4gIHZhciBhdHRyaWJ1dGVzID0ge1xuICAgICd4LXBsYWNlbWVudCc6IGRhdGEucGxhY2VtZW50XG4gIH07XG5cbiAgLy8gVXBkYXRlIGBkYXRhYCBhdHRyaWJ1dGVzLCBzdHlsZXMgYW5kIGFycm93U3R5bGVzXG4gIGRhdGEuYXR0cmlidXRlcyA9IF9leHRlbmRzKHt9LCBhdHRyaWJ1dGVzLCBkYXRhLmF0dHJpYnV0ZXMpO1xuICBkYXRhLnN0eWxlcyA9IF9leHRlbmRzKHt9LCBzdHlsZXMsIGRhdGEuc3R5bGVzKTtcbiAgZGF0YS5hcnJvd1N0eWxlcyA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMuYXJyb3csIGRhdGEuYXJyb3dTdHlsZXMpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGRlcGVuZHMgZnJvbSBhbm90aGVyIG9uZS48YnIgLz5cbiAqIEl0IGNoZWNrcyBpZiB0aGUgbmVlZGVkIG1vZGlmaWVyIGlzIGxpc3RlZCBhbmQgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVycyAtIGxpc3Qgb2YgbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGluZ05hbWUgLSBuYW1lIG9mIHJlcXVlc3RpbmcgbW9kaWZpZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0ZWROYW1lIC0gbmFtZSBvZiByZXF1ZXN0ZWQgbW9kaWZpZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc01vZGlmaWVyUmVxdWlyZWQobW9kaWZpZXJzLCByZXF1ZXN0aW5nTmFtZSwgcmVxdWVzdGVkTmFtZSkge1xuICB2YXIgcmVxdWVzdGluZyA9IGZpbmQobW9kaWZpZXJzLCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgIHJldHVybiBuYW1lID09PSByZXF1ZXN0aW5nTmFtZTtcbiAgfSk7XG5cbiAgdmFyIGlzUmVxdWlyZWQgPSAhIXJlcXVlc3RpbmcgJiYgbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09IHJlcXVlc3RlZE5hbWUgJiYgbW9kaWZpZXIuZW5hYmxlZCAmJiBtb2RpZmllci5vcmRlciA8IHJlcXVlc3Rpbmcub3JkZXI7XG4gIH0pO1xuXG4gIGlmICghaXNSZXF1aXJlZCkge1xuICAgIHZhciBfcmVxdWVzdGluZyA9ICdgJyArIHJlcXVlc3RpbmdOYW1lICsgJ2AnO1xuICAgIHZhciByZXF1ZXN0ZWQgPSAnYCcgKyByZXF1ZXN0ZWROYW1lICsgJ2AnO1xuICAgIGNvbnNvbGUud2FybihyZXF1ZXN0ZWQgKyAnIG1vZGlmaWVyIGlzIHJlcXVpcmVkIGJ5ICcgKyBfcmVxdWVzdGluZyArICcgbW9kaWZpZXIgaW4gb3JkZXIgdG8gd29yaywgYmUgc3VyZSB0byBpbmNsdWRlIGl0IGJlZm9yZSAnICsgX3JlcXVlc3RpbmcgKyAnIScpO1xuICB9XG4gIHJldHVybiBpc1JlcXVpcmVkO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gYXJyb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyRhcnJvdztcblxuICAvLyBhcnJvdyBkZXBlbmRzIG9uIGtlZXBUb2dldGhlciBpbiBvcmRlciB0byB3b3JrXG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnYXJyb3cnLCAna2VlcFRvZ2V0aGVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBhcnJvd0VsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQ7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGEgc3RyaW5nLCBzdXBwb3NlIGl0J3MgYSBDU1Mgc2VsZWN0b3JcbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIG5vdCBmb3VuZCwgZG9uJ3QgcnVuIHRoZSBtb2RpZmllclxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgdGhlIGFycm93RWxlbWVudCBpc24ndCBhIHF1ZXJ5IHNlbGVjdG9yIHdlIG11c3QgY2hlY2sgdGhhdCB0aGVcbiAgICAvLyBwcm92aWRlZCBET00gbm9kZSBpcyBjaGlsZCBvZiBpdHMgcG9wcGVyIG5vZGVcbiAgICBpZiAoIWRhdGEuaW5zdGFuY2UucG9wcGVyLmNvbnRhaW5zKGFycm93RWxlbWVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGFycm93LmVsZW1lbnRgIG11c3QgYmUgY2hpbGQgb2YgaXRzIHBvcHBlciBlbGVtZW50IScpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIHZhciBzaWRlQ2FwaXRhbGl6ZWQgPSBpc1ZlcnRpY2FsID8gJ1RvcCcgOiAnTGVmdCc7XG4gIHZhciBzaWRlID0gc2lkZUNhcGl0YWxpemVkLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBhbHRTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdib3R0b20nIDogJ3JpZ2h0JztcbiAgdmFyIGFycm93RWxlbWVudFNpemUgPSBnZXRPdXRlclNpemVzKGFycm93RWxlbWVudClbbGVuXTtcblxuICAvL1xuICAvLyBleHRlbmRzIGtlZXBUb2dldGhlciBiZWhhdmlvciBtYWtpbmcgc3VyZSB0aGUgcG9wcGVyIGFuZCBpdHNcbiAgLy8gcmVmZXJlbmNlIGhhdmUgZW5vdWdoIHBpeGVscyBpbiBjb25qdW5jdGlvblxuICAvL1xuXG4gIC8vIHRvcC9sZWZ0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSA8IHBvcHBlcltzaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLT0gcG9wcGVyW3NpZGVdIC0gKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSk7XG4gIH1cbiAgLy8gYm90dG9tL3JpZ2h0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgPiBwb3BwZXJbb3BTaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gKz0gcmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSAtIHBvcHBlcltvcFNpZGVdO1xuICB9XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuXG4gIC8vIGNvbXB1dGUgY2VudGVyIG9mIHRoZSBwb3BwZXJcbiAgdmFyIGNlbnRlciA9IHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVtsZW5dIC8gMiAtIGFycm93RWxlbWVudFNpemUgLyAyO1xuXG4gIC8vIENvbXB1dGUgdGhlIHNpZGVWYWx1ZSB1c2luZyB0aGUgdXBkYXRlZCBwb3BwZXIgb2Zmc2V0c1xuICAvLyB0YWtlIHBvcHBlciBtYXJnaW4gaW4gYWNjb3VudCBiZWNhdXNlIHdlIGRvbid0IGhhdmUgdGhpcyBpbmZvIGF2YWlsYWJsZVxuICB2YXIgY3NzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIHBvcHBlck1hcmdpblNpZGUgPSBwYXJzZUZsb2F0KGNzc1snbWFyZ2luJyArIHNpZGVDYXBpdGFsaXplZF0sIDEwKTtcbiAgdmFyIHBvcHBlckJvcmRlclNpZGUgPSBwYXJzZUZsb2F0KGNzc1snYm9yZGVyJyArIHNpZGVDYXBpdGFsaXplZCArICdXaWR0aCddLCAxMCk7XG4gIHZhciBzaWRlVmFsdWUgPSBjZW50ZXIgLSBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC0gcG9wcGVyTWFyZ2luU2lkZSAtIHBvcHBlckJvcmRlclNpZGU7XG5cbiAgLy8gcHJldmVudCBhcnJvd0VsZW1lbnQgZnJvbSBiZWluZyBwbGFjZWQgbm90IGNvbnRpZ3VvdXNseSB0byBpdHMgcG9wcGVyXG4gIHNpZGVWYWx1ZSA9IE1hdGgubWF4KE1hdGgubWluKHBvcHBlcltsZW5dIC0gYXJyb3dFbGVtZW50U2l6ZSwgc2lkZVZhbHVlKSwgMCk7XG5cbiAgZGF0YS5hcnJvd0VsZW1lbnQgPSBhcnJvd0VsZW1lbnQ7XG4gIGRhdGEub2Zmc2V0cy5hcnJvdyA9IChfZGF0YSRvZmZzZXRzJGFycm93ID0ge30sIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIHNpZGUsIE1hdGgucm91bmQoc2lkZVZhbHVlKSksIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIGFsdFNpZGUsICcnKSwgX2RhdGEkb2Zmc2V0cyRhcnJvdyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgdmFyaWF0aW9uIG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudCB2YXJpYXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKSB7XG4gIGlmICh2YXJpYXRpb24gPT09ICdlbmQnKSB7XG4gICAgcmV0dXJuICdzdGFydCc7XG4gIH0gZWxzZSBpZiAodmFyaWF0aW9uID09PSAnc3RhcnQnKSB7XG4gICAgcmV0dXJuICdlbmQnO1xuICB9XG4gIHJldHVybiB2YXJpYXRpb247XG59XG5cbi8qKlxuICogTGlzdCBvZiBhY2NlcHRlZCBwbGFjZW1lbnRzIHRvIHVzZSBhcyB2YWx1ZXMgb2YgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbi48YnIgLz5cbiAqIFZhbGlkIHBsYWNlbWVudHMgYXJlOlxuICogLSBgYXV0b2BcbiAqIC0gYHRvcGBcbiAqIC0gYHJpZ2h0YFxuICogLSBgYm90dG9tYFxuICogLSBgbGVmdGBcbiAqXG4gKiBFYWNoIHBsYWNlbWVudCBjYW4gaGF2ZSBhIHZhcmlhdGlvbiBmcm9tIHRoaXMgbGlzdDpcbiAqIC0gYC1zdGFydGBcbiAqIC0gYC1lbmRgXG4gKlxuICogVmFyaWF0aW9ucyBhcmUgaW50ZXJwcmV0ZWQgZWFzaWx5IGlmIHlvdSB0aGluayBvZiB0aGVtIGFzIHRoZSBsZWZ0IHRvIHJpZ2h0XG4gKiB3cml0dGVuIGxhbmd1YWdlcy4gSG9yaXpvbnRhbGx5IChgdG9wYCBhbmQgYGJvdHRvbWApLCBgc3RhcnRgIGlzIGxlZnQgYW5kIGBlbmRgXG4gKiBpcyByaWdodC48YnIgLz5cbiAqIFZlcnRpY2FsbHkgKGBsZWZ0YCBhbmQgYHJpZ2h0YCksIGBzdGFydGAgaXMgdG9wIGFuZCBgZW5kYCBpcyBib3R0b20uXG4gKlxuICogU29tZSB2YWxpZCBleGFtcGxlcyBhcmU6XG4gKiAtIGB0b3AtZW5kYCAob24gdG9wIG9mIHJlZmVyZW5jZSwgcmlnaHQgYWxpZ25lZClcbiAqIC0gYHJpZ2h0LXN0YXJ0YCAob24gcmlnaHQgb2YgcmVmZXJlbmNlLCB0b3AgYWxpZ25lZClcbiAqIC0gYGJvdHRvbWAgKG9uIGJvdHRvbSwgY2VudGVyZWQpXG4gKiAtIGBhdXRvLWVuZGAgKG9uIHRoZSBzaWRlIHdpdGggbW9yZSBzcGFjZSBhdmFpbGFibGUsIGFsaWdubWVudCBkZXBlbmRzIGJ5IHBsYWNlbWVudClcbiAqXG4gKiBAc3RhdGljXG4gKiBAdHlwZSB7QXJyYXl9XG4gKiBAZW51bSB7U3RyaW5nfVxuICogQHJlYWRvbmx5XG4gKiBAbWV0aG9kIHBsYWNlbWVudHNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIHBsYWNlbWVudHMgPSBbJ2F1dG8tc3RhcnQnLCAnYXV0bycsICdhdXRvLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJywgJ3RvcC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAncmlnaHQtZW5kJywgJ2JvdHRvbS1lbmQnLCAnYm90dG9tJywgJ2JvdHRvbS1zdGFydCcsICdsZWZ0LWVuZCcsICdsZWZ0JywgJ2xlZnQtc3RhcnQnXTtcblxuLy8gR2V0IHJpZCBvZiBgYXV0b2AgYGF1dG8tc3RhcnRgIGFuZCBgYXV0by1lbmRgXG52YXIgdmFsaWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5zbGljZSgzKTtcblxuLyoqXG4gKiBHaXZlbiBhbiBpbml0aWFsIHBsYWNlbWVudCwgcmV0dXJucyBhbGwgdGhlIHN1YnNlcXVlbnQgcGxhY2VtZW50c1xuICogY2xvY2t3aXNlIChvciBjb3VudGVyLWNsb2Nrd2lzZSkuXG4gKlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCAtIEEgdmFsaWQgcGxhY2VtZW50IChpdCBhY2NlcHRzIHZhcmlhdGlvbnMpXG4gKiBAYXJndW1lbnQge0Jvb2xlYW59IGNvdW50ZXIgLSBTZXQgdG8gdHJ1ZSB0byB3YWxrIHRoZSBwbGFjZW1lbnRzIGNvdW50ZXJjbG9ja3dpc2VcbiAqIEByZXR1cm5zIHtBcnJheX0gcGxhY2VtZW50cyBpbmNsdWRpbmcgdGhlaXIgdmFyaWF0aW9uc1xuICovXG5mdW5jdGlvbiBjbG9ja3dpc2UocGxhY2VtZW50KSB7XG4gIHZhciBjb3VudGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICB2YXIgaW5kZXggPSB2YWxpZFBsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpO1xuICB2YXIgYXJyID0gdmFsaWRQbGFjZW1lbnRzLnNsaWNlKGluZGV4ICsgMSkuY29uY2F0KHZhbGlkUGxhY2VtZW50cy5zbGljZSgwLCBpbmRleCkpO1xuICByZXR1cm4gY291bnRlciA/IGFyci5yZXZlcnNlKCkgOiBhcnI7XG59XG5cbnZhciBCRUhBVklPUlMgPSB7XG4gIEZMSVA6ICdmbGlwJyxcbiAgQ0xPQ0tXSVNFOiAnY2xvY2t3aXNlJyxcbiAgQ09VTlRFUkNMT0NLV0lTRTogJ2NvdW50ZXJjbG9ja3dpc2UnXG59O1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gZmxpcChkYXRhLCBvcHRpb25zKSB7XG4gIC8vIGlmIGBpbm5lcmAgbW9kaWZpZXIgaXMgZW5hYmxlZCwgd2UgY2FuJ3QgdXNlIHRoZSBgZmxpcGAgbW9kaWZpZXJcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaW5uZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgaWYgKGRhdGEuZmxpcHBlZCAmJiBkYXRhLnBsYWNlbWVudCA9PT0gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCkge1xuICAgIC8vIHNlZW1zIGxpa2UgZmxpcCBpcyB0cnlpbmcgdG8gbG9vcCwgcHJvYmFibHkgdGhlcmUncyBub3QgZW5vdWdoIHNwYWNlIG9uIGFueSBvZiB0aGUgZmxpcHBhYmxlIHNpZGVzXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQsIGRhdGEucG9zaXRpb25GaXhlZCk7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHZhciB2YXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzFdIHx8ICcnO1xuXG4gIHZhciBmbGlwT3JkZXIgPSBbXTtcblxuICBzd2l0Y2ggKG9wdGlvbnMuYmVoYXZpb3IpIHtcbiAgICBjYXNlIEJFSEFWSU9SUy5GTElQOlxuICAgICAgZmxpcE9yZGVyID0gW3BsYWNlbWVudCwgcGxhY2VtZW50T3Bwb3NpdGVdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DT1VOVEVSQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCwgdHJ1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZmxpcE9yZGVyID0gb3B0aW9ucy5iZWhhdmlvcjtcbiAgfVxuXG4gIGZsaXBPcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChzdGVwLCBpbmRleCkge1xuICAgIGlmIChwbGFjZW1lbnQgIT09IHN0ZXAgfHwgZmxpcE9yZGVyLmxlbmd0aCA9PT0gaW5kZXggKyAxKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICAgIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIHZhciBwb3BwZXJPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcbiAgICB2YXIgcmVmT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgICAvLyB1c2luZyBmbG9vciBiZWNhdXNlIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyBtYXkgY29udGFpbiBkZWNpbWFscyB3ZSBhcmUgbm90IGdvaW5nIHRvIGNvbnNpZGVyIGhlcmVcbiAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICAgIHZhciBvdmVybGFwc1JlZiA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IocmVmT2Zmc2V0cy5sZWZ0KSB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKHJlZk9mZnNldHMucmlnaHQpIHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IocmVmT2Zmc2V0cy50b3ApIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IocmVmT2Zmc2V0cy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0xlZnQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IoYm91bmRhcmllcy5sZWZ0KTtcbiAgICB2YXIgb3ZlcmZsb3dzUmlnaHQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKGJvdW5kYXJpZXMucmlnaHQpO1xuICAgIHZhciBvdmVyZmxvd3NUb3AgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihib3VuZGFyaWVzLnRvcCk7XG4gICAgdmFyIG92ZXJmbG93c0JvdHRvbSA9IGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKGJvdW5kYXJpZXMuYm90dG9tKTtcblxuICAgIHZhciBvdmVyZmxvd3NCb3VuZGFyaWVzID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBvdmVyZmxvd3NUb3AgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBvdmVyZmxvd3NCb3R0b207XG5cbiAgICAvLyBmbGlwIHRoZSB2YXJpYXRpb24gaWYgcmVxdWlyZWRcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgICAvLyBmbGlwcyB2YXJpYXRpb24gaWYgcmVmZXJlbmNlIGVsZW1lbnQgb3ZlcmZsb3dzIGJvdW5kYXJpZXNcbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbkJ5UmVmID0gISFvcHRpb25zLmZsaXBWYXJpYXRpb25zICYmIChpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NSaWdodCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzVG9wIHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzQm90dG9tKTtcblxuICAgIC8vIGZsaXBzIHZhcmlhdGlvbiBpZiBwb3BwZXIgY29udGVudCBvdmVyZmxvd3MgYm91bmRhcmllc1xuICAgIHZhciBmbGlwcGVkVmFyaWF0aW9uQnlDb250ZW50ID0gISFvcHRpb25zLmZsaXBWYXJpYXRpb25zQnlDb250ZW50ICYmIChpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzQm90dG9tIHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzVG9wKTtcblxuICAgIHZhciBmbGlwcGVkVmFyaWF0aW9uID0gZmxpcHBlZFZhcmlhdGlvbkJ5UmVmIHx8IGZsaXBwZWRWYXJpYXRpb25CeUNvbnRlbnQ7XG5cbiAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcyB8fCBmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAvLyB0aGlzIGJvb2xlYW4gdG8gZGV0ZWN0IGFueSBmbGlwIGxvb3BcbiAgICAgIGRhdGEuZmxpcHBlZCA9IHRydWU7XG5cbiAgICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IGZsaXBPcmRlcltpbmRleCArIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgICB2YXJpYXRpb24gPSBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkYXRhLnBsYWNlbWVudCA9IHBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG5cbiAgICAgIC8vIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGBwb3NpdGlvbmAsIHdlIHdhbnQgdG8gcHJlc2VydmUgaXQgYWxvbmcgd2l0aFxuICAgICAgLy8gYW55IGFkZGl0aW9uYWwgcHJvcGVydHkgd2UgbWF5IGFkZCBpbiB0aGUgZnV0dXJlXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5wb3BwZXIsIGdldFBvcHBlck9mZnNldHMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KSk7XG5cbiAgICAgIGRhdGEgPSBydW5Nb2RpZmllcnMoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGRhdGEsICdmbGlwJyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBrZWVwVG9nZXRoZXIoZGF0YSkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gIGlmIChwb3BwZXJbc2lkZV0gPCBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkgLSBwb3BwZXJbbWVhc3VyZW1lbnRdO1xuICB9XG4gIGlmIChwb3BwZXJbb3BTaWRlXSA+IGZsb29yKHJlZmVyZW5jZVtzaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgY29udGFpbmluZyB2YWx1ZSArIHVuaXQgaW50byBhIHB4IHZhbHVlIG51bWJlclxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHN0ciAtIFZhbHVlICsgdW5pdCBzdHJpbmdcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGBcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQHJldHVybnMge051bWJlcnxTdHJpbmd9XG4gKiBWYWx1ZSBpbiBwaXhlbHMsIG9yIG9yaWdpbmFsIHN0cmluZyBpZiBubyB2YWx1ZXMgd2VyZSBleHRyYWN0ZWRcbiAqL1xuZnVuY3Rpb24gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKSB7XG4gIC8vIHNlcGFyYXRlIHZhbHVlIGZyb20gdW5pdFxuICB2YXIgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcXC18XFwrKT9cXGQqXFwuP1xcZCopKC4qKS8pO1xuICB2YXIgdmFsdWUgPSArc3BsaXRbMV07XG4gIHZhciB1bml0ID0gc3BsaXRbMl07XG5cbiAgLy8gSWYgaXQncyBub3QgYSBudW1iZXIgaXQncyBhbiBvcGVyYXRvciwgSSBndWVzc1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGlmICh1bml0LmluZGV4T2YoJyUnKSA9PT0gMCkge1xuICAgIHZhciBlbGVtZW50ID0gdm9pZCAwO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAnJXAnOlxuICAgICAgICBlbGVtZW50ID0gcG9wcGVyT2Zmc2V0cztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICclJzpcbiAgICAgIGNhc2UgJyVyJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVsZW1lbnQgPSByZWZlcmVuY2VPZmZzZXRzO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdChlbGVtZW50KTtcbiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh1bml0ID09PSAndmgnIHx8IHVuaXQgPT09ICd2dycpIHtcbiAgICAvLyBpZiBpcyBhIHZoIG9yIHZ3LCB3ZSBjYWxjdWxhdGUgdGhlIHNpemUgYmFzZWQgb24gdGhlIHZpZXdwb3J0XG4gICAgdmFyIHNpemUgPSB2b2lkIDA7XG4gICAgaWYgKHVuaXQgPT09ICd2aCcpIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIGlzIGFuIGV4cGxpY2l0IHBpeGVsIHVuaXQsIHdlIGdldCByaWQgb2YgdGhlIHVuaXQgYW5kIGtlZXAgdGhlIHZhbHVlXG4gICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gb2Zmc2V0XG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBiYXNlUGxhY2VtZW50XG4gKiBAcmV0dXJucyB7QXJyYXl9IGEgdHdvIGNlbGxzIGFycmF5IHdpdGggeCBhbmQgeSBvZmZzZXRzIGluIG51bWJlcnNcbiAqL1xuZnVuY3Rpb24gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzLCBiYXNlUGxhY2VtZW50KSB7XG4gIHZhciBvZmZzZXRzID0gWzAsIDBdO1xuXG4gIC8vIFVzZSBoZWlnaHQgaWYgcGxhY2VtZW50IGlzIGxlZnQgb3IgcmlnaHQgYW5kIGluZGV4IGlzIDAgb3RoZXJ3aXNlIHVzZSB3aWR0aFxuICAvLyBpbiB0aGlzIHdheSB0aGUgZmlyc3Qgb2Zmc2V0IHdpbGwgdXNlIGFuIGF4aXMgYW5kIHRoZSBzZWNvbmQgb25lXG4gIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmVcbiAgdmFyIHVzZUhlaWdodCA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIC8vIFNwbGl0IHRoZSBvZmZzZXQgc3RyaW5nIHRvIG9idGFpbiBhIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kc1xuICAvLyBUaGUgcmVnZXggYWRkcmVzc2VzIHZhbHVlcyB3aXRoIHRoZSBwbHVzIG9yIG1pbnVzIHNpZ24gaW4gZnJvbnQgKCsxMCwgLTIwLCBldGMpXG4gIHZhciBmcmFnbWVudHMgPSBvZmZzZXQuc3BsaXQoLyhcXCt8XFwtKS8pLm1hcChmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnRyaW0oKTtcbiAgfSk7XG5cbiAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lXG4gIC8vIHRoZXkgY291bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hIG9yIHNwYWNlXG4gIHZhciBkaXZpZGVyID0gZnJhZ21lbnRzLmluZGV4T2YoZmluZChmcmFnbWVudHMsIGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcuc2VhcmNoKC8sfFxccy8pICE9PSAtMTtcbiAgfSkpO1xuXG4gIGlmIChmcmFnbWVudHNbZGl2aWRlcl0gJiYgZnJhZ21lbnRzW2RpdmlkZXJdLmluZGV4T2YoJywnKSA9PT0gLTEpIHtcbiAgICBjb25zb2xlLndhcm4oJ09mZnNldHMgc2VwYXJhdGVkIGJ5IHdoaXRlIHNwYWNlKHMpIGFyZSBkZXByZWNhdGVkLCB1c2UgYSBjb21tYSAoLCkgaW5zdGVhZC4nKTtcbiAgfVxuXG4gIC8vIElmIGRpdmlkZXIgaXMgZm91bmQsIHdlIGRpdmlkZSB0aGUgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzIHRvIGRpdmlkZVxuICAvLyB0aGVtIGJ5IG9mc2V0IFggYW5kIFkuXG4gIHZhciBzcGxpdFJlZ2V4ID0gL1xccyosXFxzKnxcXHMrLztcbiAgdmFyIG9wcyA9IGRpdmlkZXIgIT09IC0xID8gW2ZyYWdtZW50cy5zbGljZSgwLCBkaXZpZGVyKS5jb25jYXQoW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVswXV0pLCBbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzFdXS5jb25jYXQoZnJhZ21lbnRzLnNsaWNlKGRpdmlkZXIgKyAxKSldIDogW2ZyYWdtZW50c107XG5cbiAgLy8gQ29udmVydCB0aGUgdmFsdWVzIHdpdGggdW5pdHMgdG8gYWJzb2x1dGUgcGl4ZWxzIHRvIGFsbG93IG91ciBjb21wdXRhdGlvbnNcbiAgb3BzID0gb3BzLm1hcChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgLy8gTW9zdCBvZiB0aGUgdW5pdHMgcmVseSBvbiB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHBvcHBlclxuICAgIHZhciBtZWFzdXJlbWVudCA9IChpbmRleCA9PT0gMSA/ICF1c2VIZWlnaHQgOiB1c2VIZWlnaHQpID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgIHJldHVybiBvcFxuICAgIC8vIFRoaXMgYWdncmVnYXRlcyBhbnkgYCtgIG9yIGAtYCBzaWduIHRoYXQgYXJlbid0IGNvbnNpZGVyZWQgb3BlcmF0b3JzXG4gICAgLy8gZS5nLjogMTAgKyArNSA9PiBbMTAsICssICs1XVxuICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIGlmIChhW2EubGVuZ3RoIC0gMV0gPT09ICcnICYmIFsnKycsICctJ10uaW5kZXhPZihiKSAhPT0gLTEpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdID0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSBpZiAobWVyZ2VXaXRoUHJldmlvdXMpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdICs9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgICAgfVxuICAgIH0sIFtdKVxuICAgIC8vIEhlcmUgd2UgY29udmVydCB0aGUgc3RyaW5nIHZhbHVlcyBpbnRvIG51bWJlciB2YWx1ZXMgKGluIHB4KVxuICAgIC5tYXAoZnVuY3Rpb24gKHN0cikge1xuICAgICAgcmV0dXJuIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIExvb3AgdHJvdWdoIHRoZSBvZmZzZXRzIGFycmF5cyBhbmQgZXhlY3V0ZSB0aGUgb3BlcmF0aW9uc1xuICBvcHMuZm9yRWFjaChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgb3AuZm9yRWFjaChmdW5jdGlvbiAoZnJhZywgaW5kZXgyKSB7XG4gICAgICBpZiAoaXNOdW1lcmljKGZyYWcpKSB7XG4gICAgICAgIG9mZnNldHNbaW5kZXhdICs9IGZyYWcgKiAob3BbaW5kZXgyIC0gMV0gPT09ICctJyA/IC0xIDogMSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAYXJndW1lbnQge051bWJlcnxTdHJpbmd9IG9wdGlvbnMub2Zmc2V0PTBcbiAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBvZmZzZXQoZGF0YSwgX3JlZikge1xuICB2YXIgb2Zmc2V0ID0gX3JlZi5vZmZzZXQ7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudCxcbiAgICAgIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgdmFyIG9mZnNldHMgPSB2b2lkIDA7XG4gIGlmIChpc051bWVyaWMoK29mZnNldCkpIHtcbiAgICBvZmZzZXRzID0gWytvZmZzZXQsIDBdO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldHMgPSBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlciwgcmVmZXJlbmNlLCBiYXNlUGxhY2VtZW50KTtcbiAgfVxuXG4gIGlmIChiYXNlUGxhY2VtZW50ID09PSAnbGVmdCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAncmlnaHQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3RvcCcpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzFdO1xuICB9XG5cbiAgZGF0YS5wb3BwZXIgPSBwb3BwZXI7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgYm91bmRhcmllc0VsZW1lbnQgPSBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50IHx8IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG5cbiAgLy8gSWYgb2Zmc2V0UGFyZW50IGlzIHRoZSByZWZlcmVuY2UgZWxlbWVudCwgd2UgcmVhbGx5IHdhbnQgdG9cbiAgLy8gZ28gb25lIHN0ZXAgdXAgYW5kIHVzZSB0aGUgbmV4dCBvZmZzZXRQYXJlbnQgYXMgcmVmZXJlbmNlIHRvXG4gIC8vIGF2b2lkIHRvIG1ha2UgdGhpcyBtb2RpZmllciBjb21wbGV0ZWx5IHVzZWxlc3MgYW5kIGxvb2sgbGlrZSBicm9rZW5cbiAgaWYgKGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlID09PSBib3VuZGFyaWVzRWxlbWVudCkge1xuICAgIGJvdW5kYXJpZXNFbGVtZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGJvdW5kYXJpZXNFbGVtZW50KTtcbiAgfVxuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXNldHMgdGhlIHBvcHBlcidzIHBvc2l0aW9uIHNvIHRoYXQgdGhlIGRvY3VtZW50IHNpemUgY2FuIGJlIGNhbGN1bGF0ZWQgZXhjbHVkaW5nXG4gIC8vIHRoZSBzaXplIG9mIHRoZSBwb3BwZXIgZWxlbWVudCBpdHNlbGZcbiAgdmFyIHRyYW5zZm9ybVByb3AgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuICB2YXIgcG9wcGVyU3R5bGVzID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIuc3R5bGU7IC8vIGFzc2lnbm1lbnQgdG8gaGVscCBtaW5pZmljYXRpb25cbiAgdmFyIHRvcCA9IHBvcHBlclN0eWxlcy50b3AsXG4gICAgICBsZWZ0ID0gcG9wcGVyU3R5bGVzLmxlZnQsXG4gICAgICB0cmFuc2Zvcm0gPSBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF07XG5cbiAgcG9wcGVyU3R5bGVzLnRvcCA9ICcnO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9ICcnO1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSAnJztcblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXN0b3JlcyB0aGUgb3JpZ2luYWwgc3R5bGUgcHJvcGVydGllcyBhZnRlciB0aGUgb2Zmc2V0cyBoYXZlIGJlZW4gY29tcHV0ZWRcbiAgcG9wcGVyU3R5bGVzLnRvcCA9IHRvcDtcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSBsZWZ0O1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm07XG5cbiAgb3B0aW9ucy5ib3VuZGFyaWVzID0gYm91bmRhcmllcztcblxuICB2YXIgb3JkZXIgPSBvcHRpb25zLnByaW9yaXR5O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICB2YXIgY2hlY2sgPSB7XG4gICAgcHJpbWFyeTogZnVuY3Rpb24gcHJpbWFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlcltwbGFjZW1lbnRdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdIDwgYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1heChwb3BwZXJbcGxhY2VtZW50XSwgYm91bmRhcmllc1twbGFjZW1lbnRdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgcGxhY2VtZW50LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZWNvbmRhcnk6IGZ1bmN0aW9uIHNlY29uZGFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciBtYWluU2lkZSA9IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW21haW5TaWRlXTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA+IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5taW4ocG9wcGVyW21haW5TaWRlXSwgYm91bmRhcmllc1twbGFjZW1lbnRdIC0gKHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IHBvcHBlci53aWR0aCA6IHBvcHBlci5oZWlnaHQpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgbWFpblNpZGUsIHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgb3JkZXIuZm9yRWFjaChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgdmFyIHNpZGUgPSBbJ2xlZnQnLCAndG9wJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMSA/ICdwcmltYXJ5JyA6ICdzZWNvbmRhcnknO1xuICAgIHBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIGNoZWNrW3NpZGVdKHBsYWNlbWVudCkpO1xuICB9KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gcG9wcGVyO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBzaGlmdChkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHNoaWZ0dmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgLy8gaWYgc2hpZnQgc2hpZnR2YXJpYXRpb24gaXMgc3BlY2lmaWVkLCBydW4gdGhlIG1vZGlmaWVyXG4gIGlmIChzaGlmdHZhcmlhdGlvbikge1xuICAgIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXI7XG5cbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsnYm90dG9tJywgJ3RvcCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuICAgIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgICB2YXIgc2hpZnRPZmZzZXRzID0ge1xuICAgICAgc3RhcnQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0pLFxuICAgICAgZW5kOiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW21lYXN1cmVtZW50XSAtIHBvcHBlclttZWFzdXJlbWVudF0pXG4gICAgfTtcblxuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBzaGlmdE9mZnNldHNbc2hpZnR2YXJpYXRpb25dKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaGlkZShkYXRhKSB7XG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaGlkZScsICdwcmV2ZW50T3ZlcmZsb3cnKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIHJlZlJlY3QgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgYm91bmQgPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdyc7XG4gIH0pLmJvdW5kYXJpZXM7XG5cbiAgaWYgKHJlZlJlY3QuYm90dG9tIDwgYm91bmQudG9wIHx8IHJlZlJlY3QubGVmdCA+IGJvdW5kLnJpZ2h0IHx8IHJlZlJlY3QudG9wID4gYm91bmQuYm90dG9tIHx8IHJlZlJlY3QucmlnaHQgPCBib3VuZC5sZWZ0KSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gdHJ1ZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9ICcnO1xuICB9IGVsc2Uge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSBmYWxzZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGlubmVyKGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzSG9yaXogPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgc3VidHJhY3RMZW5ndGggPSBbJ3RvcCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA9PT0gLTE7XG5cbiAgcG9wcGVyW2lzSG9yaXogPyAnbGVmdCcgOiAndG9wJ10gPSByZWZlcmVuY2VbYmFzZVBsYWNlbWVudF0gLSAoc3VidHJhY3RMZW5ndGggPyBwb3BwZXJbaXNIb3JpeiA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gOiAwKTtcblxuICBkYXRhLnBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KHBvcHBlcik7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogTW9kaWZpZXIgZnVuY3Rpb24sIGVhY2ggbW9kaWZpZXIgY2FuIGhhdmUgYSBmdW5jdGlvbiBvZiB0aGlzIHR5cGUgYXNzaWduZWRcbiAqIHRvIGl0cyBgZm5gIHByb3BlcnR5LjxiciAvPlxuICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkIG9uIGVhY2ggdXBkYXRlLCB0aGlzIG1lYW5zIHRoYXQgeW91IG11c3RcbiAqIG1ha2Ugc3VyZSB0aGV5IGFyZSBwZXJmb3JtYW50IGVub3VnaCB0byBhdm9pZCBwZXJmb3JtYW5jZSBib3R0bGVuZWNrcy5cbiAqXG4gKiBAZnVuY3Rpb24gTW9kaWZpZXJGblxuICogQGFyZ3VtZW50IHtkYXRhT2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cblxuLyoqXG4gKiBNb2RpZmllcnMgYXJlIHBsdWdpbnMgdXNlZCB0byBhbHRlciB0aGUgYmVoYXZpb3Igb2YgeW91ciBwb3BwZXJzLjxiciAvPlxuICogUG9wcGVyLmpzIHVzZXMgYSBzZXQgb2YgOSBtb2RpZmllcnMgdG8gcHJvdmlkZSBhbGwgdGhlIGJhc2ljIGZ1bmN0aW9uYWxpdGllc1xuICogbmVlZGVkIGJ5IHRoZSBsaWJyYXJ5LlxuICpcbiAqIFVzdWFsbHkgeW91IGRvbid0IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGBvcmRlcmAsIGBmbmAgYW5kIGBvbkxvYWRgIHByb3BzLlxuICogQWxsIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGFyZSBjb25maWd1cmF0aW9ucyB0aGF0IGNvdWxkIGJlIHR3ZWFrZWQuXG4gKiBAbmFtZXNwYWNlIG1vZGlmaWVyc1xuICovXG52YXIgbW9kaWZpZXJzID0ge1xuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBzaGlmdCB0aGUgcG9wcGVyIG9uIHRoZSBzdGFydCBvciBlbmQgb2YgaXRzIHJlZmVyZW5jZVxuICAgKiBlbGVtZW50LjxiciAvPlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIHZhcmlhdGlvbiBvZiB0aGUgYHBsYWNlbWVudGAgcHJvcGVydHkuPGJyIC8+XG4gICAqIEl0IGNhbiBiZSBvbmUgZWl0aGVyIGAtZW5kYCBvciBgLXN0YXJ0YC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHNoaWZ0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTEwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogc2hpZnRcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGBvZmZzZXRgIG1vZGlmaWVyIGNhbiBzaGlmdCB5b3VyIHBvcHBlciBvbiBib3RoIGl0cyBheGlzLlxuICAgKlxuICAgKiBJdCBhY2NlcHRzIHRoZSBmb2xsb3dpbmcgdW5pdHM6XG4gICAqIC0gYHB4YCBvciB1bml0LWxlc3MsIGludGVycHJldGVkIGFzIHBpeGVsc1xuICAgKiAtIGAlYCBvciBgJXJgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gICAqIC0gYCVwYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiAtIGB2d2AsIENTUyB2aWV3cG9ydCB3aWR0aCB1bml0XG4gICAqIC0gYHZoYCwgQ1NTIHZpZXdwb3J0IGhlaWdodCB1bml0XG4gICAqXG4gICAqIEZvciBsZW5ndGggaXMgaW50ZW5kZWQgdGhlIG1haW4gYXhpcyByZWxhdGl2ZSB0byB0aGUgcGxhY2VtZW50IG9mIHRoZSBwb3BwZXIuPGJyIC8+XG4gICAqIFRoaXMgbWVhbnMgdGhhdCBpZiB0aGUgcGxhY2VtZW50IGlzIGB0b3BgIG9yIGBib3R0b21gLCB0aGUgbGVuZ3RoIHdpbGwgYmUgdGhlXG4gICAqIGB3aWR0aGAuIEluIGNhc2Ugb2YgYGxlZnRgIG9yIGByaWdodGAsIGl0IHdpbGwgYmUgdGhlIGBoZWlnaHRgLlxuICAgKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBzaW5nbGUgdmFsdWUgKGFzIGBOdW1iZXJgIG9yIGBTdHJpbmdgKSwgb3IgYSBwYWlyIG9mIHZhbHVlc1xuICAgKiBhcyBgU3RyaW5nYCBkaXZpZGVkIGJ5IGEgY29tbWEgb3Igb25lIChvciBtb3JlKSB3aGl0ZSBzcGFjZXMuPGJyIC8+XG4gICAqIFRoZSBsYXR0ZXIgaXMgYSBkZXByZWNhdGVkIG1ldGhvZCBiZWNhdXNlIGl0IGxlYWRzIHRvIGNvbmZ1c2lvbiBhbmQgd2lsbCBiZVxuICAgKiByZW1vdmVkIGluIHYyLjxiciAvPlxuICAgKiBBZGRpdGlvbmFsbHksIGl0IGFjY2VwdHMgYWRkaXRpb25zIGFuZCBzdWJ0cmFjdGlvbnMgYmV0d2VlbiBkaWZmZXJlbnQgdW5pdHMuXG4gICAqIE5vdGUgdGhhdCBtdWx0aXBsaWNhdGlvbnMgYW5kIGRpdmlzaW9ucyBhcmVuJ3Qgc3VwcG9ydGVkLlxuICAgKlxuICAgKiBWYWxpZCBleGFtcGxlcyBhcmU6XG4gICAqIGBgYFxuICAgKiAxMFxuICAgKiAnMTAlJ1xuICAgKiAnMTAsIDEwJ1xuICAgKiAnMTAlLCAxMCdcbiAgICogJzEwICsgMTAlJ1xuICAgKiAnMTAgLSA1dmggKyAzJSdcbiAgICogJy0xMHB4ICsgNXZoLCA1cHggLSA2JSdcbiAgICogYGBgXG4gICAqID4gKipOQioqOiBJZiB5b3UgZGVzaXJlIHRvIGFwcGx5IG9mZnNldHMgdG8geW91ciBwb3BwZXJzIGluIGEgd2F5IHRoYXQgbWF5IG1ha2UgdGhlbSBvdmVybGFwXG4gICAqID4gd2l0aCB0aGVpciByZWZlcmVuY2UgZWxlbWVudCwgdW5mb3J0dW5hdGVseSwgeW91IHdpbGwgaGF2ZSB0byBkaXNhYmxlIHRoZSBgZmxpcGAgbW9kaWZpZXIuXG4gICAqID4gWW91IGNhbiByZWFkIG1vcmUgb24gdGhpcyBhdCB0aGlzIFtpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvaXNzdWVzLzM3MykuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBvZmZzZXQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAyMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBvZmZzZXQsXG4gICAgLyoqIEBwcm9wIHtOdW1iZXJ8U3RyaW5nfSBvZmZzZXQ9MFxuICAgICAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICAgICAqL1xuICAgIG9mZnNldDogMFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHByZXZlbnQgdGhlIHBvcHBlciBmcm9tIGJlaW5nIHBvc2l0aW9uZWQgb3V0c2lkZSB0aGUgYm91bmRhcnkuXG4gICAqXG4gICAqIEEgc2NlbmFyaW8gZXhpc3RzIHdoZXJlIHRoZSByZWZlcmVuY2UgaXRzZWxmIGlzIG5vdCB3aXRoaW4gdGhlIGJvdW5kYXJpZXMuPGJyIC8+XG4gICAqIFdlIGNhbiBzYXkgaXQgaGFzIFwiZXNjYXBlZCB0aGUgYm91bmRhcmllc1wiIOKAlCBvciBqdXN0IFwiZXNjYXBlZFwiLjxiciAvPlxuICAgKiBJbiB0aGlzIGNhc2Ugd2UgbmVlZCB0byBkZWNpZGUgd2hldGhlciB0aGUgcG9wcGVyIHNob3VsZCBlaXRoZXI6XG4gICAqXG4gICAqIC0gZGV0YWNoIGZyb20gdGhlIHJlZmVyZW5jZSBhbmQgcmVtYWluIFwidHJhcHBlZFwiIGluIHRoZSBib3VuZGFyaWVzLCBvclxuICAgKiAtIGlmIGl0IHNob3VsZCBpZ25vcmUgdGhlIGJvdW5kYXJ5IGFuZCBcImVzY2FwZSB3aXRoIGl0cyByZWZlcmVuY2VcIlxuICAgKlxuICAgKiBXaGVuIGBlc2NhcGVXaXRoUmVmZXJlbmNlYCBpcyBzZXQgdG9gdHJ1ZWAgYW5kIHJlZmVyZW5jZSBpcyBjb21wbGV0ZWx5XG4gICAqIG91dHNpZGUgaXRzIGJvdW5kYXJpZXMsIHRoZSBwb3BwZXIgd2lsbCBvdmVyZmxvdyAob3IgY29tcGxldGVseSBsZWF2ZSlcbiAgICogdGhlIGJvdW5kYXJpZXMgaW4gb3JkZXIgdG8gcmVtYWluIGF0dGFjaGVkIHRvIHRoZSBlZGdlIG9mIHRoZSByZWZlcmVuY2UuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAzMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gICAgLyoqXG4gICAgICogQHByb3Age0FycmF5fSBbcHJpb3JpdHk9WydsZWZ0JywncmlnaHQnLCd0b3AnLCdib3R0b20nXV1cbiAgICAgKiBQb3BwZXIgd2lsbCB0cnkgdG8gcHJldmVudCBvdmVyZmxvdyBmb2xsb3dpbmcgdGhlc2UgcHJpb3JpdGllcyBieSBkZWZhdWx0LFxuICAgICAqIHRoZW4sIGl0IGNvdWxkIG92ZXJmbG93IG9uIHRoZSBsZWZ0IGFuZCBvbiB0b3Agb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwcmlvcml0eTogWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBBbW91bnQgb2YgcGl4ZWwgdXNlZCB0byBkZWZpbmUgYSBtaW5pbXVtIGRpc3RhbmNlIGJldHdlZW4gdGhlIGJvdW5kYXJpZXNcbiAgICAgKiBhbmQgdGhlIHBvcHBlci4gVGhpcyBtYWtlcyBzdXJlIHRoZSBwb3BwZXIgYWx3YXlzIGhhcyBhIGxpdHRsZSBwYWRkaW5nXG4gICAgICogYmV0d2VlbiB0aGUgZWRnZXMgb2YgaXRzIGNvbnRhaW5lclxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3Njcm9sbFBhcmVudCdcbiAgICAgKiBCb3VuZGFyaWVzIHVzZWQgYnkgdGhlIG1vZGlmaWVyLiBDYW4gYmUgYHNjcm9sbFBhcmVudGAsIGB3aW5kb3dgLFxuICAgICAqIGB2aWV3cG9ydGAgb3IgYW55IERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnc2Nyb2xsUGFyZW50J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2Ugc3VyZSB0aGUgcmVmZXJlbmNlIGFuZCBpdHMgcG9wcGVyIHN0YXkgbmVhciBlYWNoIG90aGVyXG4gICAqIHdpdGhvdXQgbGVhdmluZyBhbnkgZ2FwIGJldHdlZW4gdGhlIHR3by4gRXNwZWNpYWxseSB1c2VmdWwgd2hlbiB0aGUgYXJyb3cgaXNcbiAgICogZW5hYmxlZCBhbmQgeW91IHdhbnQgdG8gZW5zdXJlIHRoYXQgaXQgcG9pbnRzIHRvIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogSXQgY2FyZXMgb25seSBhYm91dCB0aGUgZmlyc3QgYXhpcy4gWW91IGNhbiBzdGlsbCBoYXZlIHBvcHBlcnMgd2l0aCBtYXJnaW5cbiAgICogYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBrZWVwVG9nZXRoZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NDAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA0MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBrZWVwVG9nZXRoZXJcbiAgfSxcblxuICAvKipcbiAgICogVGhpcyBtb2RpZmllciBpcyB1c2VkIHRvIG1vdmUgdGhlIGBhcnJvd0VsZW1lbnRgIG9mIHRoZSBwb3BwZXIgdG8gbWFrZVxuICAgKiBzdXJlIGl0IGlzIHBvc2l0aW9uZWQgYmV0d2VlbiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgYW5kIGl0cyBwb3BwZXIgZWxlbWVudC5cbiAgICogSXQgd2lsbCByZWFkIHRoZSBvdXRlciBzaXplIG9mIHRoZSBgYXJyb3dFbGVtZW50YCBub2RlIHRvIGRldGVjdCBob3cgbWFueVxuICAgKiBwaXhlbHMgb2YgY29uanVuY3Rpb24gYXJlIG5lZWRlZC5cbiAgICpcbiAgICogSXQgaGFzIG5vIGVmZmVjdCBpZiBubyBgYXJyb3dFbGVtZW50YCBpcyBwcm92aWRlZC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFycm93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTUwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXJyb3csXG4gICAgLyoqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGVsZW1lbnQ9J1t4LWFycm93XScgLSBTZWxlY3RvciBvciBub2RlIHVzZWQgYXMgYXJyb3cgKi9cbiAgICBlbGVtZW50OiAnW3gtYXJyb3ddJ1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGZsaXAgdGhlIHBvcHBlcidzIHBsYWNlbWVudCB3aGVuIGl0IHN0YXJ0cyB0byBvdmVybGFwIGl0c1xuICAgKiByZWZlcmVuY2UgZWxlbWVudC5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKlxuICAgKiAqKk5PVEU6KiogdGhpcyBtb2RpZmllciB3aWxsIGludGVycnVwdCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUgYW5kIHdpbGxcbiAgICogcmVzdGFydCBpdCBpZiBpdCBkZXRlY3RzIHRoZSBuZWVkIHRvIGZsaXAgdGhlIHBsYWNlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGZsaXA6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA2MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBmbGlwLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8QXJyYXl9IGJlaGF2aW9yPSdmbGlwJ1xuICAgICAqIFRoZSBiZWhhdmlvciB1c2VkIHRvIGNoYW5nZSB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50LiBJdCBjYW4gYmUgb25lIG9mXG4gICAgICogYGZsaXBgLCBgY2xvY2t3aXNlYCwgYGNvdW50ZXJjbG9ja3dpc2VgIG9yIGFuIGFycmF5IHdpdGggYSBsaXN0IG9mIHZhbGlkXG4gICAgICogcGxhY2VtZW50cyAod2l0aCBvcHRpb25hbCB2YXJpYXRpb25zKVxuICAgICAqL1xuICAgIGJlaGF2aW9yOiAnZmxpcCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogVGhlIHBvcHBlciB3aWxsIGZsaXAgaWYgaXQgaGl0cyB0aGUgZWRnZXMgb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSd2aWV3cG9ydCdcbiAgICAgKiBUaGUgZWxlbWVudCB3aGljaCB3aWxsIGRlZmluZSB0aGUgYm91bmRhcmllcyBvZiB0aGUgcG9wcGVyIHBvc2l0aW9uLlxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBuZXZlciBiZSBwbGFjZWQgb3V0c2lkZSBvZiB0aGUgZGVmaW5lZCBib3VuZGFyaWVzXG4gICAgICogKGV4Y2VwdCBpZiBga2VlcFRvZ2V0aGVyYCBpcyBlbmFibGVkKVxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAndmlld3BvcnQnLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBmbGlwVmFyaWF0aW9ucz1mYWxzZVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBzd2l0Y2ggcGxhY2VtZW50IHZhcmlhdGlvbiBiZXR3ZWVuIGAtc3RhcnRgIGFuZCBgLWVuZGAgd2hlblxuICAgICAqIHRoZSByZWZlcmVuY2UgZWxlbWVudCBvdmVybGFwcyBpdHMgYm91bmRhcmllcy5cbiAgICAgKlxuICAgICAqIFRoZSBvcmlnaW5hbCBwbGFjZW1lbnQgc2hvdWxkIGhhdmUgYSBzZXQgdmFyaWF0aW9uLlxuICAgICAqL1xuICAgIGZsaXBWYXJpYXRpb25zOiBmYWxzZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZmxpcFZhcmlhdGlvbnNCeUNvbnRlbnQ9ZmFsc2VcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgc3dpdGNoIHBsYWNlbWVudCB2YXJpYXRpb24gYmV0d2VlbiBgLXN0YXJ0YCBhbmQgYC1lbmRgIHdoZW5cbiAgICAgKiB0aGUgcG9wcGVyIGVsZW1lbnQgb3ZlcmxhcHMgaXRzIHJlZmVyZW5jZSBib3VuZGFyaWVzLlxuICAgICAqXG4gICAgICogVGhlIG9yaWdpbmFsIHBsYWNlbWVudCBzaG91bGQgaGF2ZSBhIHNldCB2YXJpYXRpb24uXG4gICAgICovXG4gICAgZmxpcFZhcmlhdGlvbnNCeUNvbnRlbnQ6IGZhbHNlXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSB0aGUgcG9wcGVyIGZsb3cgdG93YXJkIHRoZSBpbm5lciBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHdoZW4gdGhpcyBtb2RpZmllciBpcyBkaXNhYmxlZCwgdGhlIHBvcHBlciB3aWxsIGJlIHBsYWNlZCBvdXRzaWRlXG4gICAqIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGlubmVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTcwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD1mYWxzZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogZmFsc2UsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBpbm5lclxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGhpZGUgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXRzaWRlIG9mIHRoZVxuICAgKiBwb3BwZXIgYm91bmRhcmllcy4gSXQgd2lsbCBzZXQgYSBgeC1vdXQtb2YtYm91bmRhcmllc2AgYXR0cmlidXRlIHdoaWNoIGNhblxuICAgKiBiZSB1c2VkIHRvIGhpZGUgd2l0aCBhIENTUyBzZWxlY3RvciB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBpc1xuICAgKiBvdXQgb2YgYm91bmRhcmllcy5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaGlkZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDgwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGhpZGVcbiAgfSxcblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIHN0eWxlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgZWxlbWVudCB0byBnZXRzXG4gICAqIHByb3Blcmx5IHBvc2l0aW9uZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGlzIG1vZGlmaWVyIHdpbGwgbm90IHRvdWNoIHRoZSBET00sIGl0IGp1c3QgcHJlcGFyZXMgdGhlIHN0eWxlc1xuICAgKiBzbyB0aGF0IGBhcHBseVN0eWxlYCBtb2RpZmllciBjYW4gYXBwbHkgaXQuIFRoaXMgc2VwYXJhdGlvbiBpcyB1c2VmdWxcbiAgICogaW4gY2FzZSB5b3UgbmVlZCB0byByZXBsYWNlIGBhcHBseVN0eWxlYCB3aXRoIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uLlxuICAgKlxuICAgKiBUaGlzIG1vZGlmaWVyIGhhcyBgODUwYCBhcyBgb3JkZXJgIHZhbHVlIHRvIG1haW50YWluIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICogd2l0aCBwcmV2aW91cyB2ZXJzaW9ucyBvZiBQb3BwZXIuanMuIEV4cGVjdCB0aGUgbW9kaWZpZXJzIG9yZGVyaW5nIG1ldGhvZFxuICAgKiB0byBjaGFuZ2UgaW4gZnV0dXJlIG1ham9yIHZlcnNpb25zIG9mIHRoZSBsaWJyYXJ5LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgY29tcHV0ZVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTg1MCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODUwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogY29tcHV0ZVN0eWxlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzRCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdHJ1ZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nYm90dG9tJ11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFggYXhpcyAoYGJvdHRvbWAgb3IgYHRvcGApLiBBS0EgWCBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGBib3R0b21gXG4gICAgICovXG4gICAgeDogJ2JvdHRvbScsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2xlZnQnXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWSBheGlzIChgbGVmdGAgb3IgYHJpZ2h0YCkuIEFLQSBZIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYHJpZ2h0YFxuICAgICAqL1xuICAgIHk6ICdyaWdodCdcbiAgfSxcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgY29tcHV0ZWQgc3R5bGVzIHRvIHRoZSBwb3BwZXIgZWxlbWVudC5cbiAgICpcbiAgICogQWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyBhcmUgbGltaXRlZCB0byB0aGlzIG1vZGlmaWVyLiBUaGlzIGlzIHVzZWZ1bCBpbiBjYXNlXG4gICAqIHlvdSB3YW50IHRvIGludGVncmF0ZSBQb3BwZXIuanMgaW5zaWRlIGEgZnJhbWV3b3JrIG9yIHZpZXcgbGlicmFyeSBhbmQgeW91XG4gICAqIHdhbnQgdG8gZGVsZWdhdGUgYWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyB0byBpdC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGlmIHlvdSBkaXNhYmxlIHRoaXMgbW9kaWZpZXIsIHlvdSBtdXN0IG1ha2Ugc3VyZSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogaGFzIGl0cyBwb3NpdGlvbiBzZXQgdG8gYGFic29sdXRlYCBiZWZvcmUgUG9wcGVyLmpzIGNhbiBkbyBpdHMgd29yayFcbiAgICpcbiAgICogSnVzdCBkaXNhYmxlIHRoaXMgbW9kaWZpZXIgYW5kIGRlZmluZSB5b3VyIG93biB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFwcGx5U3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9OTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA5MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcHBseVN0eWxlLFxuICAgIC8qKiBAcHJvcCB7RnVuY3Rpb259ICovXG4gICAgb25Mb2FkOiBhcHBseVN0eWxlT25Mb2FkLFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS4xMC4wLCB0aGUgcHJvcGVydHkgbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXJcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHVuZGVmaW5lZFxuICB9XG59O1xuXG4vKipcbiAqIFRoZSBgZGF0YU9iamVjdGAgaXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBpbmZvcm1hdGlvbiB1c2VkIGJ5IFBvcHBlci5qcy5cbiAqIFRoaXMgb2JqZWN0IGlzIHBhc3NlZCB0byBtb2RpZmllcnMgYW5kIHRvIHRoZSBgb25DcmVhdGVgIGFuZCBgb25VcGRhdGVgIGNhbGxiYWNrcy5cbiAqIEBuYW1lIGRhdGFPYmplY3RcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmluc3RhbmNlIFRoZSBQb3BwZXIuanMgaW5zdGFuY2VcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLnBsYWNlbWVudCBQbGFjZW1lbnQgYXBwbGllZCB0byBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50IFBsYWNlbWVudCBvcmlnaW5hbGx5IGRlZmluZWQgb24gaW5pdFxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmZsaXBwZWQgVHJ1ZSBpZiBwb3BwZXIgaGFzIGJlZW4gZmxpcHBlZCBieSBmbGlwIG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuaGlkZSBUcnVlIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXQgb2YgYm91bmRhcmllcywgdXNlZnVsIHRvIGtub3cgd2hlbiB0byBoaWRlIHRoZSBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGRhdGEuYXJyb3dFbGVtZW50IE5vZGUgdXNlZCBhcyBhcnJvdyBieSBhcnJvdyBtb2RpZmllclxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuc3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLiBJdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYXJyb3dTdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgYXJyb3cuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5ib3VuZGFyaWVzIE9mZnNldHMgb2YgdGhlIHBvcHBlciBib3VuZGFyaWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzIFRoZSBtZWFzdXJlbWVudHMgb2YgcG9wcGVyLCByZWZlcmVuY2UgYW5kIGFycm93IGVsZW1lbnRzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnBvcHBlciBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucmVmZXJlbmNlIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5hcnJvd10gYHRvcGAgYW5kIGBsZWZ0YCBvZmZzZXRzLCBvbmx5IG9uZSBvZiB0aGVtIHdpbGwgYmUgZGlmZmVyZW50IGZyb20gMFxuICovXG5cbi8qKlxuICogRGVmYXVsdCBvcHRpb25zIHByb3ZpZGVkIHRvIFBvcHBlci5qcyBjb25zdHJ1Y3Rvci48YnIgLz5cbiAqIFRoZXNlIGNhbiBiZSBvdmVycmlkZGVuIHVzaW5nIHRoZSBgb3B0aW9uc2AgYXJndW1lbnQgb2YgUG9wcGVyLmpzLjxiciAvPlxuICogVG8gb3ZlcnJpZGUgYW4gb3B0aW9uLCBzaW1wbHkgcGFzcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZVxuICogc3RydWN0dXJlIG9mIHRoZSBgb3B0aW9uc2Agb2JqZWN0LCBhcyB0aGUgM3JkIGFyZ3VtZW50LiBGb3IgZXhhbXBsZTpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWYsIHBvcCwge1xuICogICBtb2RpZmllcnM6IHtcbiAqICAgICBwcmV2ZW50T3ZlcmZsb3c6IHsgZW5hYmxlZDogZmFsc2UgfVxuICogICB9XG4gKiB9KVxuICogYGBgXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHN0YXRpY1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgRGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBQb3BwZXIncyBwbGFjZW1lbnQuXG4gICAqIEBwcm9wIHtQb3BwZXIucGxhY2VtZW50c30gcGxhY2VtZW50PSdib3R0b20nXG4gICAqL1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyB0byB0cnVlIGlmIHlvdSB3YW50IHBvcHBlciB0byBwb3NpdGlvbiBpdCBzZWxmIGluICdmaXhlZCcgbW9kZVxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcG9zaXRpb25GaXhlZD1mYWxzZVxuICAgKi9cbiAgcG9zaXRpb25GaXhlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgZXZlbnRzIChyZXNpemUsIHNjcm9sbCkgYXJlIGluaXRpYWxseSBlbmFibGVkLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gZXZlbnRzRW5hYmxlZD10cnVlXG4gICAqL1xuICBldmVudHNFbmFibGVkOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgcG9wcGVyIHdoZW5cbiAgICogeW91IGNhbGwgdGhlIGBkZXN0cm95YCBtZXRob2QuXG4gICAqIEBwcm9wIHtCb29sZWFufSByZW1vdmVPbkRlc3Ryb3k9ZmFsc2VcbiAgICovXG4gIHJlbW92ZU9uRGVzdHJveTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgY3JlYXRlZC48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25DcmVhdGV9XG4gICAqL1xuICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoKSB7fSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyB1cGRhdGVkLiBUaGlzIGNhbGxiYWNrIGlzIG5vdCBjYWxsZWRcbiAgICogb24gdGhlIGluaXRpYWxpemF0aW9uL2NyZWF0aW9uIG9mIHRoZSBwb3BwZXIsIGJ1dCBvbmx5IG9uIHN1YnNlcXVlbnRcbiAgICogdXBkYXRlcy48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25VcGRhdGV9XG4gICAqL1xuICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoKSB7fSxcblxuICAvKipcbiAgICogTGlzdCBvZiBtb2RpZmllcnMgdXNlZCB0byBtb2RpZnkgdGhlIG9mZnNldHMgYmVmb3JlIHRoZXkgYXJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci5cbiAgICogVGhleSBwcm92aWRlIG1vc3Qgb2YgdGhlIGZ1bmN0aW9uYWxpdGllcyBvZiBQb3BwZXIuanMuXG4gICAqIEBwcm9wIHttb2RpZmllcnN9XG4gICAqL1xuICBtb2RpZmllcnM6IG1vZGlmaWVyc1xufTtcblxuLyoqXG4gKiBAY2FsbGJhY2sgb25DcmVhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIG9uVXBkYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vLyBVdGlsc1xuLy8gTWV0aG9kc1xudmFyIFBvcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgUG9wcGVyLmpzIGluc3RhbmNlLlxuICAgKiBAY2xhc3MgUG9wcGVyXG4gICAqIEBwYXJhbSB7RWxlbWVudHxyZWZlcmVuY2VPYmplY3R9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCAvIFhNTCBlbGVtZW50IHVzZWQgYXMgdGhlIHBvcHBlclxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFlvdXIgY3VzdG9tIG9wdGlvbnMgdG8gb3ZlcnJpZGUgdGhlIG9uZXMgZGVmaW5lZCBpbiBbRGVmYXVsdHNdKCNkZWZhdWx0cylcbiAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZSAtIFRoZSBnZW5lcmF0ZWQgUG9wcGVyLmpzIGluc3RhbmNlXG4gICAqL1xuICBmdW5jdGlvbiBQb3BwZXIocmVmZXJlbmNlLCBwb3BwZXIpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcHBlcik7XG5cbiAgICB0aGlzLnNjaGVkdWxlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShfdGhpcy51cGRhdGUpO1xuICAgIH07XG5cbiAgICAvLyBtYWtlIHVwZGF0ZSgpIGRlYm91bmNlZCwgc28gdGhhdCBpdCBvbmx5IHJ1bnMgYXQgbW9zdCBvbmNlLXBlci10aWNrXG4gICAgdGhpcy51cGRhdGUgPSBkZWJvdW5jZSh0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIHdpdGgge30gd2UgY3JlYXRlIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBvcHRpb25zIGluc2lkZSBpdFxuICAgIHRoaXMub3B0aW9ucyA9IF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgLy8gaW5pdCBzdGF0ZVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0Rlc3Ryb3llZDogZmFsc2UsXG4gICAgICBpc0NyZWF0ZWQ6IGZhbHNlLFxuICAgICAgc2Nyb2xsUGFyZW50czogW11cbiAgICB9O1xuXG4gICAgLy8gZ2V0IHJlZmVyZW5jZSBhbmQgcG9wcGVyIGVsZW1lbnRzIChhbGxvdyBqUXVlcnkgd3JhcHBlcnMpXG4gICAgdGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2UgJiYgcmVmZXJlbmNlLmpxdWVyeSA/IHJlZmVyZW5jZVswXSA6IHJlZmVyZW5jZTtcbiAgICB0aGlzLnBvcHBlciA9IHBvcHBlciAmJiBwb3BwZXIuanF1ZXJ5ID8gcG9wcGVyWzBdIDogcG9wcGVyO1xuXG4gICAgLy8gRGVlcCBtZXJnZSBtb2RpZmllcnMgb3B0aW9uc1xuICAgIHRoaXMub3B0aW9ucy5tb2RpZmllcnMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVycywgb3B0aW9ucy5tb2RpZmllcnMpKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA9IF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzW25hbWVdIHx8IHt9LCBvcHRpb25zLm1vZGlmaWVycyA/IG9wdGlvbnMubW9kaWZpZXJzW25hbWVdIDoge30pO1xuICAgIH0pO1xuXG4gICAgLy8gUmVmYWN0b3JpbmcgbW9kaWZpZXJzJyBsaXN0IChPYmplY3QgPT4gQXJyYXkpXG4gICAgdGhpcy5tb2RpZmllcnMgPSBPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMubW9kaWZpZXJzKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgIG5hbWU6IG5hbWVcbiAgICAgIH0sIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdKTtcbiAgICB9KVxuICAgIC8vIHNvcnQgdGhlIG1vZGlmaWVycyBieSBvcmRlclxuICAgIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7XG4gICAgfSk7XG5cbiAgICAvLyBtb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIHdoZW4gUG9wcGVyLmpzIGdldCBpbml0ZWRcbiAgICAvLyBzdWNoIGNvZGUgaXMgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgb2YgaXRzIG1vZGlmaWVyXG4gICAgLy8gdGhleSBjb3VsZCBhZGQgbmV3IHByb3BlcnRpZXMgdG8gdGhlaXIgb3B0aW9ucyBjb25maWd1cmF0aW9uXG4gICAgLy8gQkUgQVdBUkU6IGRvbid0IGFkZCBvcHRpb25zIHRvIGBvcHRpb25zLm1vZGlmaWVycy5uYW1lYCBidXQgdG8gYG1vZGlmaWVyT3B0aW9uc2AhXG4gICAgdGhpcy5tb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXJPcHRpb25zKSB7XG4gICAgICBpZiAobW9kaWZpZXJPcHRpb25zLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihtb2RpZmllck9wdGlvbnMub25Mb2FkKSkge1xuICAgICAgICBtb2RpZmllck9wdGlvbnMub25Mb2FkKF90aGlzLnJlZmVyZW5jZSwgX3RoaXMucG9wcGVyLCBfdGhpcy5vcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIF90aGlzLnN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGZpcmUgdGhlIGZpcnN0IHVwZGF0ZSB0byBwb3NpdGlvbiB0aGUgcG9wcGVyIGluIHRoZSByaWdodCBwbGFjZVxuICAgIHRoaXMudXBkYXRlKCk7XG5cbiAgICB2YXIgZXZlbnRzRW5hYmxlZCA9IHRoaXMub3B0aW9ucy5ldmVudHNFbmFibGVkO1xuICAgIGlmIChldmVudHNFbmFibGVkKSB7XG4gICAgICAvLyBzZXR1cCBldmVudCBsaXN0ZW5lcnMsIHRoZXkgd2lsbCB0YWtlIGNhcmUgb2YgdXBkYXRlIHRoZSBwb3NpdGlvbiBpbiBzcGVjaWZpYyBzaXR1YXRpb25zXG4gICAgICB0aGlzLmVuYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkID0gZXZlbnRzRW5hYmxlZDtcbiAgfVxuXG4gIC8vIFdlIGNhbid0IHVzZSBjbGFzcyBwcm9wZXJ0aWVzIGJlY2F1c2UgdGhleSBkb24ndCBnZXQgbGlzdGVkIGluIHRoZVxuICAvLyBjbGFzcyBwcm90b3R5cGUgYW5kIGJyZWFrIHN0dWZmIGxpa2UgU2lub24gc3R1YnNcblxuXG4gIGNyZWF0ZUNsYXNzKFBvcHBlciwgW3tcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUkJDEoKSB7XG4gICAgICByZXR1cm4gdXBkYXRlLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3kkJDEoKSB7XG4gICAgICByZXR1cm4gZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VuYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMkJDEoKSB7XG4gICAgICByZXR1cm4gZW5hYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkaXNhYmxlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMkJDEoKSB7XG4gICAgICByZXR1cm4gZGlzYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2NoZWR1bGVzIGFuIHVwZGF0ZS4gSXQgd2lsbCBydW4gb24gdGhlIG5leHQgVUkgdXBkYXRlIGF2YWlsYWJsZS5cbiAgICAgKiBAbWV0aG9kIHNjaGVkdWxlVXBkYXRlXG4gICAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgICAqL1xuXG5cbiAgICAvKipcbiAgICAgKiBDb2xsZWN0aW9uIG9mIHV0aWxpdGllcyB1c2VmdWwgd2hlbiB3cml0aW5nIGN1c3RvbSBtb2RpZmllcnMuXG4gICAgICogU3RhcnRpbmcgZnJvbSB2ZXJzaW9uIDEuNywgdGhpcyBtZXRob2QgaXMgYXZhaWxhYmxlIG9ubHkgaWYgeW91XG4gICAgICogaW5jbHVkZSBgcG9wcGVyLXV0aWxzLmpzYCBiZWZvcmUgYHBvcHBlci5qc2AuXG4gICAgICpcbiAgICAgKiAqKkRFUFJFQ0FUSU9OKio6IFRoaXMgd2F5IHRvIGFjY2VzcyBQb3BwZXJVdGlscyBpcyBkZXByZWNhdGVkXG4gICAgICogYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2MiEgVXNlIHRoZSBQb3BwZXJVdGlscyBtb2R1bGUgZGlyZWN0bHkgaW5zdGVhZC5cbiAgICAgKiBEdWUgdG8gdGhlIGhpZ2ggaW5zdGFiaWxpdHkgb2YgdGhlIG1ldGhvZHMgY29udGFpbmVkIGluIFV0aWxzLCB3ZSBjYW4ndFxuICAgICAqIGd1YXJhbnRlZSB0aGVtIHRvIGZvbGxvdyBzZW12ZXIuIFVzZSB0aGVtIGF0IHlvdXIgb3duIHJpc2shXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuOFxuICAgICAqIEBtZW1iZXIgVXRpbHNcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cbiAgfV0pO1xuICByZXR1cm4gUG9wcGVyO1xufSgpO1xuXG4vKipcbiAqIFRoZSBgcmVmZXJlbmNlT2JqZWN0YCBpcyBhbiBvYmplY3QgdGhhdCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgY29tcGF0aWJsZSB3aXRoIFBvcHBlci5qc1xuICogYW5kIGxldHMgeW91IHVzZSBpdCBhcyByZXBsYWNlbWVudCBvZiBhIHJlYWwgRE9NIG5vZGUuPGJyIC8+XG4gKiBZb3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBwb3NpdGlvbiBhIHBvcHBlciByZWxhdGl2ZWx5IHRvIGEgc2V0IG9mIGNvb3JkaW5hdGVzXG4gKiBpbiBjYXNlIHlvdSBkb24ndCBoYXZlIGEgRE9NIG5vZGUgdG8gdXNlIGFzIHJlZmVyZW5jZS5cbiAqXG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmZXJlbmNlT2JqZWN0LCBwb3BwZXJOb2RlKTtcbiAqIGBgYFxuICpcbiAqIE5COiBUaGlzIGZlYXR1cmUgaXNuJ3Qgc3VwcG9ydGVkIGluIEludGVybmV0IEV4cGxvcmVyIDEwLlxuICogQG5hbWUgcmVmZXJlbmNlT2JqZWN0XG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBkYXRhLmdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzZXQgb2YgY29vcmRpbmF0ZXMgY29tcGF0aWJsZSB3aXRoIHRoZSBuYXRpdmUgYGdldEJvdW5kaW5nQ2xpZW50UmVjdGAgbWV0aG9kLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50V2lkdGhcbiAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgd2lkdGggb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRIZWlnaHRcbiAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgaGVpZ2h0IG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICovXG5cblxuUG9wcGVyLlV0aWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKS5Qb3BwZXJVdGlscztcblBvcHBlci5wbGFjZW1lbnRzID0gcGxhY2VtZW50cztcblBvcHBlci5EZWZhdWx0cyA9IERlZmF1bHRzO1xuXG5leHBvcnQgZGVmYXVsdCBQb3BwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3BwZXIuanMubWFwXG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgaWYgKGNvbXBhcmUubGVuZ3RoID09PSAxKSBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihjb21wYXJlKTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpIDwgMCkgbG8gPSBtaWQgKyAxO1xuICAgICAgICBlbHNlIGhpID0gbWlkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvO1xuICAgIH0sXG4gICAgcmlnaHQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtcbiAgICAgICAgZWxzZSBsbyA9IG1pZCArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmdDb21wYXJhdG9yKGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIHgpIHtcbiAgICByZXR1cm4gYXNjZW5kaW5nKGYoZCksIHgpO1xuICB9O1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcbmltcG9ydCBiaXNlY3RvciBmcm9tIFwiLi9iaXNlY3RvclwiO1xuXG52YXIgYXNjZW5kaW5nQmlzZWN0ID0gYmlzZWN0b3IoYXNjZW5kaW5nKTtcbmV4cG9ydCB2YXIgYmlzZWN0UmlnaHQgPSBhc2NlbmRpbmdCaXNlY3QucmlnaHQ7XG5leHBvcnQgdmFyIGJpc2VjdExlZnQgPSBhc2NlbmRpbmdCaXNlY3QubGVmdDtcbmV4cG9ydCBkZWZhdWx0IGJpc2VjdFJpZ2h0O1xuIiwiaW1wb3J0IHtwYWlyfSBmcm9tIFwiLi9wYWlyc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMwLCB2YWx1ZXMxLCByZWR1Y2UpIHtcbiAgdmFyIG4wID0gdmFsdWVzMC5sZW5ndGgsXG4gICAgICBuMSA9IHZhbHVlczEubGVuZ3RoLFxuICAgICAgdmFsdWVzID0gbmV3IEFycmF5KG4wICogbjEpLFxuICAgICAgaTAsXG4gICAgICBpMSxcbiAgICAgIGksXG4gICAgICB2YWx1ZTA7XG5cbiAgaWYgKHJlZHVjZSA9PSBudWxsKSByZWR1Y2UgPSBwYWlyO1xuXG4gIGZvciAoaTAgPSBpID0gMDsgaTAgPCBuMDsgKytpMCkge1xuICAgIGZvciAodmFsdWUwID0gdmFsdWVzMFtpMF0sIGkxID0gMDsgaTEgPCBuMTsgKytpMSwgKytpKSB7XG4gICAgICB2YWx1ZXNbaV0gPSByZWR1Y2UodmFsdWUwLCB2YWx1ZXMxW2kxXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhbHVlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1pbixcbiAgICAgIG1heDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKG1pbiA+IHZhbHVlKSBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChtYXggPCB2YWx1ZSkgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAobWF4IDwgdmFsdWUpIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbbWluLCBtYXhdO1xufVxuIiwidmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG5leHBvcnQgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG5leHBvcnQgdmFyIG1hcCA9IGFycmF5Lm1hcDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gIHN0YXJ0ID0gK3N0YXJ0LCBzdG9wID0gK3N0b3AsIHN0ZXAgPSAobiA9IGFyZ3VtZW50cy5sZW5ndGgpIDwgMiA/IChzdG9wID0gc3RhcnQsIHN0YXJ0ID0gMCwgMSkgOiBuIDwgMyA/IDEgOiArc3RlcDtcblxuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IE1hdGgubWF4KDAsIE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApKSB8IDAsXG4gICAgICByYW5nZSA9IG5ldyBBcnJheShuKTtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIHJhbmdlW2ldID0gc3RhcnQgKyBpICogc3RlcDtcbiAgfVxuXG4gIHJldHVybiByYW5nZTtcbn1cbiIsInZhciBlMTAgPSBNYXRoLnNxcnQoNTApLFxuICAgIGU1ID0gTWF0aC5zcXJ0KDEwKSxcbiAgICBlMiA9IE1hdGguc3FydCgyKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciByZXZlcnNlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbixcbiAgICAgIHRpY2tzLFxuICAgICAgc3RlcDtcblxuICBzdG9wID0gK3N0b3AsIHN0YXJ0ID0gK3N0YXJ0LCBjb3VudCA9ICtjb3VudDtcbiAgaWYgKHN0YXJ0ID09PSBzdG9wICYmIGNvdW50ID4gMCkgcmV0dXJuIFtzdGFydF07XG4gIGlmIChyZXZlcnNlID0gc3RvcCA8IHN0YXJ0KSBuID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IG47XG4gIGlmICgoc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSkgPT09IDAgfHwgIWlzRmluaXRlKHN0ZXApKSByZXR1cm4gW107XG5cbiAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wIC8gc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdG9wIC0gc3RhcnQgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0ICsgaSkgKiBzdGVwO1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAqIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAqIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RhcnQgLSBzdG9wICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCAtIGkpIC8gc3RlcDtcbiAgfVxuXG4gIGlmIChyZXZlcnNlKSB0aWNrcy5yZXZlcnNlKCk7XG5cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHBvd2VyID0gTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwKSAvIE1hdGguTE4xMCksXG4gICAgICBlcnJvciA9IHN0ZXAgLyBNYXRoLnBvdygxMCwgcG93ZXIpO1xuICByZXR1cm4gcG93ZXIgPj0gMFxuICAgICAgPyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKSAqIE1hdGgucG93KDEwLCBwb3dlcilcbiAgICAgIDogLU1hdGgucG93KDEwLCAtcG93ZXIpIC8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAwID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHN0ZXAxID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcDApIC8gTWF0aC5MTjEwKSksXG4gICAgICBlcnJvciA9IHN0ZXAwIC8gc3RlcDE7XG4gIGlmIChlcnJvciA+PSBlMTApIHN0ZXAxICo9IDEwO1xuICBlbHNlIGlmIChlcnJvciA+PSBlNSkgc3RlcDEgKj0gNTtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTIpIHN0ZXAxICo9IDI7XG4gIHJldHVybiBzdG9wIDwgc3RhcnQgPyAtc3RlcDEgOiBzdGVwMTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICByZXR1cm4gTWF0aC5jZWlsKE1hdGgubG9nKHZhbHVlcy5sZW5ndGgpIC8gTWF0aC5MTjIpICsgMTtcbn1cbiIsImltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgYmlzZWN0IGZyb20gXCIuL2Jpc2VjdFwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgZXh0ZW50IGZyb20gXCIuL2V4dGVudFwiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5XCI7XG5pbXBvcnQgcmFuZ2UgZnJvbSBcIi4vcmFuZ2VcIjtcbmltcG9ydCB7dGlja1N0ZXB9IGZyb20gXCIuL3RpY2tzXCI7XG5pbXBvcnQgc3R1cmdlcyBmcm9tIFwiLi90aHJlc2hvbGQvc3R1cmdlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHZhbHVlID0gaWRlbnRpdHksXG4gICAgICBkb21haW4gPSBleHRlbnQsXG4gICAgICB0aHJlc2hvbGQgPSBzdHVyZ2VzO1xuXG4gIGZ1bmN0aW9uIGhpc3RvZ3JhbShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgeCxcbiAgICAgICAgdmFsdWVzID0gbmV3IEFycmF5KG4pO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdmFsdWVzW2ldID0gdmFsdWUoZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgfVxuXG4gICAgdmFyIHh6ID0gZG9tYWluKHZhbHVlcyksXG4gICAgICAgIHgwID0geHpbMF0sXG4gICAgICAgIHgxID0geHpbMV0sXG4gICAgICAgIHR6ID0gdGhyZXNob2xkKHZhbHVlcywgeDAsIHgxKTtcblxuICAgIC8vIENvbnZlcnQgbnVtYmVyIG9mIHRocmVzaG9sZHMgaW50byB1bmlmb3JtIHRocmVzaG9sZHMuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR6KSkge1xuICAgICAgdHogPSB0aWNrU3RlcCh4MCwgeDEsIHR6KTtcbiAgICAgIHR6ID0gcmFuZ2UoTWF0aC5jZWlsKHgwIC8gdHopICogdHosIHgxLCB0eik7IC8vIGV4Y2x1c2l2ZVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBhbnkgdGhyZXNob2xkcyBvdXRzaWRlIHRoZSBkb21haW4uXG4gICAgdmFyIG0gPSB0ei5sZW5ndGg7XG4gICAgd2hpbGUgKHR6WzBdIDw9IHgwKSB0ei5zaGlmdCgpLCAtLW07XG4gICAgd2hpbGUgKHR6W20gLSAxXSA+IHgxKSB0ei5wb3AoKSwgLS1tO1xuXG4gICAgdmFyIGJpbnMgPSBuZXcgQXJyYXkobSArIDEpLFxuICAgICAgICBiaW47XG5cbiAgICAvLyBJbml0aWFsaXplIGJpbnMuXG4gICAgZm9yIChpID0gMDsgaSA8PSBtOyArK2kpIHtcbiAgICAgIGJpbiA9IGJpbnNbaV0gPSBbXTtcbiAgICAgIGJpbi54MCA9IGkgPiAwID8gdHpbaSAtIDFdIDogeDA7XG4gICAgICBiaW4ueDEgPSBpIDwgbSA/IHR6W2ldIDogeDE7XG4gICAgfVxuXG4gICAgLy8gQXNzaWduIGRhdGEgdG8gYmlucyBieSB2YWx1ZSwgaWdub3JpbmcgYW55IG91dHNpZGUgdGhlIGRvbWFpbi5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB4ID0gdmFsdWVzW2ldO1xuICAgICAgaWYgKHgwIDw9IHggJiYgeCA8PSB4MSkge1xuICAgICAgICBiaW5zW2Jpc2VjdCh0eiwgeCwgMCwgbSldLnB1c2goZGF0YVtpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJpbnM7XG4gIH1cblxuICBoaXN0b2dyYW0udmFsdWUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmFsdWUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KF8pLCBoaXN0b2dyYW0pIDogdmFsdWU7XG4gIH07XG5cbiAgaGlzdG9ncmFtLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KFtfWzBdLCBfWzFdXSksIGhpc3RvZ3JhbSkgOiBkb21haW47XG4gIH07XG5cbiAgaGlzdG9ncmFtLnRocmVzaG9sZHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhyZXNob2xkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBBcnJheS5pc0FycmF5KF8pID8gY29uc3RhbnQoc2xpY2UuY2FsbChfKSkgOiBjb25zdGFudChfKSwgaGlzdG9ncmFtKSA6IHRocmVzaG9sZDtcbiAgfTtcblxuICByZXR1cm4gaGlzdG9ncmFtO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWF4O1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1heDtcbn1cbiIsImltcG9ydCB0cmFuc3Bvc2UgZnJvbSBcIi4vdHJhbnNwb3NlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdHJhbnNwb3NlKGFyZ3VtZW50cyk7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcblxudmFyIHRvcCA9IDEsXG4gICAgcmlnaHQgPSAyLFxuICAgIGJvdHRvbSA9IDMsXG4gICAgbGVmdCA9IDQsXG4gICAgZXBzaWxvbiA9IDFlLTY7XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVgoeCkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyAoeCArIDAuNSkgKyBcIiwwKVwiO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVZKHkpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKDAsXCIgKyAoeSArIDAuNSkgKyBcIilcIjtcbn1cblxuZnVuY3Rpb24gbnVtYmVyKHNjYWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2VudGVyKHNjYWxlKSB7XG4gIHZhciBvZmZzZXQgPSBNYXRoLm1heCgwLCBzY2FsZS5iYW5kd2lkdGgoKSAtIDEpIC8gMjsgLy8gQWRqdXN0IGZvciAwLjVweCBvZmZzZXQuXG4gIGlmIChzY2FsZS5yb3VuZCgpKSBvZmZzZXQgPSBNYXRoLnJvdW5kKG9mZnNldCk7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKSArIG9mZnNldDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW50ZXJpbmcoKSB7XG4gIHJldHVybiAhdGhpcy5fX2F4aXM7XG59XG5cbmZ1bmN0aW9uIGF4aXMob3JpZW50LCBzY2FsZSkge1xuICB2YXIgdGlja0FyZ3VtZW50cyA9IFtdLFxuICAgICAgdGlja1ZhbHVlcyA9IG51bGwsXG4gICAgICB0aWNrRm9ybWF0ID0gbnVsbCxcbiAgICAgIHRpY2tTaXplSW5uZXIgPSA2LFxuICAgICAgdGlja1NpemVPdXRlciA9IDYsXG4gICAgICB0aWNrUGFkZGluZyA9IDMsXG4gICAgICBrID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBsZWZ0ID8gLTEgOiAxLFxuICAgICAgeCA9IG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT09IHJpZ2h0ID8gXCJ4XCIgOiBcInlcIixcbiAgICAgIHRyYW5zZm9ybSA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gYm90dG9tID8gdHJhbnNsYXRlWCA6IHRyYW5zbGF0ZVk7XG5cbiAgZnVuY3Rpb24gYXhpcyhjb250ZXh0KSB7XG4gICAgdmFyIHZhbHVlcyA9IHRpY2tWYWx1ZXMgPT0gbnVsbCA/IChzY2FsZS50aWNrcyA/IHNjYWxlLnRpY2tzLmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IHNjYWxlLmRvbWFpbigpKSA6IHRpY2tWYWx1ZXMsXG4gICAgICAgIGZvcm1hdCA9IHRpY2tGb3JtYXQgPT0gbnVsbCA/IChzY2FsZS50aWNrRm9ybWF0ID8gc2NhbGUudGlja0Zvcm1hdC5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBpZGVudGl0eSkgOiB0aWNrRm9ybWF0LFxuICAgICAgICBzcGFjaW5nID0gTWF0aC5tYXgodGlja1NpemVJbm5lciwgMCkgKyB0aWNrUGFkZGluZyxcbiAgICAgICAgcmFuZ2UgPSBzY2FsZS5yYW5nZSgpLFxuICAgICAgICByYW5nZTAgPSArcmFuZ2VbMF0gKyAwLjUsXG4gICAgICAgIHJhbmdlMSA9ICtyYW5nZVtyYW5nZS5sZW5ndGggLSAxXSArIDAuNSxcbiAgICAgICAgcG9zaXRpb24gPSAoc2NhbGUuYmFuZHdpZHRoID8gY2VudGVyIDogbnVtYmVyKShzY2FsZS5jb3B5KCkpLFxuICAgICAgICBzZWxlY3Rpb24gPSBjb250ZXh0LnNlbGVjdGlvbiA/IGNvbnRleHQuc2VsZWN0aW9uKCkgOiBjb250ZXh0LFxuICAgICAgICBwYXRoID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbbnVsbF0pLFxuICAgICAgICB0aWNrID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi50aWNrXCIpLmRhdGEodmFsdWVzLCBzY2FsZSkub3JkZXIoKSxcbiAgICAgICAgdGlja0V4aXQgPSB0aWNrLmV4aXQoKSxcbiAgICAgICAgdGlja0VudGVyID0gdGljay5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwidGlja1wiKSxcbiAgICAgICAgbGluZSA9IHRpY2suc2VsZWN0KFwibGluZVwiKSxcbiAgICAgICAgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKTtcblxuICAgIHBhdGggPSBwYXRoLm1lcmdlKHBhdGguZW50ZXIoKS5pbnNlcnQoXCJwYXRoXCIsIFwiLnRpY2tcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRvbWFpblwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKSk7XG5cbiAgICB0aWNrID0gdGljay5tZXJnZSh0aWNrRW50ZXIpO1xuXG4gICAgbGluZSA9IGxpbmUubWVyZ2UodGlja0VudGVyLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJjdXJyZW50Q29sb3JcIilcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcikpO1xuXG4gICAgdGV4dCA9IHRleHQubWVyZ2UodGlja0VudGVyLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpXG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAuYXR0cihcImR5XCIsIG9yaWVudCA9PT0gdG9wID8gXCIwZW1cIiA6IG9yaWVudCA9PT0gYm90dG9tID8gXCIwLjcxZW1cIiA6IFwiMC4zMmVtXCIpKTtcblxuICAgIGlmIChjb250ZXh0ICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgIHBhdGggPSBwYXRoLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0aWNrID0gdGljay50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgbGluZSA9IGxpbmUudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRleHQgPSB0ZXh0LnRyYW5zaXRpb24oY29udGV4dCk7XG5cbiAgICAgIHRpY2tFeGl0ID0gdGlja0V4aXQudHJhbnNpdGlvbihjb250ZXh0KVxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGlzRmluaXRlKGQgPSBwb3NpdGlvbihkKSkgPyB0cmFuc2Zvcm0oZCkgOiB0aGlzLmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTsgfSk7XG5cbiAgICAgIHRpY2tFbnRlclxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgdmFyIHAgPSB0aGlzLnBhcmVudE5vZGUuX19heGlzOyByZXR1cm4gdHJhbnNmb3JtKHAgJiYgaXNGaW5pdGUocCA9IHAoZCkpID8gcCA6IHBvc2l0aW9uKGQpKTsgfSk7XG4gICAgfVxuXG4gICAgdGlja0V4aXQucmVtb3ZlKCk7XG5cbiAgICBwYXRoXG4gICAgICAgIC5hdHRyKFwiZFwiLCBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09IHJpZ2h0XG4gICAgICAgICAgICA/ICh0aWNrU2l6ZU91dGVyID8gXCJNXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiLFwiICsgcmFuZ2UwICsgXCJIMC41VlwiICsgcmFuZ2UxICsgXCJIXCIgKyBrICogdGlja1NpemVPdXRlciA6IFwiTTAuNSxcIiArIHJhbmdlMCArIFwiVlwiICsgcmFuZ2UxKVxuICAgICAgICAgICAgOiAodGlja1NpemVPdXRlciA/IFwiTVwiICsgcmFuZ2UwICsgXCIsXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiVjAuNUhcIiArIHJhbmdlMSArIFwiVlwiICsgayAqIHRpY2tTaXplT3V0ZXIgOiBcIk1cIiArIHJhbmdlMCArIFwiLDAuNUhcIiArIHJhbmdlMSkpO1xuXG4gICAgdGlja1xuICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHBvc2l0aW9uKGQpKTsgfSk7XG5cbiAgICBsaW5lXG4gICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpO1xuXG4gICAgdGV4dFxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLnRleHQoZm9ybWF0KTtcblxuICAgIHNlbGVjdGlvbi5maWx0ZXIoZW50ZXJpbmcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgMTApXG4gICAgICAgIC5hdHRyKFwiZm9udC1mYW1pbHlcIiwgXCJzYW5zLXNlcmlmXCIpXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgb3JpZW50ID09PSByaWdodCA/IFwic3RhcnRcIiA6IG9yaWVudCA9PT0gbGVmdCA/IFwiZW5kXCIgOiBcIm1pZGRsZVwiKTtcblxuICAgIHNlbGVjdGlvblxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHsgdGhpcy5fX2F4aXMgPSBwb3NpdGlvbjsgfSk7XG4gIH1cblxuICBheGlzLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlID0gXywgYXhpcykgOiBzY2FsZTtcbiAgfTtcblxuICBheGlzLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRpY2tBcmd1bWVudHMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksIGF4aXM7XG4gIH07XG5cbiAgYXhpcy50aWNrQXJndW1lbnRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tBcmd1bWVudHMgPSBfID09IG51bGwgPyBbXSA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja0FyZ3VtZW50cy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja1ZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrVmFsdWVzID0gXyA9PSBudWxsID8gbnVsbCA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja1ZhbHVlcyAmJiB0aWNrVmFsdWVzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrRm9ybWF0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tGb3JtYXQgPSBfLCBheGlzKSA6IHRpY2tGb3JtYXQ7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gdGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZUlubmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICB9O1xuXG4gIGF4aXMudGlja1NpemVPdXRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVPdXRlcjtcbiAgfTtcblxuICBheGlzLnRpY2tQYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tQYWRkaW5nID0gK18sIGF4aXMpIDogdGlja1BhZGRpbmc7XG4gIH07XG5cbiAgcmV0dXJuIGF4aXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzVG9wKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHRvcCwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHJpZ2h0LCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzQm90dG9tKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKGJvdHRvbSwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc0xlZnQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMobGVmdCwgc2NhbGUpO1xufVxuIiwidmFyIG5vb3AgPSB7dmFsdWU6IGZ1bmN0aW9uKCkge319O1xuXG5mdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykpIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgdHlwZTogXCIgKyB0KTtcbiAgICBfW3RdID0gW107XG4gIH1cbiAgcmV0dXJuIG5ldyBEaXNwYXRjaChfKTtcbn1cblxuZnVuY3Rpb24gRGlzcGF0Y2goXykge1xuICB0aGlzLl8gPSBfO1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMsIHR5cGVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICBpZiAodCAmJiAhdHlwZXMuaGFzT3duUHJvcGVydHkodCkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0KTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuRGlzcGF0Y2gucHJvdG90eXBlID0gZGlzcGF0Y2gucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlzcGF0Y2gsXG4gIG9uOiBmdW5jdGlvbih0eXBlbmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgXyA9IHRoaXMuXyxcbiAgICAgICAgVCA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiwgXyksXG4gICAgICAgIHQsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IFQubGVuZ3RoO1xuXG4gICAgLy8gSWYgbm8gY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBvZiB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSAmJiAodCA9IGdldChfW3RdLCB0eXBlbmFtZS5uYW1lKSkpIHJldHVybiB0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIGEgdHlwZSB3YXMgc3BlY2lmaWVkLCBzZXQgdGhlIGNhbGxiYWNrIGZvciB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICAvLyBPdGhlcndpc2UsIGlmIGEgbnVsbCBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZW1vdmUgY2FsbGJhY2tzIG9mIHRoZSBnaXZlbiBuYW1lLlxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIGVsc2UgaWYgKGNhbGxiYWNrID09IG51bGwpIGZvciAodCBpbiBfKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIG51bGwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29weSA9IHt9LCBfID0gdGhpcy5fO1xuICAgIGZvciAodmFyIHQgaW4gXykgY29weVt0XSA9IF9bdF0uc2xpY2UoKTtcbiAgICByZXR1cm4gbmV3IERpc3BhdGNoKGNvcHkpO1xuICB9LFxuICBjYWxsOiBmdW5jdGlvbih0eXBlLCB0aGF0KSB7XG4gICAgaWYgKChuID0gYXJndW1lbnRzLmxlbmd0aCAtIDIpID4gMCkgZm9yICh2YXIgYXJncyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIG4sIHQ7IGkgPCBuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24odHlwZSwgdGhhdCwgYXJncykge1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aCwgYzsgaSA8IG47ICsraSkge1xuICAgIGlmICgoYyA9IHR5cGVbaV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBjLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXQodHlwZSwgbmFtZSwgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICh0eXBlW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHR5cGVbaV0gPSBub29wLCB0eXBlID0gdHlwZS5zbGljZSgwLCBpKS5jb25jYXQodHlwZS5zbGljZShpICsgMSkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChjYWxsYmFjayAhPSBudWxsKSB0eXBlLnB1c2goe25hbWU6IG5hbWUsIHZhbHVlOiBjYWxsYmFja30pO1xuICByZXR1cm4gdHlwZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGlzcGF0Y2g7XG4iLCJleHBvcnQgdmFyIHhodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gIHhodG1sOiB4aHRtbCxcbiAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcbn07XG4iLCJpbXBvcnQgbmFtZXNwYWNlcyBmcm9tIFwiLi9uYW1lc3BhY2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIiwgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcbiAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICByZXR1cm4gbmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShwcmVmaXgpID8ge3NwYWNlOiBuYW1lc3BhY2VzW3ByZWZpeF0sIGxvY2FsOiBuYW1lfSA6IG5hbWU7XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuL25hbWVzcGFjZVwiO1xuaW1wb3J0IHt4aHRtbH0gZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5mdW5jdGlvbiBjcmVhdG9ySW5oZXJpdChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIHVyaSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXG4gICAgICAgID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKVxuICAgICAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh1cmksIG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdG9yRml4ZWQoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gKGZ1bGxuYW1lLmxvY2FsXG4gICAgICA/IGNyZWF0b3JGaXhlZFxuICAgICAgOiBjcmVhdG9ySW5oZXJpdCkoZnVsbG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gbm9uZSgpIHt9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gbm9uZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZnVuY3Rpb24gZW1wdHkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBlbXB0eSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odXBkYXRlKSB7XG4gIHJldHVybiBuZXcgQXJyYXkodXBkYXRlLmxlbmd0aCk7XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZVwiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9lbnRlciB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRW50ZXJOb2RlKHBhcmVudCwgZGF0dW0pIHtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gcGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHRoaXMubmFtZXNwYWNlVVJJID0gcGFyZW50Lm5hbWVzcGFjZVVSSTtcbiAgdGhpcy5fbmV4dCA9IG51bGw7XG4gIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fX2RhdGFfXyA9IGRhdHVtO1xufVxuXG5FbnRlck5vZGUucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRW50ZXJOb2RlLFxuICBhcHBlbmRDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHRoaXMuX25leHQpOyB9LFxuICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uKGNoaWxkLCBuZXh0KSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBuZXh0KTsgfSxcbiAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsgfSxcbiAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQge0VudGVyTm9kZX0gZnJvbSBcIi4vZW50ZXJcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi4vY29uc3RhbnRcIjtcblxudmFyIGtleVByZWZpeCA9IFwiJFwiOyAvLyBQcm90ZWN0IGFnYWluc3Qga2V5cyBsaWtlIOKAnF9fcHJvdG9fX+KAnS5cblxuZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgbm9kZSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBmaXQgaW50byB1cGRhdGUuXG4gIC8vIFB1dCBhbnkgbnVsbCBub2RlcyBpbnRvIGVudGVyLlxuICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gIGZvciAoOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9u4oCZdCBmaXQgaW50byBleGl0LlxuICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluZEtleShwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhLCBrZXkpIHtcbiAgdmFyIGksXG4gICAgICBub2RlLFxuICAgICAgbm9kZUJ5S2V5VmFsdWUgPSB7fSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAga2V5VmFsdWVzID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKSxcbiAgICAgIGtleVZhbHVlO1xuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBub2RlLlxuICAvLyBJZiBtdWx0aXBsZSBub2RlcyBoYXZlIHRoZSBzYW1lIGtleSwgdGhlIGR1cGxpY2F0ZXMgYXJlIGFkZGVkIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAga2V5VmFsdWVzW2ldID0ga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgICBpZiAoa2V5VmFsdWUgaW4gbm9kZUJ5S2V5VmFsdWUpIHtcbiAgICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBkYXR1bS5cbiAgLy8gSWYgdGhlcmUgYSBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleSwgam9pbiBhbmQgYWRkIGl0IHRvIHVwZGF0ZS5cbiAgLy8gSWYgdGhlcmUgaXMgbm90IChvciB0aGUga2V5IGlzIGEgZHVwbGljYXRlKSwgYWRkIGl0IHRvIGVudGVyLlxuICBmb3IgKGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChwYXJlbnQsIGRhdGFbaV0sIGksIGRhdGEpO1xuICAgIGlmIChub2RlID0gbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdKSB7XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgYW55IHJlbWFpbmluZyBub2RlcyB0aGF0IHdlcmUgbm90IGJvdW5kIHRvIGRhdGEgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlW2tleVZhbHVlc1tpXV0gPT09IG5vZGUpKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgZGF0YSA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGogPSAtMTtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oZCkgeyBkYXRhWysral0gPSBkOyB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBiaW5kID0ga2V5ID8gYmluZEtleSA6IGJpbmRJbmRleCxcbiAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCh2YWx1ZSk7XG5cbiAgZm9yICh2YXIgbSA9IGdyb3Vwcy5sZW5ndGgsIHVwZGF0ZSA9IG5ldyBBcnJheShtKSwgZW50ZXIgPSBuZXcgQXJyYXkobSksIGV4aXQgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YSA9IHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSxcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBlbnRlckdyb3VwID0gZW50ZXJbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIHVwZGF0ZUdyb3VwID0gdXBkYXRlW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICBleGl0R3JvdXAgPSBleGl0W2pdID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKTtcblxuICAgIGJpbmQocGFyZW50LCBncm91cCwgZW50ZXJHcm91cCwgdXBkYXRlR3JvdXAsIGV4aXRHcm91cCwgZGF0YSwga2V5KTtcblxuICAgIC8vIE5vdyBjb25uZWN0IHRoZSBlbnRlciBub2RlcyB0byB0aGVpciBmb2xsb3dpbmcgdXBkYXRlIG5vZGUsIHN1Y2ggdGhhdFxuICAgIC8vIGFwcGVuZENoaWxkIGNhbiBpbnNlcnQgdGhlIG1hdGVyaWFsaXplZCBlbnRlciBub2RlIGJlZm9yZSB0aGlzIG5vZGUsXG4gICAgLy8gcmF0aGVyIHRoYW4gYXQgdGhlIGVuZCBvZiB0aGUgcGFyZW50IG5vZGUuXG4gICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDAsIHByZXZpb3VzLCBuZXh0OyBpMCA8IGRhdGFMZW5ndGg7ICsraTApIHtcbiAgICAgIGlmIChwcmV2aW91cyA9IGVudGVyR3JvdXBbaTBdKSB7XG4gICAgICAgIGlmIChpMCA+PSBpMSkgaTEgPSBpMCArIDE7XG4gICAgICAgIHdoaWxlICghKG5leHQgPSB1cGRhdGVHcm91cFtpMV0pICYmICsraTEgPCBkYXRhTGVuZ3RoKTtcbiAgICAgICAgcHJldmlvdXMuX25leHQgPSBuZXh0IHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlID0gbmV3IFNlbGVjdGlvbih1cGRhdGUsIHBhcmVudHMpO1xuICB1cGRhdGUuX2VudGVyID0gZW50ZXI7XG4gIHVwZGF0ZS5fZXhpdCA9IGV4aXQ7XG4gIHJldHVybiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHNvcnRncm91cHMsIHRoaXMuX3BhcmVudHMpLm9yZGVyKCk7XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4uL25hbWVzcGFjZVwiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHYpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICByZXR1cm4gZnVsbG5hbWUubG9jYWxcbiAgICAgICAgPyBub2RlLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbClcbiAgICAgICAgOiBub2RlLmdldEF0dHJpYnV0ZShmdWxsbmFtZSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkpKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSAvLyBub2RlIGlzIGEgTm9kZVxuICAgICAgfHwgKG5vZGUuZG9jdW1lbnQgJiYgbm9kZSkgLy8gbm9kZSBpcyBhIFdpbmRvd1xuICAgICAgfHwgbm9kZS5kZWZhdWx0VmlldzsgLy8gbm9kZSBpcyBhIERvY3VtZW50XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgZWxzZSB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHYsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gc3R5bGVSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgIDogc3R5bGVWYWx1ZSh0aGlzLm5vZGUoKSwgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZVZhbHVlKG5vZGUsIG5hbWUpIHtcbiAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgfHwgZGVmYXVsdFZpZXcobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gcHJvcGVydHlSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHRoaXNbbmFtZV07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Q29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXNbbmFtZV0gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIGVsc2UgdGhpc1tuYW1lXSA9IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHByb3BlcnR5UmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHByb3BlcnR5RnVuY3Rpb25cbiAgICAgICAgICA6IHByb3BlcnR5Q29uc3RhbnQpKG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKClbbmFtZV07XG59XG4iLCJmdW5jdGlvbiBjbGFzc0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnRyaW0oKS5zcGxpdCgvXnxcXHMrLyk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzTGlzdChub2RlKSB7XG4gIHJldHVybiBub2RlLmNsYXNzTGlzdCB8fCBuZXcgQ2xhc3NMaXN0KG5vZGUpO1xufVxuXG5mdW5jdGlvbiBDbGFzc0xpc3Qobm9kZSkge1xuICB0aGlzLl9ub2RlID0gbm9kZTtcbiAgdGhpcy5fbmFtZXMgPSBjbGFzc0FycmF5KG5vZGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIik7XG59XG5cbkNsYXNzTGlzdC5wcm90b3R5cGUgPSB7XG4gIGFkZDogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnB1c2gobmFtZSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5zcGxpY2UoaSwgMSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIGNvbnRhaW5zOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSkgPj0gMDtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2xhc3NlZEFkZChub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5hZGQobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkUmVtb3ZlKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LnJlbW92ZShuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRUcnVlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkQWRkKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZhbHNlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkUmVtb3ZlKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZ1bmN0aW9uKG5hbWVzLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgKHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgPyBjbGFzc2VkQWRkIDogY2xhc3NlZFJlbW92ZSkodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgbmFtZXMgPSBjbGFzc0FycmF5KG5hbWUgKyBcIlwiKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbGlzdCA9IGNsYXNzTGlzdCh0aGlzLm5vZGUoKSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFsaXN0LmNvbnRhaW5zKG5hbWVzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gY2xhc3NlZEZ1bmN0aW9uIDogdmFsdWVcbiAgICAgID8gY2xhc3NlZFRydWVcbiAgICAgIDogY2xhc3NlZEZhbHNlKShuYW1lcywgdmFsdWUpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRSZW1vdmUoKSB7XG4gIHRoaXMudGV4dENvbnRlbnQgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gdGV4dFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gdGV4dEZ1bmN0aW9uXG4gICAgICAgICAgOiB0ZXh0Q29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG59XG4iLCJmdW5jdGlvbiBodG1sUmVtb3ZlKCkge1xuICB0aGlzLmlubmVySFRNTCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGh0bWxDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaHRtbEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IGh0bWxSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGh0bWxGdW5jdGlvblxuICAgICAgICAgIDogaHRtbENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLmlubmVySFRNTDtcbn1cbiIsImZ1bmN0aW9uIHJhaXNlKCkge1xuICBpZiAodGhpcy5uZXh0U2libGluZykgdGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyYWlzZSk7XG59XG4iLCJmdW5jdGlvbiBsb3dlcigpIHtcbiAgaWYgKHRoaXMucHJldmlvdXNTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMsIHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gobG93ZXIpO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3JcIjtcblxuZnVuY3Rpb24gY29uc3RhbnROdWxsKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgYmVmb3JlKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSksXG4gICAgICBzZWxlY3QgPSBiZWZvcmUgPT0gbnVsbCA/IGNvbnN0YW50TnVsbCA6IHR5cGVvZiBiZWZvcmUgPT09IFwiZnVuY3Rpb25cIiA/IGJlZm9yZSA6IHNlbGVjdG9yKGJlZm9yZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IG51bGwpO1xuICB9KTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyZW1vdmUpO1xufVxuIiwiZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lU2hhbGxvdygpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jbG9uZU5vZGUoZmFsc2UpLCB0aGlzLm5leHRTaWJsaW5nKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lRGVlcCgpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jbG9uZU5vZGUodHJ1ZSksIHRoaXMubmV4dFNpYmxpbmcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWVwKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChkZWVwID8gc2VsZWN0aW9uX2Nsb25lRGVlcCA6IHNlbGVjdGlvbl9jbG9uZVNoYWxsb3cpO1xufVxuIiwidmFyIGZpbHRlckV2ZW50cyA9IHt9O1xuXG5leHBvcnQgdmFyIGV2ZW50ID0gbnVsbDtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgaWYgKCEoXCJvbm1vdXNlZW50ZXJcIiBpbiBlbGVtZW50KSkge1xuICAgIGZpbHRlckV2ZW50cyA9IHttb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLCBtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCJ9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlckNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gIGxpc3RlbmVyID0gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApO1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgaWYgKCFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0aGlzICYmICEocmVsYXRlZC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0aGlzKSAmIDgpKSkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQxKSB7XG4gICAgdmFyIGV2ZW50MCA9IGV2ZW50OyAvLyBFdmVudHMgY2FuIGJlIHJlZW50cmFudCAoZS5nLiwgZm9jdXMpLlxuICAgIGV2ZW50ID0gZXZlbnQxO1xuICAgIHRyeSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIHRoaXMuX19kYXRhX18sIGluZGV4LCBncm91cCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGV2ZW50ID0gZXZlbnQwO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25SZW1vdmUodHlwZW5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbjtcbiAgICBpZiAoIW9uKSByZXR1cm47XG4gICAgZm9yICh2YXIgaiA9IDAsIGkgPSAtMSwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgaWYgKG8gPSBvbltqXSwgKCF0eXBlbmFtZS50eXBlIHx8IG8udHlwZSA9PT0gdHlwZW5hbWUudHlwZSkgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvblsrK2ldID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCsraSkgb24ubGVuZ3RoID0gaTtcbiAgICBlbHNlIGRlbGV0ZSB0aGlzLl9fb247XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uQWRkKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgd3JhcCA9IGZpbHRlckV2ZW50cy5oYXNPd25Qcm9wZXJ0eSh0eXBlbmFtZS50eXBlKSA/IGZpbHRlckNvbnRleHRMaXN0ZW5lciA6IGNvbnRleHRMaXN0ZW5lcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIGksIGdyb3VwKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uLCBvLCBsaXN0ZW5lciA9IHdyYXAodmFsdWUsIGksIGdyb3VwKTtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAoKG8gPSBvbltqXSkudHlwZSA9PT0gdHlwZW5hbWUudHlwZSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLmNhcHR1cmUgPSBjYXB0dXJlKTtcbiAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlbmFtZS50eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgY2FwdHVyZTogY2FwdHVyZX07XG4gICAgaWYgKCFvbikgdGhpcy5fX29uID0gW29dO1xuICAgIGVsc2Ugb24ucHVzaChvKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gIHZhciB0eXBlbmFtZXMgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgb24gPSB0aGlzLm5vZGUoKS5fX29uO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHQgPSB0eXBlbmFtZXNbaV0pLnR5cGUgPT09IG8udHlwZSAmJiB0Lm5hbWUgPT09IG8ubmFtZSkge1xuICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICBpZiAoY2FwdHVyZSA9PSBudWxsKSBjYXB0dXJlID0gZmFsc2U7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHRoaXMuZWFjaChvbih0eXBlbmFtZXNbaV0sIHZhbHVlLCBjYXB0dXJlKSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tRXZlbnQoZXZlbnQxLCBsaXN0ZW5lciwgdGhhdCwgYXJncykge1xuICB2YXIgZXZlbnQwID0gZXZlbnQ7XG4gIGV2ZW50MS5zb3VyY2VFdmVudCA9IGV2ZW50O1xuICBldmVudCA9IGV2ZW50MTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0gZmluYWxseSB7XG4gICAgZXZlbnQgPSBldmVudDA7XG4gIH1cbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBkZWZhdWx0Vmlldyhub2RlKSxcbiAgICAgIGV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuXG4gIGlmICh0eXBlb2YgZXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGV2ZW50ID0gbmV3IGV2ZW50KHR5cGUsIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICBlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hDb25zdGFudCh0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZGlzcGF0Y2hGdW5jdGlvblxuICAgICAgOiBkaXNwYXRjaENvbnN0YW50KSh0eXBlLCBwYXJhbXMpKTtcbn1cbiIsImltcG9ydCBzZWxlY3Rpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0YSBmcm9tIFwiLi9kYXRhXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VudGVyIGZyb20gXCIuL2VudGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2V4aXQgZnJvbSBcIi4vZXhpdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9qb2luIGZyb20gXCIuL2pvaW5cIjtcbmltcG9ydCBzZWxlY3Rpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fb3JkZXIgZnJvbSBcIi4vb3JkZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc29ydCBmcm9tIFwiLi9zb3J0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NhbGwgZnJvbSBcIi4vY2FsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlcyBmcm9tIFwiLi9ub2Rlc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlIGZyb20gXCIuL25vZGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2l6ZSBmcm9tIFwiLi9zaXplXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VtcHR5IGZyb20gXCIuL2VtcHR5XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VhY2ggZnJvbSBcIi4vZWFjaFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hdHRyIGZyb20gXCIuL2F0dHJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fcHJvcGVydHkgZnJvbSBcIi4vcHJvcGVydHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xhc3NlZCBmcm9tIFwiLi9jbGFzc2VkXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RleHQgZnJvbSBcIi4vdGV4dFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9odG1sIGZyb20gXCIuL2h0bWxcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmFpc2UgZnJvbSBcIi4vcmFpc2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fbG93ZXIgZnJvbSBcIi4vbG93ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXBwZW5kIGZyb20gXCIuL2FwcGVuZFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnNlcnQgZnJvbSBcIi4vaW5zZXJ0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xvbmUgZnJvbSBcIi4vY2xvbmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0dW0gZnJvbSBcIi4vZGF0dW1cIjtcbmltcG9ydCBzZWxlY3Rpb25fb24gZnJvbSBcIi4vb25cIjtcbmltcG9ydCBzZWxlY3Rpb25fZGlzcGF0Y2ggZnJvbSBcIi4vZGlzcGF0Y2hcIjtcblxuZXhwb3J0IHZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xufVxuXG5TZWxlY3Rpb24ucHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgc2VsZWN0OiBzZWxlY3Rpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHNlbGVjdGlvbl9zZWxlY3RBbGwsXG4gIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgZGF0YTogc2VsZWN0aW9uX2RhdGEsXG4gIGVudGVyOiBzZWxlY3Rpb25fZW50ZXIsXG4gIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICBqb2luOiBzZWxlY3Rpb25fam9pbixcbiAgbWVyZ2U6IHNlbGVjdGlvbl9tZXJnZSxcbiAgb3JkZXI6IHNlbGVjdGlvbl9vcmRlcixcbiAgc29ydDogc2VsZWN0aW9uX3NvcnQsXG4gIGNhbGw6IHNlbGVjdGlvbl9jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX25vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fbm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3NpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9lYWNoLFxuICBhdHRyOiBzZWxlY3Rpb25fYXR0cixcbiAgc3R5bGU6IHNlbGVjdGlvbl9zdHlsZSxcbiAgcHJvcGVydHk6IHNlbGVjdGlvbl9wcm9wZXJ0eSxcbiAgY2xhc3NlZDogc2VsZWN0aW9uX2NsYXNzZWQsXG4gIHRleHQ6IHNlbGVjdGlvbl90ZXh0LFxuICBodG1sOiBzZWxlY3Rpb25faHRtbCxcbiAgcmFpc2U6IHNlbGVjdGlvbl9yYWlzZSxcbiAgbG93ZXI6IHNlbGVjdGlvbl9sb3dlcixcbiAgYXBwZW5kOiBzZWxlY3Rpb25fYXBwZW5kLFxuICBpbnNlcnQ6IHNlbGVjdGlvbl9pbnNlcnQsXG4gIHJlbW92ZTogc2VsZWN0aW9uX3JlbW92ZSxcbiAgY2xvbmU6IHNlbGVjdGlvbl9jbG9uZSxcbiAgZGF0dW06IHNlbGVjdGlvbl9kYXR1bSxcbiAgb246IHNlbGVjdGlvbl9vbixcbiAgZGlzcGF0Y2g6IHNlbGVjdGlvbl9kaXNwYXRjaFxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2VsZWN0aW9uO1xuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2VsZWN0b3JBbGwgZnJvbSBcIi4uL3NlbGVjdG9yQWxsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSk7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHBhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgbWF0Y2hlciBmcm9tIFwiLi4vbWF0Y2hlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9uZW50ZXIsIG9udXBkYXRlLCBvbmV4aXQpIHtcbiAgdmFyIGVudGVyID0gdGhpcy5lbnRlcigpLCB1cGRhdGUgPSB0aGlzLCBleGl0ID0gdGhpcy5leGl0KCk7XG4gIGVudGVyID0gdHlwZW9mIG9uZW50ZXIgPT09IFwiZnVuY3Rpb25cIiA/IG9uZW50ZXIoZW50ZXIpIDogZW50ZXIuYXBwZW5kKG9uZW50ZXIgKyBcIlwiKTtcbiAgaWYgKG9udXBkYXRlICE9IG51bGwpIHVwZGF0ZSA9IG9udXBkYXRlKHVwZGF0ZSk7XG4gIGlmIChvbmV4aXQgPT0gbnVsbCkgZXhpdC5yZW1vdmUoKTsgZWxzZSBvbmV4aXQoZXhpdCk7XG4gIHJldHVybiBlbnRlciAmJiB1cGRhdGUgPyBlbnRlci5tZXJnZSh1cGRhdGUpLm9yZGVyKCkgOiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0aW9uKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHNlbGVjdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gZ3JvdXAubGVuZ3RoIC0gMSwgbmV4dCA9IGdyb3VwW2ldLCBub2RlOyAtLWkgPj0gMDspIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgaWYgKG5leHQgJiYgbm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuZXh0KSBeIDQpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgIG5leHQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgYXJndW1lbnRzWzBdID0gdGhpcztcbiAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaSA9IC0xO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7IG5vZGVzWysraV0gPSB0aGlzOyB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gZ3JvdXBbaV07XG4gICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSAwO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7ICsrc2l6ZTsgfSk7XG4gIHJldHVybiBzaXplO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhdGhpcy5ub2RlKCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpXG4gICAgICA6IHRoaXMubm9kZSgpLl9fZGF0YV9fO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKV1dLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xufVxuIiwidmFyIG5leHRJZCA9IDA7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvY2FsKCkge1xuICByZXR1cm4gbmV3IExvY2FsO1xufVxuXG5mdW5jdGlvbiBMb2NhbCgpIHtcbiAgdGhpcy5fID0gXCJAXCIgKyAoKytuZXh0SWQpLnRvU3RyaW5nKDM2KTtcbn1cblxuTG9jYWwucHJvdG90eXBlID0gbG9jYWwucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTG9jYWwsXG4gIGdldDogZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBpZCA9IHRoaXMuXztcbiAgICB3aGlsZSAoIShpZCBpbiBub2RlKSkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybjtcbiAgICByZXR1cm4gbm9kZVtpZF07XG4gIH0sXG4gIHNldDogZnVuY3Rpb24obm9kZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gbm9kZVt0aGlzLl9dID0gdmFsdWU7XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiB0aGlzLl8gaW4gbm9kZSAmJiBkZWxldGUgbm9kZVt0aGlzLl9dO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuXztcbiAgfVxufTtcbiIsImltcG9ydCB7ZXZlbnR9IGZyb20gXCIuL3NlbGVjdGlvbi9vblwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGN1cnJlbnQgPSBldmVudCwgc291cmNlO1xuICB3aGlsZSAoc291cmNlID0gY3VycmVudC5zb3VyY2VFdmVudCkgY3VycmVudCA9IHNvdXJjZTtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbiwgcm9vdH0gZnJvbSBcIi4vc2VsZWN0aW9uL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFNlbGVjdGlvbihbZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcildLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbc2VsZWN0b3IgPT0gbnVsbCA/IFtdIDogc2VsZWN0b3JdLCByb290KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERyYWdFdmVudCh0YXJnZXQsIHR5cGUsIHN1YmplY3QsIGlkLCBhY3RpdmUsIHgsIHksIGR4LCBkeSwgZGlzcGF0Y2gpIHtcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gIHRoaXMuaWRlbnRpZmllciA9IGlkO1xuICB0aGlzLmFjdGl2ZSA9IGFjdGl2ZTtcbiAgdGhpcy54ID0geDtcbiAgdGhpcy55ID0geTtcbiAgdGhpcy5keCA9IGR4O1xuICB0aGlzLmR5ID0gZHk7XG4gIHRoaXMuXyA9IGRpc3BhdGNoO1xufVxuXG5EcmFnRXZlbnQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oKSB7XG4gIHZhciB2YWx1ZSA9IHRoaXMuXy5vbi5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gIHJldHVybiB2YWx1ZSA9PT0gdGhpcy5fID8gdGhpcyA6IHZhbHVlO1xufTtcbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtldmVudCwgY3VzdG9tRXZlbnQsIHNlbGVjdCwgbW91c2UsIHRvdWNofSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgbm9kcmFnLCB7eWVzZHJhZ30gZnJvbSBcIi4vbm9kcmFnLmpzXCI7XG5pbXBvcnQgbm9ldmVudCwge25vcHJvcGFnYXRpb259IGZyb20gXCIuL25vZXZlbnQuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IERyYWdFdmVudCBmcm9tIFwiLi9ldmVudC5qc1wiO1xuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoKSB7XG4gIHJldHVybiAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q29udGFpbmVyKCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnROb2RlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0U3ViamVjdChkKSB7XG4gIHJldHVybiBkID09IG51bGwgPyB7eDogZXZlbnQueCwgeTogZXZlbnQueX0gOiBkO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VG91Y2hhYmxlKCkge1xuICByZXR1cm4gbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzIHx8IChcIm9udG91Y2hzdGFydFwiIGluIHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICBjb250YWluZXIgPSBkZWZhdWx0Q29udGFpbmVyLFxuICAgICAgc3ViamVjdCA9IGRlZmF1bHRTdWJqZWN0LFxuICAgICAgdG91Y2hhYmxlID0gZGVmYXVsdFRvdWNoYWJsZSxcbiAgICAgIGdlc3R1cmVzID0ge30sXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZHJhZ1wiLCBcImVuZFwiKSxcbiAgICAgIGFjdGl2ZSA9IDAsXG4gICAgICBtb3VzZWRvd254LFxuICAgICAgbW91c2Vkb3dueSxcbiAgICAgIG1vdXNlbW92aW5nLFxuICAgICAgdG91Y2hlbmRpbmcsXG4gICAgICBjbGlja0Rpc3RhbmNlMiA9IDA7XG5cbiAgZnVuY3Rpb24gZHJhZyhzZWxlY3Rpb24pIHtcbiAgICBzZWxlY3Rpb25cbiAgICAgICAgLm9uKFwibW91c2Vkb3duLmRyYWdcIiwgbW91c2Vkb3duZWQpXG4gICAgICAuZmlsdGVyKHRvdWNoYWJsZSlcbiAgICAgICAgLm9uKFwidG91Y2hzdGFydC5kcmFnXCIsIHRvdWNoc3RhcnRlZClcbiAgICAgICAgLm9uKFwidG91Y2htb3ZlLmRyYWdcIiwgdG91Y2htb3ZlZClcbiAgICAgICAgLm9uKFwidG91Y2hlbmQuZHJhZyB0b3VjaGNhbmNlbC5kcmFnXCIsIHRvdWNoZW5kZWQpXG4gICAgICAgIC5zdHlsZShcInRvdWNoLWFjdGlvblwiLCBcIm5vbmVcIilcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlZG93bmVkKCkge1xuICAgIGlmICh0b3VjaGVuZGluZyB8fCAhZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgZ2VzdHVyZSA9IGJlZm9yZXN0YXJ0KFwibW91c2VcIiwgY29udGFpbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIG1vdXNlLCB0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICghZ2VzdHVyZSkgcmV0dXJuO1xuICAgIHNlbGVjdChldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS5kcmFnXCIsIG1vdXNlbW92ZWQsIHRydWUpLm9uKFwibW91c2V1cC5kcmFnXCIsIG1vdXNldXBwZWQsIHRydWUpO1xuICAgIG5vZHJhZyhldmVudC52aWV3KTtcbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgbW91c2Vtb3ZpbmcgPSBmYWxzZTtcbiAgICBtb3VzZWRvd254ID0gZXZlbnQuY2xpZW50WDtcbiAgICBtb3VzZWRvd255ID0gZXZlbnQuY2xpZW50WTtcbiAgICBnZXN0dXJlKFwic3RhcnRcIik7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZW1vdmVkKCkge1xuICAgIG5vZXZlbnQoKTtcbiAgICBpZiAoIW1vdXNlbW92aW5nKSB7XG4gICAgICB2YXIgZHggPSBldmVudC5jbGllbnRYIC0gbW91c2Vkb3dueCwgZHkgPSBldmVudC5jbGllbnRZIC0gbW91c2Vkb3dueTtcbiAgICAgIG1vdXNlbW92aW5nID0gZHggKiBkeCArIGR5ICogZHkgPiBjbGlja0Rpc3RhbmNlMjtcbiAgICB9XG4gICAgZ2VzdHVyZXMubW91c2UoXCJkcmFnXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91c2V1cHBlZCgpIHtcbiAgICBzZWxlY3QoZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuZHJhZyBtb3VzZXVwLmRyYWdcIiwgbnVsbCk7XG4gICAgeWVzZHJhZyhldmVudC52aWV3LCBtb3VzZW1vdmluZyk7XG4gICAgbm9ldmVudCgpO1xuICAgIGdlc3R1cmVzLm1vdXNlKFwiZW5kXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hzdGFydGVkKCkge1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBjID0gY29udGFpbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgZ2VzdHVyZTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChnZXN0dXJlID0gYmVmb3Jlc3RhcnQodG91Y2hlc1tpXS5pZGVudGlmaWVyLCBjLCB0b3VjaCwgdGhpcywgYXJndW1lbnRzKSkge1xuICAgICAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgICAgIGdlc3R1cmUoXCJzdGFydFwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKCkge1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgZ2VzdHVyZTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICBub2V2ZW50KCk7XG4gICAgICAgIGdlc3R1cmUoXCJkcmFnXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZW5kZWQoKSB7XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBnZXN0dXJlc1t0b3VjaGVzW2ldLmlkZW50aWZpZXJdKSB7XG4gICAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgICAgZ2VzdHVyZShcImVuZFwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBiZWZvcmVzdGFydChpZCwgY29udGFpbmVyLCBwb2ludCwgdGhhdCwgYXJncykge1xuICAgIHZhciBwID0gcG9pbnQoY29udGFpbmVyLCBpZCksIHMsIGR4LCBkeSxcbiAgICAgICAgc3VibGlzdGVuZXJzID0gbGlzdGVuZXJzLmNvcHkoKTtcblxuICAgIGlmICghY3VzdG9tRXZlbnQobmV3IERyYWdFdmVudChkcmFnLCBcImJlZm9yZXN0YXJ0XCIsIHMsIGlkLCBhY3RpdmUsIHBbMF0sIHBbMV0sIDAsIDAsIHN1Ymxpc3RlbmVycyksIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKChldmVudC5zdWJqZWN0ID0gcyA9IHN1YmplY3QuYXBwbHkodGhhdCwgYXJncykpID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICAgIGR4ID0gcy54IC0gcFswXSB8fCAwO1xuICAgICAgZHkgPSBzLnkgLSBwWzFdIHx8IDA7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KSkgcmV0dXJuO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGdlc3R1cmUodHlwZSkge1xuICAgICAgdmFyIHAwID0gcCwgbjtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwic3RhcnRcIjogZ2VzdHVyZXNbaWRdID0gZ2VzdHVyZSwgbiA9IGFjdGl2ZSsrOyBicmVhaztcbiAgICAgICAgY2FzZSBcImVuZFwiOiBkZWxldGUgZ2VzdHVyZXNbaWRdLCAtLWFjdGl2ZTsgLy8gbm9icmVha1xuICAgICAgICBjYXNlIFwiZHJhZ1wiOiBwID0gcG9pbnQoY29udGFpbmVyLCBpZCksIG4gPSBhY3RpdmU7IGJyZWFrO1xuICAgICAgfVxuICAgICAgY3VzdG9tRXZlbnQobmV3IERyYWdFdmVudChkcmFnLCB0eXBlLCBzLCBpZCwgbiwgcFswXSArIGR4LCBwWzFdICsgZHksIHBbMF0gLSBwMFswXSwgcFsxXSAtIHAwWzFdLCBzdWJsaXN0ZW5lcnMpLCBzdWJsaXN0ZW5lcnMuYXBwbHksIHN1Ymxpc3RlbmVycywgW3R5cGUsIHRoYXQsIGFyZ3NdKTtcbiAgICB9O1xuICB9XG5cbiAgZHJhZy5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBkcmFnKSA6IGZpbHRlcjtcbiAgfTtcblxuICBkcmFnLmNvbnRhaW5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb250YWluZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KF8pLCBkcmFnKSA6IGNvbnRhaW5lcjtcbiAgfTtcblxuICBkcmFnLnN1YmplY3QgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3ViamVjdCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIGRyYWcpIDogc3ViamVjdDtcbiAgfTtcblxuICBkcmFnLnRvdWNoYWJsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0b3VjaGFibGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGRyYWcpIDogdG91Y2hhYmxlO1xuICB9O1xuXG4gIGRyYWcub24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gZHJhZyA6IHZhbHVlO1xuICB9O1xuXG4gIGRyYWcuY2xpY2tEaXN0YW5jZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGlja0Rpc3RhbmNlMiA9IChfID0gK18pICogXywgZHJhZykgOiBNYXRoLnNxcnQoY2xpY2tEaXN0YW5jZTIpO1xuICB9O1xuXG4gIHJldHVybiBkcmFnO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29uc3RydWN0b3IsIGZhY3RvcnksIHByb3RvdHlwZSkge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmYWN0b3J5LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgcHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQocGFyZW50LCBkZWZpbml0aW9uKSB7XG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgcHJvdG90eXBlW2tleV0gPSBkZWZpbml0aW9uW2tleV07XG4gIHJldHVybiBwcm90b3R5cGU7XG59XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmUuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENvbG9yKCkge31cblxuZXhwb3J0IHZhciBkYXJrZXIgPSAwLjc7XG5leHBvcnQgdmFyIGJyaWdodGVyID0gMSAvIGRhcmtlcjtcblxudmFyIHJlSSA9IFwiXFxcXHMqKFsrLV0/XFxcXGQrKVxcXFxzKlwiLFxuICAgIHJlTiA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pXFxcXHMqXCIsXG4gICAgcmVQID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPyklXFxcXHMqXCIsXG4gICAgcmVIZXggPSAvXiMoWzAtOWEtZl17Myw4fSkkLyxcbiAgICByZVJnYkludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVJLCByZUksIHJlSV0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYlBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZUksIHJlSSwgcmVJLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbGFcXFxcKFwiICsgW3JlTiwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKTtcblxudmFyIG5hbWVkID0ge1xuICBhbGljZWJsdWU6IDB4ZjBmOGZmLFxuICBhbnRpcXVld2hpdGU6IDB4ZmFlYmQ3LFxuICBhcXVhOiAweDAwZmZmZixcbiAgYXF1YW1hcmluZTogMHg3ZmZmZDQsXG4gIGF6dXJlOiAweGYwZmZmZixcbiAgYmVpZ2U6IDB4ZjVmNWRjLFxuICBiaXNxdWU6IDB4ZmZlNGM0LFxuICBibGFjazogMHgwMDAwMDAsXG4gIGJsYW5jaGVkYWxtb25kOiAweGZmZWJjZCxcbiAgYmx1ZTogMHgwMDAwZmYsXG4gIGJsdWV2aW9sZXQ6IDB4OGEyYmUyLFxuICBicm93bjogMHhhNTJhMmEsXG4gIGJ1cmx5d29vZDogMHhkZWI4ODcsXG4gIGNhZGV0Ymx1ZTogMHg1ZjllYTAsXG4gIGNoYXJ0cmV1c2U6IDB4N2ZmZjAwLFxuICBjaG9jb2xhdGU6IDB4ZDI2OTFlLFxuICBjb3JhbDogMHhmZjdmNTAsXG4gIGNvcm5mbG93ZXJibHVlOiAweDY0OTVlZCxcbiAgY29ybnNpbGs6IDB4ZmZmOGRjLFxuICBjcmltc29uOiAweGRjMTQzYyxcbiAgY3lhbjogMHgwMGZmZmYsXG4gIGRhcmtibHVlOiAweDAwMDA4YixcbiAgZGFya2N5YW46IDB4MDA4YjhiLFxuICBkYXJrZ29sZGVucm9kOiAweGI4ODYwYixcbiAgZGFya2dyYXk6IDB4YTlhOWE5LFxuICBkYXJrZ3JlZW46IDB4MDA2NDAwLFxuICBkYXJrZ3JleTogMHhhOWE5YTksXG4gIGRhcmtraGFraTogMHhiZGI3NmIsXG4gIGRhcmttYWdlbnRhOiAweDhiMDA4YixcbiAgZGFya29saXZlZ3JlZW46IDB4NTU2YjJmLFxuICBkYXJrb3JhbmdlOiAweGZmOGMwMCxcbiAgZGFya29yY2hpZDogMHg5OTMyY2MsXG4gIGRhcmtyZWQ6IDB4OGIwMDAwLFxuICBkYXJrc2FsbW9uOiAweGU5OTY3YSxcbiAgZGFya3NlYWdyZWVuOiAweDhmYmM4ZixcbiAgZGFya3NsYXRlYmx1ZTogMHg0ODNkOGIsXG4gIGRhcmtzbGF0ZWdyYXk6IDB4MmY0ZjRmLFxuICBkYXJrc2xhdGVncmV5OiAweDJmNGY0ZixcbiAgZGFya3R1cnF1b2lzZTogMHgwMGNlZDEsXG4gIGRhcmt2aW9sZXQ6IDB4OTQwMGQzLFxuICBkZWVwcGluazogMHhmZjE0OTMsXG4gIGRlZXBza3libHVlOiAweDAwYmZmZixcbiAgZGltZ3JheTogMHg2OTY5NjksXG4gIGRpbWdyZXk6IDB4Njk2OTY5LFxuICBkb2RnZXJibHVlOiAweDFlOTBmZixcbiAgZmlyZWJyaWNrOiAweGIyMjIyMixcbiAgZmxvcmFsd2hpdGU6IDB4ZmZmYWYwLFxuICBmb3Jlc3RncmVlbjogMHgyMjhiMjIsXG4gIGZ1Y2hzaWE6IDB4ZmYwMGZmLFxuICBnYWluc2Jvcm86IDB4ZGNkY2RjLFxuICBnaG9zdHdoaXRlOiAweGY4ZjhmZixcbiAgZ29sZDogMHhmZmQ3MDAsXG4gIGdvbGRlbnJvZDogMHhkYWE1MjAsXG4gIGdyYXk6IDB4ODA4MDgwLFxuICBncmVlbjogMHgwMDgwMDAsXG4gIGdyZWVueWVsbG93OiAweGFkZmYyZixcbiAgZ3JleTogMHg4MDgwODAsXG4gIGhvbmV5ZGV3OiAweGYwZmZmMCxcbiAgaG90cGluazogMHhmZjY5YjQsXG4gIGluZGlhbnJlZDogMHhjZDVjNWMsXG4gIGluZGlnbzogMHg0YjAwODIsXG4gIGl2b3J5OiAweGZmZmZmMCxcbiAga2hha2k6IDB4ZjBlNjhjLFxuICBsYXZlbmRlcjogMHhlNmU2ZmEsXG4gIGxhdmVuZGVyYmx1c2g6IDB4ZmZmMGY1LFxuICBsYXduZ3JlZW46IDB4N2NmYzAwLFxuICBsZW1vbmNoaWZmb246IDB4ZmZmYWNkLFxuICBsaWdodGJsdWU6IDB4YWRkOGU2LFxuICBsaWdodGNvcmFsOiAweGYwODA4MCxcbiAgbGlnaHRjeWFuOiAweGUwZmZmZixcbiAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IDB4ZmFmYWQyLFxuICBsaWdodGdyYXk6IDB4ZDNkM2QzLFxuICBsaWdodGdyZWVuOiAweDkwZWU5MCxcbiAgbGlnaHRncmV5OiAweGQzZDNkMyxcbiAgbGlnaHRwaW5rOiAweGZmYjZjMSxcbiAgbGlnaHRzYWxtb246IDB4ZmZhMDdhLFxuICBsaWdodHNlYWdyZWVuOiAweDIwYjJhYSxcbiAgbGlnaHRza3libHVlOiAweDg3Y2VmYSxcbiAgbGlnaHRzbGF0ZWdyYXk6IDB4Nzc4ODk5LFxuICBsaWdodHNsYXRlZ3JleTogMHg3Nzg4OTksXG4gIGxpZ2h0c3RlZWxibHVlOiAweGIwYzRkZSxcbiAgbGlnaHR5ZWxsb3c6IDB4ZmZmZmUwLFxuICBsaW1lOiAweDAwZmYwMCxcbiAgbGltZWdyZWVuOiAweDMyY2QzMixcbiAgbGluZW46IDB4ZmFmMGU2LFxuICBtYWdlbnRhOiAweGZmMDBmZixcbiAgbWFyb29uOiAweDgwMDAwMCxcbiAgbWVkaXVtYXF1YW1hcmluZTogMHg2NmNkYWEsXG4gIG1lZGl1bWJsdWU6IDB4MDAwMGNkLFxuICBtZWRpdW1vcmNoaWQ6IDB4YmE1NWQzLFxuICBtZWRpdW1wdXJwbGU6IDB4OTM3MGRiLFxuICBtZWRpdW1zZWFncmVlbjogMHgzY2IzNzEsXG4gIG1lZGl1bXNsYXRlYmx1ZTogMHg3YjY4ZWUsXG4gIG1lZGl1bXNwcmluZ2dyZWVuOiAweDAwZmE5YSxcbiAgbWVkaXVtdHVycXVvaXNlOiAweDQ4ZDFjYyxcbiAgbWVkaXVtdmlvbGV0cmVkOiAweGM3MTU4NSxcbiAgbWlkbmlnaHRibHVlOiAweDE5MTk3MCxcbiAgbWludGNyZWFtOiAweGY1ZmZmYSxcbiAgbWlzdHlyb3NlOiAweGZmZTRlMSxcbiAgbW9jY2FzaW46IDB4ZmZlNGI1LFxuICBuYXZham93aGl0ZTogMHhmZmRlYWQsXG4gIG5hdnk6IDB4MDAwMDgwLFxuICBvbGRsYWNlOiAweGZkZjVlNixcbiAgb2xpdmU6IDB4ODA4MDAwLFxuICBvbGl2ZWRyYWI6IDB4NmI4ZTIzLFxuICBvcmFuZ2U6IDB4ZmZhNTAwLFxuICBvcmFuZ2VyZWQ6IDB4ZmY0NTAwLFxuICBvcmNoaWQ6IDB4ZGE3MGQ2LFxuICBwYWxlZ29sZGVucm9kOiAweGVlZThhYSxcbiAgcGFsZWdyZWVuOiAweDk4ZmI5OCxcbiAgcGFsZXR1cnF1b2lzZTogMHhhZmVlZWUsXG4gIHBhbGV2aW9sZXRyZWQ6IDB4ZGI3MDkzLFxuICBwYXBheWF3aGlwOiAweGZmZWZkNSxcbiAgcGVhY2hwdWZmOiAweGZmZGFiOSxcbiAgcGVydTogMHhjZDg1M2YsXG4gIHBpbms6IDB4ZmZjMGNiLFxuICBwbHVtOiAweGRkYTBkZCxcbiAgcG93ZGVyYmx1ZTogMHhiMGUwZTYsXG4gIHB1cnBsZTogMHg4MDAwODAsXG4gIHJlYmVjY2FwdXJwbGU6IDB4NjYzMzk5LFxuICByZWQ6IDB4ZmYwMDAwLFxuICByb3N5YnJvd246IDB4YmM4ZjhmLFxuICByb3lhbGJsdWU6IDB4NDE2OWUxLFxuICBzYWRkbGVicm93bjogMHg4YjQ1MTMsXG4gIHNhbG1vbjogMHhmYTgwNzIsXG4gIHNhbmR5YnJvd246IDB4ZjRhNDYwLFxuICBzZWFncmVlbjogMHgyZThiNTcsXG4gIHNlYXNoZWxsOiAweGZmZjVlZSxcbiAgc2llbm5hOiAweGEwNTIyZCxcbiAgc2lsdmVyOiAweGMwYzBjMCxcbiAgc2t5Ymx1ZTogMHg4N2NlZWIsXG4gIHNsYXRlYmx1ZTogMHg2YTVhY2QsXG4gIHNsYXRlZ3JheTogMHg3MDgwOTAsXG4gIHNsYXRlZ3JleTogMHg3MDgwOTAsXG4gIHNub3c6IDB4ZmZmYWZhLFxuICBzcHJpbmdncmVlbjogMHgwMGZmN2YsXG4gIHN0ZWVsYmx1ZTogMHg0NjgyYjQsXG4gIHRhbjogMHhkMmI0OGMsXG4gIHRlYWw6IDB4MDA4MDgwLFxuICB0aGlzdGxlOiAweGQ4YmZkOCxcbiAgdG9tYXRvOiAweGZmNjM0NyxcbiAgdHVycXVvaXNlOiAweDQwZTBkMCxcbiAgdmlvbGV0OiAweGVlODJlZSxcbiAgd2hlYXQ6IDB4ZjVkZWIzLFxuICB3aGl0ZTogMHhmZmZmZmYsXG4gIHdoaXRlc21va2U6IDB4ZjVmNWY1LFxuICB5ZWxsb3c6IDB4ZmZmZjAwLFxuICB5ZWxsb3dncmVlbjogMHg5YWNkMzJcbn07XG5cbmRlZmluZShDb2xvciwgY29sb3IsIHtcbiAgY29weTogZnVuY3Rpb24oY2hhbm5lbHMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgdGhpcy5jb25zdHJ1Y3RvciwgdGhpcywgY2hhbm5lbHMpO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkuZGlzcGxheWFibGUoKTtcbiAgfSxcbiAgaGV4OiBjb2xvcl9mb3JtYXRIZXgsIC8vIERlcHJlY2F0ZWQhIFVzZSBjb2xvci5mb3JtYXRIZXguXG4gIGZvcm1hdEhleDogY29sb3JfZm9ybWF0SGV4LFxuICBmb3JtYXRIc2w6IGNvbG9yX2Zvcm1hdEhzbCxcbiAgZm9ybWF0UmdiOiBjb2xvcl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiBjb2xvcl9mb3JtYXRSZ2Jcbn0pO1xuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdEhleCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRIc2woKSB7XG4gIHJldHVybiBoc2xDb252ZXJ0KHRoaXMpLmZvcm1hdEhzbCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRSZ2IoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdFJnYigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb2xvcihmb3JtYXQpIHtcbiAgdmFyIG0sIGw7XG4gIGZvcm1hdCA9IChmb3JtYXQgKyBcIlwiKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChtID0gcmVIZXguZXhlYyhmb3JtYXQpKSA/IChsID0gbVsxXS5sZW5ndGgsIG0gPSBwYXJzZUludChtWzFdLCAxNiksIGwgPT09IDYgPyByZ2JuKG0pIC8vICNmZjAwMDBcbiAgICAgIDogbCA9PT0gMyA/IG5ldyBSZ2IoKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHhmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSwgMSkgLy8gI2YwMFxuICAgICAgOiBsID09PSA4ID8gbmV3IFJnYihtID4+IDI0ICYgMHhmZiwgbSA+PiAxNiAmIDB4ZmYsIG0gPj4gOCAmIDB4ZmYsIChtICYgMHhmZikgLyAweGZmKSAvLyAjZmYwMDAwMDBcbiAgICAgIDogbCA9PT0gNCA/IG5ldyBSZ2IoKG0gPj4gMTIgJiAweGYpIHwgKG0gPj4gOCAmIDB4ZjApLCAobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSkgLyAweGZmKSAvLyAjZjAwMFxuICAgICAgOiBudWxsKSAvLyBpbnZhbGlkIGhleFxuICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgOiAobSA9IHJlUmdiUGVyY2VudC5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCAxKSAvLyByZ2IoMTAwJSwgMCUsIDAlKVxuICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgOiAobSA9IHJlSHNsUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCAxKSAvLyBoc2woMTIwLCA1MCUsIDUwJSlcbiAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgIDogZm9ybWF0ID09PSBcInRyYW5zcGFyZW50XCIgPyBuZXcgUmdiKE5hTiwgTmFOLCBOYU4sIDApXG4gICAgICA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJnYm4obikge1xuICByZXR1cm4gbmV3IFJnYihuID4+IDE2ICYgMHhmZiwgbiA+PiA4ICYgMHhmZiwgbiAmIDB4ZmYsIDEpO1xufVxuXG5mdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgaWYgKGEgPD0gMCkgciA9IGcgPSBiID0gTmFOO1xuICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYkNvbnZlcnQobykge1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBSZ2I7XG4gIG8gPSBvLnJnYigpO1xuICByZXR1cm4gbmV3IFJnYihvLnIsIG8uZywgby5iLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICB0aGlzLnIgPSArcjtcbiAgdGhpcy5nID0gK2c7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKFJnYiwgcmdiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoLTAuNSA8PSB0aGlzLnIgJiYgdGhpcy5yIDwgMjU1LjUpXG4gICAgICAgICYmICgtMC41IDw9IHRoaXMuZyAmJiB0aGlzLmcgPCAyNTUuNSlcbiAgICAgICAgJiYgKC0wLjUgPD0gdGhpcy5iICYmIHRoaXMuYiA8IDI1NS41KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBoZXg6IHJnYl9mb3JtYXRIZXgsIC8vIERlcHJlY2F0ZWQhIFVzZSBjb2xvci5mb3JtYXRIZXguXG4gIGZvcm1hdEhleDogcmdiX2Zvcm1hdEhleCxcbiAgZm9ybWF0UmdiOiByZ2JfZm9ybWF0UmdiLFxuICB0b1N0cmluZzogcmdiX2Zvcm1hdFJnYlxufSkpO1xuXG5mdW5jdGlvbiByZ2JfZm9ybWF0SGV4KCkge1xuICByZXR1cm4gXCIjXCIgKyBoZXgodGhpcy5yKSArIGhleCh0aGlzLmcpICsgaGV4KHRoaXMuYik7XG59XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRSZ2IoKSB7XG4gIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICByZXR1cm4gKGEgPT09IDEgPyBcInJnYihcIiA6IFwicmdiYShcIilcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMucikgfHwgMCkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmcpIHx8IDApKSArIFwiLCBcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5iKSB8fCAwKSlcbiAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG59XG5cbmZ1bmN0aW9uIGhleCh2YWx1ZSkge1xuICB2YWx1ZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh2YWx1ZSkgfHwgMCkpO1xuICByZXR1cm4gKHZhbHVlIDwgMTYgPyBcIjBcIiA6IFwiXCIpICsgdmFsdWUudG9TdHJpbmcoMTYpO1xufVxuXG5mdW5jdGlvbiBoc2xhKGgsIHMsIGwsIGEpIHtcbiAgaWYgKGEgPD0gMCkgaCA9IHMgPSBsID0gTmFOO1xuICBlbHNlIGlmIChsIDw9IDAgfHwgbCA+PSAxKSBoID0gcyA9IE5hTjtcbiAgZWxzZSBpZiAocyA8PSAwKSBoID0gTmFOO1xuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG5ldyBIc2woby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgSHNsO1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG87XG4gIG8gPSBvLnJnYigpO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbWluID0gTWF0aC5taW4ociwgZywgYiksXG4gICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcbiAgICAgIGggPSBOYU4sXG4gICAgICBzID0gbWF4IC0gbWluLFxuICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgaWYgKHMpIHtcbiAgICBpZiAociA9PT0gbWF4KSBoID0gKGcgLSBiKSAvIHMgKyAoZyA8IGIpICogNjtcbiAgICBlbHNlIGlmIChnID09PSBtYXgpIGggPSAoYiAtIHIpIC8gcyArIDI7XG4gICAgZWxzZSBoID0gKHIgLSBnKSAvIHMgKyA0O1xuICAgIHMgLz0gbCA8IDAuNSA/IG1heCArIG1pbiA6IDIgLSBtYXggLSBtaW47XG4gICAgaCAqPSA2MDtcbiAgfSBlbHNlIHtcbiAgICBzID0gbCA+IDAgJiYgbCA8IDEgPyAwIDogaDtcbiAgfVxuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoc2xDb252ZXJ0KGgpIDogbmV3IEhzbChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIEhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSHNsLCBoc2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSB0aGlzLmggJSAzNjAgKyAodGhpcy5oIDwgMCkgKiAzNjAsXG4gICAgICAgIHMgPSBpc05hTihoKSB8fCBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyxcbiAgICAgICAgbCA9IHRoaXMubCxcbiAgICAgICAgbTIgPSBsICsgKGwgPCAwLjUgPyBsIDogMSAtIGwpICogcyxcbiAgICAgICAgbTEgPSAyICogbCAtIG0yO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgaHNsMnJnYihoID49IDI0MCA/IGggLSAyNDAgOiBoICsgMTIwLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoIDwgMTIwID8gaCArIDI0MCA6IGggLSAxMjAsIG0xLCBtMiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgwIDw9IHRoaXMucyAmJiB0aGlzLnMgPD0gMSB8fCBpc05hTih0aGlzLnMpKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmwgJiYgdGhpcy5sIDw9IDEpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGZvcm1hdEhzbDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gICAgcmV0dXJuIChhID09PSAxID8gXCJoc2woXCIgOiBcImhzbGEoXCIpXG4gICAgICAgICsgKHRoaXMuaCB8fCAwKSArIFwiLCBcIlxuICAgICAgICArICh0aGlzLnMgfHwgMCkgKiAxMDAgKyBcIiUsIFwiXG4gICAgICAgICsgKHRoaXMubCB8fCAwKSAqIDEwMCArIFwiJVwiXG4gICAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG4gIH1cbn0pKTtcblxuLyogRnJvbSBGdkQgMTMuMzcsIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgMyAqL1xuZnVuY3Rpb24gaHNsMnJnYihoLCBtMSwgbTIpIHtcbiAgcmV0dXJuIChoIDwgNjAgPyBtMSArIChtMiAtIG0xKSAqIGggLyA2MFxuICAgICAgOiBoIDwgMTgwID8gbTJcbiAgICAgIDogaCA8IDI0MCA/IG0xICsgKG0yIC0gbTEpICogKDI0MCAtIGgpIC8gNjBcbiAgICAgIDogbTEpICogMjU1O1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGJhc2lzKHQxLCB2MCwgdjEsIHYyLCB2Mykge1xuICB2YXIgdDIgPSB0MSAqIHQxLCB0MyA9IHQyICogdDE7XG4gIHJldHVybiAoKDEgLSAzICogdDEgKyAzICogdDIgLSB0MykgKiB2MFxuICAgICAgKyAoNCAtIDYgKiB0MiArIDMgKiB0MykgKiB2MVxuICAgICAgKyAoMSArIDMgKiB0MSArIDMgKiB0MiAtIDMgKiB0MykgKiB2MlxuICAgICAgKyB0MyAqIHYzKSAvIDY7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGggLSAxO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdCA8PSAwID8gKHQgPSAwKSA6IHQgPj0gMSA/ICh0ID0gMSwgbiAtIDEpIDogTWF0aC5mbG9vcih0ICogbiksXG4gICAgICAgIHYxID0gdmFsdWVzW2ldLFxuICAgICAgICB2MiA9IHZhbHVlc1tpICsgMV0sXG4gICAgICAgIHYwID0gaSA+IDAgPyB2YWx1ZXNbaSAtIDFdIDogMiAqIHYxIC0gdjIsXG4gICAgICAgIHYzID0gaSA8IG4gLSAxID8gdmFsdWVzW2kgKyAyXSA6IDIgKiB2MiAtIHYxO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5cbmZ1bmN0aW9uIGxpbmVhcihhLCBkKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKyB0ICogZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZXhwb25lbnRpYWwoYSwgYiwgeSkge1xuICByZXR1cm4gYSA9IE1hdGgucG93KGEsIHkpLCBiID0gTWF0aC5wb3coYiwgeSkgLSBhLCB5ID0gMSAvIHksIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3coYSArIHQgKiBiLCB5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh1ZShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQgPiAxODAgfHwgZCA8IC0xODAgPyBkIC0gMzYwICogTWF0aC5yb3VuZChkIC8gMzYwKSA6IGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnYW1tYSh5KSB7XG4gIHJldHVybiAoeSA9ICt5KSA9PT0gMSA/IG5vZ2FtbWEgOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIgLSBhID8gZXhwb25lbnRpYWwoYSwgYiwgeSkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9nYW1tYShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG4iLCJpbXBvcnQge3JnYiBhcyBjb2xvclJnYn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgYmFzaXMgZnJvbSBcIi4vYmFzaXNcIjtcbmltcG9ydCBiYXNpc0Nsb3NlZCBmcm9tIFwiLi9iYXNpc0Nsb3NlZFwiO1xuaW1wb3J0IG5vZ2FtbWEsIHtnYW1tYX0gZnJvbSBcIi4vY29sb3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHJnYkdhbW1hKHkpIHtcbiAgdmFyIGNvbG9yID0gZ2FtbWEoeSk7XG5cbiAgZnVuY3Rpb24gcmdiKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgciA9IGNvbG9yKChzdGFydCA9IGNvbG9yUmdiKHN0YXJ0KSkuciwgKGVuZCA9IGNvbG9yUmdiKGVuZCkpLnIpLFxuICAgICAgICBnID0gY29sb3Ioc3RhcnQuZywgZW5kLmcpLFxuICAgICAgICBiID0gY29sb3Ioc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LnIgPSByKHQpO1xuICAgICAgc3RhcnQuZyA9IGcodCk7XG4gICAgICBzdGFydC5iID0gYih0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG5cbiAgcmdiLmdhbW1hID0gcmdiR2FtbWE7XG5cbiAgcmV0dXJuIHJnYjtcbn0pKDEpO1xuXG5mdW5jdGlvbiByZ2JTcGxpbmUoc3BsaW5lKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICB2YXIgbiA9IGNvbG9ycy5sZW5ndGgsXG4gICAgICAgIHIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGcgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGksIGNvbG9yO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNvbG9yID0gY29sb3JSZ2IoY29sb3JzW2ldKTtcbiAgICAgIHJbaV0gPSBjb2xvci5yIHx8IDA7XG4gICAgICBnW2ldID0gY29sb3IuZyB8fCAwO1xuICAgICAgYltpXSA9IGNvbG9yLmIgfHwgMDtcbiAgICB9XG4gICAgciA9IHNwbGluZShyKTtcbiAgICBnID0gc3BsaW5lKGcpO1xuICAgIGIgPSBzcGxpbmUoYik7XG4gICAgY29sb3Iub3BhY2l0eSA9IDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGNvbG9yLnIgPSByKHQpO1xuICAgICAgY29sb3IuZyA9IGcodCk7XG4gICAgICBjb2xvci5iID0gYih0KTtcbiAgICAgIHJldHVybiBjb2xvciArIFwiXCI7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciByZ2JCYXNpcyA9IHJnYlNwbGluZShiYXNpcyk7XG5leHBvcnQgdmFyIHJnYkJhc2lzQ2xvc2VkID0gcmdiU3BsaW5lKGJhc2lzQ2xvc2VkKTtcbiIsImltcG9ydCB7YmFzaXN9IGZyb20gXCIuL2Jhc2lzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKCgodCAlPSAxKSA8IDAgPyArK3QgOiB0KSAqIG4pLFxuICAgICAgICB2MCA9IHZhbHVlc1soaSArIG4gLSAxKSAlIG5dLFxuICAgICAgICB2MSA9IHZhbHVlc1tpICUgbl0sXG4gICAgICAgIHYyID0gdmFsdWVzWyhpICsgMSkgJSBuXSxcbiAgICAgICAgdjMgPSB2YWx1ZXNbKGkgKyAyKSAlIG5dO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBuYiA9IGIgPyBiLmxlbmd0aCA6IDAsXG4gICAgICBuYSA9IGEgPyBNYXRoLm1pbihuYiwgYS5sZW5ndGgpIDogMCxcbiAgICAgIHggPSBuZXcgQXJyYXkobmEpLFxuICAgICAgYyA9IG5ldyBBcnJheShuYiksXG4gICAgICBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSB4W2ldID0gdmFsdWUoYVtpXSwgYltpXSk7XG4gIGZvciAoOyBpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgY1tpXSA9IHhbaV0odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBkID0gbmV3IERhdGU7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBkLnNldFRpbWUoYSArIGIgKiB0KSwgZDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKyBiICogdDtcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBpID0ge30sXG4gICAgICBjID0ge30sXG4gICAgICBrO1xuXG4gIGlmIChhID09PSBudWxsIHx8IHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSBhID0ge307XG4gIGlmIChiID09PSBudWxsIHx8IHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSBiID0ge307XG5cbiAgZm9yIChrIGluIGIpIHtcbiAgICBpZiAoayBpbiBhKSB7XG4gICAgICBpW2tdID0gdmFsdWUoYVtrXSwgYltrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNba10gPSBiW2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxudmFyIHJlQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZyxcbiAgICByZUIgPSBuZXcgUmVnRXhwKHJlQS5zb3VyY2UsIFwiZ1wiKTtcblxuZnVuY3Rpb24gemVybyhiKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25lKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGJpID0gcmVBLmxhc3RJbmRleCA9IHJlQi5sYXN0SW5kZXggPSAwLCAvLyBzY2FuIGluZGV4IGZvciBuZXh0IG51bWJlciBpbiBiXG4gICAgICBhbSwgLy8gY3VycmVudCBtYXRjaCBpbiBhXG4gICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICBicywgLy8gc3RyaW5nIHByZWNlZGluZyBjdXJyZW50IG51bWJlciBpbiBiLCBpZiBhbnlcbiAgICAgIGkgPSAtMSwgLy8gaW5kZXggaW4gc1xuICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcblxuICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gIC8vIEludGVycG9sYXRlIHBhaXJzIG9mIG51bWJlcnMgaW4gYSAmIGIuXG4gIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcbiAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgIGlmICgoYnMgPSBibS5pbmRleCkgPiBiaSkgeyAvLyBhIHN0cmluZyBwcmVjZWRlcyB0aGUgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gICAgfVxuICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgIHNbKytpXSA9IG51bGw7XG4gICAgICBxLnB1c2goe2k6IGksIHg6IG51bWJlcihhbSwgYm0pfSk7XG4gICAgfVxuICAgIGJpID0gcmVCLmxhc3RJbmRleDtcbiAgfVxuXG4gIC8vIEFkZCByZW1haW5zIG9mIGIuXG4gIGlmIChiaSA8IGIubGVuZ3RoKSB7XG4gICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICBlbHNlIHNbKytpXSA9IGJzO1xuICB9XG5cbiAgLy8gU3BlY2lhbCBvcHRpbWl6YXRpb24gZm9yIG9ubHkgYSBzaW5nbGUgbWF0Y2guXG4gIC8vIE90aGVyd2lzZSwgaW50ZXJwb2xhdGUgZWFjaCBvZiB0aGUgbnVtYmVycyBhbmQgcmVqb2luIHRoZSBzdHJpbmcuXG4gIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxuICAgICAgPyBvbmUocVswXS54KVxuICAgICAgOiB6ZXJvKGIpKVxuICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG87IGkgPCBiOyArK2kpIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgICAgICB9KTtcbn1cbiIsImltcG9ydCBkZWNvbXBvc2UsIHtpZGVudGl0eX0gZnJvbSBcIi4vZGVjb21wb3NlXCI7XG5cbnZhciBjc3NOb2RlLFxuICAgIGNzc1Jvb3QsXG4gICAgY3NzVmlldyxcbiAgICBzdmdOb2RlO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDc3ModmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBcIm5vbmVcIikgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIWNzc05vZGUpIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpLCBjc3NSb290ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBjc3NWaWV3ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIGNzc05vZGUuc3R5bGUudHJhbnNmb3JtID0gdmFsdWU7XG4gIHZhbHVlID0gY3NzVmlldy5nZXRDb21wdXRlZFN0eWxlKGNzc1Jvb3QuYXBwZW5kQ2hpbGQoY3NzTm9kZSksIG51bGwpLmdldFByb3BlcnR5VmFsdWUoXCJ0cmFuc2Zvcm1cIik7XG4gIGNzc1Jvb3QucmVtb3ZlQ2hpbGQoY3NzTm9kZSk7XG4gIHZhbHVlID0gdmFsdWUuc2xpY2UoNywgLTEpLnNwbGl0KFwiLFwiKTtcbiAgcmV0dXJuIGRlY29tcG9zZSgrdmFsdWVbMF0sICt2YWx1ZVsxXSwgK3ZhbHVlWzJdLCArdmFsdWVbM10sICt2YWx1ZVs0XSwgK3ZhbHVlWzVdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU3ZnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghc3ZnTm9kZSkgc3ZnTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiZ1wiKTtcbiAgc3ZnTm9kZS5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdmFsdWUpO1xuICBpZiAoISh2YWx1ZSA9IHN2Z05vZGUudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKSkpIHJldHVybiBpZGVudGl0eTtcbiAgdmFsdWUgPSB2YWx1ZS5tYXRyaXg7XG4gIHJldHVybiBkZWNvbXBvc2UodmFsdWUuYSwgdmFsdWUuYiwgdmFsdWUuYywgdmFsdWUuZCwgdmFsdWUuZSwgdmFsdWUuZik7XG59XG4iLCJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCByZ2IgZnJvbSBcIi4vcmdiXCI7XG5pbXBvcnQgYXJyYXkgZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBkYXRlIGZyb20gXCIuL2RhdGVcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5pbXBvcnQgb2JqZWN0IGZyb20gXCIuL29iamVjdFwiO1xuaW1wb3J0IHN0cmluZyBmcm9tIFwiLi9zdHJpbmdcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciB0ID0gdHlwZW9mIGIsIGM7XG4gIHJldHVybiBiID09IG51bGwgfHwgdCA9PT0gXCJib29sZWFuXCIgPyBjb25zdGFudChiKVxuICAgICAgOiAodCA9PT0gXCJudW1iZXJcIiA/IG51bWJlclxuICAgICAgOiB0ID09PSBcInN0cmluZ1wiID8gKChjID0gY29sb3IoYikpID8gKGIgPSBjLCByZ2IpIDogc3RyaW5nKVxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyByZ2JcbiAgICAgIDogYiBpbnN0YW5jZW9mIERhdGUgPyBkYXRlXG4gICAgICA6IEFycmF5LmlzQXJyYXkoYikgPyBhcnJheVxuICAgICAgOiB0eXBlb2YgYi52YWx1ZU9mICE9PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGIudG9TdHJpbmcgIT09IFwiZnVuY3Rpb25cIiB8fCBpc05hTihiKSA/IG9iamVjdFxuICAgICAgOiBudW1iZXIpKGEsIGIpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChhICsgYiAqIHQpO1xuICB9O1xufVxuIiwidmFyIGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuXG5leHBvcnQgdmFyIGlkZW50aXR5ID0ge1xuICB0cmFuc2xhdGVYOiAwLFxuICB0cmFuc2xhdGVZOiAwLFxuICByb3RhdGU6IDAsXG4gIHNrZXdYOiAwLFxuICBzY2FsZVg6IDEsXG4gIHNjYWxlWTogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgc2NhbGVYLCBzY2FsZVksIHNrZXdYO1xuICBpZiAoc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpKSBhIC89IHNjYWxlWCwgYiAvPSBzY2FsZVg7XG4gIGlmIChza2V3WCA9IGEgKiBjICsgYiAqIGQpIGMgLT0gYSAqIHNrZXdYLCBkIC09IGIgKiBza2V3WDtcbiAgaWYgKHNjYWxlWSA9IE1hdGguc3FydChjICogYyArIGQgKiBkKSkgYyAvPSBzY2FsZVksIGQgLz0gc2NhbGVZLCBza2V3WCAvPSBzY2FsZVk7XG4gIGlmIChhICogZCA8IGIgKiBjKSBhID0gLWEsIGIgPSAtYiwgc2tld1ggPSAtc2tld1gsIHNjYWxlWCA9IC1zY2FsZVg7XG4gIHJldHVybiB7XG4gICAgdHJhbnNsYXRlWDogZSxcbiAgICB0cmFuc2xhdGVZOiBmLFxuICAgIHJvdGF0ZTogTWF0aC5hdGFuMihiLCBhKSAqIGRlZ3JlZXMsXG4gICAgc2tld1g6IE1hdGguYXRhbihza2V3WCkgKiBkZWdyZWVzLFxuICAgIHNjYWxlWDogc2NhbGVYLFxuICAgIHNjYWxlWTogc2NhbGVZXG4gIH07XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuLi9udW1iZXJcIjtcbmltcG9ydCB7cGFyc2VDc3MsIHBhcnNlU3ZnfSBmcm9tIFwiLi9wYXJzZVwiO1xuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZSwgcHhDb21tYSwgcHhQYXJlbiwgZGVnUGFyZW4pIHtcblxuICBmdW5jdGlvbiBwb3Aocykge1xuICAgIHJldHVybiBzLmxlbmd0aCA/IHMucG9wKCkgKyBcIiBcIiA6IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2goXCJ0cmFuc2xhdGUoXCIsIG51bGwsIHB4Q29tbWEsIG51bGwsIHB4UGFyZW4pO1xuICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogbnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IG51bWJlcih5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiB8fCB5Yikge1xuICAgICAgcy5wdXNoKFwidHJhbnNsYXRlKFwiICsgeGIgKyBweENvbW1hICsgeWIgKyBweFBhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByb3RhdGUoYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBpZiAoYSAtIGIgPiAxODApIGIgKz0gMzYwOyBlbHNlIGlmIChiIC0gYSA+IDE4MCkgYSArPSAzNjA7IC8vIHNob3J0ZXN0IHBhdGhcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBudW1iZXIoYSwgYil9KTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2tld1goYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBudW1iZXIoYSwgYil9KTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiLCBudWxsLCBcIixcIiwgbnVsbCwgXCIpXCIpO1xuICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogbnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IG51bWJlcih5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiAhPT0gMSB8fCB5YiAhPT0gMSkge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIgKyB4YiArIFwiLFwiICsgeWIgKyBcIilcIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuICAgIGEgPSBwYXJzZShhKSwgYiA9IHBhcnNlKGIpO1xuICAgIHRyYW5zbGF0ZShhLnRyYW5zbGF0ZVgsIGEudHJhbnNsYXRlWSwgYi50cmFuc2xhdGVYLCBiLnRyYW5zbGF0ZVksIHMsIHEpO1xuICAgIHJvdGF0ZShhLnJvdGF0ZSwgYi5yb3RhdGUsIHMsIHEpO1xuICAgIHNrZXdYKGEuc2tld1gsIGIuc2tld1gsIHMsIHEpO1xuICAgIHNjYWxlKGEuc2NhbGVYLCBhLnNjYWxlWSwgYi5zY2FsZVgsIGIuc2NhbGVZLCBzLCBxKTtcbiAgICBhID0gYiA9IG51bGw7IC8vIGdjXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBpID0gLTEsIG4gPSBxLmxlbmd0aCwgbztcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZUNzcywgXCJweCwgXCIsIFwicHgpXCIsIFwiZGVnKVwiKTtcbmV4cG9ydCB2YXIgaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZVN2ZywgXCIsIFwiLCBcIilcIiwgXCIpXCIpO1xuIiwidmFyIHJobyA9IE1hdGguU1FSVDIsXG4gICAgcmhvMiA9IDIsXG4gICAgcmhvNCA9IDQsXG4gICAgZXBzaWxvbjIgPSAxZS0xMjtcblxuZnVuY3Rpb24gY29zaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgKyAxIC8geCkgLyAyO1xufVxuXG5mdW5jdGlvbiBzaW5oKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSAtIDEgLyB4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHRhbmgoeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoMiAqIHgpKSAtIDEpIC8gKHggKyAxKTtcbn1cblxuLy8gcDAgPSBbdXgwLCB1eTAsIHcwXVxuLy8gcDEgPSBbdXgxLCB1eTEsIHcxXVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocDAsIHAxKSB7XG4gIHZhciB1eDAgPSBwMFswXSwgdXkwID0gcDBbMV0sIHcwID0gcDBbMl0sXG4gICAgICB1eDEgPSBwMVswXSwgdXkxID0gcDFbMV0sIHcxID0gcDFbMl0sXG4gICAgICBkeCA9IHV4MSAtIHV4MCxcbiAgICAgIGR5ID0gdXkxIC0gdXkwLFxuICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeSxcbiAgICAgIGksXG4gICAgICBTO1xuXG4gIC8vIFNwZWNpYWwgY2FzZSBmb3IgdTAg4omFIHUxLlxuICBpZiAoZDIgPCBlcHNpbG9uMikge1xuICAgIFMgPSBNYXRoLmxvZyh3MSAvIHcwKSAvIHJobztcbiAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdXgwICsgdCAqIGR4LFxuICAgICAgICB1eTAgKyB0ICogZHksXG4gICAgICAgIHcwICogTWF0aC5leHAocmhvICogdCAqIFMpXG4gICAgICBdO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdlbmVyYWwgY2FzZS5cbiAgZWxzZSB7XG4gICAgdmFyIGQxID0gTWF0aC5zcXJ0KGQyKSxcbiAgICAgICAgYjAgPSAodzEgKiB3MSAtIHcwICogdzAgKyByaG80ICogZDIpIC8gKDIgKiB3MCAqIHJobzIgKiBkMSksXG4gICAgICAgIGIxID0gKHcxICogdzEgLSB3MCAqIHcwIC0gcmhvNCAqIGQyKSAvICgyICogdzEgKiByaG8yICogZDEpLFxuICAgICAgICByMCA9IE1hdGgubG9nKE1hdGguc3FydChiMCAqIGIwICsgMSkgLSBiMCksXG4gICAgICAgIHIxID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIxICogYjEgKyAxKSAtIGIxKTtcbiAgICBTID0gKHIxIC0gcjApIC8gcmhvO1xuICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgcyA9IHQgKiBTLFxuICAgICAgICAgIGNvc2hyMCA9IGNvc2gocjApLFxuICAgICAgICAgIHUgPSB3MCAvIChyaG8yICogZDEpICogKGNvc2hyMCAqIHRhbmgocmhvICogcyArIHIwKSAtIHNpbmgocjApKTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHV4MCArIHUgKiBkeCxcbiAgICAgICAgdXkwICsgdSAqIGR5LFxuICAgICAgICB3MCAqIGNvc2hyMCAvIGNvc2gocmhvICogcyArIHIwKVxuICAgICAgXTtcbiAgICB9XG4gIH1cblxuICBpLmR1cmF0aW9uID0gUyAqIDEwMDA7XG5cbiAgcmV0dXJuIGk7XG59XG4iLCJpbXBvcnQge2hzbCBhcyBjb2xvckhzbH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgY29sb3IsIHtodWV9IGZyb20gXCIuL2NvbG9yXCI7XG5cbmZ1bmN0aW9uIGhzbChodWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckhzbChzdGFydCkpLmgsIChlbmQgPSBjb2xvckhzbChlbmQpKS5oKSxcbiAgICAgICAgcyA9IGNvbG9yKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgbCA9IGNvbG9yKHN0YXJ0LmwsIGVuZC5sKSxcbiAgICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICBzdGFydC5zID0gcyh0KTtcbiAgICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgaHNsKGh1ZSk7XG5leHBvcnQgdmFyIGhzbExvbmcgPSBoc2woY29sb3IpO1xuIiwiZXhwb3J0IHZhciBkZWcycmFkID0gTWF0aC5QSSAvIDE4MDtcbmV4cG9ydCB2YXIgcmFkMmRlZyA9IDE4MCAvIE1hdGguUEk7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmUuanNcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYn0gZnJvbSBcIi4vY29sb3IuanNcIjtcbmltcG9ydCB7ZGVnMnJhZCwgcmFkMmRlZ30gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG4vLyBodHRwczovL29ic2VydmFibGVocS5jb20vQG1ib3N0b2NrL2xhYi1hbmQtcmdiXG52YXIgSyA9IDE4LFxuICAgIFhuID0gMC45NjQyMixcbiAgICBZbiA9IDEsXG4gICAgWm4gPSAwLjgyNTIxLFxuICAgIHQwID0gNCAvIDI5LFxuICAgIHQxID0gNiAvIDI5LFxuICAgIHQyID0gMyAqIHQxICogdDEsXG4gICAgdDMgPSB0MSAqIHQxICogdDE7XG5cbmZ1bmN0aW9uIGxhYkNvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIExhYikgcmV0dXJuIG5ldyBMYWIoby5sLCBvLmEsIG8uYiwgby5vcGFjaXR5KTtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHJldHVybiBoY2wybGFiKG8pO1xuICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gIHZhciByID0gcmdiMmxyZ2Ioby5yKSxcbiAgICAgIGcgPSByZ2IybHJnYihvLmcpLFxuICAgICAgYiA9IHJnYjJscmdiKG8uYiksXG4gICAgICB5ID0geHl6MmxhYigoMC4yMjI1MDQ1ICogciArIDAuNzE2ODc4NiAqIGcgKyAwLjA2MDYxNjkgKiBiKSAvIFluKSwgeCwgejtcbiAgaWYgKHIgPT09IGcgJiYgZyA9PT0gYikgeCA9IHogPSB5OyBlbHNlIHtcbiAgICB4ID0geHl6MmxhYigoMC40MzYwNzQ3ICogciArIDAuMzg1MDY0OSAqIGcgKyAwLjE0MzA4MDQgKiBiKSAvIFhuKTtcbiAgICB6ID0geHl6MmxhYigoMC4wMTM5MzIyICogciArIDAuMDk3MTA0NSAqIGcgKyAwLjcxNDE3MzMgKiBiKSAvIFpuKTtcbiAgfVxuICByZXR1cm4gbmV3IExhYigxMTYgKiB5IC0gMTYsIDUwMCAqICh4IC0geSksIDIwMCAqICh5IC0geiksIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBncmF5KGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIG5ldyBMYWIobCwgMCwgMCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGxhYkNvbnZlcnQobCkgOiBuZXcgTGFiKGwsIGEsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIExhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLmEgPSArYTtcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoTGFiLCBsYWIsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCArIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sIC0gSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB5ID0gKHRoaXMubCArIDE2KSAvIDExNixcbiAgICAgICAgeCA9IGlzTmFOKHRoaXMuYSkgPyB5IDogeSArIHRoaXMuYSAvIDUwMCxcbiAgICAgICAgeiA9IGlzTmFOKHRoaXMuYikgPyB5IDogeSAtIHRoaXMuYiAvIDIwMDtcbiAgICB4ID0gWG4gKiBsYWIyeHl6KHgpO1xuICAgIHkgPSBZbiAqIGxhYjJ4eXooeSk7XG4gICAgeiA9IFpuICogbGFiMnh5eih6KTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGxyZ2IycmdiKCAzLjEzMzg1NjEgKiB4IC0gMS42MTY4NjY3ICogeSAtIDAuNDkwNjE0NiAqIHopLFxuICAgICAgbHJnYjJyZ2IoLTAuOTc4NzY4NCAqIHggKyAxLjkxNjE0MTUgKiB5ICsgMC4wMzM0NTQwICogeiksXG4gICAgICBscmdiMnJnYiggMC4wNzE5NDUzICogeCAtIDAuMjI4OTkxNCAqIHkgKyAxLjQwNTI0MjcgKiB6KSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24geHl6MmxhYih0KSB7XG4gIHJldHVybiB0ID4gdDMgPyBNYXRoLnBvdyh0LCAxIC8gMykgOiB0IC8gdDIgKyB0MDtcbn1cblxuZnVuY3Rpb24gbGFiMnh5eih0KSB7XG4gIHJldHVybiB0ID4gdDEgPyB0ICogdCAqIHQgOiB0MiAqICh0IC0gdDApO1xufVxuXG5mdW5jdGlvbiBscmdiMnJnYih4KSB7XG4gIHJldHVybiAyNTUgKiAoeCA8PSAwLjAwMzEzMDggPyAxMi45MiAqIHggOiAxLjA1NSAqIE1hdGgucG93KHgsIDEgLyAyLjQpIC0gMC4wNTUpO1xufVxuXG5mdW5jdGlvbiByZ2IybHJnYih4KSB7XG4gIHJldHVybiAoeCAvPSAyNTUpIDw9IDAuMDQwNDUgPyB4IC8gMTIuOTIgOiBNYXRoLnBvdygoeCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xufVxuXG5mdW5jdGlvbiBoY2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHJldHVybiBuZXcgSGNsKG8uaCwgby5jLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBMYWIpKSBvID0gbGFiQ29udmVydChvKTtcbiAgaWYgKG8uYSA9PT0gMCAmJiBvLmIgPT09IDApIHJldHVybiBuZXcgSGNsKE5hTiwgMCA8IG8ubCAmJiBvLmwgPCAxMDAgPyAwIDogTmFOLCBvLmwsIG8ub3BhY2l0eSk7XG4gIHZhciBoID0gTWF0aC5hdGFuMihvLmIsIG8uYSkgKiByYWQyZGVnO1xuICByZXR1cm4gbmV3IEhjbChoIDwgMCA/IGggKyAzNjAgOiBoLCBNYXRoLnNxcnQoby5hICogby5hICsgby5iICogby5iKSwgby5sLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGNoKGwsIGMsIGgsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGwpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQoaCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLmMgPSArYztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5mdW5jdGlvbiBoY2wybGFiKG8pIHtcbiAgaWYgKGlzTmFOKG8uaCkpIHJldHVybiBuZXcgTGFiKG8ubCwgMCwgMCwgby5vcGFjaXR5KTtcbiAgdmFyIGggPSBvLmggKiBkZWcycmFkO1xuICByZXR1cm4gbmV3IExhYihvLmwsIE1hdGguY29zKGgpICogby5jLCBNYXRoLnNpbihoKSAqIG8uYywgby5vcGFjaXR5KTtcbn1cblxuZGVmaW5lKEhjbCwgaGNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaGNsMmxhYih0aGlzKS5yZ2IoKTtcbiAgfVxufSkpO1xuIiwiaW1wb3J0IHtoY2wgYXMgY29sb3JIY2x9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGNvbG9yLCB7aHVlfSBmcm9tIFwiLi9jb2xvclwiO1xuXG5mdW5jdGlvbiBoY2woaHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JIY2woc3RhcnQpKS5oLCAoZW5kID0gY29sb3JIY2woZW5kKSkuaCksXG4gICAgICAgIGMgPSBjb2xvcihzdGFydC5jLCBlbmQuYyksXG4gICAgICAgIGwgPSBjb2xvcihzdGFydC5sLCBlbmQubCksXG4gICAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgc3RhcnQuYyA9IGModCk7XG4gICAgICBzdGFydC5sID0gbCh0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhjbChodWUpO1xuZXhwb3J0IHZhciBoY2xMb25nID0gaGNsKGNvbG9yKTtcbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuaW1wb3J0IHtDb2xvciwgcmdiQ29udmVydCwgUmdiLCBkYXJrZXIsIGJyaWdodGVyfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuaW1wb3J0IHtkZWcycmFkLCByYWQyZGVnfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbnZhciBBID0gLTAuMTQ4NjEsXG4gICAgQiA9ICsxLjc4Mjc3LFxuICAgIEMgPSAtMC4yOTIyNyxcbiAgICBEID0gLTAuOTA2NDksXG4gICAgRSA9ICsxLjk3Mjk0LFxuICAgIEVEID0gRSAqIEQsXG4gICAgRUIgPSBFICogQixcbiAgICBCQ19EQSA9IEIgKiBDIC0gRCAqIEE7XG5cbmZ1bmN0aW9uIGN1YmVoZWxpeENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEN1YmVoZWxpeCkgcmV0dXJuIG5ldyBDdWJlaGVsaXgoby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIFJnYikpIG8gPSByZ2JDb252ZXJ0KG8pO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbCA9IChCQ19EQSAqIGIgKyBFRCAqIHIgLSBFQiAqIGcpIC8gKEJDX0RBICsgRUQgLSBFQiksXG4gICAgICBibCA9IGIgLSBsLFxuICAgICAgayA9IChFICogKGcgLSBsKSAtIEMgKiBibCkgLyBELFxuICAgICAgcyA9IE1hdGguc3FydChrICogayArIGJsICogYmwpIC8gKEUgKiBsICogKDEgLSBsKSksIC8vIE5hTiBpZiBsPTAgb3IgbD0xXG4gICAgICBoID0gcyA/IE1hdGguYXRhbjIoaywgYmwpICogcmFkMmRlZyAtIDEyMCA6IE5hTjtcbiAgcmV0dXJuIG5ldyBDdWJlaGVsaXgoaCA8IDAgPyBoICsgMzYwIDogaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjdWJlaGVsaXhDb252ZXJ0KGgpIDogbmV3IEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEN1YmVoZWxpeCwgY3ViZWhlbGl4LCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gaXNOYU4odGhpcy5oKSA/IDAgOiAodGhpcy5oICsgMTIwKSAqIGRlZzJyYWQsXG4gICAgICAgIGwgPSArdGhpcy5sLFxuICAgICAgICBhID0gaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMgKiBsICogKDEgLSBsKSxcbiAgICAgICAgY29zaCA9IE1hdGguY29zKGgpLFxuICAgICAgICBzaW5oID0gTWF0aC5zaW4oaCk7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICAyNTUgKiAobCArIGEgKiAoQSAqIGNvc2ggKyBCICogc2luaCkpLFxuICAgICAgMjU1ICogKGwgKyBhICogKEMgKiBjb3NoICsgRCAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChFICogY29zaCkpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuIiwiaW1wb3J0IHtjdWJlaGVsaXggYXMgY29sb3JDdWJlaGVsaXh9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGNvbG9yLCB7aHVlfSBmcm9tIFwiLi9jb2xvclwiO1xuXG5mdW5jdGlvbiBjdWJlaGVsaXgoaHVlKSB7XG4gIHJldHVybiAoZnVuY3Rpb24gY3ViZWhlbGl4R2FtbWEoeSkge1xuICAgIHkgPSAreTtcblxuICAgIGZ1bmN0aW9uIGN1YmVoZWxpeChzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckN1YmVoZWxpeChzdGFydCkpLmgsIChlbmQgPSBjb2xvckN1YmVoZWxpeChlbmQpKS5oKSxcbiAgICAgICAgICBzID0gY29sb3Ioc3RhcnQucywgZW5kLnMpLFxuICAgICAgICAgIGwgPSBjb2xvcihzdGFydC5sLCBlbmQubCksXG4gICAgICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgICBzdGFydC5zID0gcyh0KTtcbiAgICAgICAgc3RhcnQubCA9IGwoTWF0aC5wb3codCwgeSkpO1xuICAgICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY3ViZWhlbGl4LmdhbW1hID0gY3ViZWhlbGl4R2FtbWE7XG5cbiAgICByZXR1cm4gY3ViZWhlbGl4O1xuICB9KSgxKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3ViZWhlbGl4KGh1ZSk7XG5leHBvcnQgdmFyIGN1YmVoZWxpeExvbmcgPSBjdWJlaGVsaXgoY29sb3IpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW50ZXJwb2xhdG9yLCBuKSB7XG4gIHZhciBzYW1wbGVzID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkgc2FtcGxlc1tpXSA9IGludGVycG9sYXRvcihpIC8gKG4gLSAxKSk7XG4gIHJldHVybiBzYW1wbGVzO1xufVxuIiwidmFyIGZyYW1lID0gMCwgLy8gaXMgYW4gYW5pbWF0aW9uIGZyYW1lIHBlbmRpbmc/XG4gICAgdGltZW91dCA9IDAsIC8vIGlzIGEgdGltZW91dCBwZW5kaW5nP1xuICAgIGludGVydmFsID0gMCwgLy8gYXJlIGFueSB0aW1lcnMgYWN0aXZlP1xuICAgIHBva2VEZWxheSA9IDEwMDAsIC8vIGhvdyBmcmVxdWVudGx5IHdlIGNoZWNrIGZvciBjbG9jayBza2V3XG4gICAgdGFza0hlYWQsXG4gICAgdGFza1RhaWwsXG4gICAgY2xvY2tMYXN0ID0gMCxcbiAgICBjbG9ja05vdyA9IDAsXG4gICAgY2xvY2tTa2V3ID0gMCxcbiAgICBjbG9jayA9IHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gXCJvYmplY3RcIiAmJiBwZXJmb3JtYW5jZS5ub3cgPyBwZXJmb3JtYW5jZSA6IERhdGUsXG4gICAgc2V0RnJhbWUgPSB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSA6IGZ1bmN0aW9uKGYpIHsgc2V0VGltZW91dChmLCAxNyk7IH07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBjbG9ja05vdyB8fCAoc2V0RnJhbWUoY2xlYXJOb3cpLCBjbG9ja05vdyA9IGNsb2NrLm5vdygpICsgY2xvY2tTa2V3KTtcbn1cblxuZnVuY3Rpb24gY2xlYXJOb3coKSB7XG4gIGNsb2NrTm93ID0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRpbWVyKCkge1xuICB0aGlzLl9jYWxsID1cbiAgdGhpcy5fdGltZSA9XG4gIHRoaXMuX25leHQgPSBudWxsO1xufVxuXG5UaW1lci5wcm90b3R5cGUgPSB0aW1lci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUaW1lcixcbiAgcmVzdGFydDogZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgdGltZSA9ICh0aW1lID09IG51bGwgPyBub3coKSA6ICt0aW1lKSArIChkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheSk7XG4gICAgaWYgKCF0aGlzLl9uZXh0ICYmIHRhc2tUYWlsICE9PSB0aGlzKSB7XG4gICAgICBpZiAodGFza1RhaWwpIHRhc2tUYWlsLl9uZXh0ID0gdGhpcztcbiAgICAgIGVsc2UgdGFza0hlYWQgPSB0aGlzO1xuICAgICAgdGFza1RhaWwgPSB0aGlzO1xuICAgIH1cbiAgICB0aGlzLl9jYWxsID0gY2FsbGJhY2s7XG4gICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgc2xlZXAoKTtcbiAgfSxcbiAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2NhbGwpIHtcbiAgICAgIHRoaXMuX2NhbGwgPSBudWxsO1xuICAgICAgdGhpcy5fdGltZSA9IEluZmluaXR5O1xuICAgICAgc2xlZXAoKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lcihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyRmx1c2goKSB7XG4gIG5vdygpOyAvLyBHZXQgdGhlIGN1cnJlbnQgdGltZSwgaWYgbm90IGFscmVhZHkgc2V0LlxuICArK2ZyYW1lOyAvLyBQcmV0ZW5kIHdl4oCZdmUgc2V0IGFuIGFsYXJtLCBpZiB3ZSBoYXZlbuKAmXQgYWxyZWFkeS5cbiAgdmFyIHQgPSB0YXNrSGVhZCwgZTtcbiAgd2hpbGUgKHQpIHtcbiAgICBpZiAoKGUgPSBjbG9ja05vdyAtIHQuX3RpbWUpID49IDApIHQuX2NhbGwuY2FsbChudWxsLCBlKTtcbiAgICB0ID0gdC5fbmV4dDtcbiAgfVxuICAtLWZyYW1lO1xufVxuXG5mdW5jdGlvbiB3YWtlKCkge1xuICBjbG9ja05vdyA9IChjbG9ja0xhc3QgPSBjbG9jay5ub3coKSkgKyBjbG9ja1NrZXc7XG4gIGZyYW1lID0gdGltZW91dCA9IDA7XG4gIHRyeSB7XG4gICAgdGltZXJGbHVzaCgpO1xuICB9IGZpbmFsbHkge1xuICAgIGZyYW1lID0gMDtcbiAgICBuYXAoKTtcbiAgICBjbG9ja05vdyA9IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9rZSgpIHtcbiAgdmFyIG5vdyA9IGNsb2NrLm5vdygpLCBkZWxheSA9IG5vdyAtIGNsb2NrTGFzdDtcbiAgaWYgKGRlbGF5ID4gcG9rZURlbGF5KSBjbG9ja1NrZXcgLT0gZGVsYXksIGNsb2NrTGFzdCA9IG5vdztcbn1cblxuZnVuY3Rpb24gbmFwKCkge1xuICB2YXIgdDAsIHQxID0gdGFza0hlYWQsIHQyLCB0aW1lID0gSW5maW5pdHk7XG4gIHdoaWxlICh0MSkge1xuICAgIGlmICh0MS5fY2FsbCkge1xuICAgICAgaWYgKHRpbWUgPiB0MS5fdGltZSkgdGltZSA9IHQxLl90aW1lO1xuICAgICAgdDAgPSB0MSwgdDEgPSB0MS5fbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdDIgPSB0MS5fbmV4dCwgdDEuX25leHQgPSBudWxsO1xuICAgICAgdDEgPSB0MCA/IHQwLl9uZXh0ID0gdDIgOiB0YXNrSGVhZCA9IHQyO1xuICAgIH1cbiAgfVxuICB0YXNrVGFpbCA9IHQwO1xuICBzbGVlcCh0aW1lKTtcbn1cblxuZnVuY3Rpb24gc2xlZXAodGltZSkge1xuICBpZiAoZnJhbWUpIHJldHVybjsgLy8gU29vbmVzdCBhbGFybSBhbHJlYWR5IHNldCwgb3Igd2lsbCBiZS5cbiAgaWYgKHRpbWVvdXQpIHRpbWVvdXQgPSBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIHZhciBkZWxheSA9IHRpbWUgLSBjbG9ja05vdzsgLy8gU3RyaWN0bHkgbGVzcyB0aGFuIGlmIHdlIHJlY29tcHV0ZWQgY2xvY2tOb3cuXG4gIGlmIChkZWxheSA+IDI0KSB7XG4gICAgaWYgKHRpbWUgPCBJbmZpbml0eSkgdGltZW91dCA9IHNldFRpbWVvdXQod2FrZSwgdGltZSAtIGNsb2NrLm5vdygpIC0gY2xvY2tTa2V3KTtcbiAgICBpZiAoaW50ZXJ2YWwpIGludGVydmFsID0gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpbnRlcnZhbCkgY2xvY2tMYXN0ID0gY2xvY2subm93KCksIGludGVydmFsID0gc2V0SW50ZXJ2YWwocG9rZSwgcG9rZURlbGF5KTtcbiAgICBmcmFtZSA9IDEsIHNldEZyYW1lKHdha2UpO1xuICB9XG59XG4iLCJpbXBvcnQge1RpbWVyfSBmcm9tIFwiLi90aW1lclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIGRlbGF5ID0gZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXk7XG4gIHQucmVzdGFydChmdW5jdGlvbihlbGFwc2VkKSB7XG4gICAgdC5zdG9wKCk7XG4gICAgY2FsbGJhY2soZWxhcHNlZCArIGRlbGF5KTtcbiAgfSwgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHt0aW1lciwgdGltZW91dH0gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBlbXB0eU9uID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImVuZFwiLCBcImNhbmNlbFwiLCBcImludGVycnVwdFwiKTtcbnZhciBlbXB0eVR3ZWVuID0gW107XG5cbmV4cG9ydCB2YXIgQ1JFQVRFRCA9IDA7XG5leHBvcnQgdmFyIFNDSEVEVUxFRCA9IDE7XG5leHBvcnQgdmFyIFNUQVJUSU5HID0gMjtcbmV4cG9ydCB2YXIgU1RBUlRFRCA9IDM7XG5leHBvcnQgdmFyIFJVTk5JTkcgPSA0O1xuZXhwb3J0IHZhciBFTkRJTkcgPSA1O1xuZXhwb3J0IHZhciBFTkRFRCA9IDY7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIGlkLCBpbmRleCwgZ3JvdXAsIHRpbWluZykge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGVzKSBub2RlLl9fdHJhbnNpdGlvbiA9IHt9O1xuICBlbHNlIGlmIChpZCBpbiBzY2hlZHVsZXMpIHJldHVybjtcbiAgY3JlYXRlKG5vZGUsIGlkLCB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBpbmRleDogaW5kZXgsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBncm91cDogZ3JvdXAsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBvbjogZW1wdHlPbixcbiAgICB0d2VlbjogZW1wdHlUd2VlbixcbiAgICB0aW1lOiB0aW1pbmcudGltZSxcbiAgICBkZWxheTogdGltaW5nLmRlbGF5LFxuICAgIGR1cmF0aW9uOiB0aW1pbmcuZHVyYXRpb24sXG4gICAgZWFzZTogdGltaW5nLmVhc2UsXG4gICAgdGltZXI6IG51bGwsXG4gICAgc3RhdGU6IENSRUFURURcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IENSRUFURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHNjaGVkdWxlZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IFNUQVJURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZSB8fCAhKHNjaGVkdWxlID0gc2NoZWR1bGVbaWRdKSkgdGhyb3cgbmV3IEVycm9yKFwidHJhbnNpdGlvbiBub3QgZm91bmRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKG5vZGUsIGlkLCBzZWxmKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHR3ZWVuO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHNlbGYgdGltZXIgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBjcmVhdGVkLlxuICAvLyBOb3RlIHRoZSBhY3R1YWwgZGVsYXkgaXMgbm90IGtub3duIHVudGlsIHRoZSBmaXJzdCBjYWxsYmFjayFcbiAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gIHNlbGYudGltZXIgPSB0aW1lcihzY2hlZHVsZSwgMCwgc2VsZi50aW1lKTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG4gICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcbiAgICBzZWxmLnRpbWVyLnJlc3RhcnQoc3RhcnQsIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG5cbiAgICAvLyBJZiB0aGUgZWxhcHNlZCBkZWxheSBpcyBsZXNzIHRoYW4gb3VyIGZpcnN0IHNsZWVwLCBzdGFydCBpbW1lZGlhdGVseS5cbiAgICBpZiAoc2VsZi5kZWxheSA8PSBlbGFwc2VkKSBzdGFydChlbGFwc2VkIC0gc2VsZi5kZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XG4gICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAvLyBJZiB0aGUgc3RhdGUgaXMgbm90IFNDSEVEVUxFRCwgdGhlbiB3ZSBwcmV2aW91c2x5IGVycm9yZWQgb24gc3RhcnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNDSEVEVUxFRCkgcmV0dXJuIHN0b3AoKTtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIG8gPSBzY2hlZHVsZXNbaV07XG4gICAgICBpZiAoby5uYW1lICE9PSBzZWxmLm5hbWUpIGNvbnRpbnVlO1xuXG4gICAgICAvLyBXaGlsZSB0aGlzIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBzdGFydGluZyB0cmFuc2l0aW9uIGR1cmluZyB0aGlzIGZyYW1lLFxuICAgICAgLy8gZGVmZXIgc3RhcnRpbmcgYW4gaW50ZXJydXB0aW5nIHRyYW5zaXRpb24gdW50aWwgdGhhdCB0cmFuc2l0aW9uIGhhcyBhXG4gICAgICAvLyBjaGFuY2UgdG8gdGljayAoYW5kIHBvc3NpYmx5IGVuZCk7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzU0IVxuICAgICAgaWYgKG8uc3RhdGUgPT09IFNUQVJURUQpIHJldHVybiB0aW1lb3V0KHN0YXJ0KTtcblxuICAgICAgLy8gSW50ZXJydXB0IHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgaWYgYW55LlxuICAgICAgaWYgKG8uc3RhdGUgPT09IFJVTk5JTkcpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiaW50ZXJydXB0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuXG4gICAgICAvLyBDYW5jZWwgYW55IHByZS1lbXB0ZWQgdHJhbnNpdGlvbnMuXG4gICAgICBlbHNlIGlmICgraSA8IGlkKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBkMy9kMyMxNTc2LlxuICAgIC8vIE5vdGUgdGhlIHRyYW5zaXRpb24gbWF5IGJlIGNhbmNlbGVkIGFmdGVyIHN0YXJ0IGFuZCBiZWZvcmUgdGhlIGZpcnN0IHRpY2shXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgc2NoZWR1bGVkIGJlZm9yZSB0aGUgc3RhcnQgZXZlbnQ7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzE2IVxuICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cbiAgICB0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFNUQVJURUQpIHtcbiAgICAgICAgc2VsZi5zdGF0ZSA9IFJVTk5JTkc7XG4gICAgICAgIHNlbGYudGltZXIucmVzdGFydCh0aWNrLCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuICAgICAgICB0aWNrKGVsYXBzZWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIHN0YXJ0IGV2ZW50LlxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSB0d2VlbiBhcmUgaW5pdGlhbGl6ZWQuXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJUSU5HO1xuICAgIHNlbGYub24uY2FsbChcInN0YXJ0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTVEFSVElORykgcmV0dXJuOyAvLyBpbnRlcnJ1cHRlZFxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVEVEO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgdHdlZW4sIGRlbGV0aW5nIG51bGwgdHdlZW4uXG4gICAgdHdlZW4gPSBuZXcgQXJyYXkobiA9IHNlbGYudHdlZW4ubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBqID0gLTE7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChvID0gc2VsZi50d2VlbltpXS52YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApKSB7XG4gICAgICAgIHR3ZWVuWysral0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICB0d2Vlbi5sZW5ndGggPSBqICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgIHZhciB0ID0gZWxhcHNlZCA8IHNlbGYuZHVyYXRpb24gPyBzZWxmLmVhc2UuY2FsbChudWxsLCBlbGFwc2VkIC8gc2VsZi5kdXJhdGlvbikgOiAoc2VsZi50aW1lci5yZXN0YXJ0KHN0b3ApLCBzZWxmLnN0YXRlID0gRU5ESU5HLCAxKSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gdHdlZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHR3ZWVuW2ldLmNhbGwobm9kZSwgdCk7XG4gICAgfVxuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIGVuZCBldmVudC5cbiAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gRU5ESU5HKSB7XG4gICAgICBzZWxmLm9uLmNhbGwoXCJlbmRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBzZWxmLnN0YXRlID0gRU5ERUQ7XG4gICAgc2VsZi50aW1lci5zdG9wKCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpZF07XG4gICAgZm9yICh2YXIgaSBpbiBzY2hlZHVsZXMpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IHtTVEFSVElORywgRU5ESU5HLCBFTkRFRH0gZnJvbSBcIi4vdHJhbnNpdGlvbi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgYWN0aXZlLFxuICAgICAgZW1wdHkgPSB0cnVlLFxuICAgICAgaTtcblxuICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG5cbiAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICBhY3RpdmUgPSBzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HICYmIHNjaGVkdWxlLnN0YXRlIDwgRU5ESU5HO1xuICAgIHNjaGVkdWxlLnN0YXRlID0gRU5ERUQ7XG4gICAgc2NoZWR1bGUudGltZXIuc3RvcCgpO1xuICAgIHNjaGVkdWxlLm9uLmNhbGwoYWN0aXZlID8gXCJpbnRlcnJ1cHRcIiA6IFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNjaGVkdWxlLmluZGV4LCBzY2hlZHVsZS5ncm91cCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgfVxuXG4gIGlmIChlbXB0eSkgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gdHdlZW5SZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9IHR3ZWVuMCA9IHR3ZWVuO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMSA9IHR3ZWVuMS5zbGljZSgpO1xuICAgICAgICAgIHR3ZWVuMS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHdlZW5GdW5jdGlvbihpZCwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSAodHdlZW4wID0gdHdlZW4pLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciB0ID0ge25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0sIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjFbaV0gPSB0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaSA9PT0gbikgdHdlZW4xLnB1c2godCk7XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIG5hbWUgKz0gXCJcIjtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgdHdlZW4gPSBnZXQodGhpcy5ub2RlKCksIGlkKS50d2VlbjtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuLmxlbmd0aCwgdDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCh0ID0gdHdlZW5baV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHQudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbCA/IHR3ZWVuUmVtb3ZlIDogdHdlZW5GdW5jdGlvbikoaWQsIG5hbWUsIHZhbHVlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0d2VlblZhbHVlKHRyYW5zaXRpb24sIG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRyYW5zaXRpb24uX2lkO1xuXG4gIHRyYW5zaXRpb24uZWFjaChmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpO1xuICAgIChzY2hlZHVsZS52YWx1ZSB8fCAoc2NoZWR1bGUudmFsdWUgPSB7fSkpW25hbWVdID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gZ2V0KG5vZGUsIGlkKS52YWx1ZVtuYW1lXTtcbiAgfTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZU51bWJlciwgaW50ZXJwb2xhdGVSZ2IsIGludGVycG9sYXRlU3RyaW5nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYztcbiAgcmV0dXJuICh0eXBlb2YgYiA9PT0gXCJudW1iZXJcIiA/IGludGVycG9sYXRlTnVtYmVyXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IGludGVycG9sYXRlUmdiXG4gICAgICA6IChjID0gY29sb3IoYikpID8gKGIgPSBjLCBpbnRlcnBvbGF0ZVJnYilcbiAgICAgIDogaW50ZXJwb2xhdGVTdHJpbmcpKGEsIGIpO1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyBhcyBpbnRlcnBvbGF0ZVRyYW5zZm9ybX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2VlblwiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCwgdmFsdWUxID0gdmFsdWUodGhpcyksIHN0cmluZzE7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCI7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiAoc3RyaW5nMTAgPSBzdHJpbmcxLCBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpLCBzdHJpbmcxO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCI7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiAoc3RyaW5nMTAgPSBzdHJpbmcxLCBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSksIGkgPSBmdWxsbmFtZSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtIDogaW50ZXJwb2xhdGU7XG4gIHJldHVybiB0aGlzLmF0dHJUd2VlbihuYW1lLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbikoZnVsbG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJhdHRyLlwiICsgbmFtZSwgdmFsdWUpKVxuICAgICAgOiB2YWx1ZSA9PSBudWxsID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkoZnVsbG5hbWUpXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KShmdWxsbmFtZSwgaSwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZShuYW1lLCBpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgaSh0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIGkodCkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW5OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHQwLCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdDAgPSAoaTAgPSBpKSAmJiBhdHRySW50ZXJwb2xhdGVOUyhmdWxsbmFtZSwgaSk7XG4gICAgcmV0dXJuIHQwO1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2VlbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZShuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGtleSA9IFwiYXR0ci5cIiArIG5hbWU7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIChmdWxsbmFtZS5sb2NhbCA/IGF0dHJUd2Vlbk5TIDogYXR0clR3ZWVuKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBkZWxheUZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVsYXlDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkZWxheUZ1bmN0aW9uXG4gICAgICAgICAgOiBkZWxheUNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kZWxheTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGR1cmF0aW9uRnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGR1cmF0aW9uQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkdXJhdGlvbkZ1bmN0aW9uXG4gICAgICAgICAgOiBkdXJhdGlvbkNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kdXJhdGlvbjtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGVhc2VDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKGVhc2VDb25zdGFudChpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5lYXNlO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldCwgaW5pdH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gc3RhcnQobmFtZSkge1xuICByZXR1cm4gKG5hbWUgKyBcIlwiKS50cmltKCkuc3BsaXQoL158XFxzKy8pLmV2ZXJ5KGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuICF0IHx8IHQgPT09IFwic3RhcnRcIjtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBvbjAsIG9uMSwgc2l0ID0gc3RhcnQobmFtZSkgPyBpbml0IDogc2V0O1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2l0KHRoaXMsIGlkKSxcbiAgICAgICAgb24gPSBzY2hlZHVsZS5vbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAob24gIT09IG9uMCkgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihuYW1lLCBsaXN0ZW5lcik7XG5cbiAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyXG4gICAgICA/IGdldCh0aGlzLm5vZGUoKSwgaWQpLm9uLm9uKG5hbWUpXG4gICAgICA6IHRoaXMuZWFjaChvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikpO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlRnVuY3Rpb24oaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLl9fdHJhbnNpdGlvbikgaWYgKCtpICE9PSBpZCkgcmV0dXJuO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm9uKFwiZW5kLnJlbW92ZVwiLCByZW1vdmVGdW5jdGlvbih0aGlzLl9pZCkpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxudmFyIFNlbGVjdGlvbiA9IHNlbGVjdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3I7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9ncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyBhcyBpbnRlcnBvbGF0ZVRyYW5zZm9ybX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge3N0eWxlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZVwiO1xuXG5mdW5jdGlvbiBzdHlsZU51bGwobmFtZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpLFxuICAgICAgICBzdHJpbmcxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgc3RyaW5nMTAgPSBzdHJpbmcxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZSh0aGlzLCBuYW1lKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpLFxuICAgICAgICB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSxcbiAgICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCI7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSBzdHJpbmcxID0gdmFsdWUxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlTWF5YmVSZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIG9uMCwgb24xLCBsaXN0ZW5lcjAsIGtleSA9IFwic3R5bGUuXCIgKyBuYW1lLCBldmVudCA9IFwiZW5kLlwiICsga2V5LCByZW1vdmU7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uLFxuICAgICAgICBsaXN0ZW5lciA9IHNjaGVkdWxlLnZhbHVlW2tleV0gPT0gbnVsbCA/IHJlbW92ZSB8fCAocmVtb3ZlID0gc3R5bGVSZW1vdmUobmFtZSkpIDogdW5kZWZpbmVkO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wIHx8IGxpc3RlbmVyMCAhPT0gbGlzdGVuZXIpIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24oZXZlbnQsIGxpc3RlbmVyMCA9IGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGkgPSAobmFtZSArPSBcIlwiKSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtIDogaW50ZXJwb2xhdGU7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVOdWxsKG5hbWUsIGkpKVxuICAgICAgLm9uKFwiZW5kLnN0eWxlLlwiICsgbmFtZSwgc3R5bGVSZW1vdmUobmFtZSkpXG4gICAgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHRoaXNcbiAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlRnVuY3Rpb24obmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcInN0eWxlLlwiICsgbmFtZSwgdmFsdWUpKSlcbiAgICAgIC5lYWNoKHN0eWxlTWF5YmVSZW1vdmUodGhpcy5faWQsIG5hbWUpKVxuICAgIDogdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVDb25zdGFudChuYW1lLCBpLCB2YWx1ZSksIHByaW9yaXR5KVxuICAgICAgLm9uKFwiZW5kLnN0eWxlLlwiICsgbmFtZSwgbnVsbCk7XG59XG4iLCJmdW5jdGlvbiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBpKHQpLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciB0LCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdCA9IChpMCA9IGkpICYmIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpO1xuICAgIHJldHVybiB0O1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIga2V5ID0gXCJzdHlsZS5cIiArIChuYW1lICs9IFwiXCIpO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpO1xufVxuIiwiaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2VlblwiO1xuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlMSA9PSBudWxsID8gXCJcIiA6IHZhbHVlMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMudHdlZW4oXCJ0ZXh0XCIsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IHRleHRGdW5jdGlvbih0d2VlblZhbHVlKHRoaXMsIFwidGV4dFwiLCB2YWx1ZSkpXG4gICAgICA6IHRleHRDb25zdGFudCh2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIikpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHIgZnJvbSBcIi4vYXR0clwiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0clR3ZWVuIGZyb20gXCIuL2F0dHJUd2VlblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZGVsYXkgZnJvbSBcIi4vZGVsYXlcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2R1cmF0aW9uIGZyb20gXCIuL2R1cmF0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlIGZyb20gXCIuL2Vhc2VcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXJcIjtcbmltcG9ydCB0cmFuc2l0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9vbiBmcm9tIFwiLi9vblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdFwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbFwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0aW9uIGZyb20gXCIuL3NlbGVjdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGVcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3N0eWxlVHdlZW4gZnJvbSBcIi4vc3R5bGVUd2VlblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX3R3ZWVuIGZyb20gXCIuL3R3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lbmQgZnJvbSBcIi4vZW5kXCI7XG5cbnZhciBpZCA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBUcmFuc2l0aW9uKGdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbiAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gIHRoaXMuX2lkID0gaWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb24obmFtZSkge1xuICByZXR1cm4gc2VsZWN0aW9uKCkudHJhbnNpdGlvbihuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld0lkKCkge1xuICByZXR1cm4gKytpZDtcbn1cblxudmFyIHNlbGVjdGlvbl9wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlO1xuXG5UcmFuc2l0aW9uLnByb3RvdHlwZSA9IHRyYW5zaXRpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNpdGlvbixcbiAgc2VsZWN0OiB0cmFuc2l0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiB0cmFuc2l0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiB0cmFuc2l0aW9uX2ZpbHRlcixcbiAgbWVyZ2U6IHRyYW5zaXRpb25fbWVyZ2UsXG4gIHNlbGVjdGlvbjogdHJhbnNpdGlvbl9zZWxlY3Rpb24sXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb25fdHJhbnNpdGlvbixcbiAgY2FsbDogc2VsZWN0aW9uX3Byb3RvdHlwZS5jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fcHJvdG90eXBlLnNpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fcHJvdG90eXBlLmVtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fcHJvdG90eXBlLmVhY2gsXG4gIG9uOiB0cmFuc2l0aW9uX29uLFxuICBhdHRyOiB0cmFuc2l0aW9uX2F0dHIsXG4gIGF0dHJUd2VlbjogdHJhbnNpdGlvbl9hdHRyVHdlZW4sXG4gIHN0eWxlOiB0cmFuc2l0aW9uX3N0eWxlLFxuICBzdHlsZVR3ZWVuOiB0cmFuc2l0aW9uX3N0eWxlVHdlZW4sXG4gIHRleHQ6IHRyYW5zaXRpb25fdGV4dCxcbiAgcmVtb3ZlOiB0cmFuc2l0aW9uX3JlbW92ZSxcbiAgdHdlZW46IHRyYW5zaXRpb25fdHdlZW4sXG4gIGRlbGF5OiB0cmFuc2l0aW9uX2RlbGF5LFxuICBkdXJhdGlvbjogdHJhbnNpdGlvbl9kdXJhdGlvbixcbiAgZWFzZTogdHJhbnNpdGlvbl9lYXNlLFxuICBlbmQ6IHRyYW5zaXRpb25fZW5kXG59O1xuIiwiaW1wb3J0IHtzZWxlY3Rvcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgc2NoZWR1bGUoc3ViZ3JvdXBbaV0sIG5hbWUsIGlkLCBpLCBzdWJncm91cCwgZ2V0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3RvckFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApLCBjaGlsZCwgaW5oZXJpdCA9IGdldChub2RlLCBpZCksIGsgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBrIDwgbDsgKytrKSB7XG4gICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcbiAgICAgICAgICAgIHNjaGVkdWxlKGNoaWxkLCBuYW1lLCBpZCwgaywgY2hpbGRyZW4sIGluaGVyaXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdWJncm91cHMucHVzaChjaGlsZHJlbik7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge21hdGNoZXJ9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHJhbnNpdGlvbikge1xuICBpZiAodHJhbnNpdGlvbi5faWQgIT09IHRoaXMuX2lkKSB0aHJvdyBuZXcgRXJyb3I7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHRyYW5zaXRpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkMCA9IHRoaXMuX2lkLFxuICAgICAgaWQxID0gbmV3SWQoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICB2YXIgaW5oZXJpdCA9IGdldChub2RlLCBpZDApO1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZDEsIGksIGdyb3VwLCB7XG4gICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgZHVyYXRpb246IGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkMSk7XG59XG4iLCJpbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBvbjAsIG9uMSwgdGhhdCA9IHRoaXMsIGlkID0gdGhhdC5faWQsIHNpemUgPSB0aGF0LnNpemUoKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBjYW5jZWwgPSB7dmFsdWU6IHJlamVjdH0sXG4gICAgICAgIGVuZCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7IGlmICgtLXNpemUgPT09IDApIHJlc29sdmUoKTsgfX07XG5cbiAgICB0aGF0LmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgICBpZiAob24gIT09IG9uMCkge1xuICAgICAgICBvbjEgPSAob24wID0gb24pLmNvcHkoKTtcbiAgICAgICAgb24xLl8uY2FuY2VsLnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uaW50ZXJydXB0LnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uZW5kLnB1c2goZW5kKTtcbiAgICAgIH1cblxuICAgICAgc2NoZWR1bGUub24gPSBvbjE7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwidmFyIGV4cG9uZW50ID0gMztcblxuZXhwb3J0IHZhciBwb2x5SW4gPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgZSA9ICtlO1xuXG4gIGZ1bmN0aW9uIHBvbHlJbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHQsIGUpO1xuICB9XG5cbiAgcG9seUluLmV4cG9uZW50ID0gY3VzdG9tO1xuXG4gIHJldHVybiBwb2x5SW47XG59KShleHBvbmVudCk7XG5cbmV4cG9ydCB2YXIgcG9seU91dCA9IChmdW5jdGlvbiBjdXN0b20oZSkge1xuICBlID0gK2U7XG5cbiAgZnVuY3Rpb24gcG9seU91dCh0KSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygxIC0gdCwgZSk7XG4gIH1cblxuICBwb2x5T3V0LmV4cG9uZW50ID0gY3VzdG9tO1xuXG4gIHJldHVybiBwb2x5T3V0O1xufSkoZXhwb25lbnQpO1xuXG5leHBvcnQgdmFyIHBvbHlJbk91dCA9IChmdW5jdGlvbiBjdXN0b20oZSkge1xuICBlID0gK2U7XG5cbiAgZnVuY3Rpb24gcG9seUluT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyBNYXRoLnBvdyh0LCBlKSA6IDIgLSBNYXRoLnBvdygyIC0gdCwgZSkpIC8gMjtcbiAgfVxuXG4gIHBvbHlJbk91dC5leHBvbmVudCA9IGN1c3RvbTtcblxuICByZXR1cm4gcG9seUluT3V0O1xufSkoZXhwb25lbnQpO1xuIiwidmFyIHBpID0gTWF0aC5QSSxcbiAgICBoYWxmUGkgPSBwaSAvIDI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbih0KSB7XG4gIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5PdXQodCkge1xuICByZXR1cm4gTWF0aC5zaW4odCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbk91dCh0KSB7XG4gIHJldHVybiAoMSAtIE1hdGguY29zKHBpICogdCkpIC8gMjtcbn1cbiIsInZhciBvdmVyc2hvb3QgPSAxLjcwMTU4O1xuXG5leHBvcnQgdmFyIGJhY2tJbiA9IChmdW5jdGlvbiBjdXN0b20ocykge1xuICBzID0gK3M7XG5cbiAgZnVuY3Rpb24gYmFja0luKHQpIHtcbiAgICByZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcbiAgfVxuXG4gIGJhY2tJbi5vdmVyc2hvb3QgPSBjdXN0b207XG5cbiAgcmV0dXJuIGJhY2tJbjtcbn0pKG92ZXJzaG9vdCk7XG5cbmV4cG9ydCB2YXIgYmFja091dCA9IChmdW5jdGlvbiBjdXN0b20ocykge1xuICBzID0gK3M7XG5cbiAgZnVuY3Rpb24gYmFja091dCh0KSB7XG4gICAgcmV0dXJuIC0tdCAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG4gIH1cblxuICBiYWNrT3V0Lm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICByZXR1cm4gYmFja091dDtcbn0pKG92ZXJzaG9vdCk7XG5cbmV4cG9ydCB2YXIgYmFja0luT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gIHMgPSArcztcblxuICBmdW5jdGlvbiBiYWNrSW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgKj0gMikgPCAxID8gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKSA6ICh0IC09IDIpICogdCAqICgocyArIDEpICogdCArIHMpICsgMikgLyAyO1xuICB9XG5cbiAgYmFja0luT3V0Lm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICByZXR1cm4gYmFja0luT3V0O1xufSkob3ZlcnNob290KTtcbiIsInZhciB0YXUgPSAyICogTWF0aC5QSSxcbiAgICBhbXBsaXR1ZGUgPSAxLFxuICAgIHBlcmlvZCA9IDAuMztcblxuZXhwb3J0IHZhciBlbGFzdGljSW4gPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luKHQpIHtcbiAgICByZXR1cm4gYSAqIE1hdGgucG93KDIsIDEwICogLS10KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNJbi5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbi5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbjtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNPdXQodCkge1xuICAgIHJldHVybiAxIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqICh0ID0gK3QpKSAqIE1hdGguc2luKCh0ICsgcykgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNPdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY091dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ID0gdCAqIDIgLSAxKSA8IDBcbiAgICAgICAgPyBhICogTWF0aC5wb3coMiwgMTAgKiB0KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKVxuICAgICAgICA6IDIgLSBhICogTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigocyArIHQpIC8gcCkpIC8gMjtcbiAgfVxuXG4gIGVsYXN0aWNJbk91dC5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbk91dC5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbk91dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuLi90cmFuc2l0aW9uL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUgZnJvbSBcIi4uL3RyYW5zaXRpb24vc2NoZWR1bGVcIjtcbmltcG9ydCB7ZWFzZUN1YmljSW5PdXR9IGZyb20gXCJkMy1lYXNlXCI7XG5pbXBvcnQge25vd30gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBkZWZhdWx0VGltaW5nID0ge1xuICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDI1MCxcbiAgZWFzZTogZWFzZUN1YmljSW5PdXRcbn07XG5cbmZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgdmFyIHRpbWluZztcbiAgd2hpbGUgKCEodGltaW5nID0gbm9kZS5fX3RyYW5zaXRpb24pIHx8ICEodGltaW5nID0gdGltaW5nW2lkXSkpIHtcbiAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRUaW1pbmcudGltZSA9IG5vdygpLCBkZWZhdWx0VGltaW5nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGltaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBpZCxcbiAgICAgIHRpbWluZztcblxuICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICBpZCA9IG5hbWUuX2lkLCBuYW1lID0gbmFtZS5fbmFtZTtcbiAgfSBlbHNlIHtcbiAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaSwgZ3JvdXAsIHRpbWluZyB8fCBpbmhlcml0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW4odCkge1xuICByZXR1cm4gdCAqIHQgKiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNPdXQodCkge1xuICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0ICogdCA6ICh0IC09IDIpICogdCAqIHQgKyAyKSAvIDI7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnRlcnJ1cHQgZnJvbSBcIi4vaW50ZXJydXB0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuXG5zZWxlY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IHNlbGVjdGlvbl9pbnRlcnJ1cHQ7XG5zZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcbiIsImltcG9ydCBpbnRlcnJ1cHQgZnJvbSBcIi4uL2ludGVycnVwdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtkcmFnRGlzYWJsZSwgZHJhZ0VuYWJsZX0gZnJvbSBcImQzLWRyYWdcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGV9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtjdXN0b21FdmVudCwgZXZlbnQsIHRvdWNoLCBtb3VzZSwgc2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2ludGVycnVwdH0gZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IEJydXNoRXZlbnQgZnJvbSBcIi4vZXZlbnQuanNcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuXG52YXIgTU9ERV9EUkFHID0ge25hbWU6IFwiZHJhZ1wifSxcbiAgICBNT0RFX1NQQUNFID0ge25hbWU6IFwic3BhY2VcIn0sXG4gICAgTU9ERV9IQU5ETEUgPSB7bmFtZTogXCJoYW5kbGVcIn0sXG4gICAgTU9ERV9DRU5URVIgPSB7bmFtZTogXCJjZW50ZXJcIn07XG5cbmZ1bmN0aW9uIG51bWJlcjEoZSkge1xuICByZXR1cm4gWytlWzBdLCArZVsxXV07XG59XG5cbmZ1bmN0aW9uIG51bWJlcjIoZSkge1xuICByZXR1cm4gW251bWJlcjEoZVswXSksIG51bWJlcjEoZVsxXSldO1xufVxuXG5mdW5jdGlvbiB0b3VjaGVyKGlkZW50aWZpZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgIHJldHVybiB0b3VjaCh0YXJnZXQsIGV2ZW50LnRvdWNoZXMsIGlkZW50aWZpZXIpO1xuICB9O1xufVxuXG52YXIgWCA9IHtcbiAgbmFtZTogXCJ4XCIsXG4gIGhhbmRsZXM6IFtcIndcIiwgXCJlXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHgsIGUpIHsgcmV0dXJuIHggPT0gbnVsbCA/IG51bGwgOiBbWyt4WzBdLCBlWzBdWzFdXSwgWyt4WzFdLCBlWzFdWzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVswXSwgeHlbMV1bMF1dOyB9XG59O1xuXG52YXIgWSA9IHtcbiAgbmFtZTogXCJ5XCIsXG4gIGhhbmRsZXM6IFtcIm5cIiwgXCJzXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHksIGUpIHsgcmV0dXJuIHkgPT0gbnVsbCA/IG51bGwgOiBbW2VbMF1bMF0sICt5WzBdXSwgW2VbMV1bMF0sICt5WzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVsxXSwgeHlbMV1bMV1dOyB9XG59O1xuXG52YXIgWFkgPSB7XG4gIG5hbWU6IFwieHlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcIndcIiwgXCJlXCIsIFwic1wiLCBcIm53XCIsIFwibmVcIiwgXCJzd1wiLCBcInNlXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSA9PSBudWxsID8gbnVsbCA6IG51bWJlcjIoeHkpOyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eTsgfVxufTtcblxudmFyIGN1cnNvcnMgPSB7XG4gIG92ZXJsYXk6IFwiY3Jvc3NoYWlyXCIsXG4gIHNlbGVjdGlvbjogXCJtb3ZlXCIsXG4gIG46IFwibnMtcmVzaXplXCIsXG4gIGU6IFwiZXctcmVzaXplXCIsXG4gIHM6IFwibnMtcmVzaXplXCIsXG4gIHc6IFwiZXctcmVzaXplXCIsXG4gIG53OiBcIm53c2UtcmVzaXplXCIsXG4gIG5lOiBcIm5lc3ctcmVzaXplXCIsXG4gIHNlOiBcIm53c2UtcmVzaXplXCIsXG4gIHN3OiBcIm5lc3ctcmVzaXplXCJcbn07XG5cbnZhciBmbGlwWCA9IHtcbiAgZTogXCJ3XCIsXG4gIHc6IFwiZVwiLFxuICBudzogXCJuZVwiLFxuICBuZTogXCJud1wiLFxuICBzZTogXCJzd1wiLFxuICBzdzogXCJzZVwiXG59O1xuXG52YXIgZmxpcFkgPSB7XG4gIG46IFwic1wiLFxuICBzOiBcIm5cIixcbiAgbnc6IFwic3dcIixcbiAgbmU6IFwic2VcIixcbiAgc2U6IFwibmVcIixcbiAgc3c6IFwibndcIlxufTtcblxudmFyIHNpZ25zWCA9IHtcbiAgb3ZlcmxheTogKzEsXG4gIHNlbGVjdGlvbjogKzEsXG4gIG46IG51bGwsXG4gIGU6ICsxLFxuICBzOiBudWxsLFxuICB3OiAtMSxcbiAgbnc6IC0xLFxuICBuZTogKzEsXG4gIHNlOiArMSxcbiAgc3c6IC0xXG59O1xuXG52YXIgc2lnbnNZID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogLTEsXG4gIGU6IG51bGwsXG4gIHM6ICsxLFxuICB3OiBudWxsLFxuICBudzogLTEsXG4gIG5lOiAtMSxcbiAgc2U6ICsxLFxuICBzdzogKzFcbn07XG5cbmZ1bmN0aW9uIHR5cGUodCkge1xuICByZXR1cm4ge3R5cGU6IHR9O1xufVxuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoKSB7XG4gIHJldHVybiAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0RXh0ZW50KCkge1xuICB2YXIgc3ZnID0gdGhpcy5vd25lclNWR0VsZW1lbnQgfHwgdGhpcztcbiAgaWYgKHN2Zy5oYXNBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIpKSB7XG4gICAgc3ZnID0gc3ZnLnZpZXdCb3guYmFzZVZhbDtcbiAgICByZXR1cm4gW1tzdmcueCwgc3ZnLnldLCBbc3ZnLnggKyBzdmcud2lkdGgsIHN2Zy55ICsgc3ZnLmhlaWdodF1dO1xuICB9XG4gIHJldHVybiBbWzAsIDBdLCBbc3ZnLndpZHRoLmJhc2VWYWwudmFsdWUsIHN2Zy5oZWlnaHQuYmFzZVZhbC52YWx1ZV1dO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VG91Y2hhYmxlKCkge1xuICByZXR1cm4gbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzIHx8IChcIm9udG91Y2hzdGFydFwiIGluIHRoaXMpO1xufVxuXG4vLyBMaWtlIGQzLmxvY2FsLCBidXQgd2l0aCB0aGUgbmFtZSDigJxfX2JydXNo4oCdIHJhdGhlciB0aGFuIGF1dG8tZ2VuZXJhdGVkLlxuZnVuY3Rpb24gbG9jYWwobm9kZSkge1xuICB3aGlsZSAoIW5vZGUuX19icnVzaCkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybjtcbiAgcmV0dXJuIG5vZGUuX19icnVzaDtcbn1cblxuZnVuY3Rpb24gZW1wdHkoZXh0ZW50KSB7XG4gIHJldHVybiBleHRlbnRbMF1bMF0gPT09IGV4dGVudFsxXVswXVxuICAgICAgfHwgZXh0ZW50WzBdWzFdID09PSBleHRlbnRbMV1bMV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFNlbGVjdGlvbihub2RlKSB7XG4gIHZhciBzdGF0ZSA9IG5vZGUuX19icnVzaDtcbiAgcmV0dXJuIHN0YXRlID8gc3RhdGUuZGltLm91dHB1dChzdGF0ZS5zZWxlY3Rpb24pIDogbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoWCgpIHtcbiAgcmV0dXJuIGJydXNoKFgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hZKCkge1xuICByZXR1cm4gYnJ1c2goWSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gYnJ1c2goWFkpO1xufVxuXG5mdW5jdGlvbiBicnVzaChkaW0pIHtcbiAgdmFyIGV4dGVudCA9IGRlZmF1bHRFeHRlbnQsXG4gICAgICBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyLFxuICAgICAgdG91Y2hhYmxlID0gZGVmYXVsdFRvdWNoYWJsZSxcbiAgICAgIGtleXMgPSB0cnVlLFxuICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goYnJ1c2gsIFwic3RhcnRcIiwgXCJicnVzaFwiLCBcImVuZFwiKSxcbiAgICAgIGhhbmRsZVNpemUgPSA2LFxuICAgICAgdG91Y2hlbmRpbmc7XG5cbiAgZnVuY3Rpb24gYnJ1c2goZ3JvdXApIHtcbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwXG4gICAgICAgIC5wcm9wZXJ0eShcIl9fYnJ1c2hcIiwgaW5pdGlhbGl6ZSlcbiAgICAgIC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgLmRhdGEoW3R5cGUoXCJvdmVybGF5XCIpXSk7XG5cbiAgICBvdmVybGF5LmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwib3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSlcbiAgICAgIC5tZXJnZShvdmVybGF5KVxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZXh0ZW50ID0gbG9jYWwodGhpcykuZXh0ZW50O1xuICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAuYXR0cihcInhcIiwgZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcInlcIiwgZXh0ZW50WzBdWzFdKVxuICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGV4dGVudFsxXVswXSAtIGV4dGVudFswXVswXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdKTtcbiAgICAgICAgfSk7XG5cbiAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXG4gICAgICAuZGF0YShbdHlwZShcInNlbGVjdGlvblwiKV0pXG4gICAgICAuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJzZWxlY3Rpb25cIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiM3NzdcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwgMC4zKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiNmZmZcIilcbiAgICAgICAgLmF0dHIoXCJzaGFwZS1yZW5kZXJpbmdcIiwgXCJjcmlzcEVkZ2VzXCIpO1xuXG4gICAgdmFyIGhhbmRsZSA9IGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgIC5kYXRhKGRpbS5oYW5kbGVzLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGU7IH0pO1xuXG4gICAgaGFuZGxlLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgIGhhbmRsZS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcImhhbmRsZSBoYW5kbGUtLVwiICsgZC50eXBlOyB9KVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBjdXJzb3JzW2QudHlwZV07IH0pO1xuXG4gICAgZ3JvdXBcbiAgICAgICAgLmVhY2gocmVkcmF3KVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLm9uKFwibW91c2Vkb3duLmJydXNoXCIsIHN0YXJ0ZWQpXG4gICAgICAuZmlsdGVyKHRvdWNoYWJsZSlcbiAgICAgICAgLm9uKFwidG91Y2hzdGFydC5icnVzaFwiLCBzdGFydGVkKVxuICAgICAgICAub24oXCJ0b3VjaG1vdmUuYnJ1c2hcIiwgdG91Y2htb3ZlZClcbiAgICAgICAgLm9uKFwidG91Y2hlbmQuYnJ1c2ggdG91Y2hjYW5jZWwuYnJ1c2hcIiwgdG91Y2hlbmRlZClcbiAgICAgICAgLnN0eWxlKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpO1xuICB9XG5cbiAgYnJ1c2gubW92ZSA9IGZ1bmN0aW9uKGdyb3VwLCBzZWxlY3Rpb24pIHtcbiAgICBpZiAoZ3JvdXAuc2VsZWN0aW9uKSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5vbihcInN0YXJ0LmJydXNoXCIsIGZ1bmN0aW9uKCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuYmVmb3Jlc3RhcnQoKS5zdGFydCgpOyB9KVxuICAgICAgICAgIC5vbihcImludGVycnVwdC5icnVzaCBlbmQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5lbmQoKTsgfSlcbiAgICAgICAgICAudHdlZW4oXCJicnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjAgPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBpID0gaW50ZXJwb2xhdGUoc2VsZWN0aW9uMCwgc2VsZWN0aW9uMSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHR3ZWVuKHQpIHtcbiAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gdCA9PT0gMSAmJiBzZWxlY3Rpb24xID09PSBudWxsID8gbnVsbCA6IGkodCk7XG4gICAgICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb24wICE9PSBudWxsICYmIHNlbGVjdGlvbjEgIT09IG51bGwgPyB0d2VlbiA6IHR3ZWVuKDEpO1xuICAgICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhhdCwgYXJncykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJncykuYmVmb3Jlc3RhcnQoKTtcblxuICAgICAgICAgICAgaW50ZXJydXB0KHRoYXQpO1xuICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uMSA9PT0gbnVsbCA/IG51bGwgOiBzZWxlY3Rpb24xO1xuICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICBlbWl0LnN0YXJ0KCkuYnJ1c2goKS5lbmQoKTtcbiAgICAgICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgYnJ1c2guY2xlYXIgPSBmdW5jdGlvbihncm91cCkge1xuICAgIGJydXNoLm1vdmUoZ3JvdXAsIG51bGwpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHJlZHJhdygpIHtcbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhpcyksXG4gICAgICAgIHNlbGVjdGlvbiA9IGxvY2FsKHRoaXMpLnNlbGVjdGlvbjtcblxuICAgIGlmIChzZWxlY3Rpb24pIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIHNlbGVjdGlvblswXVswXSlcbiAgICAgICAgICAuYXR0cihcInlcIiwgc2VsZWN0aW9uWzBdWzFdKVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgc2VsZWN0aW9uWzFdWzBdIC0gc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSk7XG5cbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZVtkLnR5cGUubGVuZ3RoIC0gMV0gPT09IFwiZVwiID8gc2VsZWN0aW9uWzFdWzBdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMF0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlWzBdID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVsxXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzFdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGUgPT09IFwiblwiIHx8IGQudHlwZSA9PT0gXCJzXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0gKyBoYW5kbGVTaXplIDogaGFuZGxlU2l6ZTsgfSlcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGUgPT09IFwiZVwiIHx8IGQudHlwZSA9PT0gXCJ3XCIgPyBzZWxlY3Rpb25bMV1bMV0gLSBzZWxlY3Rpb25bMF1bMV0gKyBoYW5kbGVTaXplIDogaGFuZGxlU2l6ZTsgfSk7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uLC5oYW5kbGVcIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBudWxsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbWl0dGVyKHRoYXQsIGFyZ3MsIGNsZWFuKSB7XG4gICAgcmV0dXJuICghY2xlYW4gJiYgdGhhdC5fX2JydXNoLmVtaXR0ZXIpIHx8IG5ldyBFbWl0dGVyKHRoYXQsIGFyZ3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gRW1pdHRlcih0aGF0LCBhcmdzKSB7XG4gICAgdGhpcy50aGF0ID0gdGhhdDtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIHRoaXMuc3RhdGUgPSB0aGF0Ll9fYnJ1c2g7XG4gICAgdGhpcy5hY3RpdmUgPSAwO1xuICB9XG5cbiAgRW1pdHRlci5wcm90b3R5cGUgPSB7XG4gICAgYmVmb3Jlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCsrdGhpcy5hY3RpdmUgPT09IDEpIHRoaXMuc3RhdGUuZW1pdHRlciA9IHRoaXMsIHRoaXMuc3RhcnRpbmcgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5zdGFydGluZykgdGhpcy5zdGFydGluZyA9IGZhbHNlLCB0aGlzLmVtaXQoXCJzdGFydFwiKTtcbiAgICAgIGVsc2UgdGhpcy5lbWl0KFwiYnJ1c2hcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGJydXNoOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZW1pdChcImJydXNoXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGhpcy5hY3RpdmUgPT09IDApIGRlbGV0ZSB0aGlzLnN0YXRlLmVtaXR0ZXIsIHRoaXMuZW1pdChcImVuZFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW1pdDogZnVuY3Rpb24odHlwZSkge1xuICAgICAgY3VzdG9tRXZlbnQobmV3IEJydXNoRXZlbnQoYnJ1c2gsIHR5cGUsIGRpbS5vdXRwdXQodGhpcy5zdGF0ZS5zZWxlY3Rpb24pKSwgbGlzdGVuZXJzLmFwcGx5LCBsaXN0ZW5lcnMsIFt0eXBlLCB0aGlzLnRoYXQsIHRoaXMuYXJnc10pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBzdGFydGVkKCkge1xuICAgIGlmICh0b3VjaGVuZGluZyAmJiAhZXZlbnQudG91Y2hlcykgcmV0dXJuO1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcblxuICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgdHlwZSA9IGV2ZW50LnRhcmdldC5fX2RhdGFfXy50eXBlLFxuICAgICAgICBtb2RlID0gKGtleXMgJiYgZXZlbnQubWV0YUtleSA/IHR5cGUgPSBcIm92ZXJsYXlcIiA6IHR5cGUpID09PSBcInNlbGVjdGlvblwiID8gTU9ERV9EUkFHIDogKGtleXMgJiYgZXZlbnQuYWx0S2V5ID8gTU9ERV9DRU5URVIgOiBNT0RFX0hBTkRMRSksXG4gICAgICAgIHNpZ25YID0gZGltID09PSBZID8gbnVsbCA6IHNpZ25zWFt0eXBlXSxcbiAgICAgICAgc2lnblkgPSBkaW0gPT09IFggPyBudWxsIDogc2lnbnNZW3R5cGVdLFxuICAgICAgICBzdGF0ZSA9IGxvY2FsKHRoYXQpLFxuICAgICAgICBleHRlbnQgPSBzdGF0ZS5leHRlbnQsXG4gICAgICAgIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgVyA9IGV4dGVudFswXVswXSwgdzAsIHcxLFxuICAgICAgICBOID0gZXh0ZW50WzBdWzFdLCBuMCwgbjEsXG4gICAgICAgIEUgPSBleHRlbnRbMV1bMF0sIGUwLCBlMSxcbiAgICAgICAgUyA9IGV4dGVudFsxXVsxXSwgczAsIHMxLFxuICAgICAgICBkeCA9IDAsXG4gICAgICAgIGR5ID0gMCxcbiAgICAgICAgbW92aW5nLFxuICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZICYmIGtleXMgJiYgZXZlbnQuc2hpZnRLZXksXG4gICAgICAgIGxvY2tYLFxuICAgICAgICBsb2NrWSxcbiAgICAgICAgcG9pbnRlciA9IGV2ZW50LnRvdWNoZXMgPyB0b3VjaGVyKGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXIpIDogbW91c2UsXG4gICAgICAgIHBvaW50MCA9IHBvaW50ZXIodGhhdCksXG4gICAgICAgIHBvaW50ID0gcG9pbnQwLFxuICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMsIHRydWUpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICBpZiAodHlwZSA9PT0gXCJvdmVybGF5XCIpIHtcbiAgICAgIGlmIChzZWxlY3Rpb24pIG1vdmluZyA9IHRydWU7XG4gICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24gPSBbXG4gICAgICAgIFt3MCA9IGRpbSA9PT0gWSA/IFcgOiBwb2ludDBbMF0sIG4wID0gZGltID09PSBYID8gTiA6IHBvaW50MFsxXV0sXG4gICAgICAgIFtlMCA9IGRpbSA9PT0gWSA/IEUgOiB3MCwgczAgPSBkaW0gPT09IFggPyBTIDogbjBdXG4gICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB3MCA9IHNlbGVjdGlvblswXVswXTtcbiAgICAgIG4wID0gc2VsZWN0aW9uWzBdWzFdO1xuICAgICAgZTAgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICBzMCA9IHNlbGVjdGlvblsxXVsxXTtcbiAgICB9XG5cbiAgICB3MSA9IHcwO1xuICAgIG4xID0gbjA7XG4gICAgZTEgPSBlMDtcbiAgICBzMSA9IHMwO1xuXG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoYXQpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xuXG4gICAgdmFyIG92ZXJsYXkgPSBncm91cC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICBlbWl0Lm1vdmVkID0gbW92ZWQ7XG4gICAgICBlbWl0LmVuZGVkID0gZW5kZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gc2VsZWN0KGV2ZW50LnZpZXcpXG4gICAgICAgICAgLm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcIm1vdXNldXAuYnJ1c2hcIiwgZW5kZWQsIHRydWUpO1xuICAgICAgaWYgKGtleXMpIHZpZXdcbiAgICAgICAgICAub24oXCJrZXlkb3duLmJydXNoXCIsIGtleWRvd25lZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJrZXl1cC5icnVzaFwiLCBrZXl1cHBlZCwgdHJ1ZSlcblxuICAgICAgZHJhZ0Rpc2FibGUoZXZlbnQudmlldyk7XG4gICAgfVxuXG4gICAgbm9wcm9wYWdhdGlvbigpO1xuICAgIGludGVycnVwdCh0aGF0KTtcbiAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICBlbWl0LnN0YXJ0KCk7XG5cbiAgICBmdW5jdGlvbiBtb3ZlZCgpIHtcbiAgICAgIHZhciBwb2ludDEgPSBwb2ludGVyKHRoYXQpO1xuICAgICAgaWYgKHNoaWZ0aW5nICYmICFsb2NrWCAmJiAhbG9ja1kpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKHBvaW50MVswXSAtIHBvaW50WzBdKSA+IE1hdGguYWJzKHBvaW50MVsxXSAtIHBvaW50WzFdKSkgbG9ja1kgPSB0cnVlO1xuICAgICAgICBlbHNlIGxvY2tYID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBvaW50ID0gcG9pbnQxO1xuICAgICAgbW92aW5nID0gdHJ1ZTtcbiAgICAgIG5vZXZlbnQoKTtcbiAgICAgIG1vdmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3ZlKCkge1xuICAgICAgdmFyIHQ7XG5cbiAgICAgIGR4ID0gcG9pbnRbMF0gLSBwb2ludDBbMF07XG4gICAgICBkeSA9IHBvaW50WzFdIC0gcG9pbnQwWzFdO1xuXG4gICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgY2FzZSBNT0RFX1NQQUNFOlxuICAgICAgICBjYXNlIE1PREVfRFJBRzoge1xuICAgICAgICAgIGlmIChzaWduWCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgaWYgKHNpZ25ZKSBkeSA9IE1hdGgubWF4KE4gLSBuMCwgTWF0aC5taW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczAgKyBkeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfSEFORExFOiB7XG4gICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSB3MCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwO1xuICAgICAgICAgIGVsc2UgaWYgKHNpZ25YID4gMCkgZHggPSBNYXRoLm1heChXIC0gZTAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgIGlmIChzaWduWSA8IDApIGR5ID0gTWF0aC5tYXgoTiAtIG4wLCBNYXRoLm1pbihTIC0gbjAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMDtcbiAgICAgICAgICBlbHNlIGlmIChzaWduWSA+IDApIGR5ID0gTWF0aC5tYXgoTiAtIHMwLCBNYXRoLm1pbihTIC0gczAsIGR5KSksIG4xID0gbjAsIHMxID0gczAgKyBkeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfQ0VOVEVSOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIHcwIC0gZHggKiBzaWduWCkpLCBlMSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIGUwICsgZHggKiBzaWduWCkpO1xuICAgICAgICAgIGlmIChzaWduWSkgbjEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBuMCAtIGR5ICogc2lnblkpKSwgczEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBzMCArIGR5ICogc2lnblkpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZTEgPCB3MSkge1xuICAgICAgICBzaWduWCAqPSAtMTtcbiAgICAgICAgdCA9IHcwLCB3MCA9IGUwLCBlMCA9IHQ7XG4gICAgICAgIHQgPSB3MSwgdzEgPSBlMSwgZTEgPSB0O1xuICAgICAgICBpZiAodHlwZSBpbiBmbGlwWCkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBYW3R5cGVdXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzMSA8IG4xKSB7XG4gICAgICAgIHNpZ25ZICo9IC0xO1xuICAgICAgICB0ID0gbjAsIG4wID0gczAsIHMwID0gdDtcbiAgICAgICAgdCA9IG4xLCBuMSA9IHMxLCBzMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBZKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFlbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUhXG4gICAgICBpZiAobG9ja1gpIHcxID0gc2VsZWN0aW9uWzBdWzBdLCBlMSA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgIGlmIChsb2NrWSkgbjEgPSBzZWxlY3Rpb25bMF1bMV0sIHMxID0gc2VsZWN0aW9uWzFdWzFdO1xuXG4gICAgICBpZiAoc2VsZWN0aW9uWzBdWzBdICE9PSB3MVxuICAgICAgICAgIHx8IHNlbGVjdGlvblswXVsxXSAhPT0gbjFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMF0gIT09IGUxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzFdICE9PSBzMSkge1xuICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBbW3cxLCBuMV0sIFtlMSwgczFdXTtcbiAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRlZCgpIHtcbiAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAgIGlmIChldmVudC50b3VjaGVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcmFnRW5hYmxlKGV2ZW50LnZpZXcsIG1vdmluZyk7XG4gICAgICAgIHZpZXcub24oXCJrZXlkb3duLmJydXNoIGtleXVwLmJydXNoIG1vdXNlbW92ZS5icnVzaCBtb3VzZXVwLmJydXNoXCIsIG51bGwpO1xuICAgICAgfVxuICAgICAgZ3JvdXAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpO1xuICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSk7XG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSAob24gc3RhcnQpIVxuICAgICAgaWYgKGVtcHR5KHNlbGVjdGlvbikpIHN0YXRlLnNlbGVjdGlvbiA9IG51bGwsIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgZW1pdC5lbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXlkb3duZWQoKSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0U7IHRha2VzIHByaW9yaXR5IG92ZXIgQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFIHx8IG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxIC0gZHg7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MSAtIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMSAtIGR5OyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjEgLSBkeTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX1NQQUNFO1xuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogcmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9ldmVudCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleXVwcGVkKCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBpZiAoc2hpZnRpbmcpIHtcbiAgICAgICAgICAgIGxvY2tYID0gbG9ja1kgPSBzaGlmdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMyOiB7IC8vIFNQQUNFXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfU1BBQ0UpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5hbHRLZXkpIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2htb3ZlZCgpIHtcbiAgICBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykubW92ZWQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZW5kZWQoKSB7XG4gICAgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmVuZGVkKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX19icnVzaCB8fCB7c2VsZWN0aW9uOiBudWxsfTtcbiAgICBzdGF0ZS5leHRlbnQgPSBudW1iZXIyKGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICBzdGF0ZS5kaW0gPSBkaW07XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgYnJ1c2guZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQobnVtYmVyMihfKSksIGJydXNoKSA6IGV4dGVudDtcbiAgfTtcblxuICBicnVzaC5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBicnVzaCkgOiBmaWx0ZXI7XG4gIH07XG5cbiAgYnJ1c2guaGFuZGxlU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChoYW5kbGVTaXplID0gK18sIGJydXNoKSA6IGhhbmRsZVNpemU7XG4gIH07XG5cbiAgYnJ1c2gua2V5TW9kaWZpZXJzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGtleXMgPSAhIV8sIGJydXNoKSA6IGtleXM7XG4gIH07XG5cbiAgYnJ1c2gub24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gYnJ1c2ggOiB2YWx1ZTtcbiAgfTtcblxuICByZXR1cm4gYnJ1c2g7XG59XG4iLCJleHBvcnQgdmFyIGNvcyA9IE1hdGguY29zO1xuZXhwb3J0IHZhciBzaW4gPSBNYXRoLnNpbjtcbmV4cG9ydCB2YXIgcGkgPSBNYXRoLlBJO1xuZXhwb3J0IHZhciBoYWxmUGkgPSBwaSAvIDI7XG5leHBvcnQgdmFyIHRhdSA9IHBpICogMjtcbmV4cG9ydCB2YXIgbWF4ID0gTWF0aC5tYXg7XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuIiwiaW1wb3J0IHtyYW5nZX0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge21heCwgdGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5cbmZ1bmN0aW9uIGNvbXBhcmVWYWx1ZShjb21wYXJlKSB7XG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoXG4gICAgICBhLnNvdXJjZS52YWx1ZSArIGEudGFyZ2V0LnZhbHVlLFxuICAgICAgYi5zb3VyY2UudmFsdWUgKyBiLnRhcmdldC52YWx1ZVxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgcGFkQW5nbGUgPSAwLFxuICAgICAgc29ydEdyb3VwcyA9IG51bGwsXG4gICAgICBzb3J0U3ViZ3JvdXBzID0gbnVsbCxcbiAgICAgIHNvcnRDaG9yZHMgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGNob3JkKG1hdHJpeCkge1xuICAgIHZhciBuID0gbWF0cml4Lmxlbmd0aCxcbiAgICAgICAgZ3JvdXBTdW1zID0gW10sXG4gICAgICAgIGdyb3VwSW5kZXggPSByYW5nZShuKSxcbiAgICAgICAgc3ViZ3JvdXBJbmRleCA9IFtdLFxuICAgICAgICBjaG9yZHMgPSBbXSxcbiAgICAgICAgZ3JvdXBzID0gY2hvcmRzLmdyb3VwcyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG4gKiBuKSxcbiAgICAgICAgayxcbiAgICAgICAgeCxcbiAgICAgICAgeDAsXG4gICAgICAgIGR4LFxuICAgICAgICBpLFxuICAgICAgICBqO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgc3VtLlxuICAgIGsgPSAwLCBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB4ID0gMCwgaiA9IC0xOyB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICB4ICs9IG1hdHJpeFtpXVtqXTtcbiAgICAgIH1cbiAgICAgIGdyb3VwU3Vtcy5wdXNoKHgpO1xuICAgICAgc3ViZ3JvdXBJbmRleC5wdXNoKHJhbmdlKG4pKTtcbiAgICAgIGsgKz0geDtcbiAgICB9XG5cbiAgICAvLyBTb3J0IGdyb3Vwc+KAplxuICAgIGlmIChzb3J0R3JvdXBzKSBncm91cEluZGV4LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgcmV0dXJuIHNvcnRHcm91cHMoZ3JvdXBTdW1zW2FdLCBncm91cFN1bXNbYl0pO1xuICAgIH0pO1xuXG4gICAgLy8gU29ydCBzdWJncm91cHPigKZcbiAgICBpZiAoc29ydFN1Ymdyb3Vwcykgc3ViZ3JvdXBJbmRleC5mb3JFYWNoKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgIGQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBzb3J0U3ViZ3JvdXBzKG1hdHJpeFtpXVthXSwgbWF0cml4W2ldW2JdKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gQ29udmVydCB0aGUgc3VtIHRvIHNjYWxpbmcgZmFjdG9yIGZvciBbMCwgMnBpXS5cbiAgICAvLyBUT0RPIEFsbG93IHN0YXJ0IGFuZCBlbmQgYW5nbGUgdG8gYmUgc3BlY2lmaWVkP1xuICAgIC8vIFRPRE8gQWxsb3cgcGFkZGluZyB0byBiZSBzcGVjaWZpZWQgYXMgcGVyY2VudGFnZT9cbiAgICBrID0gbWF4KDAsIHRhdSAtIHBhZEFuZ2xlICogbikgLyBrO1xuICAgIGR4ID0gayA/IHBhZEFuZ2xlIDogdGF1IC8gbjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHN0YXJ0IGFuZCBlbmQgYW5nbGUgZm9yIGVhY2ggZ3JvdXAgYW5kIHN1Ymdyb3VwLlxuICAgIC8vIE5vdGU6IE9wZXJhIGhhcyBhIGJ1ZyByZW9yZGVyaW5nIG9iamVjdCBsaXRlcmFsIHByb3BlcnRpZXMhXG4gICAgeCA9IDAsIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHgwID0geCwgaiA9IC0xOyB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICB2YXIgZGkgPSBncm91cEluZGV4W2ldLFxuICAgICAgICAgICAgZGogPSBzdWJncm91cEluZGV4W2RpXVtqXSxcbiAgICAgICAgICAgIHYgPSBtYXRyaXhbZGldW2RqXSxcbiAgICAgICAgICAgIGEwID0geCxcbiAgICAgICAgICAgIGExID0geCArPSB2ICogaztcbiAgICAgICAgc3ViZ3JvdXBzW2RqICogbiArIGRpXSA9IHtcbiAgICAgICAgICBpbmRleDogZGksXG4gICAgICAgICAgc3ViaW5kZXg6IGRqLFxuICAgICAgICAgIHN0YXJ0QW5nbGU6IGEwLFxuICAgICAgICAgIGVuZEFuZ2xlOiBhMSxcbiAgICAgICAgICB2YWx1ZTogdlxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZ3JvdXBzW2RpXSA9IHtcbiAgICAgICAgaW5kZXg6IGRpLFxuICAgICAgICBzdGFydEFuZ2xlOiB4MCxcbiAgICAgICAgZW5kQW5nbGU6IHgsXG4gICAgICAgIHZhbHVlOiBncm91cFN1bXNbZGldXG4gICAgICB9O1xuICAgICAgeCArPSBkeDtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBjaG9yZHMgZm9yIGVhY2ggKG5vbi1lbXB0eSkgc3ViZ3JvdXAtc3ViZ3JvdXAgbGluay5cbiAgICBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBqID0gaSAtIDE7IHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzdWJncm91cHNbaiAqIG4gKyBpXSxcbiAgICAgICAgICAgIHRhcmdldCA9IHN1Ymdyb3Vwc1tpICogbiArIGpdO1xuICAgICAgICBpZiAoc291cmNlLnZhbHVlIHx8IHRhcmdldC52YWx1ZSkge1xuICAgICAgICAgIGNob3Jkcy5wdXNoKHNvdXJjZS52YWx1ZSA8IHRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICA/IHtzb3VyY2U6IHRhcmdldCwgdGFyZ2V0OiBzb3VyY2V9XG4gICAgICAgICAgICAgIDoge3NvdXJjZTogc291cmNlLCB0YXJnZXQ6IHRhcmdldH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvcnRDaG9yZHMgPyBjaG9yZHMuc29ydChzb3J0Q2hvcmRzKSA6IGNob3JkcztcbiAgfVxuXG4gIGNob3JkLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gbWF4KDAsIF8pLCBjaG9yZCkgOiBwYWRBbmdsZTtcbiAgfTtcblxuICBjaG9yZC5zb3J0R3JvdXBzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnRHcm91cHMgPSBfLCBjaG9yZCkgOiBzb3J0R3JvdXBzO1xuICB9O1xuXG4gIGNob3JkLnNvcnRTdWJncm91cHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydFN1Ymdyb3VwcyA9IF8sIGNob3JkKSA6IHNvcnRTdWJncm91cHM7XG4gIH07XG5cbiAgY2hvcmQuc29ydENob3JkcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBzb3J0Q2hvcmRzID0gbnVsbCA6IChzb3J0Q2hvcmRzID0gY29tcGFyZVZhbHVlKF8pKS5fID0gXywgY2hvcmQpIDogc29ydENob3JkcyAmJiBzb3J0Q2hvcmRzLl87XG4gIH07XG5cbiAgcmV0dXJuIGNob3JkO1xufVxuIiwidmFyIHBpID0gTWF0aC5QSSxcbiAgICB0YXUgPSAyICogcGksXG4gICAgZXBzaWxvbiA9IDFlLTYsXG4gICAgdGF1RXBzaWxvbiA9IHRhdSAtIGVwc2lsb247XG5cbmZ1bmN0aW9uIFBhdGgoKSB7XG4gIHRoaXMuX3gwID0gdGhpcy5feTAgPSAvLyBzdGFydCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5feDEgPSB0aGlzLl95MSA9IG51bGw7IC8vIGVuZCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5fID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gcGF0aCgpIHtcbiAgcmV0dXJuIG5ldyBQYXRoO1xufVxuXG5QYXRoLnByb3RvdHlwZSA9IHBhdGgucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUGF0aCxcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl94MSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5feDEgPSB0aGlzLl94MCwgdGhpcy5feTEgPSB0aGlzLl95MDtcbiAgICAgIHRoaXMuXyArPSBcIlpcIjtcbiAgICB9XG4gIH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkxcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJRXCIgKyAoK3gxKSArIFwiLFwiICsgKCt5MSkgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkNcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKCt4MikgKyBcIixcIiArICgreTIpICsgXCIsXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgYXJjVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCByKSB7XG4gICAgeDEgPSAreDEsIHkxID0gK3kxLCB4MiA9ICt4MiwgeTIgPSAreTIsIHIgPSArcjtcbiAgICB2YXIgeDAgPSB0aGlzLl94MSxcbiAgICAgICAgeTAgPSB0aGlzLl95MSxcbiAgICAgICAgeDIxID0geDIgLSB4MSxcbiAgICAgICAgeTIxID0geTIgLSB5MSxcbiAgICAgICAgeDAxID0geDAgLSB4MSxcbiAgICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgICAgbDAxXzIgPSB4MDEgKiB4MDEgKyB5MDEgKiB5MDE7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDEseTEpLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4MCx5MCk/IERvIG5vdGhpbmcuXG4gICAgZWxzZSBpZiAoIShsMDFfMiA+IGVwc2lsb24pKTtcblxuICAgIC8vIE9yLCBhcmUgKHgwLHkwKSwgKHgxLHkxKSBhbmQgKHgyLHkyKSBjb2xsaW5lYXI/XG4gICAgLy8gRXF1aXZhbGVudGx5LCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDIseTIpP1xuICAgIC8vIE9yLCBpcyB0aGUgcmFkaXVzIHplcm8/IExpbmUgdG8gKHgxLHkxKS5cbiAgICBlbHNlIGlmICghKE1hdGguYWJzKHkwMSAqIHgyMSAtIHkyMSAqIHgwMSkgPiBlcHNpbG9uKSB8fCAhcikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBkcmF3IGFuIGFyYyFcbiAgICBlbHNlIHtcbiAgICAgIHZhciB4MjAgPSB4MiAtIHgwLFxuICAgICAgICAgIHkyMCA9IHkyIC0geTAsXG4gICAgICAgICAgbDIxXzIgPSB4MjEgKiB4MjEgKyB5MjEgKiB5MjEsXG4gICAgICAgICAgbDIwXzIgPSB4MjAgKiB4MjAgKyB5MjAgKiB5MjAsXG4gICAgICAgICAgbDIxID0gTWF0aC5zcXJ0KGwyMV8yKSxcbiAgICAgICAgICBsMDEgPSBNYXRoLnNxcnQobDAxXzIpLFxuICAgICAgICAgIGwgPSByICogTWF0aC50YW4oKHBpIC0gTWF0aC5hY29zKChsMjFfMiArIGwwMV8yIC0gbDIwXzIpIC8gKDIgKiBsMjEgKiBsMDEpKSkgLyAyKSxcbiAgICAgICAgICB0MDEgPSBsIC8gbDAxLFxuICAgICAgICAgIHQyMSA9IGwgLyBsMjE7XG5cbiAgICAgIC8vIElmIHRoZSBzdGFydCB0YW5nZW50IGlzIG5vdCBjb2luY2lkZW50IHdpdGggKHgwLHkwKSwgbGluZSB0by5cbiAgICAgIGlmIChNYXRoLmFicyh0MDEgLSAxKSA+IGVwc2lsb24pIHtcbiAgICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHgxICsgdDAxICogeDAxKSArIFwiLFwiICsgKHkxICsgdDAxICogeTAxKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMCxcIiArICgrKHkwMSAqIHgyMCA+IHgwMSAqIHkyMCkpICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MSArIHQyMSAqIHgyMSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxICsgdDIxICogeTIxKTtcbiAgICB9XG4gIH0sXG4gIGFyYzogZnVuY3Rpb24oeCwgeSwgciwgYTAsIGExLCBjY3cpIHtcbiAgICB4ID0gK3gsIHkgPSAreSwgciA9ICtyLCBjY3cgPSAhIWNjdztcbiAgICB2YXIgZHggPSByICogTWF0aC5jb3MoYTApLFxuICAgICAgICBkeSA9IHIgKiBNYXRoLnNpbihhMCksXG4gICAgICAgIHgwID0geCArIGR4LFxuICAgICAgICB5MCA9IHkgKyBkeSxcbiAgICAgICAgY3cgPSAxIF4gY2N3LFxuICAgICAgICBkYSA9IGNjdyA/IGEwIC0gYTEgOiBhMSAtIGEwO1xuXG4gICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXG4gICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAvLyBJcyB0aGlzIHBhdGggZW1wdHk/IE1vdmUgdG8gKHgwLHkwKS5cbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuXyArPSBcIk1cIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgwLHkwKSBub3QgY29pbmNpZGVudCB3aXRoIHRoZSBwcmV2aW91cyBwb2ludD8gTGluZSB0byAoeDAseTApLlxuICAgIGVsc2UgaWYgKE1hdGguYWJzKHRoaXMuX3gxIC0geDApID4gZXBzaWxvbiB8fCBNYXRoLmFicyh0aGlzLl95MSAtIHkwKSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkxcIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBlbXB0eT8gV2XigJlyZSBkb25lLlxuICAgIGlmICghcikgcmV0dXJuO1xuXG4gICAgLy8gRG9lcyB0aGUgYW5nbGUgZ28gdGhlIHdyb25nIHdheT8gRmxpcCB0aGUgZGlyZWN0aW9uLlxuICAgIGlmIChkYSA8IDApIGRhID0gZGEgJSB0YXUgKyB0YXU7XG5cbiAgICAvLyBJcyB0aGlzIGEgY29tcGxldGUgY2lyY2xlPyBEcmF3IHR3byBhcmNzIHRvIGNvbXBsZXRlIHRoZSBjaXJjbGUuXG4gICAgaWYgKGRhID4gdGF1RXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAoeCAtIGR4KSArIFwiLFwiICsgKHkgLSBkeSkgKyBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geDApICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MCk7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgbm9uLWVtcHR5PyBEcmF3IGFuIGFyYyFcbiAgICBlbHNlIGlmIChkYSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLFwiICsgKCsoZGEgPj0gcGkpKSArIFwiLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHggKyByICogTWF0aC5jb3MoYTEpKSArIFwiLFwiICsgKHRoaXMuX3kxID0geSArIHIgKiBNYXRoLnNpbihhMSkpO1xuICAgIH1cbiAgfSxcbiAgcmVjdDogZnVuY3Rpb24oeCwgeSwgdywgaCkge1xuICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KSArIFwiaFwiICsgKCt3KSArIFwidlwiICsgKCtoKSArIFwiaFwiICsgKC13KSArIFwiWlwiO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuXztcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcGF0aDtcbiIsImV4cG9ydCB2YXIgcHJlZml4ID0gXCIkXCI7XG5cbmZ1bmN0aW9uIE1hcCgpIHt9XG5cbk1hcC5wcm90b3R5cGUgPSBtYXAucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTWFwLFxuICBoYXM6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiAocHJlZml4ICsga2V5KSBpbiB0aGlzO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiB0aGlzW3ByZWZpeCArIGtleV07XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIHRoaXNbcHJlZml4ICsga2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBwcm9wZXJ0eSA9IHByZWZpeCArIGtleTtcbiAgICByZXR1cm4gcHJvcGVydHkgaW4gdGhpcyAmJiBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBrZXlzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBrZXlzLnB1c2gocHJvcGVydHkuc2xpY2UoMSkpO1xuICAgIHJldHVybiBrZXlzO1xuICB9LFxuICB2YWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgdmFsdWVzLnB1c2godGhpc1twcm9wZXJ0eV0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH0sXG4gIGVudHJpZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGVudHJpZXMucHVzaCh7a2V5OiBwcm9wZXJ0eS5zbGljZSgxKSwgdmFsdWU6IHRoaXNbcHJvcGVydHldfSk7XG4gICAgcmV0dXJuIGVudHJpZXM7XG4gIH0sXG4gIHNpemU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaXplID0gMDtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgKytzaXplO1xuICAgIHJldHVybiBzaXplO1xuICB9LFxuICBlbXB0eTogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZWFjaDogZnVuY3Rpb24oZikge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBmKHRoaXNbcHJvcGVydHldLCBwcm9wZXJ0eS5zbGljZSgxKSwgdGhpcyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG1hcChvYmplY3QsIGYpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXA7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIE1hcCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkgeyBtYXAuc2V0KGtleSwgdmFsdWUpOyB9KTtcblxuICAvLyBJbmRleCBhcnJheSBieSBudW1lcmljIGluZGV4IG9yIHNwZWNpZmllZCBrZXkgZnVuY3Rpb24uXG4gIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBvYmplY3QubGVuZ3RoLFxuICAgICAgICBvO1xuXG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoaSwgb2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGYobyA9IG9iamVjdFtpXSwgaSwgb2JqZWN0KSwgbyk7XG4gIH1cblxuICAvLyBDb252ZXJ0IG9iamVjdCB0byBtYXAuXG4gIGVsc2UgaWYgKG9iamVjdCkgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWFwLnNldChrZXksIG9iamVjdFtrZXldKTtcblxuICByZXR1cm4gbWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXA7XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgbWFwLCBwcmVmaXh9IGZyb20gXCIuL21hcFwiO1xuXG5mdW5jdGlvbiBTZXQoKSB7fVxuXG52YXIgcHJvdG8gPSBtYXAucHJvdG90eXBlO1xuXG5TZXQucHJvdG90eXBlID0gc2V0LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNldCxcbiAgaGFzOiBwcm90by5oYXMsXG4gIGFkZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YWx1ZSArPSBcIlwiO1xuICAgIHRoaXNbcHJlZml4ICsgdmFsdWVdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogcHJvdG8ucmVtb3ZlLFxuICBjbGVhcjogcHJvdG8uY2xlYXIsXG4gIHZhbHVlczogcHJvdG8ua2V5cyxcbiAgc2l6ZTogcHJvdG8uc2l6ZSxcbiAgZW1wdHk6IHByb3RvLmVtcHR5LFxuICBlYWNoOiBwcm90by5lYWNoXG59O1xuXG5mdW5jdGlvbiBzZXQob2JqZWN0LCBmKSB7XG4gIHZhciBzZXQgPSBuZXcgU2V0O1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBTZXQpIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IHNldC5hZGQodmFsdWUpOyB9KTtcblxuICAvLyBPdGhlcndpc2UsIGFzc3VtZSBpdOKAmXMgYW4gYXJyYXkuXG4gIGVsc2UgaWYgKG9iamVjdCkge1xuICAgIHZhciBpID0gLTEsIG4gPSBvYmplY3QubGVuZ3RoO1xuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChmKG9iamVjdFtpXSwgaSwgb2JqZWN0KSk7XG4gIH1cblxuICByZXR1cm4gc2V0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZXQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXApIHtcbiAgdmFyIGVudHJpZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG1hcCkgZW50cmllcy5wdXNoKHtrZXk6IGtleSwgdmFsdWU6IG1hcFtrZXldfSk7XG4gIHJldHVybiBlbnRyaWVzO1xufVxuIiwidmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG5leHBvcnQgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG4iLCJpbXBvcnQge21heCwgcmFuZ2UsIHRpY2tTdGVwfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQge2JsdXJYLCBibHVyWX0gZnJvbSBcIi4vYmx1clwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgY29udG91cnMgZnJvbSBcIi4vY29udG91cnNcIjtcblxuZnVuY3Rpb24gZGVmYXVsdFgoZCkge1xuICByZXR1cm4gZFswXTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFkoZCkge1xuICByZXR1cm4gZFsxXTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFdlaWdodCgpIHtcbiAgcmV0dXJuIDE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgeCA9IGRlZmF1bHRYLFxuICAgICAgeSA9IGRlZmF1bHRZLFxuICAgICAgd2VpZ2h0ID0gZGVmYXVsdFdlaWdodCxcbiAgICAgIGR4ID0gOTYwLFxuICAgICAgZHkgPSA1MDAsXG4gICAgICByID0gMjAsIC8vIGJsdXIgcmFkaXVzXG4gICAgICBrID0gMiwgLy8gbG9nMihncmlkIGNlbGwgc2l6ZSlcbiAgICAgIG8gPSByICogMywgLy8gZ3JpZCBvZmZzZXQsIHRvIHBhZCBmb3IgYmx1clxuICAgICAgbiA9IChkeCArIG8gKiAyKSA+PiBrLCAvLyBncmlkIHdpZHRoXG4gICAgICBtID0gKGR5ICsgbyAqIDIpID4+IGssIC8vIGdyaWQgaGVpZ2h0XG4gICAgICB0aHJlc2hvbGQgPSBjb25zdGFudCgyMCk7XG5cbiAgZnVuY3Rpb24gZGVuc2l0eShkYXRhKSB7XG4gICAgdmFyIHZhbHVlczAgPSBuZXcgRmxvYXQzMkFycmF5KG4gKiBtKSxcbiAgICAgICAgdmFsdWVzMSA9IG5ldyBGbG9hdDMyQXJyYXkobiAqIG0pO1xuXG4gICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGQsIGksIGRhdGEpIHtcbiAgICAgIHZhciB4aSA9ICgreChkLCBpLCBkYXRhKSArIG8pID4+IGssXG4gICAgICAgICAgeWkgPSAoK3koZCwgaSwgZGF0YSkgKyBvKSA+PiBrLFxuICAgICAgICAgIHdpID0gK3dlaWdodChkLCBpLCBkYXRhKTtcbiAgICAgIGlmICh4aSA+PSAwICYmIHhpIDwgbiAmJiB5aSA+PSAwICYmIHlpIDwgbSkge1xuICAgICAgICB2YWx1ZXMwW3hpICsgeWkgKiBuXSArPSB3aTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFRPRE8gT3B0aW1pemUuXG4gICAgYmx1clgoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczB9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHIgPj4gayk7XG4gICAgYmx1clkoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczF9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHIgPj4gayk7XG4gICAgYmx1clgoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczB9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHIgPj4gayk7XG4gICAgYmx1clkoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczF9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHIgPj4gayk7XG4gICAgYmx1clgoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczB9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHIgPj4gayk7XG4gICAgYmx1clkoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczF9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHIgPj4gayk7XG5cbiAgICB2YXIgdHogPSB0aHJlc2hvbGQodmFsdWVzMCk7XG5cbiAgICAvLyBDb252ZXJ0IG51bWJlciBvZiB0aHJlc2hvbGRzIGludG8gdW5pZm9ybSB0aHJlc2hvbGRzLlxuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eikpIHtcbiAgICAgIHZhciBzdG9wID0gbWF4KHZhbHVlczApO1xuICAgICAgdHogPSB0aWNrU3RlcCgwLCBzdG9wLCB0eik7XG4gICAgICB0eiA9IHJhbmdlKDAsIE1hdGguZmxvb3Ioc3RvcCAvIHR6KSAqIHR6LCB0eik7XG4gICAgICB0ei5zaGlmdCgpO1xuICAgIH1cblxuICAgIHJldHVybiBjb250b3VycygpXG4gICAgICAgIC50aHJlc2hvbGRzKHR6KVxuICAgICAgICAuc2l6ZShbbiwgbV0pXG4gICAgICAodmFsdWVzMClcbiAgICAgICAgLm1hcCh0cmFuc2Zvcm0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtKGdlb21ldHJ5KSB7XG4gICAgZ2VvbWV0cnkudmFsdWUgKj0gTWF0aC5wb3coMiwgLTIgKiBrKTsgLy8gRGVuc2l0eSBpbiBwb2ludHMgcGVyIHNxdWFyZSBwaXhlbC5cbiAgICBnZW9tZXRyeS5jb29yZGluYXRlcy5mb3JFYWNoKHRyYW5zZm9ybVBvbHlnb24pO1xuICAgIHJldHVybiBnZW9tZXRyeTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybVBvbHlnb24oY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlcy5mb3JFYWNoKHRyYW5zZm9ybVJpbmcpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtUmluZyhjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzLmZvckVhY2godHJhbnNmb3JtUG9pbnQpO1xuICB9XG5cbiAgLy8gVE9ETyBPcHRpbWl6ZS5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtUG9pbnQoY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlc1swXSA9IGNvb3JkaW5hdGVzWzBdICogTWF0aC5wb3coMiwgaykgLSBvO1xuICAgIGNvb3JkaW5hdGVzWzFdID0gY29vcmRpbmF0ZXNbMV0gKiBNYXRoLnBvdygyLCBrKSAtIG87XG4gIH1cblxuICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgbyA9IHIgKiAzO1xuICAgIG4gPSAoZHggKyBvICogMikgPj4gaztcbiAgICBtID0gKGR5ICsgbyAqIDIpID4+IGs7XG4gICAgcmV0dXJuIGRlbnNpdHk7XG4gIH1cblxuICBkZW5zaXR5LnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBkZW5zaXR5KSA6IHg7XG4gIH07XG5cbiAgZGVuc2l0eS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgZGVuc2l0eSkgOiB5O1xuICB9O1xuXG4gIGRlbnNpdHkud2VpZ2h0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHdlaWdodCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBkZW5zaXR5KSA6IHdlaWdodDtcbiAgfTtcblxuICBkZW5zaXR5LnNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW2R4LCBkeV07XG4gICAgdmFyIF8wID0gTWF0aC5jZWlsKF9bMF0pLCBfMSA9IE1hdGguY2VpbChfWzFdKTtcbiAgICBpZiAoIShfMCA+PSAwKSAmJiAhKF8wID49IDApKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHNpemVcIik7XG4gICAgcmV0dXJuIGR4ID0gXzAsIGR5ID0gXzEsIHJlc2l6ZSgpO1xuICB9O1xuXG4gIGRlbnNpdHkuY2VsbFNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gMSA8PCBrO1xuICAgIGlmICghKChfID0gK18pID49IDEpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNlbGwgc2l6ZVwiKTtcbiAgICByZXR1cm4gayA9IE1hdGguZmxvb3IoTWF0aC5sb2coXykgLyBNYXRoLkxOMiksIHJlc2l6ZSgpO1xuICB9O1xuXG4gIGRlbnNpdHkudGhyZXNob2xkcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aHJlc2hvbGQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IEFycmF5LmlzQXJyYXkoXykgPyBjb25zdGFudChzbGljZS5jYWxsKF8pKSA6IGNvbnN0YW50KF8pLCBkZW5zaXR5KSA6IHRocmVzaG9sZDtcbiAgfTtcblxuICBkZW5zaXR5LmJhbmR3aWR0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBNYXRoLnNxcnQociAqIChyICsgMSkpO1xuICAgIGlmICghKChfID0gK18pID49IDApKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGJhbmR3aWR0aFwiKTtcbiAgICByZXR1cm4gciA9IE1hdGgucm91bmQoKE1hdGguc3FydCg0ICogXyAqIF8gKyAxKSAtIDEpIC8gMiksIHJlc2l6ZSgpO1xuICB9O1xuXG4gIHJldHVybiBkZW5zaXR5O1xufVxuIiwidmFyIEVPTCA9IHt9LFxuICAgIEVPRiA9IHt9LFxuICAgIFFVT1RFID0gMzQsXG4gICAgTkVXTElORSA9IDEwLFxuICAgIFJFVFVSTiA9IDEzO1xuXG5mdW5jdGlvbiBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucykge1xuICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwiZFwiLCBcInJldHVybiB7XCIgKyBjb2x1bW5zLm1hcChmdW5jdGlvbihuYW1lLCBpKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5hbWUpICsgXCI6IGRbXCIgKyBpICsgXCJdXCI7XG4gIH0pLmpvaW4oXCIsXCIpICsgXCJ9XCIpO1xufVxuXG5mdW5jdGlvbiBjdXN0b21Db252ZXJ0ZXIoY29sdW1ucywgZikge1xuICB2YXIgb2JqZWN0ID0gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpO1xuICByZXR1cm4gZnVuY3Rpb24ocm93LCBpKSB7XG4gICAgcmV0dXJuIGYob2JqZWN0KHJvdyksIGksIGNvbHVtbnMpO1xuICB9O1xufVxuXG4vLyBDb21wdXRlIHVuaXF1ZSBjb2x1bW5zIGluIG9yZGVyIG9mIGRpc2NvdmVyeS5cbmZ1bmN0aW9uIGluZmVyQ29sdW1ucyhyb3dzKSB7XG4gIHZhciBjb2x1bW5TZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAgY29sdW1ucyA9IFtdO1xuXG4gIHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcbiAgICBmb3IgKHZhciBjb2x1bW4gaW4gcm93KSB7XG4gICAgICBpZiAoIShjb2x1bW4gaW4gY29sdW1uU2V0KSkge1xuICAgICAgICBjb2x1bW5zLnB1c2goY29sdW1uU2V0W2NvbHVtbl0gPSBjb2x1bW4pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbHVtbnM7XG59XG5cbmZ1bmN0aW9uIHBhZCh2YWx1ZSwgd2lkdGgpIHtcbiAgdmFyIHMgPSB2YWx1ZSArIFwiXCIsIGxlbmd0aCA9IHMubGVuZ3RoO1xuICByZXR1cm4gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKDApICsgcyA6IHM7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXIoeWVhcikge1xuICByZXR1cm4geWVhciA8IDAgPyBcIi1cIiArIHBhZCgteWVhciwgNilcbiAgICA6IHllYXIgPiA5OTk5ID8gXCIrXCIgKyBwYWQoeWVhciwgNilcbiAgICA6IHBhZCh5ZWFyLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlKSB7XG4gIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSxcbiAgICAgIG1pbnV0ZXMgPSBkYXRlLmdldFVUQ01pbnV0ZXMoKSxcbiAgICAgIHNlY29uZHMgPSBkYXRlLmdldFVUQ1NlY29uZHMoKSxcbiAgICAgIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHJldHVybiBpc05hTihkYXRlKSA/IFwiSW52YWxpZCBEYXRlXCJcbiAgICAgIDogZm9ybWF0WWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCksIDQpICsgXCItXCIgKyBwYWQoZGF0ZS5nZXRVVENNb250aCgpICsgMSwgMikgKyBcIi1cIiArIHBhZChkYXRlLmdldFVUQ0RhdGUoKSwgMilcbiAgICAgICsgKG1pbGxpc2Vjb25kcyA/IFwiVFwiICsgcGFkKGhvdXJzLCAyKSArIFwiOlwiICsgcGFkKG1pbnV0ZXMsIDIpICsgXCI6XCIgKyBwYWQoc2Vjb25kcywgMikgKyBcIi5cIiArIHBhZChtaWxsaXNlY29uZHMsIDMpICsgXCJaXCJcbiAgICAgIDogc2Vjb25kcyA/IFwiVFwiICsgcGFkKGhvdXJzLCAyKSArIFwiOlwiICsgcGFkKG1pbnV0ZXMsIDIpICsgXCI6XCIgKyBwYWQoc2Vjb25kcywgMikgKyBcIlpcIlxuICAgICAgOiBtaW51dGVzIHx8IGhvdXJzID8gXCJUXCIgKyBwYWQoaG91cnMsIDIpICsgXCI6XCIgKyBwYWQobWludXRlcywgMikgKyBcIlpcIlxuICAgICAgOiBcIlwiKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVsaW1pdGVyKSB7XG4gIHZhciByZUZvcm1hdCA9IG5ldyBSZWdFeHAoXCJbXFxcIlwiICsgZGVsaW1pdGVyICsgXCJcXG5cXHJdXCIpLFxuICAgICAgREVMSU1JVEVSID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG5cbiAgZnVuY3Rpb24gcGFyc2UodGV4dCwgZikge1xuICAgIHZhciBjb252ZXJ0LCBjb2x1bW5zLCByb3dzID0gcGFyc2VSb3dzKHRleHQsIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgaWYgKGNvbnZlcnQpIHJldHVybiBjb252ZXJ0KHJvdywgaSAtIDEpO1xuICAgICAgY29sdW1ucyA9IHJvdywgY29udmVydCA9IGYgPyBjdXN0b21Db252ZXJ0ZXIocm93LCBmKSA6IG9iamVjdENvbnZlcnRlcihyb3cpO1xuICAgIH0pO1xuICAgIHJvd3MuY29sdW1ucyA9IGNvbHVtbnMgfHwgW107XG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVJvd3ModGV4dCwgZikge1xuICAgIHZhciByb3dzID0gW10sIC8vIG91dHB1dCByb3dzXG4gICAgICAgIE4gPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgSSA9IDAsIC8vIGN1cnJlbnQgY2hhcmFjdGVyIGluZGV4XG4gICAgICAgIG4gPSAwLCAvLyBjdXJyZW50IGxpbmUgbnVtYmVyXG4gICAgICAgIHQsIC8vIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgZW9mID0gTiA8PSAwLCAvLyBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPRj9cbiAgICAgICAgZW9sID0gZmFsc2U7IC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9MP1xuXG4gICAgLy8gU3RyaXAgdGhlIHRyYWlsaW5nIG5ld2xpbmUuXG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChOIC0gMSkgPT09IE5FV0xJTkUpIC0tTjtcbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gUkVUVVJOKSAtLU47XG5cbiAgICBmdW5jdGlvbiB0b2tlbigpIHtcbiAgICAgIGlmIChlb2YpIHJldHVybiBFT0Y7XG4gICAgICBpZiAoZW9sKSByZXR1cm4gZW9sID0gZmFsc2UsIEVPTDtcblxuICAgICAgLy8gVW5lc2NhcGUgcXVvdGVzLlxuICAgICAgdmFyIGksIGogPSBJLCBjO1xuICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChqKSA9PT0gUVVPVEUpIHtcbiAgICAgICAgd2hpbGUgKEkrKyA8IE4gJiYgdGV4dC5jaGFyQ29kZUF0KEkpICE9PSBRVU9URSB8fCB0ZXh0LmNoYXJDb2RlQXQoKytJKSA9PT0gUVVPVEUpO1xuICAgICAgICBpZiAoKGkgPSBJKSA+PSBOKSBlb2YgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmICgoYyA9IHRleHQuY2hhckNvZGVBdChJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqICsgMSwgaSAtIDEpLnJlcGxhY2UoL1wiXCIvZywgXCJcXFwiXCIpO1xuICAgICAgfVxuXG4gICAgICAvLyBGaW5kIG5leHQgZGVsaW1pdGVyIG9yIG5ld2xpbmUuXG4gICAgICB3aGlsZSAoSSA8IE4pIHtcbiAgICAgICAgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KGkgPSBJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICBlbHNlIGlmIChjICE9PSBERUxJTUlURVIpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqLCBpKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIGxhc3QgdG9rZW4gYmVmb3JlIEVPRi5cbiAgICAgIHJldHVybiBlb2YgPSB0cnVlLCB0ZXh0LnNsaWNlKGosIE4pO1xuICAgIH1cblxuICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgIHZhciByb3cgPSBbXTtcbiAgICAgIHdoaWxlICh0ICE9PSBFT0wgJiYgdCAhPT0gRU9GKSByb3cucHVzaCh0KSwgdCA9IHRva2VuKCk7XG4gICAgICBpZiAoZiAmJiAocm93ID0gZihyb3csIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwcmVmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpIHtcbiAgICByZXR1cm4gcm93cy5tYXAoZnVuY3Rpb24ocm93KSB7XG4gICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbY29sdW1uXSk7XG4gICAgICB9KS5qb2luKGRlbGltaXRlcik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXQocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIFtjb2x1bW5zLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpXS5jb25jYXQocHJlZm9ybWF0Qm9keShyb3dzLCBjb2x1bW5zKSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdEJvZHkocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIHByZWZvcm1hdEJvZHkocm93cywgY29sdW1ucykuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFJvd3Mocm93cykge1xuICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3cocm93KSB7XG4gICAgcmV0dXJuIHJvdy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiXG4gICAgICAgIDogdmFsdWUgaW5zdGFuY2VvZiBEYXRlID8gZm9ybWF0RGF0ZSh2YWx1ZSlcbiAgICAgICAgOiByZUZvcm1hdC50ZXN0KHZhbHVlICs9IFwiXCIpID8gXCJcXFwiXCIgKyB2YWx1ZS5yZXBsYWNlKC9cIi9nLCBcIlxcXCJcXFwiXCIpICsgXCJcXFwiXCJcbiAgICAgICAgOiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHBhcnNlUm93czogcGFyc2VSb3dzLFxuICAgIGZvcm1hdDogZm9ybWF0LFxuICAgIGZvcm1hdEJvZHk6IGZvcm1hdEJvZHksXG4gICAgZm9ybWF0Um93czogZm9ybWF0Um93c1xuICB9O1xufVxuIiwiaW1wb3J0IGRzdiBmcm9tIFwiLi9kc3ZcIjtcblxudmFyIGNzdiA9IGRzdihcIixcIik7XG5cbmV4cG9ydCB2YXIgY3N2UGFyc2UgPSBjc3YucGFyc2U7XG5leHBvcnQgdmFyIGNzdlBhcnNlUm93cyA9IGNzdi5wYXJzZVJvd3M7XG5leHBvcnQgdmFyIGNzdkZvcm1hdCA9IGNzdi5mb3JtYXQ7XG5leHBvcnQgdmFyIGNzdkZvcm1hdEJvZHkgPSBjc3YuZm9ybWF0Qm9keTtcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0Um93cyA9IGNzdi5mb3JtYXRSb3dzO1xuIiwiaW1wb3J0IGRzdiBmcm9tIFwiLi9kc3ZcIjtcblxudmFyIHRzdiA9IGRzdihcIlxcdFwiKTtcblxuZXhwb3J0IHZhciB0c3ZQYXJzZSA9IHRzdi5wYXJzZTtcbmV4cG9ydCB2YXIgdHN2UGFyc2VSb3dzID0gdHN2LnBhcnNlUm93cztcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0ID0gdHN2LmZvcm1hdDtcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0Qm9keSA9IHRzdi5mb3JtYXRCb2R5O1xuZXhwb3J0IHZhciB0c3ZGb3JtYXRSb3dzID0gdHN2LmZvcm1hdFJvd3M7XG4iLCJmdW5jdGlvbiByZXNwb25zZVRleHQocmVzcG9uc2UpIHtcbiAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1cyArIFwiIFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBmZXRjaChpbnB1dCwgaW5pdCkudGhlbihyZXNwb25zZVRleHQpO1xufVxuIiwiaW1wb3J0IHtjc3ZQYXJzZSwgZHN2Rm9ybWF0LCB0c3ZQYXJzZX0gZnJvbSBcImQzLWRzdlwiO1xuaW1wb3J0IHRleHQgZnJvbSBcIi4vdGV4dFwiO1xuXG5mdW5jdGlvbiBkc3ZQYXJzZShwYXJzZSkge1xuICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGluaXQsIHJvdykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBpbml0ID09PSBcImZ1bmN0aW9uXCIpIHJvdyA9IGluaXQsIGluaXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHRleHQoaW5wdXQsIGluaXQpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiBwYXJzZShyZXNwb25zZSwgcm93KTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZHN2KGRlbGltaXRlciwgaW5wdXQsIGluaXQsIHJvdykge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2YgaW5pdCA9PT0gXCJmdW5jdGlvblwiKSByb3cgPSBpbml0LCBpbml0ID0gdW5kZWZpbmVkO1xuICB2YXIgZm9ybWF0ID0gZHN2Rm9ybWF0KGRlbGltaXRlcik7XG4gIHJldHVybiB0ZXh0KGlucHV0LCBpbml0KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIGZvcm1hdC5wYXJzZShyZXNwb25zZSwgcm93KTtcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgY3N2ID0gZHN2UGFyc2UoY3N2UGFyc2UpO1xuZXhwb3J0IHZhciB0c3YgPSBkc3ZQYXJzZSh0c3ZQYXJzZSk7XG4iLCJmdW5jdGlvbiByZXNwb25zZUpzb24ocmVzcG9uc2UpIHtcbiAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1cyArIFwiIFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gIHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBmZXRjaChpbnB1dCwgaW5pdCkudGhlbihyZXNwb25zZUpzb24pO1xufVxuIiwiaW1wb3J0IHRleHQgZnJvbSBcIi4vdGV4dFwiO1xuXG5mdW5jdGlvbiBwYXJzZXIodHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGluaXQpICB7XG4gICAgcmV0dXJuIHRleHQoaW5wdXQsIGluaXQpLnRoZW4oZnVuY3Rpb24odGV4dCkge1xuICAgICAgcmV0dXJuIChuZXcgRE9NUGFyc2VyKS5wYXJzZUZyb21TdHJpbmcodGV4dCwgdHlwZSk7XG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlcihcImFwcGxpY2F0aW9uL3htbFwiKTtcblxuZXhwb3J0IHZhciBodG1sID0gcGFyc2VyKFwidGV4dC9odG1sXCIpO1xuXG5leHBvcnQgdmFyIHN2ZyA9IHBhcnNlcihcImltYWdlL3N2Zyt4bWxcIik7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkKSB7XG4gIHZhciB4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkKSxcbiAgICAgIHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpO1xuICByZXR1cm4gYWRkKHRoaXMuY292ZXIoeCwgeSksIHgsIHksIGQpO1xufVxuXG5mdW5jdGlvbiBhZGQodHJlZSwgeCwgeSwgZCkge1xuICBpZiAoaXNOYU4oeCkgfHwgaXNOYU4oeSkpIHJldHVybiB0cmVlOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICB2YXIgcGFyZW50LFxuICAgICAgbm9kZSA9IHRyZWUuX3Jvb3QsXG4gICAgICBsZWFmID0ge2RhdGE6IGR9LFxuICAgICAgeDAgPSB0cmVlLl94MCxcbiAgICAgIHkwID0gdHJlZS5feTAsXG4gICAgICB4MSA9IHRyZWUuX3gxLFxuICAgICAgeTEgPSB0cmVlLl95MSxcbiAgICAgIHhtLFxuICAgICAgeW0sXG4gICAgICB4cCxcbiAgICAgIHlwLFxuICAgICAgcmlnaHQsXG4gICAgICBib3R0b20sXG4gICAgICBpLFxuICAgICAgajtcblxuICAvLyBJZiB0aGUgdHJlZSBpcyBlbXB0eSwgaW5pdGlhbGl6ZSB0aGUgcm9vdCBhcyBhIGxlYWYuXG4gIGlmICghbm9kZSkgcmV0dXJuIHRyZWUuX3Jvb3QgPSBsZWFmLCB0cmVlO1xuXG4gIC8vIEZpbmQgdGhlIGV4aXN0aW5nIGxlYWYgZm9yIHRoZSBuZXcgcG9pbnQsIG9yIGFkZCBpdC5cbiAgd2hpbGUgKG5vZGUubGVuZ3RoKSB7XG4gICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xuICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gICAgaWYgKHBhcmVudCA9IG5vZGUsICEobm9kZSA9IG5vZGVbaSA9IGJvdHRvbSA8PCAxIHwgcmlnaHRdKSkgcmV0dXJuIHBhcmVudFtpXSA9IGxlYWYsIHRyZWU7XG4gIH1cblxuICAvLyBJcyB0aGUgbmV3IHBvaW50IGlzIGV4YWN0bHkgY29pbmNpZGVudCB3aXRoIHRoZSBleGlzdGluZyBwb2ludD9cbiAgeHAgPSArdHJlZS5feC5jYWxsKG51bGwsIG5vZGUuZGF0YSk7XG4gIHlwID0gK3RyZWUuX3kuY2FsbChudWxsLCBub2RlLmRhdGEpO1xuICBpZiAoeCA9PT0geHAgJiYgeSA9PT0geXApIHJldHVybiBsZWFmLm5leHQgPSBub2RlLCBwYXJlbnQgPyBwYXJlbnRbaV0gPSBsZWFmIDogdHJlZS5fcm9vdCA9IGxlYWYsIHRyZWU7XG5cbiAgLy8gT3RoZXJ3aXNlLCBzcGxpdCB0aGUgbGVhZiBub2RlIHVudGlsIHRoZSBvbGQgYW5kIG5ldyBwb2ludCBhcmUgc2VwYXJhdGVkLlxuICBkbyB7XG4gICAgcGFyZW50ID0gcGFyZW50ID8gcGFyZW50W2ldID0gbmV3IEFycmF5KDQpIDogdHJlZS5fcm9vdCA9IG5ldyBBcnJheSg0KTtcbiAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtOyBlbHNlIHgxID0geG07XG4gICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgfSB3aGlsZSAoKGkgPSBib3R0b20gPDwgMSB8IHJpZ2h0KSA9PT0gKGogPSAoeXAgPj0geW0pIDw8IDEgfCAoeHAgPj0geG0pKSk7XG4gIHJldHVybiBwYXJlbnRbal0gPSBub2RlLCBwYXJlbnRbaV0gPSBsZWFmLCB0cmVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkQWxsKGRhdGEpIHtcbiAgdmFyIGQsIGksIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgeHogPSBuZXcgQXJyYXkobiksXG4gICAgICB5eiA9IG5ldyBBcnJheShuKSxcbiAgICAgIHgwID0gSW5maW5pdHksXG4gICAgICB5MCA9IEluZmluaXR5LFxuICAgICAgeDEgPSAtSW5maW5pdHksXG4gICAgICB5MSA9IC1JbmZpbml0eTtcblxuICAvLyBDb21wdXRlIHRoZSBwb2ludHMgYW5kIHRoZWlyIGV4dGVudC5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgIGlmIChpc05hTih4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkID0gZGF0YVtpXSkpIHx8IGlzTmFOKHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpKSkgY29udGludWU7XG4gICAgeHpbaV0gPSB4O1xuICAgIHl6W2ldID0geTtcbiAgICBpZiAoeCA8IHgwKSB4MCA9IHg7XG4gICAgaWYgKHggPiB4MSkgeDEgPSB4O1xuICAgIGlmICh5IDwgeTApIHkwID0geTtcbiAgICBpZiAoeSA+IHkxKSB5MSA9IHk7XG4gIH1cblxuICAvLyBJZiB0aGVyZSB3ZXJlIG5vICh2YWxpZCkgcG9pbnRzLCBhYm9ydC5cbiAgaWYgKHgwID4geDEgfHwgeTAgPiB5MSkgcmV0dXJuIHRoaXM7XG5cbiAgLy8gRXhwYW5kIHRoZSB0cmVlIHRvIGNvdmVyIHRoZSBuZXcgcG9pbnRzLlxuICB0aGlzLmNvdmVyKHgwLCB5MCkuY292ZXIoeDEsIHkxKTtcblxuICAvLyBBZGQgdGhlIG5ldyBwb2ludHMuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBhZGQodGhpcywgeHpbaV0sIHl6W2ldLCBkYXRhW2ldKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgeSkge1xuICBpZiAoaXNOYU4oeCA9ICt4KSB8fCBpc05hTih5ID0gK3kpKSByZXR1cm4gdGhpczsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgdmFyIHgwID0gdGhpcy5feDAsXG4gICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgeDEgPSB0aGlzLl94MSxcbiAgICAgIHkxID0gdGhpcy5feTE7XG5cbiAgLy8gSWYgdGhlIHF1YWR0cmVlIGhhcyBubyBleHRlbnQsIGluaXRpYWxpemUgdGhlbS5cbiAgLy8gSW50ZWdlciBleHRlbnQgYXJlIG5lY2Vzc2FyeSBzbyB0aGF0IGlmIHdlIGxhdGVyIGRvdWJsZSB0aGUgZXh0ZW50LFxuICAvLyB0aGUgZXhpc3RpbmcgcXVhZHJhbnQgYm91bmRhcmllcyBkb27igJl0IGNoYW5nZSBkdWUgdG8gZmxvYXRpbmcgcG9pbnQgZXJyb3IhXG4gIGlmIChpc05hTih4MCkpIHtcbiAgICB4MSA9ICh4MCA9IE1hdGguZmxvb3IoeCkpICsgMTtcbiAgICB5MSA9ICh5MCA9IE1hdGguZmxvb3IoeSkpICsgMTtcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSwgZG91YmxlIHJlcGVhdGVkbHkgdG8gY292ZXIuXG4gIGVsc2Uge1xuICAgIHZhciB6ID0geDEgLSB4MCxcbiAgICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgaTtcblxuICAgIHdoaWxlICh4MCA+IHggfHwgeCA+PSB4MSB8fCB5MCA+IHkgfHwgeSA+PSB5MSkge1xuICAgICAgaSA9ICh5IDwgeTApIDw8IDEgfCAoeCA8IHgwKTtcbiAgICAgIHBhcmVudCA9IG5ldyBBcnJheSg0KSwgcGFyZW50W2ldID0gbm9kZSwgbm9kZSA9IHBhcmVudCwgeiAqPSAyO1xuICAgICAgc3dpdGNoIChpKSB7XG4gICAgICAgIGNhc2UgMDogeDEgPSB4MCArIHosIHkxID0geTAgKyB6OyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB4MCA9IHgxIC0geiwgeTEgPSB5MCArIHo7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHgxID0geDAgKyB6LCB5MCA9IHkxIC0gejsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogeDAgPSB4MSAtIHosIHkwID0geTEgLSB6OyBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcm9vdCAmJiB0aGlzLl9yb290Lmxlbmd0aCkgdGhpcy5fcm9vdCA9IG5vZGU7XG4gIH1cblxuICB0aGlzLl94MCA9IHgwO1xuICB0aGlzLl95MCA9IHkwO1xuICB0aGlzLl94MSA9IHgxO1xuICB0aGlzLl95MSA9IHkxO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHRoaXMubm9kZSA9IG5vZGU7XG4gIHRoaXMueDAgPSB4MDtcbiAgdGhpcy55MCA9IHkwO1xuICB0aGlzLngxID0geDE7XG4gIHRoaXMueTEgPSB5MTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0WChkKSB7XG4gIHJldHVybiBkWzBdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihfKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoaXMuX3ggPSBfLCB0aGlzKSA6IHRoaXMuX3g7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZGVmYXVsdFkoZCkge1xuICByZXR1cm4gZFsxXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oXykge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGlzLl95ID0gXywgdGhpcykgOiB0aGlzLl95O1xufVxuIiwiaW1wb3J0IHRyZWVfYWRkLCB7YWRkQWxsIGFzIHRyZWVfYWRkQWxsfSBmcm9tIFwiLi9hZGRcIjtcbmltcG9ydCB0cmVlX2NvdmVyIGZyb20gXCIuL2NvdmVyXCI7XG5pbXBvcnQgdHJlZV9kYXRhIGZyb20gXCIuL2RhdGFcIjtcbmltcG9ydCB0cmVlX2V4dGVudCBmcm9tIFwiLi9leHRlbnRcIjtcbmltcG9ydCB0cmVlX2ZpbmQgZnJvbSBcIi4vZmluZFwiO1xuaW1wb3J0IHRyZWVfcmVtb3ZlLCB7cmVtb3ZlQWxsIGFzIHRyZWVfcmVtb3ZlQWxsfSBmcm9tIFwiLi9yZW1vdmVcIjtcbmltcG9ydCB0cmVlX3Jvb3QgZnJvbSBcIi4vcm9vdFwiO1xuaW1wb3J0IHRyZWVfc2l6ZSBmcm9tIFwiLi9zaXplXCI7XG5pbXBvcnQgdHJlZV92aXNpdCBmcm9tIFwiLi92aXNpdFwiO1xuaW1wb3J0IHRyZWVfdmlzaXRBZnRlciBmcm9tIFwiLi92aXNpdEFmdGVyXCI7XG5pbXBvcnQgdHJlZV94LCB7ZGVmYXVsdFh9IGZyb20gXCIuL3hcIjtcbmltcG9ydCB0cmVlX3ksIHtkZWZhdWx0WX0gZnJvbSBcIi4veVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBxdWFkdHJlZShub2RlcywgeCwgeSkge1xuICB2YXIgdHJlZSA9IG5ldyBRdWFkdHJlZSh4ID09IG51bGwgPyBkZWZhdWx0WCA6IHgsIHkgPT0gbnVsbCA/IGRlZmF1bHRZIDogeSwgTmFOLCBOYU4sIE5hTiwgTmFOKTtcbiAgcmV0dXJuIG5vZGVzID09IG51bGwgPyB0cmVlIDogdHJlZS5hZGRBbGwobm9kZXMpO1xufVxuXG5mdW5jdGlvbiBRdWFkdHJlZSh4LCB5LCB4MCwgeTAsIHgxLCB5MSkge1xuICB0aGlzLl94ID0geDtcbiAgdGhpcy5feSA9IHk7XG4gIHRoaXMuX3gwID0geDA7XG4gIHRoaXMuX3kwID0geTA7XG4gIHRoaXMuX3gxID0geDE7XG4gIHRoaXMuX3kxID0geTE7XG4gIHRoaXMuX3Jvb3QgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGxlYWZfY29weShsZWFmKSB7XG4gIHZhciBjb3B5ID0ge2RhdGE6IGxlYWYuZGF0YX0sIG5leHQgPSBjb3B5O1xuICB3aGlsZSAobGVhZiA9IGxlYWYubmV4dCkgbmV4dCA9IG5leHQubmV4dCA9IHtkYXRhOiBsZWFmLmRhdGF9O1xuICByZXR1cm4gY29weTtcbn1cblxudmFyIHRyZWVQcm90byA9IHF1YWR0cmVlLnByb3RvdHlwZSA9IFF1YWR0cmVlLnByb3RvdHlwZTtcblxudHJlZVByb3RvLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNvcHkgPSBuZXcgUXVhZHRyZWUodGhpcy5feCwgdGhpcy5feSwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpLFxuICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICBub2RlcyxcbiAgICAgIGNoaWxkO1xuXG4gIGlmICghbm9kZSkgcmV0dXJuIGNvcHk7XG5cbiAgaWYgKCFub2RlLmxlbmd0aCkgcmV0dXJuIGNvcHkuX3Jvb3QgPSBsZWFmX2NvcHkobm9kZSksIGNvcHk7XG5cbiAgbm9kZXMgPSBbe3NvdXJjZTogbm9kZSwgdGFyZ2V0OiBjb3B5Ll9yb290ID0gbmV3IEFycmF5KDQpfV07XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgaWYgKGNoaWxkID0gbm9kZS5zb3VyY2VbaV0pIHtcbiAgICAgICAgaWYgKGNoaWxkLmxlbmd0aCkgbm9kZXMucHVzaCh7c291cmNlOiBjaGlsZCwgdGFyZ2V0OiBub2RlLnRhcmdldFtpXSA9IG5ldyBBcnJheSg0KX0pO1xuICAgICAgICBlbHNlIG5vZGUudGFyZ2V0W2ldID0gbGVhZl9jb3B5KGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29weTtcbn07XG5cbnRyZWVQcm90by5hZGQgPSB0cmVlX2FkZDtcbnRyZWVQcm90by5hZGRBbGwgPSB0cmVlX2FkZEFsbDtcbnRyZWVQcm90by5jb3ZlciA9IHRyZWVfY292ZXI7XG50cmVlUHJvdG8uZGF0YSA9IHRyZWVfZGF0YTtcbnRyZWVQcm90by5leHRlbnQgPSB0cmVlX2V4dGVudDtcbnRyZWVQcm90by5maW5kID0gdHJlZV9maW5kO1xudHJlZVByb3RvLnJlbW92ZSA9IHRyZWVfcmVtb3ZlO1xudHJlZVByb3RvLnJlbW92ZUFsbCA9IHRyZWVfcmVtb3ZlQWxsO1xudHJlZVByb3RvLnJvb3QgPSB0cmVlX3Jvb3Q7XG50cmVlUHJvdG8uc2l6ZSA9IHRyZWVfc2l6ZTtcbnRyZWVQcm90by52aXNpdCA9IHRyZWVfdmlzaXQ7XG50cmVlUHJvdG8udmlzaXRBZnRlciA9IHRyZWVfdmlzaXRBZnRlcjtcbnRyZWVQcm90by54ID0gdHJlZV94O1xudHJlZVByb3RvLnkgPSB0cmVlX3k7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGRhdGEgPSBbXTtcbiAgdGhpcy52aXNpdChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmxlbmd0aCkgZG8gZGF0YS5wdXNoKG5vZGUuZGF0YSk7IHdoaWxlIChub2RlID0gbm9kZS5uZXh0KVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihfKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuY292ZXIoK19bMF1bMF0sICtfWzBdWzFdKS5jb3ZlcigrX1sxXVswXSwgK19bMV1bMV0pXG4gICAgICA6IGlzTmFOKHRoaXMuX3gwKSA/IHVuZGVmaW5lZCA6IFtbdGhpcy5feDAsIHRoaXMuX3kwXSwgW3RoaXMuX3gxLCB0aGlzLl95MV1dO1xufVxuIiwiaW1wb3J0IFF1YWQgZnJvbSBcIi4vcXVhZFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgdmFyIGRhdGEsXG4gICAgICB4MCA9IHRoaXMuX3gwLFxuICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgIHgxLFxuICAgICAgeTEsXG4gICAgICB4MixcbiAgICAgIHkyLFxuICAgICAgeDMgPSB0aGlzLl94MSxcbiAgICAgIHkzID0gdGhpcy5feTEsXG4gICAgICBxdWFkcyA9IFtdLFxuICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICBxLFxuICAgICAgaTtcblxuICBpZiAobm9kZSkgcXVhZHMucHVzaChuZXcgUXVhZChub2RlLCB4MCwgeTAsIHgzLCB5MykpO1xuICBpZiAocmFkaXVzID09IG51bGwpIHJhZGl1cyA9IEluZmluaXR5O1xuICBlbHNlIHtcbiAgICB4MCA9IHggLSByYWRpdXMsIHkwID0geSAtIHJhZGl1cztcbiAgICB4MyA9IHggKyByYWRpdXMsIHkzID0geSArIHJhZGl1cztcbiAgICByYWRpdXMgKj0gcmFkaXVzO1xuICB9XG5cbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuXG4gICAgLy8gU3RvcCBzZWFyY2hpbmcgaWYgdGhpcyBxdWFkcmFudCBjYW7igJl0IGNvbnRhaW4gYSBjbG9zZXIgbm9kZS5cbiAgICBpZiAoIShub2RlID0gcS5ub2RlKVxuICAgICAgICB8fCAoeDEgPSBxLngwKSA+IHgzXG4gICAgICAgIHx8ICh5MSA9IHEueTApID4geTNcbiAgICAgICAgfHwgKHgyID0gcS54MSkgPCB4MFxuICAgICAgICB8fCAoeTIgPSBxLnkxKSA8IHkwKSBjb250aW51ZTtcblxuICAgIC8vIEJpc2VjdCB0aGUgY3VycmVudCBxdWFkcmFudC5cbiAgICBpZiAobm9kZS5sZW5ndGgpIHtcbiAgICAgIHZhciB4bSA9ICh4MSArIHgyKSAvIDIsXG4gICAgICAgICAgeW0gPSAoeTEgKyB5MikgLyAyO1xuXG4gICAgICBxdWFkcy5wdXNoKFxuICAgICAgICBuZXcgUXVhZChub2RlWzNdLCB4bSwgeW0sIHgyLCB5MiksXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbMl0sIHgxLCB5bSwgeG0sIHkyKSxcbiAgICAgICAgbmV3IFF1YWQobm9kZVsxXSwgeG0sIHkxLCB4MiwgeW0pLFxuICAgICAgICBuZXcgUXVhZChub2RlWzBdLCB4MSwgeTEsIHhtLCB5bSlcbiAgICAgICk7XG5cbiAgICAgIC8vIFZpc2l0IHRoZSBjbG9zZXN0IHF1YWRyYW50IGZpcnN0LlxuICAgICAgaWYgKGkgPSAoeSA+PSB5bSkgPDwgMSB8ICh4ID49IHhtKSkge1xuICAgICAgICBxID0gcXVhZHNbcXVhZHMubGVuZ3RoIC0gMV07XG4gICAgICAgIHF1YWRzW3F1YWRzLmxlbmd0aCAtIDFdID0gcXVhZHNbcXVhZHMubGVuZ3RoIC0gMSAtIGldO1xuICAgICAgICBxdWFkc1txdWFkcy5sZW5ndGggLSAxIC0gaV0gPSBxO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFZpc2l0IHRoaXMgcG9pbnQuIChWaXNpdGluZyBjb2luY2lkZW50IHBvaW50cyBpc27igJl0IG5lY2Vzc2FyeSEpXG4gICAgZWxzZSB7XG4gICAgICB2YXIgZHggPSB4IC0gK3RoaXMuX3guY2FsbChudWxsLCBub2RlLmRhdGEpLFxuICAgICAgICAgIGR5ID0geSAtICt0aGlzLl95LmNhbGwobnVsbCwgbm9kZS5kYXRhKSxcbiAgICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgaWYgKGQyIDwgcmFkaXVzKSB7XG4gICAgICAgIHZhciBkID0gTWF0aC5zcXJ0KHJhZGl1cyA9IGQyKTtcbiAgICAgICAgeDAgPSB4IC0gZCwgeTAgPSB5IC0gZDtcbiAgICAgICAgeDMgPSB4ICsgZCwgeTMgPSB5ICsgZDtcbiAgICAgICAgZGF0YSA9IG5vZGUuZGF0YTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGQpIHtcbiAgaWYgKGlzTmFOKHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQpKSB8fCBpc05hTih5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKSkpIHJldHVybiB0aGlzOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICB2YXIgcGFyZW50LFxuICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICByZXRhaW5lcixcbiAgICAgIHByZXZpb3VzLFxuICAgICAgbmV4dCxcbiAgICAgIHgwID0gdGhpcy5feDAsXG4gICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgeDEgPSB0aGlzLl94MSxcbiAgICAgIHkxID0gdGhpcy5feTEsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHhtLFxuICAgICAgeW0sXG4gICAgICByaWdodCxcbiAgICAgIGJvdHRvbSxcbiAgICAgIGksXG4gICAgICBqO1xuXG4gIC8vIElmIHRoZSB0cmVlIGlzIGVtcHR5LCBpbml0aWFsaXplIHRoZSByb290IGFzIGEgbGVhZi5cbiAgaWYgKCFub2RlKSByZXR1cm4gdGhpcztcblxuICAvLyBGaW5kIHRoZSBsZWFmIG5vZGUgZm9yIHRoZSBwb2ludC5cbiAgLy8gV2hpbGUgZGVzY2VuZGluZywgYWxzbyByZXRhaW4gdGhlIGRlZXBlc3QgcGFyZW50IHdpdGggYSBub24tcmVtb3ZlZCBzaWJsaW5nLlxuICBpZiAobm9kZS5sZW5ndGgpIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xuICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gICAgaWYgKCEocGFyZW50ID0gbm9kZSwgbm9kZSA9IG5vZGVbaSA9IGJvdHRvbSA8PCAxIHwgcmlnaHRdKSkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKCFub2RlLmxlbmd0aCkgYnJlYWs7XG4gICAgaWYgKHBhcmVudFsoaSArIDEpICYgM10gfHwgcGFyZW50WyhpICsgMikgJiAzXSB8fCBwYXJlbnRbKGkgKyAzKSAmIDNdKSByZXRhaW5lciA9IHBhcmVudCwgaiA9IGk7XG4gIH1cblxuICAvLyBGaW5kIHRoZSBwb2ludCB0byByZW1vdmUuXG4gIHdoaWxlIChub2RlLmRhdGEgIT09IGQpIGlmICghKHByZXZpb3VzID0gbm9kZSwgbm9kZSA9IG5vZGUubmV4dCkpIHJldHVybiB0aGlzO1xuICBpZiAobmV4dCA9IG5vZGUubmV4dCkgZGVsZXRlIG5vZGUubmV4dDtcblxuICAvLyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgY29pbmNpZGVudCBwb2ludHMsIHJlbW92ZSBqdXN0IHRoZSBwb2ludC5cbiAgaWYgKHByZXZpb3VzKSByZXR1cm4gKG5leHQgPyBwcmV2aW91cy5uZXh0ID0gbmV4dCA6IGRlbGV0ZSBwcmV2aW91cy5uZXh0KSwgdGhpcztcblxuICAvLyBJZiB0aGlzIGlzIHRoZSByb290IHBvaW50LCByZW1vdmUgaXQuXG4gIGlmICghcGFyZW50KSByZXR1cm4gdGhpcy5fcm9vdCA9IG5leHQsIHRoaXM7XG5cbiAgLy8gUmVtb3ZlIHRoaXMgbGVhZi5cbiAgbmV4dCA/IHBhcmVudFtpXSA9IG5leHQgOiBkZWxldGUgcGFyZW50W2ldO1xuXG4gIC8vIElmIHRoZSBwYXJlbnQgbm93IGNvbnRhaW5zIGV4YWN0bHkgb25lIGxlYWYsIGNvbGxhcHNlIHN1cGVyZmx1b3VzIHBhcmVudHMuXG4gIGlmICgobm9kZSA9IHBhcmVudFswXSB8fCBwYXJlbnRbMV0gfHwgcGFyZW50WzJdIHx8IHBhcmVudFszXSlcbiAgICAgICYmIG5vZGUgPT09IChwYXJlbnRbM10gfHwgcGFyZW50WzJdIHx8IHBhcmVudFsxXSB8fCBwYXJlbnRbMF0pXG4gICAgICAmJiAhbm9kZS5sZW5ndGgpIHtcbiAgICBpZiAocmV0YWluZXIpIHJldGFpbmVyW2pdID0gbm9kZTtcbiAgICBlbHNlIHRoaXMuX3Jvb3QgPSBub2RlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVBbGwoZGF0YSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGRhdGEubGVuZ3RoOyBpIDwgbjsgKytpKSB0aGlzLnJlbW92ZShkYXRhW2ldKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX3Jvb3Q7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSAwO1xuICB0aGlzLnZpc2l0KGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUubGVuZ3RoKSBkbyArK3NpemU7IHdoaWxlIChub2RlID0gbm9kZS5uZXh0KVxuICB9KTtcbiAgcmV0dXJuIHNpemU7XG59XG4iLCJpbXBvcnQgUXVhZCBmcm9tIFwiLi9xdWFkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBxdWFkcyA9IFtdLCBxLCBub2RlID0gdGhpcy5fcm9vdCwgY2hpbGQsIHgwLCB5MCwgeDEsIHkxO1xuICBpZiAobm9kZSkgcXVhZHMucHVzaChuZXcgUXVhZChub2RlLCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSkpO1xuICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG4gICAgaWYgKCFjYWxsYmFjayhub2RlID0gcS5ub2RlLCB4MCA9IHEueDAsIHkwID0gcS55MCwgeDEgPSBxLngxLCB5MSA9IHEueTEpICYmIG5vZGUubGVuZ3RoKSB7XG4gICAgICB2YXIgeG0gPSAoeDAgKyB4MSkgLyAyLCB5bSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzNdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeW0sIHgxLCB5MSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsyXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHltLCB4bSwgeTEpKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMV0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5MCwgeDEsIHltKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzBdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeTAsIHhtLCB5bSkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBRdWFkIGZyb20gXCIuL3F1YWRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIHF1YWRzID0gW10sIG5leHQgPSBbXSwgcTtcbiAgaWYgKHRoaXMuX3Jvb3QpIHF1YWRzLnB1c2gobmV3IFF1YWQodGhpcy5fcm9vdCwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpKTtcbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuICAgIHZhciBub2RlID0gcS5ub2RlO1xuICAgIGlmIChub2RlLmxlbmd0aCkge1xuICAgICAgdmFyIGNoaWxkLCB4MCA9IHEueDAsIHkwID0gcS55MCwgeDEgPSBxLngxLCB5MSA9IHEueTEsIHhtID0gKHgwICsgeDEpIC8gMiwgeW0gPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVswXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHkwLCB4bSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMV0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5MCwgeDEsIHltKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVszXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHltLCB4MSwgeTEpKTtcbiAgICB9XG4gICAgbmV4dC5wdXNoKHEpO1xuICB9XG4gIHdoaWxlIChxID0gbmV4dC5wb3AoKSkge1xuICAgIGNhbGxiYWNrKHEubm9kZSwgcS54MCwgcS55MCwgcS54MSwgcS55MSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7bWFwfSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHt0aW1lcn0gZnJvbSBcImQzLXRpbWVyXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB4KGQpIHtcbiAgcmV0dXJuIGQueDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkoZCkge1xuICByZXR1cm4gZC55O1xufVxuXG52YXIgaW5pdGlhbFJhZGl1cyA9IDEwLFxuICAgIGluaXRpYWxBbmdsZSA9IE1hdGguUEkgKiAoMyAtIE1hdGguc3FydCg1KSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGVzKSB7XG4gIHZhciBzaW11bGF0aW9uLFxuICAgICAgYWxwaGEgPSAxLFxuICAgICAgYWxwaGFNaW4gPSAwLjAwMSxcbiAgICAgIGFscGhhRGVjYXkgPSAxIC0gTWF0aC5wb3coYWxwaGFNaW4sIDEgLyAzMDApLFxuICAgICAgYWxwaGFUYXJnZXQgPSAwLFxuICAgICAgdmVsb2NpdHlEZWNheSA9IDAuNixcbiAgICAgIGZvcmNlcyA9IG1hcCgpLFxuICAgICAgc3RlcHBlciA9IHRpbWVyKHN0ZXApLFxuICAgICAgZXZlbnQgPSBkaXNwYXRjaChcInRpY2tcIiwgXCJlbmRcIik7XG5cbiAgaWYgKG5vZGVzID09IG51bGwpIG5vZGVzID0gW107XG5cbiAgZnVuY3Rpb24gc3RlcCgpIHtcbiAgICB0aWNrKCk7XG4gICAgZXZlbnQuY2FsbChcInRpY2tcIiwgc2ltdWxhdGlvbik7XG4gICAgaWYgKGFscGhhIDwgYWxwaGFNaW4pIHtcbiAgICAgIHN0ZXBwZXIuc3RvcCgpO1xuICAgICAgZXZlbnQuY2FsbChcImVuZFwiLCBzaW11bGF0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKGl0ZXJhdGlvbnMpIHtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTtcblxuICAgIGlmIChpdGVyYXRpb25zID09PSB1bmRlZmluZWQpIGl0ZXJhdGlvbnMgPSAxO1xuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBpdGVyYXRpb25zOyArK2spIHtcbiAgICAgIGFscGhhICs9IChhbHBoYVRhcmdldCAtIGFscGhhKSAqIGFscGhhRGVjYXk7XG5cbiAgICAgIGZvcmNlcy5lYWNoKGZ1bmN0aW9uIChmb3JjZSkge1xuICAgICAgICBmb3JjZShhbHBoYSk7XG4gICAgICB9KTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlLmZ4ID09IG51bGwpIG5vZGUueCArPSBub2RlLnZ4ICo9IHZlbG9jaXR5RGVjYXk7XG4gICAgICAgIGVsc2Ugbm9kZS54ID0gbm9kZS5meCwgbm9kZS52eCA9IDA7XG4gICAgICAgIGlmIChub2RlLmZ5ID09IG51bGwpIG5vZGUueSArPSBub2RlLnZ5ICo9IHZlbG9jaXR5RGVjYXk7XG4gICAgICAgIGVsc2Ugbm9kZS55ID0gbm9kZS5meSwgbm9kZS52eSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpbXVsYXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplTm9kZXMoKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS5pbmRleCA9IGk7XG4gICAgICBpZiAobm9kZS5meCAhPSBudWxsKSBub2RlLnggPSBub2RlLmZ4O1xuICAgICAgaWYgKG5vZGUuZnkgIT0gbnVsbCkgbm9kZS55ID0gbm9kZS5meTtcbiAgICAgIGlmIChpc05hTihub2RlLngpIHx8IGlzTmFOKG5vZGUueSkpIHtcbiAgICAgICAgdmFyIHJhZGl1cyA9IGluaXRpYWxSYWRpdXMgKiBNYXRoLnNxcnQoaSksIGFuZ2xlID0gaSAqIGluaXRpYWxBbmdsZTtcbiAgICAgICAgbm9kZS54ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBub2RlLnkgPSByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNOYU4obm9kZS52eCkgfHwgaXNOYU4obm9kZS52eSkpIHtcbiAgICAgICAgbm9kZS52eCA9IG5vZGUudnkgPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVGb3JjZShmb3JjZSkge1xuICAgIGlmIChmb3JjZS5pbml0aWFsaXplKSBmb3JjZS5pbml0aWFsaXplKG5vZGVzKTtcbiAgICByZXR1cm4gZm9yY2U7XG4gIH1cblxuICBpbml0aWFsaXplTm9kZXMoKTtcblxuICByZXR1cm4gc2ltdWxhdGlvbiA9IHtcbiAgICB0aWNrOiB0aWNrLFxuXG4gICAgcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3RlcHBlci5yZXN0YXJ0KHN0ZXApLCBzaW11bGF0aW9uO1xuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdGVwcGVyLnN0b3AoKSwgc2ltdWxhdGlvbjtcbiAgICB9LFxuXG4gICAgbm9kZXM6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVzID0gXywgaW5pdGlhbGl6ZU5vZGVzKCksIGZvcmNlcy5lYWNoKGluaXRpYWxpemVGb3JjZSksIHNpbXVsYXRpb24pIDogbm9kZXM7XG4gICAgfSxcblxuICAgIGFscGhhOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYSA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhO1xuICAgIH0sXG5cbiAgICBhbHBoYU1pbjogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFNaW4gPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYU1pbjtcbiAgICB9LFxuXG4gICAgYWxwaGFEZWNheTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFEZWNheSA9ICtfLCBzaW11bGF0aW9uKSA6ICthbHBoYURlY2F5O1xuICAgIH0sXG5cbiAgICBhbHBoYVRhcmdldDogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFUYXJnZXQgPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYVRhcmdldDtcbiAgICB9LFxuXG4gICAgdmVsb2NpdHlEZWNheTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmVsb2NpdHlEZWNheSA9IDEgLSBfLCBzaW11bGF0aW9uKSA6IDEgLSB2ZWxvY2l0eURlY2F5O1xuICAgIH0sXG5cbiAgICBmb3JjZTogZnVuY3Rpb24obmFtZSwgXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gKChfID09IG51bGwgPyBmb3JjZXMucmVtb3ZlKG5hbWUpIDogZm9yY2VzLnNldChuYW1lLCBpbml0aWFsaXplRm9yY2UoXykpKSwgc2ltdWxhdGlvbikgOiBmb3JjZXMuZ2V0KG5hbWUpO1xuICAgIH0sXG5cbiAgICBmaW5kOiBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIGR4LFxuICAgICAgICAgIGR5LFxuICAgICAgICAgIGQyLFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgY2xvc2VzdDtcblxuICAgICAgaWYgKHJhZGl1cyA9PSBudWxsKSByYWRpdXMgPSBJbmZpbml0eTtcbiAgICAgIGVsc2UgcmFkaXVzICo9IHJhZGl1cztcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGR4ID0geCAtIG5vZGUueDtcbiAgICAgICAgZHkgPSB5IC0gbm9kZS55O1xuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICBpZiAoZDIgPCByYWRpdXMpIGNsb3Nlc3QgPSBub2RlLCByYWRpdXMgPSBkMjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb3Nlc3Q7XG4gICAgfSxcblxuICAgIG9uOiBmdW5jdGlvbihuYW1lLCBfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAoZXZlbnQub24obmFtZSwgXyksIHNpbXVsYXRpb24pIDogZXZlbnQub24obmFtZSk7XG4gICAgfVxuICB9O1xufVxuIiwiLy8gQ29tcHV0ZXMgdGhlIGRlY2ltYWwgY29lZmZpY2llbnQgYW5kIGV4cG9uZW50IG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIHggd2l0aFxuLy8gc2lnbmlmaWNhbnQgZGlnaXRzIHAsIHdoZXJlIHggaXMgcG9zaXRpdmUgYW5kIHAgaXMgaW4gWzEsIDIxXSBvciB1bmRlZmluZWQuXG4vLyBGb3IgZXhhbXBsZSwgZm9ybWF0RGVjaW1hbCgxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgaWYgKChpID0gKHggPSBwID8geC50b0V4cG9uZW50aWFsKHAgLSAxKSA6IHgudG9FeHBvbmVudGlhbCgpKS5pbmRleE9mKFwiZVwiKSkgPCAwKSByZXR1cm4gbnVsbDsgLy8gTmFOLCDCsUluZmluaXR5XG4gIHZhciBpLCBjb2VmZmljaWVudCA9IHguc2xpY2UoMCwgaSk7XG5cbiAgLy8gVGhlIHN0cmluZyByZXR1cm5lZCBieSB0b0V4cG9uZW50aWFsIGVpdGhlciBoYXMgdGhlIGZvcm0gXFxkXFwuXFxkK2VbLStdXFxkK1xuICAvLyAoZS5nLiwgMS4yZSszKSBvciB0aGUgZm9ybSBcXGRlWy0rXVxcZCsgKGUuZy4sIDFlKzMpLlxuICByZXR1cm4gW1xuICAgIGNvZWZmaWNpZW50Lmxlbmd0aCA+IDEgPyBjb2VmZmljaWVudFswXSArIGNvZWZmaWNpZW50LnNsaWNlKDIpIDogY29lZmZpY2llbnQsXG4gICAgK3guc2xpY2UoaSArIDEpXG4gIF07XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsKE1hdGguYWJzKHgpKSwgeCA/IHhbMV0gOiBOYU47XG59XG4iLCIvLyBbW2ZpbGxdYWxpZ25dW3NpZ25dW3N5bWJvbF1bMF1bd2lkdGhdWyxdWy5wcmVjaXNpb25dW35dW3R5cGVdXG52YXIgcmUgPSAvXig/OiguKT8oWzw+PV5dKSk/KFsrXFwtKCBdKT8oWyQjXSk/KDApPyhcXGQrKT8oLCk/KFxcLlxcZCspPyh+KT8oW2EteiVdKT8kL2k7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgaWYgKCEobWF0Y2ggPSByZS5leGVjKHNwZWNpZmllcikpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZvcm1hdDogXCIgKyBzcGVjaWZpZXIpO1xuICB2YXIgbWF0Y2g7XG4gIHJldHVybiBuZXcgRm9ybWF0U3BlY2lmaWVyKHtcbiAgICBmaWxsOiBtYXRjaFsxXSxcbiAgICBhbGlnbjogbWF0Y2hbMl0sXG4gICAgc2lnbjogbWF0Y2hbM10sXG4gICAgc3ltYm9sOiBtYXRjaFs0XSxcbiAgICB6ZXJvOiBtYXRjaFs1XSxcbiAgICB3aWR0aDogbWF0Y2hbNl0sXG4gICAgY29tbWE6IG1hdGNoWzddLFxuICAgIHByZWNpc2lvbjogbWF0Y2hbOF0gJiYgbWF0Y2hbOF0uc2xpY2UoMSksXG4gICAgdHJpbTogbWF0Y2hbOV0sXG4gICAgdHlwZTogbWF0Y2hbMTBdXG4gIH0pO1xufVxuXG5mb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlID0gRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZTsgLy8gaW5zdGFuY2VvZlxuXG5leHBvcnQgZnVuY3Rpb24gRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICB0aGlzLmZpbGwgPSBzcGVjaWZpZXIuZmlsbCA9PT0gdW5kZWZpbmVkID8gXCIgXCIgOiBzcGVjaWZpZXIuZmlsbCArIFwiXCI7XG4gIHRoaXMuYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24gPT09IHVuZGVmaW5lZCA/IFwiPlwiIDogc3BlY2lmaWVyLmFsaWduICsgXCJcIjtcbiAgdGhpcy5zaWduID0gc3BlY2lmaWVyLnNpZ24gPT09IHVuZGVmaW5lZCA/IFwiLVwiIDogc3BlY2lmaWVyLnNpZ24gKyBcIlwiO1xuICB0aGlzLnN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBzcGVjaWZpZXIuc3ltYm9sICsgXCJcIjtcbiAgdGhpcy56ZXJvID0gISFzcGVjaWZpZXIuemVybztcbiAgdGhpcy53aWR0aCA9IHNwZWNpZmllci53aWR0aCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogK3NwZWNpZmllci53aWR0aDtcbiAgdGhpcy5jb21tYSA9ICEhc3BlY2lmaWVyLmNvbW1hO1xuICB0aGlzLnByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICtzcGVjaWZpZXIucHJlY2lzaW9uO1xuICB0aGlzLnRyaW0gPSAhIXNwZWNpZmllci50cmltO1xuICB0aGlzLnR5cGUgPSBzcGVjaWZpZXIudHlwZSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHNwZWNpZmllci50eXBlICsgXCJcIjtcbn1cblxuRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5maWxsXG4gICAgICArIHRoaXMuYWxpZ25cbiAgICAgICsgdGhpcy5zaWduXG4gICAgICArIHRoaXMuc3ltYm9sXG4gICAgICArICh0aGlzLnplcm8gPyBcIjBcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLndpZHRoID09PSB1bmRlZmluZWQgPyBcIlwiIDogTWF0aC5tYXgoMSwgdGhpcy53aWR0aCB8IDApKVxuICAgICAgKyAodGhpcy5jb21tYSA/IFwiLFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMucHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyBcIlwiIDogXCIuXCIgKyBNYXRoLm1heCgwLCB0aGlzLnByZWNpc2lvbiB8IDApKVxuICAgICAgKyAodGhpcy50cmltID8gXCJ+XCIgOiBcIlwiKVxuICAgICAgKyB0aGlzLnR5cGU7XG59O1xuIiwiLy8gVHJpbXMgaW5zaWduaWZpY2FudCB6ZXJvcywgZS5nLiwgcmVwbGFjZXMgMS4yMDAwayB3aXRoIDEuMmsuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzKSB7XG4gIG91dDogZm9yICh2YXIgbiA9IHMubGVuZ3RoLCBpID0gMSwgaTAgPSAtMSwgaTE7IGkgPCBuOyArK2kpIHtcbiAgICBzd2l0Y2ggKHNbaV0pIHtcbiAgICAgIGNhc2UgXCIuXCI6IGkwID0gaTEgPSBpOyBicmVhaztcbiAgICAgIGNhc2UgXCIwXCI6IGlmIChpMCA9PT0gMCkgaTAgPSBpOyBpMSA9IGk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogaWYgKGkwID4gMCkgeyBpZiAoIStzW2ldKSBicmVhayBvdXQ7IGkwID0gMDsgfSBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkwID4gMCA/IHMuc2xpY2UoMCwgaTApICsgcy5zbGljZShpMSArIDEpIDogcztcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWwuanNcIjtcblxuZXhwb3J0IHZhciBwcmVmaXhFeHBvbmVudDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWwoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdLFxuICAgICAgaSA9IGV4cG9uZW50IC0gKHByZWZpeEV4cG9uZW50ID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQgLyAzKSkpICogMykgKyAxLFxuICAgICAgbiA9IGNvZWZmaWNpZW50Lmxlbmd0aDtcbiAgcmV0dXJuIGkgPT09IG4gPyBjb2VmZmljaWVudFxuICAgICAgOiBpID4gbiA/IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGkgLSBuICsgMSkuam9pbihcIjBcIilcbiAgICAgIDogaSA+IDAgPyBjb2VmZmljaWVudC5zbGljZSgwLCBpKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoaSlcbiAgICAgIDogXCIwLlwiICsgbmV3IEFycmF5KDEgLSBpKS5qb2luKFwiMFwiKSArIGZvcm1hdERlY2ltYWwoeCwgTWF0aC5tYXgoMCwgcCArIGkgLSAxKSlbMF07IC8vIGxlc3MgdGhhbiAxeSFcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlLmpzXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIGZvcm1hdDtcbmV4cG9ydCB2YXIgZm9ybWF0UHJlZml4O1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGVjaW1hbDogXCIuXCIsXG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdLFxuICBtaW51czogXCItXCJcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICBmb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICBmb3JtYXRQcmVmaXggPSBsb2NhbGUuZm9ybWF0UHJlZml4O1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV07XG4gIHJldHVybiBleHBvbmVudCA8IDAgPyBcIjAuXCIgKyBuZXcgQXJyYXkoLWV4cG9uZW50KS5qb2luKFwiMFwiKSArIGNvZWZmaWNpZW50XG4gICAgICA6IGNvZWZmaWNpZW50Lmxlbmd0aCA+IGV4cG9uZW50ICsgMSA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGV4cG9uZW50ICsgMSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGV4cG9uZW50ICsgMSlcbiAgICAgIDogY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoZXhwb25lbnQgLSBjb2VmZmljaWVudC5sZW5ndGggKyAyKS5qb2luKFwiMFwiKTtcbn1cbiIsImltcG9ydCBmb3JtYXRQcmVmaXhBdXRvIGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG8uanNcIjtcbmltcG9ydCBmb3JtYXRSb3VuZGVkIGZyb20gXCIuL2Zvcm1hdFJvdW5kZWQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBcIiVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gKHggKiAxMDApLnRvRml4ZWQocCk7IH0sXG4gIFwiYlwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpOyB9LFxuICBcImNcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4geCArIFwiXCI7IH0sXG4gIFwiZFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDEwKTsgfSxcbiAgXCJlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9FeHBvbmVudGlhbChwKTsgfSxcbiAgXCJmXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9GaXhlZChwKTsgfSxcbiAgXCJnXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9QcmVjaXNpb24ocCk7IH0sXG4gIFwib1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDgpOyB9LFxuICBcInBcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gZm9ybWF0Um91bmRlZCh4ICogMTAwLCBwKTsgfSxcbiAgXCJyXCI6IGZvcm1hdFJvdW5kZWQsXG4gIFwic1wiOiBmb3JtYXRQcmVmaXhBdXRvLFxuICBcIlhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgfSxcbiAgXCJ4XCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpOyB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuaW1wb3J0IGZvcm1hdEdyb3VwIGZyb20gXCIuL2Zvcm1hdEdyb3VwLmpzXCI7XG5pbXBvcnQgZm9ybWF0TnVtZXJhbHMgZnJvbSBcIi4vZm9ybWF0TnVtZXJhbHMuanNcIjtcbmltcG9ydCBmb3JtYXRTcGVjaWZpZXIgZnJvbSBcIi4vZm9ybWF0U3BlY2lmaWVyLmpzXCI7XG5pbXBvcnQgZm9ybWF0VHJpbSBmcm9tIFwiLi9mb3JtYXRUcmltLmpzXCI7XG5pbXBvcnQgZm9ybWF0VHlwZXMgZnJvbSBcIi4vZm9ybWF0VHlwZXMuanNcIjtcbmltcG9ydCB7cHJlZml4RXhwb25lbnR9IGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG8uanNcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eS5qc1wiO1xuXG52YXIgbWFwID0gQXJyYXkucHJvdG90eXBlLm1hcCxcbiAgICBwcmVmaXhlcyA9IFtcInlcIixcInpcIixcImFcIixcImZcIixcInBcIixcIm5cIixcIsK1XCIsXCJtXCIsXCJcIixcImtcIixcIk1cIixcIkdcIixcIlRcIixcIlBcIixcIkVcIixcIlpcIixcIllcIl07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGxvY2FsZSkge1xuICB2YXIgZ3JvdXAgPSBsb2NhbGUuZ3JvdXBpbmcgPT09IHVuZGVmaW5lZCB8fCBsb2NhbGUudGhvdXNhbmRzID09PSB1bmRlZmluZWQgPyBpZGVudGl0eSA6IGZvcm1hdEdyb3VwKG1hcC5jYWxsKGxvY2FsZS5ncm91cGluZywgTnVtYmVyKSwgbG9jYWxlLnRob3VzYW5kcyArIFwiXCIpLFxuICAgICAgY3VycmVuY3lQcmVmaXggPSBsb2NhbGUuY3VycmVuY3kgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBsb2NhbGUuY3VycmVuY3lbMF0gKyBcIlwiLFxuICAgICAgY3VycmVuY3lTdWZmaXggPSBsb2NhbGUuY3VycmVuY3kgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBsb2NhbGUuY3VycmVuY3lbMV0gKyBcIlwiLFxuICAgICAgZGVjaW1hbCA9IGxvY2FsZS5kZWNpbWFsID09PSB1bmRlZmluZWQgPyBcIi5cIiA6IGxvY2FsZS5kZWNpbWFsICsgXCJcIixcbiAgICAgIG51bWVyYWxzID0gbG9jYWxlLm51bWVyYWxzID09PSB1bmRlZmluZWQgPyBpZGVudGl0eSA6IGZvcm1hdE51bWVyYWxzKG1hcC5jYWxsKGxvY2FsZS5udW1lcmFscywgU3RyaW5nKSksXG4gICAgICBwZXJjZW50ID0gbG9jYWxlLnBlcmNlbnQgPT09IHVuZGVmaW5lZCA/IFwiJVwiIDogbG9jYWxlLnBlcmNlbnQgKyBcIlwiLFxuICAgICAgbWludXMgPSBsb2NhbGUubWludXMgPT09IHVuZGVmaW5lZCA/IFwiLVwiIDogbG9jYWxlLm1pbnVzICsgXCJcIixcbiAgICAgIG5hbiA9IGxvY2FsZS5uYW4gPT09IHVuZGVmaW5lZCA/IFwiTmFOXCIgOiBsb2NhbGUubmFuICsgXCJcIjtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICB2YXIgZmlsbCA9IHNwZWNpZmllci5maWxsLFxuICAgICAgICBhbGlnbiA9IHNwZWNpZmllci5hbGlnbixcbiAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICBzeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sLFxuICAgICAgICB6ZXJvID0gc3BlY2lmaWVyLnplcm8sXG4gICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICBjb21tYSA9IHNwZWNpZmllci5jb21tYSxcbiAgICAgICAgcHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbixcbiAgICAgICAgdHJpbSA9IHNwZWNpZmllci50cmltLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBUaGUgXCJuXCIgdHlwZSBpcyBhbiBhbGlhcyBmb3IgXCIsZ1wiLlxuICAgIGlmICh0eXBlID09PSBcIm5cIikgY29tbWEgPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBUaGUgXCJcIiB0eXBlLCBhbmQgYW55IGludmFsaWQgdHlwZSwgaXMgYW4gYWxpYXMgZm9yIFwiLjEyfmdcIi5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkICYmIChwcmVjaXNpb24gPSAxMiksIHRyaW0gPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBJZiB6ZXJvIGZpbGwgaXMgc3BlY2lmaWVkLCBwYWRkaW5nIGdvZXMgYWZ0ZXIgc2lnbiBhbmQgYmVmb3JlIGRpZ2l0cy5cbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgIHZhciBwcmVmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lQcmVmaXggOiBzeW1ib2wgPT09IFwiI1wiICYmIC9bYm94WF0vLnRlc3QodHlwZSkgPyBcIjBcIiArIHR5cGUudG9Mb3dlckNhc2UoKSA6IFwiXCIsXG4gICAgICAgIHN1ZmZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVN1ZmZpeCA6IC9bJXBdLy50ZXN0KHR5cGUpID8gcGVyY2VudCA6IFwiXCI7XG5cbiAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgIC8vIENhbiB0aGlzIHR5cGUgZ2VuZXJhdGUgZXhwb25lbnRpYWwgbm90YXRpb24/XG4gICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgbWF5YmVTdWZmaXggPSAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdCBwcmVjaXNpb24gaWYgbm90IHNwZWNpZmllZCxcbiAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAvLyBGb3IgZml4ZWQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFswLCAyMF0uXG4gICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyA2XG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFyIHZhbHVlTmVnYXRpdmUgPSB2YWx1ZSA8IDA7XG4gICAgICAgIHZhbHVlID0gaXNOYU4odmFsdWUpID8gbmFuIDogZm9ybWF0VHlwZShNYXRoLmFicyh2YWx1ZSksIHByZWNpc2lvbik7XG5cbiAgICAgICAgLy8gVHJpbSBpbnNpZ25pZmljYW50IHplcm9zLlxuICAgICAgICBpZiAodHJpbSkgdmFsdWUgPSBmb3JtYXRUcmltKHZhbHVlKTtcblxuICAgICAgICAvLyBJZiBhIG5lZ2F0aXZlIHZhbHVlIHJvdW5kcyB0byB6ZXJvIGR1cmluZyBmb3JtYXR0aW5nLCB0cmVhdCBhcyBwb3NpdGl2ZS5cbiAgICAgICAgaWYgKHZhbHVlTmVnYXRpdmUgJiYgK3ZhbHVlID09PSAwKSB2YWx1ZU5lZ2F0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgICAgIHZhbHVlUHJlZml4ID0gKHZhbHVlTmVnYXRpdmUgPyAoc2lnbiA9PT0gXCIoXCIgPyBzaWduIDogbWludXMpIDogc2lnbiA9PT0gXCItXCIgfHwgc2lnbiA9PT0gXCIoXCIgPyBcIlwiIDogc2lnbikgKyB2YWx1ZVByZWZpeDtcblxuICAgICAgICB2YWx1ZVN1ZmZpeCA9ICh0eXBlID09PSBcInNcIiA/IHByZWZpeGVzWzggKyBwcmVmaXhFeHBvbmVudCAvIDNdIDogXCJcIikgKyB2YWx1ZVN1ZmZpeCArICh2YWx1ZU5lZ2F0aXZlICYmIHNpZ24gPT09IFwiKFwiID8gXCIpXCIgOiBcIlwiKTtcblxuICAgICAgICAvLyBCcmVhayB0aGUgZm9ybWF0dGVkIHZhbHVlIGludG8gdGhlIGludGVnZXIg4oCcdmFsdWXigJ0gcGFydCB0aGF0IGNhbiBiZVxuICAgICAgICAvLyBncm91cGVkLCBhbmQgZnJhY3Rpb25hbCBvciBleHBvbmVudGlhbCDigJxzdWZmaXjigJ0gcGFydCB0aGF0IGlzIG5vdC5cbiAgICAgICAgaWYgKG1heWJlU3VmZml4KSB7XG4gICAgICAgICAgaSA9IC0xLCBuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksIDQ4ID4gYyB8fCBjID4gNTcpIHtcbiAgICAgICAgICAgICAgdmFsdWVTdWZmaXggPSAoYyA9PT0gNDYgPyBkZWNpbWFsICsgdmFsdWUuc2xpY2UoaSArIDEpIDogdmFsdWUuc2xpY2UoaSkpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgbm90IFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGJlZm9yZSBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmICF6ZXJvKSB2YWx1ZSA9IGdyb3VwKHZhbHVlLCBJbmZpbml0eSk7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHBhZGRpbmcuXG4gICAgICB2YXIgbGVuZ3RoID0gdmFsdWVQcmVmaXgubGVuZ3RoICsgdmFsdWUubGVuZ3RoICsgdmFsdWVTdWZmaXgubGVuZ3RoLFxuICAgICAgICAgIHBhZGRpbmcgPSBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgOiBcIlwiO1xuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYWZ0ZXIgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiB6ZXJvKSB2YWx1ZSA9IGdyb3VwKHBhZGRpbmcgKyB2YWx1ZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIHZhbHVlU3VmZml4Lmxlbmd0aCA6IEluZmluaXR5KSwgcGFkZGluZyA9IFwiXCI7XG5cbiAgICAgIC8vIFJlY29uc3RydWN0IHRoZSBmaW5hbCBvdXRwdXQgYmFzZWQgb24gdGhlIGRlc2lyZWQgYWxpZ25tZW50LlxuICAgICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgICBjYXNlIFwiPFwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmc7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiPVwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgcGFkZGluZyArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiXlwiOiB2YWx1ZSA9IHBhZGRpbmcuc2xpY2UoMCwgbGVuZ3RoID0gcGFkZGluZy5sZW5ndGggPj4gMSkgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nLnNsaWNlKGxlbmd0aCk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiB2YWx1ZSA9IHBhZGRpbmcgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVtZXJhbHModmFsdWUpO1xuICAgIH1cblxuICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNwZWNpZmllciArIFwiXCI7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSkge1xuICAgIHZhciBmID0gbmV3Rm9ybWF0KChzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSwgc3BlY2lmaWVyLnR5cGUgPSBcImZcIiwgc3BlY2lmaWVyKSksXG4gICAgICAgIGUgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyxcbiAgICAgICAgayA9IE1hdGgucG93KDEwLCAtZSksXG4gICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZihrICogdmFsdWUpICsgcHJlZml4O1xuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogbmV3Rm9ybWF0LFxuICAgIGZvcm1hdFByZWZpeDogZm9ybWF0UHJlZml4XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihncm91cGluZywgdGhvdXNhbmRzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgd2lkdGgpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aCxcbiAgICAgICAgdCA9IFtdLFxuICAgICAgICBqID0gMCxcbiAgICAgICAgZyA9IGdyb3VwaW5nWzBdLFxuICAgICAgICBsZW5ndGggPSAwO1xuXG4gICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7XG4gICAgICBpZiAobGVuZ3RoICsgZyArIDEgPiB3aWR0aCkgZyA9IE1hdGgubWF4KDEsIHdpZHRoIC0gbGVuZ3RoKTtcbiAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpO1xuICAgICAgaWYgKChsZW5ndGggKz0gZyArIDEpID4gd2lkdGgpIGJyZWFrO1xuICAgICAgZyA9IGdyb3VwaW5nW2ogPSAoaiArIDEpICUgZ3JvdXBpbmcubGVuZ3RoXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbih0aG91c2FuZHMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obnVtZXJhbHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1swLTldL2csIGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBudW1lcmFsc1sraV07XG4gICAgfSk7XG4gIH07XG59XG4iLCJmdW5jdGlvbiBjb3VudChub2RlKSB7XG4gIHZhciBzdW0gPSAwLFxuICAgICAgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLFxuICAgICAgaSA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgaWYgKCFpKSBzdW0gPSAxO1xuICBlbHNlIHdoaWxlICgtLWkgPj0gMCkgc3VtICs9IGNoaWxkcmVuW2ldLnZhbHVlO1xuICBub2RlLnZhbHVlID0gc3VtO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEFmdGVyKGNvdW50KTtcbn1cbiIsImltcG9ydCBub2RlX2NvdW50IGZyb20gXCIuL2NvdW50XCI7XG5pbXBvcnQgbm9kZV9lYWNoIGZyb20gXCIuL2VhY2hcIjtcbmltcG9ydCBub2RlX2VhY2hCZWZvcmUgZnJvbSBcIi4vZWFjaEJlZm9yZVwiO1xuaW1wb3J0IG5vZGVfZWFjaEFmdGVyIGZyb20gXCIuL2VhY2hBZnRlclwiO1xuaW1wb3J0IG5vZGVfc3VtIGZyb20gXCIuL3N1bVwiO1xuaW1wb3J0IG5vZGVfc29ydCBmcm9tIFwiLi9zb3J0XCI7XG5pbXBvcnQgbm9kZV9wYXRoIGZyb20gXCIuL3BhdGhcIjtcbmltcG9ydCBub2RlX2FuY2VzdG9ycyBmcm9tIFwiLi9hbmNlc3RvcnNcIjtcbmltcG9ydCBub2RlX2Rlc2NlbmRhbnRzIGZyb20gXCIuL2Rlc2NlbmRhbnRzXCI7XG5pbXBvcnQgbm9kZV9sZWF2ZXMgZnJvbSBcIi4vbGVhdmVzXCI7XG5pbXBvcnQgbm9kZV9saW5rcyBmcm9tIFwiLi9saW5rc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoaWVyYXJjaHkoZGF0YSwgY2hpbGRyZW4pIHtcbiAgdmFyIHJvb3QgPSBuZXcgTm9kZShkYXRhKSxcbiAgICAgIHZhbHVlZCA9ICtkYXRhLnZhbHVlICYmIChyb290LnZhbHVlID0gZGF0YS52YWx1ZSksXG4gICAgICBub2RlLFxuICAgICAgbm9kZXMgPSBbcm9vdF0sXG4gICAgICBjaGlsZCxcbiAgICAgIGNoaWxkcyxcbiAgICAgIGksXG4gICAgICBuO1xuXG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSBjaGlsZHJlbiA9IGRlZmF1bHRDaGlsZHJlbjtcblxuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgaWYgKHZhbHVlZCkgbm9kZS52YWx1ZSA9ICtub2RlLmRhdGEudmFsdWU7XG4gICAgaWYgKChjaGlsZHMgPSBjaGlsZHJlbihub2RlLmRhdGEpKSAmJiAobiA9IGNoaWxkcy5sZW5ndGgpKSB7XG4gICAgICBub2RlLmNoaWxkcmVuID0gbmV3IEFycmF5KG4pO1xuICAgICAgZm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldID0gbmV3IE5vZGUoY2hpbGRzW2ldKSk7XG4gICAgICAgIGNoaWxkLnBhcmVudCA9IG5vZGU7XG4gICAgICAgIGNoaWxkLmRlcHRoID0gbm9kZS5kZXB0aCArIDE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJvb3QuZWFjaEJlZm9yZShjb21wdXRlSGVpZ2h0KTtcbn1cblxuZnVuY3Rpb24gbm9kZV9jb3B5KCkge1xuICByZXR1cm4gaGllcmFyY2h5KHRoaXMpLmVhY2hCZWZvcmUoY29weURhdGEpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q2hpbGRyZW4oZCkge1xuICByZXR1cm4gZC5jaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY29weURhdGEobm9kZSkge1xuICBub2RlLmRhdGEgPSBub2RlLmRhdGEuZGF0YTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVIZWlnaHQobm9kZSkge1xuICB2YXIgaGVpZ2h0ID0gMDtcbiAgZG8gbm9kZS5oZWlnaHQgPSBoZWlnaHQ7XG4gIHdoaWxlICgobm9kZSA9IG5vZGUucGFyZW50KSAmJiAobm9kZS5oZWlnaHQgPCArK2hlaWdodCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTm9kZShkYXRhKSB7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuZGVwdGggPVxuICB0aGlzLmhlaWdodCA9IDA7XG4gIHRoaXMucGFyZW50ID0gbnVsbDtcbn1cblxuTm9kZS5wcm90b3R5cGUgPSBoaWVyYXJjaHkucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTm9kZSxcbiAgY291bnQ6IG5vZGVfY291bnQsXG4gIGVhY2g6IG5vZGVfZWFjaCxcbiAgZWFjaEFmdGVyOiBub2RlX2VhY2hBZnRlcixcbiAgZWFjaEJlZm9yZTogbm9kZV9lYWNoQmVmb3JlLFxuICBzdW06IG5vZGVfc3VtLFxuICBzb3J0OiBub2RlX3NvcnQsXG4gIHBhdGg6IG5vZGVfcGF0aCxcbiAgYW5jZXN0b3JzOiBub2RlX2FuY2VzdG9ycyxcbiAgZGVzY2VuZGFudHM6IG5vZGVfZGVzY2VuZGFudHMsXG4gIGxlYXZlczogbm9kZV9sZWF2ZXMsXG4gIGxpbmtzOiBub2RlX2xpbmtzLFxuICBjb3B5OiBub2RlX2NvcHlcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgbm9kZSA9IHRoaXMsIGN1cnJlbnQsIG5leHQgPSBbbm9kZV0sIGNoaWxkcmVuLCBpLCBuO1xuICBkbyB7XG4gICAgY3VycmVudCA9IG5leHQucmV2ZXJzZSgpLCBuZXh0ID0gW107XG4gICAgd2hpbGUgKG5vZGUgPSBjdXJyZW50LnBvcCgpKSB7XG4gICAgICBjYWxsYmFjayhub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSAwLCBuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5leHQucHVzaChjaGlsZHJlbltpXSk7XG4gICAgICB9XG4gICAgfVxuICB9IHdoaWxlIChuZXh0Lmxlbmd0aCk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXSwgbmV4dCA9IFtdLCBjaGlsZHJlbiwgaSwgbjtcbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIG5leHQucHVzaChub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZXMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChub2RlID0gbmV4dC5wb3AoKSkge1xuICAgIGNhbGxiYWNrKG5vZGUpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXSwgY2hpbGRyZW4sIGk7XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBjYWxsYmFjayhub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLmVhY2hBZnRlcihmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIHN1bSA9ICt2YWx1ZShub2RlLmRhdGEpIHx8IDAsXG4gICAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbixcbiAgICAgICAgaSA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgICB3aGlsZSAoLS1pID49IDApIHN1bSArPSBjaGlsZHJlbltpXS52YWx1ZTtcbiAgICBub2RlLnZhbHVlID0gc3VtO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIG5vZGUuY2hpbGRyZW4uc29ydChjb21wYXJlKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZW5kKSB7XG4gIHZhciBzdGFydCA9IHRoaXMsXG4gICAgICBhbmNlc3RvciA9IGxlYXN0Q29tbW9uQW5jZXN0b3Ioc3RhcnQsIGVuZCksXG4gICAgICBub2RlcyA9IFtzdGFydF07XG4gIHdoaWxlIChzdGFydCAhPT0gYW5jZXN0b3IpIHtcbiAgICBzdGFydCA9IHN0YXJ0LnBhcmVudDtcbiAgICBub2Rlcy5wdXNoKHN0YXJ0KTtcbiAgfVxuICB2YXIgayA9IG5vZGVzLmxlbmd0aDtcbiAgd2hpbGUgKGVuZCAhPT0gYW5jZXN0b3IpIHtcbiAgICBub2Rlcy5zcGxpY2UoaywgMCwgZW5kKTtcbiAgICBlbmQgPSBlbmQucGFyZW50O1xuICB9XG4gIHJldHVybiBub2Rlcztcbn1cblxuZnVuY3Rpb24gbGVhc3RDb21tb25BbmNlc3RvcihhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gYTtcbiAgdmFyIGFOb2RlcyA9IGEuYW5jZXN0b3JzKCksXG4gICAgICBiTm9kZXMgPSBiLmFuY2VzdG9ycygpLFxuICAgICAgYyA9IG51bGw7XG4gIGEgPSBhTm9kZXMucG9wKCk7XG4gIGIgPSBiTm9kZXMucG9wKCk7XG4gIHdoaWxlIChhID09PSBiKSB7XG4gICAgYyA9IGE7XG4gICAgYSA9IGFOb2Rlcy5wb3AoKTtcbiAgICBiID0gYk5vZGVzLnBvcCgpO1xuICB9XG4gIHJldHVybiBjO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV07XG4gIHdoaWxlIChub2RlID0gbm9kZS5wYXJlbnQpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICB9XG4gIHJldHVybiBub2Rlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMgPSBbXTtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBsZWF2ZXMgPSBbXTtcbiAgdGhpcy5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGxlYXZlcy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsZWF2ZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHJvb3QgPSB0aGlzLCBsaW5rcyA9IFtdO1xuICByb290LmVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChub2RlICE9PSByb290KSB7IC8vIERvbuKAmXQgaW5jbHVkZSB0aGUgcm9vdOKAmXMgcGFyZW50LCBpZiBhbnkuXG4gICAgICBsaW5rcy5wdXNoKHtzb3VyY2U6IG5vZGUucGFyZW50LCB0YXJnZXQ6IG5vZGV9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbGlua3M7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG5leHBvcnQgZnVuY3Rpb24gc2h1ZmZsZShhcnJheSkge1xuICB2YXIgbSA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIHQsXG4gICAgICBpO1xuXG4gIHdoaWxlIChtKSB7XG4gICAgaSA9IE1hdGgucmFuZG9tKCkgKiBtLS0gfCAwO1xuICAgIHQgPSBhcnJheVttXTtcbiAgICBhcnJheVttXSA9IGFycmF5W2ldO1xuICAgIGFycmF5W2ldID0gdDtcbiAgfVxuXG4gIHJldHVybiBhcnJheTtcbn1cbiIsImltcG9ydCB7c2h1ZmZsZSwgc2xpY2V9IGZyb20gXCIuLi9hcnJheVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjaXJjbGVzKSB7XG4gIHZhciBpID0gMCwgbiA9IChjaXJjbGVzID0gc2h1ZmZsZShzbGljZS5jYWxsKGNpcmNsZXMpKSkubGVuZ3RoLCBCID0gW10sIHAsIGU7XG5cbiAgd2hpbGUgKGkgPCBuKSB7XG4gICAgcCA9IGNpcmNsZXNbaV07XG4gICAgaWYgKGUgJiYgZW5jbG9zZXNXZWFrKGUsIHApKSArK2k7XG4gICAgZWxzZSBlID0gZW5jbG9zZUJhc2lzKEIgPSBleHRlbmRCYXNpcyhCLCBwKSksIGkgPSAwO1xuICB9XG5cbiAgcmV0dXJuIGU7XG59XG5cbmZ1bmN0aW9uIGV4dGVuZEJhc2lzKEIsIHApIHtcbiAgdmFyIGksIGo7XG5cbiAgaWYgKGVuY2xvc2VzV2Vha0FsbChwLCBCKSkgcmV0dXJuIFtwXTtcblxuICAvLyBJZiB3ZSBnZXQgaGVyZSB0aGVuIEIgbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBlbGVtZW50LlxuICBmb3IgKGkgPSAwOyBpIDwgQi5sZW5ndGg7ICsraSkge1xuICAgIGlmIChlbmNsb3Nlc05vdChwLCBCW2ldKVxuICAgICAgICAmJiBlbmNsb3Nlc1dlYWtBbGwoZW5jbG9zZUJhc2lzMihCW2ldLCBwKSwgQikpIHtcbiAgICAgIHJldHVybiBbQltpXSwgcF07XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgdGhlbiBCIG11c3QgaGF2ZSBhdCBsZWFzdCB0d28gZWxlbWVudHMuXG4gIGZvciAoaSA9IDA7IGkgPCBCLmxlbmd0aCAtIDE7ICsraSkge1xuICAgIGZvciAoaiA9IGkgKyAxOyBqIDwgQi5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKGVuY2xvc2VzTm90KGVuY2xvc2VCYXNpczIoQltpXSwgQltqXSksIHApXG4gICAgICAgICAgJiYgZW5jbG9zZXNOb3QoZW5jbG9zZUJhc2lzMihCW2ldLCBwKSwgQltqXSlcbiAgICAgICAgICAmJiBlbmNsb3Nlc05vdChlbmNsb3NlQmFzaXMyKEJbal0sIHApLCBCW2ldKVxuICAgICAgICAgICYmIGVuY2xvc2VzV2Vha0FsbChlbmNsb3NlQmFzaXMzKEJbaV0sIEJbal0sIHApLCBCKSkge1xuICAgICAgICByZXR1cm4gW0JbaV0sIEJbal0sIHBdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIElmIHdlIGdldCBoZXJlIHRoZW4gc29tZXRoaW5nIGlzIHZlcnkgd3JvbmcuXG4gIHRocm93IG5ldyBFcnJvcjtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZXNOb3QoYSwgYikge1xuICB2YXIgZHIgPSBhLnIgLSBiLnIsIGR4ID0gYi54IC0gYS54LCBkeSA9IGIueSAtIGEueTtcbiAgcmV0dXJuIGRyIDwgMCB8fCBkciAqIGRyIDwgZHggKiBkeCArIGR5ICogZHk7XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VzV2VhayhhLCBiKSB7XG4gIHZhciBkciA9IGEuciAtIGIuciArIDFlLTYsIGR4ID0gYi54IC0gYS54LCBkeSA9IGIueSAtIGEueTtcbiAgcmV0dXJuIGRyID4gMCAmJiBkciAqIGRyID4gZHggKiBkeCArIGR5ICogZHk7XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VzV2Vha0FsbChhLCBCKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgQi5sZW5ndGg7ICsraSkge1xuICAgIGlmICghZW5jbG9zZXNXZWFrKGEsIEJbaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBlbmNsb3NlQmFzaXMoQikge1xuICBzd2l0Y2ggKEIubGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZW5jbG9zZUJhc2lzMShCWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBlbmNsb3NlQmFzaXMyKEJbMF0sIEJbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIGVuY2xvc2VCYXNpczMoQlswXSwgQlsxXSwgQlsyXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5jbG9zZUJhc2lzMShhKSB7XG4gIHJldHVybiB7XG4gICAgeDogYS54LFxuICAgIHk6IGEueSxcbiAgICByOiBhLnJcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZUJhc2lzMihhLCBiKSB7XG4gIHZhciB4MSA9IGEueCwgeTEgPSBhLnksIHIxID0gYS5yLFxuICAgICAgeDIgPSBiLngsIHkyID0gYi55LCByMiA9IGIucixcbiAgICAgIHgyMSA9IHgyIC0geDEsIHkyMSA9IHkyIC0geTEsIHIyMSA9IHIyIC0gcjEsXG4gICAgICBsID0gTWF0aC5zcXJ0KHgyMSAqIHgyMSArIHkyMSAqIHkyMSk7XG4gIHJldHVybiB7XG4gICAgeDogKHgxICsgeDIgKyB4MjEgLyBsICogcjIxKSAvIDIsXG4gICAgeTogKHkxICsgeTIgKyB5MjEgLyBsICogcjIxKSAvIDIsXG4gICAgcjogKGwgKyByMSArIHIyKSAvIDJcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZUJhc2lzMyhhLCBiLCBjKSB7XG4gIHZhciB4MSA9IGEueCwgeTEgPSBhLnksIHIxID0gYS5yLFxuICAgICAgeDIgPSBiLngsIHkyID0gYi55LCByMiA9IGIucixcbiAgICAgIHgzID0gYy54LCB5MyA9IGMueSwgcjMgPSBjLnIsXG4gICAgICBhMiA9IHgxIC0geDIsXG4gICAgICBhMyA9IHgxIC0geDMsXG4gICAgICBiMiA9IHkxIC0geTIsXG4gICAgICBiMyA9IHkxIC0geTMsXG4gICAgICBjMiA9IHIyIC0gcjEsXG4gICAgICBjMyA9IHIzIC0gcjEsXG4gICAgICBkMSA9IHgxICogeDEgKyB5MSAqIHkxIC0gcjEgKiByMSxcbiAgICAgIGQyID0gZDEgLSB4MiAqIHgyIC0geTIgKiB5MiArIHIyICogcjIsXG4gICAgICBkMyA9IGQxIC0geDMgKiB4MyAtIHkzICogeTMgKyByMyAqIHIzLFxuICAgICAgYWIgPSBhMyAqIGIyIC0gYTIgKiBiMyxcbiAgICAgIHhhID0gKGIyICogZDMgLSBiMyAqIGQyKSAvIChhYiAqIDIpIC0geDEsXG4gICAgICB4YiA9IChiMyAqIGMyIC0gYjIgKiBjMykgLyBhYixcbiAgICAgIHlhID0gKGEzICogZDIgLSBhMiAqIGQzKSAvIChhYiAqIDIpIC0geTEsXG4gICAgICB5YiA9IChhMiAqIGMzIC0gYTMgKiBjMikgLyBhYixcbiAgICAgIEEgPSB4YiAqIHhiICsgeWIgKiB5YiAtIDEsXG4gICAgICBCID0gMiAqIChyMSArIHhhICogeGIgKyB5YSAqIHliKSxcbiAgICAgIEMgPSB4YSAqIHhhICsgeWEgKiB5YSAtIHIxICogcjEsXG4gICAgICByID0gLShBID8gKEIgKyBNYXRoLnNxcnQoQiAqIEIgLSA0ICogQSAqIEMpKSAvICgyICogQSkgOiBDIC8gQik7XG4gIHJldHVybiB7XG4gICAgeDogeDEgKyB4YSArIHhiICogcixcbiAgICB5OiB5MSArIHlhICsgeWIgKiByLFxuICAgIHI6IHJcbiAgfTtcbn1cbiIsImltcG9ydCBlbmNsb3NlIGZyb20gXCIuL2VuY2xvc2VcIjtcblxuZnVuY3Rpb24gcGxhY2UoYiwgYSwgYykge1xuICB2YXIgZHggPSBiLnggLSBhLngsIHgsIGEyLFxuICAgICAgZHkgPSBiLnkgLSBhLnksIHksIGIyLFxuICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgaWYgKGQyKSB7XG4gICAgYTIgPSBhLnIgKyBjLnIsIGEyICo9IGEyO1xuICAgIGIyID0gYi5yICsgYy5yLCBiMiAqPSBiMjtcbiAgICBpZiAoYTIgPiBiMikge1xuICAgICAgeCA9IChkMiArIGIyIC0gYTIpIC8gKDIgKiBkMik7XG4gICAgICB5ID0gTWF0aC5zcXJ0KE1hdGgubWF4KDAsIGIyIC8gZDIgLSB4ICogeCkpO1xuICAgICAgYy54ID0gYi54IC0geCAqIGR4IC0geSAqIGR5O1xuICAgICAgYy55ID0gYi55IC0geCAqIGR5ICsgeSAqIGR4O1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0gKGQyICsgYTIgLSBiMikgLyAoMiAqIGQyKTtcbiAgICAgIHkgPSBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgYTIgLyBkMiAtIHggKiB4KSk7XG4gICAgICBjLnggPSBhLnggKyB4ICogZHggLSB5ICogZHk7XG4gICAgICBjLnkgPSBhLnkgKyB4ICogZHkgKyB5ICogZHg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGMueCA9IGEueCArIGMucjtcbiAgICBjLnkgPSBhLnk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0cyhhLCBiKSB7XG4gIHZhciBkciA9IGEuciArIGIuciAtIDFlLTYsIGR4ID0gYi54IC0gYS54LCBkeSA9IGIueSAtIGEueTtcbiAgcmV0dXJuIGRyID4gMCAmJiBkciAqIGRyID4gZHggKiBkeCArIGR5ICogZHk7XG59XG5cbmZ1bmN0aW9uIHNjb3JlKG5vZGUpIHtcbiAgdmFyIGEgPSBub2RlLl8sXG4gICAgICBiID0gbm9kZS5uZXh0Ll8sXG4gICAgICBhYiA9IGEuciArIGIucixcbiAgICAgIGR4ID0gKGEueCAqIGIuciArIGIueCAqIGEucikgLyBhYixcbiAgICAgIGR5ID0gKGEueSAqIGIuciArIGIueSAqIGEucikgLyBhYjtcbiAgcmV0dXJuIGR4ICogZHggKyBkeSAqIGR5O1xufVxuXG5mdW5jdGlvbiBOb2RlKGNpcmNsZSkge1xuICB0aGlzLl8gPSBjaXJjbGU7XG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMucHJldmlvdXMgPSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFja0VuY2xvc2UoY2lyY2xlcykge1xuICBpZiAoIShuID0gY2lyY2xlcy5sZW5ndGgpKSByZXR1cm4gMDtcblxuICB2YXIgYSwgYiwgYywgbiwgYWEsIGNhLCBpLCBqLCBrLCBzaiwgc2s7XG5cbiAgLy8gUGxhY2UgdGhlIGZpcnN0IGNpcmNsZS5cbiAgYSA9IGNpcmNsZXNbMF0sIGEueCA9IDAsIGEueSA9IDA7XG4gIGlmICghKG4gPiAxKSkgcmV0dXJuIGEucjtcblxuICAvLyBQbGFjZSB0aGUgc2Vjb25kIGNpcmNsZS5cbiAgYiA9IGNpcmNsZXNbMV0sIGEueCA9IC1iLnIsIGIueCA9IGEuciwgYi55ID0gMDtcbiAgaWYgKCEobiA+IDIpKSByZXR1cm4gYS5yICsgYi5yO1xuXG4gIC8vIFBsYWNlIHRoZSB0aGlyZCBjaXJjbGUuXG4gIHBsYWNlKGIsIGEsIGMgPSBjaXJjbGVzWzJdKTtcblxuICAvLyBJbml0aWFsaXplIHRoZSBmcm9udC1jaGFpbiB1c2luZyB0aGUgZmlyc3QgdGhyZWUgY2lyY2xlcyBhLCBiIGFuZCBjLlxuICBhID0gbmV3IE5vZGUoYSksIGIgPSBuZXcgTm9kZShiKSwgYyA9IG5ldyBOb2RlKGMpO1xuICBhLm5leHQgPSBjLnByZXZpb3VzID0gYjtcbiAgYi5uZXh0ID0gYS5wcmV2aW91cyA9IGM7XG4gIGMubmV4dCA9IGIucHJldmlvdXMgPSBhO1xuXG4gIC8vIEF0dGVtcHQgdG8gcGxhY2UgZWFjaCByZW1haW5pbmcgY2lyY2xl4oCmXG4gIHBhY2s6IGZvciAoaSA9IDM7IGkgPCBuOyArK2kpIHtcbiAgICBwbGFjZShhLl8sIGIuXywgYyA9IGNpcmNsZXNbaV0pLCBjID0gbmV3IE5vZGUoYyk7XG5cbiAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IGludGVyc2VjdGluZyBjaXJjbGUgb24gdGhlIGZyb250LWNoYWluLCBpZiBhbnkuXG4gICAgLy8g4oCcQ2xvc2VuZXNz4oCdIGlzIGRldGVybWluZWQgYnkgbGluZWFyIGRpc3RhbmNlIGFsb25nIHRoZSBmcm9udC1jaGFpbi5cbiAgICAvLyDigJxBaGVhZOKAnSBvciDigJxiZWhpbmTigJ0gaXMgbGlrZXdpc2UgZGV0ZXJtaW5lZCBieSBsaW5lYXIgZGlzdGFuY2UuXG4gICAgaiA9IGIubmV4dCwgayA9IGEucHJldmlvdXMsIHNqID0gYi5fLnIsIHNrID0gYS5fLnI7XG4gICAgZG8ge1xuICAgICAgaWYgKHNqIDw9IHNrKSB7XG4gICAgICAgIGlmIChpbnRlcnNlY3RzKGouXywgYy5fKSkge1xuICAgICAgICAgIGIgPSBqLCBhLm5leHQgPSBiLCBiLnByZXZpb3VzID0gYSwgLS1pO1xuICAgICAgICAgIGNvbnRpbnVlIHBhY2s7XG4gICAgICAgIH1cbiAgICAgICAgc2ogKz0gai5fLnIsIGogPSBqLm5leHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaW50ZXJzZWN0cyhrLl8sIGMuXykpIHtcbiAgICAgICAgICBhID0gaywgYS5uZXh0ID0gYiwgYi5wcmV2aW91cyA9IGEsIC0taTtcbiAgICAgICAgICBjb250aW51ZSBwYWNrO1xuICAgICAgICB9XG4gICAgICAgIHNrICs9IGsuXy5yLCBrID0gay5wcmV2aW91cztcbiAgICAgIH1cbiAgICB9IHdoaWxlIChqICE9PSBrLm5leHQpO1xuXG4gICAgLy8gU3VjY2VzcyEgSW5zZXJ0IHRoZSBuZXcgY2lyY2xlIGMgYmV0d2VlbiBhIGFuZCBiLlxuICAgIGMucHJldmlvdXMgPSBhLCBjLm5leHQgPSBiLCBhLm5leHQgPSBiLnByZXZpb3VzID0gYiA9IGM7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBuZXcgY2xvc2VzdCBjaXJjbGUgcGFpciB0byB0aGUgY2VudHJvaWQuXG4gICAgYWEgPSBzY29yZShhKTtcbiAgICB3aGlsZSAoKGMgPSBjLm5leHQpICE9PSBiKSB7XG4gICAgICBpZiAoKGNhID0gc2NvcmUoYykpIDwgYWEpIHtcbiAgICAgICAgYSA9IGMsIGFhID0gY2E7XG4gICAgICB9XG4gICAgfVxuICAgIGIgPSBhLm5leHQ7XG4gIH1cblxuICAvLyBDb21wdXRlIHRoZSBlbmNsb3NpbmcgY2lyY2xlIG9mIHRoZSBmcm9udCBjaGFpbi5cbiAgYSA9IFtiLl9dLCBjID0gYjsgd2hpbGUgKChjID0gYy5uZXh0KSAhPT0gYikgYS5wdXNoKGMuXyk7IGMgPSBlbmNsb3NlKGEpO1xuXG4gIC8vIFRyYW5zbGF0ZSB0aGUgY2lyY2xlcyB0byBwdXQgdGhlIGVuY2xvc2luZyBjaXJjbGUgYXJvdW5kIHRoZSBvcmlnaW4uXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGEgPSBjaXJjbGVzW2ldLCBhLnggLT0gYy54LCBhLnkgLT0gYy55O1xuXG4gIHJldHVybiBjLnI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNpcmNsZXMpIHtcbiAgcGFja0VuY2xvc2UoY2lyY2xlcyk7XG4gIHJldHVybiBjaXJjbGVzO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIG9wdGlvbmFsKGYpIHtcbiAgcmV0dXJuIGYgPT0gbnVsbCA/IG51bGwgOiByZXF1aXJlZChmKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVpcmVkKGYpIHtcbiAgaWYgKHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGY7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY29uc3RhbnRaZXJvKCkge1xuICByZXR1cm4gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQge3BhY2tFbmNsb3NlfSBmcm9tIFwiLi9zaWJsaW5nc1wiO1xuaW1wb3J0IHtvcHRpb25hbH0gZnJvbSBcIi4uL2FjY2Vzc29yc1wiO1xuaW1wb3J0IGNvbnN0YW50LCB7Y29uc3RhbnRaZXJvfSBmcm9tIFwiLi4vY29uc3RhbnRcIjtcblxuZnVuY3Rpb24gZGVmYXVsdFJhZGl1cyhkKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoZC52YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgcmFkaXVzID0gbnVsbCxcbiAgICAgIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIHBhZGRpbmcgPSBjb25zdGFudFplcm87XG5cbiAgZnVuY3Rpb24gcGFjayhyb290KSB7XG4gICAgcm9vdC54ID0gZHggLyAyLCByb290LnkgPSBkeSAvIDI7XG4gICAgaWYgKHJhZGl1cykge1xuICAgICAgcm9vdC5lYWNoQmVmb3JlKHJhZGl1c0xlYWYocmFkaXVzKSlcbiAgICAgICAgICAuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihwYWRkaW5nLCAwLjUpKVxuICAgICAgICAgIC5lYWNoQmVmb3JlKHRyYW5zbGF0ZUNoaWxkKDEpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9vdC5lYWNoQmVmb3JlKHJhZGl1c0xlYWYoZGVmYXVsdFJhZGl1cykpXG4gICAgICAgICAgLmVhY2hBZnRlcihwYWNrQ2hpbGRyZW4oY29uc3RhbnRaZXJvLCAxKSlcbiAgICAgICAgICAuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihwYWRkaW5nLCByb290LnIgLyBNYXRoLm1pbihkeCwgZHkpKSlcbiAgICAgICAgICAuZWFjaEJlZm9yZSh0cmFuc2xhdGVDaGlsZChNYXRoLm1pbihkeCwgZHkpIC8gKDIgKiByb290LnIpKSk7XG4gICAgfVxuICAgIHJldHVybiByb290O1xuICB9XG5cbiAgcGFjay5yYWRpdXMgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gb3B0aW9uYWwoeCksIHBhY2spIDogcmFkaXVzO1xuICB9O1xuXG4gIHBhY2suc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBwYWNrKSA6IFtkeCwgZHldO1xuICB9O1xuXG4gIHBhY2sucGFkZGluZyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHBhY2spIDogcGFkZGluZztcbiAgfTtcblxuICByZXR1cm4gcGFjaztcbn1cblxuZnVuY3Rpb24gcmFkaXVzTGVhZihyYWRpdXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIG5vZGUuciA9IE1hdGgubWF4KDAsICtyYWRpdXMobm9kZSkgfHwgMCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBwYWNrQ2hpbGRyZW4ocGFkZGluZywgaykge1xuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIHZhciBjaGlsZHJlbixcbiAgICAgICAgICBpLFxuICAgICAgICAgIG4gPSBjaGlsZHJlbi5sZW5ndGgsXG4gICAgICAgICAgciA9IHBhZGRpbmcobm9kZSkgKiBrIHx8IDAsXG4gICAgICAgICAgZTtcblxuICAgICAgaWYgKHIpIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGNoaWxkcmVuW2ldLnIgKz0gcjtcbiAgICAgIGUgPSBwYWNrRW5jbG9zZShjaGlsZHJlbik7XG4gICAgICBpZiAocikgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY2hpbGRyZW5baV0uciAtPSByO1xuICAgICAgbm9kZS5yID0gZSArIHI7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVDaGlsZChrKSB7XG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50O1xuICAgIG5vZGUuciAqPSBrO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIG5vZGUueCA9IHBhcmVudC54ICsgayAqIG5vZGUueDtcbiAgICAgIG5vZGUueSA9IHBhcmVudC55ICsgayAqIG5vZGUueTtcbiAgICB9XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlKSB7XG4gIG5vZGUueDAgPSBNYXRoLnJvdW5kKG5vZGUueDApO1xuICBub2RlLnkwID0gTWF0aC5yb3VuZChub2RlLnkwKTtcbiAgbm9kZS54MSA9IE1hdGgucm91bmQobm9kZS54MSk7XG4gIG5vZGUueTEgPSBNYXRoLnJvdW5kKG5vZGUueTEpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICBub2RlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgIGsgPSBwYXJlbnQudmFsdWUgJiYgKHgxIC0geDApIC8gcGFyZW50LnZhbHVlO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnkwID0geTAsIG5vZGUueTEgPSB5MTtcbiAgICBub2RlLngwID0geDAsIG5vZGUueDEgPSB4MCArPSBub2RlLnZhbHVlICogaztcbiAgfVxufVxuIiwiaW1wb3J0IHtyZXF1aXJlZH0gZnJvbSBcIi4vYWNjZXNzb3JzXCI7XG5pbXBvcnQge05vZGUsIGNvbXB1dGVIZWlnaHR9IGZyb20gXCIuL2hpZXJhcmNoeS9pbmRleFwiO1xuXG52YXIga2V5UHJlZml4ID0gXCIkXCIsIC8vIFByb3RlY3QgYWdhaW5zdCBrZXlzIGxpa2Ug4oCcX19wcm90b19f4oCdLlxuICAgIHByZXJvb3QgPSB7ZGVwdGg6IC0xfSxcbiAgICBhbWJpZ3VvdXMgPSB7fTtcblxuZnVuY3Rpb24gZGVmYXVsdElkKGQpIHtcbiAgcmV0dXJuIGQuaWQ7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQYXJlbnRJZChkKSB7XG4gIHJldHVybiBkLnBhcmVudElkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGlkID0gZGVmYXVsdElkLFxuICAgICAgcGFyZW50SWQgPSBkZWZhdWx0UGFyZW50SWQ7XG5cbiAgZnVuY3Rpb24gc3RyYXRpZnkoZGF0YSkge1xuICAgIHZhciBkLFxuICAgICAgICBpLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgbm9kZXMgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIG5vZGVJZCxcbiAgICAgICAgbm9kZUtleSxcbiAgICAgICAgbm9kZUJ5S2V5ID0ge307XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBkID0gZGF0YVtpXSwgbm9kZSA9IG5vZGVzW2ldID0gbmV3IE5vZGUoZCk7XG4gICAgICBpZiAoKG5vZGVJZCA9IGlkKGQsIGksIGRhdGEpKSAhPSBudWxsICYmIChub2RlSWQgKz0gXCJcIikpIHtcbiAgICAgICAgbm9kZUtleSA9IGtleVByZWZpeCArIChub2RlLmlkID0gbm9kZUlkKTtcbiAgICAgICAgbm9kZUJ5S2V5W25vZGVLZXldID0gbm9kZUtleSBpbiBub2RlQnlLZXkgPyBhbWJpZ3VvdXMgOiBub2RlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZUlkID0gcGFyZW50SWQoZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgICBpZiAobm9kZUlkID09IG51bGwgfHwgIShub2RlSWQgKz0gXCJcIikpIHtcbiAgICAgICAgaWYgKHJvb3QpIHRocm93IG5ldyBFcnJvcihcIm11bHRpcGxlIHJvb3RzXCIpO1xuICAgICAgICByb290ID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudCA9IG5vZGVCeUtleVtrZXlQcmVmaXggKyBub2RlSWRdO1xuICAgICAgICBpZiAoIXBhcmVudCkgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZzogXCIgKyBub2RlSWQpO1xuICAgICAgICBpZiAocGFyZW50ID09PSBhbWJpZ3VvdXMpIHRocm93IG5ldyBFcnJvcihcImFtYmlndW91czogXCIgKyBub2RlSWQpO1xuICAgICAgICBpZiAocGFyZW50LmNoaWxkcmVuKSBwYXJlbnQuY2hpbGRyZW4ucHVzaChub2RlKTtcbiAgICAgICAgZWxzZSBwYXJlbnQuY2hpbGRyZW4gPSBbbm9kZV07XG4gICAgICAgIG5vZGUucGFyZW50ID0gcGFyZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcm9vdCkgdGhyb3cgbmV3IEVycm9yKFwibm8gcm9vdFwiKTtcbiAgICByb290LnBhcmVudCA9IHByZXJvb3Q7XG4gICAgcm9vdC5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHsgbm9kZS5kZXB0aCA9IG5vZGUucGFyZW50LmRlcHRoICsgMTsgLS1uOyB9KS5lYWNoQmVmb3JlKGNvbXB1dGVIZWlnaHQpO1xuICAgIHJvb3QucGFyZW50ID0gbnVsbDtcbiAgICBpZiAobiA+IDApIHRocm93IG5ldyBFcnJvcihcImN5Y2xlXCIpO1xuXG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICBzdHJhdGlmeS5pZCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpZCA9IHJlcXVpcmVkKHgpLCBzdHJhdGlmeSkgOiBpZDtcbiAgfTtcblxuICBzdHJhdGlmeS5wYXJlbnRJZCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYXJlbnRJZCA9IHJlcXVpcmVkKHgpLCBzdHJhdGlmeSkgOiBwYXJlbnRJZDtcbiAgfTtcblxuICByZXR1cm4gc3RyYXRpZnk7XG59XG4iLCJpbXBvcnQge05vZGV9IGZyb20gXCIuL2hpZXJhcmNoeS9pbmRleFwiO1xuXG5mdW5jdGlvbiBkZWZhdWx0U2VwYXJhdGlvbihhLCBiKSB7XG4gIHJldHVybiBhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMjtcbn1cblxuLy8gZnVuY3Rpb24gcmFkaWFsU2VwYXJhdGlvbihhLCBiKSB7XG4vLyAgIHJldHVybiAoYS5wYXJlbnQgPT09IGIucGFyZW50ID8gMSA6IDIpIC8gYS5kZXB0aDtcbi8vIH1cblxuLy8gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHRyYXZlcnNlIHRoZSBsZWZ0IGNvbnRvdXIgb2YgYSBzdWJ0cmVlIChvclxuLy8gc3ViZm9yZXN0KS4gSXQgcmV0dXJucyB0aGUgc3VjY2Vzc29yIG9mIHYgb24gdGhpcyBjb250b3VyLiBUaGlzIHN1Y2Nlc3NvciBpc1xuLy8gZWl0aGVyIGdpdmVuIGJ5IHRoZSBsZWZ0bW9zdCBjaGlsZCBvZiB2IG9yIGJ5IHRoZSB0aHJlYWQgb2Ygdi4gVGhlIGZ1bmN0aW9uXG4vLyByZXR1cm5zIG51bGwgaWYgYW5kIG9ubHkgaWYgdiBpcyBvbiB0aGUgaGlnaGVzdCBsZXZlbCBvZiBpdHMgc3VidHJlZS5cbmZ1bmN0aW9uIG5leHRMZWZ0KHYpIHtcbiAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbjtcbiAgcmV0dXJuIGNoaWxkcmVuID8gY2hpbGRyZW5bMF0gOiB2LnQ7XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gd29ya3MgYW5hbG9nb3VzbHkgdG8gbmV4dExlZnQuXG5mdW5jdGlvbiBuZXh0UmlnaHQodikge1xuICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xuICByZXR1cm4gY2hpbGRyZW4gPyBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXSA6IHYudDtcbn1cblxuLy8gU2hpZnRzIHRoZSBjdXJyZW50IHN1YnRyZWUgcm9vdGVkIGF0IHcrLiBUaGlzIGlzIGRvbmUgYnkgaW5jcmVhc2luZ1xuLy8gcHJlbGltKHcrKSBhbmQgbW9kKHcrKSBieSBzaGlmdC5cbmZ1bmN0aW9uIG1vdmVTdWJ0cmVlKHdtLCB3cCwgc2hpZnQpIHtcbiAgdmFyIGNoYW5nZSA9IHNoaWZ0IC8gKHdwLmkgLSB3bS5pKTtcbiAgd3AuYyAtPSBjaGFuZ2U7XG4gIHdwLnMgKz0gc2hpZnQ7XG4gIHdtLmMgKz0gY2hhbmdlO1xuICB3cC56ICs9IHNoaWZ0O1xuICB3cC5tICs9IHNoaWZ0O1xufVxuXG4vLyBBbGwgb3RoZXIgc2hpZnRzLCBhcHBsaWVkIHRvIHRoZSBzbWFsbGVyIHN1YnRyZWVzIGJldHdlZW4gdy0gYW5kIHcrLCBhcmVcbi8vIHBlcmZvcm1lZCBieSB0aGlzIGZ1bmN0aW9uLiBUbyBwcmVwYXJlIHRoZSBzaGlmdHMsIHdlIGhhdmUgdG8gYWRqdXN0XG4vLyBjaGFuZ2UodyspLCBzaGlmdCh3KyksIGFuZCBjaGFuZ2Uody0pLlxuZnVuY3Rpb24gZXhlY3V0ZVNoaWZ0cyh2KSB7XG4gIHZhciBzaGlmdCA9IDAsXG4gICAgICBjaGFuZ2UgPSAwLFxuICAgICAgY2hpbGRyZW4gPSB2LmNoaWxkcmVuLFxuICAgICAgaSA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgIHc7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIHcgPSBjaGlsZHJlbltpXTtcbiAgICB3LnogKz0gc2hpZnQ7XG4gICAgdy5tICs9IHNoaWZ0O1xuICAgIHNoaWZ0ICs9IHcucyArIChjaGFuZ2UgKz0gdy5jKTtcbiAgfVxufVxuXG4vLyBJZiB2aS3igJlzIGFuY2VzdG9yIGlzIGEgc2libGluZyBvZiB2LCByZXR1cm5zIHZpLeKAmXMgYW5jZXN0b3IuIE90aGVyd2lzZSxcbi8vIHJldHVybnMgdGhlIHNwZWNpZmllZCAoZGVmYXVsdCkgYW5jZXN0b3IuXG5mdW5jdGlvbiBuZXh0QW5jZXN0b3IodmltLCB2LCBhbmNlc3Rvcikge1xuICByZXR1cm4gdmltLmEucGFyZW50ID09PSB2LnBhcmVudCA/IHZpbS5hIDogYW5jZXN0b3I7XG59XG5cbmZ1bmN0aW9uIFRyZWVOb2RlKG5vZGUsIGkpIHtcbiAgdGhpcy5fID0gbm9kZTtcbiAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICB0aGlzLmNoaWxkcmVuID0gbnVsbDtcbiAgdGhpcy5BID0gbnVsbDsgLy8gZGVmYXVsdCBhbmNlc3RvclxuICB0aGlzLmEgPSB0aGlzOyAvLyBhbmNlc3RvclxuICB0aGlzLnogPSAwOyAvLyBwcmVsaW1cbiAgdGhpcy5tID0gMDsgLy8gbW9kXG4gIHRoaXMuYyA9IDA7IC8vIGNoYW5nZVxuICB0aGlzLnMgPSAwOyAvLyBzaGlmdFxuICB0aGlzLnQgPSBudWxsOyAvLyB0aHJlYWRcbiAgdGhpcy5pID0gaTsgLy8gbnVtYmVyXG59XG5cblRyZWVOb2RlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTm9kZS5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiB0cmVlUm9vdChyb290KSB7XG4gIHZhciB0cmVlID0gbmV3IFRyZWVOb2RlKHJvb3QsIDApLFxuICAgICAgbm9kZSxcbiAgICAgIG5vZGVzID0gW3RyZWVdLFxuICAgICAgY2hpbGQsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGksXG4gICAgICBuO1xuXG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBpZiAoY2hpbGRyZW4gPSBub2RlLl8uY2hpbGRyZW4pIHtcbiAgICAgIG5vZGUuY2hpbGRyZW4gPSBuZXcgQXJyYXkobiA9IGNoaWxkcmVuLmxlbmd0aCk7XG4gICAgICBmb3IgKGkgPSBuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgbm9kZXMucHVzaChjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV0gPSBuZXcgVHJlZU5vZGUoY2hpbGRyZW5baV0sIGkpKTtcbiAgICAgICAgY2hpbGQucGFyZW50ID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAodHJlZS5wYXJlbnQgPSBuZXcgVHJlZU5vZGUobnVsbCwgMCkpLmNoaWxkcmVuID0gW3RyZWVdO1xuICByZXR1cm4gdHJlZTtcbn1cblxuLy8gTm9kZS1saW5rIHRyZWUgZGlhZ3JhbSB1c2luZyB0aGUgUmVpbmdvbGQtVGlsZm9yZCBcInRpZHlcIiBhbGdvcml0aG1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VwYXJhdGlvbiA9IGRlZmF1bHRTZXBhcmF0aW9uLFxuICAgICAgZHggPSAxLFxuICAgICAgZHkgPSAxLFxuICAgICAgbm9kZVNpemUgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHRyZWUocm9vdCkge1xuICAgIHZhciB0ID0gdHJlZVJvb3Qocm9vdCk7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBsYXlvdXQgdXNpbmcgQnVjaGhlaW0gZXQgYWwu4oCZcyBhbGdvcml0aG0uXG4gICAgdC5lYWNoQWZ0ZXIoZmlyc3RXYWxrKSwgdC5wYXJlbnQubSA9IC10Lno7XG4gICAgdC5lYWNoQmVmb3JlKHNlY29uZFdhbGspO1xuXG4gICAgLy8gSWYgYSBmaXhlZCBub2RlIHNpemUgaXMgc3BlY2lmaWVkLCBzY2FsZSB4IGFuZCB5LlxuICAgIGlmIChub2RlU2l6ZSkgcm9vdC5lYWNoQmVmb3JlKHNpemVOb2RlKTtcblxuICAgIC8vIElmIGEgZml4ZWQgdHJlZSBzaXplIGlzIHNwZWNpZmllZCwgc2NhbGUgeCBhbmQgeSBiYXNlZCBvbiB0aGUgZXh0ZW50LlxuICAgIC8vIENvbXB1dGUgdGhlIGxlZnQtbW9zdCwgcmlnaHQtbW9zdCwgYW5kIGRlcHRoLW1vc3Qgbm9kZXMgZm9yIGV4dGVudHMuXG4gICAgZWxzZSB7XG4gICAgICB2YXIgbGVmdCA9IHJvb3QsXG4gICAgICAgICAgcmlnaHQgPSByb290LFxuICAgICAgICAgIGJvdHRvbSA9IHJvb3Q7XG4gICAgICByb290LmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBpZiAobm9kZS54IDwgbGVmdC54KSBsZWZ0ID0gbm9kZTtcbiAgICAgICAgaWYgKG5vZGUueCA+IHJpZ2h0LngpIHJpZ2h0ID0gbm9kZTtcbiAgICAgICAgaWYgKG5vZGUuZGVwdGggPiBib3R0b20uZGVwdGgpIGJvdHRvbSA9IG5vZGU7XG4gICAgICB9KTtcbiAgICAgIHZhciBzID0gbGVmdCA9PT0gcmlnaHQgPyAxIDogc2VwYXJhdGlvbihsZWZ0LCByaWdodCkgLyAyLFxuICAgICAgICAgIHR4ID0gcyAtIGxlZnQueCxcbiAgICAgICAgICBreCA9IGR4IC8gKHJpZ2h0LnggKyBzICsgdHgpLFxuICAgICAgICAgIGt5ID0gZHkgLyAoYm90dG9tLmRlcHRoIHx8IDEpO1xuICAgICAgcm9vdC5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgbm9kZS54ID0gKG5vZGUueCArIHR4KSAqIGt4O1xuICAgICAgICBub2RlLnkgPSBub2RlLmRlcHRoICoga3k7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIC8vIENvbXB1dGVzIGEgcHJlbGltaW5hcnkgeC1jb29yZGluYXRlIGZvciB2LiBCZWZvcmUgdGhhdCwgRklSU1QgV0FMSyBpc1xuICAvLyBhcHBsaWVkIHJlY3Vyc2l2ZWx5IHRvIHRoZSBjaGlsZHJlbiBvZiB2LCBhcyB3ZWxsIGFzIHRoZSBmdW5jdGlvblxuICAvLyBBUFBPUlRJT04uIEFmdGVyIHNwYWNpbmcgb3V0IHRoZSBjaGlsZHJlbiBieSBjYWxsaW5nIEVYRUNVVEUgU0hJRlRTLCB0aGVcbiAgLy8gbm9kZSB2IGlzIHBsYWNlZCB0byB0aGUgbWlkcG9pbnQgb2YgaXRzIG91dGVybW9zdCBjaGlsZHJlbi5cbiAgZnVuY3Rpb24gZmlyc3RXYWxrKHYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuLFxuICAgICAgICBzaWJsaW5ncyA9IHYucGFyZW50LmNoaWxkcmVuLFxuICAgICAgICB3ID0gdi5pID8gc2libGluZ3Nbdi5pIC0gMV0gOiBudWxsO1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgZXhlY3V0ZVNoaWZ0cyh2KTtcbiAgICAgIHZhciBtaWRwb2ludCA9IChjaGlsZHJlblswXS56ICsgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0ueikgLyAyO1xuICAgICAgaWYgKHcpIHtcbiAgICAgICAgdi56ID0gdy56ICsgc2VwYXJhdGlvbih2Ll8sIHcuXyk7XG4gICAgICAgIHYubSA9IHYueiAtIG1pZHBvaW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdi56ID0gbWlkcG9pbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh3KSB7XG4gICAgICB2LnogPSB3LnogKyBzZXBhcmF0aW9uKHYuXywgdy5fKTtcbiAgICB9XG4gICAgdi5wYXJlbnQuQSA9IGFwcG9ydGlvbih2LCB3LCB2LnBhcmVudC5BIHx8IHNpYmxpbmdzWzBdKTtcbiAgfVxuXG4gIC8vIENvbXB1dGVzIGFsbCByZWFsIHgtY29vcmRpbmF0ZXMgYnkgc3VtbWluZyB1cCB0aGUgbW9kaWZpZXJzIHJlY3Vyc2l2ZWx5LlxuICBmdW5jdGlvbiBzZWNvbmRXYWxrKHYpIHtcbiAgICB2Ll8ueCA9IHYueiArIHYucGFyZW50Lm07XG4gICAgdi5tICs9IHYucGFyZW50Lm07XG4gIH1cblxuICAvLyBUaGUgY29yZSBvZiB0aGUgYWxnb3JpdGhtLiBIZXJlLCBhIG5ldyBzdWJ0cmVlIGlzIGNvbWJpbmVkIHdpdGggdGhlXG4gIC8vIHByZXZpb3VzIHN1YnRyZWVzLiBUaHJlYWRzIGFyZSB1c2VkIHRvIHRyYXZlcnNlIHRoZSBpbnNpZGUgYW5kIG91dHNpZGVcbiAgLy8gY29udG91cnMgb2YgdGhlIGxlZnQgYW5kIHJpZ2h0IHN1YnRyZWUgdXAgdG8gdGhlIGhpZ2hlc3QgY29tbW9uIGxldmVsLiBUaGVcbiAgLy8gdmVydGljZXMgdXNlZCBmb3IgdGhlIHRyYXZlcnNhbHMgYXJlIHZpKywgdmktLCB2by0sIGFuZCB2byssIHdoZXJlIHRoZVxuICAvLyBzdXBlcnNjcmlwdCBvIG1lYW5zIG91dHNpZGUgYW5kIGkgbWVhbnMgaW5zaWRlLCB0aGUgc3Vic2NyaXB0IC0gbWVhbnMgbGVmdFxuICAvLyBzdWJ0cmVlIGFuZCArIG1lYW5zIHJpZ2h0IHN1YnRyZWUuIEZvciBzdW1taW5nIHVwIHRoZSBtb2RpZmllcnMgYWxvbmcgdGhlXG4gIC8vIGNvbnRvdXIsIHdlIHVzZSByZXNwZWN0aXZlIHZhcmlhYmxlcyBzaSssIHNpLSwgc28tLCBhbmQgc28rLiBXaGVuZXZlciB0d29cbiAgLy8gbm9kZXMgb2YgdGhlIGluc2lkZSBjb250b3VycyBjb25mbGljdCwgd2UgY29tcHV0ZSB0aGUgbGVmdCBvbmUgb2YgdGhlXG4gIC8vIGdyZWF0ZXN0IHVuY29tbW9uIGFuY2VzdG9ycyB1c2luZyB0aGUgZnVuY3Rpb24gQU5DRVNUT1IgYW5kIGNhbGwgTU9WRVxuICAvLyBTVUJUUkVFIHRvIHNoaWZ0IHRoZSBzdWJ0cmVlIGFuZCBwcmVwYXJlIHRoZSBzaGlmdHMgb2Ygc21hbGxlciBzdWJ0cmVlcy5cbiAgLy8gRmluYWxseSwgd2UgYWRkIGEgbmV3IHRocmVhZCAoaWYgbmVjZXNzYXJ5KS5cbiAgZnVuY3Rpb24gYXBwb3J0aW9uKHYsIHcsIGFuY2VzdG9yKSB7XG4gICAgaWYgKHcpIHtcbiAgICAgIHZhciB2aXAgPSB2LFxuICAgICAgICAgIHZvcCA9IHYsXG4gICAgICAgICAgdmltID0gdyxcbiAgICAgICAgICB2b20gPSB2aXAucGFyZW50LmNoaWxkcmVuWzBdLFxuICAgICAgICAgIHNpcCA9IHZpcC5tLFxuICAgICAgICAgIHNvcCA9IHZvcC5tLFxuICAgICAgICAgIHNpbSA9IHZpbS5tLFxuICAgICAgICAgIHNvbSA9IHZvbS5tLFxuICAgICAgICAgIHNoaWZ0O1xuICAgICAgd2hpbGUgKHZpbSA9IG5leHRSaWdodCh2aW0pLCB2aXAgPSBuZXh0TGVmdCh2aXApLCB2aW0gJiYgdmlwKSB7XG4gICAgICAgIHZvbSA9IG5leHRMZWZ0KHZvbSk7XG4gICAgICAgIHZvcCA9IG5leHRSaWdodCh2b3ApO1xuICAgICAgICB2b3AuYSA9IHY7XG4gICAgICAgIHNoaWZ0ID0gdmltLnogKyBzaW0gLSB2aXAueiAtIHNpcCArIHNlcGFyYXRpb24odmltLl8sIHZpcC5fKTtcbiAgICAgICAgaWYgKHNoaWZ0ID4gMCkge1xuICAgICAgICAgIG1vdmVTdWJ0cmVlKG5leHRBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSwgdiwgc2hpZnQpO1xuICAgICAgICAgIHNpcCArPSBzaGlmdDtcbiAgICAgICAgICBzb3AgKz0gc2hpZnQ7XG4gICAgICAgIH1cbiAgICAgICAgc2ltICs9IHZpbS5tO1xuICAgICAgICBzaXAgKz0gdmlwLm07XG4gICAgICAgIHNvbSArPSB2b20ubTtcbiAgICAgICAgc29wICs9IHZvcC5tO1xuICAgICAgfVxuICAgICAgaWYgKHZpbSAmJiAhbmV4dFJpZ2h0KHZvcCkpIHtcbiAgICAgICAgdm9wLnQgPSB2aW07XG4gICAgICAgIHZvcC5tICs9IHNpbSAtIHNvcDtcbiAgICAgIH1cbiAgICAgIGlmICh2aXAgJiYgIW5leHRMZWZ0KHZvbSkpIHtcbiAgICAgICAgdm9tLnQgPSB2aXA7XG4gICAgICAgIHZvbS5tICs9IHNpcCAtIHNvbTtcbiAgICAgICAgYW5jZXN0b3IgPSB2O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYW5jZXN0b3I7XG4gIH1cblxuICBmdW5jdGlvbiBzaXplTm9kZShub2RlKSB7XG4gICAgbm9kZS54ICo9IGR4O1xuICAgIG5vZGUueSA9IG5vZGUuZGVwdGggKiBkeTtcbiAgfVxuXG4gIHRyZWUuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzZXBhcmF0aW9uID0geCwgdHJlZSkgOiBzZXBhcmF0aW9uO1xuICB9O1xuXG4gIHRyZWUuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IGZhbHNlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCB0cmVlKSA6IChub2RlU2l6ZSA/IG51bGwgOiBbZHgsIGR5XSk7XG4gIH07XG5cbiAgdHJlZS5ub2RlU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IHRydWUsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHRyZWUpIDogKG5vZGVTaXplID8gW2R4LCBkeV0gOiBudWxsKTtcbiAgfTtcblxuICByZXR1cm4gdHJlZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxuICAgICAgbm9kZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICBrID0gcGFyZW50LnZhbHVlICYmICh5MSAtIHkwKSAvIHBhcmVudC52YWx1ZTtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS54MCA9IHgwLCBub2RlLngxID0geDE7XG4gICAgbm9kZS55MCA9IHkwLCBub2RlLnkxID0geTAgKz0gbm9kZS52YWx1ZSAqIGs7XG4gIH1cbn1cbiIsImltcG9ydCB0cmVlbWFwRGljZSBmcm9tIFwiLi9kaWNlXCI7XG5pbXBvcnQgdHJlZW1hcFNsaWNlIGZyb20gXCIuL3NsaWNlXCI7XG5cbmV4cG9ydCB2YXIgcGhpID0gKDEgKyBNYXRoLnNxcnQoNSkpIC8gMjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyaWZ5UmF0aW8ocmF0aW8sIHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIHJvd3MgPSBbXSxcbiAgICAgIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxuICAgICAgcm93LFxuICAgICAgbm9kZVZhbHVlLFxuICAgICAgaTAgPSAwLFxuICAgICAgaTEgPSAwLFxuICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgIGR4LCBkeSxcbiAgICAgIHZhbHVlID0gcGFyZW50LnZhbHVlLFxuICAgICAgc3VtVmFsdWUsXG4gICAgICBtaW5WYWx1ZSxcbiAgICAgIG1heFZhbHVlLFxuICAgICAgbmV3UmF0aW8sXG4gICAgICBtaW5SYXRpbyxcbiAgICAgIGFscGhhLFxuICAgICAgYmV0YTtcblxuICB3aGlsZSAoaTAgPCBuKSB7XG4gICAgZHggPSB4MSAtIHgwLCBkeSA9IHkxIC0geTA7XG5cbiAgICAvLyBGaW5kIHRoZSBuZXh0IG5vbi1lbXB0eSBub2RlLlxuICAgIGRvIHN1bVZhbHVlID0gbm9kZXNbaTErK10udmFsdWU7IHdoaWxlICghc3VtVmFsdWUgJiYgaTEgPCBuKTtcbiAgICBtaW5WYWx1ZSA9IG1heFZhbHVlID0gc3VtVmFsdWU7XG4gICAgYWxwaGEgPSBNYXRoLm1heChkeSAvIGR4LCBkeCAvIGR5KSAvICh2YWx1ZSAqIHJhdGlvKTtcbiAgICBiZXRhID0gc3VtVmFsdWUgKiBzdW1WYWx1ZSAqIGFscGhhO1xuICAgIG1pblJhdGlvID0gTWF0aC5tYXgobWF4VmFsdWUgLyBiZXRhLCBiZXRhIC8gbWluVmFsdWUpO1xuXG4gICAgLy8gS2VlcCBhZGRpbmcgbm9kZXMgd2hpbGUgdGhlIGFzcGVjdCByYXRpbyBtYWludGFpbnMgb3IgaW1wcm92ZXMuXG4gICAgZm9yICg7IGkxIDwgbjsgKytpMSkge1xuICAgICAgc3VtVmFsdWUgKz0gbm9kZVZhbHVlID0gbm9kZXNbaTFdLnZhbHVlO1xuICAgICAgaWYgKG5vZGVWYWx1ZSA8IG1pblZhbHVlKSBtaW5WYWx1ZSA9IG5vZGVWYWx1ZTtcbiAgICAgIGlmIChub2RlVmFsdWUgPiBtYXhWYWx1ZSkgbWF4VmFsdWUgPSBub2RlVmFsdWU7XG4gICAgICBiZXRhID0gc3VtVmFsdWUgKiBzdW1WYWx1ZSAqIGFscGhhO1xuICAgICAgbmV3UmF0aW8gPSBNYXRoLm1heChtYXhWYWx1ZSAvIGJldGEsIGJldGEgLyBtaW5WYWx1ZSk7XG4gICAgICBpZiAobmV3UmF0aW8gPiBtaW5SYXRpbykgeyBzdW1WYWx1ZSAtPSBub2RlVmFsdWU7IGJyZWFrOyB9XG4gICAgICBtaW5SYXRpbyA9IG5ld1JhdGlvO1xuICAgIH1cblxuICAgIC8vIFBvc2l0aW9uIGFuZCByZWNvcmQgdGhlIHJvdyBvcmllbnRhdGlvbi5cbiAgICByb3dzLnB1c2gocm93ID0ge3ZhbHVlOiBzdW1WYWx1ZSwgZGljZTogZHggPCBkeSwgY2hpbGRyZW46IG5vZGVzLnNsaWNlKGkwLCBpMSl9KTtcbiAgICBpZiAocm93LmRpY2UpIHRyZWVtYXBEaWNlKHJvdywgeDAsIHkwLCB4MSwgdmFsdWUgPyB5MCArPSBkeSAqIHN1bVZhbHVlIC8gdmFsdWUgOiB5MSk7XG4gICAgZWxzZSB0cmVlbWFwU2xpY2Uocm93LCB4MCwgeTAsIHZhbHVlID8geDAgKz0gZHggKiBzdW1WYWx1ZSAvIHZhbHVlIDogeDEsIHkxKTtcbiAgICB2YWx1ZSAtPSBzdW1WYWx1ZSwgaTAgPSBpMTtcbiAgfVxuXG4gIHJldHVybiByb3dzO1xufVxuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKHJhdGlvKSB7XG5cbiAgZnVuY3Rpb24gc3F1YXJpZnkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHNxdWFyaWZ5UmF0aW8ocmF0aW8sIHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpO1xuICB9XG5cbiAgc3F1YXJpZnkucmF0aW8gPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGN1c3RvbSgoeCA9ICt4KSA+IDEgPyB4IDogMSk7XG4gIH07XG5cbiAgcmV0dXJuIHNxdWFyaWZ5O1xufSkocGhpKTtcbiIsImltcG9ydCByb3VuZE5vZGUgZnJvbSBcIi4vcm91bmRcIjtcbmltcG9ydCBzcXVhcmlmeSBmcm9tIFwiLi9zcXVhcmlmeVwiO1xuaW1wb3J0IHtyZXF1aXJlZH0gZnJvbSBcIi4uL2FjY2Vzc29yc1wiO1xuaW1wb3J0IGNvbnN0YW50LCB7Y29uc3RhbnRaZXJvfSBmcm9tIFwiLi4vY29uc3RhbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB0aWxlID0gc3F1YXJpZnksXG4gICAgICByb3VuZCA9IGZhbHNlLFxuICAgICAgZHggPSAxLFxuICAgICAgZHkgPSAxLFxuICAgICAgcGFkZGluZ1N0YWNrID0gWzBdLFxuICAgICAgcGFkZGluZ0lubmVyID0gY29uc3RhbnRaZXJvLFxuICAgICAgcGFkZGluZ1RvcCA9IGNvbnN0YW50WmVybyxcbiAgICAgIHBhZGRpbmdSaWdodCA9IGNvbnN0YW50WmVybyxcbiAgICAgIHBhZGRpbmdCb3R0b20gPSBjb25zdGFudFplcm8sXG4gICAgICBwYWRkaW5nTGVmdCA9IGNvbnN0YW50WmVybztcblxuICBmdW5jdGlvbiB0cmVlbWFwKHJvb3QpIHtcbiAgICByb290LngwID1cbiAgICByb290LnkwID0gMDtcbiAgICByb290LngxID0gZHg7XG4gICAgcm9vdC55MSA9IGR5O1xuICAgIHJvb3QuZWFjaEJlZm9yZShwb3NpdGlvbk5vZGUpO1xuICAgIHBhZGRpbmdTdGFjayA9IFswXTtcbiAgICBpZiAocm91bmQpIHJvb3QuZWFjaEJlZm9yZShyb3VuZE5vZGUpO1xuICAgIHJldHVybiByb290O1xuICB9XG5cbiAgZnVuY3Rpb24gcG9zaXRpb25Ob2RlKG5vZGUpIHtcbiAgICB2YXIgcCA9IHBhZGRpbmdTdGFja1tub2RlLmRlcHRoXSxcbiAgICAgICAgeDAgPSBub2RlLngwICsgcCxcbiAgICAgICAgeTAgPSBub2RlLnkwICsgcCxcbiAgICAgICAgeDEgPSBub2RlLngxIC0gcCxcbiAgICAgICAgeTEgPSBub2RlLnkxIC0gcDtcbiAgICBpZiAoeDEgPCB4MCkgeDAgPSB4MSA9ICh4MCArIHgxKSAvIDI7XG4gICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xuICAgIG5vZGUueDAgPSB4MDtcbiAgICBub2RlLnkwID0geTA7XG4gICAgbm9kZS54MSA9IHgxO1xuICAgIG5vZGUueTEgPSB5MTtcbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgcCA9IHBhZGRpbmdTdGFja1tub2RlLmRlcHRoICsgMV0gPSBwYWRkaW5nSW5uZXIobm9kZSkgLyAyO1xuICAgICAgeDAgKz0gcGFkZGluZ0xlZnQobm9kZSkgLSBwO1xuICAgICAgeTAgKz0gcGFkZGluZ1RvcChub2RlKSAtIHA7XG4gICAgICB4MSAtPSBwYWRkaW5nUmlnaHQobm9kZSkgLSBwO1xuICAgICAgeTEgLT0gcGFkZGluZ0JvdHRvbShub2RlKSAtIHA7XG4gICAgICBpZiAoeDEgPCB4MCkgeDAgPSB4MSA9ICh4MCArIHgxKSAvIDI7XG4gICAgICBpZiAoeTEgPCB5MCkgeTAgPSB5MSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICB0aWxlKG5vZGUsIHgwLCB5MCwgeDEsIHkxKTtcbiAgICB9XG4gIH1cblxuICB0cmVlbWFwLnJvdW5kID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJvdW5kID0gISF4LCB0cmVlbWFwKSA6IHJvdW5kO1xuICB9O1xuXG4gIHRyZWVtYXAuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCB0cmVlbWFwKSA6IFtkeCwgZHldO1xuICB9O1xuXG4gIHRyZWVtYXAudGlsZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWxlID0gcmVxdWlyZWQoeCksIHRyZWVtYXApIDogdGlsZTtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0cmVlbWFwLnBhZGRpbmdJbm5lcih4KS5wYWRkaW5nT3V0ZXIoeCkgOiB0cmVlbWFwLnBhZGRpbmdJbm5lcigpO1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ0lubmVyID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdPdXRlciA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRyZWVtYXAucGFkZGluZ1RvcCh4KS5wYWRkaW5nUmlnaHQoeCkucGFkZGluZ0JvdHRvbSh4KS5wYWRkaW5nTGVmdCh4KSA6IHRyZWVtYXAucGFkZGluZ1RvcCgpO1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ1RvcCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nVG9wID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHRyZWVtYXApIDogcGFkZGluZ1RvcDtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdSaWdodCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nUmlnaHQgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nUmlnaHQ7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nQm90dG9tID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdCb3R0b20gPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nQm90dG9tO1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ0xlZnQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0xlZnQgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nTGVmdDtcbiAgfTtcblxuICByZXR1cm4gdHJlZW1hcDtcbn1cbiIsImltcG9ydCB0cmVlbWFwRGljZSBmcm9tIFwiLi9kaWNlXCI7XG5pbXBvcnQgdHJlZW1hcFNsaWNlIGZyb20gXCIuL3NsaWNlXCI7XG5pbXBvcnQge3BoaSwgc3F1YXJpZnlSYXRpb30gZnJvbSBcIi4vc3F1YXJpZnlcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShyYXRpbykge1xuXG4gIGZ1bmN0aW9uIHJlc3F1YXJpZnkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIGlmICgocm93cyA9IHBhcmVudC5fc3F1YXJpZnkpICYmIChyb3dzLnJhdGlvID09PSByYXRpbykpIHtcbiAgICAgIHZhciByb3dzLFxuICAgICAgICAgIHJvdyxcbiAgICAgICAgICBub2RlcyxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGogPSAtMSxcbiAgICAgICAgICBuLFxuICAgICAgICAgIG0gPSByb3dzLmxlbmd0aCxcbiAgICAgICAgICB2YWx1ZSA9IHBhcmVudC52YWx1ZTtcblxuICAgICAgd2hpbGUgKCsraiA8IG0pIHtcbiAgICAgICAgcm93ID0gcm93c1tqXSwgbm9kZXMgPSByb3cuY2hpbGRyZW47XG4gICAgICAgIGZvciAoaSA9IHJvdy52YWx1ZSA9IDAsIG4gPSBub2Rlcy5sZW5ndGg7IGkgPCBuOyArK2kpIHJvdy52YWx1ZSArPSBub2Rlc1tpXS52YWx1ZTtcbiAgICAgICAgaWYgKHJvdy5kaWNlKSB0cmVlbWFwRGljZShyb3csIHgwLCB5MCwgeDEsIHkwICs9ICh5MSAtIHkwKSAqIHJvdy52YWx1ZSAvIHZhbHVlKTtcbiAgICAgICAgZWxzZSB0cmVlbWFwU2xpY2Uocm93LCB4MCwgeTAsIHgwICs9ICh4MSAtIHgwKSAqIHJvdy52YWx1ZSAvIHZhbHVlLCB5MSk7XG4gICAgICAgIHZhbHVlIC09IHJvdy52YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50Ll9zcXVhcmlmeSA9IHJvd3MgPSBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKTtcbiAgICAgIHJvd3MucmF0aW8gPSByYXRpbztcbiAgICB9XG4gIH1cblxuICByZXNxdWFyaWZ5LnJhdGlvID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBjdXN0b20oKHggPSAreCkgPiAxID8geCA6IDEpO1xuICB9O1xuXG4gIHJldHVybiByZXNxdWFyaWZ5O1xufSkocGhpKTtcbiIsImltcG9ydCBjcm9zcyBmcm9tIFwiLi9jcm9zc1wiO1xuXG5mdW5jdGlvbiBsZXhpY29ncmFwaGljT3JkZXIoYSwgYikge1xuICByZXR1cm4gYVswXSAtIGJbMF0gfHwgYVsxXSAtIGJbMV07XG59XG5cbi8vIENvbXB1dGVzIHRoZSB1cHBlciBjb252ZXggaHVsbCBwZXIgdGhlIG1vbm90b25lIGNoYWluIGFsZ29yaXRobS5cbi8vIEFzc3VtZXMgcG9pbnRzLmxlbmd0aCA+PSAzLCBpcyBzb3J0ZWQgYnkgeCwgdW5pcXVlIGluIHkuXG4vLyBSZXR1cm5zIGFuIGFycmF5IG9mIGluZGljZXMgaW50byBwb2ludHMgaW4gbGVmdC10by1yaWdodCBvcmRlci5cbmZ1bmN0aW9uIGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKHBvaW50cykge1xuICB2YXIgbiA9IHBvaW50cy5sZW5ndGgsXG4gICAgICBpbmRleGVzID0gWzAsIDFdLFxuICAgICAgc2l6ZSA9IDI7XG5cbiAgZm9yICh2YXIgaSA9IDI7IGkgPCBuOyArK2kpIHtcbiAgICB3aGlsZSAoc2l6ZSA+IDEgJiYgY3Jvc3MocG9pbnRzW2luZGV4ZXNbc2l6ZSAtIDJdXSwgcG9pbnRzW2luZGV4ZXNbc2l6ZSAtIDFdXSwgcG9pbnRzW2ldKSA8PSAwKSAtLXNpemU7XG4gICAgaW5kZXhlc1tzaXplKytdID0gaTtcbiAgfVxuXG4gIHJldHVybiBpbmRleGVzLnNsaWNlKDAsIHNpemUpOyAvLyByZW1vdmUgcG9wcGVkIHBvaW50c1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2ludHMpIHtcbiAgaWYgKChuID0gcG9pbnRzLmxlbmd0aCkgPCAzKSByZXR1cm4gbnVsbDtcblxuICB2YXIgaSxcbiAgICAgIG4sXG4gICAgICBzb3J0ZWRQb2ludHMgPSBuZXcgQXJyYXkobiksXG4gICAgICBmbGlwcGVkUG9pbnRzID0gbmV3IEFycmF5KG4pO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHNvcnRlZFBvaW50c1tpXSA9IFsrcG9pbnRzW2ldWzBdLCArcG9pbnRzW2ldWzFdLCBpXTtcbiAgc29ydGVkUG9pbnRzLnNvcnQobGV4aWNvZ3JhcGhpY09yZGVyKTtcbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgZmxpcHBlZFBvaW50c1tpXSA9IFtzb3J0ZWRQb2ludHNbaV1bMF0sIC1zb3J0ZWRQb2ludHNbaV1bMV1dO1xuXG4gIHZhciB1cHBlckluZGV4ZXMgPSBjb21wdXRlVXBwZXJIdWxsSW5kZXhlcyhzb3J0ZWRQb2ludHMpLFxuICAgICAgbG93ZXJJbmRleGVzID0gY29tcHV0ZVVwcGVySHVsbEluZGV4ZXMoZmxpcHBlZFBvaW50cyk7XG5cbiAgLy8gQ29uc3RydWN0IHRoZSBodWxsIHBvbHlnb24sIHJlbW92aW5nIHBvc3NpYmxlIGR1cGxpY2F0ZSBlbmRwb2ludHMuXG4gIHZhciBza2lwTGVmdCA9IGxvd2VySW5kZXhlc1swXSA9PT0gdXBwZXJJbmRleGVzWzBdLFxuICAgICAgc2tpcFJpZ2h0ID0gbG93ZXJJbmRleGVzW2xvd2VySW5kZXhlcy5sZW5ndGggLSAxXSA9PT0gdXBwZXJJbmRleGVzW3VwcGVySW5kZXhlcy5sZW5ndGggLSAxXSxcbiAgICAgIGh1bGwgPSBbXTtcblxuICAvLyBBZGQgdXBwZXIgaHVsbCBpbiByaWdodC10by1sIG9yZGVyLlxuICAvLyBUaGVuIGFkZCBsb3dlciBodWxsIGluIGxlZnQtdG8tcmlnaHQgb3JkZXIuXG4gIGZvciAoaSA9IHVwcGVySW5kZXhlcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgaHVsbC5wdXNoKHBvaW50c1tzb3J0ZWRQb2ludHNbdXBwZXJJbmRleGVzW2ldXVsyXV0pO1xuICBmb3IgKGkgPSArc2tpcExlZnQ7IGkgPCBsb3dlckluZGV4ZXMubGVuZ3RoIC0gc2tpcFJpZ2h0OyArK2kpIGh1bGwucHVzaChwb2ludHNbc29ydGVkUG9pbnRzW2xvd2VySW5kZXhlc1tpXV1bMl1dKTtcblxuICByZXR1cm4gaHVsbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKTtcbn1cbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbU5vcm1hbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tTm9ybWFsKG11LCBzaWdtYSkge1xuICAgIHZhciB4LCByO1xuICAgIG11ID0gbXUgPT0gbnVsbCA/IDAgOiArbXU7XG4gICAgc2lnbWEgPSBzaWdtYSA9PSBudWxsID8gMSA6ICtzaWdtYTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeTtcblxuICAgICAgLy8gSWYgYXZhaWxhYmxlLCB1c2UgdGhlIHNlY29uZCBwcmV2aW91c2x5LWdlbmVyYXRlZCB1bmlmb3JtIHJhbmRvbS5cbiAgICAgIGlmICh4ICE9IG51bGwpIHkgPSB4LCB4ID0gbnVsbDtcblxuICAgICAgLy8gT3RoZXJ3aXNlLCBnZW5lcmF0ZSBhIG5ldyB4IGFuZCB5LlxuICAgICAgZWxzZSBkbyB7XG4gICAgICAgIHggPSBzb3VyY2UoKSAqIDIgLSAxO1xuICAgICAgICB5ID0gc291cmNlKCkgKiAyIC0gMTtcbiAgICAgICAgciA9IHggKiB4ICsgeSAqIHk7XG4gICAgICB9IHdoaWxlICghciB8fCByID4gMSk7XG5cbiAgICAgIHJldHVybiBtdSArIHNpZ21hICogeSAqIE1hdGguc3FydCgtMiAqIE1hdGgubG9nKHIpIC8gcik7XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbU5vcm1hbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21Ob3JtYWw7XG5cbiAgcmV0dXJuIHJhbmRvbU5vcm1hbDtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tVW5pZm9ybShzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tVW5pZm9ybShtaW4sIG1heCkge1xuICAgIG1pbiA9IG1pbiA9PSBudWxsID8gMCA6ICttaW47XG4gICAgbWF4ID0gbWF4ID09IG51bGwgPyAxIDogK21heDtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgbWF4ID0gbWluLCBtaW4gPSAwO1xuICAgIGVsc2UgbWF4IC09IG1pbjtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc291cmNlKCkgKiBtYXggKyBtaW47XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbVVuaWZvcm0uc291cmNlID0gc291cmNlUmFuZG9tVW5pZm9ybTtcblxuICByZXR1cm4gcmFuZG9tVW5pZm9ybTtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tSXJ3aW5IYWxsKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21JcndpbkhhbGwobikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIHN1bSA9IDAsIGkgPSAwOyBpIDwgbjsgKytpKSBzdW0gKz0gc291cmNlKCk7XG4gICAgICByZXR1cm4gc3VtO1xuICAgIH07XG4gIH1cblxuICByYW5kb21JcndpbkhhbGwuc291cmNlID0gc291cmNlUmFuZG9tSXJ3aW5IYWxsO1xuXG4gIHJldHVybiByYW5kb21JcndpbkhhbGw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcbmltcG9ydCBub3JtYWwgZnJvbSBcIi4vbm9ybWFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21Mb2dOb3JtYWwoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbUxvZ05vcm1hbCgpIHtcbiAgICB2YXIgcmFuZG9tTm9ybWFsID0gbm9ybWFsLnNvdXJjZShzb3VyY2UpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE1hdGguZXhwKHJhbmRvbU5vcm1hbCgpKTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tTG9nTm9ybWFsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbUxvZ05vcm1hbDtcblxuICByZXR1cm4gcmFuZG9tTG9nTm9ybWFsO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5pbXBvcnQgaXJ3aW5IYWxsIGZyb20gXCIuL2lyd2luSGFsbFwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tQmF0ZXMoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbUJhdGVzKG4pIHtcbiAgICB2YXIgcmFuZG9tSXJ3aW5IYWxsID0gaXJ3aW5IYWxsLnNvdXJjZShzb3VyY2UpKG4pO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByYW5kb21JcndpbkhhbGwoKSAvIG47XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbUJhdGVzLnNvdXJjZSA9IHNvdXJjZVJhbmRvbUJhdGVzO1xuXG4gIHJldHVybiByYW5kb21CYXRlcztcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tRXhwb25lbnRpYWwoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbUV4cG9uZW50aWFsKGxhbWJkYSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAtTWF0aC5sb2coMSAtIHNvdXJjZSgpKSAvIGxhbWJkYTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tRXhwb25lbnRpYWwuc291cmNlID0gc291cmNlUmFuZG9tRXhwb25lbnRpYWw7XG5cbiAgcmV0dXJuIHJhbmRvbUV4cG9uZW50aWFsO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJleHBvcnQgZnVuY3Rpb24gaW5pdFJhbmdlKGRvbWFpbiwgcmFuZ2UpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHRoaXMucmFuZ2UoZG9tYWluKTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5yYW5nZShyYW5nZSkuZG9tYWluKGRvbWFpbik7IGJyZWFrO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEludGVycG9sYXRvcihkb21haW4sIGludGVycG9sYXRvcikge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IGJyZWFrO1xuICAgIGNhc2UgMTogdGhpcy5pbnRlcnBvbGF0b3IoZG9tYWluKTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5pbnRlcnBvbGF0b3IoaW50ZXJwb2xhdG9yKS5kb21haW4oZG9tYWluKTsgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJ2YXIgYXJyYXkgPSBBcnJheS5wcm90b3R5cGU7XG5cbmV4cG9ydCB2YXIgbWFwID0gYXJyYXkubWFwO1xuZXhwb3J0IHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuIiwiaW1wb3J0IHttYXB9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcblxuZXhwb3J0IHZhciBpbXBsaWNpdCA9IHtuYW1lOiBcImltcGxpY2l0XCJ9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRpbmFsKCkge1xuICB2YXIgaW5kZXggPSBtYXAoKSxcbiAgICAgIGRvbWFpbiA9IFtdLFxuICAgICAgcmFuZ2UgPSBbXSxcbiAgICAgIHVua25vd24gPSBpbXBsaWNpdDtcblxuICBmdW5jdGlvbiBzY2FsZShkKSB7XG4gICAgdmFyIGtleSA9IGQgKyBcIlwiLCBpID0gaW5kZXguZ2V0KGtleSk7XG4gICAgaWYgKCFpKSB7XG4gICAgICBpZiAodW5rbm93biAhPT0gaW1wbGljaXQpIHJldHVybiB1bmtub3duO1xuICAgICAgaW5kZXguc2V0KGtleSwgaSA9IGRvbWFpbi5wdXNoKGQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJhbmdlWyhpIC0gMSkgJSByYW5nZS5sZW5ndGhdO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbi5zbGljZSgpO1xuICAgIGRvbWFpbiA9IFtdLCBpbmRleCA9IG1hcCgpO1xuICAgIHZhciBpID0gLTEsIG4gPSBfLmxlbmd0aCwgZCwga2V5O1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWluZGV4LmhhcyhrZXkgPSAoZCA9IF9baV0pICsgXCJcIikpIGluZGV4LnNldChrZXksIGRvbWFpbi5wdXNoKGQpKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZS5jYWxsKF8pLCBzY2FsZSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBvcmRpbmFsKGRvbWFpbiwgcmFuZ2UpLnVua25vd24odW5rbm93bik7XG4gIH07XG5cbiAgaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xuXG4gIHJldHVybiBzY2FsZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gK3g7XG59XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2ludGVycG9sYXRlIGFzIGludGVycG9sYXRlVmFsdWUsIGludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJvdW5kfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bWFwLCBzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxudmFyIHVuaXQgPSBbMCwgMV07XG5cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gIHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemUoYSwgYikge1xuICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXG4gICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuICh4IC0gYSkgLyBiOyB9XG4gICAgICA6IGNvbnN0YW50KGlzTmFOKGIpID8gTmFOIDogMC41KTtcbn1cblxuZnVuY3Rpb24gY2xhbXBlcihkb21haW4pIHtcbiAgdmFyIGEgPSBkb21haW5bMF0sIGIgPSBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdLCB0O1xuICBpZiAoYSA+IGIpIHQgPSBhLCBhID0gYiwgYiA9IHQ7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLm1heChhLCBNYXRoLm1pbihiLCB4KSk7IH07XG59XG5cbi8vIG5vcm1hbGl6ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuLy8gaW50ZXJwb2xhdGUoYSwgYikodCkgdGFrZXMgYSBwYXJhbWV0ZXIgdCBpbiBbMCwxXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByYW5nZSB2YWx1ZSB4IGluIFthLGJdLlxuZnVuY3Rpb24gYmltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGQwID0gZG9tYWluWzBdLCBkMSA9IGRvbWFpblsxXSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXTtcbiAgaWYgKGQxIDwgZDApIGQwID0gbm9ybWFsaXplKGQxLCBkMCksIHIwID0gaW50ZXJwb2xhdGUocjEsIHIwKTtcbiAgZWxzZSBkMCA9IG5vcm1hbGl6ZShkMCwgZDEpLCByMCA9IGludGVycG9sYXRlKHIwLCByMSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiByMChkMCh4KSk7IH07XG59XG5cbmZ1bmN0aW9uIHBvbHltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGogPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMSxcbiAgICAgIGQgPSBuZXcgQXJyYXkoaiksXG4gICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgaSA9IC0xO1xuXG4gIC8vIFJldmVyc2UgZGVzY2VuZGluZyBkb21haW5zLlxuICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cblxuICB3aGlsZSAoKytpIDwgaikge1xuICAgIGRbaV0gPSBub3JtYWxpemUoZG9tYWluW2ldLCBkb21haW5baSArIDFdKTtcbiAgICByW2ldID0gaW50ZXJwb2xhdGUocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHZhciBpID0gYmlzZWN0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xuICAgIHJldHVybiByW2ldKGRbaV0oeCkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weShzb3VyY2UsIHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0XG4gICAgICAuZG9tYWluKHNvdXJjZS5kb21haW4oKSlcbiAgICAgIC5yYW5nZShzb3VyY2UucmFuZ2UoKSlcbiAgICAgIC5pbnRlcnBvbGF0ZShzb3VyY2UuaW50ZXJwb2xhdGUoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSlcbiAgICAgIC51bmtub3duKHNvdXJjZS51bmtub3duKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtZXIoKSB7XG4gIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgcmFuZ2UgPSB1bml0LFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVZhbHVlLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgdW50cmFuc2Zvcm0sXG4gICAgICB1bmtub3duLFxuICAgICAgY2xhbXAgPSBpZGVudGl0eSxcbiAgICAgIHBpZWNld2lzZSxcbiAgICAgIG91dHB1dCxcbiAgICAgIGlucHV0O1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgcGllY2V3aXNlID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSA+IDIgPyBwb2x5bWFwIDogYmltYXA7XG4gICAgb3V0cHV0ID0gaW5wdXQgPSBudWxsO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiAob3V0cHV0IHx8IChvdXRwdXQgPSBwaWVjZXdpc2UoZG9tYWluLm1hcCh0cmFuc2Zvcm0pLCByYW5nZSwgaW50ZXJwb2xhdGUpKSkodHJhbnNmb3JtKGNsYW1wKHgpKSk7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIGNsYW1wKHVudHJhbnNmb3JtKChpbnB1dCB8fCAoaW5wdXQgPSBwaWVjZXdpc2UocmFuZ2UsIGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgaW50ZXJwb2xhdGVOdW1iZXIpKSkoeSkpKTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gbWFwLmNhbGwoXywgbnVtYmVyKSwgY2xhbXAgPT09IGlkZW50aXR5IHx8IChjbGFtcCA9IGNsYW1wZXIoZG9tYWluKSksIHJlc2NhbGUoKSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHJhbmdlID0gc2xpY2UuY2FsbChfKSwgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVJvdW5kLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSBfID8gY2xhbXBlcihkb21haW4pIDogaWRlbnRpdHksIHNjYWxlKSA6IGNsYW1wICE9PSBpZGVudGl0eTtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0ZSA9IF8sIHJlc2NhbGUoKSkgOiBpbnRlcnBvbGF0ZTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbih0LCB1KSB7XG4gICAgdHJhbnNmb3JtID0gdCwgdW50cmFuc2Zvcm0gPSB1O1xuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRpbnVvdXModHJhbnNmb3JtLCB1bnRyYW5zZm9ybSkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoKSh0cmFuc2Zvcm0sIHVudHJhbnNmb3JtKTtcbn1cbiIsImltcG9ydCB7dGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtmb3JtYXQsIGZvcm1hdFByZWZpeCwgZm9ybWF0U3BlY2lmaWVyLCBwcmVjaXNpb25GaXhlZCwgcHJlY2lzaW9uUHJlZml4LCBwcmVjaXNpb25Sb3VuZH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgY291bnQsIHNwZWNpZmllcikge1xuICB2YXIgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCksXG4gICAgICBwcmVjaXNpb247XG4gIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIgPT0gbnVsbCA/IFwiLGZcIiA6IHNwZWNpZmllcik7XG4gIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcbiAgICBjYXNlIFwic1wiOiB7XG4gICAgICB2YXIgdmFsdWUgPSBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKTtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgICAgcmV0dXJuIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKTtcbiAgICB9XG4gICAgY2FzZSBcIlwiOlxuICAgIGNhc2UgXCJlXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJyXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblJvdW5kKHN0ZXAsIE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiZVwiKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZlwiOlxuICAgIGNhc2UgXCIlXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvbkZpeGVkKHN0ZXApKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCIlXCIpICogMjtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm9ybWF0KHNwZWNpZmllcik7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCwgdmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzIC0gZXhwb25lbnQoTWF0aC5hYnMoc3RlcCkpKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCBtYXgpIHtcbiAgc3RlcCA9IE1hdGguYWJzKHN0ZXApLCBtYXggPSBNYXRoLmFicyhtYXgpIC0gc3RlcDtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50KG1heCkgLSBleHBvbmVudChzdGVwKSkgKyAxO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXApIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IHt0aWNrcywgdGlja0luY3JlbWVudH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQgY29udGludW91cywge2NvcHksIGlkZW50aXR5fSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdFwiO1xuaW1wb3J0IHRpY2tGb3JtYXQgZnJvbSBcIi4vdGlja0Zvcm1hdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbGluZWFyaXNoKHNjYWxlKSB7XG4gIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50LCBzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xuXG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgaTAgPSAwLFxuICAgICAgICBpMSA9IGQubGVuZ3RoIC0gMSxcbiAgICAgICAgc3RhcnQgPSBkW2kwXSxcbiAgICAgICAgc3RvcCA9IGRbaTFdLFxuICAgICAgICBzdGVwO1xuXG4gICAgaWYgKHN0b3AgPCBzdGFydCkge1xuICAgICAgc3RlcCA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBzdGVwO1xuICAgICAgc3RlcCA9IGkwLCBpMCA9IGkxLCBpMSA9IHN0ZXA7XG4gICAgfVxuXG4gICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH1cblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgZFtpMF0gPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIGRvbWFpbihkKTtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIGRbaTFdID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH1cblxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmVhcigpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhpZGVudGl0eSwgaWRlbnRpdHkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyKCkpO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRvbWFpbiwgaW50ZXJ2YWwpIHtcbiAgZG9tYWluID0gZG9tYWluLnNsaWNlKCk7XG5cbiAgdmFyIGkwID0gMCxcbiAgICAgIGkxID0gZG9tYWluLmxlbmd0aCAtIDEsXG4gICAgICB4MCA9IGRvbWFpbltpMF0sXG4gICAgICB4MSA9IGRvbWFpbltpMV0sXG4gICAgICB0O1xuXG4gIGlmICh4MSA8IHgwKSB7XG4gICAgdCA9IGkwLCBpMCA9IGkxLCBpMSA9IHQ7XG4gICAgdCA9IHgwLCB4MCA9IHgxLCB4MSA9IHQ7XG4gIH1cblxuICBkb21haW5baTBdID0gaW50ZXJ2YWwuZmxvb3IoeDApO1xuICBkb21haW5baTFdID0gaW50ZXJ2YWwuY2VpbCh4MSk7XG4gIHJldHVybiBkb21haW47XG59XG4iLCJ2YXIgdDAgPSBuZXcgRGF0ZSxcbiAgICB0MSA9IG5ldyBEYXRlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuZXdJbnRlcnZhbChmbG9vcmksIG9mZnNldGksIGNvdW50LCBmaWVsZCkge1xuXG4gIGZ1bmN0aW9uIGludGVydmFsKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBhcmd1bWVudHMubGVuZ3RoID09PSAwID8gbmV3IERhdGUgOiBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICB9XG5cbiAgaW50ZXJ2YWwuZmxvb3IgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoK2RhdGUpKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5jZWlsID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKGRhdGUgLSAxKSksIG9mZnNldGkoZGF0ZSwgMSksIGZsb29yaShkYXRlKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yb3VuZCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgZDAgPSBpbnRlcnZhbChkYXRlKSxcbiAgICAgICAgZDEgPSBpbnRlcnZhbC5jZWlsKGRhdGUpO1xuICAgIHJldHVybiBkYXRlIC0gZDAgPCBkMSAtIGRhdGUgPyBkMCA6IGQxO1xuICB9O1xuXG4gIGludGVydmFsLm9mZnNldCA9IGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICByZXR1cm4gb2Zmc2V0aShkYXRlID0gbmV3IERhdGUoK2RhdGUpLCBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIHZhciByYW5nZSA9IFtdLCBwcmV2aW91cztcbiAgICBzdGFydCA9IGludGVydmFsLmNlaWwoc3RhcnQpO1xuICAgIHN0ZXAgPSBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKTtcbiAgICBpZiAoIShzdGFydCA8IHN0b3ApIHx8ICEoc3RlcCA+IDApKSByZXR1cm4gcmFuZ2U7IC8vIGFsc28gaGFuZGxlcyBJbnZhbGlkIERhdGVcbiAgICBkbyByYW5nZS5wdXNoKHByZXZpb3VzID0gbmV3IERhdGUoK3N0YXJ0KSksIG9mZnNldGkoc3RhcnQsIHN0ZXApLCBmbG9vcmkoc3RhcnQpO1xuICAgIHdoaWxlIChwcmV2aW91cyA8IHN0YXJ0ICYmIHN0YXJ0IDwgc3RvcCk7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9O1xuXG4gIGludGVydmFsLmZpbHRlciA9IGZ1bmN0aW9uKHRlc3QpIHtcbiAgICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkgd2hpbGUgKGZsb29yaShkYXRlKSwgIXRlc3QoZGF0ZSkpIGRhdGUuc2V0VGltZShkYXRlIC0gMSk7XG4gICAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkge1xuICAgICAgICBpZiAoc3RlcCA8IDApIHdoaWxlICgrK3N0ZXAgPD0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsIC0xKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfSBlbHNlIHdoaWxlICgtLXN0ZXAgPj0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsICsxKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGlmIChjb3VudCkge1xuICAgIGludGVydmFsLmNvdW50ID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgdDAuc2V0VGltZSgrc3RhcnQpLCB0MS5zZXRUaW1lKCtlbmQpO1xuICAgICAgZmxvb3JpKHQwKSwgZmxvb3JpKHQxKTtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKGNvdW50KHQwLCB0MSkpO1xuICAgIH07XG5cbiAgICBpbnRlcnZhbC5ldmVyeSA9IGZ1bmN0aW9uKHN0ZXApIHtcbiAgICAgIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgICAgcmV0dXJuICFpc0Zpbml0ZShzdGVwKSB8fCAhKHN0ZXAgPiAwKSA/IG51bGxcbiAgICAgICAgICA6ICEoc3RlcCA+IDEpID8gaW50ZXJ2YWxcbiAgICAgICAgICA6IGludGVydmFsLmZpbHRlcihmaWVsZFxuICAgICAgICAgICAgICA/IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGZpZWxkKGQpICUgc3RlcCA9PT0gMDsgfVxuICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGludGVydmFsLmNvdW50KDAsIGQpICUgc3RlcCA9PT0gMDsgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBpbnRlcnZhbDtcbn1cbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgeWVhciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG55ZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0RnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgeWVhcjtcbmV4cG9ydCB2YXIgeWVhcnMgPSB5ZWFyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciBtb250aCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXREYXRlKDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldE1vbnRoKCkgLSBzdGFydC5nZXRNb250aCgpICsgKGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtb250aDtcbmV4cG9ydCB2YXIgbW9udGhzID0gbW9udGgucmFuZ2U7XG4iLCJleHBvcnQgdmFyIGR1cmF0aW9uU2Vjb25kID0gMWUzO1xuZXhwb3J0IHZhciBkdXJhdGlvbk1pbnV0ZSA9IDZlNDtcbmV4cG9ydCB2YXIgZHVyYXRpb25Ib3VyID0gMzZlNTtcbmV4cG9ydCB2YXIgZHVyYXRpb25EYXkgPSA4NjRlNTtcbmV4cG9ydCB2YXIgZHVyYXRpb25XZWVrID0gNjA0OGU1O1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlLCBkdXJhdGlvbldlZWt9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbmZ1bmN0aW9uIHdlZWtkYXkoaSkge1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIChkYXRlLmdldERheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgc3VuZGF5ID0gd2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgbW9uZGF5ID0gd2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdHVlc2RheSA9IHdlZWtkYXkoMik7XG5leHBvcnQgdmFyIHdlZG5lc2RheSA9IHdlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHRodXJzZGF5ID0gd2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgZnJpZGF5ID0gd2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgc2F0dXJkYXkgPSB3ZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHN1bmRheXMgPSBzdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIG1vbmRheXMgPSBtb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHR1ZXNkYXlzID0gdHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgd2VkbmVzZGF5cyA9IHdlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdGh1cnNkYXlzID0gdGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIGZyaWRheXMgPSBmcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHNhdHVyZGF5cyA9IHNhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5LCBkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIGRheSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uRGF5O1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXREYXRlKCkgLSAxO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRheTtcbmV4cG9ydCB2YXIgZGF5cyA9IGRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXIsIGR1cmF0aW9uTWludXRlLCBkdXJhdGlvblNlY29uZH0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIGhvdXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAtIGRhdGUuZ2V0U2Vjb25kcygpICogZHVyYXRpb25TZWNvbmQgLSBkYXRlLmdldE1pbnV0ZXMoKSAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRIb3VycygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGhvdXI7XG5leHBvcnQgdmFyIGhvdXJzID0gaG91ci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciBtaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAtIGRhdGUuZ2V0U2Vjb25kcygpICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbWludXRlO1xuZXhwb3J0IHZhciBtaW51dGVzID0gbWludXRlLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoZGF0ZSAtIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uU2Vjb25kO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc2Vjb25kO1xuZXhwb3J0IHZhciBzZWNvbmRzID0gc2Vjb25kLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciBtaWxsaXNlY29uZCA9IGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAvLyBub29wXG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kIC0gc3RhcnQ7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxubWlsbGlzZWNvbmQuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIGsgPSBNYXRoLmZsb29yKGspO1xuICBpZiAoIWlzRmluaXRlKGspIHx8ICEoayA+IDApKSByZXR1cm4gbnVsbDtcbiAgaWYgKCEoayA+IDEpKSByZXR1cm4gbWlsbGlzZWNvbmQ7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGspICogayk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogayk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGs7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWlsbGlzZWNvbmQ7XG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uV2Vla30gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxuZnVuY3Rpb24gdXRjV2Vla2RheShpKSB7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gKGRhdGUuZ2V0VVRDRGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIHV0Y1N1bmRheSA9IHV0Y1dlZWtkYXkoMCk7XG5leHBvcnQgdmFyIHV0Y01vbmRheSA9IHV0Y1dlZWtkYXkoMSk7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXkgPSB1dGNXZWVrZGF5KDIpO1xuZXhwb3J0IHZhciB1dGNXZWRuZXNkYXkgPSB1dGNXZWVrZGF5KDMpO1xuZXhwb3J0IHZhciB1dGNUaHVyc2RheSA9IHV0Y1dlZWtkYXkoNCk7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheSA9IHV0Y1dlZWtkYXkoNSk7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5ID0gdXRjV2Vla2RheSg2KTtcblxuZXhwb3J0IHZhciB1dGNTdW5kYXlzID0gdXRjU3VuZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNNb25kYXlzID0gdXRjTW9uZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNUdWVzZGF5cyA9IHV0Y1R1ZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheXMgPSB1dGNXZWRuZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5cyA9IHV0Y1RodXJzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNGcmlkYXlzID0gdXRjRnJpZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNTYXR1cmRheXMgPSB1dGNTYXR1cmRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbkRheX0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIHV0Y0RheSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25EYXk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0RhdGUoKSAtIDE7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjRGF5O1xuZXhwb3J0IHZhciB1dGNEYXlzID0gdXRjRGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciB1dGNZZWFyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldFVUQ0Z1bGxZZWFyKCkgLSBzdGFydC5nZXRVVENGdWxsWWVhcigpO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbnV0Y1llYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRVVENGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1dGNZZWFyO1xuZXhwb3J0IHZhciB1dGNZZWFycyA9IHV0Y1llYXIucmFuZ2U7XG4iLCJpbXBvcnQge1xuICB0aW1lRGF5LFxuICB0aW1lU3VuZGF5LFxuICB0aW1lTW9uZGF5LFxuICB0aW1lVGh1cnNkYXksXG4gIHRpbWVZZWFyLFxuICB1dGNEYXksXG4gIHV0Y1N1bmRheSxcbiAgdXRjTW9uZGF5LFxuICB1dGNUaHVyc2RheSxcbiAgdXRjWWVhclxufSBmcm9tIFwiZDMtdGltZVwiO1xuXG5mdW5jdGlvbiBsb2NhbERhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkLnkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIHJldHVybiBuZXcgRGF0ZShkLnksIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpO1xufVxuXG5mdW5jdGlvbiB1dGNEYXRlKGQpIHtcbiAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoLTEsIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpKTtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xufVxuXG5mdW5jdGlvbiBuZXdEYXRlKHksIG0sIGQpIHtcbiAgcmV0dXJuIHt5OiB5LCBtOiBtLCBkOiBkLCBIOiAwLCBNOiAwLCBTOiAwLCBMOiAwfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TG9jYWxlKGxvY2FsZSkge1xuICB2YXIgbG9jYWxlX2RhdGVUaW1lID0gbG9jYWxlLmRhdGVUaW1lLFxuICAgICAgbG9jYWxlX2RhdGUgPSBsb2NhbGUuZGF0ZSxcbiAgICAgIGxvY2FsZV90aW1lID0gbG9jYWxlLnRpbWUsXG4gICAgICBsb2NhbGVfcGVyaW9kcyA9IGxvY2FsZS5wZXJpb2RzLFxuICAgICAgbG9jYWxlX3dlZWtkYXlzID0gbG9jYWxlLmRheXMsXG4gICAgICBsb2NhbGVfc2hvcnRXZWVrZGF5cyA9IGxvY2FsZS5zaG9ydERheXMsXG4gICAgICBsb2NhbGVfbW9udGhzID0gbG9jYWxlLm1vbnRocyxcbiAgICAgIGxvY2FsZV9zaG9ydE1vbnRocyA9IGxvY2FsZS5zaG9ydE1vbnRocztcblxuICB2YXIgcGVyaW9kUmUgPSBmb3JtYXRSZShsb2NhbGVfcGVyaW9kcyksXG4gICAgICBwZXJpb2RMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgd2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHNob3J0V2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5TG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydFdlZWtkYXlzKSxcbiAgICAgIG1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfbW9udGhzKSxcbiAgICAgIG1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9tb250aHMpLFxuICAgICAgc2hvcnRNb250aFJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0TW9udGhzKSxcbiAgICAgIHNob3J0TW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0TW9udGhzKTtcblxuICB2YXIgZm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0U2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0TWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBmb3JtYXRIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdEhvdXIxMixcbiAgICBcImpcIjogZm9ybWF0RGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdE1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRQZXJpb2QsXG4gICAgXCJxXCI6IGZvcm1hdFF1YXJ0ZXIsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0Wm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgdXRjRm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0VVRDU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRVVENXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRVVENTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRVVENNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0VVRDTWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBmb3JtYXRVVENIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdFVUQ0hvdXIxMixcbiAgICBcImpcIjogZm9ybWF0VVRDRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRVVENNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdFVUQ01vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRVVENNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRVVENQZXJpb2QsXG4gICAgXCJxXCI6IGZvcm1hdFVUQ1F1YXJ0ZXIsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRVVENTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRVVENXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRVVENZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRVVENGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0VVRDWm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgcGFyc2VzID0ge1xuICAgIFwiYVwiOiBwYXJzZVNob3J0V2Vla2RheSxcbiAgICBcIkFcIjogcGFyc2VXZWVrZGF5LFxuICAgIFwiYlwiOiBwYXJzZVNob3J0TW9udGgsXG4gICAgXCJCXCI6IHBhcnNlTW9udGgsXG4gICAgXCJjXCI6IHBhcnNlTG9jYWxlRGF0ZVRpbWUsXG4gICAgXCJkXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICBcImVcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBwYXJzZU1pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJJXCI6IHBhcnNlSG91cjI0LFxuICAgIFwialwiOiBwYXJzZURheU9mWWVhcixcbiAgICBcIkxcIjogcGFyc2VNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IHBhcnNlTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IHBhcnNlTWludXRlcyxcbiAgICBcInBcIjogcGFyc2VQZXJpb2QsXG4gICAgXCJxXCI6IHBhcnNlUXVhcnRlcixcbiAgICBcIlFcIjogcGFyc2VVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBwYXJzZVNlY29uZHMsXG4gICAgXCJ1XCI6IHBhcnNlV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogcGFyc2VXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBwYXJzZVdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IHBhcnNlV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogcGFyc2VXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBwYXJzZUxvY2FsZURhdGUsXG4gICAgXCJYXCI6IHBhcnNlTG9jYWxlVGltZSxcbiAgICBcInlcIjogcGFyc2VZZWFyLFxuICAgIFwiWVwiOiBwYXJzZUZ1bGxZZWFyLFxuICAgIFwiWlwiOiBwYXJzZVpvbmUsXG4gICAgXCIlXCI6IHBhcnNlTGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICAvLyBUaGVzZSByZWN1cnNpdmUgZGlyZWN0aXZlIGRlZmluaXRpb25zIG11c3QgYmUgZGVmZXJyZWQuXG4gIGZvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIGZvcm1hdHMpO1xuICB1dGNGb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCB1dGNGb3JtYXRzKTtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyLCBmb3JtYXRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBbXSxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgICAgYyxcbiAgICAgICAgICBwYWQsXG4gICAgICAgICAgZm9ybWF0O1xuXG4gICAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSk7XG5cbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChzcGVjaWZpZXIuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcbiAgICAgICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgICAgIGlmICgocGFkID0gcGFkc1tjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpXSkgIT0gbnVsbCkgYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKTtcbiAgICAgICAgICBlbHNlIHBhZCA9IGMgPT09IFwiZVwiID8gXCIgXCIgOiBcIjBcIjtcbiAgICAgICAgICBpZiAoZm9ybWF0ID0gZm9ybWF0c1tjXSkgYyA9IGZvcm1hdChkYXRlLCBwYWQpO1xuICAgICAgICAgIHN0cmluZy5wdXNoKGMpO1xuICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgcmV0dXJuIHN0cmluZy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBuZXdQYXJzZShzcGVjaWZpZXIsIFopIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgZCA9IG5ld0RhdGUoMTkwMCwgdW5kZWZpbmVkLCAxKSxcbiAgICAgICAgICBpID0gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcgKz0gXCJcIiwgMCksXG4gICAgICAgICAgd2VlaywgZGF5O1xuICAgICAgaWYgKGkgIT0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgIC8vIElmIGEgVU5JWCB0aW1lc3RhbXAgaXMgc3BlY2lmaWVkLCByZXR1cm4gaXQuXG4gICAgICBpZiAoXCJRXCIgaW4gZCkgcmV0dXJuIG5ldyBEYXRlKGQuUSk7XG4gICAgICBpZiAoXCJzXCIgaW4gZCkgcmV0dXJuIG5ldyBEYXRlKGQucyAqIDEwMDAgKyAoXCJMXCIgaW4gZCA/IGQuTCA6IDApKTtcblxuICAgICAgLy8gSWYgdGhpcyBpcyB1dGNQYXJzZSwgbmV2ZXIgdXNlIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAgICAgIGlmIChaICYmICEoXCJaXCIgaW4gZCkpIGQuWiA9IDA7XG5cbiAgICAgIC8vIFRoZSBhbS1wbSBmbGFnIGlzIDAgZm9yIEFNLCBhbmQgMSBmb3IgUE0uXG4gICAgICBpZiAoXCJwXCIgaW4gZCkgZC5IID0gZC5IICUgMTIgKyBkLnAgKiAxMjtcblxuICAgICAgLy8gSWYgdGhlIG1vbnRoIHdhcyBub3Qgc3BlY2lmaWVkLCBpbmhlcml0IGZyb20gdGhlIHF1YXJ0ZXIuXG4gICAgICBpZiAoZC5tID09PSB1bmRlZmluZWQpIGQubSA9IFwicVwiIGluIGQgPyBkLnEgOiAwO1xuXG4gICAgICAvLyBDb252ZXJ0IGRheS1vZi13ZWVrIGFuZCB3ZWVrLW9mLXllYXIgdG8gZGF5LW9mLXllYXIuXG4gICAgICBpZiAoXCJWXCIgaW4gZCkge1xuICAgICAgICBpZiAoZC5WIDwgMSB8fCBkLlYgPiA1MykgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSAxO1xuICAgICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSksIGRheSA9IHdlZWsuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdXRjTW9uZGF5LmNlaWwod2VlaykgOiB1dGNNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHV0Y0RheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldFVUQ0RhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2VlayA9IGxvY2FsRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLCBkYXkgPSB3ZWVrLmdldERheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IHRpbWVNb25kYXkuY2VpbCh3ZWVrKSA6IHRpbWVNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHRpbWVEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldE1vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXREYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gXCJ1XCIgaW4gZCA/IGQudSAlIDcgOiBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgIGRheSA9IFwiWlwiIGluIGQgPyB1dGNEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSkuZ2V0VVRDRGF5KCkgOiBsb2NhbERhdGUobmV3RGF0ZShkLnksIDAsIDEpKS5nZXREYXkoKTtcbiAgICAgICAgZC5tID0gMDtcbiAgICAgICAgZC5kID0gXCJXXCIgaW4gZCA/IChkLncgKyA2KSAlIDcgKyBkLlcgKiA3IC0gKGRheSArIDUpICUgNyA6IGQudyArIGQuVSAqIDcgLSAoZGF5ICsgNikgJSA3O1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBhIHRpbWUgem9uZSBpcyBzcGVjaWZpZWQsIGFsbCBmaWVsZHMgYXJlIGludGVycHJldGVkIGFzIFVUQyBhbmQgdGhlblxuICAgICAgLy8gb2Zmc2V0IGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIHRpbWUgem9uZS5cbiAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgIGQuSCArPSBkLlogLyAxMDAgfCAwO1xuICAgICAgICBkLk0gKz0gZC5aICUgMTAwO1xuICAgICAgICByZXR1cm4gdXRjRGF0ZShkKTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBhbGwgZmllbGRzIGFyZSBpbiBsb2NhbCB0aW1lLlxuICAgICAgcmV0dXJuIGxvY2FsRGF0ZShkKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcsIGopIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICBtID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgYyxcbiAgICAgICAgcGFyc2U7XG5cbiAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckNvZGVBdChpKyspO1xuICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckF0KGkrKyk7XG4gICAgICAgIHBhcnNlID0gcGFyc2VzW2MgaW4gcGFkcyA/IHNwZWNpZmllci5jaGFyQXQoaSsrKSA6IGNdO1xuICAgICAgICBpZiAoIXBhcnNlIHx8ICgoaiA9IHBhcnNlKGQsIHN0cmluZywgaikpIDwgMCkpIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gajtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUGVyaW9kKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gcGVyaW9kUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQucCA9IHBlcmlvZExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNob3J0V2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0V2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSBzaG9ydFdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gd2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSB3ZWVrZGF5TG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0TW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gc2hvcnRNb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gbW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gbW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGVUaW1lLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX3RpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXREYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0TW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFBlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRRdWFydGVyKGQpIHtcbiAgICByZXR1cm4gMSArIH5+KGQuZ2V0TW9udGgoKSAvIDMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDU2hvcnRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0V2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3dlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDU2hvcnRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydE1vbnRoc1tkLmdldFVUQ01vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDTW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENQZXJpb2QoZCkge1xuICAgIHJldHVybiBsb2NhbGVfcGVyaW9kc1srKGQuZ2V0VVRDSG91cnMoKSA+PSAxMildO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDUXVhcnRlcihkKSB7XG4gICAgcmV0dXJuIDEgKyB+fihkLmdldFVUQ01vbnRoKCkgLyAzKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCBmb3JtYXRzKTtcbiAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBmO1xuICAgIH0sXG4gICAgcGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIgKz0gXCJcIiwgZmFsc2UpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfSxcbiAgICB1dGNGb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIHV0Y0Zvcm1hdHMpO1xuICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSxcbiAgICB1dGNQYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciArPSBcIlwiLCB0cnVlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHBhZHMgPSB7XCItXCI6IFwiXCIsIFwiX1wiOiBcIiBcIiwgXCIwXCI6IFwiMFwifSxcbiAgICBudW1iZXJSZSA9IC9eXFxzKlxcZCsvLCAvLyBub3RlOiBpZ25vcmVzIG5leHQgZGlyZWN0aXZlXG4gICAgcGVyY2VudFJlID0gL14lLyxcbiAgICByZXF1b3RlUmUgPSAvW1xcXFxeJCorP3xbXFxdKCkue31dL2c7XG5cbmZ1bmN0aW9uIHBhZCh2YWx1ZSwgZmlsbCwgd2lkdGgpIHtcbiAgdmFyIHNpZ24gPSB2YWx1ZSA8IDAgPyBcIi1cIiA6IFwiXCIsXG4gICAgICBzdHJpbmcgPSAoc2lnbiA/IC12YWx1ZSA6IHZhbHVlKSArIFwiXCIsXG4gICAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICByZXR1cm4gc2lnbiArIChsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgKyBzdHJpbmcgOiBzdHJpbmcpO1xufVxuXG5mdW5jdGlvbiByZXF1b3RlKHMpIHtcbiAgcmV0dXJuIHMucmVwbGFjZShyZXF1b3RlUmUsIFwiXFxcXCQmXCIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRSZShuYW1lcykge1xuICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oPzpcIiArIG5hbWVzLm1hcChyZXF1b3RlKS5qb2luKFwifFwiKSArIFwiKVwiLCBcImlcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExvb2t1cChuYW1lcykge1xuICB2YXIgbWFwID0ge30sIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIG1hcFtuYW1lc1tpXS50b0xvd2VyQ2FzZSgpXSA9IGk7XG4gIHJldHVybiBtYXA7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlclN1bmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLncgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC51ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuVSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlcklTTyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlYgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJNb25kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5XID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VGdWxsWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNCkpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0gKyAoK25bMF0gPiA2OCA/IDE5MDAgOiAyMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVpvbmUoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gL14oWil8KFsrLV1cXGRcXGQpKD86Oj8oXFxkXFxkKSk/Ly5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICByZXR1cm4gbiA/IChkLlogPSBuWzFdID8gMCA6IC0oblsyXSArIChuWzNdIHx8IFwiMDBcIikpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlUXVhcnRlcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLnEgPSBuWzBdICogMyAtIDMsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNb250aE51bWJlcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLm0gPSBuWzBdIC0gMSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZlllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gMCwgZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIb3VyMjQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5IID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaW51dGVzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuTSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbGxpc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLkwgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pY3Jvc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICByZXR1cm4gbiA/IChkLkwgPSBNYXRoLmZsb29yKG5bMF0gLyAxMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUxpdGVyYWxQZXJjZW50KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IHBlcmNlbnRSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IGkgKyBuWzBdLmxlbmd0aCA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXAoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLlEgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5zID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXREYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB0aW1lRGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pY3Jvc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkgKyBcIjAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNb250aE51bWJlcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNb250aCgpICsgMSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbnV0ZXMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0U2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRTZWNvbmRzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5KGQpIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIHJldHVybiBkYXkgPT09IDAgPyA3IDogZGF5O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh0aW1lU3VuZGF5LmNvdW50KHRpbWVZZWFyKGQpIC0gMSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHRpbWVUaHVyc2RheShkKSA6IHRpbWVUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKHRpbWVUaHVyc2RheS5jb3VudCh0aW1lWWVhcihkKSwgZCkgKyAodGltZVllYXIoZCkuZ2V0RGF5KCkgPT09IDQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla2RheU51bWJlclN1bmRheShkKSB7XG4gIHJldHVybiBkLmdldERheSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh0aW1lTW9uZGF5LmNvdW50KHRpbWVZZWFyKGQpIC0gMSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRGdWxsWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRab25lKGQpIHtcbiAgdmFyIHogPSBkLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gIHJldHVybiAoeiA+IDAgPyBcIi1cIiA6ICh6ICo9IC0xLCBcIitcIikpXG4gICAgICArIHBhZCh6IC8gNjAgfCAwLCBcIjBcIiwgMilcbiAgICAgICsgcGFkKHogJSA2MCwgXCIwXCIsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZk1vbnRoKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0RhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDSG91cjEyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0hvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoMSArIHV0Y0RheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pY3Jvc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkgKyBcIjAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNb250aE51bWJlcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNb250aCgpICsgMSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pbnV0ZXMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDU2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENTZWNvbmRzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5KGQpIHtcbiAgdmFyIGRvdyA9IGQuZ2V0VVRDRGF5KCk7XG4gIHJldHVybiBkb3cgPT09IDAgPyA3IDogZG93O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh1dGNTdW5kYXkuY291bnQodXRjWWVhcihkKSAtIDEsIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlcklTTyhkLCBwKSB7XG4gIHZhciBkYXkgPSBkLmdldFVUQ0RheSgpO1xuICBkID0gKGRheSA+PSA0IHx8IGRheSA9PT0gMCkgPyB1dGNUaHVyc2RheShkKSA6IHV0Y1RodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQodXRjVGh1cnNkYXkuY291bnQodXRjWWVhcihkKSwgZCkgKyAodXRjWWVhcihkKS5nZXRVVENEYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0VVRDRGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y01vbmRheS5jb3VudCh1dGNZZWFyKGQpIC0gMSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENGdWxsWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENab25lKCkge1xuICByZXR1cm4gXCIrMDAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRMaXRlcmFsUGVyY2VudCgpIHtcbiAgcmV0dXJuIFwiJVwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbml4VGltZXN0YW1wKGQpIHtcbiAgcmV0dXJuICtkO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyhkKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKCtkIC8gMTAwMCk7XG59XG4iLCJpbXBvcnQgZm9ybWF0TG9jYWxlIGZyb20gXCIuL2xvY2FsZS5qc1wiO1xuXG52YXIgbG9jYWxlO1xuZXhwb3J0IHZhciB0aW1lRm9ybWF0O1xuZXhwb3J0IHZhciB0aW1lUGFyc2U7XG5leHBvcnQgdmFyIHV0Y0Zvcm1hdDtcbmV4cG9ydCB2YXIgdXRjUGFyc2U7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICBkYXRlVGltZTogXCIleCwgJVhcIixcbiAgZGF0ZTogXCIlLW0vJS1kLyVZXCIsXG4gIHRpbWU6IFwiJS1JOiVNOiVTICVwXCIsXG4gIHBlcmlvZHM6IFtcIkFNXCIsIFwiUE1cIl0sXG4gIGRheXM6IFtcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCJdLFxuICBzaG9ydERheXM6IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXSxcbiAgbW9udGhzOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXSxcbiAgc2hvcnRNb250aHM6IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICBsb2NhbGUgPSBmb3JtYXRMb2NhbGUoZGVmaW5pdGlvbik7XG4gIHRpbWVGb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICB0aW1lUGFyc2UgPSBsb2NhbGUucGFyc2U7XG4gIHV0Y0Zvcm1hdCA9IGxvY2FsZS51dGNGb3JtYXQ7XG4gIHV0Y1BhcnNlID0gbG9jYWxlLnV0Y1BhcnNlO1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiaW1wb3J0IHtiaXNlY3RvciwgdGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHt0aW1lWWVhciwgdGltZU1vbnRoLCB0aW1lV2VlaywgdGltZURheSwgdGltZUhvdXIsIHRpbWVNaW51dGUsIHRpbWVTZWNvbmQsIHRpbWVNaWxsaXNlY29uZH0gZnJvbSBcImQzLXRpbWVcIjtcbmltcG9ydCB7dGltZUZvcm1hdH0gZnJvbSBcImQzLXRpbWUtZm9ybWF0XCI7XG5pbXBvcnQge21hcH0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBjb250aW51b3VzLCB7Y29weSwgaWRlbnRpdHl9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5pbXBvcnQgbmljZSBmcm9tIFwiLi9uaWNlXCI7XG5cbnZhciBkdXJhdGlvblNlY29uZCA9IDEwMDAsXG4gICAgZHVyYXRpb25NaW51dGUgPSBkdXJhdGlvblNlY29uZCAqIDYwLFxuICAgIGR1cmF0aW9uSG91ciA9IGR1cmF0aW9uTWludXRlICogNjAsXG4gICAgZHVyYXRpb25EYXkgPSBkdXJhdGlvbkhvdXIgKiAyNCxcbiAgICBkdXJhdGlvbldlZWsgPSBkdXJhdGlvbkRheSAqIDcsXG4gICAgZHVyYXRpb25Nb250aCA9IGR1cmF0aW9uRGF5ICogMzAsXG4gICAgZHVyYXRpb25ZZWFyID0gZHVyYXRpb25EYXkgKiAzNjU7XG5cbmZ1bmN0aW9uIGRhdGUodCkge1xuICByZXR1cm4gbmV3IERhdGUodCk7XG59XG5cbmZ1bmN0aW9uIG51bWJlcih0KSB7XG4gIHJldHVybiB0IGluc3RhbmNlb2YgRGF0ZSA/ICt0IDogK25ldyBEYXRlKCt0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGVuZGFyKHllYXIsIG1vbnRoLCB3ZWVrLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCwgZm9ybWF0KSB7XG4gIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoaWRlbnRpdHksIGlkZW50aXR5KSxcbiAgICAgIGludmVydCA9IHNjYWxlLmludmVydCxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICB2YXIgZm9ybWF0TWlsbGlzZWNvbmQgPSBmb3JtYXQoXCIuJUxcIiksXG4gICAgICBmb3JtYXRTZWNvbmQgPSBmb3JtYXQoXCI6JVNcIiksXG4gICAgICBmb3JtYXRNaW51dGUgPSBmb3JtYXQoXCIlSTolTVwiKSxcbiAgICAgIGZvcm1hdEhvdXIgPSBmb3JtYXQoXCIlSSAlcFwiKSxcbiAgICAgIGZvcm1hdERheSA9IGZvcm1hdChcIiVhICVkXCIpLFxuICAgICAgZm9ybWF0V2VlayA9IGZvcm1hdChcIiViICVkXCIpLFxuICAgICAgZm9ybWF0TW9udGggPSBmb3JtYXQoXCIlQlwiKSxcbiAgICAgIGZvcm1hdFllYXIgPSBmb3JtYXQoXCIlWVwiKTtcblxuICB2YXIgdGlja0ludGVydmFscyA9IFtcbiAgICBbc2Vjb25kLCAgMSwgICAgICBkdXJhdGlvblNlY29uZF0sXG4gICAgW3NlY29uZCwgIDUsICA1ICogZHVyYXRpb25TZWNvbmRdLFxuICAgIFtzZWNvbmQsIDE1LCAxNSAqIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbc2Vjb25kLCAzMCwgMzAgKiBkdXJhdGlvblNlY29uZF0sXG4gICAgW21pbnV0ZSwgIDEsICAgICAgZHVyYXRpb25NaW51dGVdLFxuICAgIFttaW51dGUsICA1LCAgNSAqIGR1cmF0aW9uTWludXRlXSxcbiAgICBbbWludXRlLCAxNSwgMTUgKiBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgW21pbnV0ZSwgMzAsIDMwICogZHVyYXRpb25NaW51dGVdLFxuICAgIFsgIGhvdXIsICAxLCAgICAgIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICBob3VyLCAgMywgIDMgKiBkdXJhdGlvbkhvdXIgIF0sXG4gICAgWyAgaG91ciwgIDYsICA2ICogZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgIGhvdXIsIDEyLCAxMiAqIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICAgZGF5LCAgMSwgICAgICBkdXJhdGlvbkRheSAgIF0sXG4gICAgWyAgIGRheSwgIDIsICAyICogZHVyYXRpb25EYXkgICBdLFxuICAgIFsgIHdlZWssICAxLCAgICAgIGR1cmF0aW9uV2VlayAgXSxcbiAgICBbIG1vbnRoLCAgMSwgICAgICBkdXJhdGlvbk1vbnRoIF0sXG4gICAgWyBtb250aCwgIDMsICAzICogZHVyYXRpb25Nb250aCBdLFxuICAgIFsgIHllYXIsICAxLCAgICAgIGR1cmF0aW9uWWVhciAgXVxuICBdO1xuXG4gIGZ1bmN0aW9uIHRpY2tGb3JtYXQoZGF0ZSkge1xuICAgIHJldHVybiAoc2Vjb25kKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1pbGxpc2Vjb25kXG4gICAgICAgIDogbWludXRlKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdFNlY29uZFxuICAgICAgICA6IGhvdXIoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TWludXRlXG4gICAgICAgIDogZGF5KGRhdGUpIDwgZGF0ZSA/IGZvcm1hdEhvdXJcbiAgICAgICAgOiBtb250aChkYXRlKSA8IGRhdGUgPyAod2VlayhkYXRlKSA8IGRhdGUgPyBmb3JtYXREYXkgOiBmb3JtYXRXZWVrKVxuICAgICAgICA6IHllYXIoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TW9udGhcbiAgICAgICAgOiBmb3JtYXRZZWFyKShkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2tJbnRlcnZhbChpbnRlcnZhbCwgc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICBpZiAoaW50ZXJ2YWwgPT0gbnVsbCkgaW50ZXJ2YWwgPSAxMDtcblxuICAgIC8vIElmIGEgZGVzaXJlZCB0aWNrIGNvdW50IGlzIHNwZWNpZmllZCwgcGljayBhIHJlYXNvbmFibGUgdGljayBpbnRlcnZhbFxuICAgIC8vIGJhc2VkIG9uIHRoZSBleHRlbnQgb2YgdGhlIGRvbWFpbiBhbmQgYSByb3VnaCBlc3RpbWF0ZSBvZiB0aWNrIHNpemUuXG4gICAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaW50ZXJ2YWwgaXMgYWxyZWFkeSBhIHRpbWUgaW50ZXJ2YWwgYW5kIHVzZSBpdC5cbiAgICBpZiAodHlwZW9mIGludGVydmFsID09PSBcIm51bWJlclwiKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIGludGVydmFsLFxuICAgICAgICAgIGkgPSBiaXNlY3RvcihmdW5jdGlvbihpKSB7IHJldHVybiBpWzJdOyB9KS5yaWdodCh0aWNrSW50ZXJ2YWxzLCB0YXJnZXQpO1xuICAgICAgaWYgKGkgPT09IHRpY2tJbnRlcnZhbHMubGVuZ3RoKSB7XG4gICAgICAgIHN0ZXAgPSB0aWNrU3RlcChzdGFydCAvIGR1cmF0aW9uWWVhciwgc3RvcCAvIGR1cmF0aW9uWWVhciwgaW50ZXJ2YWwpO1xuICAgICAgICBpbnRlcnZhbCA9IHllYXI7XG4gICAgICB9IGVsc2UgaWYgKGkpIHtcbiAgICAgICAgaSA9IHRpY2tJbnRlcnZhbHNbdGFyZ2V0IC8gdGlja0ludGVydmFsc1tpIC0gMV1bMl0gPCB0aWNrSW50ZXJ2YWxzW2ldWzJdIC8gdGFyZ2V0ID8gaSAtIDEgOiBpXTtcbiAgICAgICAgc3RlcCA9IGlbMV07XG4gICAgICAgIGludGVydmFsID0gaVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ZXAgPSBNYXRoLm1heCh0aWNrU3RlcChzdGFydCwgc3RvcCwgaW50ZXJ2YWwpLCAxKTtcbiAgICAgICAgaW50ZXJ2YWwgPSBtaWxsaXNlY29uZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RlcCA9PSBudWxsID8gaW50ZXJ2YWwgOiBpbnRlcnZhbC5ldmVyeShzdGVwKTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoaW52ZXJ0KHkpKTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBkb21haW4obWFwLmNhbGwoXywgbnVtYmVyKSkgOiBkb21haW4oKS5tYXAoZGF0ZSk7XG4gIH07XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihpbnRlcnZhbCwgc3RlcCkge1xuICAgIHZhciBkID0gZG9tYWluKCksXG4gICAgICAgIHQwID0gZFswXSxcbiAgICAgICAgdDEgPSBkW2QubGVuZ3RoIC0gMV0sXG4gICAgICAgIHIgPSB0MSA8IHQwLFxuICAgICAgICB0O1xuICAgIGlmIChyKSB0ID0gdDAsIHQwID0gdDEsIHQxID0gdDtcbiAgICB0ID0gdGlja0ludGVydmFsKGludGVydmFsLCB0MCwgdDEsIHN0ZXApO1xuICAgIHQgPSB0ID8gdC5yYW5nZSh0MCwgdDEgKyAxKSA6IFtdOyAvLyBpbmNsdXNpdmUgc3RvcFxuICAgIHJldHVybiByID8gdC5yZXZlcnNlKCkgOiB0O1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgcmV0dXJuIHNwZWNpZmllciA9PSBudWxsID8gdGlja0Zvcm1hdCA6IGZvcm1hdChzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihpbnRlcnZhbCwgc3RlcCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIChpbnRlcnZhbCA9IHRpY2tJbnRlcnZhbChpbnRlcnZhbCwgZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBzdGVwKSlcbiAgICAgICAgPyBkb21haW4obmljZShkLCBpbnRlcnZhbCkpXG4gICAgICAgIDogc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBjYWxlbmRhcih5ZWFyLCBtb250aCwgd2VlaywgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQsIGZvcm1hdCkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBpbml0UmFuZ2UuYXBwbHkoY2FsZW5kYXIodGltZVllYXIsIHRpbWVNb250aCwgdGltZVdlZWssIHRpbWVEYXksIHRpbWVIb3VyLCB0aW1lTWludXRlLCB0aW1lU2Vjb25kLCB0aW1lTWlsbGlzZWNvbmQsIHRpbWVGb3JtYXQpLmRvbWFpbihbbmV3IERhdGUoMjAwMCwgMCwgMSksIG5ldyBEYXRlKDIwMDAsIDAsIDIpXSksIGFyZ3VtZW50cyk7XG59XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIHV0Y01vbnRoID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ0RhdGUoMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoZGF0ZS5nZXRVVENNb250aCgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDTW9udGgoKSAtIHN0YXJ0LmdldFVUQ01vbnRoKCkgKyAoZW5kLmdldFVUQ0Z1bGxZZWFyKCkgLSBzdGFydC5nZXRVVENGdWxsWWVhcigpKSAqIDEyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNb250aCgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y01vbnRoO1xuZXhwb3J0IHZhciB1dGNNb250aHMgPSB1dGNNb250aC5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXJ9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNIb3VyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ01pbnV0ZXMoMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDSG91cnMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNIb3VyO1xuZXhwb3J0IHZhciB1dGNIb3VycyA9IHV0Y0hvdXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNNaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDU2Vjb25kcygwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTWludXRlcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y01pbnV0ZTtcbmV4cG9ydCB2YXIgdXRjTWludXRlcyA9IHV0Y01pbnV0ZS5yYW5nZTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbnN0YW50KCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IHZhciBhYnMgPSBNYXRoLmFicztcbmV4cG9ydCB2YXIgYXRhbjIgPSBNYXRoLmF0YW4yO1xuZXhwb3J0IHZhciBjb3MgPSBNYXRoLmNvcztcbmV4cG9ydCB2YXIgbWF4ID0gTWF0aC5tYXg7XG5leHBvcnQgdmFyIG1pbiA9IE1hdGgubWluO1xuZXhwb3J0IHZhciBzaW4gPSBNYXRoLnNpbjtcbmV4cG9ydCB2YXIgc3FydCA9IE1hdGguc3FydDtcblxuZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtMTI7XG5leHBvcnQgdmFyIHBpID0gTWF0aC5QSTtcbmV4cG9ydCB2YXIgaGFsZlBpID0gcGkgLyAyO1xuZXhwb3J0IHZhciB0YXUgPSAyICogcGk7XG5cbmV4cG9ydCBmdW5jdGlvbiBhY29zKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gMCA6IHggPCAtMSA/IHBpIDogTWF0aC5hY29zKHgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNpbih4KSB7XG4gIHJldHVybiB4ID49IDEgPyBoYWxmUGkgOiB4IDw9IC0xID8gLWhhbGZQaSA6IE1hdGguYXNpbih4KTtcbn1cbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IHthYnMsIGFjb3MsIGFzaW4sIGF0YW4yLCBjb3MsIGVwc2lsb24sIGhhbGZQaSwgbWF4LCBtaW4sIHBpLCBzaW4sIHNxcnQsIHRhdX0gZnJvbSBcIi4vbWF0aFwiO1xuXG5mdW5jdGlvbiBhcmNJbm5lclJhZGl1cyhkKSB7XG4gIHJldHVybiBkLmlubmVyUmFkaXVzO1xufVxuXG5mdW5jdGlvbiBhcmNPdXRlclJhZGl1cyhkKSB7XG4gIHJldHVybiBkLm91dGVyUmFkaXVzO1xufVxuXG5mdW5jdGlvbiBhcmNTdGFydEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQuc3RhcnRBbmdsZTtcbn1cblxuZnVuY3Rpb24gYXJjRW5kQW5nbGUoZCkge1xuICByZXR1cm4gZC5lbmRBbmdsZTtcbn1cblxuZnVuY3Rpb24gYXJjUGFkQW5nbGUoZCkge1xuICByZXR1cm4gZCAmJiBkLnBhZEFuZ2xlOyAvLyBOb3RlOiBvcHRpb25hbCFcbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0KHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5Mykge1xuICB2YXIgeDEwID0geDEgLSB4MCwgeTEwID0geTEgLSB5MCxcbiAgICAgIHgzMiA9IHgzIC0geDIsIHkzMiA9IHkzIC0geTIsXG4gICAgICB0ID0geTMyICogeDEwIC0geDMyICogeTEwO1xuICBpZiAodCAqIHQgPCBlcHNpbG9uKSByZXR1cm47XG4gIHQgPSAoeDMyICogKHkwIC0geTIpIC0geTMyICogKHgwIC0geDIpKSAvIHQ7XG4gIHJldHVybiBbeDAgKyB0ICogeDEwLCB5MCArIHQgKiB5MTBdO1xufVxuXG4vLyBDb21wdXRlIHBlcnBlbmRpY3VsYXIgb2Zmc2V0IGxpbmUgb2YgbGVuZ3RoIHJjLlxuLy8gaHR0cDovL21hdGh3b3JsZC53b2xmcmFtLmNvbS9DaXJjbGUtTGluZUludGVyc2VjdGlvbi5odG1sXG5mdW5jdGlvbiBjb3JuZXJUYW5nZW50cyh4MCwgeTAsIHgxLCB5MSwgcjEsIHJjLCBjdykge1xuICB2YXIgeDAxID0geDAgLSB4MSxcbiAgICAgIHkwMSA9IHkwIC0geTEsXG4gICAgICBsbyA9IChjdyA/IHJjIDogLXJjKSAvIHNxcnQoeDAxICogeDAxICsgeTAxICogeTAxKSxcbiAgICAgIG94ID0gbG8gKiB5MDEsXG4gICAgICBveSA9IC1sbyAqIHgwMSxcbiAgICAgIHgxMSA9IHgwICsgb3gsXG4gICAgICB5MTEgPSB5MCArIG95LFxuICAgICAgeDEwID0geDEgKyBveCxcbiAgICAgIHkxMCA9IHkxICsgb3ksXG4gICAgICB4MDAgPSAoeDExICsgeDEwKSAvIDIsXG4gICAgICB5MDAgPSAoeTExICsgeTEwKSAvIDIsXG4gICAgICBkeCA9IHgxMCAtIHgxMSxcbiAgICAgIGR5ID0geTEwIC0geTExLFxuICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeSxcbiAgICAgIHIgPSByMSAtIHJjLFxuICAgICAgRCA9IHgxMSAqIHkxMCAtIHgxMCAqIHkxMSxcbiAgICAgIGQgPSAoZHkgPCAwID8gLTEgOiAxKSAqIHNxcnQobWF4KDAsIHIgKiByICogZDIgLSBEICogRCkpLFxuICAgICAgY3gwID0gKEQgKiBkeSAtIGR4ICogZCkgLyBkMixcbiAgICAgIGN5MCA9ICgtRCAqIGR4IC0gZHkgKiBkKSAvIGQyLFxuICAgICAgY3gxID0gKEQgKiBkeSArIGR4ICogZCkgLyBkMixcbiAgICAgIGN5MSA9ICgtRCAqIGR4ICsgZHkgKiBkKSAvIGQyLFxuICAgICAgZHgwID0gY3gwIC0geDAwLFxuICAgICAgZHkwID0gY3kwIC0geTAwLFxuICAgICAgZHgxID0gY3gxIC0geDAwLFxuICAgICAgZHkxID0gY3kxIC0geTAwO1xuXG4gIC8vIFBpY2sgdGhlIGNsb3NlciBvZiB0aGUgdHdvIGludGVyc2VjdGlvbiBwb2ludHMuXG4gIC8vIFRPRE8gSXMgdGhlcmUgYSBmYXN0ZXIgd2F5IHRvIGRldGVybWluZSB3aGljaCBpbnRlcnNlY3Rpb24gdG8gdXNlP1xuICBpZiAoZHgwICogZHgwICsgZHkwICogZHkwID4gZHgxICogZHgxICsgZHkxICogZHkxKSBjeDAgPSBjeDEsIGN5MCA9IGN5MTtcblxuICByZXR1cm4ge1xuICAgIGN4OiBjeDAsXG4gICAgY3k6IGN5MCxcbiAgICB4MDE6IC1veCxcbiAgICB5MDE6IC1veSxcbiAgICB4MTE6IGN4MCAqIChyMSAvIHIgLSAxKSxcbiAgICB5MTE6IGN5MCAqIChyMSAvIHIgLSAxKVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGlubmVyUmFkaXVzID0gYXJjSW5uZXJSYWRpdXMsXG4gICAgICBvdXRlclJhZGl1cyA9IGFyY091dGVyUmFkaXVzLFxuICAgICAgY29ybmVyUmFkaXVzID0gY29uc3RhbnQoMCksXG4gICAgICBwYWRSYWRpdXMgPSBudWxsLFxuICAgICAgc3RhcnRBbmdsZSA9IGFyY1N0YXJ0QW5nbGUsXG4gICAgICBlbmRBbmdsZSA9IGFyY0VuZEFuZ2xlLFxuICAgICAgcGFkQW5nbGUgPSBhcmNQYWRBbmdsZSxcbiAgICAgIGNvbnRleHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGFyYygpIHtcbiAgICB2YXIgYnVmZmVyLFxuICAgICAgICByLFxuICAgICAgICByMCA9ICtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICByMSA9ICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBhMCA9IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGhhbGZQaSxcbiAgICAgICAgYTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZlBpLFxuICAgICAgICBkYSA9IGFicyhhMSAtIGEwKSxcbiAgICAgICAgY3cgPSBhMSA+IGEwO1xuXG4gICAgaWYgKCFjb250ZXh0KSBjb250ZXh0ID0gYnVmZmVyID0gcGF0aCgpO1xuXG4gICAgLy8gRW5zdXJlIHRoYXQgdGhlIG91dGVyIHJhZGl1cyBpcyBhbHdheXMgbGFyZ2VyIHRoYW4gdGhlIGlubmVyIHJhZGl1cy5cbiAgICBpZiAocjEgPCByMCkgciA9IHIxLCByMSA9IHIwLCByMCA9IHI7XG5cbiAgICAvLyBJcyBpdCBhIHBvaW50P1xuICAgIGlmICghKHIxID4gZXBzaWxvbikpIGNvbnRleHQubW92ZVRvKDAsIDApO1xuXG4gICAgLy8gT3IgaXMgaXQgYSBjaXJjbGUgb3IgYW5udWx1cz9cbiAgICBlbHNlIGlmIChkYSA+IHRhdSAtIGVwc2lsb24pIHtcbiAgICAgIGNvbnRleHQubW92ZVRvKHIxICogY29zKGEwKSwgcjEgKiBzaW4oYTApKTtcbiAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBhMCwgYTEsICFjdyk7XG4gICAgICBpZiAocjAgPiBlcHNpbG9uKSB7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKHIwICogY29zKGExKSwgcjAgKiBzaW4oYTEpKTtcbiAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjAsIGExLCBhMCwgY3cpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9yIGlzIGl0IGEgY2lyY3VsYXIgb3IgYW5udWxhciBzZWN0b3I/XG4gICAgZWxzZSB7XG4gICAgICB2YXIgYTAxID0gYTAsXG4gICAgICAgICAgYTExID0gYTEsXG4gICAgICAgICAgYTAwID0gYTAsXG4gICAgICAgICAgYTEwID0gYTEsXG4gICAgICAgICAgZGEwID0gZGEsXG4gICAgICAgICAgZGExID0gZGEsXG4gICAgICAgICAgYXAgPSBwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC8gMixcbiAgICAgICAgICBycCA9IChhcCA+IGVwc2lsb24pICYmIChwYWRSYWRpdXMgPyArcGFkUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBzcXJ0KHIwICogcjAgKyByMSAqIHIxKSksXG4gICAgICAgICAgcmMgPSBtaW4oYWJzKHIxIC0gcjApIC8gMiwgK2Nvcm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSxcbiAgICAgICAgICByYzAgPSByYyxcbiAgICAgICAgICByYzEgPSByYyxcbiAgICAgICAgICB0MCxcbiAgICAgICAgICB0MTtcblxuICAgICAgLy8gQXBwbHkgcGFkZGluZz8gTm90ZSB0aGF0IHNpbmNlIHIxIOKJpSByMCwgZGExIOKJpSBkYTAuXG4gICAgICBpZiAocnAgPiBlcHNpbG9uKSB7XG4gICAgICAgIHZhciBwMCA9IGFzaW4ocnAgLyByMCAqIHNpbihhcCkpLFxuICAgICAgICAgICAgcDEgPSBhc2luKHJwIC8gcjEgKiBzaW4oYXApKTtcbiAgICAgICAgaWYgKChkYTAgLT0gcDAgKiAyKSA+IGVwc2lsb24pIHAwICo9IChjdyA/IDEgOiAtMSksIGEwMCArPSBwMCwgYTEwIC09IHAwO1xuICAgICAgICBlbHNlIGRhMCA9IDAsIGEwMCA9IGExMCA9IChhMCArIGExKSAvIDI7XG4gICAgICAgIGlmICgoZGExIC09IHAxICogMikgPiBlcHNpbG9uKSBwMSAqPSAoY3cgPyAxIDogLTEpLCBhMDEgKz0gcDEsIGExMSAtPSBwMTtcbiAgICAgICAgZWxzZSBkYTEgPSAwLCBhMDEgPSBhMTEgPSAoYTAgKyBhMSkgLyAyO1xuICAgICAgfVxuXG4gICAgICB2YXIgeDAxID0gcjEgKiBjb3MoYTAxKSxcbiAgICAgICAgICB5MDEgPSByMSAqIHNpbihhMDEpLFxuICAgICAgICAgIHgxMCA9IHIwICogY29zKGExMCksXG4gICAgICAgICAgeTEwID0gcjAgKiBzaW4oYTEwKTtcblxuICAgICAgLy8gQXBwbHkgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgaWYgKHJjID4gZXBzaWxvbikge1xuICAgICAgICB2YXIgeDExID0gcjEgKiBjb3MoYTExKSxcbiAgICAgICAgICAgIHkxMSA9IHIxICogc2luKGExMSksXG4gICAgICAgICAgICB4MDAgPSByMCAqIGNvcyhhMDApLFxuICAgICAgICAgICAgeTAwID0gcjAgKiBzaW4oYTAwKSxcbiAgICAgICAgICAgIG9jO1xuXG4gICAgICAgIC8vIFJlc3RyaWN0IHRoZSBjb3JuZXIgcmFkaXVzIGFjY29yZGluZyB0byB0aGUgc2VjdG9yIGFuZ2xlLlxuICAgICAgICBpZiAoZGEgPCBwaSAmJiAob2MgPSBpbnRlcnNlY3QoeDAxLCB5MDEsIHgwMCwgeTAwLCB4MTEsIHkxMSwgeDEwLCB5MTApKSkge1xuICAgICAgICAgIHZhciBheCA9IHgwMSAtIG9jWzBdLFxuICAgICAgICAgICAgICBheSA9IHkwMSAtIG9jWzFdLFxuICAgICAgICAgICAgICBieCA9IHgxMSAtIG9jWzBdLFxuICAgICAgICAgICAgICBieSA9IHkxMSAtIG9jWzFdLFxuICAgICAgICAgICAgICBrYyA9IDEgLyBzaW4oYWNvcygoYXggKiBieCArIGF5ICogYnkpIC8gKHNxcnQoYXggKiBheCArIGF5ICogYXkpICogc3FydChieCAqIGJ4ICsgYnkgKiBieSkpKSAvIDIpLFxuICAgICAgICAgICAgICBsYyA9IHNxcnQob2NbMF0gKiBvY1swXSArIG9jWzFdICogb2NbMV0pO1xuICAgICAgICAgIHJjMCA9IG1pbihyYywgKHIwIC0gbGMpIC8gKGtjIC0gMSkpO1xuICAgICAgICAgIHJjMSA9IG1pbihyYywgKHIxIC0gbGMpIC8gKGtjICsgMSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElzIHRoZSBzZWN0b3IgY29sbGFwc2VkIHRvIGEgbGluZT9cbiAgICAgIGlmICghKGRhMSA+IGVwc2lsb24pKSBjb250ZXh0Lm1vdmVUbyh4MDEsIHkwMSk7XG5cbiAgICAgIC8vIERvZXMgdGhlIHNlY3RvcuKAmXMgb3V0ZXIgcmluZyBoYXZlIHJvdW5kZWQgY29ybmVycz9cbiAgICAgIGVsc2UgaWYgKHJjMSA+IGVwc2lsb24pIHtcbiAgICAgICAgdDAgPSBjb3JuZXJUYW5nZW50cyh4MDAsIHkwMCwgeDAxLCB5MDEsIHIxLCByYzEsIGN3KTtcbiAgICAgICAgdDEgPSBjb3JuZXJUYW5nZW50cyh4MTEsIHkxMSwgeDEwLCB5MTAsIHIxLCByYzEsIGN3KTtcblxuICAgICAgICBjb250ZXh0Lm1vdmVUbyh0MC5jeCArIHQwLngwMSwgdDAuY3kgKyB0MC55MDEpO1xuXG4gICAgICAgIC8vIEhhdmUgdGhlIGNvcm5lcnMgbWVyZ2VkP1xuICAgICAgICBpZiAocmMxIDwgcmMpIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMxLCBhdGFuMih0MC55MDEsIHQwLngwMSksIGF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcblxuICAgICAgICAvLyBPdGhlcndpc2UsIGRyYXcgdGhlIHR3byBjb3JuZXJzIGFuZCB0aGUgcmluZy5cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzEsIGF0YW4yKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIodDAueTExLCB0MC54MTEpLCAhY3cpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBhdGFuMih0MC5jeSArIHQwLnkxMSwgdDAuY3ggKyB0MC54MTEpLCBhdGFuMih0MS5jeSArIHQxLnkxMSwgdDEuY3ggKyB0MS54MTEpLCAhY3cpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQxLmN4LCB0MS5jeSwgcmMxLCBhdGFuMih0MS55MTEsIHQxLngxMSksIGF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBPciBpcyB0aGUgb3V0ZXIgcmluZyBqdXN0IGEgY2lyY3VsYXIgYXJjP1xuICAgICAgZWxzZSBjb250ZXh0Lm1vdmVUbyh4MDEsIHkwMSksIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBhMDEsIGExMSwgIWN3KTtcblxuICAgICAgLy8gSXMgdGhlcmUgbm8gaW5uZXIgcmluZywgYW5kIGl04oCZcyBhIGNpcmN1bGFyIHNlY3Rvcj9cbiAgICAgIC8vIE9yIHBlcmhhcHMgaXTigJlzIGFuIGFubnVsYXIgc2VjdG9yIGNvbGxhcHNlZCBkdWUgdG8gcGFkZGluZz9cbiAgICAgIGlmICghKHIwID4gZXBzaWxvbikgfHwgIShkYTAgPiBlcHNpbG9uKSkgY29udGV4dC5saW5lVG8oeDEwLCB5MTApO1xuXG4gICAgICAvLyBEb2VzIHRoZSBzZWN0b3LigJlzIGlubmVyIHJpbmcgKG9yIHBvaW50KSBoYXZlIHJvdW5kZWQgY29ybmVycz9cbiAgICAgIGVsc2UgaWYgKHJjMCA+IGVwc2lsb24pIHtcbiAgICAgICAgdDAgPSBjb3JuZXJUYW5nZW50cyh4MTAsIHkxMCwgeDExLCB5MTEsIHIwLCAtcmMwLCBjdyk7XG4gICAgICAgIHQxID0gY29ybmVyVGFuZ2VudHMoeDAxLCB5MDEsIHgwMCwgeTAwLCByMCwgLXJjMCwgY3cpO1xuXG4gICAgICAgIGNvbnRleHQubGluZVRvKHQwLmN4ICsgdDAueDAxLCB0MC5jeSArIHQwLnkwMSk7XG5cbiAgICAgICAgLy8gSGF2ZSB0aGUgY29ybmVycyBtZXJnZWQ/XG4gICAgICAgIGlmIChyYzAgPCByYykgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzAsIGF0YW4yKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgZHJhdyB0aGUgdHdvIGNvcm5lcnMgYW5kIHRoZSByaW5nLlxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMCwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MC55MTEsIHQwLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjAsIGF0YW4yKHQwLmN5ICsgdDAueTExLCB0MC5jeCArIHQwLngxMSksIGF0YW4yKHQxLmN5ICsgdDEueTExLCB0MS5jeCArIHQxLngxMSksIGN3KTtcbiAgICAgICAgICBjb250ZXh0LmFyYyh0MS5jeCwgdDEuY3ksIHJjMCwgYXRhbjIodDEueTExLCB0MS54MTEpLCBhdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gT3IgaXMgdGhlIGlubmVyIHJpbmcganVzdCBhIGNpcmN1bGFyIGFyYz9cbiAgICAgIGVsc2UgY29udGV4dC5hcmMoMCwgMCwgcjAsIGExMCwgYTAwLCBjdyk7XG4gICAgfVxuXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuICAgIGlmIChidWZmZXIpIHJldHVybiBjb250ZXh0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICB9XG5cbiAgYXJjLmNlbnRyb2lkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHIgPSAoK2lubmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKyArb3V0ZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgLyAyLFxuICAgICAgICBhID0gKCtzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKyArZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgLyAyIC0gcGkgLyAyO1xuICAgIHJldHVybiBbY29zKGEpICogciwgc2luKGEpICogcl07XG4gIH07XG5cbiAgYXJjLmlubmVyUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGlubmVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBpbm5lclJhZGl1cztcbiAgfTtcblxuICBhcmMub3V0ZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob3V0ZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IG91dGVyUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5jb3JuZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29ybmVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBjb3JuZXJSYWRpdXM7XG4gIH07XG5cbiAgYXJjLnBhZFJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRSYWRpdXMgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBwYWRSYWRpdXM7XG4gIH07XG5cbiAgYXJjLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogc3RhcnRBbmdsZTtcbiAgfTtcblxuICBhcmMuZW5kQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IGVuZEFuZ2xlO1xuICB9O1xuXG4gIGFyYy5wYWRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogcGFkQW5nbGU7XG4gIH07XG5cbiAgYXJjLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXyksIGFyYykgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBhcmM7XG59XG4iLCJmdW5jdGlvbiBMaW5lYXIoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTGluZWFyLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTGluZWFyKGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IHtwYXRofSBmcm9tIFwiZDMtcGF0aFwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vY3VydmUvbGluZWFyXCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4vcG9pbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gcG9pbnRYLFxuICAgICAgeSA9IHBvaW50WSxcbiAgICAgIGRlZmluZWQgPSBjb25zdGFudCh0cnVlKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbGluZShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZCxcbiAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgYnVmZmVyO1xuXG4gICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPD0gbjsgKytpKSB7XG4gICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XG4gICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICBlbHNlIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICB9XG4gICAgICBpZiAoZGVmaW5lZDApIG91dHB1dC5wb2ludCgreChkLCBpLCBkYXRhKSwgK3koZCwgaSwgZGF0YSkpO1xuICAgIH1cblxuICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBsaW5lLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHg7XG4gIH07XG5cbiAgbGluZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluZSkgOiB5O1xuICB9O1xuXG4gIGxpbmUuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBsaW5lKSA6IGRlZmluZWQ7XG4gIH07XG5cbiAgbGluZS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBsaW5lKSA6IGN1cnZlO1xuICB9O1xuXG4gIGxpbmUuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgbGluZSkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBsaW5lO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYiA8IGEgPyAtMSA6IGIgPiBhID8gMSA6IGIgPj0gYSA/IDAgOiBOYU47XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkKSB7XG4gIHJldHVybiBkO1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgZGVzY2VuZGluZyBmcm9tIFwiLi9kZXNjZW5kaW5nXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcbmltcG9ydCB7dGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgdmFsdWUgPSBpZGVudGl0eSxcbiAgICAgIHNvcnRWYWx1ZXMgPSBkZXNjZW5kaW5nLFxuICAgICAgc29ydCA9IG51bGwsXG4gICAgICBzdGFydEFuZ2xlID0gY29uc3RhbnQoMCksXG4gICAgICBlbmRBbmdsZSA9IGNvbnN0YW50KHRhdSksXG4gICAgICBwYWRBbmdsZSA9IGNvbnN0YW50KDApO1xuXG4gIGZ1bmN0aW9uIHBpZShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgaixcbiAgICAgICAgayxcbiAgICAgICAgc3VtID0gMCxcbiAgICAgICAgaW5kZXggPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGFyY3MgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGEwID0gK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgZGEgPSBNYXRoLm1pbih0YXUsIE1hdGgubWF4KC10YXUsIGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBhMCkpLFxuICAgICAgICBhMSxcbiAgICAgICAgcCA9IE1hdGgubWluKE1hdGguYWJzKGRhKSAvIG4sIHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICBwYSA9IHAgKiAoZGEgPCAwID8gLTEgOiAxKSxcbiAgICAgICAgdjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodiA9IGFyY3NbaW5kZXhbaV0gPSBpXSA9ICt2YWx1ZShkYXRhW2ldLCBpLCBkYXRhKSkgPiAwKSB7XG4gICAgICAgIHN1bSArPSB2O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9wdGlvbmFsbHkgc29ydCB0aGUgYXJjcyBieSBwcmV2aW91c2x5LWNvbXB1dGVkIHZhbHVlcyBvciBieSBkYXRhLlxuICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gc29ydFZhbHVlcyhhcmNzW2ldLCBhcmNzW2pdKTsgfSk7XG4gICAgZWxzZSBpZiAoc29ydCAhPSBudWxsKSBpbmRleC5zb3J0KGZ1bmN0aW9uKGksIGopIHsgcmV0dXJuIHNvcnQoZGF0YVtpXSwgZGF0YVtqXSk7IH0pO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgYXJjcyEgVGhleSBhcmUgc3RvcmVkIGluIHRoZSBvcmlnaW5hbCBkYXRhJ3Mgb3JkZXIuXG4gICAgZm9yIChpID0gMCwgayA9IHN1bSA/IChkYSAtIG4gKiBwYSkgLyBzdW0gOiAwOyBpIDwgbjsgKytpLCBhMCA9IGExKSB7XG4gICAgICBqID0gaW5kZXhbaV0sIHYgPSBhcmNzW2pdLCBhMSA9IGEwICsgKHYgPiAwID8gdiAqIGsgOiAwKSArIHBhLCBhcmNzW2pdID0ge1xuICAgICAgICBkYXRhOiBkYXRhW2pdLFxuICAgICAgICBpbmRleDogaSxcbiAgICAgICAgdmFsdWU6IHYsXG4gICAgICAgIHN0YXJ0QW5nbGU6IGEwLFxuICAgICAgICBlbmRBbmdsZTogYTEsXG4gICAgICAgIHBhZEFuZ2xlOiBwXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBhcmNzO1xuICB9XG5cbiAgcGllLnZhbHVlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHBpZSkgOiB2YWx1ZTtcbiAgfTtcblxuICBwaWUuc29ydFZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0VmFsdWVzID0gXywgc29ydCA9IG51bGwsIHBpZSkgOiBzb3J0VmFsdWVzO1xuICB9O1xuXG4gIHBpZS5zb3J0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnQgPSBfLCBzb3J0VmFsdWVzID0gbnVsbCwgcGllKSA6IHNvcnQ7XG4gIH07XG5cbiAgcGllLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBwaWUpIDogc3RhcnRBbmdsZTtcbiAgfTtcblxuICBwaWUuZW5kQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcGllKSA6IGVuZEFuZ2xlO1xuICB9O1xuXG4gIHBpZS5wYWRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBwaWUpIDogcGFkQW5nbGU7XG4gIH07XG5cbiAgcmV0dXJuIHBpZTtcbn1cbiIsImltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9saW5lYXJcIjtcblxuZXhwb3J0IHZhciBjdXJ2ZVJhZGlhbExpbmVhciA9IGN1cnZlUmFkaWFsKGN1cnZlTGluZWFyKTtcblxuZnVuY3Rpb24gUmFkaWFsKGN1cnZlKSB7XG4gIHRoaXMuX2N1cnZlID0gY3VydmU7XG59XG5cblJhZGlhbC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUuYXJlYVN0YXJ0KCk7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnZlLmFyZWFFbmQoKTtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jdXJ2ZS5saW5lU3RhcnQoKTtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUubGluZUVuZCgpO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oYSwgcikge1xuICAgIHRoaXMuX2N1cnZlLnBvaW50KHIgKiBNYXRoLnNpbihhKSwgciAqIC1NYXRoLmNvcyhhKSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGN1cnZlUmFkaWFsKGN1cnZlKSB7XG5cbiAgZnVuY3Rpb24gcmFkaWFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IFJhZGlhbChjdXJ2ZShjb250ZXh0KSk7XG4gIH1cblxuICByYWRpYWwuX2N1cnZlID0gY3VydmU7XG5cbiAgcmV0dXJuIHJhZGlhbDtcbn1cbiIsImV4cG9ydCB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG4iLCJ2YXIgdGFuMzAgPSBNYXRoLnNxcnQoMSAvIDMpLFxuICAgIHRhbjMwXzIgPSB0YW4zMCAqIDI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciB5ID0gTWF0aC5zcXJ0KHNpemUgLyB0YW4zMF8yKSxcbiAgICAgICAgeCA9IHkgKiB0YW4zMDtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCAteSk7XG4gICAgY29udGV4dC5saW5lVG8oeCwgMCk7XG4gICAgY29udGV4dC5saW5lVG8oMCwgeSk7XG4gICAgY29udGV4dC5saW5lVG8oLXgsIDApO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG4iLCJpbXBvcnQge3BpLCB0YXV9IGZyb20gXCIuLi9tYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyBwaSk7XG4gICAgY29udGV4dC5tb3ZlVG8ociwgMCk7XG4gICAgY29udGV4dC5hcmMoMCwgMCwgciwgMCwgdGF1KTtcbiAgfVxufTtcbiIsImltcG9ydCB7cGksIHRhdX0gZnJvbSBcIi4uL21hdGhcIjtcblxudmFyIGthID0gMC44OTA4MTMwOTE1MjkyODUyMjgxMCxcbiAgICBrciA9IE1hdGguc2luKHBpIC8gMTApIC8gTWF0aC5zaW4oNyAqIHBpIC8gMTApLFxuICAgIGt4ID0gTWF0aC5zaW4odGF1IC8gMTApICoga3IsXG4gICAga3kgPSAtTWF0aC5jb3ModGF1IC8gMTApICoga3I7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgKiBrYSksXG4gICAgICAgIHggPSBreCAqIHIsXG4gICAgICAgIHkgPSBreSAqIHI7XG4gICAgY29udGV4dC5tb3ZlVG8oMCwgLXIpO1xuICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgNTsgKytpKSB7XG4gICAgICB2YXIgYSA9IHRhdSAqIGkgLyA1LFxuICAgICAgICAgIGMgPSBNYXRoLmNvcyhhKSxcbiAgICAgICAgICBzID0gTWF0aC5zaW4oYSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhzICogciwgLWMgKiByKTtcbiAgICAgIGNvbnRleHQubGluZVRvKGMgKiB4IC0gcyAqIHksIHMgKiB4ICsgYyAqIHkpO1xuICAgIH1cbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7fVxuIiwidmFyIHNxcnQzID0gTWF0aC5zcXJ0KDMpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgeSA9IC1NYXRoLnNxcnQoc2l6ZSAvIChzcXJ0MyAqIDMpKTtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCB5ICogMik7XG4gICAgY29udGV4dC5saW5lVG8oLXNxcnQzICogeSwgLXkpO1xuICAgIGNvbnRleHQubGluZVRvKHNxcnQzICogeSwgLXkpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG4iLCJ2YXIgYyA9IC0wLjUsXG4gICAgcyA9IE1hdGguc3FydCgzKSAvIDIsXG4gICAgayA9IDEgLyBNYXRoLnNxcnQoMTIpLFxuICAgIGEgPSAoayAvIDIgKyAxKSAqIDM7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyBhKSxcbiAgICAgICAgeDAgPSByIC8gMixcbiAgICAgICAgeTAgPSByICogayxcbiAgICAgICAgeDEgPSB4MCxcbiAgICAgICAgeTEgPSByICogayArIHIsXG4gICAgICAgIHgyID0gLXgxLFxuICAgICAgICB5MiA9IHkxO1xuICAgIGNvbnRleHQubW92ZVRvKHgwLCB5MCk7XG4gICAgY29udGV4dC5saW5lVG8oeDEsIHkxKTtcbiAgICBjb250ZXh0LmxpbmVUbyh4MiwgeTIpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MCAtIHMgKiB5MCwgcyAqIHgwICsgYyAqIHkwKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgLSBzICogeTEsIHMgKiB4MSArIGMgKiB5MSk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgyIC0gcyAqIHkyLCBzICogeDIgKyBjICogeTIpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MCArIHMgKiB5MCwgYyAqIHkwIC0gcyAqIHgwKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgKyBzICogeTEsIGMgKiB5MSAtIHMgKiB4MSk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgyICsgcyAqIHkyLCBjICogeTIgLSBzICogeDIpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG4iLCJleHBvcnQgZnVuY3Rpb24gcG9pbnQodGhhdCwgeCwgeSkge1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oXG4gICAgKDIgKiB0aGF0Ll94MCArIHRoYXQuX3gxKSAvIDMsXG4gICAgKDIgKiB0aGF0Ll95MCArIHRoYXQuX3kxKSAvIDMsXG4gICAgKHRoYXQuX3gwICsgMiAqIHRoYXQuX3gxKSAvIDMsXG4gICAgKHRoYXQuX3kwICsgMiAqIHRoYXQuX3kxKSAvIDMsXG4gICAgKHRoYXQuX3gwICsgNCAqIHRoYXQuX3gxICsgeCkgLyA2LFxuICAgICh0aGF0Ll95MCArIDQgKiB0aGF0Ll95MSArIHkpIC8gNlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQmFzaXMoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuQmFzaXMucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3gxLCB0aGlzLl95MSk7IC8vIHByb2NlZWRcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9jb250ZXh0LmxpbmVUbygoNSAqIHRoaXMuX3gwICsgdGhpcy5feDEpIC8gNiwgKDUgKiB0aGlzLl95MCArIHRoaXMuX3kxKSAvIDYpOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBCYXNpcyhjb250ZXh0KTtcbn1cbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9iYXNpc1wiO1xuXG5mdW5jdGlvbiBCYXNpc0Nsb3NlZChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5CYXNpc0Nsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKCh0aGlzLl94MiArIDIgKiB0aGlzLl94MykgLyAzLCAodGhpcy5feTIgKyAyICogdGhpcy5feTMpIC8gMyk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKCh0aGlzLl94MyArIDIgKiB0aGlzLl94MikgLyAzLCAodGhpcy5feTMgKyAyICogdGhpcy5feTIpIC8gMyk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDIsIHRoaXMuX3kyKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g0LCB0aGlzLl95NCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDIgPSB4LCB0aGlzLl95MiA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geTsgdGhpcy5fY29udGV4dC5tb3ZlVG8oKHRoaXMuX3gwICsgNCAqIHRoaXMuX3gxICsgeCkgLyA2LCAodGhpcy5feTAgKyA0ICogdGhpcy5feTEgKyB5KSAvIDYpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IEJhc2lzQ2xvc2VkKGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vYmFzaXNcIjtcblxuZnVuY3Rpb24gQmFzaXNPcGVuKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkJhc2lzT3Blbi5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHZhciB4MCA9ICh0aGlzLl94MCArIDQgKiB0aGlzLl94MSArIHgpIC8gNiwgeTAgPSAodGhpcy5feTAgKyA0ICogdGhpcy5feTEgKyB5KSAvIDY7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MCwgeTApIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeDAsIHkwKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHRoaXMuX3BvaW50ID0gNDsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgQmFzaXNPcGVuKGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IHtCYXNpc30gZnJvbSBcIi4vYmFzaXNcIjtcblxuZnVuY3Rpb24gQnVuZGxlKGNvbnRleHQsIGJldGEpIHtcbiAgdGhpcy5fYmFzaXMgPSBuZXcgQmFzaXMoY29udGV4dCk7XG4gIHRoaXMuX2JldGEgPSBiZXRhO1xufVxuXG5CdW5kbGUucHJvdG90eXBlID0ge1xuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3ggPSBbXTtcbiAgICB0aGlzLl95ID0gW107XG4gICAgdGhpcy5fYmFzaXMubGluZVN0YXJ0KCk7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB4ID0gdGhpcy5feCxcbiAgICAgICAgeSA9IHRoaXMuX3ksXG4gICAgICAgIGogPSB4Lmxlbmd0aCAtIDE7XG5cbiAgICBpZiAoaiA+IDApIHtcbiAgICAgIHZhciB4MCA9IHhbMF0sXG4gICAgICAgICAgeTAgPSB5WzBdLFxuICAgICAgICAgIGR4ID0geFtqXSAtIHgwLFxuICAgICAgICAgIGR5ID0geVtqXSAtIHkwLFxuICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICB0O1xuXG4gICAgICB3aGlsZSAoKytpIDw9IGopIHtcbiAgICAgICAgdCA9IGkgLyBqO1xuICAgICAgICB0aGlzLl9iYXNpcy5wb2ludChcbiAgICAgICAgICB0aGlzLl9iZXRhICogeFtpXSArICgxIC0gdGhpcy5fYmV0YSkgKiAoeDAgKyB0ICogZHgpLFxuICAgICAgICAgIHRoaXMuX2JldGEgKiB5W2ldICsgKDEgLSB0aGlzLl9iZXRhKSAqICh5MCArIHQgKiBkeSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl94ID0gdGhpcy5feSA9IG51bGw7XG4gICAgdGhpcy5fYmFzaXMubGluZUVuZCgpO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuX3gucHVzaCgreCk7XG4gICAgdGhpcy5feS5wdXNoKCt5KTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShiZXRhKSB7XG5cbiAgZnVuY3Rpb24gYnVuZGxlKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYmV0YSA9PT0gMSA/IG5ldyBCYXNpcyhjb250ZXh0KSA6IG5ldyBCdW5kbGUoY29udGV4dCwgYmV0YSk7XG4gIH1cblxuICBidW5kbGUuYmV0YSA9IGZ1bmN0aW9uKGJldGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCtiZXRhKTtcbiAgfTtcblxuICByZXR1cm4gYnVuZGxlO1xufSkoMC44NSk7XG4iLCJleHBvcnQgZnVuY3Rpb24gcG9pbnQodGhhdCwgeCwgeSkge1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oXG4gICAgdGhhdC5feDEgKyB0aGF0Ll9rICogKHRoYXQuX3gyIC0gdGhhdC5feDApLFxuICAgIHRoYXQuX3kxICsgdGhhdC5fayAqICh0aGF0Ll95MiAtIHRoYXQuX3kwKSxcbiAgICB0aGF0Ll94MiArIHRoYXQuX2sgKiAodGhhdC5feDEgLSB4KSxcbiAgICB0aGF0Ll95MiArIHRoYXQuX2sgKiAodGhhdC5feTEgLSB5KSxcbiAgICB0aGF0Ll94MixcbiAgICB0aGF0Ll95MlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ2FyZGluYWwoY29udGV4dCwgdGVuc2lvbikge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xufVxuXG5DYXJkaW5hbC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiBwb2ludCh0aGlzLCB0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX3gxID0geCwgdGhpcy5feTEgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20odGVuc2lvbikge1xuXG4gIGZ1bmN0aW9uIGNhcmRpbmFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IENhcmRpbmFsKGNvbnRleHQsIHRlbnNpb24pO1xuICB9XG5cbiAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgfTtcblxuICByZXR1cm4gY2FyZGluYWw7XG59KSgwKTtcbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9jYXJkaW5hbFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgdGVuc2lvbikge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xufVxuXG5DYXJkaW5hbENsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID0gdGhpcy5feDUgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSB0aGlzLl95NSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMjoge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMzoge1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NSwgdGhpcy5feTUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geSk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5OyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgdGVuc2lvbik7XG4gIH1cblxuICBjYXJkaW5hbC50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xuICAgIHJldHVybiBjdXN0b20oK3RlbnNpb24pO1xuICB9O1xuXG4gIHJldHVybiBjYXJkaW5hbDtcbn0pKDApO1xuIiwiaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vY2FyZGluYWxcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENhcmRpbmFsT3Blbihjb250ZXh0LCB0ZW5zaW9uKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG59XG5cbkNhcmRpbmFsT3Blbi5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2FyZGluYWxPcGVuKGNvbnRleHQsIHRlbnNpb24pO1xuICB9XG5cbiAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgfTtcblxuICByZXR1cm4gY2FyZGluYWw7XG59KSgwKTtcbiIsImltcG9ydCB7ZXBzaWxvbn0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7Q2FyZGluYWx9IGZyb20gXCIuL2NhcmRpbmFsXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludCh0aGF0LCB4LCB5KSB7XG4gIHZhciB4MSA9IHRoYXQuX3gxLFxuICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgIHgyID0gdGhhdC5feDIsXG4gICAgICB5MiA9IHRoYXQuX3kyO1xuXG4gIGlmICh0aGF0Ll9sMDFfYSA+IGVwc2lsb24pIHtcbiAgICB2YXIgYSA9IDIgKiB0aGF0Ll9sMDFfMmEgKyAzICogdGhhdC5fbDAxX2EgKiB0aGF0Ll9sMTJfYSArIHRoYXQuX2wxMl8yYSxcbiAgICAgICAgbiA9IDMgKiB0aGF0Ll9sMDFfYSAqICh0aGF0Ll9sMDFfYSArIHRoYXQuX2wxMl9hKTtcbiAgICB4MSA9ICh4MSAqIGEgLSB0aGF0Ll94MCAqIHRoYXQuX2wxMl8yYSArIHRoYXQuX3gyICogdGhhdC5fbDAxXzJhKSAvIG47XG4gICAgeTEgPSAoeTEgKiBhIC0gdGhhdC5feTAgKiB0aGF0Ll9sMTJfMmEgKyB0aGF0Ll95MiAqIHRoYXQuX2wwMV8yYSkgLyBuO1xuICB9XG5cbiAgaWYgKHRoYXQuX2wyM19hID4gZXBzaWxvbikge1xuICAgIHZhciBiID0gMiAqIHRoYXQuX2wyM18yYSArIDMgKiB0aGF0Ll9sMjNfYSAqIHRoYXQuX2wxMl9hICsgdGhhdC5fbDEyXzJhLFxuICAgICAgICBtID0gMyAqIHRoYXQuX2wyM19hICogKHRoYXQuX2wyM19hICsgdGhhdC5fbDEyX2EpO1xuICAgIHgyID0gKHgyICogYiArIHRoYXQuX3gxICogdGhhdC5fbDIzXzJhIC0geCAqIHRoYXQuX2wxMl8yYSkgLyBtO1xuICAgIHkyID0gKHkyICogYiArIHRoYXQuX3kxICogdGhhdC5fbDIzXzJhIC0geSAqIHRoYXQuX2wxMl8yYSkgLyBtO1xuICB9XG5cbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgxLCB5MSwgeDIsIHkyLCB0aGF0Ll94MiwgdGhhdC5feTIpO1xufVxuXG5mdW5jdGlvbiBDYXRtdWxsUm9tKGNvbnRleHQsIGFscGhhKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9hbHBoYSA9IGFscGhhO1xufVxuXG5DYXRtdWxsUm9tLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPVxuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLnBvaW50KHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxuICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbShjb250ZXh0LCBhbHBoYSkgOiBuZXcgQ2FyZGluYWwoY29udGV4dCwgMCk7XG4gIH1cblxuICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCthbHBoYSk7XG4gIH07XG5cbiAgcmV0dXJuIGNhdG11bGxSb207XG59KSgwLjUpO1xuIiwiaW1wb3J0IHtDYXJkaW5hbENsb3NlZH0gZnJvbSBcIi4vY2FyZGluYWxDbG9zZWRcIjtcbmltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9jYXRtdWxsUm9tXCI7XG5cbmZ1bmN0aW9uIENhdG11bGxSb21DbG9zZWQoY29udGV4dCwgYWxwaGEpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2FscGhhID0gYWxwaGE7XG59XG5cbkNhdG11bGxSb21DbG9zZWQucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IG5vb3AsXG4gIGFyZWFFbmQ6IG5vb3AsXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9IHRoaXMuX3g1ID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gdGhpcy5feTUgPSBOYU47XG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPVxuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g1LCB0aGlzLl95NSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgIGlmICh0aGlzLl9wb2ludCkge1xuICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICB0aGlzLl9sMjNfYSA9IE1hdGguc3FydCh0aGlzLl9sMjNfMmEgPSBNYXRoLnBvdyh4MjMgKiB4MjMgKyB5MjMgKiB5MjMsIHRoaXMuX2FscGhhKSk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geSk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5OyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbUNsb3NlZChjb250ZXh0LCBhbHBoYSkgOiBuZXcgQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgMCk7XG4gIH1cblxuICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCthbHBoYSk7XG4gIH07XG5cbiAgcmV0dXJuIGNhdG11bGxSb207XG59KSgwLjUpO1xuIiwiaW1wb3J0IHtDYXJkaW5hbE9wZW59IGZyb20gXCIuL2NhcmRpbmFsT3BlblwiO1xuaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vY2F0bXVsbFJvbVwiO1xuXG5mdW5jdGlvbiBDYXRtdWxsUm9tT3Blbihjb250ZXh0LCBhbHBoYSkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbn1cblxuQ2F0bXVsbFJvbU9wZW4ucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYSA9XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhID1cbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG5cbiAgICBpZiAodGhpcy5fcG9pbnQpIHtcbiAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXG4gICAgICAgICAgeTIzID0gdGhpcy5feTIgLSB5O1xuICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbU9wZW4oY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsT3Blbihjb250ZXh0LCAwKTtcbiAgfVxuXG4gIGNhdG11bGxSb20uYWxwaGEgPSBmdW5jdGlvbihhbHBoYSkge1xuICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgfTtcblxuICByZXR1cm4gY2F0bXVsbFJvbTtcbn0pKDAuNSk7XG4iLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuXG5mdW5jdGlvbiBMaW5lYXJDbG9zZWQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTGluZWFyQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBub29wLFxuICBhcmVhRW5kOiBub29wLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3BvaW50KSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIGlmICh0aGlzLl9wb2ludCkgdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgZWxzZSB0aGlzLl9wb2ludCA9IDEsIHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTGluZWFyQ2xvc2VkKGNvbnRleHQpO1xufVxuIiwiZnVuY3Rpb24gc2lnbih4KSB7XG4gIHJldHVybiB4IDwgMCA/IC0xIDogMTtcbn1cblxuLy8gQ2FsY3VsYXRlIHRoZSBzbG9wZXMgb2YgdGhlIHRhbmdlbnRzIChIZXJtaXRlLXR5cGUgaW50ZXJwb2xhdGlvbikgYmFzZWQgb25cbi8vIHRoZSBmb2xsb3dpbmcgcGFwZXI6IFN0ZWZmZW4sIE0uIDE5OTAuIEEgU2ltcGxlIE1ldGhvZCBmb3IgTW9ub3RvbmljXG4vLyBJbnRlcnBvbGF0aW9uIGluIE9uZSBEaW1lbnNpb24uIEFzdHJvbm9teSBhbmQgQXN0cm9waHlzaWNzLCBWb2wuIDIzOSwgTk8uXG4vLyBOT1YoSUkpLCBQLiA0NDMsIDE5OTAuXG5mdW5jdGlvbiBzbG9wZTModGhhdCwgeDIsIHkyKSB7XG4gIHZhciBoMCA9IHRoYXQuX3gxIC0gdGhhdC5feDAsXG4gICAgICBoMSA9IHgyIC0gdGhhdC5feDEsXG4gICAgICBzMCA9ICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIChoMCB8fCBoMSA8IDAgJiYgLTApLFxuICAgICAgczEgPSAoeTIgLSB0aGF0Ll95MSkgLyAoaDEgfHwgaDAgPCAwICYmIC0wKSxcbiAgICAgIHAgPSAoczAgKiBoMSArIHMxICogaDApIC8gKGgwICsgaDEpO1xuICByZXR1cm4gKHNpZ24oczApICsgc2lnbihzMSkpICogTWF0aC5taW4oTWF0aC5hYnMoczApLCBNYXRoLmFicyhzMSksIDAuNSAqIE1hdGguYWJzKHApKSB8fCAwO1xufVxuXG4vLyBDYWxjdWxhdGUgYSBvbmUtc2lkZWQgc2xvcGUuXG5mdW5jdGlvbiBzbG9wZTIodGhhdCwgdCkge1xuICB2YXIgaCA9IHRoYXQuX3gxIC0gdGhhdC5feDA7XG4gIHJldHVybiBoID8gKDMgKiAodGhhdC5feTEgLSB0aGF0Ll95MCkgLyBoIC0gdCkgLyAyIDogdDtcbn1cblxuLy8gQWNjb3JkaW5nIHRvIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N1YmljX0hlcm1pdGVfc3BsaW5lI1JlcHJlc2VudGF0aW9uc1xuLy8gXCJ5b3UgY2FuIGV4cHJlc3MgY3ViaWMgSGVybWl0ZSBpbnRlcnBvbGF0aW9uIGluIHRlcm1zIG9mIGN1YmljIELDqXppZXIgY3VydmVzXG4vLyB3aXRoIHJlc3BlY3QgdG8gdGhlIGZvdXIgdmFsdWVzIHAwLCBwMCArIG0wIC8gMywgcDEgLSBtMSAvIDMsIHAxXCIuXG5mdW5jdGlvbiBwb2ludCh0aGF0LCB0MCwgdDEpIHtcbiAgdmFyIHgwID0gdGhhdC5feDAsXG4gICAgICB5MCA9IHRoYXQuX3kwLFxuICAgICAgeDEgPSB0aGF0Ll94MSxcbiAgICAgIHkxID0gdGhhdC5feTEsXG4gICAgICBkeCA9ICh4MSAtIHgwKSAvIDM7XG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh4MCArIGR4LCB5MCArIGR4ICogdDAsIHgxIC0gZHgsIHkxIC0gZHggKiB0MSwgeDEsIHkxKTtcbn1cblxuZnVuY3Rpb24gTW9ub3RvbmVYKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbk1vbm90b25lWC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9XG4gICAgdGhpcy5fdDAgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgICAgY2FzZSAzOiBwb2ludCh0aGlzLCB0aGlzLl90MCwgc2xvcGUyKHRoaXMsIHRoaXMuX3QwKSk7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciB0MSA9IE5hTjtcblxuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIGlmICh4ID09PSB0aGlzLl94MSAmJiB5ID09PSB0aGlzLl95MSkgcmV0dXJuOyAvLyBJZ25vcmUgY29pbmNpZGVudCBwb2ludHMuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyBwb2ludCh0aGlzLCBzbG9wZTIodGhpcywgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpLCB0MSk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgdGhpcy5fdDAsIHQxID0gc2xvcGUzKHRoaXMsIHgsIHkpKTsgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgICB0aGlzLl90MCA9IHQxO1xuICB9XG59XG5cbmZ1bmN0aW9uIE1vbm90b25lWShjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBuZXcgUmVmbGVjdENvbnRleHQoY29udGV4dCk7XG59XG5cbihNb25vdG9uZVkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNb25vdG9uZVgucHJvdG90eXBlKSkucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIE1vbm90b25lWC5wcm90b3R5cGUucG9pbnQuY2FsbCh0aGlzLCB5LCB4KTtcbn07XG5cbmZ1bmN0aW9uIFJlZmxlY3RDb250ZXh0KGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cblJlZmxlY3RDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuX2NvbnRleHQubW92ZVRvKHksIHgpOyB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkgeyB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpOyB9LFxuICBsaW5lVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5saW5lVG8oeSwgeCk7IH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7IHRoaXMuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh5MSwgeDEsIHkyLCB4MiwgeSwgeCk7IH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtb25vdG9uZVgoY29udGV4dCkge1xuICByZXR1cm4gbmV3IE1vbm90b25lWChjb250ZXh0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vbm90b25lWShjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTW9ub3RvbmVZKGNvbnRleHQpO1xufVxuIiwiZnVuY3Rpb24gTmF0dXJhbChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5OYXR1cmFsLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94ID0gW107XG4gICAgdGhpcy5feSA9IFtdO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgeCA9IHRoaXMuX3gsXG4gICAgICAgIHkgPSB0aGlzLl95LFxuICAgICAgICBuID0geC5sZW5ndGg7XG5cbiAgICBpZiAobikge1xuICAgICAgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHhbMF0sIHlbMF0pIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeFswXSwgeVswXSk7XG4gICAgICBpZiAobiA9PT0gMikge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4WzFdLCB5WzFdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBweCA9IGNvbnRyb2xQb2ludHMoeCksXG4gICAgICAgICAgICBweSA9IGNvbnRyb2xQb2ludHMoeSk7XG4gICAgICAgIGZvciAodmFyIGkwID0gMCwgaTEgPSAxOyBpMSA8IG47ICsraTAsICsraTEpIHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmJlemllckN1cnZlVG8ocHhbMF1baTBdLCBweVswXVtpMF0sIHB4WzFdW2kwXSwgcHlbMV1baTBdLCB4W2kxXSwgeVtpMV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgbiA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIHRoaXMuX3ggPSB0aGlzLl95ID0gbnVsbDtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl94LnB1c2goK3gpO1xuICAgIHRoaXMuX3kucHVzaCgreSk7XG4gIH1cbn07XG5cbi8vIFNlZSBodHRwczovL3d3dy5wYXJ0aWNsZWluY2VsbC5jb20vMjAxMi9iZXppZXItc3BsaW5lcy8gZm9yIGRlcml2YXRpb24uXG5mdW5jdGlvbiBjb250cm9sUG9pbnRzKHgpIHtcbiAgdmFyIGksXG4gICAgICBuID0geC5sZW5ndGggLSAxLFxuICAgICAgbSxcbiAgICAgIGEgPSBuZXcgQXJyYXkobiksXG4gICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgciA9IG5ldyBBcnJheShuKTtcbiAgYVswXSA9IDAsIGJbMF0gPSAyLCByWzBdID0geFswXSArIDIgKiB4WzFdO1xuICBmb3IgKGkgPSAxOyBpIDwgbiAtIDE7ICsraSkgYVtpXSA9IDEsIGJbaV0gPSA0LCByW2ldID0gNCAqIHhbaV0gKyAyICogeFtpICsgMV07XG4gIGFbbiAtIDFdID0gMiwgYltuIC0gMV0gPSA3LCByW24gLSAxXSA9IDggKiB4W24gLSAxXSArIHhbbl07XG4gIGZvciAoaSA9IDE7IGkgPCBuOyArK2kpIG0gPSBhW2ldIC8gYltpIC0gMV0sIGJbaV0gLT0gbSwgcltpXSAtPSBtICogcltpIC0gMV07XG4gIGFbbiAtIDFdID0gcltuIC0gMV0gLyBiW24gLSAxXTtcbiAgZm9yIChpID0gbiAtIDI7IGkgPj0gMDsgLS1pKSBhW2ldID0gKHJbaV0gLSBhW2kgKyAxXSkgLyBiW2ldO1xuICBiW24gLSAxXSA9ICh4W25dICsgYVtuIC0gMV0pIC8gMjtcbiAgZm9yIChpID0gMDsgaSA8IG4gLSAxOyArK2kpIGJbaV0gPSAyICogeFtpICsgMV0gLSBhW2kgKyAxXTtcbiAgcmV0dXJuIFthLCBiXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IE5hdHVyYWwoY29udGV4dCk7XG59XG4iLCJmdW5jdGlvbiBTdGVwKGNvbnRleHQsIHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX3QgPSB0O1xufVxuXG5TdGVwLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94ID0gdGhpcy5feSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICgwIDwgdGhpcy5fdCAmJiB0aGlzLl90IDwgMSAmJiB0aGlzLl9wb2ludCA9PT0gMikgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feCwgdGhpcy5feSk7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIGlmICh0aGlzLl9saW5lID49IDApIHRoaXMuX3QgPSAxIC0gdGhpcy5fdCwgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBpZiAodGhpcy5fdCA8PSAwKSB7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feCwgeSk7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHgxID0gdGhpcy5feCAqICgxIC0gdGhpcy5fdCkgKyB4ICogdGhpcy5fdDtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MSwgdGhpcy5feSk7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeDEsIHkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl94ID0geCwgdGhpcy5feSA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDAuNSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGVwQmVmb3JlKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RlcEFmdGVyKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDEpO1xufVxuIiwiZnVuY3Rpb24gUmVkQmxhY2tUcmVlKCkge1xuICB0aGlzLl8gPSBudWxsOyAvLyByb290IG5vZGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlZEJsYWNrTm9kZShub2RlKSB7XG4gIG5vZGUuVSA9IC8vIHBhcmVudCBub2RlXG4gIG5vZGUuQyA9IC8vIGNvbG9yIC0gdHJ1ZSBmb3IgcmVkLCBmYWxzZSBmb3IgYmxhY2tcbiAgbm9kZS5MID0gLy8gbGVmdCBub2RlXG4gIG5vZGUuUiA9IC8vIHJpZ2h0IG5vZGVcbiAgbm9kZS5QID0gLy8gcHJldmlvdXMgbm9kZVxuICBub2RlLk4gPSBudWxsOyAvLyBuZXh0IG5vZGVcbn1cblxuUmVkQmxhY2tUcmVlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFJlZEJsYWNrVHJlZSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uKGFmdGVyLCBub2RlKSB7XG4gICAgdmFyIHBhcmVudCwgZ3JhbmRwYSwgdW5jbGU7XG5cbiAgICBpZiAoYWZ0ZXIpIHtcbiAgICAgIG5vZGUuUCA9IGFmdGVyO1xuICAgICAgbm9kZS5OID0gYWZ0ZXIuTjtcbiAgICAgIGlmIChhZnRlci5OKSBhZnRlci5OLlAgPSBub2RlO1xuICAgICAgYWZ0ZXIuTiA9IG5vZGU7XG4gICAgICBpZiAoYWZ0ZXIuUikge1xuICAgICAgICBhZnRlciA9IGFmdGVyLlI7XG4gICAgICAgIHdoaWxlIChhZnRlci5MKSBhZnRlciA9IGFmdGVyLkw7XG4gICAgICAgIGFmdGVyLkwgPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWZ0ZXIuUiA9IG5vZGU7XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBhZnRlcjtcbiAgICB9IGVsc2UgaWYgKHRoaXMuXykge1xuICAgICAgYWZ0ZXIgPSBSZWRCbGFja0ZpcnN0KHRoaXMuXyk7XG4gICAgICBub2RlLlAgPSBudWxsO1xuICAgICAgbm9kZS5OID0gYWZ0ZXI7XG4gICAgICBhZnRlci5QID0gYWZ0ZXIuTCA9IG5vZGU7XG4gICAgICBwYXJlbnQgPSBhZnRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5QID0gbm9kZS5OID0gbnVsbDtcbiAgICAgIHRoaXMuXyA9IG5vZGU7XG4gICAgICBwYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgICBub2RlLkwgPSBub2RlLlIgPSBudWxsO1xuICAgIG5vZGUuVSA9IHBhcmVudDtcbiAgICBub2RlLkMgPSB0cnVlO1xuXG4gICAgYWZ0ZXIgPSBub2RlO1xuICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LkMpIHtcbiAgICAgIGdyYW5kcGEgPSBwYXJlbnQuVTtcbiAgICAgIGlmIChwYXJlbnQgPT09IGdyYW5kcGEuTCkge1xuICAgICAgICB1bmNsZSA9IGdyYW5kcGEuUjtcbiAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICBwYXJlbnQuQyA9IHVuY2xlLkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5SKSB7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIGFmdGVyID0gcGFyZW50O1xuICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyZW50LkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVuY2xlID0gZ3JhbmRwYS5MO1xuICAgICAgICBpZiAodW5jbGUgJiYgdW5jbGUuQykge1xuICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xuICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgYWZ0ZXIgPSBncmFuZHBhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChhZnRlciA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIGFmdGVyID0gcGFyZW50O1xuICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyZW50LkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBncmFuZHBhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICB9XG4gICAgdGhpcy5fLkMgPSBmYWxzZTtcbiAgfSxcblxuICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZS5OKSBub2RlLk4uUCA9IG5vZGUuUDtcbiAgICBpZiAobm9kZS5QKSBub2RlLlAuTiA9IG5vZGUuTjtcbiAgICBub2RlLk4gPSBub2RlLlAgPSBudWxsO1xuXG4gICAgdmFyIHBhcmVudCA9IG5vZGUuVSxcbiAgICAgICAgc2libGluZyxcbiAgICAgICAgbGVmdCA9IG5vZGUuTCxcbiAgICAgICAgcmlnaHQgPSBub2RlLlIsXG4gICAgICAgIG5leHQsXG4gICAgICAgIHJlZDtcblxuICAgIGlmICghbGVmdCkgbmV4dCA9IHJpZ2h0O1xuICAgIGVsc2UgaWYgKCFyaWdodCkgbmV4dCA9IGxlZnQ7XG4gICAgZWxzZSBuZXh0ID0gUmVkQmxhY2tGaXJzdChyaWdodCk7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LkwgPT09IG5vZGUpIHBhcmVudC5MID0gbmV4dDtcbiAgICAgIGVsc2UgcGFyZW50LlIgPSBuZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl8gPSBuZXh0O1xuICAgIH1cblxuICAgIGlmIChsZWZ0ICYmIHJpZ2h0KSB7XG4gICAgICByZWQgPSBuZXh0LkM7XG4gICAgICBuZXh0LkMgPSBub2RlLkM7XG4gICAgICBuZXh0LkwgPSBsZWZ0O1xuICAgICAgbGVmdC5VID0gbmV4dDtcbiAgICAgIGlmIChuZXh0ICE9PSByaWdodCkge1xuICAgICAgICBwYXJlbnQgPSBuZXh0LlU7XG4gICAgICAgIG5leHQuVSA9IG5vZGUuVTtcbiAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgICAgcGFyZW50LkwgPSBub2RlO1xuICAgICAgICBuZXh0LlIgPSByaWdodDtcbiAgICAgICAgcmlnaHQuVSA9IG5leHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0LlUgPSBwYXJlbnQ7XG4gICAgICAgIHBhcmVudCA9IG5leHQ7XG4gICAgICAgIG5vZGUgPSBuZXh0LlI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZCA9IG5vZGUuQztcbiAgICAgIG5vZGUgPSBuZXh0O1xuICAgIH1cblxuICAgIGlmIChub2RlKSBub2RlLlUgPSBwYXJlbnQ7XG4gICAgaWYgKHJlZCkgcmV0dXJuO1xuICAgIGlmIChub2RlICYmIG5vZGUuQykgeyBub2RlLkMgPSBmYWxzZTsgcmV0dXJuOyB9XG5cbiAgICBkbyB7XG4gICAgICBpZiAobm9kZSA9PT0gdGhpcy5fKSBicmVhaztcbiAgICAgIGlmIChub2RlID09PSBwYXJlbnQuTCkge1xuICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgIGlmIChzaWJsaW5nLkMpIHtcbiAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc2libGluZy5MICYmIHNpYmxpbmcuTC5DKVxuICAgICAgICAgICAgfHwgKHNpYmxpbmcuUiAmJiBzaWJsaW5nLlIuQykpIHtcbiAgICAgICAgICBpZiAoIXNpYmxpbmcuUiB8fCAhc2libGluZy5SLkMpIHtcbiAgICAgICAgICAgIHNpYmxpbmcuTC5DID0gZmFsc2U7XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBzaWJsaW5nKTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2libGluZy5DID0gcGFyZW50LkM7XG4gICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIG5vZGUgPSB0aGlzLl87XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgaWYgKHNpYmxpbmcuQykge1xuICAgICAgICAgIHNpYmxpbmcuQyA9IGZhbHNlO1xuICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgc2libGluZyA9IHBhcmVudC5MO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc2libGluZy5MICYmIHNpYmxpbmcuTC5DKVxuICAgICAgICAgIHx8IChzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpKSB7XG4gICAgICAgICAgaWYgKCFzaWJsaW5nLkwgfHwgIXNpYmxpbmcuTC5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBzaWJsaW5nKTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2libGluZy5DID0gcGFyZW50LkM7XG4gICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICBub2RlID0gdGhpcy5fO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5VO1xuICAgIH0gd2hpbGUgKCFub2RlLkMpO1xuXG4gICAgaWYgKG5vZGUpIG5vZGUuQyA9IGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBSZWRCbGFja1JvdGF0ZUxlZnQodHJlZSwgbm9kZSkge1xuICB2YXIgcCA9IG5vZGUsXG4gICAgICBxID0gbm9kZS5SLFxuICAgICAgcGFyZW50ID0gcC5VO1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTtcbiAgICBlbHNlIHBhcmVudC5SID0gcTtcbiAgfSBlbHNlIHtcbiAgICB0cmVlLl8gPSBxO1xuICB9XG5cbiAgcS5VID0gcGFyZW50O1xuICBwLlUgPSBxO1xuICBwLlIgPSBxLkw7XG4gIGlmIChwLlIpIHAuUi5VID0gcDtcbiAgcS5MID0gcDtcbn1cblxuZnVuY3Rpb24gUmVkQmxhY2tSb3RhdGVSaWdodCh0cmVlLCBub2RlKSB7XG4gIHZhciBwID0gbm9kZSxcbiAgICAgIHEgPSBub2RlLkwsXG4gICAgICBwYXJlbnQgPSBwLlU7XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQuTCA9PT0gcCkgcGFyZW50LkwgPSBxO1xuICAgIGVsc2UgcGFyZW50LlIgPSBxO1xuICB9IGVsc2Uge1xuICAgIHRyZWUuXyA9IHE7XG4gIH1cblxuICBxLlUgPSBwYXJlbnQ7XG4gIHAuVSA9IHE7XG4gIHAuTCA9IHEuUjtcbiAgaWYgKHAuTCkgcC5MLlUgPSBwO1xuICBxLlIgPSBwO1xufVxuXG5mdW5jdGlvbiBSZWRCbGFja0ZpcnN0KG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgcmV0dXJuIG5vZGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlZEJsYWNrVHJlZTtcbiIsImltcG9ydCB7Y2VsbHMsIGVkZ2VzLCBlcHNpbG9ufSBmcm9tIFwiLi9EaWFncmFtXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFZGdlKGxlZnQsIHJpZ2h0LCB2MCwgdjEpIHtcbiAgdmFyIGVkZ2UgPSBbbnVsbCwgbnVsbF0sXG4gICAgICBpbmRleCA9IGVkZ2VzLnB1c2goZWRnZSkgLSAxO1xuICBlZGdlLmxlZnQgPSBsZWZ0O1xuICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XG4gIGlmICh2MCkgc2V0RWRnZUVuZChlZGdlLCBsZWZ0LCByaWdodCwgdjApO1xuICBpZiAodjEpIHNldEVkZ2VFbmQoZWRnZSwgcmlnaHQsIGxlZnQsIHYxKTtcbiAgY2VsbHNbbGVmdC5pbmRleF0uaGFsZmVkZ2VzLnB1c2goaW5kZXgpO1xuICBjZWxsc1tyaWdodC5pbmRleF0uaGFsZmVkZ2VzLnB1c2goaW5kZXgpO1xuICByZXR1cm4gZWRnZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJvcmRlckVkZ2UobGVmdCwgdjAsIHYxKSB7XG4gIHZhciBlZGdlID0gW3YwLCB2MV07XG4gIGVkZ2UubGVmdCA9IGxlZnQ7XG4gIHJldHVybiBlZGdlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0RWRnZUVuZChlZGdlLCBsZWZ0LCByaWdodCwgdmVydGV4KSB7XG4gIGlmICghZWRnZVswXSAmJiAhZWRnZVsxXSkge1xuICAgIGVkZ2VbMF0gPSB2ZXJ0ZXg7XG4gICAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XG4gIH0gZWxzZSBpZiAoZWRnZS5sZWZ0ID09PSByaWdodCkge1xuICAgIGVkZ2VbMV0gPSB2ZXJ0ZXg7XG4gIH0gZWxzZSB7XG4gICAgZWRnZVswXSA9IHZlcnRleDtcbiAgfVxufVxuXG4vLyBMaWFuZ+KAk0JhcnNreSBsaW5lIGNsaXBwaW5nLlxuZnVuY3Rpb24gY2xpcEVkZ2UoZWRnZSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIGEgPSBlZGdlWzBdLFxuICAgICAgYiA9IGVkZ2VbMV0sXG4gICAgICBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBieCA9IGJbMF0sXG4gICAgICBieSA9IGJbMV0sXG4gICAgICB0MCA9IDAsXG4gICAgICB0MSA9IDEsXG4gICAgICBkeCA9IGJ4IC0gYXgsXG4gICAgICBkeSA9IGJ5IC0gYXksXG4gICAgICByO1xuXG4gIHIgPSB4MCAtIGF4O1xuICBpZiAoIWR4ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHg7XG4gIGlmIChkeCA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geDEgLSBheDtcbiAgaWYgKCFkeCAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgciA9IHkwIC0gYXk7XG4gIGlmICghZHkgJiYgciA+IDApIHJldHVybjtcbiAgciAvPSBkeTtcbiAgaWYgKGR5IDwgMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfVxuXG4gIHIgPSB5MSAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPCAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH1cblxuICBpZiAoISh0MCA+IDApICYmICEodDEgPCAxKSkgcmV0dXJuIHRydWU7IC8vIFRPRE8gQmV0dGVyIGNoZWNrP1xuXG4gIGlmICh0MCA+IDApIGVkZ2VbMF0gPSBbYXggKyB0MCAqIGR4LCBheSArIHQwICogZHldO1xuICBpZiAodDEgPCAxKSBlZGdlWzFdID0gW2F4ICsgdDEgKiBkeCwgYXkgKyB0MSAqIGR5XTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbm5lY3RFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciB2MSA9IGVkZ2VbMV07XG4gIGlmICh2MSkgcmV0dXJuIHRydWU7XG5cbiAgdmFyIHYwID0gZWRnZVswXSxcbiAgICAgIGxlZnQgPSBlZGdlLmxlZnQsXG4gICAgICByaWdodCA9IGVkZ2UucmlnaHQsXG4gICAgICBseCA9IGxlZnRbMF0sXG4gICAgICBseSA9IGxlZnRbMV0sXG4gICAgICByeCA9IHJpZ2h0WzBdLFxuICAgICAgcnkgPSByaWdodFsxXSxcbiAgICAgIGZ4ID0gKGx4ICsgcngpIC8gMixcbiAgICAgIGZ5ID0gKGx5ICsgcnkpIC8gMixcbiAgICAgIGZtLFxuICAgICAgZmI7XG5cbiAgaWYgKHJ5ID09PSBseSkge1xuICAgIGlmIChmeCA8IHgwIHx8IGZ4ID49IHgxKSByZXR1cm47XG4gICAgaWYgKGx4ID4gcngpIHtcbiAgICAgIGlmICghdjApIHYwID0gW2Z4LCB5MF07XG4gICAgICBlbHNlIGlmICh2MFsxXSA+PSB5MSkgcmV0dXJuO1xuICAgICAgdjEgPSBbZngsIHkxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF2MCkgdjAgPSBbZngsIHkxXTtcbiAgICAgIGVsc2UgaWYgKHYwWzFdIDwgeTApIHJldHVybjtcbiAgICAgIHYxID0gW2Z4LCB5MF07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZtID0gKGx4IC0gcngpIC8gKHJ5IC0gbHkpO1xuICAgIGZiID0gZnkgLSBmbSAqIGZ4O1xuICAgIGlmIChmbSA8IC0xIHx8IGZtID4gMSkge1xuICAgICAgaWYgKGx4ID4gcngpIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbKHkwIC0gZmIpIC8gZm0sIHkwXTtcbiAgICAgICAgZWxzZSBpZiAodjBbMV0gPj0geTEpIHJldHVybjtcbiAgICAgICAgdjEgPSBbKHkxIC0gZmIpIC8gZm0sIHkxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdjApIHYwID0gWyh5MSAtIGZiKSAvIGZtLCB5MV07XG4gICAgICAgIGVsc2UgaWYgKHYwWzFdIDwgeTApIHJldHVybjtcbiAgICAgICAgdjEgPSBbKHkwIC0gZmIpIC8gZm0sIHkwXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGx5IDwgcnkpIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbeDAsIGZtICogeDAgKyBmYl07XG4gICAgICAgIGVsc2UgaWYgKHYwWzBdID49IHgxKSByZXR1cm47XG4gICAgICAgIHYxID0gW3gxLCBmbSAqIHgxICsgZmJdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbeDEsIGZtICogeDEgKyBmYl07XG4gICAgICAgIGVsc2UgaWYgKHYwWzBdIDwgeDApIHJldHVybjtcbiAgICAgICAgdjEgPSBbeDAsIGZtICogeDAgKyBmYl07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWRnZVswXSA9IHYwO1xuICBlZGdlWzFdID0gdjE7XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xpcEVkZ2VzKHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBpID0gZWRnZXMubGVuZ3RoLFxuICAgICAgZWRnZTtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKCFjb25uZWN0RWRnZShlZGdlID0gZWRnZXNbaV0sIHgwLCB5MCwgeDEsIHkxKVxuICAgICAgICB8fCAhY2xpcEVkZ2UoZWRnZSwgeDAsIHkwLCB4MSwgeTEpXG4gICAgICAgIHx8ICEoTWF0aC5hYnMoZWRnZVswXVswXSAtIGVkZ2VbMV1bMF0pID4gZXBzaWxvblxuICAgICAgICAgICAgfHwgTWF0aC5hYnMoZWRnZVswXVsxXSAtIGVkZ2VbMV1bMV0pID4gZXBzaWxvbikpIHtcbiAgICAgIGRlbGV0ZSBlZGdlc1tpXTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7Y3JlYXRlQm9yZGVyRWRnZX0gZnJvbSBcIi4vRWRnZVwiO1xuaW1wb3J0IHtjZWxscywgZWRnZXMsIGVwc2lsb259IGZyb20gXCIuL0RpYWdyYW1cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNlbGwoc2l0ZSkge1xuICByZXR1cm4gY2VsbHNbc2l0ZS5pbmRleF0gPSB7XG4gICAgc2l0ZTogc2l0ZSxcbiAgICBoYWxmZWRnZXM6IFtdXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2UpIHtcbiAgdmFyIHNpdGUgPSBjZWxsLnNpdGUsXG4gICAgICB2YSA9IGVkZ2UubGVmdCxcbiAgICAgIHZiID0gZWRnZS5yaWdodDtcbiAgaWYgKHNpdGUgPT09IHZiKSB2YiA9IHZhLCB2YSA9IHNpdGU7XG4gIGlmICh2YikgcmV0dXJuIE1hdGguYXRhbjIodmJbMV0gLSB2YVsxXSwgdmJbMF0gLSB2YVswXSk7XG4gIGlmIChzaXRlID09PSB2YSkgdmEgPSBlZGdlWzFdLCB2YiA9IGVkZ2VbMF07XG4gIGVsc2UgdmEgPSBlZGdlWzBdLCB2YiA9IGVkZ2VbMV07XG4gIHJldHVybiBNYXRoLmF0YW4yKHZhWzBdIC0gdmJbMF0sIHZiWzFdIC0gdmFbMV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZSkge1xuICByZXR1cm4gZWRnZVsrKGVkZ2UubGVmdCAhPT0gY2VsbC5zaXRlKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjZWxsSGFsZmVkZ2VFbmQoY2VsbCwgZWRnZSkge1xuICByZXR1cm4gZWRnZVsrKGVkZ2UubGVmdCA9PT0gY2VsbC5zaXRlKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0Q2VsbEhhbGZlZGdlcygpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBjZWxscy5sZW5ndGgsIGNlbGwsIGhhbGZlZGdlcywgaiwgbTsgaSA8IG47ICsraSkge1xuICAgIGlmICgoY2VsbCA9IGNlbGxzW2ldKSAmJiAobSA9IChoYWxmZWRnZXMgPSBjZWxsLmhhbGZlZGdlcykubGVuZ3RoKSkge1xuICAgICAgdmFyIGluZGV4ID0gbmV3IEFycmF5KG0pLFxuICAgICAgICAgIGFycmF5ID0gbmV3IEFycmF5KG0pO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgaW5kZXhbal0gPSBqLCBhcnJheVtqXSA9IGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1tqXV0pO1xuICAgICAgaW5kZXguc29ydChmdW5jdGlvbihpLCBqKSB7IHJldHVybiBhcnJheVtqXSAtIGFycmF5W2ldOyB9KTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGFycmF5W2pdID0gaGFsZmVkZ2VzW2luZGV4W2pdXTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGhhbGZlZGdlc1tqXSA9IGFycmF5W2pdO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xpcENlbGxzKHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBuQ2VsbHMgPSBjZWxscy5sZW5ndGgsXG4gICAgICBpQ2VsbCxcbiAgICAgIGNlbGwsXG4gICAgICBzaXRlLFxuICAgICAgaUhhbGZlZGdlLFxuICAgICAgaGFsZmVkZ2VzLFxuICAgICAgbkhhbGZlZGdlcyxcbiAgICAgIHN0YXJ0LFxuICAgICAgc3RhcnRYLFxuICAgICAgc3RhcnRZLFxuICAgICAgZW5kLFxuICAgICAgZW5kWCxcbiAgICAgIGVuZFksXG4gICAgICBjb3ZlciA9IHRydWU7XG5cbiAgZm9yIChpQ2VsbCA9IDA7IGlDZWxsIDwgbkNlbGxzOyArK2lDZWxsKSB7XG4gICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcbiAgICAgIHNpdGUgPSBjZWxsLnNpdGU7XG4gICAgICBoYWxmZWRnZXMgPSBjZWxsLmhhbGZlZGdlcztcbiAgICAgIGlIYWxmZWRnZSA9IGhhbGZlZGdlcy5sZW5ndGg7XG5cbiAgICAgIC8vIFJlbW92ZSBhbnkgZGFuZ2xpbmcgY2xpcHBlZCBlZGdlcy5cbiAgICAgIHdoaWxlIChpSGFsZmVkZ2UtLSkge1xuICAgICAgICBpZiAoIWVkZ2VzW2hhbGZlZGdlc1tpSGFsZmVkZ2VdXSkge1xuICAgICAgICAgIGhhbGZlZGdlcy5zcGxpY2UoaUhhbGZlZGdlLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJbnNlcnQgYW55IGJvcmRlciBlZGdlcyBhcyBuZWNlc3NhcnkuXG4gICAgICBpSGFsZmVkZ2UgPSAwLCBuSGFsZmVkZ2VzID0gaGFsZmVkZ2VzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpSGFsZmVkZ2UgPCBuSGFsZmVkZ2VzKSB7XG4gICAgICAgIGVuZCA9IGNlbGxIYWxmZWRnZUVuZChjZWxsLCBlZGdlc1toYWxmZWRnZXNbaUhhbGZlZGdlXV0pLCBlbmRYID0gZW5kWzBdLCBlbmRZID0gZW5kWzFdO1xuICAgICAgICBzdGFydCA9IGNlbGxIYWxmZWRnZVN0YXJ0KGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1srK2lIYWxmZWRnZSAlIG5IYWxmZWRnZXNdXSksIHN0YXJ0WCA9IHN0YXJ0WzBdLCBzdGFydFkgPSBzdGFydFsxXTtcbiAgICAgICAgaWYgKE1hdGguYWJzKGVuZFggLSBzdGFydFgpID4gZXBzaWxvbiB8fCBNYXRoLmFicyhlbmRZIC0gc3RhcnRZKSA+IGVwc2lsb24pIHtcbiAgICAgICAgICBoYWxmZWRnZXMuc3BsaWNlKGlIYWxmZWRnZSwgMCwgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIGVuZCxcbiAgICAgICAgICAgICAgTWF0aC5hYnMoZW5kWCAtIHgwKSA8IGVwc2lsb24gJiYgeTEgLSBlbmRZID4gZXBzaWxvbiA/IFt4MCwgTWF0aC5hYnMoc3RhcnRYIC0geDApIDwgZXBzaWxvbiA/IHN0YXJ0WSA6IHkxXVxuICAgICAgICAgICAgICA6IE1hdGguYWJzKGVuZFkgLSB5MSkgPCBlcHNpbG9uICYmIHgxIC0gZW5kWCA+IGVwc2lsb24gPyBbTWF0aC5hYnMoc3RhcnRZIC0geTEpIDwgZXBzaWxvbiA/IHN0YXJ0WCA6IHgxLCB5MV1cbiAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRYIC0geDEpIDwgZXBzaWxvbiAmJiBlbmRZIC0geTAgPiBlcHNpbG9uID8gW3gxLCBNYXRoLmFicyhzdGFydFggLSB4MSkgPCBlcHNpbG9uID8gc3RhcnRZIDogeTBdXG4gICAgICAgICAgICAgIDogTWF0aC5hYnMoZW5kWSAtIHkwKSA8IGVwc2lsb24gJiYgZW5kWCAtIHgwID4gZXBzaWxvbiA/IFtNYXRoLmFicyhzdGFydFkgLSB5MCkgPCBlcHNpbG9uID8gc3RhcnRYIDogeDAsIHkwXVxuICAgICAgICAgICAgICA6IG51bGwpKSAtIDEpO1xuICAgICAgICAgICsrbkhhbGZlZGdlcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobkhhbGZlZGdlcykgY292ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB0aGVyZSB3ZXJlbuKAmXQgYW55IGVkZ2VzLCBoYXZlIHRoZSBjbG9zZXN0IHNpdGUgY292ZXIgdGhlIGV4dGVudC5cbiAgLy8gSXQgZG9lc27igJl0IG1hdHRlciB3aGljaCBjb3JuZXIgb2YgdGhlIGV4dGVudCB3ZSBtZWFzdXJlIVxuICBpZiAoY292ZXIpIHtcbiAgICB2YXIgZHgsIGR5LCBkMiwgZGMgPSBJbmZpbml0eTtcblxuICAgIGZvciAoaUNlbGwgPSAwLCBjb3ZlciA9IG51bGw7IGlDZWxsIDwgbkNlbGxzOyArK2lDZWxsKSB7XG4gICAgICBpZiAoY2VsbCA9IGNlbGxzW2lDZWxsXSkge1xuICAgICAgICBzaXRlID0gY2VsbC5zaXRlO1xuICAgICAgICBkeCA9IHNpdGVbMF0gLSB4MDtcbiAgICAgICAgZHkgPSBzaXRlWzFdIC0geTA7XG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIGlmIChkMiA8IGRjKSBkYyA9IGQyLCBjb3ZlciA9IGNlbGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvdmVyKSB7XG4gICAgICB2YXIgdjAwID0gW3gwLCB5MF0sIHYwMSA9IFt4MCwgeTFdLCB2MTEgPSBbeDEsIHkxXSwgdjEwID0gW3gxLCB5MF07XG4gICAgICBjb3Zlci5oYWxmZWRnZXMucHVzaChcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUgPSBjb3Zlci5zaXRlLCB2MDAsIHYwMSkpIC0gMSxcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIHYwMSwgdjExKSkgLSAxLFxuICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSwgdjExLCB2MTApKSAtIDEsXG4gICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MTAsIHYwMCkpIC0gMVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyBMYXN0bHkgZGVsZXRlIGFueSBjZWxscyB3aXRoIG5vIGVkZ2VzOyB0aGVzZSB3ZXJlIGVudGlyZWx5IGNsaXBwZWQuXG4gIGZvciAoaUNlbGwgPSAwOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgIGlmIChjZWxsID0gY2VsbHNbaUNlbGxdKSB7XG4gICAgICBpZiAoIWNlbGwuaGFsZmVkZ2VzLmxlbmd0aCkge1xuICAgICAgICBkZWxldGUgY2VsbHNbaUNlbGxdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHtSZWRCbGFja05vZGV9IGZyb20gXCIuL1JlZEJsYWNrVHJlZVwiO1xuaW1wb3J0IHtjaXJjbGVzLCBlcHNpbG9uMn0gZnJvbSBcIi4vRGlhZ3JhbVwiO1xuXG52YXIgY2lyY2xlUG9vbCA9IFtdO1xuXG5leHBvcnQgdmFyIGZpcnN0Q2lyY2xlO1xuXG5mdW5jdGlvbiBDaXJjbGUoKSB7XG4gIFJlZEJsYWNrTm9kZSh0aGlzKTtcbiAgdGhpcy54ID1cbiAgdGhpcy55ID1cbiAgdGhpcy5hcmMgPVxuICB0aGlzLnNpdGUgPVxuICB0aGlzLmN5ID0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF0dGFjaENpcmNsZShhcmMpIHtcbiAgdmFyIGxBcmMgPSBhcmMuUCxcbiAgICAgIHJBcmMgPSBhcmMuTjtcblxuICBpZiAoIWxBcmMgfHwgIXJBcmMpIHJldHVybjtcblxuICB2YXIgbFNpdGUgPSBsQXJjLnNpdGUsXG4gICAgICBjU2l0ZSA9IGFyYy5zaXRlLFxuICAgICAgclNpdGUgPSByQXJjLnNpdGU7XG5cbiAgaWYgKGxTaXRlID09PSByU2l0ZSkgcmV0dXJuO1xuXG4gIHZhciBieCA9IGNTaXRlWzBdLFxuICAgICAgYnkgPSBjU2l0ZVsxXSxcbiAgICAgIGF4ID0gbFNpdGVbMF0gLSBieCxcbiAgICAgIGF5ID0gbFNpdGVbMV0gLSBieSxcbiAgICAgIGN4ID0gclNpdGVbMF0gLSBieCxcbiAgICAgIGN5ID0gclNpdGVbMV0gLSBieTtcblxuICB2YXIgZCA9IDIgKiAoYXggKiBjeSAtIGF5ICogY3gpO1xuICBpZiAoZCA+PSAtZXBzaWxvbjIpIHJldHVybjtcblxuICB2YXIgaGEgPSBheCAqIGF4ICsgYXkgKiBheSxcbiAgICAgIGhjID0gY3ggKiBjeCArIGN5ICogY3ksXG4gICAgICB4ID0gKGN5ICogaGEgLSBheSAqIGhjKSAvIGQsXG4gICAgICB5ID0gKGF4ICogaGMgLSBjeCAqIGhhKSAvIGQ7XG5cbiAgdmFyIGNpcmNsZSA9IGNpcmNsZVBvb2wucG9wKCkgfHwgbmV3IENpcmNsZTtcbiAgY2lyY2xlLmFyYyA9IGFyYztcbiAgY2lyY2xlLnNpdGUgPSBjU2l0ZTtcbiAgY2lyY2xlLnggPSB4ICsgYng7XG4gIGNpcmNsZS55ID0gKGNpcmNsZS5jeSA9IHkgKyBieSkgKyBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7IC8vIHkgYm90dG9tXG5cbiAgYXJjLmNpcmNsZSA9IGNpcmNsZTtcblxuICB2YXIgYmVmb3JlID0gbnVsbCxcbiAgICAgIG5vZGUgPSBjaXJjbGVzLl87XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAoY2lyY2xlLnkgPCBub2RlLnkgfHwgKGNpcmNsZS55ID09PSBub2RlLnkgJiYgY2lyY2xlLnggPD0gbm9kZS54KSkge1xuICAgICAgaWYgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgICAgIGVsc2UgeyBiZWZvcmUgPSBub2RlLlA7IGJyZWFrOyB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChub2RlLlIpIG5vZGUgPSBub2RlLlI7XG4gICAgICBlbHNlIHsgYmVmb3JlID0gbm9kZTsgYnJlYWs7IH1cbiAgICB9XG4gIH1cblxuICBjaXJjbGVzLmluc2VydChiZWZvcmUsIGNpcmNsZSk7XG4gIGlmICghYmVmb3JlKSBmaXJzdENpcmNsZSA9IGNpcmNsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGFjaENpcmNsZShhcmMpIHtcbiAgdmFyIGNpcmNsZSA9IGFyYy5jaXJjbGU7XG4gIGlmIChjaXJjbGUpIHtcbiAgICBpZiAoIWNpcmNsZS5QKSBmaXJzdENpcmNsZSA9IGNpcmNsZS5OO1xuICAgIGNpcmNsZXMucmVtb3ZlKGNpcmNsZSk7XG4gICAgY2lyY2xlUG9vbC5wdXNoKGNpcmNsZSk7XG4gICAgUmVkQmxhY2tOb2RlKGNpcmNsZSk7XG4gICAgYXJjLmNpcmNsZSA9IG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCB7UmVkQmxhY2tOb2RlfSBmcm9tIFwiLi9SZWRCbGFja1RyZWVcIjtcbmltcG9ydCB7Y3JlYXRlQ2VsbH0gZnJvbSBcIi4vQ2VsbFwiO1xuaW1wb3J0IHthdHRhY2hDaXJjbGUsIGRldGFjaENpcmNsZX0gZnJvbSBcIi4vQ2lyY2xlXCI7XG5pbXBvcnQge2NyZWF0ZUVkZ2UsIHNldEVkZ2VFbmR9IGZyb20gXCIuL0VkZ2VcIjtcbmltcG9ydCB7YmVhY2hlcywgZXBzaWxvbn0gZnJvbSBcIi4vRGlhZ3JhbVwiO1xuXG52YXIgYmVhY2hQb29sID0gW107XG5cbmZ1bmN0aW9uIEJlYWNoKCkge1xuICBSZWRCbGFja05vZGUodGhpcyk7XG4gIHRoaXMuZWRnZSA9XG4gIHRoaXMuc2l0ZSA9XG4gIHRoaXMuY2lyY2xlID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmVhY2goc2l0ZSkge1xuICB2YXIgYmVhY2ggPSBiZWFjaFBvb2wucG9wKCkgfHwgbmV3IEJlYWNoO1xuICBiZWFjaC5zaXRlID0gc2l0ZTtcbiAgcmV0dXJuIGJlYWNoO1xufVxuXG5mdW5jdGlvbiBkZXRhY2hCZWFjaChiZWFjaCkge1xuICBkZXRhY2hDaXJjbGUoYmVhY2gpO1xuICBiZWFjaGVzLnJlbW92ZShiZWFjaCk7XG4gIGJlYWNoUG9vbC5wdXNoKGJlYWNoKTtcbiAgUmVkQmxhY2tOb2RlKGJlYWNoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUJlYWNoKGJlYWNoKSB7XG4gIHZhciBjaXJjbGUgPSBiZWFjaC5jaXJjbGUsXG4gICAgICB4ID0gY2lyY2xlLngsXG4gICAgICB5ID0gY2lyY2xlLmN5LFxuICAgICAgdmVydGV4ID0gW3gsIHldLFxuICAgICAgcHJldmlvdXMgPSBiZWFjaC5QLFxuICAgICAgbmV4dCA9IGJlYWNoLk4sXG4gICAgICBkaXNhcHBlYXJpbmcgPSBbYmVhY2hdO1xuXG4gIGRldGFjaEJlYWNoKGJlYWNoKTtcblxuICB2YXIgbEFyYyA9IHByZXZpb3VzO1xuICB3aGlsZSAobEFyYy5jaXJjbGVcbiAgICAgICYmIE1hdGguYWJzKHggLSBsQXJjLmNpcmNsZS54KSA8IGVwc2lsb25cbiAgICAgICYmIE1hdGguYWJzKHkgLSBsQXJjLmNpcmNsZS5jeSkgPCBlcHNpbG9uKSB7XG4gICAgcHJldmlvdXMgPSBsQXJjLlA7XG4gICAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gICAgZGV0YWNoQmVhY2gobEFyYyk7XG4gICAgbEFyYyA9IHByZXZpb3VzO1xuICB9XG5cbiAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gIGRldGFjaENpcmNsZShsQXJjKTtcblxuICB2YXIgckFyYyA9IG5leHQ7XG4gIHdoaWxlIChyQXJjLmNpcmNsZVxuICAgICAgJiYgTWF0aC5hYnMoeCAtIHJBcmMuY2lyY2xlLngpIDwgZXBzaWxvblxuICAgICAgJiYgTWF0aC5hYnMoeSAtIHJBcmMuY2lyY2xlLmN5KSA8IGVwc2lsb24pIHtcbiAgICBuZXh0ID0gckFyYy5OO1xuICAgIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICAgIGRldGFjaEJlYWNoKHJBcmMpO1xuICAgIHJBcmMgPSBuZXh0O1xuICB9XG5cbiAgZGlzYXBwZWFyaW5nLnB1c2gockFyYyk7XG4gIGRldGFjaENpcmNsZShyQXJjKTtcblxuICB2YXIgbkFyY3MgPSBkaXNhcHBlYXJpbmcubGVuZ3RoLFxuICAgICAgaUFyYztcbiAgZm9yIChpQXJjID0gMTsgaUFyYyA8IG5BcmNzOyArK2lBcmMpIHtcbiAgICByQXJjID0gZGlzYXBwZWFyaW5nW2lBcmNdO1xuICAgIGxBcmMgPSBkaXNhcHBlYXJpbmdbaUFyYyAtIDFdO1xuICAgIHNldEVkZ2VFbmQockFyYy5lZGdlLCBsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgdmVydGV4KTtcbiAgfVxuXG4gIGxBcmMgPSBkaXNhcHBlYXJpbmdbMF07XG4gIHJBcmMgPSBkaXNhcHBlYXJpbmdbbkFyY3MgLSAxXTtcbiAgckFyYy5lZGdlID0gY3JlYXRlRWRnZShsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgbnVsbCwgdmVydGV4KTtcblxuICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gIGF0dGFjaENpcmNsZShyQXJjKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEJlYWNoKHNpdGUpIHtcbiAgdmFyIHggPSBzaXRlWzBdLFxuICAgICAgZGlyZWN0cml4ID0gc2l0ZVsxXSxcbiAgICAgIGxBcmMsXG4gICAgICByQXJjLFxuICAgICAgZHhsLFxuICAgICAgZHhyLFxuICAgICAgbm9kZSA9IGJlYWNoZXMuXztcblxuICB3aGlsZSAobm9kZSkge1xuICAgIGR4bCA9IGxlZnRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCkgLSB4O1xuICAgIGlmIChkeGwgPiBlcHNpbG9uKSBub2RlID0gbm9kZS5MOyBlbHNlIHtcbiAgICAgIGR4ciA9IHggLSByaWdodEJyZWFrUG9pbnQobm9kZSwgZGlyZWN0cml4KTtcbiAgICAgIGlmIChkeHIgPiBlcHNpbG9uKSB7XG4gICAgICAgIGlmICghbm9kZS5SKSB7XG4gICAgICAgICAgbEFyYyA9IG5vZGU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGUuUjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChkeGwgPiAtZXBzaWxvbikge1xuICAgICAgICAgIGxBcmMgPSBub2RlLlA7XG4gICAgICAgICAgckFyYyA9IG5vZGU7XG4gICAgICAgIH0gZWxzZSBpZiAoZHhyID4gLWVwc2lsb24pIHtcbiAgICAgICAgICBsQXJjID0gbm9kZTtcbiAgICAgICAgICByQXJjID0gbm9kZS5OO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxBcmMgPSByQXJjID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjcmVhdGVDZWxsKHNpdGUpO1xuICB2YXIgbmV3QXJjID0gY3JlYXRlQmVhY2goc2l0ZSk7XG4gIGJlYWNoZXMuaW5zZXJ0KGxBcmMsIG5ld0FyYyk7XG5cbiAgaWYgKCFsQXJjICYmICFyQXJjKSByZXR1cm47XG5cbiAgaWYgKGxBcmMgPT09IHJBcmMpIHtcbiAgICBkZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgckFyYyA9IGNyZWF0ZUJlYWNoKGxBcmMuc2l0ZSk7XG4gICAgYmVhY2hlcy5pbnNlcnQobmV3QXJjLCByQXJjKTtcbiAgICBuZXdBcmMuZWRnZSA9IHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIGF0dGFjaENpcmNsZShyQXJjKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXJBcmMpIHsgLy8gJiYgbEFyY1xuICAgIG5ld0FyYy5lZGdlID0gY3JlYXRlRWRnZShsQXJjLnNpdGUsIG5ld0FyYy5zaXRlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBlbHNlIGxBcmMgIT09IHJBcmNcbiAgZGV0YWNoQ2lyY2xlKGxBcmMpO1xuICBkZXRhY2hDaXJjbGUockFyYyk7XG5cbiAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLFxuICAgICAgYXggPSBsU2l0ZVswXSxcbiAgICAgIGF5ID0gbFNpdGVbMV0sXG4gICAgICBieCA9IHNpdGVbMF0gLSBheCxcbiAgICAgIGJ5ID0gc2l0ZVsxXSAtIGF5LFxuICAgICAgclNpdGUgPSByQXJjLnNpdGUsXG4gICAgICBjeCA9IHJTaXRlWzBdIC0gYXgsXG4gICAgICBjeSA9IHJTaXRlWzFdIC0gYXksXG4gICAgICBkID0gMiAqIChieCAqIGN5IC0gYnkgKiBjeCksXG4gICAgICBoYiA9IGJ4ICogYnggKyBieSAqIGJ5LFxuICAgICAgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSxcbiAgICAgIHZlcnRleCA9IFsoY3kgKiBoYiAtIGJ5ICogaGMpIC8gZCArIGF4LCAoYnggKiBoYyAtIGN4ICogaGIpIC8gZCArIGF5XTtcblxuICBzZXRFZGdlRW5kKHJBcmMuZWRnZSwgbFNpdGUsIHJTaXRlLCB2ZXJ0ZXgpO1xuICBuZXdBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobFNpdGUsIHNpdGUsIG51bGwsIHZlcnRleCk7XG4gIHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2Uoc2l0ZSwgclNpdGUsIG51bGwsIHZlcnRleCk7XG4gIGF0dGFjaENpcmNsZShsQXJjKTtcbiAgYXR0YWNoQ2lyY2xlKHJBcmMpO1xufVxuXG5mdW5jdGlvbiBsZWZ0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuICB2YXIgc2l0ZSA9IGFyYy5zaXRlLFxuICAgICAgcmZvY3ggPSBzaXRlWzBdLFxuICAgICAgcmZvY3kgPSBzaXRlWzFdLFxuICAgICAgcGJ5MiA9IHJmb2N5IC0gZGlyZWN0cml4O1xuXG4gIGlmICghcGJ5MikgcmV0dXJuIHJmb2N4O1xuXG4gIHZhciBsQXJjID0gYXJjLlA7XG4gIGlmICghbEFyYykgcmV0dXJuIC1JbmZpbml0eTtcblxuICBzaXRlID0gbEFyYy5zaXRlO1xuICB2YXIgbGZvY3ggPSBzaXRlWzBdLFxuICAgICAgbGZvY3kgPSBzaXRlWzFdLFxuICAgICAgcGxieTIgPSBsZm9jeSAtIGRpcmVjdHJpeDtcblxuICBpZiAoIXBsYnkyKSByZXR1cm4gbGZvY3g7XG5cbiAgdmFyIGhsID0gbGZvY3ggLSByZm9jeCxcbiAgICAgIGFieTIgPSAxIC8gcGJ5MiAtIDEgLyBwbGJ5MixcbiAgICAgIGIgPSBobCAvIHBsYnkyO1xuXG4gIGlmIChhYnkyKSByZXR1cm4gKC1iICsgTWF0aC5zcXJ0KGIgKiBiIC0gMiAqIGFieTIgKiAoaGwgKiBobCAvICgtMiAqIHBsYnkyKSAtIGxmb2N5ICsgcGxieTIgLyAyICsgcmZvY3kgLSBwYnkyIC8gMikpKSAvIGFieTIgKyByZm9jeDtcblxuICByZXR1cm4gKHJmb2N4ICsgbGZvY3gpIC8gMjtcbn1cblxuZnVuY3Rpb24gcmlnaHRCcmVha1BvaW50KGFyYywgZGlyZWN0cml4KSB7XG4gIHZhciByQXJjID0gYXJjLk47XG4gIGlmIChyQXJjKSByZXR1cm4gbGVmdEJyZWFrUG9pbnQockFyYywgZGlyZWN0cml4KTtcbiAgdmFyIHNpdGUgPSBhcmMuc2l0ZTtcbiAgcmV0dXJuIHNpdGVbMV0gPT09IGRpcmVjdHJpeCA/IHNpdGVbMF0gOiBJbmZpbml0eTtcbn1cbiIsImltcG9ydCB7YWRkQmVhY2gsIHJlbW92ZUJlYWNofSBmcm9tIFwiLi9CZWFjaFwiO1xuaW1wb3J0IHtzb3J0Q2VsbEhhbGZlZGdlcywgY2VsbEhhbGZlZGdlU3RhcnQsIGNsaXBDZWxsc30gZnJvbSBcIi4vQ2VsbFwiO1xuaW1wb3J0IHtmaXJzdENpcmNsZX0gZnJvbSBcIi4vQ2lyY2xlXCI7XG5pbXBvcnQge2NsaXBFZGdlc30gZnJvbSBcIi4vRWRnZVwiO1xuaW1wb3J0IFJlZEJsYWNrVHJlZSBmcm9tIFwiLi9SZWRCbGFja1RyZWVcIjtcblxuZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtNjtcbmV4cG9ydCB2YXIgZXBzaWxvbjIgPSAxZS0xMjtcbmV4cG9ydCB2YXIgYmVhY2hlcztcbmV4cG9ydCB2YXIgY2VsbHM7XG5leHBvcnQgdmFyIGNpcmNsZXM7XG5leHBvcnQgdmFyIGVkZ2VzO1xuXG5mdW5jdGlvbiB0cmlhbmdsZUFyZWEoYSwgYiwgYykge1xuICByZXR1cm4gKGFbMF0gLSBjWzBdKSAqIChiWzFdIC0gYVsxXSkgLSAoYVswXSAtIGJbMF0pICogKGNbMV0gLSBhWzFdKTtcbn1cblxuZnVuY3Rpb24gbGV4aWNvZ3JhcGhpYyhhLCBiKSB7XG4gIHJldHVybiBiWzFdIC0gYVsxXVxuICAgICAgfHwgYlswXSAtIGFbMF07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERpYWdyYW0oc2l0ZXMsIGV4dGVudCkge1xuICB2YXIgc2l0ZSA9IHNpdGVzLnNvcnQobGV4aWNvZ3JhcGhpYykucG9wKCksXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIGNpcmNsZTtcblxuICBlZGdlcyA9IFtdO1xuICBjZWxscyA9IG5ldyBBcnJheShzaXRlcy5sZW5ndGgpO1xuICBiZWFjaGVzID0gbmV3IFJlZEJsYWNrVHJlZTtcbiAgY2lyY2xlcyA9IG5ldyBSZWRCbGFja1RyZWU7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjaXJjbGUgPSBmaXJzdENpcmNsZTtcbiAgICBpZiAoc2l0ZSAmJiAoIWNpcmNsZSB8fCBzaXRlWzFdIDwgY2lyY2xlLnkgfHwgKHNpdGVbMV0gPT09IGNpcmNsZS55ICYmIHNpdGVbMF0gPCBjaXJjbGUueCkpKSB7XG4gICAgICBpZiAoc2l0ZVswXSAhPT0geCB8fCBzaXRlWzFdICE9PSB5KSB7XG4gICAgICAgIGFkZEJlYWNoKHNpdGUpO1xuICAgICAgICB4ID0gc2l0ZVswXSwgeSA9IHNpdGVbMV07XG4gICAgICB9XG4gICAgICBzaXRlID0gc2l0ZXMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChjaXJjbGUpIHtcbiAgICAgIHJlbW92ZUJlYWNoKGNpcmNsZS5hcmMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzb3J0Q2VsbEhhbGZlZGdlcygpO1xuXG4gIGlmIChleHRlbnQpIHtcbiAgICB2YXIgeDAgPSArZXh0ZW50WzBdWzBdLFxuICAgICAgICB5MCA9ICtleHRlbnRbMF1bMV0sXG4gICAgICAgIHgxID0gK2V4dGVudFsxXVswXSxcbiAgICAgICAgeTEgPSArZXh0ZW50WzFdWzFdO1xuICAgIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSk7XG4gICAgY2xpcENlbGxzKHgwLCB5MCwgeDEsIHkxKTtcbiAgfVxuXG4gIHRoaXMuZWRnZXMgPSBlZGdlcztcbiAgdGhpcy5jZWxscyA9IGNlbGxzO1xuXG4gIGJlYWNoZXMgPVxuICBjaXJjbGVzID1cbiAgZWRnZXMgPVxuICBjZWxscyA9IG51bGw7XG59XG5cbkRpYWdyYW0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlhZ3JhbSxcblxuICBwb2x5Z29uczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVkZ2VzID0gdGhpcy5lZGdlcztcblxuICAgIHJldHVybiB0aGlzLmNlbGxzLm1hcChmdW5jdGlvbihjZWxsKSB7XG4gICAgICB2YXIgcG9seWdvbiA9IGNlbGwuaGFsZmVkZ2VzLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlc1tpXSk7IH0pO1xuICAgICAgcG9seWdvbi5kYXRhID0gY2VsbC5zaXRlLmRhdGE7XG4gICAgICByZXR1cm4gcG9seWdvbjtcbiAgICB9KTtcbiAgfSxcblxuICB0cmlhbmdsZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0cmlhbmdsZXMgPSBbXSxcbiAgICAgICAgZWRnZXMgPSB0aGlzLmVkZ2VzO1xuXG4gICAgdGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGkpIHtcbiAgICAgIGlmICghKG0gPSAoaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXMpLmxlbmd0aCkpIHJldHVybjtcbiAgICAgIHZhciBzaXRlID0gY2VsbC5zaXRlLFxuICAgICAgICAgIGhhbGZlZGdlcyxcbiAgICAgICAgICBqID0gLTEsXG4gICAgICAgICAgbSxcbiAgICAgICAgICBzMCxcbiAgICAgICAgICBlMSA9IGVkZ2VzW2hhbGZlZGdlc1ttIC0gMV1dLFxuICAgICAgICAgIHMxID0gZTEubGVmdCA9PT0gc2l0ZSA/IGUxLnJpZ2h0IDogZTEubGVmdDtcblxuICAgICAgd2hpbGUgKCsraiA8IG0pIHtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgICAgZTEgPSBlZGdlc1toYWxmZWRnZXNbal1dO1xuICAgICAgICBzMSA9IGUxLmxlZnQgPT09IHNpdGUgPyBlMS5yaWdodCA6IGUxLmxlZnQ7XG4gICAgICAgIGlmIChzMCAmJiBzMSAmJiBpIDwgczAuaW5kZXggJiYgaSA8IHMxLmluZGV4ICYmIHRyaWFuZ2xlQXJlYShzaXRlLCBzMCwgczEpIDwgMCkge1xuICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKFtzaXRlLmRhdGEsIHMwLmRhdGEsIHMxLmRhdGFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRyaWFuZ2xlcztcbiAgfSxcblxuICBsaW5rczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRnZXMuZmlsdGVyKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICAgIHJldHVybiBlZGdlLnJpZ2h0O1xuICAgIH0pLm1hcChmdW5jdGlvbihlZGdlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IGVkZ2UubGVmdC5kYXRhLFxuICAgICAgICB0YXJnZXQ6IGVkZ2UucmlnaHQuZGF0YVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSxcblxuICBmaW5kOiBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXMsIGkwLCBpMSA9IHRoYXQuX2ZvdW5kIHx8IDAsIG4gPSB0aGF0LmNlbGxzLmxlbmd0aCwgY2VsbDtcblxuICAgIC8vIFVzZSB0aGUgcHJldmlvdXNseS1mb3VuZCBjZWxsLCBvciBzdGFydCB3aXRoIGFuIGFyYml0cmFyeSBvbmUuXG4gICAgd2hpbGUgKCEoY2VsbCA9IHRoYXQuY2VsbHNbaTFdKSkgaWYgKCsraTEgPj0gbikgcmV0dXJuIG51bGw7XG4gICAgdmFyIGR4ID0geCAtIGNlbGwuc2l0ZVswXSwgZHkgPSB5IC0gY2VsbC5zaXRlWzFdLCBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuXG4gICAgLy8gVHJhdmVyc2UgdGhlIGhhbGYtZWRnZXMgdG8gZmluZCBhIGNsb3NlciBjZWxsLCBpZiBhbnkuXG4gICAgZG8ge1xuICAgICAgY2VsbCA9IHRoYXQuY2VsbHNbaTAgPSBpMV0sIGkxID0gbnVsbDtcbiAgICAgIGNlbGwuaGFsZmVkZ2VzLmZvckVhY2goZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgZWRnZSA9IHRoYXQuZWRnZXNbZV0sIHYgPSBlZGdlLmxlZnQ7XG4gICAgICAgIGlmICgodiA9PT0gY2VsbC5zaXRlIHx8ICF2KSAmJiAhKHYgPSBlZGdlLnJpZ2h0KSkgcmV0dXJuO1xuICAgICAgICB2YXIgdnggPSB4IC0gdlswXSwgdnkgPSB5IC0gdlsxXSwgdjIgPSB2eCAqIHZ4ICsgdnkgKiB2eTtcbiAgICAgICAgaWYgKHYyIDwgZDIpIGQyID0gdjIsIGkxID0gdi5pbmRleDtcbiAgICAgIH0pO1xuICAgIH0gd2hpbGUgKGkxICE9PSBudWxsKTtcblxuICAgIHRoYXQuX2ZvdW5kID0gaTA7XG5cbiAgICByZXR1cm4gcmFkaXVzID09IG51bGwgfHwgZDIgPD0gcmFkaXVzICogcmFkaXVzID8gY2VsbC5zaXRlIDogbnVsbDtcbiAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIFRyYW5zZm9ybShrLCB4LCB5KSB7XG4gIHRoaXMuayA9IGs7XG4gIHRoaXMueCA9IHg7XG4gIHRoaXMueSA9IHk7XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2Zvcm0sXG4gIHNjYWxlOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIGsgPT09IDEgPyB0aGlzIDogbmV3IFRyYW5zZm9ybSh0aGlzLmsgKiBrLCB0aGlzLngsIHRoaXMueSk7XG4gIH0sXG4gIHRyYW5zbGF0ZTogZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiB4ID09PSAwICYgeSA9PT0gMCA/IHRoaXMgOiBuZXcgVHJhbnNmb3JtKHRoaXMuaywgdGhpcy54ICsgdGhpcy5rICogeCwgdGhpcy55ICsgdGhpcy5rICogeSk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBbcG9pbnRbMF0gKiB0aGlzLmsgKyB0aGlzLngsIHBvaW50WzFdICogdGhpcy5rICsgdGhpcy55XTtcbiAgfSxcbiAgYXBwbHlYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHggKiB0aGlzLmsgKyB0aGlzLng7XG4gIH0sXG4gIGFwcGx5WTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiB5ICogdGhpcy5rICsgdGhpcy55O1xuICB9LFxuICBpbnZlcnQ6IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIFsobG9jYXRpb25bMF0gLSB0aGlzLngpIC8gdGhpcy5rLCAobG9jYXRpb25bMV0gLSB0aGlzLnkpIC8gdGhpcy5rXTtcbiAgfSxcbiAgaW52ZXJ0WDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiAoeCAtIHRoaXMueCkgLyB0aGlzLms7XG4gIH0sXG4gIGludmVydFk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gKHkgLSB0aGlzLnkpIC8gdGhpcy5rO1xuICB9LFxuICByZXNjYWxlWDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4LmNvcHkoKS5kb21haW4oeC5yYW5nZSgpLm1hcCh0aGlzLmludmVydFgsIHRoaXMpLm1hcCh4LmludmVydCwgeCkpO1xuICB9LFxuICByZXNjYWxlWTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiB5LmNvcHkoKS5kb21haW4oeS5yYW5nZSgpLm1hcCh0aGlzLmludmVydFksIHRoaXMpLm1hcCh5LmludmVydCwgeSkpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgdGhpcy54ICsgXCIsXCIgKyB0aGlzLnkgKyBcIikgc2NhbGUoXCIgKyB0aGlzLmsgKyBcIilcIjtcbiAgfVxufTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IG5ldyBUcmFuc2Zvcm0oMSwgMCwgMCk7XG5cbnRyYW5zZm9ybS5wcm90b3R5cGUgPSBUcmFuc2Zvcm0ucHJvdG90eXBlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm0obm9kZSkge1xuICB3aGlsZSAoIW5vZGUuX196b29tKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuIGlkZW50aXR5O1xuICByZXR1cm4gbm9kZS5fX3pvb207XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7ZHJhZ0Rpc2FibGUsIGRyYWdFbmFibGV9IGZyb20gXCJkMy1kcmFnXCI7XG5pbXBvcnQge2ludGVycG9sYXRlWm9vbX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge2V2ZW50LCBjdXN0b21FdmVudCwgc2VsZWN0LCBtb3VzZSwgdG91Y2h9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7aW50ZXJydXB0fSBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgWm9vbUV2ZW50IGZyb20gXCIuL2V2ZW50LmpzXCI7XG5pbXBvcnQge1RyYW5zZm9ybSwgaWRlbnRpdHl9IGZyb20gXCIuL3RyYW5zZm9ybS5qc1wiO1xuaW1wb3J0IG5vZXZlbnQsIHtub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcigpIHtcbiAgcmV0dXJuICFldmVudC5jdHJsS2V5ICYmICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFeHRlbnQoKSB7XG4gIHZhciBlID0gdGhpcztcbiAgaWYgKGUgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSB7XG4gICAgZSA9IGUub3duZXJTVkdFbGVtZW50IHx8IGU7XG4gICAgaWYgKGUuaGFzQXR0cmlidXRlKFwidmlld0JveFwiKSkge1xuICAgICAgZSA9IGUudmlld0JveC5iYXNlVmFsO1xuICAgICAgcmV0dXJuIFtbZS54LCBlLnldLCBbZS54ICsgZS53aWR0aCwgZS55ICsgZS5oZWlnaHRdXTtcbiAgICB9XG4gICAgcmV0dXJuIFtbMCwgMF0sIFtlLndpZHRoLmJhc2VWYWwudmFsdWUsIGUuaGVpZ2h0LmJhc2VWYWwudmFsdWVdXTtcbiAgfVxuICByZXR1cm4gW1swLCAwXSwgW2UuY2xpZW50V2lkdGgsIGUuY2xpZW50SGVpZ2h0XV07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUcmFuc2Zvcm0oKSB7XG4gIHJldHVybiB0aGlzLl9fem9vbSB8fCBpZGVudGl0eTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFdoZWVsRGVsdGEoKSB7XG4gIHJldHVybiAtZXZlbnQuZGVsdGFZICogKGV2ZW50LmRlbHRhTW9kZSA9PT0gMSA/IDAuMDUgOiBldmVudC5kZWx0YU1vZGUgPyAxIDogMC4wMDIpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VG91Y2hhYmxlKCkge1xuICByZXR1cm4gbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzIHx8IChcIm9udG91Y2hzdGFydFwiIGluIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q29uc3RyYWluKHRyYW5zZm9ybSwgZXh0ZW50LCB0cmFuc2xhdGVFeHRlbnQpIHtcbiAgdmFyIGR4MCA9IHRyYW5zZm9ybS5pbnZlcnRYKGV4dGVudFswXVswXSkgLSB0cmFuc2xhdGVFeHRlbnRbMF1bMF0sXG4gICAgICBkeDEgPSB0cmFuc2Zvcm0uaW52ZXJ0WChleHRlbnRbMV1bMF0pIC0gdHJhbnNsYXRlRXh0ZW50WzFdWzBdLFxuICAgICAgZHkwID0gdHJhbnNmb3JtLmludmVydFkoZXh0ZW50WzBdWzFdKSAtIHRyYW5zbGF0ZUV4dGVudFswXVsxXSxcbiAgICAgIGR5MSA9IHRyYW5zZm9ybS5pbnZlcnRZKGV4dGVudFsxXVsxXSkgLSB0cmFuc2xhdGVFeHRlbnRbMV1bMV07XG4gIHJldHVybiB0cmFuc2Zvcm0udHJhbnNsYXRlKFxuICAgIGR4MSA+IGR4MCA/IChkeDAgKyBkeDEpIC8gMiA6IE1hdGgubWluKDAsIGR4MCkgfHwgTWF0aC5tYXgoMCwgZHgxKSxcbiAgICBkeTEgPiBkeTAgPyAoZHkwICsgZHkxKSAvIDIgOiBNYXRoLm1pbigwLCBkeTApIHx8IE1hdGgubWF4KDAsIGR5MSlcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyLFxuICAgICAgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCxcbiAgICAgIGNvbnN0cmFpbiA9IGRlZmF1bHRDb25zdHJhaW4sXG4gICAgICB3aGVlbERlbHRhID0gZGVmYXVsdFdoZWVsRGVsdGEsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlLFxuICAgICAgc2NhbGVFeHRlbnQgPSBbMCwgSW5maW5pdHldLFxuICAgICAgdHJhbnNsYXRlRXh0ZW50ID0gW1stSW5maW5pdHksIC1JbmZpbml0eV0sIFtJbmZpbml0eSwgSW5maW5pdHldXSxcbiAgICAgIGR1cmF0aW9uID0gMjUwLFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVpvb20sXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiem9vbVwiLCBcImVuZFwiKSxcbiAgICAgIHRvdWNoc3RhcnRpbmcsXG4gICAgICB0b3VjaGVuZGluZyxcbiAgICAgIHRvdWNoRGVsYXkgPSA1MDAsXG4gICAgICB3aGVlbERlbGF5ID0gMTUwLFxuICAgICAgY2xpY2tEaXN0YW5jZTIgPSAwO1xuXG4gIGZ1bmN0aW9uIHpvb20oc2VsZWN0aW9uKSB7XG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5wcm9wZXJ0eShcIl9fem9vbVwiLCBkZWZhdWx0VHJhbnNmb3JtKVxuICAgICAgICAub24oXCJ3aGVlbC56b29tXCIsIHdoZWVsZWQpXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi56b29tXCIsIG1vdXNlZG93bmVkKVxuICAgICAgICAub24oXCJkYmxjbGljay56b29tXCIsIGRibGNsaWNrZWQpXG4gICAgICAuZmlsdGVyKHRvdWNoYWJsZSlcbiAgICAgICAgLm9uKFwidG91Y2hzdGFydC56b29tXCIsIHRvdWNoc3RhcnRlZClcbiAgICAgICAgLm9uKFwidG91Y2htb3ZlLnpvb21cIiwgdG91Y2htb3ZlZClcbiAgICAgICAgLm9uKFwidG91Y2hlbmQuem9vbSB0b3VjaGNhbmNlbC56b29tXCIsIHRvdWNoZW5kZWQpXG4gICAgICAgIC5zdHlsZShcInRvdWNoLWFjdGlvblwiLCBcIm5vbmVcIilcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgfVxuXG4gIHpvb20udHJhbnNmb3JtID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgdHJhbnNmb3JtLCBwb2ludCkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBjb2xsZWN0aW9uLnNlbGVjdGlvbiA/IGNvbGxlY3Rpb24uc2VsZWN0aW9uKCkgOiBjb2xsZWN0aW9uO1xuICAgIHNlbGVjdGlvbi5wcm9wZXJ0eShcIl9fem9vbVwiLCBkZWZhdWx0VHJhbnNmb3JtKTtcbiAgICBpZiAoY29sbGVjdGlvbiAhPT0gc2VsZWN0aW9uKSB7XG4gICAgICBzY2hlZHVsZShjb2xsZWN0aW9uLCB0cmFuc2Zvcm0sIHBvaW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0aW9uLmludGVycnVwdCgpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIGdlc3R1cmUodGhpcywgYXJndW1lbnRzKVxuICAgICAgICAgICAgLnN0YXJ0KClcbiAgICAgICAgICAgIC56b29tKG51bGwsIHR5cGVvZiB0cmFuc2Zvcm0gPT09IFwiZnVuY3Rpb25cIiA/IHRyYW5zZm9ybS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogdHJhbnNmb3JtKVxuICAgICAgICAgICAgLmVuZCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHpvb20uc2NhbGVCeSA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgaywgcCkge1xuICAgIHpvb20uc2NhbGVUbyhzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGswID0gdGhpcy5fX3pvb20uayxcbiAgICAgICAgICBrMSA9IHR5cGVvZiBrID09PSBcImZ1bmN0aW9uXCIgPyBrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrO1xuICAgICAgcmV0dXJuIGswICogazE7XG4gICAgfSwgcCk7XG4gIH07XG5cbiAgem9vbS5zY2FsZVRvID0gZnVuY3Rpb24oc2VsZWN0aW9uLCBrLCBwKSB7XG4gICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlID0gZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdDAgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgICBwMCA9IHAgPT0gbnVsbCA/IGNlbnRyb2lkKGUpIDogdHlwZW9mIHAgPT09IFwiZnVuY3Rpb25cIiA/IHAuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHAsXG4gICAgICAgICAgcDEgPSB0MC5pbnZlcnQocDApLFxuICAgICAgICAgIGsxID0gdHlwZW9mIGsgPT09IFwiZnVuY3Rpb25cIiA/IGsuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGs7XG4gICAgICByZXR1cm4gY29uc3RyYWluKHRyYW5zbGF0ZShzY2FsZSh0MCwgazEpLCBwMCwgcDEpLCBlLCB0cmFuc2xhdGVFeHRlbnQpO1xuICAgIH0sIHApO1xuICB9O1xuXG4gIHpvb20udHJhbnNsYXRlQnkgPSBmdW5jdGlvbihzZWxlY3Rpb24sIHgsIHkpIHtcbiAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGNvbnN0cmFpbih0aGlzLl9fem9vbS50cmFuc2xhdGUoXG4gICAgICAgIHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB4LFxuICAgICAgICB0eXBlb2YgeSA9PT0gXCJmdW5jdGlvblwiID8geS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogeVxuICAgICAgKSwgZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRyYW5zbGF0ZUV4dGVudCk7XG4gICAgfSk7XG4gIH07XG5cbiAgem9vbS50cmFuc2xhdGVUbyA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgeCwgeSwgcCkge1xuICAgIHpvb20udHJhbnNmb3JtKHNlbGVjdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZSA9IGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHQgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgICBwMCA9IHAgPT0gbnVsbCA/IGNlbnRyb2lkKGUpIDogdHlwZW9mIHAgPT09IFwiZnVuY3Rpb25cIiA/IHAuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHA7XG4gICAgICByZXR1cm4gY29uc3RyYWluKGlkZW50aXR5LnRyYW5zbGF0ZShwMFswXSwgcDBbMV0pLnNjYWxlKHQuaykudHJhbnNsYXRlKFxuICAgICAgICB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8gLXguYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IC14LFxuICAgICAgICB0eXBlb2YgeSA9PT0gXCJmdW5jdGlvblwiID8gLXkuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IC15XG4gICAgICApLCBlLCB0cmFuc2xhdGVFeHRlbnQpO1xuICAgIH0sIHApO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHRyYW5zZm9ybSwgaykge1xuICAgIGsgPSBNYXRoLm1heChzY2FsZUV4dGVudFswXSwgTWF0aC5taW4oc2NhbGVFeHRlbnRbMV0sIGspKTtcbiAgICByZXR1cm4gayA9PT0gdHJhbnNmb3JtLmsgPyB0cmFuc2Zvcm0gOiBuZXcgVHJhbnNmb3JtKGssIHRyYW5zZm9ybS54LCB0cmFuc2Zvcm0ueSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGUodHJhbnNmb3JtLCBwMCwgcDEpIHtcbiAgICB2YXIgeCA9IHAwWzBdIC0gcDFbMF0gKiB0cmFuc2Zvcm0uaywgeSA9IHAwWzFdIC0gcDFbMV0gKiB0cmFuc2Zvcm0uaztcbiAgICByZXR1cm4geCA9PT0gdHJhbnNmb3JtLnggJiYgeSA9PT0gdHJhbnNmb3JtLnkgPyB0cmFuc2Zvcm0gOiBuZXcgVHJhbnNmb3JtKHRyYW5zZm9ybS5rLCB4LCB5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkKGV4dGVudCkge1xuICAgIHJldHVybiBbKCtleHRlbnRbMF1bMF0gKyArZXh0ZW50WzFdWzBdKSAvIDIsICgrZXh0ZW50WzBdWzFdICsgK2V4dGVudFsxXVsxXSkgLyAyXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlKHRyYW5zaXRpb24sIHRyYW5zZm9ybSwgcG9pbnQpIHtcbiAgICB0cmFuc2l0aW9uXG4gICAgICAgIC5vbihcInN0YXJ0Lnpvb21cIiwgZnVuY3Rpb24oKSB7IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKS5zdGFydCgpOyB9KVxuICAgICAgICAub24oXCJpbnRlcnJ1cHQuem9vbSBlbmQuem9vbVwiLCBmdW5jdGlvbigpIHsgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLmVuZCgpOyB9KVxuICAgICAgICAudHdlZW4oXCJ6b29tXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgZyA9IGdlc3R1cmUodGhhdCwgYXJncyksXG4gICAgICAgICAgICAgIGUgPSBleHRlbnQuYXBwbHkodGhhdCwgYXJncyksXG4gICAgICAgICAgICAgIHAgPSBwb2ludCA9PSBudWxsID8gY2VudHJvaWQoZSkgOiB0eXBlb2YgcG9pbnQgPT09IFwiZnVuY3Rpb25cIiA/IHBvaW50LmFwcGx5KHRoYXQsIGFyZ3MpIDogcG9pbnQsXG4gICAgICAgICAgICAgIHcgPSBNYXRoLm1heChlWzFdWzBdIC0gZVswXVswXSwgZVsxXVsxXSAtIGVbMF1bMV0pLFxuICAgICAgICAgICAgICBhID0gdGhhdC5fX3pvb20sXG4gICAgICAgICAgICAgIGIgPSB0eXBlb2YgdHJhbnNmb3JtID09PSBcImZ1bmN0aW9uXCIgPyB0cmFuc2Zvcm0uYXBwbHkodGhhdCwgYXJncykgOiB0cmFuc2Zvcm0sXG4gICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZShhLmludmVydChwKS5jb25jYXQodyAvIGEuayksIGIuaW52ZXJ0KHApLmNvbmNhdCh3IC8gYi5rKSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmICh0ID09PSAxKSB0ID0gYjsgLy8gQXZvaWQgcm91bmRpbmcgZXJyb3Igb24gZW5kLlxuICAgICAgICAgICAgZWxzZSB7IHZhciBsID0gaSh0KSwgayA9IHcgLyBsWzJdOyB0ID0gbmV3IFRyYW5zZm9ybShrLCBwWzBdIC0gbFswXSAqIGssIHBbMV0gLSBsWzFdICogayk7IH1cbiAgICAgICAgICAgIGcuem9vbShudWxsLCB0KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlc3R1cmUodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICByZXR1cm4gKCFjbGVhbiAmJiB0aGF0Ll9fem9vbWluZykgfHwgbmV3IEdlc3R1cmUodGhhdCwgYXJncyk7XG4gIH1cblxuICBmdW5jdGlvbiBHZXN0dXJlKHRoYXQsIGFyZ3MpIHtcbiAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5hY3RpdmUgPSAwO1xuICAgIHRoaXMuZXh0ZW50ID0gZXh0ZW50LmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgIHRoaXMudGFwcyA9IDA7XG4gIH1cblxuICBHZXN0dXJlLnByb3RvdHlwZSA9IHtcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkge1xuICAgICAgICB0aGlzLnRoYXQuX196b29taW5nID0gdGhpcztcbiAgICAgICAgdGhpcy5lbWl0KFwic3RhcnRcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHpvb206IGZ1bmN0aW9uKGtleSwgdHJhbnNmb3JtKSB7XG4gICAgICBpZiAodGhpcy5tb3VzZSAmJiBrZXkgIT09IFwibW91c2VcIikgdGhpcy5tb3VzZVsxXSA9IHRyYW5zZm9ybS5pbnZlcnQodGhpcy5tb3VzZVswXSk7XG4gICAgICBpZiAodGhpcy50b3VjaDAgJiYga2V5ICE9PSBcInRvdWNoXCIpIHRoaXMudG91Y2gwWzFdID0gdHJhbnNmb3JtLmludmVydCh0aGlzLnRvdWNoMFswXSk7XG4gICAgICBpZiAodGhpcy50b3VjaDEgJiYga2V5ICE9PSBcInRvdWNoXCIpIHRoaXMudG91Y2gxWzFdID0gdHJhbnNmb3JtLmludmVydCh0aGlzLnRvdWNoMVswXSk7XG4gICAgICB0aGlzLnRoYXQuX196b29tID0gdHJhbnNmb3JtO1xuICAgICAgdGhpcy5lbWl0KFwiem9vbVwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRoaXMuYWN0aXZlID09PSAwKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnRoYXQuX196b29taW5nO1xuICAgICAgICB0aGlzLmVtaXQoXCJlbmRcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVtaXQ6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIGN1c3RvbUV2ZW50KG5ldyBab29tRXZlbnQoem9vbSwgdHlwZSwgdGhpcy50aGF0Ll9fem9vbSksIGxpc3RlbmVycy5hcHBseSwgbGlzdGVuZXJzLCBbdHlwZSwgdGhpcy50aGF0LCB0aGlzLmFyZ3NdKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gd2hlZWxlZCgpIHtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHQgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgayA9IE1hdGgubWF4KHNjYWxlRXh0ZW50WzBdLCBNYXRoLm1pbihzY2FsZUV4dGVudFsxXSwgdC5rICogTWF0aC5wb3coMiwgd2hlZWxEZWx0YS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSkpLFxuICAgICAgICBwID0gbW91c2UodGhpcyk7XG5cbiAgICAvLyBJZiB0aGUgbW91c2UgaXMgaW4gdGhlIHNhbWUgbG9jYXRpb24gYXMgYmVmb3JlLCByZXVzZSBpdC5cbiAgICAvLyBJZiB0aGVyZSB3ZXJlIHJlY2VudCB3aGVlbCBldmVudHMsIHJlc2V0IHRoZSB3aGVlbCBpZGxlIHRpbWVvdXQuXG4gICAgaWYgKGcud2hlZWwpIHtcbiAgICAgIGlmIChnLm1vdXNlWzBdWzBdICE9PSBwWzBdIHx8IGcubW91c2VbMF1bMV0gIT09IHBbMV0pIHtcbiAgICAgICAgZy5tb3VzZVsxXSA9IHQuaW52ZXJ0KGcubW91c2VbMF0gPSBwKTtcbiAgICAgIH1cbiAgICAgIGNsZWFyVGltZW91dChnLndoZWVsKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIHdoZWVsIGV2ZW50IHdvbuKAmXQgdHJpZ2dlciBhIHRyYW5zZm9ybSBjaGFuZ2UsIGlnbm9yZSBpdC5cbiAgICBlbHNlIGlmICh0LmsgPT09IGspIHJldHVybjtcblxuICAgIC8vIE90aGVyd2lzZSwgY2FwdHVyZSB0aGUgbW91c2UgcG9pbnQgYW5kIGxvY2F0aW9uIGF0IHRoZSBzdGFydC5cbiAgICBlbHNlIHtcbiAgICAgIGcubW91c2UgPSBbcCwgdC5pbnZlcnQocCldO1xuICAgICAgaW50ZXJydXB0KHRoaXMpO1xuICAgICAgZy5zdGFydCgpO1xuICAgIH1cblxuICAgIG5vZXZlbnQoKTtcbiAgICBnLndoZWVsID0gc2V0VGltZW91dCh3aGVlbGlkbGVkLCB3aGVlbERlbGF5KTtcbiAgICBnLnpvb20oXCJtb3VzZVwiLCBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQsIGspLCBnLm1vdXNlWzBdLCBnLm1vdXNlWzFdKSwgZy5leHRlbnQsIHRyYW5zbGF0ZUV4dGVudCkpO1xuXG4gICAgZnVuY3Rpb24gd2hlZWxpZGxlZCgpIHtcbiAgICAgIGcud2hlZWwgPSBudWxsO1xuICAgICAgZy5lbmQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZWRvd25lZCgpIHtcbiAgICBpZiAodG91Y2hlbmRpbmcgfHwgIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cywgdHJ1ZSksXG4gICAgICAgIHYgPSBzZWxlY3QoZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuem9vbVwiLCBtb3VzZW1vdmVkLCB0cnVlKS5vbihcIm1vdXNldXAuem9vbVwiLCBtb3VzZXVwcGVkLCB0cnVlKSxcbiAgICAgICAgcCA9IG1vdXNlKHRoaXMpLFxuICAgICAgICB4MCA9IGV2ZW50LmNsaWVudFgsXG4gICAgICAgIHkwID0gZXZlbnQuY2xpZW50WTtcblxuICAgIGRyYWdEaXNhYmxlKGV2ZW50LnZpZXcpO1xuICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICBnLm1vdXNlID0gW3AsIHRoaXMuX196b29tLmludmVydChwKV07XG4gICAgaW50ZXJydXB0KHRoaXMpO1xuICAgIGcuc3RhcnQoKTtcblxuICAgIGZ1bmN0aW9uIG1vdXNlbW92ZWQoKSB7XG4gICAgICBub2V2ZW50KCk7XG4gICAgICBpZiAoIWcubW92ZWQpIHtcbiAgICAgICAgdmFyIGR4ID0gZXZlbnQuY2xpZW50WCAtIHgwLCBkeSA9IGV2ZW50LmNsaWVudFkgLSB5MDtcbiAgICAgICAgZy5tb3ZlZCA9IGR4ICogZHggKyBkeSAqIGR5ID4gY2xpY2tEaXN0YW5jZTI7XG4gICAgICB9XG4gICAgICBnLnpvb20oXCJtb3VzZVwiLCBjb25zdHJhaW4odHJhbnNsYXRlKGcudGhhdC5fX3pvb20sIGcubW91c2VbMF0gPSBtb3VzZShnLnRoYXQpLCBnLm1vdXNlWzFdKSwgZy5leHRlbnQsIHRyYW5zbGF0ZUV4dGVudCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdXNldXBwZWQoKSB7XG4gICAgICB2Lm9uKFwibW91c2Vtb3ZlLnpvb20gbW91c2V1cC56b29tXCIsIG51bGwpO1xuICAgICAgZHJhZ0VuYWJsZShldmVudC52aWV3LCBnLm1vdmVkKTtcbiAgICAgIG5vZXZlbnQoKTtcbiAgICAgIGcuZW5kKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGJsY2xpY2tlZCgpIHtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIHQwID0gdGhpcy5fX3pvb20sXG4gICAgICAgIHAwID0gbW91c2UodGhpcyksXG4gICAgICAgIHAxID0gdDAuaW52ZXJ0KHAwKSxcbiAgICAgICAgazEgPSB0MC5rICogKGV2ZW50LnNoaWZ0S2V5ID8gMC41IDogMiksXG4gICAgICAgIHQxID0gY29uc3RyYWluKHRyYW5zbGF0ZShzY2FsZSh0MCwgazEpLCBwMCwgcDEpLCBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdHJhbnNsYXRlRXh0ZW50KTtcblxuICAgIG5vZXZlbnQoKTtcbiAgICBpZiAoZHVyYXRpb24gPiAwKSBzZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmR1cmF0aW9uKGR1cmF0aW9uKS5jYWxsKHNjaGVkdWxlLCB0MSwgcDApO1xuICAgIGVsc2Ugc2VsZWN0KHRoaXMpLmNhbGwoem9vbS50cmFuc2Zvcm0sIHQxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoc3RhcnRlZCgpIHtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC50b3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsXG4gICAgICAgIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cywgZXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID09PSBuKSxcbiAgICAgICAgc3RhcnRlZCwgaSwgdCwgcDtcblxuICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB0ID0gdG91Y2hlc1tpXSwgcCA9IHRvdWNoKHRoaXMsIHRvdWNoZXMsIHQuaWRlbnRpZmllcik7XG4gICAgICBwID0gW3AsIHRoaXMuX196b29tLmludmVydChwKSwgdC5pZGVudGlmaWVyXTtcbiAgICAgIGlmICghZy50b3VjaDApIGcudG91Y2gwID0gcCwgc3RhcnRlZCA9IHRydWUsIGcudGFwcyA9IDEgKyAhIXRvdWNoc3RhcnRpbmc7XG4gICAgICBlbHNlIGlmICghZy50b3VjaDEgJiYgZy50b3VjaDBbMl0gIT09IHBbMl0pIGcudG91Y2gxID0gcCwgZy50YXBzID0gMDtcbiAgICB9XG5cbiAgICBpZiAodG91Y2hzdGFydGluZykgdG91Y2hzdGFydGluZyA9IGNsZWFyVGltZW91dCh0b3VjaHN0YXJ0aW5nKTtcblxuICAgIGlmIChzdGFydGVkKSB7XG4gICAgICBpZiAoZy50YXBzIDwgMikgdG91Y2hzdGFydGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoc3RhcnRpbmcgPSBudWxsOyB9LCB0b3VjaERlbGF5KTtcbiAgICAgIGludGVycnVwdCh0aGlzKTtcbiAgICAgIGcuc3RhcnQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKCkge1xuICAgIGlmICghdGhpcy5fX3pvb21pbmcpIHJldHVybjtcbiAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIHQsIHAsIGw7XG5cbiAgICBub2V2ZW50KCk7XG4gICAgaWYgKHRvdWNoc3RhcnRpbmcpIHRvdWNoc3RhcnRpbmcgPSBjbGVhclRpbWVvdXQodG91Y2hzdGFydGluZyk7XG4gICAgZy50YXBzID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB0ID0gdG91Y2hlc1tpXSwgcCA9IHRvdWNoKHRoaXMsIHRvdWNoZXMsIHQuaWRlbnRpZmllcik7XG4gICAgICBpZiAoZy50b3VjaDAgJiYgZy50b3VjaDBbMl0gPT09IHQuaWRlbnRpZmllcikgZy50b3VjaDBbMF0gPSBwO1xuICAgICAgZWxzZSBpZiAoZy50b3VjaDEgJiYgZy50b3VjaDFbMl0gPT09IHQuaWRlbnRpZmllcikgZy50b3VjaDFbMF0gPSBwO1xuICAgIH1cbiAgICB0ID0gZy50aGF0Ll9fem9vbTtcbiAgICBpZiAoZy50b3VjaDEpIHtcbiAgICAgIHZhciBwMCA9IGcudG91Y2gwWzBdLCBsMCA9IGcudG91Y2gwWzFdLFxuICAgICAgICAgIHAxID0gZy50b3VjaDFbMF0sIGwxID0gZy50b3VjaDFbMV0sXG4gICAgICAgICAgZHAgPSAoZHAgPSBwMVswXSAtIHAwWzBdKSAqIGRwICsgKGRwID0gcDFbMV0gLSBwMFsxXSkgKiBkcCxcbiAgICAgICAgICBkbCA9IChkbCA9IGwxWzBdIC0gbDBbMF0pICogZGwgKyAoZGwgPSBsMVsxXSAtIGwwWzFdKSAqIGRsO1xuICAgICAgdCA9IHNjYWxlKHQsIE1hdGguc3FydChkcCAvIGRsKSk7XG4gICAgICBwID0gWyhwMFswXSArIHAxWzBdKSAvIDIsIChwMFsxXSArIHAxWzFdKSAvIDJdO1xuICAgICAgbCA9IFsobDBbMF0gKyBsMVswXSkgLyAyLCAobDBbMV0gKyBsMVsxXSkgLyAyXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZy50b3VjaDApIHAgPSBnLnRvdWNoMFswXSwgbCA9IGcudG91Y2gwWzFdO1xuICAgIGVsc2UgcmV0dXJuO1xuICAgIGcuem9vbShcInRvdWNoXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUodCwgcCwgbCksIGcuZXh0ZW50LCB0cmFuc2xhdGVFeHRlbnQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZW5kZWQoKSB7XG4gICAgaWYgKCF0aGlzLl9fem9vbWluZykgcmV0dXJuO1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgdDtcblxuICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIHRvdWNoRGVsYXkpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHQgPSB0b3VjaGVzW2ldO1xuICAgICAgaWYgKGcudG91Y2gwICYmIGcudG91Y2gwWzJdID09PSB0LmlkZW50aWZpZXIpIGRlbGV0ZSBnLnRvdWNoMDtcbiAgICAgIGVsc2UgaWYgKGcudG91Y2gxICYmIGcudG91Y2gxWzJdID09PSB0LmlkZW50aWZpZXIpIGRlbGV0ZSBnLnRvdWNoMTtcbiAgICB9XG4gICAgaWYgKGcudG91Y2gxICYmICFnLnRvdWNoMCkgZy50b3VjaDAgPSBnLnRvdWNoMSwgZGVsZXRlIGcudG91Y2gxO1xuICAgIGlmIChnLnRvdWNoMCkgZy50b3VjaDBbMV0gPSB0aGlzLl9fem9vbS5pbnZlcnQoZy50b3VjaDBbMF0pO1xuICAgIGVsc2Uge1xuICAgICAgZy5lbmQoKTtcbiAgICAgIC8vIElmIHRoaXMgd2FzIGEgZGJsdGFwLCByZXJvdXRlIHRvIHRoZSAob3B0aW9uYWwpIGRibGNsaWNrLnpvb20gaGFuZGxlci5cbiAgICAgIGlmIChnLnRhcHMgPT09IDIpIHtcbiAgICAgICAgdmFyIHAgPSBzZWxlY3QodGhpcykub24oXCJkYmxjbGljay56b29tXCIpO1xuICAgICAgICBpZiAocCkgcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHpvb20ud2hlZWxEZWx0YSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh3aGVlbERlbHRhID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHpvb20pIDogd2hlZWxEZWx0YTtcbiAgfTtcblxuICB6b29tLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIHpvb20pIDogZmlsdGVyO1xuICB9O1xuXG4gIHpvb20udG91Y2hhYmxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRvdWNoYWJsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgem9vbSkgOiB0b3VjaGFibGU7XG4gIH07XG5cbiAgem9vbS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChbWytfWzBdWzBdLCArX1swXVsxXV0sIFsrX1sxXVswXSwgK19bMV1bMV1dXSksIHpvb20pIDogZXh0ZW50O1xuICB9O1xuXG4gIHpvb20uc2NhbGVFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGVFeHRlbnRbMF0gPSArX1swXSwgc2NhbGVFeHRlbnRbMV0gPSArX1sxXSwgem9vbSkgOiBbc2NhbGVFeHRlbnRbMF0sIHNjYWxlRXh0ZW50WzFdXTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2xhdGVFeHRlbnRbMF1bMF0gPSArX1swXVswXSwgdHJhbnNsYXRlRXh0ZW50WzFdWzBdID0gK19bMV1bMF0sIHRyYW5zbGF0ZUV4dGVudFswXVsxXSA9ICtfWzBdWzFdLCB0cmFuc2xhdGVFeHRlbnRbMV1bMV0gPSArX1sxXVsxXSwgem9vbSkgOiBbW3RyYW5zbGF0ZUV4dGVudFswXVswXSwgdHJhbnNsYXRlRXh0ZW50WzBdWzFdXSwgW3RyYW5zbGF0ZUV4dGVudFsxXVswXSwgdHJhbnNsYXRlRXh0ZW50WzFdWzFdXV07XG4gIH07XG5cbiAgem9vbS5jb25zdHJhaW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29uc3RyYWluID0gXywgem9vbSkgOiBjb25zdHJhaW47XG4gIH07XG5cbiAgem9vbS5kdXJhdGlvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkdXJhdGlvbiA9ICtfLCB6b29tKSA6IGR1cmF0aW9uO1xuICB9O1xuXG4gIHpvb20uaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCB6b29tKSA6IGludGVycG9sYXRlO1xuICB9O1xuXG4gIHpvb20ub24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gem9vbSA6IHZhbHVlO1xuICB9O1xuXG4gIHpvb20uY2xpY2tEaXN0YW5jZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGlja0Rpc3RhbmNlMiA9IChfID0gK18pICogXywgem9vbSkgOiBNYXRoLnNxcnQoY2xpY2tEaXN0YW5jZTIpO1xuICB9O1xuXG4gIHJldHVybiB6b29tO1xufVxuIiwiLyogRmlsZTogY29sb3JzLnRzXG4gKiBBdXRob3I6IFN0ZXZlbiBIaWxsZXJtYW5cbiAqIERhdGU6IDEwLzMxLzIwMTlcbiAqIC0tLS0tLS0tLS0tLS0tLS1cbiAqIFRoaXMgZmlsZSBjb250YWlucyB0aGUgY29sb3IgY29kZXMgZm9yIHRoZSBkaXNwbGF5LlxuICovXG5cbmNvbnN0IERBUktfQkcgPSBcIiMzMzMzMzNcIjsgLy8gTWFpbiBiYWNrZ3JvdW5kIGNvbG9yXG5jb25zdCBMSUdIVEVSX0JHID0gXCIjNUY1RjVGXCI7IC8vIE5hdmlnYXRpb24gYmFyIGJhY2tncm91bmQgY29sb3JcbmNvbnN0IExJR0hUX0dSRVkgPSBcIiNBQ0FDQUNcIjsgLy8gR3JleSB1c2VkIGluIGdyYXBocyB0byBzdGFuZCBvdXRcbmNvbnN0IFRJVExFX1dISVRFID0gXCIjREFEQURBXCI7IC8vIEJyaWdodCBncmV5IHVzZWQgaW4gdGhlIHRpdGxlIG9mIGVhY2ggdmlzXG5jb25zdCBURUFMID0gXCIjMDBDODlEXCI7IC8vIFRlYWwgdXNlZCBhcyBhbiBhY2NlbnQgb3IgaGlnaGxpZ2h0XG5jb25zdCBTRUxFQ1RJT05fR1JFRU4gPSBcIiNBMEMyOUVcIjsgLy8gVXNlZCB0byBtYXJrIHdoaWNoIHZpZXcgaXMgc2VsZWN0ZWQgaW4gdGhlIG5hdmlnYXRpb24gYmFyXG5jb25zdCBURURfUkVEID0gXCIjRTYyQjFFXCI7IC8vIFVzZWQgaW4gdGhlIGNpcmNsZSBwYWNraW5nIGNoYXJ0cyBhcyBjaXJjbGUgZmlsbCAoTElHSFRfR1JFWSB0ZXh0IGFuZCBvdXRsaW5lcylcbmNvbnN0IEJSSUdIVF9HUkVFTiA9IFwiIzEzQjEwMFwiOyAvLyBHb29kIHJhdGluZ3MgaW4gdGhlIHJhdGluZ3MgYnJlYWtkb3duXG5jb25zdCBCUklHSFRfUkVEID0gXCIjQjEwMDA3XCI7IC8vIEJhZCByYXRpbmdzIGluIHRoZSByYXRpbmdzIGJyZWFrZG93blxuY29uc3QgQlJJR0hUX09SQU5HRSA9IFwiI0IxN0QwMFwiOyAvLyBNZWRpb2NyZSByYXRpbmdzIGluIHJhdGluZ3MgYnJlYWtkb3duXG5jb25zdCBISUdITElHSFRfQ09MT1IgPSBURUFMO1xuXG5jb25zdCBDT0xPUlMgPSB7IERBUktfQkcsIExJR0hURVJfQkcsIExJR0hUX0dSRVksIFRJVExFX1dISVRFLCBURUFMLCBTRUxFQ1RJT05fR1JFRU4sIFRFRF9SRUQsIEJSSUdIVF9HUkVFTiwgQlJJR0hUX1JFRCwgQlJJR0hUX09SQU5HRSwgSElHSExJR0hUX0NPTE9SIH07XG5cbmV4cG9ydCBkZWZhdWx0IENPTE9SUztcbiIsImltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xuXG5mdW5jdGlvbiBmdW5jdG9yKHYpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09IFwiZnVuY3Rpb25cIlxuICAgID8gdlxuICAgIDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2O1xuICAgICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIGluaXROb2RlKCkge1xuICAgIGNvbnN0IG5vZGUgPSBkMy5zZWxlY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSk7XG4gICAgbm9kZVxuICAgICAgLnN0eWxlKFwicG9zaXRpb25cIiwgXCJhYnNvbHV0ZVwiKVxuICAgICAgLnN0eWxlKFwidG9wXCIsIDApXG4gICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDApXG4gICAgICAuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIilcbiAgICAgIC5zdHlsZShcImJveC1zaXppbmdcIiwgXCJib3JkZXItYm94XCIpO1xuXG4gICAgcmV0dXJuIG5vZGUubm9kZSgpO1xuICB9XG5cbiAgbGV0IGRpcmVjdGlvbiA9IFwiblwiO1xuICBsZXQgb2Zmc2V0ID0gWzAsIDBdO1xuICBsZXQgaHRtbCA9IFwiIFwiO1xuICBsZXQgbm9kZSA9IGluaXROb2RlKCk7XG4gIGxldCBzdmcgPSBudWxsO1xuICBsZXQgcG9pbnQgPSBudWxsO1xuICBsZXQgdGFyZ2V0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBnZXRTVkdOb2RlKGVsKSB7XG4gICAgZWwgPSBlbC5ub2RlKCk7XG4gICAgaWYgKGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJzdmdcIikgcmV0dXJuIGVsO1xuICAgIHJldHVybiBlbC5vd25lclNWR0VsZW1lbnQ7XG4gIH1cblxuICBmdW5jdGlvbiB0aXAodmlzKSB7XG4gICAgaWYgKHZpcy5ub2RlKCkgIT0gbnVsbCkge1xuICAgICAgc3ZnID0gZ2V0U1ZHTm9kZSh2aXMpO1xuICAgICAgcG9pbnQgPSBzdmcuY3JlYXRlU1ZHUG9pbnQoKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Tm9kZUVsKCkge1xuICAgIGlmIChub2RlID09IG51bGwpIHtcbiAgICAgIG5vZGUgPSBpbml0Tm9kZSgpO1xuICAgICAgLy8gcmUtYWRkIG5vZGUgdG8gRE9NXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gZDMuc2VsZWN0KG5vZGUpO1xuICB9XG5cbiAgLy8gUHJpdmF0ZSAtIGdldHMgdGhlIHNjcmVlbiBjb29yZGluYXRlcyBvZiBhIHNoYXBlXG4gIC8vXG4gIC8vIEdpdmVuIGEgc2hhcGUgb24gdGhlIHNjcmVlbiwgd2lsbCByZXR1cm4gYW4gU1ZHUG9pbnQgZm9yIHRoZSBkaXJlY3Rpb25zXG4gIC8vIG4obm9ydGgpLCBzKHNvdXRoKSwgZShlYXN0KSwgdyh3ZXN0KSwgbmUobm9ydGhlYXN0KSwgc2Uoc291dGhlYXN0KSwgbncobm9ydGh3ZXN0KSxcbiAgLy8gc3coc291dGh3ZXN0KS5cbiAgLy9cbiAgLy8gICAgKy0rLStcbiAgLy8gICAgfCAgIHxcbiAgLy8gICAgKyAgICtcbiAgLy8gICAgfCAgIHxcbiAgLy8gICAgKy0rLStcbiAgLy9cbiAgLy8gUmV0dXJucyBhbiBPYmplY3Qge24sIHMsIGUsIHcsIG53LCBzdywgbmUsIHNlfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBmdW5jdGlvbiBnZXRTY3JlZW5CQm94KCkge1xuICAgIGxldCB0YXJnZXRlbCA9IHRhcmdldCB8fCBkMy5ldmVudC50YXJnZXQ7XG5cbiAgICB3aGlsZSAoXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHRhcmdldGVsLmdldFNjcmVlbkNUTSAmJiBcInVuZGVmaW5lZFwiID09PSB0YXJnZXRlbC5wYXJlbnROb2RlKSB7XG4gICAgICB0YXJnZXRlbCA9IHRhcmdldGVsLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgY29uc3QgbWF0cml4ID0gdGFyZ2V0ZWwuZ2V0U2NyZWVuQ1RNKCksXG4gICAgICB0YmJveCA9IHRhcmdldGVsLmdldEJCb3goKSxcbiAgICAgIHdpZHRoID0gdGJib3gud2lkdGgsXG4gICAgICBoZWlnaHQgPSB0YmJveC5oZWlnaHQsXG4gICAgICB5ID0gdGJib3gueSxcbiAgICAgIGJib3ggPSB7XG4gICAgICAgIG53OiBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KSxcbiAgICAgICAgbmU6IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShtYXRyaXgpLFxuICAgICAgICBzZTogcG9pbnQubWF0cml4VHJhbnNmb3JtKG1hdHJpeCksXG4gICAgICAgIHc6IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShtYXRyaXgpLFxuICAgICAgICBlOiBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KSxcbiAgICAgICAgbjogcG9pbnQubWF0cml4VHJhbnNmb3JtKG1hdHJpeCksXG4gICAgICAgIHM6IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShtYXRyaXgpLFxuICAgICAgICBzdzogcG9pbnQubWF0cml4VHJhbnNmb3JtKG1hdHJpeCksXG4gICAgICB9O1xuXG4gICAgcG9pbnQueCA9IHRiYm94Lng7XG4gICAgcG9pbnQueSA9IHk7XG4gICAgYmJveC5udyA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShtYXRyaXgpO1xuICAgIHBvaW50LnggKz0gd2lkdGg7XG4gICAgYmJveC5udyA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShtYXRyaXgpO1xuICAgIHBvaW50LnkgKz0gaGVpZ2h0O1xuICAgIGJib3guc2UgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KTtcbiAgICBwb2ludC54IC09IHdpZHRoO1xuICAgIGJib3gubncgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KTtcbiAgICBwb2ludC55IC09IGhlaWdodCAvIDI7XG4gICAgYmJveC53ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG1hdHJpeCk7XG4gICAgcG9pbnQueCArPSB3aWR0aDtcbiAgICBiYm94LmUgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KTtcbiAgICBwb2ludC54IC09IHdpZHRoIC8gMjtcbiAgICBwb2ludC55IC09IGhlaWdodCAvIDI7XG4gICAgYmJveC5uID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG1hdHJpeCk7XG4gICAgcG9pbnQueSArPSBoZWlnaHQ7XG4gICAgYmJveC5zID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG1hdHJpeCk7XG5cbiAgICByZXR1cm4gYmJveDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpcmVjdGlvbk4oKSB7XG4gICAgY29uc3QgYmJveCA9IGdldFNjcmVlbkJCb3goKTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBiYm94Lm4ueSAtIG5vZGUub2Zmc2V0SGVpZ2h0LFxuICAgICAgbGVmdDogYmJveC5uLnggLSBub2RlLm9mZnNldFdpZHRoIC8gMixcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZGlyZWN0aW9uUygpIHtcbiAgICBjb25zdCBiYm94ID0gZ2V0U2NyZWVuQkJveCgpO1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGJib3gucy55LFxuICAgICAgbGVmdDogYmJveC5zLnggLSBub2RlLm9mZnNldFdpZHRoIC8gMixcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZGlyZWN0aW9uRSgpIHtcbiAgICBjb25zdCBiYm94ID0gZ2V0U2NyZWVuQkJveCgpO1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGJib3guZS55IC0gbm9kZS5vZmZzZXRIZWlnaHQgLyAyLFxuICAgICAgbGVmdDogYmJveC5lLngsXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpcmVjdGlvblcoKSB7XG4gICAgY29uc3QgYmJveCA9IGdldFNjcmVlbkJCb3goKTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBiYm94LncueSAtIG5vZGUub2Zmc2V0SGVpZ2h0IC8gMixcbiAgICAgIGxlZnQ6IGJib3gudy54IC0gbm9kZS5vZmZzZXRXaWR0aCxcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZGlyZWN0aW9uTlcoKSB7XG4gICAgY29uc3QgYmJveCA9IGdldFNjcmVlbkJCb3goKTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBiYm94Lm53LnkgLSBub2RlLm9mZnNldEhlaWdodCxcbiAgICAgIGxlZnQ6IGJib3gubncueCAtIG5vZGUub2Zmc2V0V2lkdGgsXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpcmVjdGlvbk5lKCkge1xuICAgIGNvbnN0IGJib3ggPSBnZXRTY3JlZW5CQm94KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogYmJveC5uZS55IC0gbm9kZS5vZmZzZXRIZWlnaHQsXG4gICAgICBsZWZ0OiBiYm94Lm5lLngsXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpcmVjdGlvblN3KCkge1xuICAgIGNvbnN0IGJib3ggPSBnZXRTY3JlZW5CQm94KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogYmJveC5zdy55LFxuICAgICAgbGVmdDogYmJveC5zdy54IC0gbm9kZS5vZmZzZXRXaWR0aCxcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZGlyZWN0aW9uU2UoKSB7XG4gICAgY29uc3QgYmJveCA9IGdldFNjcmVlbkJCb3goKTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBiYm94LnNlLnksXG4gICAgICBsZWZ0OiBiYm94LmUueCxcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgZGlyZWN0aW9uQ2FsbGJhY2tzID0ge1xuICAgIG46IGRpcmVjdGlvbk4sXG4gICAgczogZGlyZWN0aW9uUyxcbiAgICBlOiBkaXJlY3Rpb25FLFxuICAgIHc6IGRpcmVjdGlvblcsXG4gICAgbnc6IGRpcmVjdGlvbk5XLFxuICAgIG5lOiBkaXJlY3Rpb25OZSxcbiAgICBzdzogZGlyZWN0aW9uU3csXG4gICAgc2U6IGRpcmVjdGlvblNlLFxuICB9O1xuXG4gIGNvbnN0IGRpcmVjdGlvbnMgPSBPYmplY3Qua2V5cyhkaXJlY3Rpb25DYWxsYmFja3MpO1xuXG4gIC8vIFB1YmxpYyAtIHNob3cgdGhlIHRvb2x0aXAgb24gdGhlIHNjcmVlblxuICAvL1xuICAvLyBSZXR1cm5zIGEgdGlwXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHRpcC5zaG93ID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgIGlmIChhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gaW5zdGFuY2VvZiBTVkdFbGVtZW50KSB0YXJnZXQgPSBhcmdzLnBvcCgpO1xuICAgIC8vY29uc3QgY29udGVudCA9IGh0bWw7XG4gICAgY29uc3QgY29udGVudCA9IGh0bWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgY29uc3QgcG9mZnNldCA9IG9mZnNldDtcbiAgICAvL2NvbnN0IHBvZmZzZXQgPSAob2Zmc2V0IGFzIGFueSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgY29uc3QgZGlyID0gZGlyZWN0aW9uO1xuICAgIGNvbnN0IG5vZGVsID0gZ2V0Tm9kZUVsKCk7XG4gICAgbGV0IGkgPSBkaXJlY3Rpb25zLmxlbmd0aDtcbiAgICBjb25zdCBzY3JvbGxUb3AgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wLFxuICAgICAgc2Nyb2xsTGVmdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdDtcblxuICAgIG5vZGVsXG4gICAgICAuaHRtbChjb250ZW50KVxuICAgICAgLnN0eWxlKFwicG9zaXRpb25cIiwgXCJhYnNvbHV0ZVwiKVxuICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAxKVxuICAgICAgLnN0eWxlKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIik7XG5cbiAgICB3aGlsZSAoaS0tKSBub2RlbC5jbGFzc2VkKGRpcmVjdGlvbnNbaV0sIGZhbHNlKTtcbiAgICBsZXQgY29vcmRzO1xuICAgIHN3aXRjaCAoZGlyKSB7XG4gICAgICBjYXNlIFwiblwiOlxuICAgICAgICBjb29yZHMgPSBkaXJlY3Rpb25DYWxsYmFja3Mubi5hcHBseSh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwic1wiOlxuICAgICAgICBjb29yZHMgPSBkaXJlY3Rpb25DYWxsYmFja3Mucy5hcHBseSh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZVwiOlxuICAgICAgICBjb29yZHMgPSBkaXJlY3Rpb25DYWxsYmFja3MuZS5hcHBseSh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwid1wiOlxuICAgICAgICBjb29yZHMgPSBkaXJlY3Rpb25DYWxsYmFja3Mudy5hcHBseSh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibndcIjpcbiAgICAgICAgY29vcmRzID0gZGlyZWN0aW9uQ2FsbGJhY2tzLm53LmFwcGx5KHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJzd1wiOlxuICAgICAgICBjb29yZHMgPSBkaXJlY3Rpb25DYWxsYmFja3Muc3cuYXBwbHkodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm5lXCI6XG4gICAgICAgIGNvb3JkcyA9IGRpcmVjdGlvbkNhbGxiYWNrcy5uZS5hcHBseSh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwic2VcIjpcbiAgICAgICAgY29vcmRzID0gZGlyZWN0aW9uQ2FsbGJhY2tzLnNlLmFwcGx5KHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgbm9kZWxcbiAgICAgIC5jbGFzc2VkKGRpciwgdHJ1ZSlcbiAgICAgIC5zdHlsZShcInRvcFwiLCBjb29yZHMudG9wICsgcG9mZnNldFswXSArIHNjcm9sbFRvcCArIFwicHhcIilcbiAgICAgIC5zdHlsZShcImxlZnRcIiwgY29vcmRzLmxlZnQgKyBwb2Zmc2V0WzFdICsgc2Nyb2xsTGVmdCArIFwicHhcIik7XG5cbiAgICByZXR1cm4gdGlwO1xuICB9O1xuXG4gIC8vIFB1YmxpYyAtIGhpZGUgdGhlIHRvb2x0aXBcbiAgLy9cbiAgLy8gUmV0dXJucyBhIHRpcFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICB0aXAuaGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IG5vZGVsID0gZ2V0Tm9kZUVsKCk7XG4gICAgbm9kZWwuc3R5bGUoXCJvcGFjaXR5XCIsIDApLnN0eWxlKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xuICAgIHJldHVybiB0aXA7XG4gIH07XG5cbiAgLy8gUHVibGljOiBQcm94eSBhdHRyIGNhbGxzIHRvIHRoZSBkMyB0aXAgY29udGFpbmVyLiAgU2V0cyBvciBnZXRzIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgLy9cbiAgLy8gbiAtIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZVxuICAvLyB2IC0gdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZVxuICAvL1xuICAvLyBSZXR1cm5zIHRpcCBvciBhdHRyaWJ1dGUgdmFsdWVcbiAgdGlwLmF0dHIgPSBmdW5jdGlvbihuLCB2KSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyICYmIHR5cGVvZiBuID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gZ2V0Tm9kZUVsKCkuYXR0cihuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgY29uc3QgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICBkMy5zZWxlY3Rpb24ucHJvdG90eXBlLmF0dHIuYXBwbHkoZ2V0Tm9kZUVsKCksIGFyZ3MpO1xuICAgIH1cblxuICAgIHJldHVybiB0aXA7XG4gIH07XG5cbiAgLy8gUHVibGljOiBQcm94eSBzdHlsZSBjYWxscyB0byB0aGUgZDMgdGlwIGNvbnRhaW5lci4gIFNldHMgb3IgZ2V0cyBhIHN0eWxlIHZhbHVlLlxuICAvL1xuICAvLyBuIC0gbmFtZSBvZiB0aGUgcHJvcGVydHlcbiAgLy8gdiAtIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eVxuICAvL1xuICAvLyBSZXR1cm5zIHRpcCBvciBzdHlsZSBwcm9wZXJ0eSB2YWx1ZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgdGlwLnN0eWxlID0gZnVuY3Rpb24obiwgdikge1xuICAgIC8vIGRlYnVnZ2VyO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMiAmJiB0eXBlb2YgbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIGdldE5vZGVFbCgpLnN0eWxlKG4pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICBjb25zdCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjb25zdCBzdHlsZXMgPSBhcmdzWzBdO1xuICAgICAgICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGQzLnNlbGVjdGlvbi5wcm90b3R5cGUuc3R5bGUuYXBwbHkoZ2V0Tm9kZUVsKCksIFtrZXksIHN0eWxlc1trZXldXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aXA7XG4gIH07XG5cbiAgLy8gUHVibGljOiBTZXQgb3IgZ2V0IHRoZSBkaXJlY3Rpb24gb2YgdGhlIHRvb2x0aXBcbiAgLy9cbiAgLy8gdiAtIE9uZSBvZiBuKG5vcnRoKSwgcyhzb3V0aCksIGUoZWFzdCksIG9yIHcod2VzdCksIG53KG5vcnRod2VzdCksXG4gIC8vICAgICBzdyhzb3V0aHdlc3QpLCBuZShub3J0aGVhc3QpIG9yIHNlKHNvdXRoZWFzdClcbiAgLy9cbiAgLy8gUmV0dXJucyB0aXAgb3IgZGlyZWN0aW9uXG4gIHRpcC5kaXJlY3Rpb24gPSBmdW5jdGlvbih2KSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZGlyZWN0aW9uO1xuICAgIGRpcmVjdGlvbiA9IHYgPT0gbnVsbCA/IHYgOiBmdW5jdG9yKHYpO1xuXG4gICAgcmV0dXJuIHRpcDtcbiAgfTtcblxuICAvLyBQdWJsaWM6IFNldHMgb3IgZ2V0cyB0aGUgb2Zmc2V0IG9mIHRoZSB0aXBcbiAgLy9cbiAgLy8gdiAtIEFycmF5IG9mIFt4LCB5XSBvZmZzZXRcbiAgLy9cbiAgLy8gUmV0dXJucyBvZmZzZXQgb3JcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgdGlwLm9mZnNldCA9IGZ1bmN0aW9uKHYpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvZmZzZXQ7XG4gICAgb2Zmc2V0ID0gdiA9PSBudWxsID8gdiA6IGZ1bmN0b3Iodik7XG5cbiAgICByZXR1cm4gdGlwO1xuICB9O1xuXG4gIC8vIFB1YmxpYzogc2V0cyBvciBnZXRzIHRoZSBodG1sIHZhbHVlIG9mIHRoZSB0b29sdGlwXG4gIC8vXG4gIC8vIHYgLSBTdHJpbmcgdmFsdWUgb2YgdGhlIHRpcFxuICAvL1xuICAvLyBSZXR1cm5zIGh0bWwgdmFsdWUgb3IgdGlwXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHRpcC5odG1sID0gZnVuY3Rpb24odikge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGh0bWw7XG4gICAgaHRtbCA9IHYgPT0gbnVsbCA/IHYgOiBmdW5jdG9yKHYpO1xuXG4gICAgcmV0dXJuIHRpcDtcbiAgfTtcblxuICAvLyBQdWJsaWM6IGRlc3Ryb3lzIHRoZSB0b29sdGlwIGFuZCByZW1vdmVzIGl0IGZyb20gdGhlIERPTVxuICAvL1xuICAvLyBSZXR1cm5zIGEgdGlwXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHRpcC5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKG5vZGUpIHtcbiAgICAgIGdldE5vZGVFbCgpLnJlbW92ZSgpO1xuICAgICAgbm9kZSA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aXA7XG4gIH07XG5cbiAgcmV0dXJuIHRpcDtcbn1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xuaW1wb3J0IHsgQmFzZVR5cGUgfSBmcm9tIFwiZDNcIjtcbmltcG9ydCBDT0xPUlMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IFRvb2xUaXAgZnJvbSBcIi4vVG9vbFRpcFwiO1xuXG4vLyBBY2NlcHRzIGEgZDMuU2VsZWN0aW9uIGFzIGEgcGFyYW1ldGVyIGFuZCBtb2RpZmllcyBpdC5cbi8vIFRoaXMgZnVuY3Rpb24gZXhwZWN0cyB0aGUgZDMuU2VsZWN0aW9uIHRvIGJlIGFuIFNWRy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN2ZywgZGF0YSkge1xuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xuXG4gIC8vIFNldCBkaW1lbnNpb25zIGFuZCBtYXJnaW5zIG9mIHN2ZyArIGdyYXBoXG4gIGNvbnN0IG1hcmdpbiA9IHtcbiAgICB0b3A6IDEwLFxuICAgIHJpZ2h0OiAzMCxcbiAgICBib3R0b206IDgwLFxuICAgIGxlZnQ6IDgwLFxuICB9O1xuICBjb25zdCBzdmdXaWR0aCA9IDgwMDtcbiAgY29uc3Qgc3ZnSGVpZ2h0ID0gNTAwO1xuICBjb25zdCB3aWR0aCA9IHN2Z1dpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gIGNvbnN0IGhlaWdodCA9IHN2Z0hlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuXG4gIC8vIFNldCB3aWR0aCBhbmQgaGVpZ2h0IG9mIHN2Z1xuICAvLyBzdmcuYXR0cihcIndpZHRoXCIsIHN2Z1dpZHRoKTtcbiAgLy8gc3ZnLmF0dHIoXCJoZWlnaHRcIiwgc3ZnSGVpZ2h0KTtcbiAgc3ZnLmF0dHIoXCJ2aWV3Qm94XCIsIGAwIDAgJHtzdmdXaWR0aH0gJHtzdmdIZWlnaHR9YCk7XG4gIC8vIElubmVyIGdyb3VwXG4gIGNvbnN0IGcgPSBzdmcuYXBwZW5kKFwiZ1wiKTtcbiAgZy5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIik7XG5cbiAgLy8gR2V0IG1pbiBhbmQgbWF4IHllYXJcbiAgY29uc3QgcGFyc2VUaW1lID0gZDMudGltZVBhcnNlKFwiJXNcIik7XG4gIGNvbnN0IGRhdGVSYW5nZSA9IGQzLmV4dGVudChkYXRhLCBkID0+IHBhcnNlVGltZShkW1wiZmlsbV9kYXRlXCJdKSk7XG4gIC8vY29uc29sZS5sb2coXCJEYXRlIFJhbmdlOiBcIiArIGRhdGVSYW5nZSk7XG5cbiAgLy8gWCBheGlzIHNjYWxlXG4gIGNvbnN0IHggPSBkM1xuICAgIC5zY2FsZVRpbWUoKVxuICAgIC5kb21haW4oZGF0ZVJhbmdlKVxuICAgIC5yYW5nZShbMCwgd2lkdGhdKTtcblxuICAvLyBYIGF4aXNcbiAgY29uc3QgeEF4aXMgPSBkMy5heGlzQm90dG9tKHgpLnRpY2tGb3JtYXQoZDMudGltZUZvcm1hdChcIiVZXCIpKTtcblxuICBnLmFwcGVuZChcImdcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICsgXCIpXCIpXG4gICAgLmNhbGwoeEF4aXMpO1xuXG4gIC8vIENvbXB1dGUgeSBheGlzXG4gIGNvbnN0IHlFeHRlbnQgPSBkMy5leHRlbnQoZGF0YSwgZCA9PiB7XG4gICAgcmV0dXJuICtkW1widmlld3NcIl07XG4gIH0pO1xuXG4gIGNvbnN0IHkgPSBkM1xuICAgIC5zY2FsZUxpbmVhcigpXG4gICAgLmRvbWFpbih5RXh0ZW50KVxuICAgIC5yYW5nZShbaGVpZ2h0LCAwXSk7XG4gIGcuYXBwZW5kKFwiZ1wiKS5jYWxsKGQzLmF4aXNMZWZ0KHkpLnRpY2tGb3JtYXQoZDMuZm9ybWF0KFwifnNcIikpKTtcblxuICBjb25zdCB0aXAgPSBUb29sVGlwKClcbiAgICAuYXR0cihcImNsYXNzXCIsIFwiZDMtdGlwXCIpXG4gICAgLmh0bWwoZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIGAke2QubmFtZX06ICR7ZC52aWV3c30gdmlld3NgO1xuICAgIH0pO1xuXG4gIC8vIEFwcGVuZCB0aGUgcmVjdGFuZ2xlc1xuICBnLnNlbGVjdEFsbChcImNpcmNsZVwiKVxuICAgIC5kYXRhKGRhdGEpXG4gICAgLmVudGVyKClcbiAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgeChwYXJzZVRpbWUoZFtcImZpbG1fZGF0ZVwiXSkpICsgXCIsXCIgKyB5KCtkW1widmlld3NcIl0pICsgXCIpXCI7XG4gICAgfSlcbiAgICAuYXR0cihcInJcIiwgMilcbiAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIFwiMC43NVwiKVxuICAgIC5zdHlsZShcImZpbGxcIiwgQ09MT1JTLlRFQUwpXG4gICAgLmNhbGwodGlwKVxuICAgIC5vbihcIm1vdXNlb3ZlclwiLCB0aXAuc2hvdylcbiAgICAub24oXCJtb3VzZW91dFwiLCB0aXAuaGlkZSk7O1xuXG4gIC8vIEFwcGVuZCBheGlzIGxhYmVsc1xuICBnLmFwcGVuZChcInRleHRcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgtNTAsIDI1MCkgcm90YXRlKC05MClcIilcbiAgICAuYXR0cihcImZpbGxcIiwgQ09MT1JTLlRJVExFX1dISVRFKVxuICAgIC50ZXh0KFwiTnVtYmVyIG9mIFZpZXdzXCIpO1xuICBnLmFwcGVuZChcInRleHRcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgzMjAsIDQ1MClcIilcbiAgICAuYXR0cihcImZpbGxcIiwgQ09MT1JTLlRJVExFX1dISVRFKVxuICAgIC50ZXh0KFwiWWVhclwiKTtcbn1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xuaW1wb3J0IENPTE9SUyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgY2lyY2xlUGFja1Byb2Zlc3Npb25zIGZyb20gXCIuL2NpcmNsZVBhY2tQcm9mZXNzaW9uc1wiO1xuaW1wb3J0IHRyZWVtYXBQcm9mZXNzaW9ucyBmcm9tIFwiLi90cmVlbWFwUHJvZmVzc2lvbnNcIjtcblxuLy8gQWNjZXB0cyBhIGQzLlNlbGVjdGlvbiBhcyBhIHBhcmFtZXRlciBhbmQgbW9kaWZpZXMgaXQuXG4vLyBUaGlzIGZ1bmN0aW9uIGV4cGVjdHMgdGhlIGQzLlNlbGVjdGlvbiB0byBiZSBhIGRpdi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRpdiwgZGF0YSkge1xuICAvLyBTZXQgZGltZW5zaW9ucyBhbmQgbWFyZ2lucyBvZiBzdmcgKyBncmFwaFxuICBjb25zdCBtYXJnaW4gPSB7XG4gICAgdG9wOiAxMCxcbiAgICByaWdodDogMzAsXG4gICAgYm90dG9tOiA4MCxcbiAgICBsZWZ0OiA4MCxcbiAgfTtcbiAgY29uc3Qgc3ZnV2lkdGggPSA4MDA7XG4gIGNvbnN0IHN2Z0hlaWdodCA9IDUwMDtcbiAgY29uc3Qgd2lkdGggPSBzdmdXaWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICBjb25zdCBoZWlnaHQgPSBzdmdIZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcblxuICAvLyBTZXQgdmlzIHRpdGxlXG4gIGRpdi5hcHBlbmQoXCJoMlwiKS50ZXh0KFwiV2hhdCBEbyBURUQgVGFsa2VycyBEbyBGb3IgYSBMaXZpbmc/XCIpO1xuICBkaXYuYXBwZW5kKFwiaHJcIikuYXR0cihcImNvbG9yXCIsIENPTE9SUy5MSUdIVF9HUkVZKTtcblxuICAvLyBFbmFibGVzIHRoZSBkcm9wZG93biBtZW51IHRvIGNoYW5nZSB0aGUgdmlldy5cbiAgZnVuY3Rpb24gb25Qcm9mZXNzaW9uVmlld0NoYW5nZWQoKSB7XG4gICAgY29uc3QgZHJvcGRvd24gPSBkMy5zZWxlY3QoXCIjdmlld1NlbGVjdFwiKTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWlnbm9yZVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBjYXRlZ29yeSA9IGRyb3Bkb3duLl9ncm91cHNbMF1bMF0ub3B0aW9uc1tkcm9wZG93bi5fZ3JvdXBzWzBdWzBdLnNlbGVjdGVkSW5kZXhdLnZhbHVlO1xuXG4gICAgY29uc29sZS5sb2coY2F0ZWdvcnkpO1xuXG4gICAgaWYgKGNhdGVnb3J5ID09IFwiQ2lyY2xlIFBhY2tpbmdcIikge1xuICAgICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZVBhY2tOb2RlXCIpLnN0eWxlKFwib3BhY2l0eVwiLCBcIjFcIik7XG4gICAgICBkMy5zZWxlY3RBbGwoXCIudHJlZW1hcE5vZGVcIikuc3R5bGUoXCJvcGFjaXR5XCIsIFwiMFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZVBhY2tOb2RlXCIpLnN0eWxlKFwib3BhY2l0eVwiLCBcIjBcIik7XG4gICAgICBkMy5zZWxlY3RBbGwoXCIudHJlZW1hcE5vZGVcIikuc3R5bGUoXCJvcGFjaXR5XCIsIFwiMVwiKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgdmlldyBzZWxlY3RvclxuICBjb25zdCB2aWV3U2VsZWN0b3IgPSBkaXYuYXBwZW5kKFwic2VsZWN0XCIpLmF0dHIoXCJpZFwiLCBcInZpZXdTZWxlY3RcIik7XG4gIHZpZXdTZWxlY3RvclxuICAgIC5hcHBlbmQoXCJvcHRpb25cIilcbiAgICAudGV4dChcIkNpcmNsZSBQYWNraW5nXCIpXG4gICAgLmF0dHIoXCJ2YWx1ZVwiLCBcIkNpcmNsZSBQYWNraW5nXCIpO1xuICB2aWV3U2VsZWN0b3JcbiAgICAuYXBwZW5kKFwib3B0aW9uXCIpXG4gICAgLnRleHQoXCJUcmVlbWFwXCIpXG4gICAgLmF0dHIoXCJ2YWx1ZVwiLCBcIlRyZWVtYXBcIik7XG4gIHZpZXdTZWxlY3Rvci5vbihcImNoYW5nZVwiLCBvblByb2Zlc3Npb25WaWV3Q2hhbmdlZCk7XG5cbiAgY29uc3Qgc3ZnID0gZGl2LmFwcGVuZChcInN2Z1wiKS5hdHRyKFwiaWRcIiwgXCJwcm9mZXNzaW9uc1ZpZXdcIik7XG5cbiAgLy8gU2V0IHdpZHRoIGFuZCBoZWlnaHQgb2Ygc3ZnXG4gIC8vIHN2Zy5hdHRyKFwid2lkdGhcIiwgc3ZnV2lkdGgpO1xuICAvLyBzdmcuYXR0cihcImhlaWdodFwiLCBzdmdIZWlnaHQpO1xuICBzdmcuYXR0cihcInZpZXdCb3hcIiwgYDAgMCAke3N2Z1dpZHRofSAke3N2Z0hlaWdodH1gKTtcbiAgLy8gSW5uZXIgZ3JvdXBcbiAgY29uc3QgZyA9IHN2Zy5hcHBlbmQoXCJnXCIpO1xuICBnLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKTtcblxuICAvLyBDb252ZXJ0IGRhdGEgdG8gaGllcmFyY2hpY2FsIGZvcm1cbiAgY29uc3Qgcm9vdCA9IGQzXG4gICAgLnN0cmF0aWZ5KClcbiAgICAuaWQoZCA9PiBkLnByb2Zlc3Npb24pXG4gICAgLnBhcmVudElkKGQgPT4ge1xuICAgICAgaWYgKGQucHJvZmVzc2lvbiAhPSBcIlJvb3RcIikgcmV0dXJuIFwiUm9vdFwiO1xuICAgICAgZWxzZSByZXR1cm4gXCJcIjtcbiAgICB9KShkYXRhKVxuICAgIC5zdW0oZCA9PiArZC5jb3VudClcbiAgICAuc29ydCgoYSwgYikgPT4gK2IuZGF0YS5jb3VudCAtICthLmRhdGEuY291bnQpO1xuXG4gIC8vIEFkZCBib3RoIHRoZSBjaXJjbGUgcGFja2luZyBhbmQgdHJlZW1hcCBwbG90cyB0byB0aGUgc3ZnXG4gIGNpcmNsZVBhY2tQcm9mZXNzaW9ucyhzdmcsIHJvb3QsIHN2Z1dpZHRoLCBzdmdIZWlnaHQgLSBtYXJnaW4udG9wICogMik7XG4gIHRyZWVtYXBQcm9mZXNzaW9ucyhzdmcsIHJvb3QsIHdpZHRoLCBoZWlnaHQpO1xufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG5pbXBvcnQgeyBCYXNlVHlwZSwgSGllcmFyY2h5Q2lyY3VsYXJOb2RlIH0gZnJvbSBcImQzXCI7XG5pbXBvcnQgQ09MT1JTIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuLy8gQWNjZXB0cyBhIGQzLlNlbGVjdGlvbiBhcyBhIHBhcmFtZXRlciBhbmQgbW9kaWZpZXMgaXQuXG4vLyBUaGlzIGZ1bmN0aW9uIGV4cGVjdHMgdGhlIGQzLlNlbGVjdGlvbiB0byBiZSBhbiBTVkcuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjaXJjbGVQYWNrUHJvZmVzc2lvbnMoXG4gIHN2ZyxcbiAgcm9vdCxcbiAgd2lkdGgsXG4gIGhlaWdodCxcbikge1xuICAvLyBDYWxjdWxhdGUgY2lyY2xlIHBhY2tpbmcgZGF0YVxuICBjb25zdCBjaXJjbGVQYWNrID0gZDNcbiAgICAucGFjaygpXG4gICAgLnNpemUoW3dpZHRoLCBoZWlnaHRdKVxuICAgIC5wYWRkaW5nKDMpKHJvb3QpO1xuXG4gIGNvbnN0IG5vZGVzID0gc3ZnXG4gICAgLnNlbGVjdEFsbChcIi5jaXJjbGVQYWNrTm9kZVwiKVxuICAgIC5kYXRhKGNpcmNsZVBhY2subGVhdmVzKCkpXG4gICAgLmVudGVyKClcbiAgICAuYXBwZW5kKFwiZ1wiKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGQgPT4gYHRyYW5zbGF0ZSgke2QueCArIDF9LCR7ZC55ICsgMX0pYClcbiAgICAuYXR0cihcImNsYXNzXCIsIFwiY2lyY2xlUGFja05vZGVcIilcbiAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIFwiMVwiKTtcblxuICBub2Rlc1xuICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAuYXR0cihcInJcIiwgZCA9PiBkLnIpXG4gICAgLmF0dHIoXCJmaWxsXCIsIENPTE9SUy5URURfUkVEKVxuICAgIC5hdHRyKFwic3Ryb2tlXCIsIENPTE9SUy5MSUdIVF9HUkVZKVxuICAgIC5hdHRyKFwic3Ryb2tlLXdlaWdodFwiLCA1KTtcblxuICBmdW5jdGlvbiBnZXRTaXplKGQpIHtcbiAgICBjb25zdCBiYm94ID0gdGhpcy5nZXRCQm94KCksXG4gICAgICBjYmJveCA9IHRoaXMucGFyZW50Tm9kZS5nZXRCQm94KCk7XG4gICAgZC5kYXRhW1wic2NhbGVcIl0gPSBNYXRoLm1pbihjYmJveC53aWR0aCAvIGJib3gud2lkdGgsIGNiYm94LmhlaWdodCAvIGJib3guaGVpZ2h0KTtcbiAgfVxuXG4gIG5vZGVzXG4gICAgLmFwcGVuZChcInRleHRcIilcbiAgICAudGV4dChkID0+IChkLmRhdGEpLnByb2Zlc3Npb24pXG4gICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIFwiMXB4XCIpXG4gICAgLmVhY2goZ2V0U2l6ZSlcbiAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIChkLmRhdGEpW1wic2NhbGVcIl0gKyBcInB4XCI7XG4gICAgfSlcbiAgICAuYXR0cihcImZpbGxcIiwgQ09MT1JTLkxJR0hUX0dSRVkpXG4gICAgLmF0dHIoXCJjbGFzc1wiLCBcInByb2Zlc3Npb25MYWJlbFwiKTtcblxuICByZXR1cm4gbm9kZXM7XG59XG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tIFwiZDNcIjtcbmltcG9ydCBDT0xPUlMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG4vLyBBY2NlcHRzIGEgZDMuU2VsZWN0aW9uIGFzIGEgcGFyYW1ldGVyIGFuZCBtb2RpZmllcyBpdC5cbi8vIFRoaXMgZnVuY3Rpb24gZXhwZWN0cyB0aGUgZDMuU2VsZWN0aW9uIHRvIGJlIGFuIFNWRy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyZWVtYXBQcm9mZXNzaW9ucyhzdmcsIHJvb3QsIHdpZHRoLCBoZWlnaHQpIHtcbiAgLy8gQ2FsY3VsYXRlIGNpcmNsZSBwYWNraW5nIGRhdGFcbiAgY29uc3QgdHJlZW1hcCA9IGQzXG4gICAgLnRyZWVtYXAoKVxuICAgIC5zaXplKFt3aWR0aCwgaGVpZ2h0XSlcbiAgICAucGFkZGluZygzKShyb290KTtcblxuICBjb25zdCBub2RlcyA9IHN2Z1xuICAgIC5zZWxlY3RBbGwoXCIudHJlZW1hcE5vZGVcIilcbiAgICAuZGF0YSh0cmVlbWFwLmxlYXZlcygpKVxuICAgIC5lbnRlcigpXG4gICAgLmFwcGVuZChcImdcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBkID0+IGB0cmFuc2xhdGUoJHtkLngwICsgMX0sJHtkLnkwICsgMX0pYClcbiAgICAuYXR0cihcImNsYXNzXCIsIFwidHJlZW1hcE5vZGVcIilcbiAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIFwiMFwiKTtcblxuICBub2Rlc1xuICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgLmF0dHIoXCJ3aWR0aFwiLCBkID0+IGQueDEgLSBkLngwKVxuICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGQgPT4gZC55MSAtIGQueTApXG4gICAgLmF0dHIoXCJmaWxsXCIsIENPTE9SUy5MSUdIVF9HUkVZKVxuICAgIC5hdHRyKFwic3Ryb2tlXCIsIENPTE9SUy5MSUdIVEVSX0JHKVxuICAgIC5hdHRyKFwic3Ryb2tlLXdlaWdodFwiLCA1KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBmdW5jdGlvbiBnZXRTaXplKGQpIHtcbiAgICBjb25zdCBiYm94ID0gdGhpcy5nZXRCQm94KCksXG4gICAgICBjYmJveCA9IHRoaXMucGFyZW50Tm9kZS5nZXRCQm94KCk7XG4gICAgZC5kYXRhW1wic2NhbGVcIl0gPSBNYXRoLm1pbihjYmJveC53aWR0aCAvIGJib3gud2lkdGgsIGNiYm94LmhlaWdodCAvIGJib3guaGVpZ2h0KTtcbiAgfVxuXG4gIG5vZGVzXG4gICAgLmFwcGVuZChcInRleHRcIilcbiAgICAudGV4dChkID0+IGQuZGF0YS5wcm9mZXNzaW9uKVxuICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBcIjFweFwiKVxuICAgIC5lYWNoKGdldFNpemUpXG4gICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiBkLmRhdGFbXCJzY2FsZVwiXSArIFwicHhcIjtcbiAgICB9KVxuICAgIC5hdHRyKFwiZmlsbFwiLCBDT0xPUlMuREFSS19CRylcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBkID0+IFwidHJhbnNsYXRlKFwiICsgKGQueDEgLSBkLngwKSAvIDIgKyBcIixcIiArIChkLnkxIC0gZC55MCkgLyAyICsgXCIpXCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLCBcInByb2Zlc3Npb25MYWJlbFwiKTtcblxuICByZXR1cm4gbm9kZXM7XG59XG4iLCIvLyBSZXR1cm5zIGEgcGF0aCB0byBhbiBpY29uIGltYWdlIGJhc2VkIG9uIHRoZSBpbnB1dCBzdHJpbmcuICBEZWZhdWx0cyB0byBhIHF1ZXN0aW9uIG1hcmsgb24gYmFkIGlucHV0LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocmF0aW5nKSB7XG4gIHJhdGluZyA9IHJhdGluZy50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBwYXRoID0gXCIuL2ltYWdlcy9pY29uX3N2Z3MvaWNvbl9cIiArIHJhdGluZyArIFwiLnN2Z1wiO1xuICByZXR1cm4gcGF0aDtcbn1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xuaW1wb3J0IENPTE9SUyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgaW1hZ2VTZWxlY3RvciBmcm9tIFwiLi9pbWFnZVNlbGVjdG9yXCI7XG5pbXBvcnQgVG9vbFRpcCBmcm9tIFwiLi9Ub29sVGlwXCI7XG5cblxuLy8gUmV0dXJucyBwYXRoIGRhdGEgZm9yIGEgcmVjdGFuZ2xlIHdpdGggcm91bmRlZCB0b3AgY29ybmVycy5cbi8vIFRoZSBib3R0b20tbGVmdCBjb3JuZXIgaXMg4p+oeCx54p+pLlxuZnVuY3Rpb24gdG9wUm91bmRlZFJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCwgcmFkaXVzKSB7XG4gIGxldCBwYXRoID0gXCJNXCIgKyB4ICsgXCIsXCIgKyB5ICsgXCJ2XCIgKyAoLWhlaWdodCArIHJhZGl1cyk7XG4gIHBhdGggKz0gXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMCAxIFwiICsgcmFkaXVzICsgXCIsXCIgKyAtcmFkaXVzO1xuICBwYXRoICs9IFwiaFwiICsgKHdpZHRoIC0gcmFkaXVzICogMik7XG4gIHBhdGggKz0gXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMCAxIFwiICsgcmFkaXVzICsgXCIsXCIgKyByYWRpdXM7XG4gIHBhdGggKz0gXCJ2XCIgKyAoaGVpZ2h0IC0gcmFkaXVzKSArIFwielwiO1xuICByZXR1cm4gcGF0aDtcbn1cblxuLy8gQWNjZXB0cyBhIGQzLlNlbGVjdGlvbiBhcyBhIHBhcmFtZXRlciBhbmQgbW9kaWZpZXMgaXQuXG4vLyBUaGlzIGZ1bmN0aW9uIGV4cGVjdHMgdGhlIGQzLlNlbGVjdGlvbiB0byBiZSBhIGRpdi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRpdiwgZGF0YSkge1xuICAvLyBTZXQgZGltZW5zaW9ucyBhbmQgbWFyZ2lucyBvZiBzdmcgKyBncmFwaFxuICBjb25zdCBtYXJnaW4gPSB7XG4gICAgdG9wOiAxMCxcbiAgICByaWdodDogMzAsXG4gICAgYm90dG9tOiA4MCxcbiAgICBsZWZ0OiA4MCxcbiAgfTtcbiAgY29uc3Qgc3ZnV2lkdGggPSA4MDA7XG4gIGNvbnN0IHN2Z0hlaWdodCA9IDUwMDtcbiAgY29uc3Qgd2lkdGggPSBzdmdXaWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICBjb25zdCBoZWlnaHQgPSBzdmdIZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcbiAgY29uc3QgYmFySGVpZ2h0ID0gc3ZnV2lkdGggLyAzMDtcbiAgY29uc3QgaWNvbkhlaWdodCA9IGJhckhlaWdodCAqIDAuODtcbiAgY29uc3QgcmF0aW5nQmFyV2lkdGggPSBpY29uSGVpZ2h0O1xuICBjb25zdCBpY29uT2Zmc2V0ID0gKGJhckhlaWdodCAtIGljb25IZWlnaHQpIC8gMjtcbiAgY29uc3QgcGllT3V0ZXJSYWRpdXMgPSBoZWlnaHQgKiAwLjIyO1xuICBjb25zdCBwaWVJbm5lclJhZGl1cyA9IHBpZU91dGVyUmFkaXVzICogMC43ODtcblxuICBmdW5jdGlvbiB1cGRhdGVDaGFydCgpIHtcbiAgICAvLyBHZXQgcmF0aW5ncyBmb3Igc2VsZWN0ZWQgdGFsayBvciB0YWxrc1xuICAgIGNvbnN0IGRyb3Bkb3duID0gZDMuc2VsZWN0KFwiI3RhbGtTZWxlY3RvclwiKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1pZ25vcmVcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3Qgc2VsZWN0ZWRUYWxrTmFtZSA9IGRyb3Bkb3duLl9ncm91cHNbMF1bMF0ub3B0aW9uc1tkcm9wZG93bi5fZ3JvdXBzWzBdWzBdLnNlbGVjdGVkSW5kZXhdLnZhbHVlO1xuXG4gICAgLy8gRmluZCBzZWxlY3RlZCByb3dcbiAgICBsZXQgc2VsZWN0ZWRSb3cgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGRhdGFbaV1bXCJuYW1lXCJdID09IHNlbGVjdGVkVGFsa05hbWUpIHtcbiAgICAgICAgc2VsZWN0ZWRSb3cgPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBHZXQgcmF0aW5ncyBhdCBzZWxlY3RlZCByb3dcbiAgICBjb25zdCByYXdTdHJpbmcgPSBkYXRhW3NlbGVjdGVkUm93XVtcInJhdGluZ3NcIl07XG4gICAgY29uc3QgcmF0aW5nc1N0cmluZyA9IHJhd1N0cmluZy5yZXBsYWNlKC8nL2csICdcIicpO1xuICAgIGNvbnN0IHJhdGluZ3MgPSBKU09OLnBhcnNlKHJhdGluZ3NTdHJpbmcpO1xuICAgIHJhdGluZ3Muc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICByZXR1cm4gK2JbXCJjb3VudFwiXSAtICthW1wiY291bnRcIl07XG4gICAgfSk7XG4gICAgY29uc3QgbnVtUmF0aW5nQ2F0ZWdvcmllcyA9IHJhdGluZ3MubGVuZ3RoO1xuICAgIGNvbnN0IHJhdGluZ3NTcGFjaW5nID0gKHN2Z1dpZHRoIC0gaWNvbkhlaWdodCAqIG51bVJhdGluZ0NhdGVnb3JpZXMpIC8gKG51bVJhdGluZ0NhdGVnb3JpZXMgKyAxKTtcbiAgICBjb25zdCByYXRpbmdEb21haW4gPSBkMy5leHRlbnQocmF0aW5ncywgZCA9PiArKGQpW1wiY291bnRcIl0pO1xuICAgIGNvbnN0IGJhckcgPSBkMy5zZWxlY3QoXCIjcmF0aW5nc0ljb25CYXJHcm91cFwiKTtcbiAgICBjb25zdCB5U2NhbGUgPSBkM1xuICAgICAgLnNjYWxlTGluZWFyKClcbiAgICAgIC5kb21haW4oWzAsIHJhdGluZ0RvbWFpblsxXV0pXG4gICAgICAucmFuZ2UoWzAsIGhlaWdodCAtIGljb25IZWlnaHQgLyAyXSk7XG5cbiAgICBjb25zdCB0aXAgPSBUb29sVGlwKClcbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkMy10aXBcIilcbiAgICAgIC5odG1sKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGAke2QubmFtZX06ICR7ZC5jb3VudH1gO1xuICAgICAgfSk7XG5cbiAgICAvLyBBZGQgYmFyc1xuICAgIGNvbnN0IHJhdGluZ3NHID0gYmFyRy5zZWxlY3RBbGwoXCIucmF0aW5nc0dcIikuZGF0YShyYXRpbmdzLCBkID0+IChkKVtcIm5hbWVcIl0pO1xuXG4gICAgY29uc3QgcmF0aW5nc0VudGVyID0gcmF0aW5nc0dcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInJhdGluZ3NHXCIpXG4gICAgICAuY2FsbCh0aXApXG4gICAgICAub24oXCJtb3VzZW92ZXJcIiwgdGlwLnNob3cpXG4gICAgICAub24oXCJtb3VzZW91dFwiLCB0aXAuaGlkZSk7XG5cbiAgICByYXRpbmdzRW50ZXJcbiAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsIFwicmF0aW5nQmFyXCIpXG4gICAgICAuYXR0cihcImZpbGxcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICBzd2l0Y2ggKChkKVtcIm5hbWVcIl0udG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgIGNhc2UgXCJjb25mdXNpbmdcIjpcbiAgICAgICAgICBjYXNlIFwibG9uZ3dpbmRlZFwiOlxuICAgICAgICAgIGNhc2UgXCJ1bmNvbnZpbmNpbmdcIjpcbiAgICAgICAgICAgIHJldHVybiBDT0xPUlMuQlJJR0hUX1JFRDtcbiAgICAgICAgICBjYXNlIFwib2Jub3hpb3VzXCI6XG4gICAgICAgICAgY2FzZSBcIm9rXCI6XG4gICAgICAgICAgICByZXR1cm4gQ09MT1JTLkJSSUdIVF9PUkFOR0U7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBDT0xPUlMuQlJJR0hUX0dSRUVOO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIHJhdGluZ3NFbnRlclxuICAgICAgLmFwcGVuZChcImltYWdlXCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsIFwiaWNvbi1pbWFnZVwiKVxuICAgICAgLmF0dHIoXCJocmVmXCIsIGQgPT4gaW1hZ2VTZWxlY3RvcigoZClbXCJuYW1lXCJdKSlcbiAgICAgIC5hdHRyKFwid2lkdGhcIiwgaWNvbkhlaWdodClcbiAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGljb25IZWlnaHQpXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaWNvbk9mZnNldCArIFwiKVwiKTtcblxuICAgIHJhdGluZ3NHXG4gICAgICAubWVyZ2UocmF0aW5nc0VudGVyKVxuICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgLmR1cmF0aW9uKDc1MClcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIChkLCBpKSA9PiBcInRyYW5zbGF0ZShcIiArIChyYXRpbmdzU3BhY2luZyAqIChpICsgMSkgKyBpY29uSGVpZ2h0ICogaSkgKyBcIiwwKVwiKVxuICAgICAgLnNlbGVjdChcIi5yYXRpbmdCYXJcIilcbiAgICAgIC5hdHRyKFwiZFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHlTY2FsZSgrKGQpW1wiY291bnRcIl0pO1xuICAgICAgICByZXR1cm4gdG9wUm91bmRlZFJlY3QoMCwgMCwgcmF0aW5nQmFyV2lkdGgsIGhlaWdodCwgYmFySGVpZ2h0IC8gNik7XG4gICAgICB9KTtcblxuICAgIC8vIEFkZCBjdW11bGF0aXZlIHBpZSBjaGFydFxuICAgIC8vIENvbnNvbGlkYXRlIGRhdGFcbiAgICBjb25zdCBwaWVEYXRhUmF3ID0geyBnb29kOiAwLCBiYWQ6IDAsIG9rOiAwIH07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYXRpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzd2l0Y2ggKChyYXRpbmdzW2ldKVtcIm5hbWVcIl0udG9Mb3dlckNhc2UoKSkge1xuICAgICAgICBjYXNlIFwiY29uZnVzaW5nXCI6XG4gICAgICAgIGNhc2UgXCJsb25nd2luZGVkXCI6XG4gICAgICAgIGNhc2UgXCJ1bmNvbnZpbmNpbmdcIjpcbiAgICAgICAgICBwaWVEYXRhUmF3LmJhZCArPSArKHJhdGluZ3NbaV0pW1wiY291bnRcIl07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJvYm5veGlvdXNcIjpcbiAgICAgICAgY2FzZSBcIm9rXCI6XG4gICAgICAgICAgcGllRGF0YVJhdy5vayArPSArKHJhdGluZ3NbaV0pW1wiY291bnRcIl07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcGllRGF0YVJhdy5nb29kICs9ICsocmF0aW5nc1tpXSlbXCJjb3VudFwiXTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgdm90ZVRvdGFsID0gcGllRGF0YVJhdy5nb29kICsgcGllRGF0YVJhdy5iYWQgKyBwaWVEYXRhUmF3Lm9rO1xuXG4gICAgY29uc3QgcGllVGlwID0gVG9vbFRpcCgpXG4gICAgICAuYXR0cihcImNsYXNzXCIsIFwiZDMtdGlwXCIpXG4gICAgICAuaHRtbCgoZCkgPT4ge1xuICAgICAgICByZXR1cm4gYCR7ZC5kYXRhLmtleS50b1VwcGVyQ2FzZSgpfTogJHsoKCtkLmRhdGEudmFsdWUgLyBkLnZvdGVUb3RhbCkgKiAxMDApLnRvRml4ZWQoMSl9JWA7XG4gICAgICB9KTtcblxuICAgIC8vIHNldCB0aGUgY29sb3Igc2NhbGVcbiAgICBjb25zdCBjb2xvciA9IGQzXG4gICAgICAuc2NhbGVPcmRpbmFsKClcbiAgICAgIC5kb21haW4oW1wiZ29vZFwiLCBcImJhZFwiLCBcIm9rXCJdKVxuICAgICAgLnJhbmdlKFtDT0xPUlMuQlJJR0hUX0dSRUVOLCBDT0xPUlMuQlJJR0hUX1JFRCwgQ09MT1JTLkJSSUdIVF9PUkFOR0VdKTtcblxuICAgIGNvbnN0IHBpZSA9IGQzLnBpZSgpLnZhbHVlKGZ1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiBkLnZhbHVlO1xuICAgIH0pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWlnbm9yZVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBwaWVEYXRhID0gcGllKGQzLmVudHJpZXMocGllRGF0YVJhdykpO1xuICAgIHBpZURhdGEuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgZC52b3RlVG90YWwgPSB2b3RlVG90YWw7XG4gICAgfSk7XG5cbiAgICBjb25zdCBwaWVFbnRlciA9IGQzXG4gICAgICAuc2VsZWN0KFwiLnJhdGluZ3NTVkdcIilcbiAgICAgIC5zZWxlY3RBbGwoXCIucGllQ2hhcnRcIilcbiAgICAgIC5kYXRhKHBpZURhdGEsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGQuZGF0YS5rZXk7XG4gICAgICB9KVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsIFwicGllQ2hhcnRcIilcbiAgICAgIC5hdHRyKFwiZmlsbFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBjb2xvcihkLmRhdGEua2V5KTtcbiAgICAgIH0pXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIChzdmdXaWR0aCAtIG1hcmdpbi5yaWdodCAtIHBpZU91dGVyUmFkaXVzKSArIFwiLFwiICsgKG1hcmdpbi50b3AgKiAzICsgcGllT3V0ZXJSYWRpdXMpICsgXCIpXCIpXG4gICAgICAuY2FsbChwaWVUaXApXG4gICAgICAub24oXCJtb3VzZW92ZXJcIiwgcGllVGlwLnNob3cpXG4gICAgICAub24oXCJtb3VzZW91dFwiLCBwaWVUaXAuaGlkZSk7XG5cbiAgICBjb25zdCBwaWVVcGRhdGUgPSBkM1xuICAgICAgLnNlbGVjdChcIi5yYXRpbmdzU1ZHXCIpXG4gICAgICAuc2VsZWN0QWxsKFwiLnBpZUNoYXJ0XCIpXG4gICAgICAuZGF0YShwaWVEYXRhLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkLmRhdGEua2V5O1xuICAgICAgfSk7XG5cbiAgICBwaWVVcGRhdGVcbiAgICAgIC5tZXJnZShwaWVFbnRlcilcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5kdXJhdGlvbig3NTApXG4gICAgICAuYXR0cihcbiAgICAgICAgXCJkXCIsXG4gICAgICAgIGQzXG4gICAgICAgICAgLmFyYygpXG4gICAgICAgICAgLmlubmVyUmFkaXVzKHBpZUlubmVyUmFkaXVzKVxuICAgICAgICAgIC5vdXRlclJhZGl1cyhwaWVPdXRlclJhZGl1cyksXG4gICAgICApO1xuICB9XG5cbiAgLy8gU2V0IHZpcyB0aXRsZVxuICBkaXYuYXBwZW5kKFwiaDJcIikudGV4dChcIlRhbGsgUmF0aW5nc1wiKTtcbiAgZGl2LmFwcGVuZChcImhyXCIpLmF0dHIoXCJjb2xvclwiLCBDT0xPUlMuTElHSFRfR1JFWSk7XG5cbiAgLy8gQWRkIHRhbGsgc2VsZWN0b3JcbiAgY29uc3QgdGFsa1NlbGVjdG9yID0gZGl2XG4gICAgLmFwcGVuZChcInNlbGVjdFwiKVxuICAgIC5hdHRyKFwiaWRcIiwgXCJ0YWxrU2VsZWN0b3JcIilcbiAgICAuc3R5bGUoXCJ3aWR0aFwiLCB3aWR0aCArIFwicHhcIik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIHRhbGtTZWxlY3RvclxuICAgICAgLmFwcGVuZChcIm9wdGlvblwiKVxuICAgICAgLmF0dHIoXCJ2YWx1ZVwiLCBkYXRhW2ldW1wibmFtZVwiXSlcbiAgICAgIC50ZXh0KGRhdGFbaV1bXCJuYW1lXCJdKTtcbiAgfVxuICB0YWxrU2VsZWN0b3Iub24oXCJjaGFuZ2VcIiwgdXBkYXRlQ2hhcnQpO1xuXG4gIC8vIENyZWF0ZSBzdmdcbiAgY29uc3Qgc3ZnID0gZGl2XG4gICAgLmFwcGVuZChcInN2Z1wiKVxuICAgIC5hdHRyKFwidmlld0JveFwiLCBgMCAwICR7c3ZnV2lkdGh9ICR7c3ZnSGVpZ2h0fWApXG4gICAgLmF0dHIoXCJjbGFzc1wiLCBcInJhdGluZ3NTVkdcIik7XG5cbiAgLy8gQ3JlYXRlIGJsYW5rIHJhdGluZ3MgYmFyXG4gIGNvbnN0IGJhciA9IHN2Z1xuICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgLmF0dHIoXCJpZFwiLCBcInJhdGluZ3NJY29uQmFyR3JvdXBcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgKHN2Z0hlaWdodCAtIG1hcmdpbi5ib3R0b20pICsgXCIpXCIpO1xuICBiYXJcbiAgICAuYXBwZW5kKFwicmVjdFwiKVxuICAgIC5hdHRyKFwiaWRcIiwgXCJpY29uQmFyXCIpXG4gICAgLmF0dHIoXCJ3aWR0aFwiLCBzdmdXaWR0aClcbiAgICAuYXR0cihcImhlaWdodFwiLCBiYXJIZWlnaHQpXG4gICAgLmF0dHIoXCJmaWxsXCIsIENPTE9SUy5MSUdIVF9HUkVZKVxuICAgIC5hdHRyKFwicnhcIiwgYmFySGVpZ2h0IC8gNik7XG5cbiAgdXBkYXRlQ2hhcnQoKTtcbn1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xuaW1wb3J0IENPTE9SUyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRpdiwgZGF0YSkge1xuXG4gICAgLy8gU1ZHIHNpemVcbiAgICBjb25zdCBzdmdXaWR0aCA9IDExMTA7XG4gICAgY29uc3Qgc3ZnSGVpZ2h0ID0gOTAwO1xuXG4gICAgLy8gVGh1bWJuYWlsIGFzcGVjdCByYXRpb1xuICAgIGNvbnN0IHRodW1ibmFpbFhSYXRpbyA9IDQ7XG4gICAgY29uc3QgdGh1bWJuYWlsWVJhdGlvID0gMztcblxuICAgIC8vIFBhdGggdG8gdGh1bWJuYWlsIGltYWdlc1xuICAgIGNvbnN0IHRodW1ibmFpbERpcmVjdG9yeSA9IFwiLi9pbWFnZXMvdGh1bWJuYWlscy9cIjtcblxuICAgIC8vIFNldCBkaW1lbnNpb25zIGFuZCBtYXJnaW5zIG9mIHN2ZyArIGdyYXBoXG4gICAgY29uc3QgbWFyZ2luID0ge1xuICAgICAgICB0b3A6IDEwLFxuICAgICAgICByaWdodDogMzAsXG4gICAgICAgIGJvdHRvbTogODAsXG4gICAgICAgIGxlZnQ6IDgwLFxuICAgIH07XG5cbiAgICAvLyBSb3dzIGFuZCBjb2x1bW5zIGluIHRoZSB1bml0IHZpc1xuICAgIGNvbnN0IHJvd3MgPSA1MDtcbiAgICBjb25zdCBjb2xzID0gZGF0YS5sZW5ndGggLyByb3dzO1xuXG4gICAgLy8gQW1vdW50IG9mIHNwYWNlIGJldHdlZW4gZWFjaCBpdGVtXG4gICAgY29uc3Qgb2Zmc2V0ID0gNTtcblxuICAgIC8vIFNpemUgb2YgZWFjaCB1bml0XG4gICAgY29uc3QgdW5pdFdpZHRoID0gKHN2Z1dpZHRoIC0gKChjb2xzICsgMSkgKiBvZmZzZXQpKSAvIGNvbHM7XG4gICAgY29uc3QgdW5pdEhlaWdodCA9IHVuaXRXaWR0aCAqIHRodW1ibmFpbFlSYXRpbyAvIHRodW1ibmFpbFhSYXRpbztcblxuICAgIC8vIEdldHMgdGhlIHJvdyBhbmQgY29sdW1uIGZyb20gdGhlIG92ZXJhbGwgaW5kZXhcbiAgICAvLyBpbmRleCBpcyB0aGUgcG9zaXRpb24gaW4gdGhlIGFycmF5XG4gICAgLy8gcmV0dXJucyBbY29sLCByb3ddXG4gICAgZnVuY3Rpb24gZ2V0Q29sUm93KGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHJvdyA9IE1hdGguZmxvb3IoaW5kZXggLyByb3dzKTtcbiAgICAgICAgY29uc3QgY29sID0gaW5kZXggJSByb3dzO1xuICAgICAgICByZXR1cm4gW2NvbCwgcm93XTtcbiAgICB9XG5cbiAgICAvLyBQb3NpdGlvbiBzY2FsaW5nIGZ1bmN0aW9uIGJhc2VkIG9uIHJvdyBhbmQgY29sdW1uXG4gICAgZnVuY3Rpb24gc2NhbGVYKGNvbCkge1xuICAgICAgICByZXR1cm4gKyBvZmZzZXQgKiAoY29sICsgMSkgKyB1bml0V2lkdGggKiBjb2w7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNjYWxlWShyb3cpIHtcbiAgICAgICAgcmV0dXJuIHN2Z0hlaWdodCAtIG9mZnNldCAqIChyb3cgKyAxKSAtIHVuaXRIZWlnaHQgKiAocm93ICsgMSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3ZnID0gZGl2LmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHN2Z1dpZHRoKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBzdmdIZWlnaHQpO1xuXG4gICAgY29uc3QgdW5pdHMgPSBzdmcuc2VsZWN0QWxsKFwiaW1hZ2VcIilcbiAgICAgICAgLmRhdGEoZGF0YSlcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZChcImltYWdlXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0aHVtYm5haWxcIilcbiAgICAgICAgLmF0dHIoXCJocmVmXCIsIChkKSA9PiB0aHVtYm5haWxEaXJlY3RvcnkgKyBkW1widGh1bWJuYWlsX3BhdGhcIl0pXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgdW5pdFdpZHRoKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCB1bml0SGVpZ2h0KVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoZCwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcG9zID0gZ2V0Q29sUm93KGkpO1xuICAgICAgICAgICAgY29uc3QgeCA9IHNjYWxlWChwb3NbMF0pO1xuICAgICAgICAgICAgY29uc3QgeSA9IHNjYWxlWShwb3NbMV0pO1xuICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgeCArIFwiLFwiICsgeSArIFwiKVwiO1xuICAgICAgICB9KTtcblxuXG59IiwiaW1wb3J0IFwiYm9vdHN0cmFwXCI7XG5pbXBvcnQgKiBhcyBkMyBmcm9tIFwiZDNcIjtcbmltcG9ydCBTY3JvbGxNYWdpYyBmcm9tIFwic2Nyb2xsbWFnaWNcIjtcbmltcG9ydCB0YWxrRGF0ZSBmcm9tIFwiLi90cy90YWxrRGF0ZVwiO1xuaW1wb3J0IHRlZFNpdGVWaWV3cyBmcm9tIFwiLi90cy90ZWRTaXRlVmlld3NcIjtcbmltcG9ydCByZWFkaW5nTGV2ZWwgZnJvbSBcIi4vdHMvcmVhZGluZ0xldmVsXCI7XG5pbXBvcnQgcHJvZmVzc2lvbnMgZnJvbSBcIi4vdHMvcHJvZmVzc2lvbnNcIjtcbmltcG9ydCByYXRpbmdzQnJlYWtkb3duIGZyb20gXCIuL3RzL3JhdGluZ3NCcmVha2Rvd25cIjtcbmltcG9ydCB0b3BpY1JlbGF0aW9ucyBmcm9tIFwiLi90cy90b3BpY1JlbGF0aW9uc1wiO1xuaW1wb3J0IGFsbFRhbGtUaHVtYm5haWxHcmlkIGZyb20gXCIuL3RzL2FsbFRhbGtUaHVtYm5haWxHcmlkXCI7XG5pbXBvcnQgJCBmcm9tIFwianF1ZXJ5XCI7XG5cbmNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgU2Nyb2xsTWFnaWMuQ29udHJvbGxlcigpO1xuXG5jb25zdCBzaG93RmlndXJlMSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2hvd0ZpZ3VyZTFcIik7XG5jb25zdCBzY2VuZUZpZ3VyZTEgPSBuZXcgU2Nyb2xsTWFnaWMuU2NlbmUoe1xuICB0cmlnZ2VyRWxlbWVudDogXCIjc2hvd0ZpZ3VyZTFcIlxufSkub24oJ3N0YXJ0JywgZnVuY3Rpb24oKSB7XG4gIC8vIEV4YW1wbGUuIFVzZSBBbmltYXRlLkNTUyB0byB0cmlnZ2VyIGEgZmFkZSBpbiBlZmZlY3QuXG4gICQoXCJzdmcuZmlndXJlMVwiKS5yZW1vdmVDbGFzcyhcInZpc2libGUtZmFsc2VcIikuYWRkQ2xhc3MoXCJhbmltYXRlZFwiKS5hZGRDbGFzcyhcImZhZGVJbkxlZnRcIik7XG4gIGNvbnNvbGUubG9nKCdzdGFydCBvZiBzY2VuZScpO1xufSlcbi5hZGRUbyhjb250cm9sbGVyKTtcblxuLy8gR2l2ZSBlYWNoIHN2ZyBhIHZhcmlhYmxlIG5hbWVcbmNvbnN0IHN2ZzEgPSBkMy5zZWxlY3QoXCJzdmcuZmlndXJlMVwiKTtcbmNvbnN0IHN2ZzIgPSBkMy5zZWxlY3QoXCJzdmcuZmlndXJlMlwiKTtcbmNvbnN0IHN2ZzMgPSBkMy5zZWxlY3QoXCJzdmcuZmlndXJlM1wiKTtcbmNvbnN0IGRpdjQgPSBkMy5zZWxlY3QoXCJkaXYuZmlndXJlNFwiKTtcbmNvbnN0IHJhdGluZ3NEaXYgPSBkMy5zZWxlY3QoXCJkaXYucmF0aW5nc0RpdlwiKTtcbmNvbnN0IHRvcGljc0RpdiA9IGQzLnNlbGVjdChcImRpdi50b3BpY3NEaXZcIik7XG5jb25zdCB0aHVtYm5haWxHcmlkID0gZDMuc2VsZWN0KFwiZGl2LnRodW1ibmFpbEdyaWRcIilcblxuLy8gRGVmaW5lIGRhdGEgY2xlYW5lciBmdW5jdGlvblxuZnVuY3Rpb24gZGF0YUNsZWFuZXIoZGF0YSkge1xuICAvLyBDYWxjdWxhdGUgeWVhciBmcm9tIFVOSVggVGltZXN0YW1wXG4gIGRhdGEuZm9yRWFjaCh0YWxrID0+IHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUocGFyc2VJbnQodGFsa1tcImZpbG1fZGF0ZVwiXSwgMTApICogMTAwMCk7XG4gICAgdGFsay55ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCk7XG4gIH0pO1xufVxuXG4vLyBMb2FkIGRhdGFcbmQzLmNzdihcIi4vZGF0YS90ZWRfYWxsLmNzdlwiKS50aGVuKGRhdGEgPT4ge1xuICAvLyBQYXNzIGRhdGEgdGhyb3VnaCBkYXRhQ2xlYW5lcigpXG4gIGRhdGFDbGVhbmVyKGRhdGEpO1xuXG4gIGFsbFRhbGtUaHVtYm5haWxHcmlkKHRodW1ibmFpbEdyaWQsIGRhdGEpXG4gIHRhbGtEYXRlKHN2ZzEsIGRhdGEpO1xuICB0ZWRTaXRlVmlld3Moc3ZnMiwgZGF0YSk7XG4gIHJhdGluZ3NCcmVha2Rvd24ocmF0aW5nc0RpdiwgZGF0YSk7XG59KTtcblxuZDMuY3N2KFwiLi9kYXRhL2ZrX3Njb3Jlcy5jc3ZcIikudGhlbihkYXRhID0+IHtcbiAgLy9jb25zb2xlLmxvZyhkYXRhKTtcbiAgcmVhZGluZ0xldmVsKHN2ZzMsIGRhdGEpO1xufSk7XG5cbmQzLmpzb24oXCIuL2RhdGEvcHJvZmVzc2lvbl9jb3VudHMuanNvblwiKS50aGVuKGRhdGEgPT4ge1xuICBwcm9mZXNzaW9ucyhkaXY0LCBkYXRhKTtcbn0pO1xuXG5kMy5qc29uKFwiLi9kYXRhL3RvcGljX3JlbGF0aW9uc2hpcHMuanNvblwiKS50aGVuKGRhdGEgPT4ge1xuICB0b3BpY1JlbGF0aW9ucyh0b3BpY3NEaXYsIGRhdGEpO1xufSk7XG5cbmV4cG9ydCB7IGNvbnRyb2xsZXIgfSIsImltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xuaW1wb3J0IENPTE9SUyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbi8vIEFjY2VwdHMgYSBkMy5TZWxlY3Rpb24gYXMgYSBwYXJhbWV0ZXIgYW5kIG1vZGlmaWVzIGl0LlxuLy8gVGhpcyBmdW5jdGlvbiBleHBlY3RzIHRoZSBkMy5TZWxlY3Rpb24gdG8gYmUgYW4gU1ZHLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3ZnLCBkYXRhKSB7XG4gIC8vY29uc29sZS5sb2coZGF0YSk7XG5cbiAgLy8gU2V0IGRpbWVuc2lvbnMgYW5kIG1hcmdpbnMgb2Ygc3ZnICsgZ3JhcGhcbiAgY29uc3QgbWFyZ2luID0ge1xuICAgIHRvcDogMTAsXG4gICAgcmlnaHQ6IDMwLFxuICAgIGJvdHRvbTogODAsXG4gICAgbGVmdDogODAsXG4gIH07XG4gIGNvbnN0IHN2Z1dpZHRoID0gODAwO1xuICBjb25zdCBzdmdIZWlnaHQgPSA1MDA7XG4gIGNvbnN0IHdpZHRoID0gc3ZnV2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgY29uc3QgaGVpZ2h0ID0gc3ZnSGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG5cbiAgLy8gU2V0IHdpZHRoIGFuZCBoZWlnaHQgb2Ygc3ZnXG4gIHN2Zy5hdHRyKFwid2lkdGhcIiwgc3ZnV2lkdGgpO1xuICBzdmcuYXR0cihcImhlaWdodFwiLCBzdmdIZWlnaHQpO1xuICAvLyBzdmcuYXR0cihcInZpZXdCb3hcIiwgYDAgMCAke3N2Z1dpZHRofSAke3N2Z0hlaWdodH1gKTtcbiAgLy8gSW5uZXIgZ3JvdXBcbiAgY29uc3QgZyA9IHN2Zy5hcHBlbmQoXCJnXCIpO1xuICBnLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKTtcblxuICAvLyBHZXQgbWluIGFuZCBtYXggeWVhclxuICBjb25zdCB5ZWFyUmFuZ2UgPSBkMy5leHRlbnQoZGF0YSwgZCA9PiBwYXJzZUludChkW1wieWVhclwiXSwgMTApKTtcbiAgLy9jb25zb2xlLmxvZyh5ZWFyUmFuZ2UpO1xuXG4gIC8vIFggYXhpc1xuICBjb25zdCB4ID0gZDNcbiAgICAuc2NhbGVMaW5lYXIoKVxuICAgIC5kb21haW4oeWVhclJhbmdlKVxuICAgIC5yYW5nZShbMCwgd2lkdGhdKTtcblxuICBnLmFwcGVuZChcImdcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICsgXCIpXCIpXG4gICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4KS50aWNrRm9ybWF0KGQzLmZvcm1hdChcImRcIikpKTtcblxuICAvLyBzZXQgdGhlIHBhcmFtZXRlcnMgZm9yIHRoZSBoaXN0b2dyYW1cbiAgY29uc3QgaGlzdG9ncmFtID0gZDNcbiAgICAuaGlzdG9ncmFtKClcbiAgICAuZG9tYWluKHguZG9tYWluKCkpIC8vIFR5cGUgYXNzZXJ0aW9uLiB4LmRvbWFpbigpIHJldHVybnMgbnVtYmVyW10sIGJ1dCBkMy5oaXN0b2dyYW0oKS5kb21haW4oKSBleHBlY3RzIFtudW1iZXIsIG51bWJlcl1cbiAgICAudGhyZXNob2xkcyh4LnRpY2tzKHllYXJSYW5nZVsxXSAtIHllYXJSYW5nZVswXSkpO1xuXG4gIC8vIEdldCBoaXN0b2dyYW0gZGF0YSBpbiBOdW1iZXIgdHlwZS5cbiAgY29uc3QgeWVhckxpc3QgPSBkYXRhLm1hcCh0YWxrID0+IHBhcnNlSW50KHRhbGtbXCJ5ZWFyXCJdLCAxMCkpO1xuICAvL2NvbnNvbGUubG9nKHllYXJMaXN0KTtcblxuICAvLyBVc2UgaGlzdG9ncmFtKCkgdG8gY29tcHV0ZSBiaW5zXG4gIGNvbnN0IGJpbnMgPSBoaXN0b2dyYW0oeWVhckxpc3QpO1xuXG4gIC8vIENvbXB1dGUgeSBheGlzIG5vdyB0aGF0IHdlIGhhdmUgY291bnRzXG4gIGNvbnN0IHkgPSBkM1xuICAgIC5zY2FsZUxpbmVhcigpXG4gICAgLmRvbWFpbihbMCwgZDMubWF4KGJpbnMsIGQgPT4gZC5sZW5ndGgpXSlcbiAgICAucmFuZ2UoW2hlaWdodCwgMF0pO1xuICBnLmFwcGVuZChcImdcIikuY2FsbChkMy5heGlzTGVmdCh5KSk7XG5cbiAgLy8gQXBwZW5kIHJlY3RhbmdsZXNcbiAgZy5zZWxlY3RBbGwoXCJyZWN0XCIpXG4gICAgLmRhdGEoYmlucylcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgLmF0dHIoXCJ4XCIsIDEpXG4gICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgeChkLngwKSArIFwiLFwiICsgeShkLmxlbmd0aCkgKyBcIilcIjtcbiAgICB9KVxuICAgIC5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIHgoZC54MSkgLSB4KGQueDApIC0gMTtcbiAgICB9KVxuICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiBoZWlnaHQgLSB5KGQubGVuZ3RoKTtcbiAgICB9KVxuICAgIC5zdHlsZShcImZpbGxcIiwgQ09MT1JTLlRFRF9SRUQpO1xuXG4gIC8vIEFwcGVuZCBheGlzIGxhYmVsc1xuICBnLmFwcGVuZChcInRleHRcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgtNTAsIDI1MCkgcm90YXRlKC05MClcIilcbiAgICAuYXR0cihcImZpbGxcIiwgQ09MT1JTLlRJVExFX1dISVRFKVxuICAgIC50ZXh0KFwiTnVtYmVyIG9mIHRhbGtzXCIpO1xuICBnLmFwcGVuZChcInRleHRcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgzMjAsIDQ1MClcIilcbiAgICAuYXR0cihcImZpbGxcIiwgQ09MT1JTLlRJVExFX1dISVRFKVxuICAgIC50ZXh0KFwiWWVhclwiKTtcbn1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xuaW1wb3J0IENPTE9SUyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbi8vIEFjY2VwdHMgYSBkMy5TZWxlY3Rpb24gYXMgYSBwYXJhbWV0ZXIgYW5kIG1vZGlmaWVzIGl0LlxuLy8gVGhpcyBmdW5jdGlvbiBleHBlY3RzIHRoZSBkMy5TZWxlY3Rpb24gdG8gYmUgYW4gU1ZHLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3ZnLCBkYXRhKSB7XG4gIC8vY29uc29sZS5sb2coZGF0YSk7XG5cbiAgLy8gU2V0IGRpbWVuc2lvbnMgYW5kIG1hcmdpbnMgb2Ygc3ZnICsgZ3JhcGhcbiAgY29uc3QgbWFyZ2luID0ge1xuICAgIHRvcDogMTAsXG4gICAgcmlnaHQ6IDMwLFxuICAgIGJvdHRvbTogODAsXG4gICAgbGVmdDogODAsXG4gIH07XG4gIGNvbnN0IHN2Z1dpZHRoID0gODAwO1xuICBjb25zdCBzdmdIZWlnaHQgPSA1MDA7XG4gIGNvbnN0IHdpZHRoID0gc3ZnV2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgY29uc3QgaGVpZ2h0ID0gc3ZnSGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG5cbiAgLy8gU2V0IHdpZHRoIGFuZCBoZWlnaHQgb2Ygc3ZnXG4gIC8vIHN2Zy5hdHRyKFwid2lkdGhcIiwgc3ZnV2lkdGgpO1xuICAvLyBzdmcuYXR0cihcImhlaWdodFwiLCBzdmdIZWlnaHQpO1xuICBzdmcuYXR0cihcInZpZXdCb3hcIiwgYDAgMCAke3N2Z1dpZHRofSAke3N2Z0hlaWdodH1gKTtcbiAgLy8gSW5uZXIgZ3JvdXBcbiAgY29uc3QgZyA9IHN2Zy5hcHBlbmQoXCJnXCIpO1xuICBnLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKTtcblxuICAvLyBHZXQgbWluIGFuZCBtYXggeWVhclxuICBjb25zdCB5ZWFyUmFuZ2UgPSBkMy5leHRlbnQoZGF0YSwgZCA9PiBwYXJzZUludChkW1wibGV2ZWxcIl0sIDEwKSk7XG4gIC8vY29uc29sZS5sb2coeWVhclJhbmdlKTtcblxuICAvLyBYIGF4aXNcbiAgY29uc3QgeCA9IGQzXG4gICAgLnNjYWxlTGluZWFyKClcbiAgICAuZG9tYWluKHllYXJSYW5nZSlcbiAgICAucmFuZ2UoWzAsIHdpZHRoXSk7XG5cbiAgZy5hcHBlbmQoXCJnXCIpXG4gICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIGhlaWdodCArIFwiKVwiKVxuICAgIC5jYWxsKGQzLmF4aXNCb3R0b20oeCkudGlja0Zvcm1hdChkMy5mb3JtYXQoXCJkXCIpKSk7XG5cbiAgLy8gc2V0IHRoZSBwYXJhbWV0ZXJzIGZvciB0aGUgaGlzdG9ncmFtXG4gIGNvbnN0IGhpc3RvZ3JhbSA9IGQzXG4gICAgLmhpc3RvZ3JhbSgpXG4gICAgLmRvbWFpbih4LmRvbWFpbigpKSAvLyBUeXBlIGFzc2VydGlvbi4geC5kb21haW4oKSByZXR1cm5zIG51bWJlcltdLCBidXQgZDMuaGlzdG9ncmFtKCkuZG9tYWluKCkgZXhwZWN0cyBbbnVtYmVyLCBudW1iZXJdXG4gICAgLnRocmVzaG9sZHMoeC50aWNrcyg0MCkpO1xuXG4gIC8vIEdldCBoaXN0b2dyYW0gZGF0YSBpbiBOdW1iZXIgdHlwZS5cbiAgY29uc3QgeWVhckxpc3QgPSBkYXRhLm1hcCh0YWxrID0+IHBhcnNlSW50KHRhbGtbXCJsZXZlbFwiXSwgMTApKTtcbiAgLy9jb25zb2xlLmxvZyh5ZWFyTGlzdCk7XG5cbiAgLy8gVXNlIGhpc3RvZ3JhbSgpIHRvIGNvbXB1dGUgYmluc1xuICBjb25zdCBiaW5zID0gaGlzdG9ncmFtKHllYXJMaXN0KTtcblxuICAvLyBDb21wdXRlIHkgYXhpcyBub3cgdGhhdCB3ZSBoYXZlIGNvdW50c1xuICBjb25zdCB5ID0gZDNcbiAgICAuc2NhbGVMaW5lYXIoKVxuICAgIC5kb21haW4oWzAsIGQzLm1heChiaW5zLCBkID0+IGQubGVuZ3RoKV0pXG4gICAgLnJhbmdlKFtoZWlnaHQsIDBdKTtcbiAgZy5hcHBlbmQoXCJnXCIpLmNhbGwoZDMuYXhpc0xlZnQoeSkpO1xuXG4gIC8vIEFwcGVuZCByZWN0YW5nbGVzXG4gIGcuc2VsZWN0QWxsKFwicmVjdFwiKVxuICAgIC5kYXRhKGJpbnMpXG4gICAgLmVudGVyKClcbiAgICAuYXBwZW5kKFwicmVjdFwiKVxuICAgIC5hdHRyKFwieFwiLCAxKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHgoZC54MCkgKyBcIixcIiArIHkoZC5sZW5ndGgpICsgXCIpXCI7XG4gICAgfSlcbiAgICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiB4KGQueDEpIC0geChkLngwKSAtIDE7XG4gICAgfSlcbiAgICAuYXR0cihcImhlaWdodFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gaGVpZ2h0IC0geShkLmxlbmd0aCk7XG4gICAgfSlcbiAgICAuc3R5bGUoXCJmaWxsXCIsIENPTE9SUy5URURfUkVEKTtcblxuICAvLyBBcHBlbmQgYXhpcyBsYWJlbHNcbiAgZy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoLTUwLCAyNTApIHJvdGF0ZSgtOTApXCIpXG4gICAgLmF0dHIoXCJmaWxsXCIsIENPTE9SUy5USVRMRV9XSElURSlcbiAgICAudGV4dChcIk51bWJlciBvZiB0YWxrc1wiKTtcbiAgZy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMzIwLCA0NTApXCIpXG4gICAgLmF0dHIoXCJmaWxsXCIsIENPTE9SUy5USVRMRV9XSElURSlcbiAgICAudGV4dChcIlJlYWRpbmcgTGV2ZWxcIik7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9
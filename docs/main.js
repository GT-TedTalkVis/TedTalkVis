!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=9)}([,,,,,function(t,e,n){
/*!
  * Bootstrap v4.3.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!function(t,e,n){"use strict";function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function r(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),i.forEach((function(e){o(t,e,n[e])}))}return t}e=e&&e.hasOwnProperty("default")?e.default:e,n=n&&n.hasOwnProperty("default")?n.default:n;var a="transitionend";function u(t){var n=this,i=!1;return e(this).one(l.TRANSITION_END,(function(){i=!0})),setTimeout((function(){i||l.triggerTransitionEnd(n)}),t),this}var l={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");if(!e||"#"===e){var n=t.getAttribute("href");e=n&&"#"!==n?n.trim():""}try{return document.querySelector(e)?e:null}catch(t){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var n=e(t).css("transition-duration"),i=e(t).css("transition-delay"),r=parseFloat(n),o=parseFloat(i);return r||o?(n=n.split(",")[0],i=i.split(",")[0],1e3*(parseFloat(n)+parseFloat(i))):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){e(t).trigger(a)},supportsTransitionEnd:function(){return Boolean(a)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var r=n[i],o=e[i],s=o&&l.isElement(o)?"element":(a=o,{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(r).test(s))throw new Error(t.toUpperCase()+': Option "'+i+'" provided type "'+s+'" but expected type "'+r+'".')}var a},findShadowRoot:function(t){if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){var e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?l.findShadowRoot(t.parentNode):null}};e.fn.emulateTransitionEnd=u,e.event.special[l.TRANSITION_END]={bindType:a,delegateType:a,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}};var c=e.fn.alert,h={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},f="alert",p="fade",d="show",g=function(){function t(t){this._element=t}var n=t.prototype;return n.close=function(t){var e=this._element;t&&(e=this._getRootElement(t)),this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},n.dispose=function(){e.removeData(this._element,"bs.alert"),this._element=null},n._getRootElement=function(t){var n=l.getSelectorFromElement(t),i=!1;return n&&(i=document.querySelector(n)),i||(i=e(t).closest("."+f)[0]),i},n._triggerCloseEvent=function(t){var n=e.Event(h.CLOSE);return e(t).trigger(n),n},n._removeElement=function(t){var n=this;if(e(t).removeClass(d),e(t).hasClass(p)){var i=l.getTransitionDurationFromElement(t);e(t).one(l.TRANSITION_END,(function(e){return n._destroyElement(t,e)})).emulateTransitionEnd(i)}else this._destroyElement(t)},n._destroyElement=function(t){e(t).detach().trigger(h.CLOSED).remove()},t._jQueryInterface=function(n){return this.each((function(){var i=e(this),r=i.data("bs.alert");r||(r=new t(this),i.data("bs.alert",r)),"close"===n&&r[n](this)}))},t._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},r(t,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),t}();e(document).on(h.CLICK_DATA_API,'[data-dismiss="alert"]',g._handleDismiss(new g)),e.fn.alert=g._jQueryInterface,e.fn.alert.Constructor=g,e.fn.alert.noConflict=function(){return e.fn.alert=c,g._jQueryInterface};var m=e.fn.button,v="active",_="btn",y="focus",b='[data-toggle^="button"]',x='[data-toggle="buttons"]',w='input:not([type="hidden"])',T=".active",E=".btn",C={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},S=function(){function t(t){this._element=t}var n=t.prototype;return n.toggle=function(){var t=!0,n=!0,i=e(this._element).closest(x)[0];if(i){var r=this._element.querySelector(w);if(r){if("radio"===r.type)if(r.checked&&this._element.classList.contains(v))t=!1;else{var o=i.querySelector(T);o&&e(o).removeClass(v)}if(t){if(r.hasAttribute("disabled")||i.hasAttribute("disabled")||r.classList.contains("disabled")||i.classList.contains("disabled"))return;r.checked=!this._element.classList.contains(v),e(r).trigger("change")}r.focus(),n=!1}}n&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(v)),t&&e(this._element).toggleClass(v)},n.dispose=function(){e.removeData(this._element,"bs.button"),this._element=null},t._jQueryInterface=function(n){return this.each((function(){var i=e(this).data("bs.button");i||(i=new t(this),e(this).data("bs.button",i)),"toggle"===n&&i[n]()}))},r(t,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),t}();e(document).on(C.CLICK_DATA_API,b,(function(t){t.preventDefault();var n=t.target;e(n).hasClass(_)||(n=e(n).closest(E)),S._jQueryInterface.call(e(n),"toggle")})).on(C.FOCUS_BLUR_DATA_API,b,(function(t){var n=e(t.target).closest(E)[0];e(n).toggleClass(y,/^focus(in)?$/.test(t.type))})),e.fn.button=S._jQueryInterface,e.fn.button.Constructor=S,e.fn.button.noConflict=function(){return e.fn.button=m,S._jQueryInterface};var N="carousel",A=".bs.carousel",D=e.fn[N],M={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},k={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},I="next",O="prev",L="left",P="right",j={SLIDE:"slide.bs.carousel",SLID:"slid.bs.carousel",KEYDOWN:"keydown.bs.carousel",MOUSEENTER:"mouseenter.bs.carousel",MOUSELEAVE:"mouseleave.bs.carousel",TOUCHSTART:"touchstart.bs.carousel",TOUCHMOVE:"touchmove.bs.carousel",TOUCHEND:"touchend.bs.carousel",POINTERDOWN:"pointerdown.bs.carousel",POINTERUP:"pointerup.bs.carousel",DRAG_START:"dragstart.bs.carousel",LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},R="carousel",H="active",q="slide",F="carousel-item-right",U="carousel-item-left",B="carousel-item-next",W="carousel-item-prev",Y="pointer-event",z={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",ITEM_IMG:".carousel-item img",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},V={TOUCH:"touch",PEN:"pen"},$=function(){function t(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._element=t,this._indicatorsElement=this._element.querySelector(z.INDICATORS),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}var n=t.prototype;return n.next=function(){this._isSliding||this._slide(I)},n.nextWhenVisible=function(){!document.hidden&&e(this._element).is(":visible")&&"hidden"!==e(this._element).css("visibility")&&this.next()},n.prev=function(){this._isSliding||this._slide(O)},n.pause=function(t){t||(this._isPaused=!0),this._element.querySelector(z.NEXT_PREV)&&(l.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},n.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},n.to=function(t){var n=this;this._activeElement=this._element.querySelector(z.ACTIVE_ITEM);var i=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)e(this._element).one(j.SLID,(function(){return n.to(t)}));else{if(i===t)return this.pause(),void this.cycle();var r=t>i?I:O;this._slide(r,this._items[t])}},n.dispose=function(){e(this._element).off(A),e.removeData(this._element,"bs.carousel"),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},n._getConfig=function(t){return t=s({},M,t),l.typeCheckConfig(N,t,k),t},n._handleSwipe=function(){var t=Math.abs(this.touchDeltaX);if(!(t<=40)){var e=t/this.touchDeltaX;e>0&&this.prev(),e<0&&this.next()}},n._addEventListeners=function(){var t=this;this._config.keyboard&&e(this._element).on(j.KEYDOWN,(function(e){return t._keydown(e)})),"hover"===this._config.pause&&e(this._element).on(j.MOUSEENTER,(function(e){return t.pause(e)})).on(j.MOUSELEAVE,(function(e){return t.cycle(e)})),this._config.touch&&this._addTouchEventListeners()},n._addTouchEventListeners=function(){var t=this;if(this._touchSupported){var n=function(e){t._pointerEvent&&V[e.originalEvent.pointerType.toUpperCase()]?t.touchStartX=e.originalEvent.clientX:t._pointerEvent||(t.touchStartX=e.originalEvent.touches[0].clientX)},i=function(e){t._pointerEvent&&V[e.originalEvent.pointerType.toUpperCase()]&&(t.touchDeltaX=e.originalEvent.clientX-t.touchStartX),t._handleSwipe(),"hover"===t._config.pause&&(t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout((function(e){return t.cycle(e)}),500+t._config.interval))};e(this._element.querySelectorAll(z.ITEM_IMG)).on(j.DRAG_START,(function(t){return t.preventDefault()})),this._pointerEvent?(e(this._element).on(j.POINTERDOWN,(function(t){return n(t)})),e(this._element).on(j.POINTERUP,(function(t){return i(t)})),this._element.classList.add(Y)):(e(this._element).on(j.TOUCHSTART,(function(t){return n(t)})),e(this._element).on(j.TOUCHMOVE,(function(e){return function(e){e.originalEvent.touches&&e.originalEvent.touches.length>1?t.touchDeltaX=0:t.touchDeltaX=e.originalEvent.touches[0].clientX-t.touchStartX}(e)})),e(this._element).on(j.TOUCHEND,(function(t){return i(t)})))}},n._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},n._getItemIndex=function(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(z.ITEM)):[],this._items.indexOf(t)},n._getItemByDirection=function(t,e){var n=t===I,i=t===O,r=this._getItemIndex(e),o=this._items.length-1;if((i&&0===r||n&&r===o)&&!this._config.wrap)return e;var s=(r+(t===O?-1:1))%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s]},n._triggerSlideEvent=function(t,n){var i=this._getItemIndex(t),r=this._getItemIndex(this._element.querySelector(z.ACTIVE_ITEM)),o=e.Event(j.SLIDE,{relatedTarget:t,direction:n,from:r,to:i});return e(this._element).trigger(o),o},n._setActiveIndicatorElement=function(t){if(this._indicatorsElement){var n=[].slice.call(this._indicatorsElement.querySelectorAll(z.ACTIVE));e(n).removeClass(H);var i=this._indicatorsElement.children[this._getItemIndex(t)];i&&e(i).addClass(H)}},n._slide=function(t,n){var i,r,o,s=this,a=this._element.querySelector(z.ACTIVE_ITEM),u=this._getItemIndex(a),c=n||a&&this._getItemByDirection(t,a),h=this._getItemIndex(c),f=Boolean(this._interval);if(t===I?(i=U,r=B,o=L):(i=F,r=W,o=P),c&&e(c).hasClass(H))this._isSliding=!1;else if(!this._triggerSlideEvent(c,o).isDefaultPrevented()&&a&&c){this._isSliding=!0,f&&this.pause(),this._setActiveIndicatorElement(c);var p=e.Event(j.SLID,{relatedTarget:c,direction:o,from:u,to:h});if(e(this._element).hasClass(q)){e(c).addClass(r),l.reflow(c),e(a).addClass(i),e(c).addClass(i);var d=parseInt(c.getAttribute("data-interval"),10);d?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=d):this._config.interval=this._config.defaultInterval||this._config.interval;var g=l.getTransitionDurationFromElement(a);e(a).one(l.TRANSITION_END,(function(){e(c).removeClass(i+" "+r).addClass(H),e(a).removeClass(H+" "+r+" "+i),s._isSliding=!1,setTimeout((function(){return e(s._element).trigger(p)}),0)})).emulateTransitionEnd(g)}else e(a).removeClass(H),e(c).addClass(H),this._isSliding=!1,e(this._element).trigger(p);f&&this.cycle()}},t._jQueryInterface=function(n){return this.each((function(){var i=e(this).data("bs.carousel"),r=s({},M,e(this).data());"object"==typeof n&&(r=s({},r,n));var o="string"==typeof n?n:r.slide;if(i||(i=new t(this,r),e(this).data("bs.carousel",i)),"number"==typeof n)i.to(n);else if("string"==typeof o){if(void 0===i[o])throw new TypeError('No method named "'+o+'"');i[o]()}else r.interval&&r.ride&&(i.pause(),i.cycle())}))},t._dataApiClickHandler=function(n){var i=l.getSelectorFromElement(this);if(i){var r=e(i)[0];if(r&&e(r).hasClass(R)){var o=s({},e(r).data(),e(this).data()),a=this.getAttribute("data-slide-to");a&&(o.interval=!1),t._jQueryInterface.call(e(r),o),a&&e(r).data("bs.carousel").to(a),n.preventDefault()}}},r(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return M}}]),t}();e(document).on(j.CLICK_DATA_API,z.DATA_SLIDE,$._dataApiClickHandler),e(window).on(j.LOAD_DATA_API,(function(){for(var t=[].slice.call(document.querySelectorAll(z.DATA_RIDE)),n=0,i=t.length;n<i;n++){var r=e(t[n]);$._jQueryInterface.call(r,r.data())}})),e.fn[N]=$._jQueryInterface,e.fn[N].Constructor=$,e.fn[N].noConflict=function(){return e.fn[N]=D,$._jQueryInterface};var X="collapse",K=e.fn[X],G={toggle:!0,parent:""},Q={toggle:"boolean",parent:"(string|element)"},Z={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},J="show",tt="collapse",et="collapsing",nt="collapsed",it="width",rt="height",ot={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},st=function(){function t(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(ot.DATA_TOGGLE)),i=0,r=n.length;i<r;i++){var o=n[i],s=l.getSelectorFromElement(o),a=[].slice.call(document.querySelectorAll(s)).filter((function(e){return e===t}));null!==s&&a.length>0&&(this._selector=s,this._triggerArray.push(o))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var n=t.prototype;return n.toggle=function(){e(this._element).hasClass(J)?this.hide():this.show()},n.show=function(){var n,i,r=this;if(!(this._isTransitioning||e(this._element).hasClass(J)||(this._parent&&0===(n=[].slice.call(this._parent.querySelectorAll(ot.ACTIVES)).filter((function(t){return"string"==typeof r._config.parent?t.getAttribute("data-parent")===r._config.parent:t.classList.contains(tt)}))).length&&(n=null),n&&(i=e(n).not(this._selector).data("bs.collapse"))&&i._isTransitioning))){var o=e.Event(Z.SHOW);if(e(this._element).trigger(o),!o.isDefaultPrevented()){n&&(t._jQueryInterface.call(e(n).not(this._selector),"hide"),i||e(n).data("bs.collapse",null));var s=this._getDimension();e(this._element).removeClass(tt).addClass(et),this._element.style[s]=0,this._triggerArray.length&&e(this._triggerArray).removeClass(nt).attr("aria-expanded",!0),this.setTransitioning(!0);var a="scroll"+(s[0].toUpperCase()+s.slice(1)),u=l.getTransitionDurationFromElement(this._element);e(this._element).one(l.TRANSITION_END,(function(){e(r._element).removeClass(et).addClass(tt).addClass(J),r._element.style[s]="",r.setTransitioning(!1),e(r._element).trigger(Z.SHOWN)})).emulateTransitionEnd(u),this._element.style[s]=this._element[a]+"px"}}},n.hide=function(){var t=this;if(!this._isTransitioning&&e(this._element).hasClass(J)){var n=e.Event(Z.HIDE);if(e(this._element).trigger(n),!n.isDefaultPrevented()){var i=this._getDimension();this._element.style[i]=this._element.getBoundingClientRect()[i]+"px",l.reflow(this._element),e(this._element).addClass(et).removeClass(tt).removeClass(J);var r=this._triggerArray.length;if(r>0)for(var o=0;o<r;o++){var s=this._triggerArray[o],a=l.getSelectorFromElement(s);null!==a&&(e([].slice.call(document.querySelectorAll(a))).hasClass(J)||e(s).addClass(nt).attr("aria-expanded",!1))}this.setTransitioning(!0),this._element.style[i]="";var u=l.getTransitionDurationFromElement(this._element);e(this._element).one(l.TRANSITION_END,(function(){t.setTransitioning(!1),e(t._element).removeClass(et).addClass(tt).trigger(Z.HIDDEN)})).emulateTransitionEnd(u)}}},n.setTransitioning=function(t){this._isTransitioning=t},n.dispose=function(){e.removeData(this._element,"bs.collapse"),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},n._getConfig=function(t){return(t=s({},G,t)).toggle=Boolean(t.toggle),l.typeCheckConfig(X,t,Q),t},n._getDimension=function(){return e(this._element).hasClass(it)?it:rt},n._getParent=function(){var n,i=this;l.isElement(this._config.parent)?(n=this._config.parent,void 0!==this._config.parent.jquery&&(n=this._config.parent[0])):n=document.querySelector(this._config.parent);var r='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',o=[].slice.call(n.querySelectorAll(r));return e(o).each((function(e,n){i._addAriaAndCollapsedClass(t._getTargetFromElement(n),[n])})),n},n._addAriaAndCollapsedClass=function(t,n){var i=e(t).hasClass(J);n.length&&e(n).toggleClass(nt,!i).attr("aria-expanded",i)},t._getTargetFromElement=function(t){var e=l.getSelectorFromElement(t);return e?document.querySelector(e):null},t._jQueryInterface=function(n){return this.each((function(){var i=e(this),r=i.data("bs.collapse"),o=s({},G,i.data(),"object"==typeof n&&n?n:{});if(!r&&o.toggle&&/show|hide/.test(n)&&(o.toggle=!1),r||(r=new t(this,o),i.data("bs.collapse",r)),"string"==typeof n){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}}))},r(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return G}}]),t}();e(document).on(Z.CLICK_DATA_API,ot.DATA_TOGGLE,(function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var n=e(this),i=l.getSelectorFromElement(this),r=[].slice.call(document.querySelectorAll(i));e(r).each((function(){var t=e(this),i=t.data("bs.collapse")?"toggle":n.data();st._jQueryInterface.call(t,i)}))})),e.fn[X]=st._jQueryInterface,e.fn[X].Constructor=st,e.fn[X].noConflict=function(){return e.fn[X]=K,st._jQueryInterface};var at="dropdown",ut=e.fn[at],lt=new RegExp("38|40|27"),ct={HIDE:"hide.bs.dropdown",HIDDEN:"hidden.bs.dropdown",SHOW:"show.bs.dropdown",SHOWN:"shown.bs.dropdown",CLICK:"click.bs.dropdown",CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},ht="disabled",ft="show",pt="dropup",dt="dropright",gt="dropleft",mt="dropdown-menu-right",vt="position-static",_t='[data-toggle="dropdown"]',yt=".dropdown form",bt=".dropdown-menu",xt=".navbar-nav",wt=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",Tt="top-start",Et="top-end",Ct="bottom-start",St="bottom-end",Nt="right-start",At="left-start",Dt={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},Mt={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},kt=function(){function t(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var i=t.prototype;return i.toggle=function(){if(!this._element.disabled&&!e(this._element).hasClass(ht)){var i=t._getParentFromElement(this._element),r=e(this._menu).hasClass(ft);if(t._clearMenus(),!r){var o={relatedTarget:this._element},s=e.Event(ct.SHOW,o);if(e(i).trigger(s),!s.isDefaultPrevented()){if(!this._inNavbar){if(void 0===n)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var a=this._element;"parent"===this._config.reference?a=i:l.isElement(this._config.reference)&&(a=this._config.reference,void 0!==this._config.reference.jquery&&(a=this._config.reference[0])),"scrollParent"!==this._config.boundary&&e(i).addClass(vt),this._popper=new n(a,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===e(i).closest(xt).length&&e(document.body).children().on("mouseover",null,e.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),e(this._menu).toggleClass(ft),e(i).toggleClass(ft).trigger(e.Event(ct.SHOWN,o))}}}},i.show=function(){if(!(this._element.disabled||e(this._element).hasClass(ht)||e(this._menu).hasClass(ft))){var n={relatedTarget:this._element},i=e.Event(ct.SHOW,n),r=t._getParentFromElement(this._element);e(r).trigger(i),i.isDefaultPrevented()||(e(this._menu).toggleClass(ft),e(r).toggleClass(ft).trigger(e.Event(ct.SHOWN,n)))}},i.hide=function(){if(!this._element.disabled&&!e(this._element).hasClass(ht)&&e(this._menu).hasClass(ft)){var n={relatedTarget:this._element},i=e.Event(ct.HIDE,n),r=t._getParentFromElement(this._element);e(r).trigger(i),i.isDefaultPrevented()||(e(this._menu).toggleClass(ft),e(r).toggleClass(ft).trigger(e.Event(ct.HIDDEN,n)))}},i.dispose=function(){e.removeData(this._element,"bs.dropdown"),e(this._element).off(".bs.dropdown"),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},i.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},i._addEventListeners=function(){var t=this;e(this._element).on(ct.CLICK,(function(e){e.preventDefault(),e.stopPropagation(),t.toggle()}))},i._getConfig=function(t){return t=s({},this.constructor.Default,e(this._element).data(),t),l.typeCheckConfig(at,t,this.constructor.DefaultType),t},i._getMenuElement=function(){if(!this._menu){var e=t._getParentFromElement(this._element);e&&(this._menu=e.querySelector(bt))}return this._menu},i._getPlacement=function(){var t=e(this._element.parentNode),n=Ct;return t.hasClass(pt)?(n=Tt,e(this._menu).hasClass(mt)&&(n=Et)):t.hasClass(dt)?n=Nt:t.hasClass(gt)?n=At:e(this._menu).hasClass(mt)&&(n=St),n},i._detectNavbar=function(){return e(this._element).closest(".navbar").length>0},i._getOffset=function(){var t=this,e={};return"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=s({},e.offsets,t._config.offset(e.offsets,t._element)||{}),e}:e.offset=this._config.offset,e},i._getPopperConfig=function(){var t={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(t.modifiers.applyStyle={enabled:!1}),t},t._jQueryInterface=function(n){return this.each((function(){var i=e(this).data("bs.dropdown");if(i||(i=new t(this,"object"==typeof n?n:null),e(this).data("bs.dropdown",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}}))},t._clearMenus=function(n){if(!n||3!==n.which&&("keyup"!==n.type||9===n.which))for(var i=[].slice.call(document.querySelectorAll(_t)),r=0,o=i.length;r<o;r++){var s=t._getParentFromElement(i[r]),a=e(i[r]).data("bs.dropdown"),u={relatedTarget:i[r]};if(n&&"click"===n.type&&(u.clickEvent=n),a){var l=a._menu;if(e(s).hasClass(ft)&&!(n&&("click"===n.type&&/input|textarea/i.test(n.target.tagName)||"keyup"===n.type&&9===n.which)&&e.contains(s,n.target))){var c=e.Event(ct.HIDE,u);e(s).trigger(c),c.isDefaultPrevented()||("ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),i[r].setAttribute("aria-expanded","false"),e(l).removeClass(ft),e(s).removeClass(ft).trigger(e.Event(ct.HIDDEN,u)))}}}},t._getParentFromElement=function(t){var e,n=l.getSelectorFromElement(t);return n&&(e=document.querySelector(n)),e||t.parentNode},t._dataApiKeydownHandler=function(n){if((/input|textarea/i.test(n.target.tagName)?!(32===n.which||27!==n.which&&(40!==n.which&&38!==n.which||e(n.target).closest(bt).length)):lt.test(n.which))&&(n.preventDefault(),n.stopPropagation(),!this.disabled&&!e(this).hasClass(ht))){var i=t._getParentFromElement(this),r=e(i).hasClass(ft);if(r&&(!r||27!==n.which&&32!==n.which)){var o=[].slice.call(i.querySelectorAll(wt));if(0!==o.length){var s=o.indexOf(n.target);38===n.which&&s>0&&s--,40===n.which&&s<o.length-1&&s++,s<0&&(s=0),o[s].focus()}}else{if(27===n.which){var a=i.querySelector(_t);e(a).trigger("focus")}e(this).trigger("click")}}},r(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Dt}},{key:"DefaultType",get:function(){return Mt}}]),t}();e(document).on(ct.KEYDOWN_DATA_API,_t,kt._dataApiKeydownHandler).on(ct.KEYDOWN_DATA_API,bt,kt._dataApiKeydownHandler).on(ct.CLICK_DATA_API+" "+ct.KEYUP_DATA_API,kt._clearMenus).on(ct.CLICK_DATA_API,_t,(function(t){t.preventDefault(),t.stopPropagation(),kt._jQueryInterface.call(e(this),"toggle")})).on(ct.CLICK_DATA_API,yt,(function(t){t.stopPropagation()})),e.fn[at]=kt._jQueryInterface,e.fn[at].Constructor=kt,e.fn[at].noConflict=function(){return e.fn[at]=ut,kt._jQueryInterface};var It=e.fn.modal,Ot={backdrop:!0,keyboard:!0,focus:!0,show:!0},Lt={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},Pt={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},jt="modal-dialog-scrollable",Rt="modal-scrollbar-measure",Ht="modal-backdrop",qt="modal-open",Ft="fade",Ut="show",Bt={DIALOG:".modal-dialog",MODAL_BODY:".modal-body",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top"},Wt=function(){function t(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=t.querySelector(Bt.DIALOG),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}var n=t.prototype;return n.toggle=function(t){return this._isShown?this.hide():this.show(t)},n.show=function(t){var n=this;if(!this._isShown&&!this._isTransitioning){e(this._element).hasClass(Ft)&&(this._isTransitioning=!0);var i=e.Event(Pt.SHOW,{relatedTarget:t});e(this._element).trigger(i),this._isShown||i.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),e(this._element).on(Pt.CLICK_DISMISS,Bt.DATA_DISMISS,(function(t){return n.hide(t)})),e(this._dialog).on(Pt.MOUSEDOWN_DISMISS,(function(){e(n._element).one(Pt.MOUSEUP_DISMISS,(function(t){e(t.target).is(n._element)&&(n._ignoreBackdropClick=!0)}))})),this._showBackdrop((function(){return n._showElement(t)})))}},n.hide=function(t){var n=this;if(t&&t.preventDefault(),this._isShown&&!this._isTransitioning){var i=e.Event(Pt.HIDE);if(e(this._element).trigger(i),this._isShown&&!i.isDefaultPrevented()){this._isShown=!1;var r=e(this._element).hasClass(Ft);if(r&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),e(document).off(Pt.FOCUSIN),e(this._element).removeClass(Ut),e(this._element).off(Pt.CLICK_DISMISS),e(this._dialog).off(Pt.MOUSEDOWN_DISMISS),r){var o=l.getTransitionDurationFromElement(this._element);e(this._element).one(l.TRANSITION_END,(function(t){return n._hideModal(t)})).emulateTransitionEnd(o)}else this._hideModal()}}},n.dispose=function(){[window,this._element,this._dialog].forEach((function(t){return e(t).off(".bs.modal")})),e(document).off(Pt.FOCUSIN),e.removeData(this._element,"bs.modal"),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},n.handleUpdate=function(){this._adjustDialog()},n._getConfig=function(t){return t=s({},Ot,t),l.typeCheckConfig("modal",t,Lt),t},n._showElement=function(t){var n=this,i=e(this._element).hasClass(Ft);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),e(this._dialog).hasClass(jt)?this._dialog.querySelector(Bt.MODAL_BODY).scrollTop=0:this._element.scrollTop=0,i&&l.reflow(this._element),e(this._element).addClass(Ut),this._config.focus&&this._enforceFocus();var r=e.Event(Pt.SHOWN,{relatedTarget:t}),o=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,e(n._element).trigger(r)};if(i){var s=l.getTransitionDurationFromElement(this._dialog);e(this._dialog).one(l.TRANSITION_END,o).emulateTransitionEnd(s)}else o()},n._enforceFocus=function(){var t=this;e(document).off(Pt.FOCUSIN).on(Pt.FOCUSIN,(function(n){document!==n.target&&t._element!==n.target&&0===e(t._element).has(n.target).length&&t._element.focus()}))},n._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?e(this._element).on(Pt.KEYDOWN_DISMISS,(function(e){27===e.which&&(e.preventDefault(),t.hide())})):this._isShown||e(this._element).off(Pt.KEYDOWN_DISMISS)},n._setResizeEvent=function(){var t=this;this._isShown?e(window).on(Pt.RESIZE,(function(e){return t.handleUpdate(e)})):e(window).off(Pt.RESIZE)},n._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._isTransitioning=!1,this._showBackdrop((function(){e(document.body).removeClass(qt),t._resetAdjustments(),t._resetScrollbar(),e(t._element).trigger(Pt.HIDDEN)}))},n._removeBackdrop=function(){this._backdrop&&(e(this._backdrop).remove(),this._backdrop=null)},n._showBackdrop=function(t){var n=this,i=e(this._element).hasClass(Ft)?Ft:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=Ht,i&&this._backdrop.classList.add(i),e(this._backdrop).appendTo(document.body),e(this._element).on(Pt.CLICK_DISMISS,(function(t){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())})),i&&l.reflow(this._backdrop),e(this._backdrop).addClass(Ut),!t)return;if(!i)return void t();var r=l.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(l.TRANSITION_END,t).emulateTransitionEnd(r)}else if(!this._isShown&&this._backdrop){e(this._backdrop).removeClass(Ut);var o=function(){n._removeBackdrop(),t&&t()};if(e(this._element).hasClass(Ft)){var s=l.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(l.TRANSITION_END,o).emulateTransitionEnd(s)}else o()}else t&&t()},n._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},n._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},n._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},n._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){var n=[].slice.call(document.querySelectorAll(Bt.FIXED_CONTENT)),i=[].slice.call(document.querySelectorAll(Bt.STICKY_CONTENT));e(n).each((function(n,i){var r=i.style.paddingRight,o=e(i).css("padding-right");e(i).data("padding-right",r).css("padding-right",parseFloat(o)+t._scrollbarWidth+"px")})),e(i).each((function(n,i){var r=i.style.marginRight,o=e(i).css("margin-right");e(i).data("margin-right",r).css("margin-right",parseFloat(o)-t._scrollbarWidth+"px")}));var r=document.body.style.paddingRight,o=e(document.body).css("padding-right");e(document.body).data("padding-right",r).css("padding-right",parseFloat(o)+this._scrollbarWidth+"px")}e(document.body).addClass(qt)},n._resetScrollbar=function(){var t=[].slice.call(document.querySelectorAll(Bt.FIXED_CONTENT));e(t).each((function(t,n){var i=e(n).data("padding-right");e(n).removeData("padding-right"),n.style.paddingRight=i||""}));var n=[].slice.call(document.querySelectorAll(""+Bt.STICKY_CONTENT));e(n).each((function(t,n){var i=e(n).data("margin-right");void 0!==i&&e(n).css("margin-right",i).removeData("margin-right")}));var i=e(document.body).data("padding-right");e(document.body).removeData("padding-right"),document.body.style.paddingRight=i||""},n._getScrollbarWidth=function(){var t=document.createElement("div");t.className=Rt,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},t._jQueryInterface=function(n,i){return this.each((function(){var r=e(this).data("bs.modal"),o=s({},Ot,e(this).data(),"object"==typeof n&&n?n:{});if(r||(r=new t(this,o),e(this).data("bs.modal",r)),"string"==typeof n){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n](i)}else o.show&&r.show(i)}))},r(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Ot}}]),t}();e(document).on(Pt.CLICK_DATA_API,Bt.DATA_TOGGLE,(function(t){var n,i=this,r=l.getSelectorFromElement(this);r&&(n=document.querySelector(r));var o=e(n).data("bs.modal")?"toggle":s({},e(n).data(),e(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var a=e(n).one(Pt.SHOW,(function(t){t.isDefaultPrevented()||a.one(Pt.HIDDEN,(function(){e(i).is(":visible")&&i.focus()}))}));Wt._jQueryInterface.call(e(n),o,this)})),e.fn.modal=Wt._jQueryInterface,e.fn.modal.Constructor=Wt,e.fn.modal.noConflict=function(){return e.fn.modal=It,Wt._jQueryInterface};var Yt=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],zt={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},Vt=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,$t=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;function Xt(t,e,n){if(0===t.length)return t;if(n&&"function"==typeof n)return n(t);for(var i=(new window.DOMParser).parseFromString(t,"text/html"),r=Object.keys(e),o=[].slice.call(i.body.querySelectorAll("*")),s=function(t,n){var i=o[t],s=i.nodeName.toLowerCase();if(-1===r.indexOf(i.nodeName.toLowerCase()))return i.parentNode.removeChild(i),"continue";var a=[].slice.call(i.attributes),u=[].concat(e["*"]||[],e[s]||[]);a.forEach((function(t){(function(t,e){var n=t.nodeName.toLowerCase();if(-1!==e.indexOf(n))return-1===Yt.indexOf(n)||Boolean(t.nodeValue.match(Vt)||t.nodeValue.match($t));for(var i=e.filter((function(t){return t instanceof RegExp})),r=0,o=i.length;r<o;r++)if(n.match(i[r]))return!0;return!1})(t,u)||i.removeAttribute(t.nodeName)}))},a=0,u=o.length;a<u;a++)s(a);return i.body.innerHTML}var Kt="tooltip",Gt=e.fn.tooltip,Qt=new RegExp("(^|\\s)bs-tooltip\\S+","g"),Zt=["sanitize","whiteList","sanitizeFn"],Jt={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string|function)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)",sanitize:"boolean",sanitizeFn:"(null|function)",whiteList:"object"},te={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},ee={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent",sanitize:!0,sanitizeFn:null,whiteList:zt},ne="show",ie="out",re={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},oe="fade",se="show",ae=".tooltip-inner",ue=".arrow",le="hover",ce="focus",he="click",fe="manual",pe=function(){function t(t,e){if(void 0===n)throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var i=t.prototype;return i.enable=function(){this._isEnabled=!0},i.disable=function(){this._isEnabled=!1},i.toggleEnabled=function(){this._isEnabled=!this._isEnabled},i.toggle=function(t){if(this._isEnabled)if(t){var n=this.constructor.DATA_KEY,i=e(t.currentTarget).data(n);i||(i=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(n,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(e(this.getTipElement()).hasClass(se))return void this._leave(null,this);this._enter(null,this)}},i.dispose=function(){clearTimeout(this._timeout),e.removeData(this.element,this.constructor.DATA_KEY),e(this.element).off(this.constructor.EVENT_KEY),e(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&e(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},i.show=function(){var t=this;if("none"===e(this.element).css("display"))throw new Error("Please use show on visible elements");var i=e.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){e(this.element).trigger(i);var r=l.findShadowRoot(this.element),o=e.contains(null!==r?r:this.element.ownerDocument.documentElement,this.element);if(i.isDefaultPrevented()||!o)return;var s=this.getTipElement(),a=l.getUID(this.constructor.NAME);s.setAttribute("id",a),this.element.setAttribute("aria-describedby",a),this.setContent(),this.config.animation&&e(s).addClass(oe);var u="function"==typeof this.config.placement?this.config.placement.call(this,s,this.element):this.config.placement,c=this._getAttachment(u);this.addAttachmentClass(c);var h=this._getContainer();e(s).data(this.constructor.DATA_KEY,this),e.contains(this.element.ownerDocument.documentElement,this.tip)||e(s).appendTo(h),e(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new n(this.element,s,{placement:c,modifiers:{offset:this._getOffset(),flip:{behavior:this.config.fallbackPlacement},arrow:{element:ue},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){return t._handlePopperPlacementChange(e)}}),e(s).addClass(se),"ontouchstart"in document.documentElement&&e(document.body).children().on("mouseover",null,e.noop);var f=function(){t.config.animation&&t._fixTransition();var n=t._hoverState;t._hoverState=null,e(t.element).trigger(t.constructor.Event.SHOWN),n===ie&&t._leave(null,t)};if(e(this.tip).hasClass(oe)){var p=l.getTransitionDurationFromElement(this.tip);e(this.tip).one(l.TRANSITION_END,f).emulateTransitionEnd(p)}else f()}},i.hide=function(t){var n=this,i=this.getTipElement(),r=e.Event(this.constructor.Event.HIDE),o=function(){n._hoverState!==ne&&i.parentNode&&i.parentNode.removeChild(i),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),e(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),t&&t()};if(e(this.element).trigger(r),!r.isDefaultPrevented()){if(e(i).removeClass(se),"ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),this._activeTrigger[he]=!1,this._activeTrigger[ce]=!1,this._activeTrigger[le]=!1,e(this.tip).hasClass(oe)){var s=l.getTransitionDurationFromElement(i);e(i).one(l.TRANSITION_END,o).emulateTransitionEnd(s)}else o();this._hoverState=""}},i.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},i.isWithContent=function(){return Boolean(this.getTitle())},i.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-tooltip-"+t)},i.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},i.setContent=function(){var t=this.getTipElement();this.setElementContent(e(t.querySelectorAll(ae)),this.getTitle()),e(t).removeClass(oe+" "+se)},i.setElementContent=function(t,n){"object"!=typeof n||!n.nodeType&&!n.jquery?this.config.html?(this.config.sanitize&&(n=Xt(n,this.config.whiteList,this.config.sanitizeFn)),t.html(n)):t.text(n):this.config.html?e(n).parent().is(t)||t.empty().append(n):t.text(e(n).text())},i.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},i._getOffset=function(){var t=this,e={};return"function"==typeof this.config.offset?e.fn=function(e){return e.offsets=s({},e.offsets,t.config.offset(e.offsets,t.element)||{}),e}:e.offset=this.config.offset,e},i._getContainer=function(){return!1===this.config.container?document.body:l.isElement(this.config.container)?e(this.config.container):e(document).find(this.config.container)},i._getAttachment=function(t){return te[t.toUpperCase()]},i._setListeners=function(){var t=this;this.config.trigger.split(" ").forEach((function(n){if("click"===n)e(t.element).on(t.constructor.Event.CLICK,t.config.selector,(function(e){return t.toggle(e)}));else if(n!==fe){var i=n===le?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,r=n===le?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;e(t.element).on(i,t.config.selector,(function(e){return t._enter(e)})).on(r,t.config.selector,(function(e){return t._leave(e)}))}})),e(this.element).closest(".modal").on("hide.bs.modal",(function(){t.element&&t.hide()})),this.config.selector?this.config=s({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},i._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},i._enter=function(t,n){var i=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(i))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(i,n)),t&&(n._activeTrigger["focusin"===t.type?ce:le]=!0),e(n.getTipElement()).hasClass(se)||n._hoverState===ne?n._hoverState=ne:(clearTimeout(n._timeout),n._hoverState=ne,n.config.delay&&n.config.delay.show?n._timeout=setTimeout((function(){n._hoverState===ne&&n.show()}),n.config.delay.show):n.show())},i._leave=function(t,n){var i=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(i))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(i,n)),t&&(n._activeTrigger["focusout"===t.type?ce:le]=!1),n._isWithActiveTrigger()||(clearTimeout(n._timeout),n._hoverState=ie,n.config.delay&&n.config.delay.hide?n._timeout=setTimeout((function(){n._hoverState===ie&&n.hide()}),n.config.delay.hide):n.hide())},i._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},i._getConfig=function(t){var n=e(this.element).data();return Object.keys(n).forEach((function(t){-1!==Zt.indexOf(t)&&delete n[t]})),"number"==typeof(t=s({},this.constructor.Default,n,"object"==typeof t&&t?t:{})).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),l.typeCheckConfig(Kt,t,this.constructor.DefaultType),t.sanitize&&(t.template=Xt(t.template,t.whiteList,t.sanitizeFn)),t},i._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},i._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(Qt);null!==n&&n.length&&t.removeClass(n.join(""))},i._handlePopperPlacementChange=function(t){var e=t.instance;this.tip=e.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},i._fixTransition=function(){var t=this.getTipElement(),n=this.config.animation;null===t.getAttribute("x-placement")&&(e(t).removeClass(oe),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},t._jQueryInterface=function(n){return this.each((function(){var i=e(this).data("bs.tooltip"),r="object"==typeof n&&n;if((i||!/dispose|hide/.test(n))&&(i||(i=new t(this,r),e(this).data("bs.tooltip",i)),"string"==typeof n)){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}}))},r(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return ee}},{key:"NAME",get:function(){return Kt}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return re}},{key:"EVENT_KEY",get:function(){return".bs.tooltip"}},{key:"DefaultType",get:function(){return Jt}}]),t}();e.fn.tooltip=pe._jQueryInterface,e.fn.tooltip.Constructor=pe,e.fn.tooltip.noConflict=function(){return e.fn.tooltip=Gt,pe._jQueryInterface};var de="popover",ge=e.fn.popover,me=new RegExp("(^|\\s)bs-popover\\S+","g"),ve=s({},pe.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),_e=s({},pe.DefaultType,{content:"(string|element|function)"}),ye="fade",be="show",xe=".popover-header",we=".popover-body",Te={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"},Ee=function(t){var n,i;function o(){return t.apply(this,arguments)||this}i=t,(n=o).prototype=Object.create(i.prototype),n.prototype.constructor=n,n.__proto__=i;var s=o.prototype;return s.isWithContent=function(){return this.getTitle()||this._getContent()},s.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-popover-"+t)},s.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},s.setContent=function(){var t=e(this.getTipElement());this.setElementContent(t.find(xe),this.getTitle());var n=this._getContent();"function"==typeof n&&(n=n.call(this.element)),this.setElementContent(t.find(we),n),t.removeClass(ye+" "+be)},s._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},s._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(me);null!==n&&n.length>0&&t.removeClass(n.join(""))},o._jQueryInterface=function(t){return this.each((function(){var n=e(this).data("bs.popover"),i="object"==typeof t?t:null;if((n||!/dispose|hide/.test(t))&&(n||(n=new o(this,i),e(this).data("bs.popover",n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}}))},r(o,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return ve}},{key:"NAME",get:function(){return de}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return Te}},{key:"EVENT_KEY",get:function(){return".bs.popover"}},{key:"DefaultType",get:function(){return _e}}]),o}(pe);e.fn.popover=Ee._jQueryInterface,e.fn.popover.Constructor=Ee,e.fn.popover.noConflict=function(){return e.fn.popover=ge,Ee._jQueryInterface};var Ce="scrollspy",Se=e.fn[Ce],Ne={offset:10,method:"auto",target:""},Ae={offset:"number",method:"string",target:"(string|element)"},De={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},Me="dropdown-item",ke="active",Ie={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},Oe="offset",Le="position",Pe=function(){function t(t,n){var i=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(n),this._selector=this._config.target+" "+Ie.NAV_LINKS+","+this._config.target+" "+Ie.LIST_ITEMS+","+this._config.target+" "+Ie.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,e(this._scrollElement).on(De.SCROLL,(function(t){return i._process(t)})),this.refresh(),this._process()}var n=t.prototype;return n.refresh=function(){var t=this,n=this._scrollElement===this._scrollElement.window?Oe:Le,i="auto"===this._config.method?n:this._config.method,r=i===Le?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map((function(t){var n,o=l.getSelectorFromElement(t);if(o&&(n=document.querySelector(o)),n){var s=n.getBoundingClientRect();if(s.width||s.height)return[e(n)[i]().top+r,o]}return null})).filter((function(t){return t})).sort((function(t,e){return t[0]-e[0]})).forEach((function(e){t._offsets.push(e[0]),t._targets.push(e[1])}))},n.dispose=function(){e.removeData(this._element,"bs.scrollspy"),e(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},n._getConfig=function(t){if("string"!=typeof(t=s({},Ne,"object"==typeof t&&t?t:{})).target){var n=e(t.target).attr("id");n||(n=l.getUID(Ce),e(t.target).attr("id",n)),t.target="#"+n}return l.typeCheckConfig(Ce,t,Ae),t},n._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},n._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},n._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},n._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var r=this._offsets.length;r--;)this._activeTarget!==this._targets[r]&&t>=this._offsets[r]&&(void 0===this._offsets[r+1]||t<this._offsets[r+1])&&this._activate(this._targets[r])}},n._activate=function(t){this._activeTarget=t,this._clear();var n=this._selector.split(",").map((function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'})),i=e([].slice.call(document.querySelectorAll(n.join(","))));i.hasClass(Me)?(i.closest(Ie.DROPDOWN).find(Ie.DROPDOWN_TOGGLE).addClass(ke),i.addClass(ke)):(i.addClass(ke),i.parents(Ie.NAV_LIST_GROUP).prev(Ie.NAV_LINKS+", "+Ie.LIST_ITEMS).addClass(ke),i.parents(Ie.NAV_LIST_GROUP).prev(Ie.NAV_ITEMS).children(Ie.NAV_LINKS).addClass(ke)),e(this._scrollElement).trigger(De.ACTIVATE,{relatedTarget:t})},n._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter((function(t){return t.classList.contains(ke)})).forEach((function(t){return t.classList.remove(ke)}))},t._jQueryInterface=function(n){return this.each((function(){var i=e(this).data("bs.scrollspy");if(i||(i=new t(this,"object"==typeof n&&n),e(this).data("bs.scrollspy",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}}))},r(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Ne}}]),t}();e(window).on(De.LOAD_DATA_API,(function(){for(var t=[].slice.call(document.querySelectorAll(Ie.DATA_SPY)),n=t.length;n--;){var i=e(t[n]);Pe._jQueryInterface.call(i,i.data())}})),e.fn[Ce]=Pe._jQueryInterface,e.fn[Ce].Constructor=Pe,e.fn[Ce].noConflict=function(){return e.fn[Ce]=Se,Pe._jQueryInterface};var je=e.fn.tab,Re={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},He="dropdown-menu",qe="active",Fe="disabled",Ue="fade",Be="show",We=".dropdown",Ye=".nav, .list-group",ze=".active",Ve="> li > .active",$e='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',Xe=".dropdown-toggle",Ke="> .dropdown-menu .active",Ge=function(){function t(t){this._element=t}var n=t.prototype;return n.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&e(this._element).hasClass(qe)||e(this._element).hasClass(Fe))){var n,i,r=e(this._element).closest(Ye)[0],o=l.getSelectorFromElement(this._element);if(r){var s="UL"===r.nodeName||"OL"===r.nodeName?Ve:ze;i=(i=e.makeArray(e(r).find(s)))[i.length-1]}var a=e.Event(Re.HIDE,{relatedTarget:this._element}),u=e.Event(Re.SHOW,{relatedTarget:i});if(i&&e(i).trigger(a),e(this._element).trigger(u),!u.isDefaultPrevented()&&!a.isDefaultPrevented()){o&&(n=document.querySelector(o)),this._activate(this._element,r);var c=function(){var n=e.Event(Re.HIDDEN,{relatedTarget:t._element}),r=e.Event(Re.SHOWN,{relatedTarget:i});e(i).trigger(n),e(t._element).trigger(r)};n?this._activate(n,n.parentNode,c):c()}}},n.dispose=function(){e.removeData(this._element,"bs.tab"),this._element=null},n._activate=function(t,n,i){var r=this,o=(!n||"UL"!==n.nodeName&&"OL"!==n.nodeName?e(n).children(ze):e(n).find(Ve))[0],s=i&&o&&e(o).hasClass(Ue),a=function(){return r._transitionComplete(t,o,i)};if(o&&s){var u=l.getTransitionDurationFromElement(o);e(o).removeClass(Be).one(l.TRANSITION_END,a).emulateTransitionEnd(u)}else a()},n._transitionComplete=function(t,n,i){if(n){e(n).removeClass(qe);var r=e(n.parentNode).find(Ke)[0];r&&e(r).removeClass(qe),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!1)}if(e(t).addClass(qe),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),l.reflow(t),t.classList.contains(Ue)&&t.classList.add(Be),t.parentNode&&e(t.parentNode).hasClass(He)){var o=e(t).closest(We)[0];if(o){var s=[].slice.call(o.querySelectorAll(Xe));e(s).addClass(qe)}t.setAttribute("aria-expanded",!0)}i&&i()},t._jQueryInterface=function(n){return this.each((function(){var i=e(this),r=i.data("bs.tab");if(r||(r=new t(this),i.data("bs.tab",r)),"string"==typeof n){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}}))},r(t,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),t}();e(document).on(Re.CLICK_DATA_API,$e,(function(t){t.preventDefault(),Ge._jQueryInterface.call(e(this),"show")})),e.fn.tab=Ge._jQueryInterface,e.fn.tab.Constructor=Ge,e.fn.tab.noConflict=function(){return e.fn.tab=je,Ge._jQueryInterface};var Qe=e.fn.toast,Ze={CLICK_DISMISS:"click.dismiss.bs.toast",HIDE:"hide.bs.toast",HIDDEN:"hidden.bs.toast",SHOW:"show.bs.toast",SHOWN:"shown.bs.toast"},Je="fade",tn="hide",en="show",nn="showing",rn={animation:"boolean",autohide:"boolean",delay:"number"},on={animation:!0,autohide:!0,delay:500},sn='[data-dismiss="toast"]',an=function(){function t(t,e){this._element=t,this._config=this._getConfig(e),this._timeout=null,this._setListeners()}var n=t.prototype;return n.show=function(){var t=this;e(this._element).trigger(Ze.SHOW),this._config.animation&&this._element.classList.add(Je);var n=function(){t._element.classList.remove(nn),t._element.classList.add(en),e(t._element).trigger(Ze.SHOWN),t._config.autohide&&t.hide()};if(this._element.classList.remove(tn),this._element.classList.add(nn),this._config.animation){var i=l.getTransitionDurationFromElement(this._element);e(this._element).one(l.TRANSITION_END,n).emulateTransitionEnd(i)}else n()},n.hide=function(t){var n=this;this._element.classList.contains(en)&&(e(this._element).trigger(Ze.HIDE),t?this._close():this._timeout=setTimeout((function(){n._close()}),this._config.delay))},n.dispose=function(){clearTimeout(this._timeout),this._timeout=null,this._element.classList.contains(en)&&this._element.classList.remove(en),e(this._element).off(Ze.CLICK_DISMISS),e.removeData(this._element,"bs.toast"),this._element=null,this._config=null},n._getConfig=function(t){return t=s({},on,e(this._element).data(),"object"==typeof t&&t?t:{}),l.typeCheckConfig("toast",t,this.constructor.DefaultType),t},n._setListeners=function(){var t=this;e(this._element).on(Ze.CLICK_DISMISS,sn,(function(){return t.hide(!0)}))},n._close=function(){var t=this,n=function(){t._element.classList.add(tn),e(t._element).trigger(Ze.HIDDEN)};if(this._element.classList.remove(en),this._config.animation){var i=l.getTransitionDurationFromElement(this._element);e(this._element).one(l.TRANSITION_END,n).emulateTransitionEnd(i)}else n()},t._jQueryInterface=function(n){return this.each((function(){var i=e(this),r=i.data("bs.toast");if(r||(r=new t(this,"object"==typeof n&&n),i.data("bs.toast",r)),"string"==typeof n){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n](this)}}))},r(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"DefaultType",get:function(){return rn}},{key:"Default",get:function(){return on}}]),t}();e.fn.toast=an._jQueryInterface,e.fn.toast.Constructor=an,e.fn.toast.noConflict=function(){return e.fn.toast=Qe,an._jQueryInterface},function(){if(void 0===e)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(),t.Util=l,t.Alert=g,t.Button=S,t.Carousel=$,t.Collapse=st,t.Dropdown=kt,t.Modal=Wt,t.Popover=Ee,t.Scrollspy=Pe,t.Tab=Ge,t.Toast=an,t.Tooltip=pe,Object.defineProperty(t,"__esModule",{value:!0})}(e,n(6),n(7))},function(t,e,n){var i;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,(function(n,r){"use strict";var o=[],s=n.document,a=Object.getPrototypeOf,u=o.slice,l=o.concat,c=o.push,h=o.indexOf,f={},p=f.toString,d=f.hasOwnProperty,g=d.toString,m=g.call(Object),v={},_=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},y=function(t){return null!=t&&t===t.window},b={type:!0,src:!0,nonce:!0,noModule:!0};function x(t,e,n){var i,r,o=(n=n||s).createElement("script");if(o.text=t,e)for(i in b)(r=e[i]||e.getAttribute&&e.getAttribute(i))&&o.setAttribute(i,r);n.head.appendChild(o).parentNode.removeChild(o)}function w(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?f[p.call(t)]||"object":typeof t}var T=function(t,e){return new T.fn.init(t,e)},E=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(t){var e=!!t&&"length"in t&&t.length,n=w(t);return!_(t)&&!y(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}T.fn=T.prototype={jquery:"3.4.1",constructor:T,length:0,toArray:function(){return u.call(this)},get:function(t){return null==t?u.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=T.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return T.each(this,t)},map:function(t){return this.pushStack(T.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},T.extend=T.fn.extend=function(){var t,e,n,i,r,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||_(s)||(s={}),a===u&&(s=this,a--);a<u;a++)if(null!=(t=arguments[a]))for(e in t)i=t[e],"__proto__"!==e&&s!==i&&(l&&i&&(T.isPlainObject(i)||(r=Array.isArray(i)))?(n=s[e],o=r&&!Array.isArray(n)?[]:r||T.isPlainObject(n)?n:{},r=!1,s[e]=T.extend(l,o,i)):void 0!==i&&(s[e]=i));return s},T.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==p.call(t))&&(!(e=a(t))||"function"==typeof(n=d.call(e,"constructor")&&e.constructor)&&g.call(n)===m)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e){x(t,{nonce:e&&e.nonce})},each:function(t,e){var n,i=0;if(C(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace(E,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(C(Object(t))?T.merge(n,"string"==typeof t?[t]:t):c.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:h.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;i<n;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i=[],r=0,o=t.length,s=!n;r<o;r++)!e(t[r],r)!==s&&i.push(t[r]);return i},map:function(t,e,n){var i,r,o=0,s=[];if(C(t))for(i=t.length;o<i;o++)null!=(r=e(t[o],o,n))&&s.push(r);else for(o in t)null!=(r=e(t[o],o,n))&&s.push(r);return l.apply([],s)},guid:1,support:v}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=o[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){f["[object "+e+"]"]=e.toLowerCase()}));var S=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(t){var e,n,i,r,o,s,a,u,l,c,h,f,p,d,g,m,v,_,y,b="sizzle"+1*new Date,x=t.document,w=0,T=0,E=ut(),C=ut(),S=ut(),N=ut(),A=function(t,e){return t===e&&(h=!0),0},D={}.hasOwnProperty,M=[],k=M.pop,I=M.push,O=M.push,L=M.slice,P=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},j="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",q="\\["+R+"*("+H+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+R+"*\\]",F=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+q+")*)|.*)\\)|)",U=new RegExp(R+"+","g"),B=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),W=new RegExp("^"+R+"*,"+R+"*"),Y=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),z=new RegExp(R+"|>"),V=new RegExp(F),$=new RegExp("^"+H+"$"),X={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+q),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+j+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\([\\da-f]{1,6}"+R+"?|("+R+")|.)","ig"),nt=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},it=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,rt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},ot=function(){f()},st=bt((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{O.apply(M=L.call(x.childNodes),x.childNodes),M[x.childNodes.length].nodeType}catch(t){O={apply:M.length?function(t,e){I.apply(t,L.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function at(t,e,i,r){var o,a,l,c,h,d,v,_=e&&e.ownerDocument,w=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==w&&9!==w&&11!==w)return i;if(!r&&((e?e.ownerDocument||e:x)!==p&&f(e),e=e||p,g)){if(11!==w&&(h=J.exec(t)))if(o=h[1]){if(9===w){if(!(l=e.getElementById(o)))return i;if(l.id===o)return i.push(l),i}else if(_&&(l=_.getElementById(o))&&y(e,l)&&l.id===o)return i.push(l),i}else{if(h[2])return O.apply(i,e.getElementsByTagName(t)),i;if((o=h[3])&&n.getElementsByClassName&&e.getElementsByClassName)return O.apply(i,e.getElementsByClassName(o)),i}if(n.qsa&&!N[t+" "]&&(!m||!m.test(t))&&(1!==w||"object"!==e.nodeName.toLowerCase())){if(v=t,_=e,1===w&&z.test(t)){for((c=e.getAttribute("id"))?c=c.replace(it,rt):e.setAttribute("id",c=b),a=(d=s(t)).length;a--;)d[a]="#"+c+" "+yt(d[a]);v=d.join(","),_=tt.test(t)&&vt(e.parentNode)||e}try{return O.apply(i,_.querySelectorAll(v)),i}catch(e){N(t,!0)}finally{c===b&&e.removeAttribute("id")}}}return u(t.replace(B,"$1"),e,i,r)}function ut(){var t=[];return function e(n,r){return t.push(n+" ")>i.cacheLength&&delete e[t.shift()],e[n+" "]=r}}function lt(t){return t[b]=!0,t}function ct(t){var e=p.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ht(t,e){for(var n=t.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=e}function ft(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function pt(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function dt(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function gt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&st(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function mt(t){return lt((function(e){return e=+e,lt((function(n,i){for(var r,o=t([],n.length,e),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))}))}))}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=at.support={},o=at.isXML=function(t){var e=t.namespaceURI,n=(t.ownerDocument||t).documentElement;return!K.test(e||n&&n.nodeName||"HTML")},f=at.setDocument=function(t){var e,r,s=t?t.ownerDocument||t:x;return s!==p&&9===s.nodeType&&s.documentElement?(d=(p=s).documentElement,g=!o(p),x!==p&&(r=p.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ot,!1):r.attachEvent&&r.attachEvent("onunload",ot)),n.attributes=ct((function(t){return t.className="i",!t.getAttribute("className")})),n.getElementsByTagName=ct((function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length})),n.getElementsByClassName=Z.test(p.getElementsByClassName),n.getById=ct((function(t){return d.appendChild(t).id=b,!p.getElementsByName||!p.getElementsByName(b).length})),n.getById?(i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){return t.getAttribute("id")===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n=e.getElementById(t);return n?[n]:[]}}):(i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n,i,r,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(r=e.getElementsByName(t),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},v=[],m=[],(n.qsa=Z.test(p.querySelectorAll))&&(ct((function(t){d.appendChild(t).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+R+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+R+"*(?:value|"+j+")"),t.querySelectorAll("[id~="+b+"-]").length||m.push("~="),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+b+"+*").length||m.push(".#.+[+~]")})),ct((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+R+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),d.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=Z.test(_=d.matches||d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&ct((function(t){n.disconnectedMatch=_.call(t,"*"),_.call(t,"[s!='']:x"),v.push("!=",F)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),e=Z.test(d.compareDocumentPosition),y=e||Z.test(d.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},A=e?function(t,e){if(t===e)return h=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===i?t===p||t.ownerDocument===x&&y(x,t)?-1:e===p||e.ownerDocument===x&&y(x,e)?1:c?P(c,t)-P(c,e):0:4&i?-1:1)}:function(t,e){if(t===e)return h=!0,0;var n,i=0,r=t.parentNode,o=e.parentNode,s=[t],a=[e];if(!r||!o)return t===p?-1:e===p?1:r?-1:o?1:c?P(c,t)-P(c,e):0;if(r===o)return ft(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?ft(s[i],a[i]):s[i]===x?-1:a[i]===x?1:0},p):p},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if((t.ownerDocument||t)!==p&&f(t),n.matchesSelector&&g&&!N[e+" "]&&(!v||!v.test(e))&&(!m||!m.test(e)))try{var i=_.call(t,e);if(i||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){N(e,!0)}return at(e,p,null,[t]).length>0},at.contains=function(t,e){return(t.ownerDocument||t)!==p&&f(t),y(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!==p&&f(t);var r=i.attrHandle[e.toLowerCase()],o=r&&D.call(i.attrHandle,e.toLowerCase())?r(t,e,!g):void 0;return void 0!==o?o:n.attributes||!g?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},at.escape=function(t){return(t+"").replace(it,rt)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,i=[],r=0,o=0;if(h=!n.detectDuplicates,c=!n.sortStable&&t.slice(0),t.sort(A),h){for(;e=t[o++];)e===t[o]&&(r=i.push(o));for(;r--;)t.splice(i[r],1)}return c=null,t},r=at.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=r(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=r(e);return n},(i=at.selectors={cacheLength:50,createPseudo:lt,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,nt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,nt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return X.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&V.test(n)&&(e=s(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,nt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=E[t+" "];return e||(e=new RegExp("(^|"+R+")"+t+"("+R+"|$)"))&&E(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(i){var r=at.attr(i,t);return null==r?"!="===e:!e||(r+="","="===e?r===n:"!="===e?r!==n:"^="===e?n&&0===r.indexOf(n):"*="===e?n&&r.indexOf(n)>-1:"$="===e?n&&r.slice(-n.length)===n:"~="===e?(" "+r.replace(U," ")+" ").indexOf(n)>-1:"|="===e&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,u){var l,c,h,f,p,d,g=o!==s?"nextSibling":"previousSibling",m=e.parentNode,v=a&&e.nodeName.toLowerCase(),_=!u&&!a,y=!1;if(m){if(o){for(;g;){for(f=e;f=f[g];)if(a?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;d=g="only"===t&&!d&&"nextSibling"}return!0}if(d=[s?m.firstChild:m.lastChild],s&&_){for(y=(p=(l=(c=(h=(f=m)[b]||(f[b]={}))[f.uniqueID]||(h[f.uniqueID]={}))[t]||[])[0]===w&&l[1])&&l[2],f=p&&m.childNodes[p];f=++p&&f&&f[g]||(y=p=0)||d.pop();)if(1===f.nodeType&&++y&&f===e){c[t]=[w,p,y];break}}else if(_&&(y=p=(l=(c=(h=(f=e)[b]||(f[b]={}))[f.uniqueID]||(h[f.uniqueID]={}))[t]||[])[0]===w&&l[1]),!1===y)for(;(f=++p&&f&&f[g]||(y=p=0)||d.pop())&&((a?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++y||(_&&((c=(h=f[b]||(f[b]={}))[f.uniqueID]||(h[f.uniqueID]={}))[t]=[w,y]),f!==e)););return(y-=r)===i||y%i==0&&y/i>=0}}},PSEUDO:function(t,e){var n,r=i.pseudos[t]||i.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return r[b]?r(e):r.length>1?(n=[t,t,"",e],i.setFilters.hasOwnProperty(t.toLowerCase())?lt((function(t,n){for(var i,o=r(t,e),s=o.length;s--;)t[i=P(t,o[s])]=!(n[i]=o[s])})):function(t){return r(t,0,n)}):r}},pseudos:{not:lt((function(t){var e=[],n=[],i=a(t.replace(B,"$1"));return i[b]?lt((function(t,e,n,r){for(var o,s=i(t,null,r,[]),a=t.length;a--;)(o=s[a])&&(t[a]=!(e[a]=o))})):function(t,r,o){return e[0]=t,i(e,null,o,n),e[0]=null,!n.pop()}})),has:lt((function(t){return function(e){return at(t,e).length>0}})),contains:lt((function(t){return t=t.replace(et,nt),function(e){return(e.textContent||r(e)).indexOf(t)>-1}})),lang:lt((function(t){return $.test(t||"")||at.error("unsupported lang: "+t),t=t.replace(et,nt).toLowerCase(),function(e){var n;do{if(n=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===d},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!i.pseudos.empty(t)},header:function(t){return Q.test(t.nodeName)},input:function(t){return G.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:mt((function(){return[0]})),last:mt((function(t,e){return[e-1]})),eq:mt((function(t,e,n){return[n<0?n+e:n]})),even:mt((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:mt((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:mt((function(t,e,n){for(var i=n<0?n+e:n>e?e:n;--i>=0;)t.push(i);return t})),gt:mt((function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t}))}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[e]=pt(e);for(e in{submit:!0,reset:!0})i.pseudos[e]=dt(e);function _t(){}function yt(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function bt(t,e,n){var i=e.dir,r=e.next,o=r||i,s=n&&"parentNode"===o,a=T++;return e.first?function(e,n,r){for(;e=e[i];)if(1===e.nodeType||s)return t(e,n,r);return!1}:function(e,n,u){var l,c,h,f=[w,a];if(u){for(;e=e[i];)if((1===e.nodeType||s)&&t(e,n,u))return!0}else for(;e=e[i];)if(1===e.nodeType||s)if(c=(h=e[b]||(e[b]={}))[e.uniqueID]||(h[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[i]||e;else{if((l=c[o])&&l[0]===w&&l[1]===a)return f[2]=l[2];if(c[o]=f,f[2]=t(e,n,u))return!0}return!1}}function xt(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function wt(t,e,n,i,r){for(var o,s=[],a=0,u=t.length,l=null!=e;a<u;a++)(o=t[a])&&(n&&!n(o,i,r)||(s.push(o),l&&e.push(a)));return s}function Tt(t,e,n,i,r,o){return i&&!i[b]&&(i=Tt(i)),r&&!r[b]&&(r=Tt(r,o)),lt((function(o,s,a,u){var l,c,h,f=[],p=[],d=s.length,g=o||function(t,e,n){for(var i=0,r=e.length;i<r;i++)at(t,e[i],n);return n}(e||"*",a.nodeType?[a]:a,[]),m=!t||!o&&e?g:wt(g,f,t,a,u),v=n?r||(o?t:d||i)?[]:s:m;if(n&&n(m,v,a,u),i)for(l=wt(v,p),i(l,[],a,u),c=l.length;c--;)(h=l[c])&&(v[p[c]]=!(m[p[c]]=h));if(o){if(r||t){if(r){for(l=[],c=v.length;c--;)(h=v[c])&&l.push(m[c]=h);r(null,v=[],l,u)}for(c=v.length;c--;)(h=v[c])&&(l=r?P(o,h):f[c])>-1&&(o[l]=!(s[l]=h))}}else v=wt(v===s?v.splice(d,v.length):v),r?r(null,s,v,u):O.apply(s,v)}))}function Et(t){for(var e,n,r,o=t.length,s=i.relative[t[0].type],a=s||i.relative[" "],u=s?1:0,c=bt((function(t){return t===e}),a,!0),h=bt((function(t){return P(e,t)>-1}),a,!0),f=[function(t,n,i){var r=!s&&(i||n!==l)||((e=n).nodeType?c(t,n,i):h(t,n,i));return e=null,r}];u<o;u++)if(n=i.relative[t[u].type])f=[bt(xt(f),n)];else{if((n=i.filter[t[u].type].apply(null,t[u].matches))[b]){for(r=++u;r<o&&!i.relative[t[r].type];r++);return Tt(u>1&&xt(f),u>1&&yt(t.slice(0,u-1).concat({value:" "===t[u-2].type?"*":""})).replace(B,"$1"),n,u<r&&Et(t.slice(u,r)),r<o&&Et(t=t.slice(r)),r<o&&yt(t))}f.push(n)}return xt(f)}return _t.prototype=i.filters=i.pseudos,i.setFilters=new _t,s=at.tokenize=function(t,e){var n,r,o,s,a,u,l,c=C[t+" "];if(c)return e?0:c.slice(0);for(a=t,u=[],l=i.preFilter;a;){for(s in n&&!(r=W.exec(a))||(r&&(a=a.slice(r[0].length)||a),u.push(o=[])),n=!1,(r=Y.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace(B," ")}),a=a.slice(n.length)),i.filter)!(r=X[s].exec(a))||l[s]&&!(r=l[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return e?a.length:a?at.error(t):C(t,u).slice(0)},a=at.compile=function(t,e){var n,r=[],o=[],a=S[t+" "];if(!a){for(e||(e=s(t)),n=e.length;n--;)(a=Et(e[n]))[b]?r.push(a):o.push(a);(a=S(t,function(t,e){var n=e.length>0,r=t.length>0,o=function(o,s,a,u,c){var h,d,m,v=0,_="0",y=o&&[],b=[],x=l,T=o||r&&i.find.TAG("*",c),E=w+=null==x?1:Math.random()||.1,C=T.length;for(c&&(l=s===p||s||c);_!==C&&null!=(h=T[_]);_++){if(r&&h){for(d=0,s||h.ownerDocument===p||(f(h),a=!g);m=t[d++];)if(m(h,s||p,a)){u.push(h);break}c&&(w=E)}n&&((h=!m&&h)&&v--,o&&y.push(h))}if(v+=_,n&&_!==v){for(d=0;m=e[d++];)m(y,b,s,a);if(o){if(v>0)for(;_--;)y[_]||b[_]||(b[_]=k.call(u));b=wt(b)}O.apply(u,b),c&&!o&&b.length>0&&v+e.length>1&&at.uniqueSort(u)}return c&&(w=E,l=x),y};return n?lt(o):o}(o,r))).selector=t}return a},u=at.select=function(t,e,n,r){var o,u,l,c,h,f="function"==typeof t&&t,p=!r&&s(t=f.selector||t);if(n=n||[],1===p.length){if((u=p[0]=p[0].slice(0)).length>2&&"ID"===(l=u[0]).type&&9===e.nodeType&&g&&i.relative[u[1].type]){if(!(e=(i.find.ID(l.matches[0].replace(et,nt),e)||[])[0]))return n;f&&(e=e.parentNode),t=t.slice(u.shift().value.length)}for(o=X.needsContext.test(t)?0:u.length;o--&&(l=u[o],!i.relative[c=l.type]);)if((h=i.find[c])&&(r=h(l.matches[0].replace(et,nt),tt.test(u[0].type)&&vt(e.parentNode)||e))){if(u.splice(o,1),!(t=r.length&&yt(u)))return O.apply(n,r),n;break}}return(f||a(t,p))(r,e,!g,n,!e||tt.test(t)&&vt(e.parentNode)||e),n},n.sortStable=b.split("").sort(A).join("")===b,n.detectDuplicates=!!h,f(),n.sortDetached=ct((function(t){return 1&t.compareDocumentPosition(p.createElement("fieldset"))})),ct((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||ht("type|href|height|width",(function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),n.attributes&&ct((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||ht("value",(function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),ct((function(t){return null==t.getAttribute("disabled")}))||ht(j,(function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null})),at}(n);T.find=S,T.expr=S.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=S.uniqueSort,T.text=S.getText,T.isXMLDoc=S.isXML,T.contains=S.contains,T.escapeSelector=S.escape;var N=function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&T(t).is(n))break;i.push(t)}return i},A=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},D=T.expr.match.needsContext;function M(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var k=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function I(t,e,n){return _(e)?T.grep(t,(function(t,i){return!!e.call(t,i,t)!==n})):e.nodeType?T.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?T.grep(t,(function(t){return h.call(e,t)>-1!==n})):T.filter(e,t,n)}T.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?T.find.matchesSelector(i,t)?[i]:[]:T.find.matches(t,T.grep(e,(function(t){return 1===t.nodeType})))},T.fn.extend({find:function(t){var e,n,i=this.length,r=this;if("string"!=typeof t)return this.pushStack(T(t).filter((function(){for(e=0;e<i;e++)if(T.contains(r[e],this))return!0})));for(n=this.pushStack([]),e=0;e<i;e++)T.find(t,r[e],n);return i>1?T.uniqueSort(n):n},filter:function(t){return this.pushStack(I(this,t||[],!1))},not:function(t){return this.pushStack(I(this,t||[],!0))},is:function(t){return!!I(this,"string"==typeof t&&D.test(t)?T(t):t||[],!1).length}});var O,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(t,e,n){var i,r;if(!t)return this;if(n=n||O,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:L.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof T?e[0]:e,T.merge(this,T.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:s,!0)),k.test(i[1])&&T.isPlainObject(e))for(i in e)_(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(r=s.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):_(t)?void 0!==n.ready?n.ready(t):t(T):T.makeArray(t,this)}).prototype=T.fn,O=T(s);var P=/^(?:parents|prev(?:Until|All))/,j={children:!0,contents:!0,next:!0,prev:!0};function R(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}T.fn.extend({has:function(t){var e=T(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(T.contains(this,e[t]))return!0}))},closest:function(t,e){var n,i=0,r=this.length,o=[],s="string"!=typeof t&&T(t);if(!D.test(t))for(;i<r;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&T.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?T.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?h.call(T(t),this[0]):h.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),T.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return N(t,"parentNode")},parentsUntil:function(t,e,n){return N(t,"parentNode",n)},next:function(t){return R(t,"nextSibling")},prev:function(t){return R(t,"previousSibling")},nextAll:function(t){return N(t,"nextSibling")},prevAll:function(t){return N(t,"previousSibling")},nextUntil:function(t,e,n){return N(t,"nextSibling",n)},prevUntil:function(t,e,n){return N(t,"previousSibling",n)},siblings:function(t){return A((t.parentNode||{}).firstChild,t)},children:function(t){return A(t.firstChild)},contents:function(t){return void 0!==t.contentDocument?t.contentDocument:(M(t,"template")&&(t=t.content||t),T.merge([],t.childNodes))}},(function(t,e){T.fn[t]=function(n,i){var r=T.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=T.filter(i,r)),this.length>1&&(j[t]||T.uniqueSort(r),P.test(t)&&r.reverse()),this.pushStack(r)}}));var H=/[^\x20\t\r\n\f]+/g;function q(t){return t}function F(t){throw t}function U(t,e,n,i){var r;try{t&&_(r=t.promise)?r.call(t).done(e).fail(n):t&&_(r=t.then)?r.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}T.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return T.each(t.match(H)||[],(function(t,n){e[n]=!0})),e}(t):T.extend({},t);var e,n,i,r,o=[],s=[],a=-1,u=function(){for(r=r||t.once,i=e=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&t.stopOnFalse&&(a=o.length,n=!1);t.memory||(n=!1),e=!1,r&&(o=n?[]:"")},l={add:function(){return o&&(n&&!e&&(a=o.length-1,s.push(n)),function e(n){T.each(n,(function(n,i){_(i)?t.unique&&l.has(i)||o.push(i):i&&i.length&&"string"!==w(i)&&e(i)}))}(arguments),n&&!e&&u()),this},remove:function(){return T.each(arguments,(function(t,e){for(var n;(n=T.inArray(e,o,n))>-1;)o.splice(n,1),n<=a&&a--})),this},has:function(t){return t?T.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||e||(o=n=""),this},locked:function(){return!!r},fireWith:function(t,n){return r||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!i}};return l},T.extend({Deferred:function(t){var e=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var t=arguments;return T.Deferred((function(n){T.each(e,(function(e,i){var r=_(t[i[4]])&&t[i[4]];o[i[1]]((function(){var t=r&&r.apply(this,arguments);t&&_(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[t]:arguments)}))})),t=null})).promise()},then:function(t,i,r){var o=0;function s(t,e,i,r){return function(){var a=this,u=arguments,l=function(){var n,l;if(!(t<o)){if((n=i.apply(a,u))===e.promise())throw new TypeError("Thenable self-resolution");l=n&&("object"==typeof n||"function"==typeof n)&&n.then,_(l)?r?l.call(n,s(o,e,q,r),s(o,e,F,r)):(o++,l.call(n,s(o,e,q,r),s(o,e,F,r),s(o,e,q,e.notifyWith))):(i!==q&&(a=void 0,u=[n]),(r||e.resolveWith)(a,u))}},c=r?l:function(){try{l()}catch(n){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(n,c.stackTrace),t+1>=o&&(i!==F&&(a=void 0,u=[n]),e.rejectWith(a,u))}};t?c():(T.Deferred.getStackHook&&(c.stackTrace=T.Deferred.getStackHook()),n.setTimeout(c))}}return T.Deferred((function(n){e[0][3].add(s(0,n,_(r)?r:q,n.notifyWith)),e[1][3].add(s(0,n,_(t)?t:q)),e[2][3].add(s(0,n,_(i)?i:F))})).promise()},promise:function(t){return null!=t?T.extend(t,r):r}},o={};return T.each(e,(function(t,n){var s=n[2],a=n[5];r[n[1]]=s.add,a&&s.add((function(){i=a}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),s.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=s.fireWith})),r.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,i=Array(n),r=u.call(arguments),o=T.Deferred(),s=function(t){return function(n){i[t]=this,r[t]=arguments.length>1?u.call(arguments):n,--e||o.resolveWith(i,r)}};if(e<=1&&(U(t,o.done(s(n)).resolve,o.reject,!e),"pending"===o.state()||_(r[n]&&r[n].then)))return o.then();for(;n--;)U(r[n],s(n),o.reject);return o.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&B.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},T.readyException=function(t){n.setTimeout((function(){throw t}))};var W=T.Deferred();function Y(){s.removeEventListener("DOMContentLoaded",Y),n.removeEventListener("load",Y),T.ready()}T.fn.ready=function(t){return W.then(t).catch((function(t){T.readyException(t)})),this},T.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--T.readyWait:T.isReady)||(T.isReady=!0,!0!==t&&--T.readyWait>0||W.resolveWith(s,[T]))}}),T.ready.then=W.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?n.setTimeout(T.ready):(s.addEventListener("DOMContentLoaded",Y),n.addEventListener("load",Y));var z=function(t,e,n,i,r,o,s){var a=0,u=t.length,l=null==n;if("object"===w(n))for(a in r=!0,n)z(t,e,a,n[a],!0,o,s);else if(void 0!==i&&(r=!0,_(i)||(s=!0),l&&(s?(e.call(t,i),e=null):(l=e,e=function(t,e,n){return l.call(T(t),n)})),e))for(;a<u;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return r?t:l?e.call(t):u?e(t[0],n):o},V=/^-ms-/,$=/-([a-z])/g;function X(t,e){return e.toUpperCase()}function K(t){return t.replace(V,"ms-").replace($,X)}var G=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function Q(){this.expando=T.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(t){var e=t[this.expando];return e||(e={},G(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,r=this.cache(t);if("string"==typeof e)r[K(e)]=n;else for(i in e)r[K(i)]=e[i];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][K(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(K):(e=K(e))in i?[e]:e.match(H)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||T.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!T.isEmptyObject(e)}};var Z=new Q,J=new Q,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}J.set(t,e,n)}else n=void 0;return n}T.extend({hasData:function(t){return J.hasData(t)||Z.hasData(t)},data:function(t,e,n){return J.access(t,e,n)},removeData:function(t,e){J.remove(t,e)},_data:function(t,e,n){return Z.access(t,e,n)},_removeData:function(t,e){Z.remove(t,e)}}),T.fn.extend({data:function(t,e){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(r=J.get(o),1===o.nodeType&&!Z.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=K(i.slice(5)),nt(o,i,r[i]));Z.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each((function(){J.set(this,t)})):z(this,(function(e){var n;if(o&&void 0===e)return void 0!==(n=J.get(o,t))?n:void 0!==(n=nt(o,t))?n:void 0;this.each((function(){J.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){J.remove(this,t)}))}}),T.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=Z.get(t,e),n&&(!i||Array.isArray(n)?i=Z.access(t,e,T.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=T.queue(t,e),i=n.length,r=n.shift(),o=T._queueHooks(t,e);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,(function(){T.dequeue(t,e)}),o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Z.get(t,n)||Z.access(t,n,{empty:T.Callbacks("once memory").add((function(){Z.remove(t,[e+"queue",n])}))})}}),T.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?T.queue(this[0],t):void 0===e?this:this.each((function(){var n=T.queue(this,t,e);T._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&T.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){T.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=T.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=Z.get(o[s],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(e)}});var it=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,rt=new RegExp("^(?:([+-])=|)("+it+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],st=s.documentElement,at=function(t){return T.contains(t.ownerDocument,t)},ut={composed:!0};st.getRootNode&&(at=function(t){return T.contains(t.ownerDocument,t)||t.getRootNode(ut)===t.ownerDocument});var lt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&at(t)&&"none"===T.css(t,"display")},ct=function(t,e,n,i){var r,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];for(o in r=n.apply(t,i||[]),e)t.style[o]=s[o];return r};function ht(t,e,n,i){var r,o,s=20,a=i?function(){return i.cur()}:function(){return T.css(t,e,"")},u=a(),l=n&&n[3]||(T.cssNumber[e]?"":"px"),c=t.nodeType&&(T.cssNumber[e]||"px"!==l&&+u)&&rt.exec(T.css(t,e));if(c&&c[3]!==l){for(u/=2,l=l||c[3],c=+u||1;s--;)T.style(t,e,c+l),(1-o)*(1-(o=a()/u||.5))<=0&&(s=0),c/=o;c*=2,T.style(t,e,c+l),n=n||[]}return n&&(c=+c||+u||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=l,i.start=c,i.end=r)),r}var ft={};function pt(t){var e,n=t.ownerDocument,i=t.nodeName,r=ft[i];return r||(e=n.body.appendChild(n.createElement(i)),r=T.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),ft[i]=r,r)}function dt(t,e){for(var n,i,r=[],o=0,s=t.length;o<s;o++)(i=t[o]).style&&(n=i.style.display,e?("none"===n&&(r[o]=Z.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&lt(i)&&(r[o]=pt(i))):"none"!==n&&(r[o]="none",Z.set(i,"display",n)));for(o=0;o<s;o++)null!=r[o]&&(t[o].style.display=r[o]);return t}T.fn.extend({show:function(){return dt(this,!0)},hide:function(){return dt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){lt(this)?T(this).show():T(this).hide()}))}});var gt=/^(?:checkbox|radio)$/i,mt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,vt=/^$|^module$|\/(?:java|ecma)script/i,_t={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function yt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&M(t,e)?T.merge([t],n):n}function bt(t,e){for(var n=0,i=t.length;n<i;n++)Z.set(t[n],"globalEval",!e||Z.get(e[n],"globalEval"))}_t.optgroup=_t.option,_t.tbody=_t.tfoot=_t.colgroup=_t.caption=_t.thead,_t.th=_t.td;var xt,wt,Tt=/<|&#?\w+;/;function Et(t,e,n,i,r){for(var o,s,a,u,l,c,h=e.createDocumentFragment(),f=[],p=0,d=t.length;p<d;p++)if((o=t[p])||0===o)if("object"===w(o))T.merge(f,o.nodeType?[o]:o);else if(Tt.test(o)){for(s=s||h.appendChild(e.createElement("div")),a=(mt.exec(o)||["",""])[1].toLowerCase(),u=_t[a]||_t._default,s.innerHTML=u[1]+T.htmlPrefilter(o)+u[2],c=u[0];c--;)s=s.lastChild;T.merge(f,s.childNodes),(s=h.firstChild).textContent=""}else f.push(e.createTextNode(o));for(h.textContent="",p=0;o=f[p++];)if(i&&T.inArray(o,i)>-1)r&&r.push(o);else if(l=at(o),s=yt(h.appendChild(o),"script"),l&&bt(s),n)for(c=0;o=s[c++];)vt.test(o.type||"")&&n.push(o);return h}xt=s.createDocumentFragment().appendChild(s.createElement("div")),(wt=s.createElement("input")).setAttribute("type","radio"),wt.setAttribute("checked","checked"),wt.setAttribute("name","t"),xt.appendChild(wt),v.checkClone=xt.cloneNode(!0).cloneNode(!0).lastChild.checked,xt.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!xt.cloneNode(!0).lastChild.defaultValue;var Ct=/^key/,St=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Nt=/^([^.]*)(?:\.(.+)|)/;function At(){return!0}function Dt(){return!1}function Mt(t,e){return t===function(){try{return s.activeElement}catch(t){}}()==("focus"===e)}function kt(t,e,n,i,r,o){var s,a;if("object"==typeof e){for(a in"string"!=typeof n&&(i=i||n,n=void 0),e)kt(t,a,n,i,e[a],o);return t}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Dt;else if(!r)return t;return 1===o&&(s=r,(r=function(t){return T().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=T.guid++)),t.each((function(){T.event.add(this,e,r,i,n)}))}function It(t,e,n){n?(Z.set(t,e,!1),T.event.add(t,e,{namespace:!1,handler:function(t){var i,r,o=Z.get(this,e);if(1&t.isTrigger&&this[e]){if(o.length)(T.event.special[e]||{}).delegateType&&t.stopPropagation();else if(o=u.call(arguments),Z.set(this,e,o),i=n(this,e),this[e](),o!==(r=Z.get(this,e))||i?Z.set(this,e,!1):r={},o!==r)return t.stopImmediatePropagation(),t.preventDefault(),r.value}else o.length&&(Z.set(this,e,{value:T.event.trigger(T.extend(o[0],T.Event.prototype),o.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===Z.get(t,e)&&T.event.add(t,e,At)}T.event={global:{},add:function(t,e,n,i,r){var o,s,a,u,l,c,h,f,p,d,g,m=Z.get(t);if(m)for(n.handler&&(n=(o=n).handler,r=o.selector),r&&T.find.matchesSelector(st,r),n.guid||(n.guid=T.guid++),(u=m.events)||(u=m.events={}),(s=m.handle)||(s=m.handle=function(e){return void 0!==T&&T.event.triggered!==e.type?T.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(H)||[""]).length;l--;)p=g=(a=Nt.exec(e[l])||[])[1],d=(a[2]||"").split(".").sort(),p&&(h=T.event.special[p]||{},p=(r?h.delegateType:h.bindType)||p,h=T.event.special[p]||{},c=T.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&T.expr.match.needsContext.test(r),namespace:d.join(".")},o),(f=u[p])||((f=u[p]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(t,i,d,s)||t.addEventListener&&t.addEventListener(p,s)),h.add&&(h.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,c):f.push(c),T.event.global[p]=!0)},remove:function(t,e,n,i,r){var o,s,a,u,l,c,h,f,p,d,g,m=Z.hasData(t)&&Z.get(t);if(m&&(u=m.events)){for(l=(e=(e||"").match(H)||[""]).length;l--;)if(p=g=(a=Nt.exec(e[l])||[])[1],d=(a[2]||"").split(".").sort(),p){for(h=T.event.special[p]||{},f=u[p=(i?h.delegateType:h.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=f.length;o--;)c=f[o],!r&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,h.remove&&h.remove.call(t,c));s&&!f.length&&(h.teardown&&!1!==h.teardown.call(t,d,m.handle)||T.removeEvent(t,p,m.handle),delete u[p])}else for(p in u)T.event.remove(t,p+e[l],n,i,!0);T.isEmptyObject(u)&&Z.remove(t,"handle events")}},dispatch:function(t){var e,n,i,r,o,s,a=T.event.fix(t),u=new Array(arguments.length),l=(Z.get(this,"events")||{})[a.type]||[],c=T.event.special[a.type]||{};for(u[0]=a,e=1;e<arguments.length;e++)u[e]=arguments[e];if(a.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,a)){for(s=T.event.handlers.call(this,a,l),e=0;(r=s[e++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==o.namespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(i=((T.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,u))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,r,o,s,a=[],u=e.delegateCount,l=t.target;if(u&&l.nodeType&&!("click"===t.type&&t.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==t.type||!0!==l.disabled)){for(o=[],s={},n=0;n<u;n++)void 0===s[r=(i=e[n]).selector+" "]&&(s[r]=i.needsContext?T(r,this).index(l)>-1:T.find(r,this,null,[l]).length),s[r]&&o.push(i);o.length&&a.push({elem:l,handlers:o})}return l=this,u<e.length&&a.push({elem:l,handlers:e.slice(u)}),a},addProp:function(t,e){Object.defineProperty(T.Event.prototype,t,{enumerable:!0,configurable:!0,get:_(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[T.expando]?t:new T.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return gt.test(e.type)&&e.click&&M(e,"input")&&It(e,"click",At),!1},trigger:function(t){var e=this||t;return gt.test(e.type)&&e.click&&M(e,"input")&&It(e,"click"),!0},_default:function(t){var e=t.target;return gt.test(e.type)&&e.click&&M(e,"input")&&Z.get(e,"click")||M(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},T.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},T.Event=function(t,e){if(!(this instanceof T.Event))return new T.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?At:Dt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&T.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:Dt,isPropagationStopped:Dt,isImmediatePropagationStopped:Dt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=At,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=At,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=At,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Ct.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&St.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},(function(t,e){T.event.special[t]={setup:function(){return It(this,t,Mt),!1},trigger:function(){return It(this,t),!0},delegateType:e}})),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){T.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,r=t.relatedTarget,o=t.handleObj;return r&&(r===i||T.contains(i,r))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}})),T.fn.extend({on:function(t,e,n,i){return kt(this,t,e,n,i)},one:function(t,e,n,i){return kt(this,t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,T(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Dt),this.each((function(){T.event.remove(this,t,n,e)}))}});var Ot=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Lt=/<script|<style|<link/i,Pt=/checked\s*(?:[^=]|=\s*.checked.)/i,jt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Rt(t,e){return M(t,"table")&&M(11!==e.nodeType?e:e.firstChild,"tr")&&T(t).children("tbody")[0]||t}function Ht(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function qt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Ft(t,e){var n,i,r,o,s,a,u,l;if(1===e.nodeType){if(Z.hasData(t)&&(o=Z.access(t),s=Z.set(e,o),l=o.events))for(r in delete s.handle,s.events={},l)for(n=0,i=l[r].length;n<i;n++)T.event.add(e,r,l[r][n]);J.hasData(t)&&(a=J.access(t),u=T.extend({},a),J.set(e,u))}}function Ut(t,e){var n=e.nodeName.toLowerCase();"input"===n&&gt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function Bt(t,e,n,i){e=l.apply([],e);var r,o,s,a,u,c,h=0,f=t.length,p=f-1,d=e[0],g=_(d);if(g||f>1&&"string"==typeof d&&!v.checkClone&&Pt.test(d))return t.each((function(r){var o=t.eq(r);g&&(e[0]=d.call(this,r,o.html())),Bt(o,e,n,i)}));if(f&&(o=(r=Et(e,t[0].ownerDocument,!1,t,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(a=(s=T.map(yt(r,"script"),Ht)).length;h<f;h++)u=r,h!==p&&(u=T.clone(u,!0,!0),a&&T.merge(s,yt(u,"script"))),n.call(t[h],u,h);if(a)for(c=s[s.length-1].ownerDocument,T.map(s,qt),h=0;h<a;h++)u=s[h],vt.test(u.type||"")&&!Z.access(u,"globalEval")&&T.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?T._evalUrl&&!u.noModule&&T._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")}):x(u.textContent.replace(jt,""),u,c))}return t}function Wt(t,e,n){for(var i,r=e?T.filter(e,t):t,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||T.cleanData(yt(i)),i.parentNode&&(n&&at(i)&&bt(yt(i,"script")),i.parentNode.removeChild(i));return t}T.extend({htmlPrefilter:function(t){return t.replace(Ot,"<$1></$2>")},clone:function(t,e,n){var i,r,o,s,a=t.cloneNode(!0),u=at(t);if(!(v.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||T.isXMLDoc(t)))for(s=yt(a),i=0,r=(o=yt(t)).length;i<r;i++)Ut(o[i],s[i]);if(e)if(n)for(o=o||yt(t),s=s||yt(a),i=0,r=o.length;i<r;i++)Ft(o[i],s[i]);else Ft(t,a);return(s=yt(a,"script")).length>0&&bt(s,!u&&yt(t,"script")),a},cleanData:function(t){for(var e,n,i,r=T.event.special,o=0;void 0!==(n=t[o]);o++)if(G(n)){if(e=n[Z.expando]){if(e.events)for(i in e.events)r[i]?T.event.remove(n,i):T.removeEvent(n,i,e.handle);n[Z.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),T.fn.extend({detach:function(t){return Wt(this,t,!0)},remove:function(t){return Wt(this,t)},text:function(t){return z(this,(function(t){return void 0===t?T.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Bt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Rt(this,t).appendChild(t)}))},prepend:function(){return Bt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Rt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Bt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Bt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(T.cleanData(yt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return T.clone(this,t,e)}))},html:function(t){return z(this,(function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Lt.test(t)&&!_t[(mt.exec(t)||["",""])[1].toLowerCase()]){t=T.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(T.cleanData(yt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Bt(this,arguments,(function(e){var n=this.parentNode;T.inArray(this,t)<0&&(T.cleanData(yt(this)),n&&n.replaceChild(e,this))}),t)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){T.fn[t]=function(t){for(var n,i=[],r=T(t),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),T(r[s])[e](n),c.apply(i,n.get());return this.pushStack(i)}}));var Yt=new RegExp("^("+it+")(?!px)[a-z%]+$","i"),zt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},Vt=new RegExp(ot.join("|"),"i");function $t(t,e,n){var i,r,o,s,a=t.style;return(n=n||zt(t))&&(""!==(s=n.getPropertyValue(e)||n[e])||at(t)||(s=T.style(t,e)),!v.pixelBoxStyles()&&Yt.test(s)&&Vt.test(e)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function Xt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",st.appendChild(l).appendChild(c);var t=n.getComputedStyle(c);i="1%"!==t.top,u=12===e(t.marginLeft),c.style.right="60%",a=36===e(t.right),r=36===e(t.width),c.style.position="absolute",o=12===e(c.offsetWidth/3),st.removeChild(l),c=null}}function e(t){return Math.round(parseFloat(t))}var i,r,o,a,u,l=s.createElement("div"),c=s.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===c.style.backgroundClip,T.extend(v,{boxSizingReliable:function(){return t(),r},pixelBoxStyles:function(){return t(),a},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),u},scrollboxSize:function(){return t(),o}}))}();var Kt=["Webkit","Moz","ms"],Gt=s.createElement("div").style,Qt={};function Zt(t){var e=T.cssProps[t]||Qt[t];return e||(t in Gt?t:Qt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Kt.length;n--;)if((t=Kt[n]+e)in Gt)return t}(t)||t)}var Jt=/^(none|table(?!-c[ea]).+)/,te=/^--/,ee={position:"absolute",visibility:"hidden",display:"block"},ne={letterSpacing:"0",fontWeight:"400"};function ie(t,e,n){var i=rt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function re(t,e,n,i,r,o){var s="width"===e?1:0,a=0,u=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(u+=T.css(t,n+ot[s],!0,r)),i?("content"===n&&(u-=T.css(t,"padding"+ot[s],!0,r)),"margin"!==n&&(u-=T.css(t,"border"+ot[s]+"Width",!0,r))):(u+=T.css(t,"padding"+ot[s],!0,r),"padding"!==n?u+=T.css(t,"border"+ot[s]+"Width",!0,r):a+=T.css(t,"border"+ot[s]+"Width",!0,r));return!i&&o>=0&&(u+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-u-a-.5))||0),u}function oe(t,e,n){var i=zt(t),r=(!v.boxSizingReliable()||n)&&"border-box"===T.css(t,"boxSizing",!1,i),o=r,s=$t(t,e,i),a="offset"+e[0].toUpperCase()+e.slice(1);if(Yt.test(s)){if(!n)return s;s="auto"}return(!v.boxSizingReliable()&&r||"auto"===s||!parseFloat(s)&&"inline"===T.css(t,"display",!1,i))&&t.getClientRects().length&&(r="border-box"===T.css(t,"boxSizing",!1,i),(o=a in t)&&(s=t[a])),(s=parseFloat(s)||0)+re(t,e,n||(r?"border":"content"),o,i,s)+"px"}function se(t,e,n,i,r){return new se.prototype.init(t,e,n,i,r)}T.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=$t(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,s,a=K(e),u=te.test(e),l=t.style;if(u||(e=Zt(a)),s=T.cssHooks[e]||T.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(t,!1,i))?r:l[e];"string"===(o=typeof n)&&(r=rt.exec(n))&&r[1]&&(n=ht(t,e,r),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=r&&r[3]||(T.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(u?l.setProperty(e,n):l[e]=n))}},css:function(t,e,n,i){var r,o,s,a=K(e);return te.test(e)||(e=Zt(a)),(s=T.cssHooks[e]||T.cssHooks[a])&&"get"in s&&(r=s.get(t,!0,n)),void 0===r&&(r=$t(t,e,i)),"normal"===r&&e in ne&&(r=ne[e]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),T.each(["height","width"],(function(t,e){T.cssHooks[e]={get:function(t,n,i){if(n)return!Jt.test(T.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?oe(t,e,i):ct(t,ee,(function(){return oe(t,e,i)}))},set:function(t,n,i){var r,o=zt(t),s=!v.scrollboxSize()&&"absolute"===o.position,a=(s||i)&&"border-box"===T.css(t,"boxSizing",!1,o),u=i?re(t,e,i,a,o):0;return a&&s&&(u-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-re(t,e,"border",!1,o)-.5)),u&&(r=rt.exec(n))&&"px"!==(r[3]||"px")&&(t.style[e]=n,n=T.css(t,e)),ie(0,n,u)}}})),T.cssHooks.marginLeft=Xt(v.reliableMarginLeft,(function(t,e){if(e)return(parseFloat($t(t,"marginLeft"))||t.getBoundingClientRect().left-ct(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),T.each({margin:"",padding:"",border:"Width"},(function(t,e){T.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[t+ot[i]+e]=o[i]||o[i-2]||o[0];return r}},"margin"!==t&&(T.cssHooks[t+e].set=ie)})),T.fn.extend({css:function(t,e){return z(this,(function(t,e,n){var i,r,o={},s=0;if(Array.isArray(e)){for(i=zt(t),r=e.length;s<r;s++)o[e[s]]=T.css(t,e[s],!1,i);return o}return void 0!==n?T.style(t,e,n):T.css(t,e)}),t,e,arguments.length>1)}}),T.Tween=se,se.prototype={constructor:se,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||T.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(T.cssNumber[n]?"":"px")},cur:function(){var t=se.propHooks[this.prop];return t&&t.get?t.get(this):se.propHooks._default.get(this)},run:function(t){var e,n=se.propHooks[this.prop];return this.options.duration?this.pos=e=T.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):se.propHooks._default.set(this),this}},se.prototype.init.prototype=se.prototype,se.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=T.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){T.fx.step[t.prop]?T.fx.step[t.prop](t):1!==t.elem.nodeType||!T.cssHooks[t.prop]&&null==t.elem.style[Zt(t.prop)]?t.elem[t.prop]=t.now:T.style(t.elem,t.prop,t.now+t.unit)}}},se.propHooks.scrollTop=se.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},T.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},T.fx=se.prototype.init,T.fx.step={};var ae,ue,le=/^(?:toggle|show|hide)$/,ce=/queueHooks$/;function he(){ue&&(!1===s.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(he):n.setTimeout(he,T.fx.interval),T.fx.tick())}function fe(){return n.setTimeout((function(){ae=void 0})),ae=Date.now()}function pe(t,e){var n,i=0,r={height:t};for(e=e?1:0;i<4;i+=2-e)r["margin"+(n=ot[i])]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function de(t,e,n){for(var i,r=(ge.tweeners[e]||[]).concat(ge.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,e,t))return i}function ge(t,e,n){var i,r,o=0,s=ge.prefilters.length,a=T.Deferred().always((function(){delete u.elem})),u=function(){if(r)return!1;for(var e=ae||fe(),n=Math.max(0,l.startTime+l.duration-e),i=1-(n/l.duration||0),o=0,s=l.tweens.length;o<s;o++)l.tweens[o].run(i);return a.notifyWith(t,[l,i,n]),i<1&&s?n:(s||a.notifyWith(t,[l,1,0]),a.resolveWith(t,[l]),!1)},l=a.promise({elem:t,props:T.extend({},e),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},n),originalProperties:e,originalOptions:n,startTime:ae||fe(),duration:n.duration,tweens:[],createTween:function(e,n){var i=T.Tween(t,l.opts,e,n,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(i),i},stop:function(e){var n=0,i=e?l.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)l.tweens[n].run(1);return e?(a.notifyWith(t,[l,1,0]),a.resolveWith(t,[l,e])):a.rejectWith(t,[l,e]),this}}),c=l.props;for(!function(t,e){var n,i,r,o,s;for(n in t)if(r=e[i=K(n)],o=t[n],Array.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),(s=T.cssHooks[i])&&"expand"in s)for(n in o=s.expand(o),delete t[i],o)n in t||(t[n]=o[n],e[n]=r);else e[i]=r}(c,l.opts.specialEasing);o<s;o++)if(i=ge.prefilters[o].call(l,t,c,l.opts))return _(i.stop)&&(T._queueHooks(l.elem,l.opts.queue).stop=i.stop.bind(i)),i;return T.map(c,de,l),_(l.opts.start)&&l.opts.start.call(t,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),T.fx.timer(T.extend(u,{elem:t,anim:l,queue:l.opts.queue})),l}T.Animation=T.extend(ge,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ht(n.elem,t,rt.exec(e),n),n}]},tweener:function(t,e){_(t)?(e=t,t=["*"]):t=t.match(H);for(var n,i=0,r=t.length;i<r;i++)n=t[i],ge.tweeners[n]=ge.tweeners[n]||[],ge.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,r,o,s,a,u,l,c,h="width"in e||"height"in e,f=this,p={},d=t.style,g=t.nodeType&&lt(t),m=Z.get(t,"fxshow");for(i in n.queue||(null==(s=T._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,f.always((function(){f.always((function(){s.unqueued--,T.queue(t,"fx").length||s.empty.fire()}))}))),e)if(r=e[i],le.test(r)){if(delete e[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;g=!0}p[i]=m&&m[i]||T.style(t,i)}if((u=!T.isEmptyObject(e))||!T.isEmptyObject(p))for(i in h&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(l=m&&m.display)&&(l=Z.get(t,"display")),"none"===(c=T.css(t,"display"))&&(l?c=l:(dt([t],!0),l=t.style.display||l,c=T.css(t,"display"),dt([t]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===T.css(t,"float")&&(u||(f.done((function(){d.display=l})),null==l&&(c=d.display,l="none"===c?"":c)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",f.always((function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}))),u=!1,p)u||(m?"hidden"in m&&(g=m.hidden):m=Z.access(t,"fxshow",{display:l}),o&&(m.hidden=!g),g&&dt([t],!0),f.done((function(){for(i in g||dt([t]),Z.remove(t,"fxshow"),p)T.style(t,i,p[i])}))),u=de(g?m[i]:0,i,f),i in m||(m[i]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(t,e){e?ge.prefilters.unshift(t):ge.prefilters.push(t)}}),T.speed=function(t,e,n){var i=t&&"object"==typeof t?T.extend({},t):{complete:n||!n&&e||_(t)&&t,duration:t,easing:n&&e||e&&!_(e)&&e};return T.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in T.fx.speeds?i.duration=T.fx.speeds[i.duration]:i.duration=T.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){_(i.old)&&i.old.call(this),i.queue&&T.dequeue(this,i.queue)},i},T.fn.extend({fadeTo:function(t,e,n,i){return this.filter(lt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=T.isEmptyObject(t),o=T.speed(e,n,i),s=function(){var e=ge(this,T.extend({},t),o);(r||Z.get(this,"finish"))&&e.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each((function(){var e=!0,r=null!=t&&t+"queueHooks",o=T.timers,s=Z.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&ce.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));!e&&n||T.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=Z.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=T.timers,s=i?i.length:0;for(n.finish=!0,T.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<s;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish}))}}),T.each(["toggle","show","hide"],(function(t,e){var n=T.fn[e];T.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(pe(e,!0),t,i,r)}})),T.each({slideDown:pe("show"),slideUp:pe("hide"),slideToggle:pe("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){T.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}})),T.timers=[],T.fx.tick=function(){var t,e=0,n=T.timers;for(ae=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||T.fx.stop(),ae=void 0},T.fx.timer=function(t){T.timers.push(t),T.fx.start()},T.fx.interval=13,T.fx.start=function(){ue||(ue=!0,he())},T.fx.stop=function(){ue=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(t,e){return t=T.fx&&T.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,i){var r=n.setTimeout(e,t);i.stop=function(){n.clearTimeout(r)}}))},function(){var t=s.createElement("input"),e=s.createElement("select").appendChild(s.createElement("option"));t.type="checkbox",v.checkOn=""!==t.value,v.optSelected=e.selected,(t=s.createElement("input")).value="t",t.type="radio",v.radioValue="t"===t.value}();var me,ve=T.expr.attrHandle;T.fn.extend({attr:function(t,e){return z(this,T.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){T.removeAttr(this,t)}))}}),T.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?T.prop(t,e,n):(1===o&&T.isXMLDoc(t)||(r=T.attrHooks[e.toLowerCase()]||(T.expr.match.bool.test(e)?me:void 0)),void 0!==n?null===n?void T.removeAttr(t,e):r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(i=r.get(t,e))?i:null==(i=T.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!v.radioValue&&"radio"===e&&M(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,r=e&&e.match(H);if(r&&1===t.nodeType)for(;n=r[i++];)t.removeAttribute(n)}}),me={set:function(t,e,n){return!1===e?T.removeAttr(t,n):t.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=ve[e]||T.find.attr;ve[e]=function(t,e,i){var r,o,s=e.toLowerCase();return i||(o=ve[s],ve[s]=r,r=null!=n(t,e,i)?s:null,ve[s]=o),r}}));var _e=/^(?:input|select|textarea|button)$/i,ye=/^(?:a|area)$/i;function be(t){return(t.match(H)||[]).join(" ")}function xe(t){return t.getAttribute&&t.getAttribute("class")||""}function we(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(H)||[]}T.fn.extend({prop:function(t,e){return z(this,T.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[T.propFix[t]||t]}))}}),T.extend({prop:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&T.isXMLDoc(t)||(e=T.propFix[e]||e,r=T.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=T.find.attr(t,"tabindex");return e?parseInt(e,10):_e.test(t.nodeName)||ye.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(T.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){T.propFix[this.toLowerCase()]=this})),T.fn.extend({addClass:function(t){var e,n,i,r,o,s,a,u=0;if(_(t))return this.each((function(e){T(this).addClass(t.call(this,e,xe(this)))}));if((e=we(t)).length)for(;n=this[u++];)if(r=xe(n),i=1===n.nodeType&&" "+be(r)+" "){for(s=0;o=e[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=be(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,r,o,s,a,u=0;if(_(t))return this.each((function(e){T(this).removeClass(t.call(this,e,xe(this)))}));if(!arguments.length)return this.attr("class","");if((e=we(t)).length)for(;n=this[u++];)if(r=xe(n),i=1===n.nodeType&&" "+be(r)+" "){for(s=0;o=e[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(a=be(i))&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t,i="string"===n||Array.isArray(t);return"boolean"==typeof e&&i?e?this.addClass(t):this.removeClass(t):_(t)?this.each((function(n){T(this).toggleClass(t.call(this,n,xe(this),e),e)})):this.each((function(){var e,r,o,s;if(i)for(r=0,o=T(this),s=we(t);e=s[r++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=xe(this))&&Z.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Z.get(this,"__className__")||""))}))},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+be(xe(n))+" ").indexOf(e)>-1)return!0;return!1}});var Te=/\r/g;T.fn.extend({val:function(t){var e,n,i,r=this[0];return arguments.length?(i=_(t),this.each((function(n){var r;1===this.nodeType&&(null==(r=i?t.call(this,n,T(this).val()):t)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=T.map(r,(function(t){return null==t?"":t+""}))),(e=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))}))):r?(e=T.valHooks[r.type]||T.valHooks[r.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(Te,""):null==n?"":n:void 0}}),T.extend({valHooks:{option:{get:function(t){var e=T.find.attr(t,"value");return null!=e?e:be(T.text(t))}},select:{get:function(t){var e,n,i,r=t.options,o=t.selectedIndex,s="select-one"===t.type,a=s?null:[],u=s?o+1:r.length;for(i=o<0?u:s?o:0;i<u;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!M(n.parentNode,"optgroup"))){if(e=T(n).val(),s)return e;a.push(e)}return a},set:function(t,e){for(var n,i,r=t.options,o=T.makeArray(e),s=r.length;s--;)((i=r[s]).selected=T.inArray(T.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),T.each(["radio","checkbox"],(function(){T.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=T.inArray(T(t).val(),e)>-1}},v.checkOn||(T.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),v.focusin="onfocusin"in n;var Ee=/^(?:focusinfocus|focusoutblur)$/,Ce=function(t){t.stopPropagation()};T.extend(T.event,{trigger:function(t,e,i,r){var o,a,u,l,c,h,f,p,g=[i||s],m=d.call(t,"type")?t.type:t,v=d.call(t,"namespace")?t.namespace.split("."):[];if(a=p=u=i=i||s,3!==i.nodeType&&8!==i.nodeType&&!Ee.test(m+T.event.triggered)&&(m.indexOf(".")>-1&&(v=m.split("."),m=v.shift(),v.sort()),c=m.indexOf(":")<0&&"on"+m,(t=t[T.expando]?t:new T.Event(m,"object"==typeof t&&t)).isTrigger=r?2:3,t.namespace=v.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:T.makeArray(e,[t]),f=T.event.special[m]||{},r||!f.trigger||!1!==f.trigger.apply(i,e))){if(!r&&!f.noBubble&&!y(i)){for(l=f.delegateType||m,Ee.test(l+m)||(a=a.parentNode);a;a=a.parentNode)g.push(a),u=a;u===(i.ownerDocument||s)&&g.push(u.defaultView||u.parentWindow||n)}for(o=0;(a=g[o++])&&!t.isPropagationStopped();)p=a,t.type=o>1?l:f.bindType||m,(h=(Z.get(a,"events")||{})[t.type]&&Z.get(a,"handle"))&&h.apply(a,e),(h=c&&a[c])&&h.apply&&G(a)&&(t.result=h.apply(a,e),!1===t.result&&t.preventDefault());return t.type=m,r||t.isDefaultPrevented()||f._default&&!1!==f._default.apply(g.pop(),e)||!G(i)||c&&_(i[m])&&!y(i)&&((u=i[c])&&(i[c]=null),T.event.triggered=m,t.isPropagationStopped()&&p.addEventListener(m,Ce),i[m](),t.isPropagationStopped()&&p.removeEventListener(m,Ce),T.event.triggered=void 0,u&&(i[c]=u)),t.result}},simulate:function(t,e,n){var i=T.extend(new T.Event,n,{type:t,isSimulated:!0});T.event.trigger(i,null,e)}}),T.fn.extend({trigger:function(t,e){return this.each((function(){T.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return T.event.trigger(t,e,n,!0)}}),v.focusin||T.each({focus:"focusin",blur:"focusout"},(function(t,e){var n=function(t){T.event.simulate(e,t.target,T.event.fix(t))};T.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=Z.access(i,e);r||i.addEventListener(t,n,!0),Z.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=Z.access(i,e)-1;r?Z.access(i,e,r):(i.removeEventListener(t,n,!0),Z.remove(i,e))}}}));var Se=n.location,Ne=Date.now(),Ae=/\?/;T.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+t),e};var De=/\[\]$/,Me=/\r?\n/g,ke=/^(?:submit|button|image|reset|file)$/i,Ie=/^(?:input|select|textarea|keygen)/i;function Oe(t,e,n,i){var r;if(Array.isArray(e))T.each(e,(function(e,r){n||De.test(t)?i(t,r):Oe(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,n,i)}));else if(n||"object"!==w(e))i(t,e);else for(r in e)Oe(t+"["+r+"]",e[r],n,i)}T.param=function(t,e){var n,i=[],r=function(t,e){var n=_(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!T.isPlainObject(t))T.each(t,(function(){r(this.name,this.value)}));else for(n in t)Oe(n,t[n],e,r);return i.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=T.prop(this,"elements");return t?T.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!T(this).is(":disabled")&&Ie.test(this.nodeName)&&!ke.test(t)&&(this.checked||!gt.test(t))})).map((function(t,e){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,(function(t){return{name:e.name,value:t.replace(Me,"\r\n")}})):{name:e.name,value:n.replace(Me,"\r\n")}})).get()}});var Le=/%20/g,Pe=/#.*$/,je=/([?&])_=[^&]*/,Re=/^(.*?):[ \t]*([^\r\n]*)$/gm,He=/^(?:GET|HEAD)$/,qe=/^\/\//,Fe={},Ue={},Be="*/".concat("*"),We=s.createElement("a");function Ye(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(H)||[];if(_(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function ze(t,e,n,i){var r={},o=t===Ue;function s(a){var u;return r[a]=!0,T.each(t[a]||[],(function(t,a){var l=a(e,n,i);return"string"!=typeof l||o||r[l]?o?!(u=l):void 0:(e.dataTypes.unshift(l),s(l),!1)})),u}return s(e.dataTypes[0])||!r["*"]&&s("*")}function Ve(t,e){var n,i,r=T.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&T.extend(!0,t,i),t}We.href=Se.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Se.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Se.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Be,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ve(Ve(t,T.ajaxSettings),e):Ve(T.ajaxSettings,t)},ajaxPrefilter:Ye(Fe),ajaxTransport:Ye(Ue),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,r,o,a,u,l,c,h,f,p,d=T.ajaxSetup({},e),g=d.context||d,m=d.context&&(g.nodeType||g.jquery)?T(g):T.event,v=T.Deferred(),_=T.Callbacks("once memory"),y=d.statusCode||{},b={},x={},w="canceled",E={readyState:0,getResponseHeader:function(t){var e;if(c){if(!a)for(a={};e=Re.exec(o);)a[e[1].toLowerCase()+" "]=(a[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=a[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(t,e){return null==c&&(t=x[t.toLowerCase()]=x[t.toLowerCase()]||t,b[t]=e),this},overrideMimeType:function(t){return null==c&&(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)E.always(t[E.status]);else for(e in t)y[e]=[y[e],t[e]];return this},abort:function(t){var e=t||w;return i&&i.abort(e),C(0,e),this}};if(v.promise(E),d.url=((t||d.url||Se.href)+"").replace(qe,Se.protocol+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(H)||[""],null==d.crossDomain){l=s.createElement("a");try{l.href=d.url,l.href=l.href,d.crossDomain=We.protocol+"//"+We.host!=l.protocol+"//"+l.host}catch(t){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=T.param(d.data,d.traditional)),ze(Fe,d,e,E),c)return E;for(f in(h=T.event&&d.global)&&0==T.active++&&T.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!He.test(d.type),r=d.url.replace(Pe,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(Le,"+")):(p=d.url.slice(r.length),d.data&&(d.processData||"string"==typeof d.data)&&(r+=(Ae.test(r)?"&":"?")+d.data,delete d.data),!1===d.cache&&(r=r.replace(je,"$1"),p=(Ae.test(r)?"&":"?")+"_="+Ne+++p),d.url=r+p),d.ifModified&&(T.lastModified[r]&&E.setRequestHeader("If-Modified-Since",T.lastModified[r]),T.etag[r]&&E.setRequestHeader("If-None-Match",T.etag[r])),(d.data&&d.hasContent&&!1!==d.contentType||e.contentType)&&E.setRequestHeader("Content-Type",d.contentType),E.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Be+"; q=0.01":""):d.accepts["*"]),d.headers)E.setRequestHeader(f,d.headers[f]);if(d.beforeSend&&(!1===d.beforeSend.call(g,E,d)||c))return E.abort();if(w="abort",_.add(d.complete),E.done(d.success),E.fail(d.error),i=ze(Ue,d,e,E)){if(E.readyState=1,h&&m.trigger("ajaxSend",[E,d]),c)return E;d.async&&d.timeout>0&&(u=n.setTimeout((function(){E.abort("timeout")}),d.timeout));try{c=!1,i.send(b,C)}catch(t){if(c)throw t;C(-1,t)}}else C(-1,"No Transport");function C(t,e,s,a){var l,f,p,b,x,w=e;c||(c=!0,u&&n.clearTimeout(u),i=void 0,o=a||"",E.readyState=t>0?4:0,l=t>=200&&t<300||304===t,s&&(b=function(t,e,n){for(var i,r,o,s,a=t.contents,u=t.dataTypes;"*"===u[0];)u.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){u.unshift(r);break}if(u[0]in n)o=u[0];else{for(r in n){if(!u[0]||t.converters[r+" "+u[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==u[0]&&u.unshift(o),n[o]}(d,E,s)),b=function(t,e,n,i){var r,o,s,a,u,l={},c=t.dataTypes.slice();if(c[1])for(s in t.converters)l[s.toLowerCase()]=t.converters[s];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!u&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(s=l[u+" "+o]||l["* "+o]))for(r in l)if((a=r.split(" "))[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){!0===s?s=l[r]:!0!==l[r]&&(o=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+u+" to "+o}}}return{state:"success",data:e}}(d,b,E,l),l?(d.ifModified&&((x=E.getResponseHeader("Last-Modified"))&&(T.lastModified[r]=x),(x=E.getResponseHeader("etag"))&&(T.etag[r]=x)),204===t||"HEAD"===d.type?w="nocontent":304===t?w="notmodified":(w=b.state,f=b.data,l=!(p=b.error))):(p=w,!t&&w||(w="error",t<0&&(t=0))),E.status=t,E.statusText=(e||w)+"",l?v.resolveWith(g,[f,w,E]):v.rejectWith(g,[E,w,p]),E.statusCode(y),y=void 0,h&&m.trigger(l?"ajaxSuccess":"ajaxError",[E,d,l?f:p]),_.fireWith(g,[E,w]),h&&(m.trigger("ajaxComplete",[E,d]),--T.active||T.event.trigger("ajaxStop")))}return E},getJSON:function(t,e,n){return T.get(t,e,n,"json")},getScript:function(t,e){return T.get(t,void 0,e,"script")}}),T.each(["get","post"],(function(t,e){T[e]=function(t,n,i,r){return _(n)&&(r=r||i,i=n,n=void 0),T.ajax(T.extend({url:t,type:e,dataType:r,data:n,success:i},T.isPlainObject(t)&&t))}})),T._evalUrl=function(t,e){return T.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){T.globalEval(t,e)}})},T.fn.extend({wrapAll:function(t){var e;return this[0]&&(_(t)&&(t=t.call(this[0])),e=T(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return _(t)?this.each((function(e){T(this).wrapInner(t.call(this,e))})):this.each((function(){var e=T(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=_(t);return this.each((function(n){T(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){T(this).replaceWith(this.childNodes)})),this}}),T.expr.pseudos.hidden=function(t){return!T.expr.pseudos.visible(t)},T.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var $e={0:200,1223:204},Xe=T.ajaxSettings.xhr();v.cors=!!Xe&&"withCredentials"in Xe,v.ajax=Xe=!!Xe,T.ajaxTransport((function(t){var e,i;if(v.cors||Xe&&!t.crossDomain)return{send:function(r,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];for(s in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(s,r[s]);e=function(t){return function(){e&&(e=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o($e[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),i=a.onerror=a.ontimeout=e("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout((function(){e&&i()}))},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),T.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return T.globalEval(t),t}}}),T.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),T.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(i,r){e=T("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),s.head.appendChild(e[0])},abort:function(){n&&n()}}}));var Ke,Ge=[],Qe=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ge.pop()||T.expando+"_"+Ne++;return this[t]=!0,t}}),T.ajaxPrefilter("json jsonp",(function(t,e,i){var r,o,s,a=!1!==t.jsonp&&(Qe.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qe.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=_(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Qe,"$1"+r):!1!==t.jsonp&&(t.url+=(Ae.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return s||T.error(r+" was not called"),s[0]},t.dataTypes[0]="json",o=n[r],n[r]=function(){s=arguments},i.always((function(){void 0===o?T(n).removeProp(r):n[r]=o,t[r]&&(t.jsonpCallback=e.jsonpCallback,Ge.push(r)),s&&_(o)&&o(s[0]),s=o=void 0})),"script"})),v.createHTMLDocument=((Ke=s.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ke.childNodes.length),T.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(v.createHTMLDocument?((i=(e=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,e.head.appendChild(i)):e=s),o=!n&&[],(r=k.exec(t))?[e.createElement(r[1])]:(r=Et([t],e,o),o&&o.length&&T(o).remove(),T.merge([],r.childNodes)));var i,r,o},T.fn.load=function(t,e,n){var i,r,o,s=this,a=t.indexOf(" ");return a>-1&&(i=be(t.slice(a)),t=t.slice(0,a)),_(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),s.length>0&&T.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done((function(t){o=arguments,s.html(i?T("<div>").append(T.parseHTML(t)).find(i):t)})).always(n&&function(t,e){s.each((function(){n.apply(this,o||[t.responseText,e,t])}))}),this},T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){T.fn[e]=function(t){return this.on(e,t)}})),T.expr.pseudos.animated=function(t){return T.grep(T.timers,(function(e){return t===e.elem})).length},T.offset={setOffset:function(t,e,n){var i,r,o,s,a,u,l=T.css(t,"position"),c=T(t),h={};"static"===l&&(t.style.position="relative"),a=c.offset(),o=T.css(t,"top"),u=T.css(t,"left"),("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1?(s=(i=c.position()).top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(u)||0),_(e)&&(e=e.call(t,n,T.extend({},a))),null!=e.top&&(h.top=e.top-a.top+s),null!=e.left&&(h.left=e.left-a.left+r),"using"in e?e.using.call(t,h):c.css(h)}},T.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){T.offset.setOffset(this,t,e)}));var e,n,i=this[0];return i?i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,i=this[0],r={top:0,left:0};if("fixed"===T.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===T.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&((r=T(t).offset()).top+=T.css(t,"borderTopWidth",!0),r.left+=T.css(t,"borderLeftWidth",!0))}return{top:e.top-r.top-T.css(i,"marginTop",!0),left:e.left-r.left-T.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===T.css(t,"position");)t=t.offsetParent;return t||st}))}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;T.fn[t]=function(i){return z(this,(function(t,i,r){var o;if(y(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===r)return o?o[e]:t[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):t[i]=r}),t,i,arguments.length)}})),T.each(["top","left"],(function(t,e){T.cssHooks[e]=Xt(v.pixelPosition,(function(t,n){if(n)return n=$t(t,e),Yt.test(n)?T(t).position()[e]+"px":n}))})),T.each({Height:"height",Width:"width"},(function(t,e){T.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,i){T.fn[i]=function(r,o){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===o?"margin":"border");return z(this,(function(e,n,r){var o;return y(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===r?T.css(e,n,a):T.style(e,n,r,a)}),e,s?r:void 0,s)}}))})),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){T.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}})),T.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),T.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),T.proxy=function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),_(t))return i=u.call(arguments,2),(r=function(){return t.apply(e||this,i.concat(u.call(arguments)))}).guid=t.guid=t.guid||T.guid++,r},T.holdReady=function(t){t?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=M,T.isFunction=_,T.isWindow=y,T.camelCase=K,T.type=w,T.now=Date.now,T.isNumeric=function(t){var e=T.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},void 0===(i=function(){return T}.apply(e,[]))||(t.exports=i);var Ze=n.jQuery,Je=n.$;return T.noConflict=function(t){return n.$===T&&(n.$=Je),t&&n.jQuery===T&&(n.jQuery=Ze),T},r||(n.jQuery=n.$=T),T}))},function(t,e,n){"use strict";n.r(e),function(t){
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.0
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,i=function(){for(var t=["Edge","Trident","Firefox"],e=0;e<t.length;e+=1)if(n&&navigator.userAgent.indexOf(t[e])>=0)return 1;return 0}();var r=n&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then((function(){e=!1,t()})))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout((function(){e=!1,t()}),i))}};function o(t){return t&&"[object Function]"==={}.toString.call(t)}function s(t,e){if(1!==t.nodeType)return[];var n=t.ownerDocument.defaultView.getComputedStyle(t,null);return e?n[e]:n}function a(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function u(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=s(t),n=e.overflow,i=e.overflowX,r=e.overflowY;return/(auto|scroll|overlay)/.test(n+r+i)?t:u(a(t))}function l(t){return t&&t.referenceNode?t.referenceNode:t}var c=n&&!(!window.MSInputMethodContext||!document.documentMode),h=n&&/MSIE 10/.test(navigator.userAgent);function f(t){return 11===t?c:10===t?h:c||h}function p(t){if(!t)return document.documentElement;for(var e=f(10)?document.body:null,n=t.offsetParent||null;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===s(n,"position")?p(n):n:t?t.ownerDocument.documentElement:document.documentElement}function d(t){return null!==t.parentNode?d(t.parentNode):t}function g(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?t:e,r=n?e:t,o=document.createRange();o.setStart(i,0),o.setEnd(r,0);var s,a,u=o.commonAncestorContainer;if(t!==u&&e!==u||i.contains(r))return"BODY"===(a=(s=u).nodeName)||"HTML"!==a&&p(s.firstElementChild)!==s?p(u):u;var l=d(t);return l.host?g(l.host,e):g(t,d(e).host)}function m(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var i=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||i)[e]}return t[e]}function v(t,e){var n="x"===e?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+i+"Width"],10)}function _(t,e,n,i){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],f(10)?parseInt(n["offset"+t])+parseInt(i["margin"+("Height"===t?"Top":"Left")])+parseInt(i["margin"+("Height"===t?"Bottom":"Right")]):0)}function y(t){var e=t.body,n=t.documentElement,i=f(10)&&getComputedStyle(n);return{height:_("Height",e,n,i),width:_("Width",e,n,i)}}var b=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},x=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),w=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},T=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t};function E(t){return T({},t,{right:t.left+t.width,bottom:t.top+t.height})}function C(t){var e={};try{if(f(10)){e=t.getBoundingClientRect();var n=m(t,"top"),i=m(t,"left");e.top+=n,e.left+=i,e.bottom+=n,e.right+=i}else e=t.getBoundingClientRect()}catch(t){}var r={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},o="HTML"===t.nodeName?y(t.ownerDocument):{},a=o.width||t.clientWidth||r.width,u=o.height||t.clientHeight||r.height,l=t.offsetWidth-a,c=t.offsetHeight-u;if(l||c){var h=s(t);l-=v(h,"x"),c-=v(h,"y"),r.width-=l,r.height-=c}return E(r)}function S(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=f(10),r="HTML"===e.nodeName,o=C(t),a=C(e),l=u(t),c=s(e),h=parseFloat(c.borderTopWidth,10),p=parseFloat(c.borderLeftWidth,10);n&&r&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var d=E({top:o.top-a.top-h,left:o.left-a.left-p,width:o.width,height:o.height});if(d.marginTop=0,d.marginLeft=0,!i&&r){var g=parseFloat(c.marginTop,10),v=parseFloat(c.marginLeft,10);d.top-=h-g,d.bottom-=h-g,d.left-=p-v,d.right-=p-v,d.marginTop=g,d.marginLeft=v}return(i&&!n?e.contains(l):e===l&&"BODY"!==l.nodeName)&&(d=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=m(e,"top"),r=m(e,"left"),o=n?-1:1;return t.top+=i*o,t.bottom+=i*o,t.left+=r*o,t.right+=r*o,t}(d,e)),d}function N(t){if(!t||!t.parentElement||f())return document.documentElement;for(var e=t.parentElement;e&&"none"===s(e,"transform");)e=e.parentElement;return e||document.documentElement}function A(t,e,n,i){var r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},c=r?N(t):g(t,l(e));if("viewport"===i)o=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,i=S(t,n),r=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),s=e?0:m(n),a=e?0:m(n,"left");return E({top:s-i.top+i.marginTop,left:a-i.left+i.marginLeft,width:r,height:o})}(c,r);else{var h=void 0;"scrollParent"===i?"BODY"===(h=u(a(e))).nodeName&&(h=t.ownerDocument.documentElement):h="window"===i?t.ownerDocument.documentElement:i;var f=S(h,c,r);if("HTML"!==h.nodeName||function t(e){var n=e.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===s(e,"position"))return!0;var i=a(e);return!!i&&t(i)}(c))o=f;else{var p=y(t.ownerDocument),d=p.height,v=p.width;o.top+=f.top-f.marginTop,o.bottom=d+f.top,o.left+=f.left-f.marginLeft,o.right=v+f.left}}var _="number"==typeof(n=n||0);return o.left+=_?n:n.left||0,o.top+=_?n:n.top||0,o.right-=_?n:n.right||0,o.bottom-=_?n:n.bottom||0,o}function D(t,e,n,i,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var s=A(n,i,o,r),a={top:{width:s.width,height:e.top-s.top},right:{width:s.right-e.right,height:s.height},bottom:{width:s.width,height:s.bottom-e.bottom},left:{width:e.left-s.left,height:s.height}},u=Object.keys(a).map((function(t){return T({key:t},a[t],{area:(e=a[t],e.width*e.height)});var e})).sort((function(t,e){return e.area-t.area})),l=u.filter((function(t){var e=t.width,i=t.height;return e>=n.clientWidth&&i>=n.clientHeight})),c=l.length>0?l[0].key:u[0].key,h=t.split("-")[1];return c+(h?"-"+h:"")}function M(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return S(n,i?N(e):g(e,l(n)),i)}function k(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),n=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),i=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+i,height:t.offsetHeight+n}}function I(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,(function(t){return e[t]}))}function O(t,e,n){n=n.split("-")[0];var i=k(t),r={width:i.width,height:i.height},o=-1!==["right","left"].indexOf(n),s=o?"top":"left",a=o?"left":"top",u=o?"height":"width",l=o?"width":"height";return r[s]=e[s]+e[u]/2-i[u]/2,r[a]=n===a?e[a]-i[l]:e[I(a)],r}function L(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function P(t,e,n){return(void 0===n?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex((function(t){return t[e]===n}));var i=L(t,(function(t){return t[e]===n}));return t.indexOf(i)}(t,"name",n))).forEach((function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&o(n)&&(e.offsets.popper=E(e.offsets.popper),e.offsets.reference=E(e.offsets.reference),e=n(e,t))})),e}function j(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=M(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=D(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=O(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=P(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}function R(t,e){return t.some((function(t){var n=t.name;return t.enabled&&n===e}))}function H(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),i=0;i<e.length;i++){var r=e[i],o=r?""+r+n:t;if(void 0!==document.body.style[o])return o}return null}function q(){return this.state.isDestroyed=!0,R(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function F(t){var e=t.ownerDocument;return e?e.defaultView:window}function U(t,e,n,i){n.updateBound=i,F(t).addEventListener("resize",n.updateBound,{passive:!0});var r=u(t);return function t(e,n,i,r){var o="BODY"===e.nodeName,s=o?e.ownerDocument.defaultView:e;s.addEventListener(n,i,{passive:!0}),o||t(u(s.parentNode),n,i,r),r.push(s)}(r,"scroll",n.updateBound,n.scrollParents),n.scrollElement=r,n.eventsEnabled=!0,n}function B(){this.state.eventsEnabled||(this.state=U(this.reference,this.options,this.state,this.scheduleUpdate))}function W(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,F(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach((function(t){t.removeEventListener("scroll",e.updateBound)})),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function Y(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function z(t,e){Object.keys(e).forEach((function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&Y(e[n])&&(i="px"),t.style[n]=e[n]+i}))}var V=n&&/Firefox/i.test(navigator.userAgent);function $(t,e,n){var i=L(t,(function(t){return t.name===e})),r=!!i&&t.some((function(t){return t.name===n&&t.enabled&&t.order<i.order}));if(!r){var o="`"+e+"`",s="`"+n+"`";console.warn(s+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return r}var X=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],K=X.slice(3);function G(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=K.indexOf(t),i=K.slice(n+1).concat(K.slice(0,n));return e?i.reverse():i}var Q={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function Z(t,e,n,i){var r=[0,0],o=-1!==["right","left"].indexOf(i),s=t.split(/(\+|\-)/).map((function(t){return t.trim()})),a=s.indexOf(L(s,(function(t){return-1!==t.search(/,|\s/)})));s[a]&&-1===s[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,l=-1!==a?[s.slice(0,a).concat([s[a].split(u)[0]]),[s[a].split(u)[1]].concat(s.slice(a+1))]:[s];return(l=l.map((function(t,i){var r=(1===i?!o:o)?"height":"width",s=!1;return t.reduce((function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,s=!0,t):s?(t[t.length-1]+=e,s=!1,t):t.concat(e)}),[]).map((function(t){return function(t,e,n,i){var r=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+r[1],s=r[2];if(!o)return t;if(0===s.indexOf("%")){var a=void 0;switch(s){case"%p":a=n;break;case"%":case"%r":default:a=i}return E(a)[e]/100*o}if("vh"===s||"vw"===s){return("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o}return o}(t,r,e,n)}))}))).forEach((function(t,e){t.forEach((function(n,i){Y(n)&&(r[e]+=n*("-"===t[i-1]?-1:1))}))})),r}var J={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],i=e.split("-")[1];if(i){var r=t.offsets,o=r.reference,s=r.popper,a=-1!==["bottom","top"].indexOf(n),u=a?"left":"top",l=a?"width":"height",c={start:w({},u,o[u]),end:w({},u,o[u]+o[l]-s[l])};t.offsets.popper=T({},s,c[i])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,i=t.placement,r=t.offsets,o=r.popper,s=r.reference,a=i.split("-")[0],u=void 0;return u=Y(+n)?[+n,0]:Z(n,o,s,a),"left"===a?(o.top+=u[0],o.left-=u[1]):"right"===a?(o.top+=u[0],o.left+=u[1]):"top"===a?(o.left+=u[0],o.top-=u[1]):"bottom"===a&&(o.left+=u[0],o.top+=u[1]),t.popper=o,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||p(t.instance.popper);t.instance.reference===n&&(n=p(n));var i=H("transform"),r=t.instance.popper.style,o=r.top,s=r.left,a=r[i];r.top="",r.left="",r[i]="";var u=A(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);r.top=o,r.left=s,r[i]=a,e.boundaries=u;var l=e.priority,c=t.offsets.popper,h={primary:function(t){var n=c[t];return c[t]<u[t]&&!e.escapeWithReference&&(n=Math.max(c[t],u[t])),w({},t,n)},secondary:function(t){var n="right"===t?"left":"top",i=c[n];return c[t]>u[t]&&!e.escapeWithReference&&(i=Math.min(c[n],u[t]-("right"===t?c.width:c.height))),w({},n,i)}};return l.forEach((function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";c=T({},c,h[e](t))})),t.offsets.popper=c,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,i=e.reference,r=t.placement.split("-")[0],o=Math.floor,s=-1!==["top","bottom"].indexOf(r),a=s?"right":"bottom",u=s?"left":"top",l=s?"width":"height";return n[a]<o(i[u])&&(t.offsets.popper[u]=o(i[u])-n[l]),n[u]>o(i[a])&&(t.offsets.popper[u]=o(i[a])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!$(t.instance.modifiers,"arrow","keepTogether"))return t;var i=e.element;if("string"==typeof i){if(!(i=t.instance.popper.querySelector(i)))return t}else if(!t.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var r=t.placement.split("-")[0],o=t.offsets,a=o.popper,u=o.reference,l=-1!==["left","right"].indexOf(r),c=l?"height":"width",h=l?"Top":"Left",f=h.toLowerCase(),p=l?"left":"top",d=l?"bottom":"right",g=k(i)[c];u[d]-g<a[f]&&(t.offsets.popper[f]-=a[f]-(u[d]-g)),u[f]+g>a[d]&&(t.offsets.popper[f]+=u[f]+g-a[d]),t.offsets.popper=E(t.offsets.popper);var m=u[f]+u[c]/2-g/2,v=s(t.instance.popper),_=parseFloat(v["margin"+h],10),y=parseFloat(v["border"+h+"Width"],10),b=m-t.offsets.popper[f]-_-y;return b=Math.max(Math.min(a[c]-g,b),0),t.arrowElement=i,t.offsets.arrow=(w(n={},f,Math.round(b)),w(n,p,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(R(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=A(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),i=t.placement.split("-")[0],r=I(i),o=t.placement.split("-")[1]||"",s=[];switch(e.behavior){case Q.FLIP:s=[i,r];break;case Q.CLOCKWISE:s=G(i);break;case Q.COUNTERCLOCKWISE:s=G(i,!0);break;default:s=e.behavior}return s.forEach((function(a,u){if(i!==a||s.length===u+1)return t;i=t.placement.split("-")[0],r=I(i);var l=t.offsets.popper,c=t.offsets.reference,h=Math.floor,f="left"===i&&h(l.right)>h(c.left)||"right"===i&&h(l.left)<h(c.right)||"top"===i&&h(l.bottom)>h(c.top)||"bottom"===i&&h(l.top)<h(c.bottom),p=h(l.left)<h(n.left),d=h(l.right)>h(n.right),g=h(l.top)<h(n.top),m=h(l.bottom)>h(n.bottom),v="left"===i&&p||"right"===i&&d||"top"===i&&g||"bottom"===i&&m,_=-1!==["top","bottom"].indexOf(i),y=!!e.flipVariations&&(_&&"start"===o&&p||_&&"end"===o&&d||!_&&"start"===o&&g||!_&&"end"===o&&m),b=!!e.flipVariationsByContent&&(_&&"start"===o&&d||_&&"end"===o&&p||!_&&"start"===o&&m||!_&&"end"===o&&g),x=y||b;(f||v||x)&&(t.flipped=!0,(f||v)&&(i=s[u+1]),x&&(o=function(t){return"end"===t?"start":"start"===t?"end":t}(o)),t.placement=i+(o?"-"+o:""),t.offsets.popper=T({},t.offsets.popper,O(t.instance.popper,t.offsets.reference,t.placement)),t=P(t.instance.modifiers,t,"flip"))})),t},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],i=t.offsets,r=i.popper,o=i.reference,s=-1!==["left","right"].indexOf(n),a=-1===["top","left"].indexOf(n);return r[s?"left":"top"]=o[n]-(a?r[s?"width":"height"]:0),t.placement=I(e),t.offsets.popper=E(r),t}},hide:{order:800,enabled:!0,fn:function(t){if(!$(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=L(t.instance.modifiers,(function(t){return"preventOverflow"===t.name})).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,i=e.y,r=t.offsets.popper,o=L(t.instance.modifiers,(function(t){return"applyStyle"===t.name})).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s=void 0!==o?o:e.gpuAcceleration,a=p(t.instance.popper),u=C(a),l={position:r.position},c=function(t,e){var n=t.offsets,i=n.popper,r=n.reference,o=Math.round,s=Math.floor,a=function(t){return t},u=o(r.width),l=o(i.width),c=-1!==["left","right"].indexOf(t.placement),h=-1!==t.placement.indexOf("-"),f=e?c||h||u%2==l%2?o:s:a,p=e?o:a;return{left:f(u%2==1&&l%2==1&&!h&&e?i.left-1:i.left),top:p(i.top),bottom:p(i.bottom),right:f(i.right)}}(t,window.devicePixelRatio<2||!V),h="bottom"===n?"top":"bottom",f="right"===i?"left":"right",d=H("transform"),g=void 0,m=void 0;if(m="bottom"===h?"HTML"===a.nodeName?-a.clientHeight+c.bottom:-u.height+c.bottom:c.top,g="right"===f?"HTML"===a.nodeName?-a.clientWidth+c.right:-u.width+c.right:c.left,s&&d)l[d]="translate3d("+g+"px, "+m+"px, 0)",l[h]=0,l[f]=0,l.willChange="transform";else{var v="bottom"===h?-1:1,_="right"===f?-1:1;l[h]=m*v,l[f]=g*_,l.willChange=h+", "+f}var y={"x-placement":t.placement};return t.attributes=T({},y,t.attributes),t.styles=T({},l,t.styles),t.arrowStyles=T({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return z(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach((function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)})),t.arrowElement&&Object.keys(t.arrowStyles).length&&z(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,i,r){var o=M(r,e,t,n.positionFixed),s=D(n.placement,o,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",s),z(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},tt=function(){function t(e,n){var i=this,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};b(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=r(this.update.bind(this)),this.options=T({},t.Defaults,s),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(T({},t.Defaults.modifiers,s.modifiers)).forEach((function(e){i.options.modifiers[e]=T({},t.Defaults.modifiers[e]||{},s.modifiers?s.modifiers[e]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(t){return T({name:t},i.options.modifiers[t])})).sort((function(t,e){return t.order-e.order})),this.modifiers.forEach((function(t){t.enabled&&o(t.onLoad)&&t.onLoad(i.reference,i.popper,i.options,t,i.state)})),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return x(t,[{key:"update",value:function(){return j.call(this)}},{key:"destroy",value:function(){return q.call(this)}},{key:"enableEventListeners",value:function(){return B.call(this)}},{key:"disableEventListeners",value:function(){return W.call(this)}}]),t}();tt.Utils=("undefined"!=typeof window?window:t).PopperUtils,tt.placements=X,tt.Defaults=J,e.default=tt}.call(this,n(8))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";n.r(e);n(5);var i=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},r=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return i(e(t),n)}),{left:function(e,n,i,r){for(null==i&&(i=0),null==r&&(r=e.length);i<r;){var o=i+r>>>1;t(e[o],n)<0?i=o+1:r=o}return i},right:function(e,n,i,r){for(null==i&&(i=0),null==r&&(r=e.length);i<r;){var o=i+r>>>1;t(e[o],n)>0?r=o:i=o+1}return i}}};var o=r(i),s=o.right,a=(o.left,s);var u=function(t,e){var n,i,r,o=t.length,s=-1;if(null==e){for(;++s<o;)if(null!=(n=t[s])&&n>=n)for(i=r=n;++s<o;)null!=(n=t[s])&&(i>n&&(i=n),r<n&&(r=n))}else for(;++s<o;)if(null!=(n=e(t[s],s,t))&&n>=n)for(i=r=n;++s<o;)null!=(n=e(t[s],s,t))&&(i>n&&(i=n),r<n&&(r=n));return[i,r]},l=Array.prototype,c=l.slice,h=(l.map,function(t){return function(){return t}}),f=function(t){return t},p=function(t,e,n){t=+t,e=+e,n=(r=arguments.length)<2?(e=t,t=0,1):r<3?1:+n;for(var i=-1,r=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(r);++i<r;)o[i]=t+i*n;return o},d=Math.sqrt(50),g=Math.sqrt(10),m=Math.sqrt(2),v=function(t,e,n){var i,r,o,s,a=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((i=e<t)&&(r=t,t=e,e=r),0===(s=_(t,e,n))||!isFinite(s))return[];if(s>0)for(t=Math.ceil(t/s),e=Math.floor(e/s),o=new Array(r=Math.ceil(e-t+1));++a<r;)o[a]=(t+a)*s;else for(t=Math.floor(t*s),e=Math.ceil(e*s),o=new Array(r=Math.ceil(t-e+1));++a<r;)o[a]=(t-a)/s;return i&&o.reverse(),o};function _(t,e,n){var i=(e-t)/Math.max(0,n),r=Math.floor(Math.log(i)/Math.LN10),o=i/Math.pow(10,r);return r>=0?(o>=d?10:o>=g?5:o>=m?2:1)*Math.pow(10,r):-Math.pow(10,-r)/(o>=d?10:o>=g?5:o>=m?2:1)}function y(t,e,n){var i=Math.abs(e-t)/Math.max(0,n),r=Math.pow(10,Math.floor(Math.log(i)/Math.LN10)),o=i/r;return o>=d?r*=10:o>=g?r*=5:o>=m&&(r*=2),e<t?-r:r}var b=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},x=function(){var t=f,e=u,n=b;function i(i){var r,o,s=i.length,u=new Array(s);for(r=0;r<s;++r)u[r]=t(i[r],r,i);var l=e(u),c=l[0],h=l[1],f=n(u,c,h);Array.isArray(f)||(f=y(c,h,f),f=p(Math.ceil(c/f)*f,h,f));for(var d=f.length;f[0]<=c;)f.shift(),--d;for(;f[d-1]>h;)f.pop(),--d;var g,m=new Array(d+1);for(r=0;r<=d;++r)(g=m[r]=[]).x0=r>0?f[r-1]:c,g.x1=r<d?f[r]:h;for(r=0;r<s;++r)c<=(o=u[r])&&o<=h&&m[a(f,o,0,d)].push(i[r]);return m}return i.value=function(e){return arguments.length?(t="function"==typeof e?e:h(e),i):t},i.domain=function(t){return arguments.length?(e="function"==typeof t?t:h([t[0],t[1]]),i):e},i.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?h(c.call(t)):h(t),i):n},i},w=function(t,e){var n,i,r=t.length,o=-1;if(null==e){for(;++o<r;)if(null!=(n=t[o])&&n>=n)for(i=n;++o<r;)null!=(n=t[o])&&n>i&&(i=n)}else for(;++o<r;)if(null!=(n=e(t[o],o,t))&&n>=n)for(i=n;++o<r;)null!=(n=e(t[o],o,t))&&n>i&&(i=n);return i},T=function(t){for(var e,n,i,r=t.length,o=-1,s=0;++o<r;)s+=t[o].length;for(n=new Array(s);--r>=0;)for(e=(i=t[r]).length;--e>=0;)n[--s]=i[e];return n};var E=Array.prototype.slice,C=function(t){return t},S=1,N=2,A=3,D=4,M=1e-6;function k(t){return"translate("+(t+.5)+",0)"}function I(t){return"translate(0,"+(t+.5)+")"}function O(t){return function(e){return+t(e)}}function L(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function P(){return!this.__axis}function j(t,e){var n=[],i=null,r=null,o=6,s=6,a=3,u=t===S||t===D?-1:1,l=t===D||t===N?"x":"y",c=t===S||t===A?k:I;function h(h){var f=null==i?e.ticks?e.ticks.apply(e,n):e.domain():i,p=null==r?e.tickFormat?e.tickFormat.apply(e,n):C:r,d=Math.max(o,0)+a,g=e.range(),m=+g[0]+.5,v=+g[g.length-1]+.5,_=(e.bandwidth?L:O)(e.copy()),y=h.selection?h.selection():h,b=y.selectAll(".domain").data([null]),x=y.selectAll(".tick").data(f,e).order(),w=x.exit(),T=x.enter().append("g").attr("class","tick"),E=x.select("line"),k=x.select("text");b=b.merge(b.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(T),E=E.merge(T.append("line").attr("stroke","currentColor").attr(l+"2",u*o)),k=k.merge(T.append("text").attr("fill","currentColor").attr(l,u*d).attr("dy",t===S?"0em":t===A?"0.71em":"0.32em")),h!==y&&(b=b.transition(h),x=x.transition(h),E=E.transition(h),k=k.transition(h),w=w.transition(h).attr("opacity",M).attr("transform",(function(t){return isFinite(t=_(t))?c(t):this.getAttribute("transform")})),T.attr("opacity",M).attr("transform",(function(t){var e=this.parentNode.__axis;return c(e&&isFinite(e=e(t))?e:_(t))}))),w.remove(),b.attr("d",t===D||t==N?s?"M"+u*s+","+m+"H0.5V"+v+"H"+u*s:"M0.5,"+m+"V"+v:s?"M"+m+","+u*s+"V0.5H"+v+"V"+u*s:"M"+m+",0.5H"+v),x.attr("opacity",1).attr("transform",(function(t){return c(_(t))})),E.attr(l+"2",u*o),k.attr(l,u*d).text(p),y.filter(P).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===N?"start":t===D?"end":"middle"),y.each((function(){this.__axis=_}))}return h.scale=function(t){return arguments.length?(e=t,h):e},h.ticks=function(){return n=E.call(arguments),h},h.tickArguments=function(t){return arguments.length?(n=null==t?[]:E.call(t),h):n.slice()},h.tickValues=function(t){return arguments.length?(i=null==t?null:E.call(t),h):i&&i.slice()},h.tickFormat=function(t){return arguments.length?(r=t,h):r},h.tickSize=function(t){return arguments.length?(o=s=+t,h):o},h.tickSizeInner=function(t){return arguments.length?(o=+t,h):o},h.tickSizeOuter=function(t){return arguments.length?(s=+t,h):s},h.tickPadding=function(t){return arguments.length?(a=+t,h):a},h}function R(t){return j(A,t)}function H(t){return j(D,t)}var q={value:function(){}};function F(){for(var t,e=0,n=arguments.length,i={};e<n;++e){if(!(t=arguments[e]+"")||t in i)throw new Error("illegal type: "+t);i[t]=[]}return new U(i)}function U(t){this._=t}function B(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",i=t.indexOf(".");if(i>=0&&(n=t.slice(i+1),t=t.slice(0,i)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function W(t,e){for(var n,i=0,r=t.length;i<r;++i)if((n=t[i]).name===e)return n.value}function Y(t,e,n){for(var i=0,r=t.length;i<r;++i)if(t[i].name===e){t[i]=q,t=t.slice(0,i).concat(t.slice(i+1));break}return null!=n&&t.push({name:e,value:n}),t}U.prototype=F.prototype={constructor:U,on:function(t,e){var n,i=this._,r=B(t+"",i),o=-1,s=r.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<s;)if(n=(t=r[o]).type)i[n]=Y(i[n],t.name,e);else if(null==e)for(n in i)i[n]=Y(i[n],t.name,null);return this}for(;++o<s;)if((n=(t=r[o]).type)&&(n=W(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new U(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,i,r=new Array(n),o=0;o<n;++o)r[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(i=this._[t]).length;o<n;++o)i[o].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var i=this._[t],r=0,o=i.length;r<o;++r)i[r].value.apply(e,n)}};var z=F,V="http://www.w3.org/1999/xhtml",$={svg:"http://www.w3.org/2000/svg",xhtml:V,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},X=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),$.hasOwnProperty(e)?{space:$[e],local:t}:t};function K(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===V&&e.documentElement.namespaceURI===V?e.createElement(t):e.createElementNS(n,t)}}function G(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var Q=function(t){var e=X(t);return(e.local?G:K)(e)};function Z(){}var J=function(t){return null==t?Z:function(){return this.querySelector(t)}};function tt(){return[]}var et=function(t){return null==t?tt:function(){return this.querySelectorAll(t)}},nt=function(t){return function(){return this.matches(t)}},it=function(t){return new Array(t.length)};function rt(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}rt.prototype={constructor:rt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var ot="$";function st(t,e,n,i,r,o){for(var s,a=0,u=e.length,l=o.length;a<l;++a)(s=e[a])?(s.__data__=o[a],i[a]=s):n[a]=new rt(t,o[a]);for(;a<u;++a)(s=e[a])&&(r[a]=s)}function at(t,e,n,i,r,o,s){var a,u,l,c={},h=e.length,f=o.length,p=new Array(h);for(a=0;a<h;++a)(u=e[a])&&(p[a]=l=ot+s.call(u,u.__data__,a,e),l in c?r[a]=u:c[l]=u);for(a=0;a<f;++a)(u=c[l=ot+s.call(t,o[a],a,o)])?(i[a]=u,u.__data__=o[a],c[l]=null):n[a]=new rt(t,o[a]);for(a=0;a<h;++a)(u=e[a])&&c[p[a]]===u&&(r[a]=u)}function ut(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function lt(t){return function(){this.removeAttribute(t)}}function ct(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ht(t,e){return function(){this.setAttribute(t,e)}}function ft(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function pt(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function dt(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var gt=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function mt(t){return function(){this.style.removeProperty(t)}}function vt(t,e,n){return function(){this.style.setProperty(t,e,n)}}function _t(t,e,n){return function(){var i=e.apply(this,arguments);null==i?this.style.removeProperty(t):this.style.setProperty(t,i,n)}}function yt(t,e){return t.style.getPropertyValue(e)||gt(t).getComputedStyle(t,null).getPropertyValue(e)}function bt(t){return function(){delete this[t]}}function xt(t,e){return function(){this[t]=e}}function wt(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function Tt(t){return t.trim().split(/^|\s+/)}function Et(t){return t.classList||new Ct(t)}function Ct(t){this._node=t,this._names=Tt(t.getAttribute("class")||"")}function St(t,e){for(var n=Et(t),i=-1,r=e.length;++i<r;)n.add(e[i])}function Nt(t,e){for(var n=Et(t),i=-1,r=e.length;++i<r;)n.remove(e[i])}function At(t){return function(){St(this,t)}}function Dt(t){return function(){Nt(this,t)}}function Mt(t,e){return function(){(e.apply(this,arguments)?St:Nt)(this,t)}}Ct.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function kt(){this.textContent=""}function It(t){return function(){this.textContent=t}}function Ot(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function Lt(){this.innerHTML=""}function Pt(t){return function(){this.innerHTML=t}}function jt(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Rt(){this.nextSibling&&this.parentNode.appendChild(this)}function Ht(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function qt(){return null}function Ft(){var t=this.parentNode;t&&t.removeChild(this)}function Ut(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Bt(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Wt={},Yt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Wt={mouseenter:"mouseover",mouseleave:"mouseout"}));function zt(t,e,n){return t=Vt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function Vt(t,e,n){return function(i){var r=Yt;Yt=i;try{t.call(this,this.__data__,e,n)}finally{Yt=r}}}function $t(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function Xt(t){return function(){var e=this.__on;if(e){for(var n,i=0,r=-1,o=e.length;i<o;++i)n=e[i],t.type&&n.type!==t.type||n.name!==t.name?e[++r]=n:this.removeEventListener(n.type,n.listener,n.capture);++r?e.length=r:delete this.__on}}}function Kt(t,e,n){var i=Wt.hasOwnProperty(t.type)?zt:Vt;return function(r,o,s){var a,u=this.__on,l=i(e,o,s);if(u)for(var c=0,h=u.length;c<h;++c)if((a=u[c]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=l,a.capture=n),void(a.value=e);this.addEventListener(t.type,l,n),a={type:t.type,name:t.name,value:e,listener:l,capture:n},u?u.push(a):this.__on=[a]}}function Gt(t,e,n){var i=gt(t),r=i.CustomEvent;"function"==typeof r?r=new r(e,n):(r=i.document.createEvent("Event"),n?(r.initEvent(e,n.bubbles,n.cancelable),r.detail=n.detail):r.initEvent(e,!1,!1)),t.dispatchEvent(r)}function Qt(t,e){return function(){return Gt(this,t,e)}}function Zt(t,e){return function(){return Gt(this,t,e.apply(this,arguments))}}var Jt=[null];function te(t,e){this._groups=t,this._parents=e}function ee(){return new te([[document.documentElement]],Jt)}te.prototype=ee.prototype={constructor:te,select:function(t){"function"!=typeof t&&(t=J(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var o,s,a=e[r],u=a.length,l=i[r]=new Array(u),c=0;c<u;++c)(o=a[c])&&(s=t.call(o,o.__data__,c,a))&&("__data__"in o&&(s.__data__=o.__data__),l[c]=s);return new te(i,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=et(t));for(var e=this._groups,n=e.length,i=[],r=[],o=0;o<n;++o)for(var s,a=e[o],u=a.length,l=0;l<u;++l)(s=a[l])&&(i.push(t.call(s,s.__data__,l,a)),r.push(s));return new te(i,r)},filter:function(t){"function"!=typeof t&&(t=nt(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var o,s=e[r],a=s.length,u=i[r]=[],l=0;l<a;++l)(o=s[l])&&t.call(o,o.__data__,l,s)&&u.push(o);return new te(i,this._parents)},data:function(t,e){if(!t)return d=new Array(this.size()),c=-1,this.each((function(t){d[++c]=t})),d;var n,i=e?at:st,r=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var s=o.length,a=new Array(s),u=new Array(s),l=new Array(s),c=0;c<s;++c){var h=r[c],f=o[c],p=f.length,d=t.call(h,h&&h.__data__,c,r),g=d.length,m=u[c]=new Array(g),v=a[c]=new Array(g);i(h,f,m,v,l[c]=new Array(p),d,e);for(var _,y,b=0,x=0;b<g;++b)if(_=m[b]){for(b>=x&&(x=b+1);!(y=v[x])&&++x<g;);_._next=y||null}}return(a=new te(a,r))._enter=u,a._exit=l,a},enter:function(){return new te(this._enter||this._groups.map(it),this._parents)},exit:function(){return new te(this._exit||this._groups.map(it),this._parents)},join:function(t,e,n){var i=this.enter(),r=this,o=this.exit();return i="function"==typeof t?t(i):i.append(t+""),null!=e&&(r=e(r)),null==n?o.remove():n(o),i&&r?i.merge(r).order():r},merge:function(t){for(var e=this._groups,n=t._groups,i=e.length,r=n.length,o=Math.min(i,r),s=new Array(i),a=0;a<o;++a)for(var u,l=e[a],c=n[a],h=l.length,f=s[a]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;a<i;++a)s[a]=e[a];return new te(s,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var i,r=t[e],o=r.length-1,s=r[o];--o>=0;)(i=r[o])&&(s&&4^i.compareDocumentPosition(s)&&s.parentNode.insertBefore(i,s),s=i);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=ut);for(var n=this._groups,i=n.length,r=new Array(i),o=0;o<i;++o){for(var s,a=n[o],u=a.length,l=r[o]=new Array(u),c=0;c<u;++c)(s=a[c])&&(l[c]=s);l.sort(e)}return new te(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var i=t[e],r=0,o=i.length;r<o;++r){var s=i[r];if(s)return s}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,i=e.length;n<i;++n)for(var r,o=e[n],s=0,a=o.length;s<a;++s)(r=o[s])&&t.call(r,r.__data__,s,o);return this},attr:function(t,e){var n=X(t);if(arguments.length<2){var i=this.node();return n.local?i.getAttributeNS(n.space,n.local):i.getAttribute(n)}return this.each((null==e?n.local?ct:lt:"function"==typeof e?n.local?dt:pt:n.local?ft:ht)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?mt:"function"==typeof e?_t:vt)(t,e,null==n?"":n)):yt(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?bt:"function"==typeof e?wt:xt)(t,e)):this.node()[t]},classed:function(t,e){var n=Tt(t+"");if(arguments.length<2){for(var i=Et(this.node()),r=-1,o=n.length;++r<o;)if(!i.contains(n[r]))return!1;return!0}return this.each(("function"==typeof e?Mt:e?At:Dt)(n,e))},text:function(t){return arguments.length?this.each(null==t?kt:("function"==typeof t?Ot:It)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Lt:("function"==typeof t?jt:Pt)(t)):this.node().innerHTML},raise:function(){return this.each(Rt)},lower:function(){return this.each(Ht)},append:function(t){var e="function"==typeof t?t:Q(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:Q(t),i=null==e?qt:"function"==typeof e?e:J(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),i.apply(this,arguments)||null)}))},remove:function(){return this.each(Ft)},clone:function(t){return this.select(t?Bt:Ut)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var i,r,o=$t(t+""),s=o.length;if(!(arguments.length<2)){for(a=e?Kt:Xt,null==n&&(n=!1),i=0;i<s;++i)this.each(a(o[i],e,n));return this}var a=this.node().__on;if(a)for(var u,l=0,c=a.length;l<c;++l)for(i=0,u=a[l];i<s;++i)if((r=o[i]).type===u.type&&r.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?Zt:Qt)(t,e))}};var ne=ee,ie=function(t){return"string"==typeof t?new te([[document.querySelector(t)]],[document.documentElement]):new te([[t]],Jt)},re=0;function oe(){this._="@"+(++re).toString(36)}oe.prototype=function(){return new oe}.prototype={constructor:oe,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var se=function(t){return"string"==typeof t?new te([document.querySelectorAll(t)],[document.documentElement]):new te([null==t?[]:t],Jt)};function ae(t,e,n,i,r,o,s,a,u,l){this.target=t,this.type=e,this.subject=n,this.identifier=i,this.active=r,this.x=o,this.y=s,this.dx=a,this.dy=u,this._=l}ae.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var ue=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function le(t,e){var n=Object.create(t.prototype);for(var i in e)n[i]=e[i];return n}function ce(){}var he="\\s*([+-]?\\d+)\\s*",fe="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",pe="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",de=/^#([0-9a-f]{3,8})$/,ge=new RegExp("^rgb\\("+[he,he,he]+"\\)$"),me=new RegExp("^rgb\\("+[pe,pe,pe]+"\\)$"),ve=new RegExp("^rgba\\("+[he,he,he,fe]+"\\)$"),_e=new RegExp("^rgba\\("+[pe,pe,pe,fe]+"\\)$"),ye=new RegExp("^hsl\\("+[fe,pe,pe]+"\\)$"),be=new RegExp("^hsla\\("+[fe,pe,pe,fe]+"\\)$"),xe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function we(){return this.rgb().formatHex()}function Te(){return this.rgb().formatRgb()}function Ee(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=de.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Ce(e):3===n?new De(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?new De(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?new De(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ge.exec(t))?new De(e[1],e[2],e[3],1):(e=me.exec(t))?new De(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=ve.exec(t))?Se(e[1],e[2],e[3],e[4]):(e=_e.exec(t))?Se(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ye.exec(t))?Oe(e[1],e[2]/100,e[3]/100,1):(e=be.exec(t))?Oe(e[1],e[2]/100,e[3]/100,e[4]):xe.hasOwnProperty(t)?Ce(xe[t]):"transparent"===t?new De(NaN,NaN,NaN,0):null}function Ce(t){return new De(t>>16&255,t>>8&255,255&t,1)}function Se(t,e,n,i){return i<=0&&(t=e=n=NaN),new De(t,e,n,i)}function Ne(t){return t instanceof ce||(t=Ee(t)),t?new De((t=t.rgb()).r,t.g,t.b,t.opacity):new De}function Ae(t,e,n,i){return 1===arguments.length?Ne(t):new De(t,e,n,null==i?1:i)}function De(t,e,n,i){this.r=+t,this.g=+e,this.b=+n,this.opacity=+i}function Me(){return"#"+Ie(this.r)+Ie(this.g)+Ie(this.b)}function ke(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Ie(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Oe(t,e,n,i){return i<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new je(t,e,n,i)}function Le(t){if(t instanceof je)return new je(t.h,t.s,t.l,t.opacity);if(t instanceof ce||(t=Ee(t)),!t)return new je;if(t instanceof je)return t;var e=(t=t.rgb()).r/255,n=t.g/255,i=t.b/255,r=Math.min(e,n,i),o=Math.max(e,n,i),s=NaN,a=o-r,u=(o+r)/2;return a?(s=e===o?(n-i)/a+6*(n<i):n===o?(i-e)/a+2:(e-n)/a+4,a/=u<.5?o+r:2-o-r,s*=60):a=u>0&&u<1?0:s,new je(s,a,u,t.opacity)}function Pe(t,e,n,i){return 1===arguments.length?Le(t):new je(t,e,n,null==i?1:i)}function je(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}function Re(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function He(t,e,n,i,r){var o=t*t,s=o*t;return((1-3*t+3*o-s)*e+(4-6*o+3*s)*n+(1+3*t+3*o-3*s)*i+s*r)/6}ue(ce,Ee,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:we,formatHex:we,formatHsl:function(){return Le(this).formatHsl()},formatRgb:Te,toString:Te}),ue(De,Ae,le(ce,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new De(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new De(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Me,formatHex:Me,formatRgb:ke,toString:ke})),ue(je,Pe,le(ce,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new je(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new je(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,i=n+(n<.5?n:1-n)*e,r=2*n-i;return new De(Re(t>=240?t-240:t+120,r,i),Re(t,r,i),Re(t<120?t+240:t-120,r,i),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var qe=function(t){return function(){return t}};function Fe(t,e){return function(n){return t+n*e}}function Ue(t,e){var n=e-t;return n?Fe(t,n>180||n<-180?n-360*Math.round(n/360):n):qe(isNaN(t)?e:t)}function Be(t){return 1==(t=+t)?We:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(i){return Math.pow(t+i*e,n)}}(e,n,t):qe(isNaN(e)?n:e)}}function We(t,e){var n=e-t;return n?Fe(t,n):qe(isNaN(t)?e:t)}var Ye=function t(e){var n=Be(e);function i(t,e){var i=n((t=Ae(t)).r,(e=Ae(e)).r),r=n(t.g,e.g),o=n(t.b,e.b),s=We(t.opacity,e.opacity);return function(e){return t.r=i(e),t.g=r(e),t.b=o(e),t.opacity=s(e),t+""}}return i.gamma=t,i}(1);function ze(t){return function(e){var n,i,r=e.length,o=new Array(r),s=new Array(r),a=new Array(r);for(n=0;n<r;++n)i=Ae(e[n]),o[n]=i.r||0,s[n]=i.g||0,a[n]=i.b||0;return o=t(o),s=t(s),a=t(a),i.opacity=1,function(t){return i.r=o(t),i.g=s(t),i.b=a(t),i+""}}}ze((function(t){var e=t.length-1;return function(n){var i=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),r=t[i],o=t[i+1],s=i>0?t[i-1]:2*r-o,a=i<e-1?t[i+2]:2*o-r;return He((n-i/e)*e,s,r,o,a)}})),ze((function(t){var e=t.length;return function(n){var i=Math.floor(((n%=1)<0?++n:n)*e),r=t[(i+e-1)%e],o=t[i%e],s=t[(i+1)%e],a=t[(i+2)%e];return He((n-i/e)*e,r,o,s,a)}}));var Ve=function(t,e){var n,i=e?e.length:0,r=t?Math.min(i,t.length):0,o=new Array(r),s=new Array(i);for(n=0;n<r;++n)o[n]=rn(t[n],e[n]);for(;n<i;++n)s[n]=e[n];return function(t){for(n=0;n<r;++n)s[n]=o[n](t);return s}},$e=function(t,e){var n=new Date;return e-=t=+t,function(i){return n.setTime(t+e*i),n}},Xe=function(t,e){return e-=t=+t,function(n){return t+e*n}},Ke=function(t,e){var n,i={},r={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?i[n]=rn(t[n],e[n]):r[n]=e[n];return function(t){for(n in i)r[n]=i[n](t);return r}},Ge=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Qe=new RegExp(Ge.source,"g");var Ze,Je,tn,en,nn=function(t,e){var n,i,r,o=Ge.lastIndex=Qe.lastIndex=0,s=-1,a=[],u=[];for(t+="",e+="";(n=Ge.exec(t))&&(i=Qe.exec(e));)(r=i.index)>o&&(r=e.slice(o,r),a[s]?a[s]+=r:a[++s]=r),(n=n[0])===(i=i[0])?a[s]?a[s]+=i:a[++s]=i:(a[++s]=null,u.push({i:s,x:Xe(n,i)})),o=Qe.lastIndex;return o<e.length&&(r=e.slice(o),a[s]?a[s]+=r:a[++s]=r),a.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,i=0;i<e;++i)a[(n=u[i]).i]=n.x(t);return a.join("")})},rn=function(t,e){var n,i=typeof e;return null==e||"boolean"===i?qe(e):("number"===i?Xe:"string"===i?(n=Ee(e))?(e=n,Ye):nn:e instanceof Ee?Ye:e instanceof Date?$e:Array.isArray(e)?Ve:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Ke:Xe)(t,e)},on=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},sn=180/Math.PI,an={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},un=function(t,e,n,i,r,o){var s,a,u;return(s=Math.sqrt(t*t+e*e))&&(t/=s,e/=s),(u=t*n+e*i)&&(n-=t*u,i-=e*u),(a=Math.sqrt(n*n+i*i))&&(n/=a,i/=a,u/=a),t*i<e*n&&(t=-t,e=-e,u=-u,s=-s),{translateX:r,translateY:o,rotate:Math.atan2(e,t)*sn,skewX:Math.atan(u)*sn,scaleX:s,scaleY:a}};function ln(t,e,n,i){function r(t){return t.length?t.pop()+" ":""}return function(o,s){var a=[],u=[];return o=t(o),s=t(s),function(t,i,r,o,s,a){if(t!==r||i!==o){var u=s.push("translate(",null,e,null,n);a.push({i:u-4,x:Xe(t,r)},{i:u-2,x:Xe(i,o)})}else(r||o)&&s.push("translate("+r+e+o+n)}(o.translateX,o.translateY,s.translateX,s.translateY,a,u),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(r(n)+"rotate(",null,i)-2,x:Xe(t,e)})):e&&n.push(r(n)+"rotate("+e+i)}(o.rotate,s.rotate,a,u),function(t,e,n,o){t!==e?o.push({i:n.push(r(n)+"skewX(",null,i)-2,x:Xe(t,e)}):e&&n.push(r(n)+"skewX("+e+i)}(o.skewX,s.skewX,a,u),function(t,e,n,i,o,s){if(t!==n||e!==i){var a=o.push(r(o)+"scale(",null,",",null,")");s.push({i:a-4,x:Xe(t,n)},{i:a-2,x:Xe(e,i)})}else 1===n&&1===i||o.push(r(o)+"scale("+n+","+i+")")}(o.scaleX,o.scaleY,s.scaleX,s.scaleY,a,u),o=s=null,function(t){for(var e,n=-1,i=u.length;++n<i;)a[(e=u[n]).i]=e.x(t);return a.join("")}}}var cn=ln((function(t){return"none"===t?an:(Ze||(Ze=document.createElement("DIV"),Je=document.documentElement,tn=document.defaultView),Ze.style.transform=t,t=tn.getComputedStyle(Je.appendChild(Ze),null).getPropertyValue("transform"),Je.removeChild(Ze),t=t.slice(7,-1).split(","),un(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),hn=ln((function(t){return null==t?an:(en||(en=document.createElementNS("http://www.w3.org/2000/svg","g")),en.setAttribute("transform",t),(t=en.transform.baseVal.consolidate())?(t=t.matrix,un(t.a,t.b,t.c,t.d,t.e,t.f)):an)}),", ",")",")");Math.SQRT2;function fn(t){return function(e,n){var i=t((e=Pe(e)).h,(n=Pe(n)).h),r=We(e.s,n.s),o=We(e.l,n.l),s=We(e.opacity,n.opacity);return function(t){return e.h=i(t),e.s=r(t),e.l=o(t),e.opacity=s(t),e+""}}}fn(Ue),fn(We);var pn=Math.PI/180,dn=180/Math.PI,gn=.96422,mn=1,vn=.82521,_n=4/29,yn=6/29,bn=3*yn*yn,xn=yn*yn*yn;function wn(t){if(t instanceof En)return new En(t.l,t.a,t.b,t.opacity);if(t instanceof kn)return In(t);t instanceof De||(t=Ne(t));var e,n,i=An(t.r),r=An(t.g),o=An(t.b),s=Cn((.2225045*i+.7168786*r+.0606169*o)/mn);return i===r&&r===o?e=n=s:(e=Cn((.4360747*i+.3850649*r+.1430804*o)/gn),n=Cn((.0139322*i+.0971045*r+.7141733*o)/vn)),new En(116*s-16,500*(e-s),200*(s-n),t.opacity)}function Tn(t,e,n,i){return 1===arguments.length?wn(t):new En(t,e,n,null==i?1:i)}function En(t,e,n,i){this.l=+t,this.a=+e,this.b=+n,this.opacity=+i}function Cn(t){return t>xn?Math.pow(t,1/3):t/bn+_n}function Sn(t){return t>yn?t*t*t:bn*(t-_n)}function Nn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function An(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Dn(t){if(t instanceof kn)return new kn(t.h,t.c,t.l,t.opacity);if(t instanceof En||(t=wn(t)),0===t.a&&0===t.b)return new kn(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*dn;return new kn(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Mn(t,e,n,i){return 1===arguments.length?Dn(t):new kn(t,e,n,null==i?1:i)}function kn(t,e,n,i){this.h=+t,this.c=+e,this.l=+n,this.opacity=+i}function In(t){if(isNaN(t.h))return new En(t.l,0,0,t.opacity);var e=t.h*pn;return new En(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}function On(t){return function(e,n){var i=t((e=Mn(e)).h,(n=Mn(n)).h),r=We(e.c,n.c),o=We(e.l,n.l),s=We(e.opacity,n.opacity);return function(t){return e.h=i(t),e.c=r(t),e.l=o(t),e.opacity=s(t),e+""}}}ue(En,Tn,le(ce,{brighter:function(t){return new En(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new En(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new De(Nn(3.1338561*(e=gn*Sn(e))-1.6168667*(t=mn*Sn(t))-.4906146*(n=vn*Sn(n))),Nn(-.9787684*e+1.9161415*t+.033454*n),Nn(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),ue(kn,Mn,le(ce,{brighter:function(t){return new kn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new kn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return In(this).rgb()}}));On(Ue),On(We);var Ln=-.29227,Pn=-.90649,jn=1.97294,Rn=jn*Pn,Hn=1.78277*jn,qn=1.78277*Ln- -.14861*Pn;function Fn(t,e,n,i){return 1===arguments.length?function(t){if(t instanceof Un)return new Un(t.h,t.s,t.l,t.opacity);t instanceof De||(t=Ne(t));var e=t.r/255,n=t.g/255,i=t.b/255,r=(qn*i+Rn*e-Hn*n)/(qn+Rn-Hn),o=i-r,s=(jn*(n-r)-Ln*o)/Pn,a=Math.sqrt(s*s+o*o)/(jn*r*(1-r)),u=a?Math.atan2(s,o)*dn-120:NaN;return new Un(u<0?u+360:u,a,r,t.opacity)}(t):new Un(t,e,n,null==i?1:i)}function Un(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}function Bn(t){return function e(n){function i(e,i){var r=t((e=Fn(e)).h,(i=Fn(i)).h),o=We(e.s,i.s),s=We(e.l,i.l),a=We(e.opacity,i.opacity);return function(t){return e.h=r(t),e.s=o(t),e.l=s(Math.pow(t,n)),e.opacity=a(t),e+""}}return n=+n,i.gamma=e,i}(1)}ue(Un,Fn,le(ce,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Un(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Un(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*pn,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),i=Math.cos(t),r=Math.sin(t);return new De(255*(e+n*(-.14861*i+1.78277*r)),255*(e+n*(Ln*i+Pn*r)),255*(e+n*(jn*i)),this.opacity)}}));Bn(Ue),Bn(We);var Wn,Yn,zn=0,Vn=0,$n=0,Xn=1e3,Kn=0,Gn=0,Qn=0,Zn="object"==typeof performance&&performance.now?performance:Date,Jn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function ti(){return Gn||(Jn(ei),Gn=Zn.now()+Qn)}function ei(){Gn=0}function ni(){this._call=this._time=this._next=null}function ii(t,e,n){var i=new ni;return i.restart(t,e,n),i}function ri(){Gn=(Kn=Zn.now())+Qn,zn=Vn=0;try{!function(){ti(),++zn;for(var t,e=Wn;e;)(t=Gn-e._time)>=0&&e._call.call(null,t),e=e._next;--zn}()}finally{zn=0,function(){var t,e,n=Wn,i=1/0;for(;n;)n._call?(i>n._time&&(i=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Wn=e);Yn=t,si(i)}(),Gn=0}}function oi(){var t=Zn.now(),e=t-Kn;e>Xn&&(Qn-=e,Kn=t)}function si(t){zn||(Vn&&(Vn=clearTimeout(Vn)),t-Gn>24?(t<1/0&&(Vn=setTimeout(ri,t-Zn.now()-Qn)),$n&&($n=clearInterval($n))):($n||(Kn=Zn.now(),$n=setInterval(oi,Xn)),zn=1,Jn(ri)))}ni.prototype=ii.prototype={constructor:ni,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?ti():+n)+(null==e?0:+e),this._next||Yn===this||(Yn?Yn._next=this:Wn=this,Yn=this),this._call=t,this._time=n,si()},stop:function(){this._call&&(this._call=null,this._time=1/0,si())}};var ai=function(t,e,n){var i=new ni;return e=null==e?0:+e,i.restart((function(n){i.stop(),t(n+e)}),e,n),i},ui=z("start","end","cancel","interrupt"),li=[],ci=0,hi=1,fi=2,pi=3,di=4,gi=5,mi=6,vi=function(t,e,n,i,r,o){var s=t.__transition;if(s){if(n in s)return}else t.__transition={};!function(t,e,n){var i,r=t.__transition;function o(u){var l,c,h,f;if(n.state!==hi)return a();for(l in r)if((f=r[l]).name===n.name){if(f.state===pi)return ai(o);f.state===di?(f.state=mi,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete r[l]):+l<e&&(f.state=mi,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete r[l])}if(ai((function(){n.state===pi&&(n.state=di,n.timer.restart(s,n.delay,n.time),s(u))})),n.state=fi,n.on.call("start",t,t.__data__,n.index,n.group),n.state===fi){for(n.state=pi,i=new Array(h=n.tween.length),l=0,c=-1;l<h;++l)(f=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(i[++c]=f);i.length=c+1}}function s(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(a),n.state=gi,1),o=-1,s=i.length;++o<s;)i[o].call(t,r);n.state===gi&&(n.on.call("end",t,t.__data__,n.index,n.group),a())}function a(){for(var i in n.state=mi,n.timer.stop(),delete r[e],r)return;delete t.__transition}r[e]=n,n.timer=ii((function(t){n.state=hi,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:i,group:r,on:ui,tween:li,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:ci})};function _i(t,e){var n=bi(t,e);if(n.state>ci)throw new Error("too late; already scheduled");return n}function yi(t,e){var n=bi(t,e);if(n.state>pi)throw new Error("too late; already running");return n}function bi(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var xi=function(t,e){var n,i,r,o=t.__transition,s=!0;if(o){for(r in e=null==e?null:e+"",o)(n=o[r]).name===e?(i=n.state>fi&&n.state<gi,n.state=mi,n.timer.stop(),n.on.call(i?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[r]):s=!1;s&&delete t.__transition}};function wi(t,e){var n,i;return function(){var r=yi(this,t),o=r.tween;if(o!==n)for(var s=0,a=(i=n=o).length;s<a;++s)if(i[s].name===e){(i=i.slice()).splice(s,1);break}r.tween=i}}function Ti(t,e,n){var i,r;if("function"!=typeof n)throw new Error;return function(){var o=yi(this,t),s=o.tween;if(s!==i){r=(i=s).slice();for(var a={name:e,value:n},u=0,l=r.length;u<l;++u)if(r[u].name===e){r[u]=a;break}u===l&&r.push(a)}o.tween=r}}function Ei(t,e,n){var i=t._id;return t.each((function(){var t=yi(this,i);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return bi(t,i).value[e]}}var Ci=function(t,e){var n;return("number"==typeof e?Xe:e instanceof Ee?Ye:(n=Ee(e))?(e=n,Ye):nn)(t,e)};function Si(t){return function(){this.removeAttribute(t)}}function Ni(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Ai(t,e,n){var i,r,o=n+"";return function(){var s=this.getAttribute(t);return s===o?null:s===i?r:r=e(i=s,n)}}function Di(t,e,n){var i,r,o=n+"";return function(){var s=this.getAttributeNS(t.space,t.local);return s===o?null:s===i?r:r=e(i=s,n)}}function Mi(t,e,n){var i,r,o;return function(){var s,a,u=n(this);if(null!=u)return(s=this.getAttribute(t))===(a=u+"")?null:s===i&&a===r?o:(r=a,o=e(i=s,u));this.removeAttribute(t)}}function ki(t,e,n){var i,r,o;return function(){var s,a,u=n(this);if(null!=u)return(s=this.getAttributeNS(t.space,t.local))===(a=u+"")?null:s===i&&a===r?o:(r=a,o=e(i=s,u));this.removeAttributeNS(t.space,t.local)}}function Ii(t,e){var n,i;function r(){var r=e.apply(this,arguments);return r!==i&&(n=(i=r)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e(n))}}(t,r)),n}return r._value=e,r}function Oi(t,e){var n,i;function r(){var r=e.apply(this,arguments);return r!==i&&(n=(i=r)&&function(t,e){return function(n){this.setAttribute(t,e(n))}}(t,r)),n}return r._value=e,r}function Li(t,e){return function(){_i(this,t).delay=+e.apply(this,arguments)}}function Pi(t,e){return e=+e,function(){_i(this,t).delay=e}}function ji(t,e){return function(){yi(this,t).duration=+e.apply(this,arguments)}}function Ri(t,e){return e=+e,function(){yi(this,t).duration=e}}function Hi(t,e){if("function"!=typeof e)throw new Error;return function(){yi(this,t).ease=e}}function qi(t,e,n){var i,r,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?_i:yi;return function(){var s=o(this,t),a=s.on;a!==i&&(r=(i=a).copy()).on(e,n),s.on=r}}var Fi=ne.prototype.constructor;function Ui(t){return function(){this.style.removeProperty(t)}}function Bi(t,e,n){var i,r;function o(){var o=e.apply(this,arguments);return o!==r&&(i=(r=o)&&function(t,e,n){return function(i){this.style.setProperty(t,e(i),n)}}(t,o,n)),i}return o._value=e,o}var Wi=0;function Yi(t,e,n,i){this._groups=t,this._parents=e,this._name=n,this._id=i}function zi(){return++Wi}var Vi=ne.prototype;Yi.prototype=function(t){return ne().transition(t)}.prototype={constructor:Yi,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=J(t));for(var i=this._groups,r=i.length,o=new Array(r),s=0;s<r;++s)for(var a,u,l=i[s],c=l.length,h=o[s]=new Array(c),f=0;f<c;++f)(a=l[f])&&(u=t.call(a,a.__data__,f,l))&&("__data__"in a&&(u.__data__=a.__data__),h[f]=u,vi(h[f],e,n,f,h,bi(a,n)));return new Yi(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=et(t));for(var i=this._groups,r=i.length,o=[],s=[],a=0;a<r;++a)for(var u,l=i[a],c=l.length,h=0;h<c;++h)if(u=l[h]){for(var f,p=t.call(u,u.__data__,h,l),d=bi(u,n),g=0,m=p.length;g<m;++g)(f=p[g])&&vi(f,e,n,g,p,d);o.push(p),s.push(u)}return new Yi(o,s,e,n)},filter:function(t){"function"!=typeof t&&(t=nt(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var o,s=e[r],a=s.length,u=i[r]=[],l=0;l<a;++l)(o=s[l])&&t.call(o,o.__data__,l,s)&&u.push(o);return new Yi(i,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,i=e.length,r=n.length,o=Math.min(i,r),s=new Array(i),a=0;a<o;++a)for(var u,l=e[a],c=n[a],h=l.length,f=s[a]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;a<i;++a)s[a]=e[a];return new Yi(s,this._parents,this._name,this._id)},selection:function(){return new Fi(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=zi(),i=this._groups,r=i.length,o=0;o<r;++o)for(var s,a=i[o],u=a.length,l=0;l<u;++l)if(s=a[l]){var c=bi(s,e);vi(s,t,n,l,a,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Yi(i,this._parents,t,n)},call:Vi.call,nodes:Vi.nodes,node:Vi.node,size:Vi.size,empty:Vi.empty,each:Vi.each,on:function(t,e){var n=this._id;return arguments.length<2?bi(this.node(),n).on.on(t):this.each(qi(n,t,e))},attr:function(t,e){var n=X(t),i="transform"===n?hn:Ci;return this.attrTween(t,"function"==typeof e?(n.local?ki:Mi)(n,i,Ei(this,"attr."+t,e)):null==e?(n.local?Ni:Si)(n):(n.local?Di:Ai)(n,i,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var i=X(t);return this.tween(n,(i.local?Ii:Oi)(i,e))},style:function(t,e,n){var i="transform"==(t+="")?cn:Ci;return null==e?this.styleTween(t,function(t,e){var n,i,r;return function(){var o=yt(this,t),s=(this.style.removeProperty(t),yt(this,t));return o===s?null:o===n&&s===i?r:r=e(n=o,i=s)}}(t,i)).on("end.style."+t,Ui(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var i,r,o;return function(){var s=yt(this,t),a=n(this),u=a+"";return null==a&&(this.style.removeProperty(t),u=a=yt(this,t)),s===u?null:s===i&&u===r?o:(r=u,o=e(i=s,a))}}(t,i,Ei(this,"style."+t,e))).each(function(t,e){var n,i,r,o,s="style."+e,a="end."+s;return function(){var u=yi(this,t),l=u.on,c=null==u.value[s]?o||(o=Ui(e)):void 0;l===n&&r===c||(i=(n=l).copy()).on(a,r=c),u.on=i}}(this._id,t)):this.styleTween(t,function(t,e,n){var i,r,o=n+"";return function(){var s=yt(this,t);return s===o?null:s===i?r:r=e(i=s,n)}}(t,i,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var i="style."+(t+="");if(arguments.length<2)return(i=this.tween(i))&&i._value;if(null==e)return this.tween(i,null);if("function"!=typeof e)throw new Error;return this.tween(i,Bi(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Ei(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var i,r=bi(this.node(),n).tween,o=0,s=r.length;o<s;++o)if((i=r[o]).name===t)return i.value;return null}return this.each((null==e?wi:Ti)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Li:Pi)(e,t)):bi(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?ji:Ri)(e,t)):bi(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(Hi(e,t)):bi(this.node(),e).ease},end:function(){var t,e,n=this,i=n._id,r=n.size();return new Promise((function(o,s){var a={value:s},u={value:function(){0==--r&&o()}};n.each((function(){var n=yi(this,i),r=n.on;r!==t&&((e=(t=r).copy())._.cancel.push(a),e._.interrupt.push(a),e._.end.push(u)),n.on=e}))}))}};(function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n})(3),function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),Math.PI;(function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n})(1.70158),function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158);var $i=2*Math.PI,Xi=(function t(e,n){var i=Math.asin(1/(e=Math.max(1,e)))*(n/=$i);function r(t){return e*Math.pow(2,10*--t)*Math.sin((i-t)/n)}return r.amplitude=function(e){return t(e,n*$i)},r.period=function(n){return t(e,n)},r}(1,.3),function t(e,n){var i=Math.asin(1/(e=Math.max(1,e)))*(n/=$i);function r(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+i)/n)}return r.amplitude=function(e){return t(e,n*$i)},r.period=function(n){return t(e,n)},r}(1,.3),function t(e,n){var i=Math.asin(1/(e=Math.max(1,e)))*(n/=$i);function r(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((i-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((i+t)/n))/2}return r.amplitude=function(e){return t(e,n*$i)},r.period=function(n){return t(e,n)},r}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function Ki(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Xi.time=ti(),Xi;return n}ne.prototype.interrupt=function(t){return this.each((function(){xi(this,t)}))},ne.prototype.transition=function(t){var e,n;t instanceof Yi?(e=t._id,t=t._name):(e=zi(),(n=Xi).time=ti(),t=null==t?null:t+"");for(var i=this._groups,r=i.length,o=0;o<r;++o)for(var s,a=i[o],u=a.length,l=0;l<u;++l)(s=a[l])&&vi(s,t,e,l,a,n||Ki(s,e));return new Yi(i,this._parents,t,e)};function Gi(t){return[+t[0],+t[1]]}function Qi(t){return[Gi(t[0]),Gi(t[1])]}["w","e"].map(Zi),["n","s"].map(Zi),["n","w","e","s","nw","ne","sw","se"].map(Zi);function Zi(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Ji=Math.PI,tr=2*Ji,er=tr-1e-6;function nr(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ir(){return new nr}nr.prototype=ir.prototype={constructor:nr,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,i){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+i)},bezierCurveTo:function(t,e,n,i,r,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +i+","+(this._x1=+r)+","+(this._y1=+o)},arcTo:function(t,e,n,i,r){t=+t,e=+e,n=+n,i=+i,r=+r;var o=this._x1,s=this._y1,a=n-t,u=i-e,l=o-t,c=s-e,h=l*l+c*c;if(r<0)throw new Error("negative radius: "+r);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(h>1e-6)if(Math.abs(c*a-u*l)>1e-6&&r){var f=n-o,p=i-s,d=a*a+u*u,g=f*f+p*p,m=Math.sqrt(d),v=Math.sqrt(h),_=r*Math.tan((Ji-Math.acos((d+h-g)/(2*m*v)))/2),y=_/v,b=_/m;Math.abs(y-1)>1e-6&&(this._+="L"+(t+y*l)+","+(e+y*c)),this._+="A"+r+","+r+",0,0,"+ +(c*f>l*p)+","+(this._x1=t+b*a)+","+(this._y1=e+b*u)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,i,r,o){t=+t,e=+e,o=!!o;var s=(n=+n)*Math.cos(i),a=n*Math.sin(i),u=t+s,l=e+a,c=1^o,h=o?i-r:r-i;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+l:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+u+","+l),n&&(h<0&&(h=h%tr+tr),h>er?this._+="A"+n+","+n+",0,1,"+c+","+(t-s)+","+(e-a)+"A"+n+","+n+",0,1,"+c+","+(this._x1=u)+","+(this._y1=l):h>1e-6&&(this._+="A"+n+","+n+",0,"+ +(h>=Ji)+","+c+","+(this._x1=t+n*Math.cos(r))+","+(this._y1=e+n*Math.sin(r))))},rect:function(t,e,n,i){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +i+"h"+-n+"Z"},toString:function(){return this._}};function rr(){}function or(t,e){var n=new rr;if(t instanceof rr)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var i,r=-1,o=t.length;if(null==e)for(;++r<o;)n.set(r,t[r]);else for(;++r<o;)n.set(e(i=t[r],r,t),i)}else if(t)for(var s in t)n.set(s,t[s]);return n}rr.prototype=or.prototype={constructor:rr,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var sr=or;function ar(){}var ur=sr.prototype;function lr(t,e){var n=new ar;if(t instanceof ar)t.each((function(t){n.add(t)}));else if(t){var i=-1,r=t.length;if(null==e)for(;++i<r;)n.add(t[i]);else for(;++i<r;)n.add(e(t[i],i,t))}return n}ar.prototype=lr.prototype={constructor:ar,has:ur.has,add:function(t){return this["$"+(t+="")]=t,this},remove:ur.remove,clear:ur.clear,values:ur.keys,size:ur.size,empty:ur.empty,each:ur.each};Array.prototype.slice;var cr={},hr={},fr=34,pr=10,dr=13;function gr(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+"]"})).join(",")+"}")}function mr(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var i in t)i in e||n.push(e[i]=i)})),n}function vr(t,e){var n=t+"",i=n.length;return i<e?new Array(e-i+1).join(0)+n:n}function _r(t){var e,n=t.getUTCHours(),i=t.getUTCMinutes(),r=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+vr(-e,6):e>9999?"+"+vr(e,6):vr(e,4))+"-"+vr(t.getUTCMonth()+1,2)+"-"+vr(t.getUTCDate(),2)+(o?"T"+vr(n,2)+":"+vr(i,2)+":"+vr(r,2)+"."+vr(o,3)+"Z":r?"T"+vr(n,2)+":"+vr(i,2)+":"+vr(r,2)+"Z":i||n?"T"+vr(n,2)+":"+vr(i,2)+"Z":"")}var yr=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function i(t,e){var i,r=[],o=t.length,s=0,a=0,u=o<=0,l=!1;function c(){if(u)return hr;if(l)return l=!1,cr;var e,i,r=s;if(t.charCodeAt(r)===fr){for(;s++<o&&t.charCodeAt(s)!==fr||t.charCodeAt(++s)===fr;);return(e=s)>=o?u=!0:(i=t.charCodeAt(s++))===pr?l=!0:i===dr&&(l=!0,t.charCodeAt(s)===pr&&++s),t.slice(r+1,e-1).replace(/""/g,'"')}for(;s<o;){if((i=t.charCodeAt(e=s++))===pr)l=!0;else if(i===dr)l=!0,t.charCodeAt(s)===pr&&++s;else if(i!==n)continue;return t.slice(r,e)}return u=!0,t.slice(r,o)}for(t.charCodeAt(o-1)===pr&&--o,t.charCodeAt(o-1)===dr&&--o;(i=c())!==hr;){for(var h=[];i!==cr&&i!==hr;)h.push(i),i=c();e&&null==(h=e(h,a++))||r.push(h)}return r}function r(e,n){return e.map((function(e){return n.map((function(t){return s(e[t])})).join(t)}))}function o(e){return e.map(s).join(t)}function s(t){return null==t?"":t instanceof Date?_r(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,r,o=i(t,(function(t,i){if(n)return n(t,i-1);r=t,n=e?function(t,e){var n=gr(t);return function(i,r){return e(n(i),r,t)}}(t,e):gr(t)}));return o.columns=r||[],o},parseRows:i,format:function(e,n){return null==n&&(n=mr(e)),[n.map(s).join(t)].concat(r(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=mr(t)),r(t,e).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},br=yr(","),xr=br.parse,wr=(br.parseRows,br.format,br.formatBody,br.formatRows,yr("\t")),Tr=wr.parse;wr.parseRows,wr.format,wr.formatBody,wr.formatRows;function Er(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Cr=function(t,e){return fetch(t,e).then(Er)};function Sr(t){return function(e,n,i){return 2===arguments.length&&"function"==typeof n&&(i=n,n=void 0),Cr(e,n).then((function(e){return t(e,i)}))}}var Nr=Sr(xr);Sr(Tr);function Ar(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function Dr(t){return function(e,n){return Cr(e,n).then((function(e){return(new DOMParser).parseFromString(e,t)}))}}Dr("application/xml"),Dr("text/html"),Dr("image/svg+xml");function Mr(t,e,n,i){if(isNaN(e)||isNaN(n))return t;var r,o,s,a,u,l,c,h,f,p=t._root,d={data:i},g=t._x0,m=t._y0,v=t._x1,_=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((l=e>=(o=(g+v)/2))?g=o:v=o,(c=n>=(s=(m+_)/2))?m=s:_=s,r=p,!(p=p[h=c<<1|l]))return r[h]=d,t;if(a=+t._x.call(null,p.data),u=+t._y.call(null,p.data),e===a&&n===u)return d.next=p,r?r[h]=d:t._root=d,t;do{r=r?r[h]=new Array(4):t._root=new Array(4),(l=e>=(o=(g+v)/2))?g=o:v=o,(c=n>=(s=(m+_)/2))?m=s:_=s}while((h=c<<1|l)==(f=(u>=s)<<1|a>=o));return r[f]=p,r[h]=d,t}var kr=function(t,e,n,i,r){this.node=t,this.x0=e,this.y0=n,this.x1=i,this.y1=r};function Ir(t){return t[0]}function Or(t){return t[1]}function Lr(t,e,n){var i=new Pr(null==e?Ir:e,null==n?Or:n,NaN,NaN,NaN,NaN);return null==t?i:i.addAll(t)}function Pr(t,e,n,i,r,o){this._x=t,this._y=e,this._x0=n,this._y0=i,this._x1=r,this._y1=o,this._root=void 0}function jr(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var Rr=Lr.prototype=Pr.prototype;Rr.copy=function(){var t,e,n=new Pr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),i=this._root;if(!i)return n;if(!i.length)return n._root=jr(i),n;for(t=[{source:i,target:n._root=new Array(4)}];i=t.pop();)for(var r=0;r<4;++r)(e=i.source[r])&&(e.length?t.push({source:e,target:i.target[r]=new Array(4)}):i.target[r]=jr(e));return n},Rr.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return Mr(this.cover(e,n),e,n,t)},Rr.addAll=function(t){var e,n,i,r,o=t.length,s=new Array(o),a=new Array(o),u=1/0,l=1/0,c=-1/0,h=-1/0;for(n=0;n<o;++n)isNaN(i=+this._x.call(null,e=t[n]))||isNaN(r=+this._y.call(null,e))||(s[n]=i,a[n]=r,i<u&&(u=i),i>c&&(c=i),r<l&&(l=r),r>h&&(h=r));if(u>c||l>h)return this;for(this.cover(u,l).cover(c,h),n=0;n<o;++n)Mr(this,s[n],a[n],t[n]);return this},Rr.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,i=this._y0,r=this._x1,o=this._y1;if(isNaN(n))r=(n=Math.floor(t))+1,o=(i=Math.floor(e))+1;else{for(var s,a,u=r-n,l=this._root;n>t||t>=r||i>e||e>=o;)switch(a=(e<i)<<1|t<n,(s=new Array(4))[a]=l,l=s,u*=2,a){case 0:r=n+u,o=i+u;break;case 1:n=r-u,o=i+u;break;case 2:r=n+u,i=o-u;break;case 3:n=r-u,i=o-u}this._root&&this._root.length&&(this._root=l)}return this._x0=n,this._y0=i,this._x1=r,this._y1=o,this},Rr.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},Rr.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Rr.find=function(t,e,n){var i,r,o,s,a,u,l,c=this._x0,h=this._y0,f=this._x1,p=this._y1,d=[],g=this._root;for(g&&d.push(new kr(g,c,h,f,p)),null==n?n=1/0:(c=t-n,h=e-n,f=t+n,p=e+n,n*=n);u=d.pop();)if(!(!(g=u.node)||(r=u.x0)>f||(o=u.y0)>p||(s=u.x1)<c||(a=u.y1)<h))if(g.length){var m=(r+s)/2,v=(o+a)/2;d.push(new kr(g[3],m,v,s,a),new kr(g[2],r,v,m,a),new kr(g[1],m,o,s,v),new kr(g[0],r,o,m,v)),(l=(e>=v)<<1|t>=m)&&(u=d[d.length-1],d[d.length-1]=d[d.length-1-l],d[d.length-1-l]=u)}else{var _=t-+this._x.call(null,g.data),y=e-+this._y.call(null,g.data),b=_*_+y*y;if(b<n){var x=Math.sqrt(n=b);c=t-x,h=e-x,f=t+x,p=e+x,i=g.data}}return i},Rr.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(s=+this._y.call(null,t)))return this;var e,n,i,r,o,s,a,u,l,c,h,f,p=this._root,d=this._x0,g=this._y0,m=this._x1,v=this._y1;if(!p)return this;if(p.length)for(;;){if((l=o>=(a=(d+m)/2))?d=a:m=a,(c=s>=(u=(g+v)/2))?g=u:v=u,e=p,!(p=p[h=c<<1|l]))return this;if(!p.length)break;(e[h+1&3]||e[h+2&3]||e[h+3&3])&&(n=e,f=h)}for(;p.data!==t;)if(i=p,!(p=p.next))return this;return(r=p.next)&&delete p.next,i?(r?i.next=r:delete i.next,this):e?(r?e[h]=r:delete e[h],(p=e[0]||e[1]||e[2]||e[3])&&p===(e[3]||e[2]||e[1]||e[0])&&!p.length&&(n?n[f]=p:this._root=p),this):(this._root=r,this)},Rr.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},Rr.root=function(){return this._root},Rr.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},Rr.visit=function(t){var e,n,i,r,o,s,a=[],u=this._root;for(u&&a.push(new kr(u,this._x0,this._y0,this._x1,this._y1));e=a.pop();)if(!t(u=e.node,i=e.x0,r=e.y0,o=e.x1,s=e.y1)&&u.length){var l=(i+o)/2,c=(r+s)/2;(n=u[3])&&a.push(new kr(n,l,c,o,s)),(n=u[2])&&a.push(new kr(n,i,c,l,s)),(n=u[1])&&a.push(new kr(n,l,r,o,c)),(n=u[0])&&a.push(new kr(n,i,r,l,c))}return this},Rr.visitAfter=function(t){var e,n=[],i=[];for(this._root&&n.push(new kr(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var r=e.node;if(r.length){var o,s=e.x0,a=e.y0,u=e.x1,l=e.y1,c=(s+u)/2,h=(a+l)/2;(o=r[0])&&n.push(new kr(o,s,a,c,h)),(o=r[1])&&n.push(new kr(o,c,a,u,h)),(o=r[2])&&n.push(new kr(o,s,h,c,l)),(o=r[3])&&n.push(new kr(o,c,h,u,l))}i.push(e)}for(;e=i.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},Rr.x=function(t){return arguments.length?(this._x=t,this):this._x},Rr.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Hr=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,i=t.slice(0,n);return[i.length>1?i[0]+i.slice(2):i,+t.slice(n+1)]},qr=function(t){return(t=Hr(Math.abs(t)))?t[1]:NaN},Fr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Ur(t){if(!(e=Fr.exec(t)))throw new Error("invalid format: "+t);var e;return new Br({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Br(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}Ur.prototype=Br.prototype,Br.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Wr,Yr,zr,Vr,$r=function(t){t:for(var e,n=t.length,i=1,r=-1;i<n;++i)switch(t[i]){case".":r=e=i;break;case"0":0===r&&(r=i),e=i;break;default:if(r>0){if(!+t[i])break t;r=0}}return r>0?t.slice(0,r)+t.slice(e+1):t},Xr=function(t,e){var n=Hr(t,e);if(!n)return t+"";var i=n[0],r=n[1];return r<0?"0."+new Array(-r).join("0")+i:i.length>r+1?i.slice(0,r+1)+"."+i.slice(r+1):i+new Array(r-i.length+2).join("0")},Kr={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Xr(100*t,e)},r:Xr,s:function(t,e){var n=Hr(t,e);if(!n)return t+"";var i=n[0],r=n[1],o=r-(Wr=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,s=i.length;return o===s?i:o>s?i+new Array(o-s+1).join("0"):o>0?i.slice(0,o)+"."+i.slice(o):"0."+new Array(1-o).join("0")+Hr(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Gr=function(t){return t},Qr=Array.prototype.map,Zr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Yr=function(t){var e,n,i=void 0===t.grouping||void 0===t.thousands?Gr:(e=Qr.call(t.grouping,Number),n=t.thousands+"",function(t,i){for(var r=t.length,o=[],s=0,a=e[0],u=0;r>0&&a>0&&(u+a+1>i&&(a=Math.max(1,i-u)),o.push(t.substring(r-=a,r+a)),!((u+=a+1)>i));)a=e[s=(s+1)%e.length];return o.reverse().join(n)}),r=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",s=void 0===t.decimal?".":t.decimal+"",a=void 0===t.numerals?Gr:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(Qr.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function h(t){var e=(t=Ur(t)).fill,n=t.align,h=t.sign,f=t.symbol,p=t.zero,d=t.width,g=t.comma,m=t.precision,v=t.trim,_=t.type;"n"===_?(g=!0,_="g"):Kr[_]||(void 0===m&&(m=12),v=!0,_="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var y="$"===f?r:"#"===f&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",b="$"===f?o:/[%p]/.test(_)?u:"",x=Kr[_],w=/[defgprs%]/.test(_);function T(t){var r,o,u,f=y,T=b;if("c"===_)T=x(t)+T,t="";else{var E=(t=+t)<0;if(t=isNaN(t)?c:x(Math.abs(t),m),v&&(t=$r(t)),E&&0==+t&&(E=!1),f=(E?"("===h?h:l:"-"===h||"("===h?"":h)+f,T=("s"===_?Zr[8+Wr/3]:"")+T+(E&&"("===h?")":""),w)for(r=-1,o=t.length;++r<o;)if(48>(u=t.charCodeAt(r))||u>57){T=(46===u?s+t.slice(r+1):t.slice(r))+T,t=t.slice(0,r);break}}g&&!p&&(t=i(t,1/0));var C=f.length+t.length+T.length,S=C<d?new Array(d-C+1).join(e):"";switch(g&&p&&(t=i(S+t,S.length?d-T.length:1/0),S=""),n){case"<":t=f+t+T+S;break;case"=":t=f+S+t+T;break;case"^":t=S.slice(0,C=S.length>>1)+f+t+T+S.slice(C);break;default:t=S+f+t+T}return a(t)}return m=void 0===m?6:/[gprs]/.test(_)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),T.toString=function(){return t+""},T}return{format:h,formatPrefix:function(t,e){var n=h(((t=Ur(t)).type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(qr(e)/3))),r=Math.pow(10,-i),o=Zr[8+i/3];return function(t){return n(r*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),zr=Yr.format,Vr=Yr.formatPrefix;var Jr=function(){return new to};function to(){this.reset()}to.prototype={constructor:to,reset:function(){this.s=this.t=0},add:function(t){no(eo,t,this.t),no(this,eo.s,this.s),this.s?this.t+=eo.t:this.s=eo.t},valueOf:function(){return this.s}};var eo=new to;function no(t,e,n){var i=t.s=e+n,r=i-e,o=i-r;t.t=e-o+(n-r)}var io=1e-6,ro=1e-12,oo=Math.PI,so=oo/2,ao=oo/4,uo=2*oo,lo=oo/180,co=Math.abs,ho=Math.atan,fo=Math.atan2,po=Math.cos,go=(Math.ceil,Math.exp),mo=(Math.floor,Math.log),vo=(Math.pow,Math.sin),_o=Math.sign||function(t){return t>0?1:t<0?-1:0},yo=Math.sqrt,bo=Math.tan;function xo(t){return t>1?0:t<-1?oo:Math.acos(t)}function wo(t){return t>1?so:t<-1?-so:Math.asin(t)}function To(){}Jr(),Jr();function Eo(t){var e=t[0],n=t[1],i=po(n);return[i*po(e),i*vo(e),vo(n)]}function Co(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function So(t){var e=yo(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}Jr();function No(t,e){return[co(t)>oo?t+Math.round(-t/uo)*uo:t,e]}No.invert=No;var Ao=function(){var t,e=[];return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:To,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}},Do=function(t,e){return co(t[0]-e[0])<io&&co(t[1]-e[1])<io};function Mo(t,e,n,i){this.x=t,this.z=e,this.o=n,this.e=i,this.v=!1,this.n=this.p=null}var ko=function(t,e,n,i,r){var o,s,a=[],u=[];if(t.forEach((function(t){if(!((e=t.length-1)<=0)){var e,n,i=t[0],s=t[e];if(Do(i,s)){for(r.lineStart(),o=0;o<e;++o)r.point((i=t[o])[0],i[1]);r.lineEnd()}else a.push(n=new Mo(i,t,null,!0)),u.push(n.o=new Mo(i,null,n,!1)),a.push(n=new Mo(s,t,null,!1)),u.push(n.o=new Mo(s,null,n,!0))}})),a.length){for(u.sort(e),Io(a),Io(u),o=0,s=u.length;o<s;++o)u[o].e=n=!n;for(var l,c,h=a[0];;){for(var f=h,p=!0;f.v;)if((f=f.n)===h)return;l=f.z,r.lineStart();do{if(f.v=f.o.v=!0,f.e){if(p)for(o=0,s=l.length;o<s;++o)r.point((c=l[o])[0],c[1]);else i(f.x,f.n.x,1,r);f=f.n}else{if(p)for(l=f.p.z,o=l.length-1;o>=0;--o)r.point((c=l[o])[0],c[1]);else i(f.x,f.p.x,-1,r);f=f.p}l=(f=f.o).z,p=!p}while(!f.v);r.lineEnd()}}};function Io(t){if(e=t.length){for(var e,n,i=0,r=t[0];++i<e;)r.n=n=t[i],n.p=r,r=n;r.n=n=t[0],n.p=r}}var Oo=Jr();function Lo(t){return co(t[0])<=oo?t[0]:_o(t[0])*((co(t[0])+oo)%uo-oo)}var Po=function(t,e){var n=Lo(e),i=e[1],r=vo(i),o=[vo(n),-po(n),0],s=0,a=0;Oo.reset(),1===r?i=so+io:-1===r&&(i=-so-io);for(var u=0,l=t.length;u<l;++u)if(h=(c=t[u]).length)for(var c,h,f=c[h-1],p=Lo(f),d=f[1]/2+ao,g=vo(d),m=po(d),v=0;v<h;++v,p=y,g=x,m=w,f=_){var _=c[v],y=Lo(_),b=_[1]/2+ao,x=vo(b),w=po(b),T=y-p,E=T>=0?1:-1,C=E*T,S=C>oo,N=g*x;if(Oo.add(fo(N*E*vo(C),m*w+N*po(C))),s+=S?T+E*uo:T,S^p>=n^y>=n){var A=Co(Eo(f),Eo(_));So(A);var D=Co(o,A);So(D);var M=(S^T>=0?-1:1)*wo(D[2]);(i>M||i===M&&(A[0]||A[1]))&&(a+=S^T>=0?1:-1)}}return(s<-io||s<io&&Oo<-io)^1&a},jo=function(t,e,n,i){return function(r){var o,s,a,u=e(r),l=Ao(),c=e(l),h=!1,f={point:p,lineStart:g,lineEnd:m,polygonStart:function(){f.point=v,f.lineStart=_,f.lineEnd=y,s=[],o=[]},polygonEnd:function(){f.point=p,f.lineStart=g,f.lineEnd=m,s=T(s);var t=Po(o,i);s.length?(h||(r.polygonStart(),h=!0),ko(s,Ho,t,n,r)):t&&(h||(r.polygonStart(),h=!0),r.lineStart(),n(null,null,1,r),r.lineEnd()),h&&(r.polygonEnd(),h=!1),s=o=null},sphere:function(){r.polygonStart(),r.lineStart(),n(null,null,1,r),r.lineEnd(),r.polygonEnd()}};function p(e,n){t(e,n)&&r.point(e,n)}function d(t,e){u.point(t,e)}function g(){f.point=d,u.lineStart()}function m(){f.point=p,u.lineEnd()}function v(t,e){a.push([t,e]),c.point(t,e)}function _(){c.lineStart(),a=[]}function y(){v(a[0][0],a[0][1]),c.lineEnd();var t,e,n,i,u=c.clean(),f=l.result(),p=f.length;if(a.pop(),o.push(a),a=null,p)if(1&u){if((e=(n=f[0]).length-1)>0){for(h||(r.polygonStart(),h=!0),r.lineStart(),t=0;t<e;++t)r.point((i=n[t])[0],i[1]);r.lineEnd()}}else p>1&&2&u&&f.push(f.pop().concat(f.shift())),s.push(f.filter(Ro))}return f}};function Ro(t){return t.length>1}function Ho(t,e){return((t=t.x)[0]<0?t[1]-so-io:so-t[1])-((e=e.x)[0]<0?e[1]-so-io:so-e[1])}jo((function(){return!0}),(function(t){var e,n=NaN,i=NaN,r=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(o,s){var a=o>0?oo:-oo,u=co(o-n);co(u-oo)<io?(t.point(n,i=(i+s)/2>0?so:-so),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(a,i),t.point(o,i),e=0):r!==a&&u>=oo&&(co(n-r)<io&&(n-=r*io),co(o-a)<io&&(o-=a*io),i=function(t,e,n,i){var r,o,s=vo(t-n);return co(s)>io?ho((vo(e)*(o=po(i))*vo(n)-vo(i)*(r=po(e))*vo(t))/(r*o*s)):(e+i)/2}(n,i,o,s),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(a,i),e=0),t.point(n=o,i=s),r=a},lineEnd:function(){t.lineEnd(),n=i=NaN},clean:function(){return 2-e}}}),(function(t,e,n,i){var r;if(null==t)r=n*so,i.point(-oo,r),i.point(0,r),i.point(oo,r),i.point(oo,0),i.point(oo,-r),i.point(0,-r),i.point(-oo,-r),i.point(-oo,0),i.point(-oo,r);else if(co(t[0]-e[0])>io){var o=t[0]<e[0]?oo:-oo;r=n*o/2,i.point(-o,r),i.point(0,r),i.point(o,r)}else i.point(e[0],e[1])}),[-oo,-so]);Jr();Jr(),Jr();function qo(t){this._context=t}qo.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,uo)}},result:To};Jr();function Fo(){this._string=[]}function Uo(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}Fo.prototype={_radius:4.5,_circle:Uo(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=Uo(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function Bo(t){return function(e){var n=new Wo;for(var i in t)n[i]=t[i];return n.stream=e,n}}function Wo(){}Wo.prototype={constructor:Wo,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};po(30*lo);Bo({point:function(t,e){this.stream.point(t*lo,e*lo)}});function Yo(t){return function(e,n){var i=po(e),r=po(n),o=t(i*r);return[o*r*vo(e),o*vo(n)]}}function zo(t){return function(e,n){var i=yo(e*e+n*n),r=t(i),o=vo(r),s=po(r);return[fo(e*o,i*s),wo(i&&n*o/i)]}}var Vo=Yo((function(t){return yo(2/(1+t))}));Vo.invert=zo((function(t){return 2*wo(t/2)}));var $o=Yo((function(t){return(t=xo(t))&&t/vo(t)}));$o.invert=zo((function(t){return t}));function Xo(t,e){return[t,mo(bo((so+e)/2))]}Xo.invert=function(t,e){return[t,2*ho(go(e))-so]};function Ko(t,e){return[t,e]}Ko.invert=Ko;var Go=1.340264,Qo=-.081106,Zo=893e-6,Jo=.003796,ts=yo(3)/2;function es(t,e){var n=wo(ts*vo(e)),i=n*n,r=i*i*i;return[t*po(n)/(ts*(Go+3*Qo*i+r*(7*Zo+9*Jo*i))),n*(Go+Qo*i+r*(Zo+Jo*i))]}es.invert=function(t,e){for(var n,i=e,r=i*i,o=r*r*r,s=0;s<12&&(o=(r=(i-=n=(i*(Go+Qo*r+o*(Zo+Jo*r))-e)/(Go+3*Qo*r+o*(7*Zo+9*Jo*r)))*i)*r*r,!(co(n)<ro));++s);return[ts*t*(Go+3*Qo*r+o*(7*Zo+9*Jo*r))/po(i),wo(vo(i)/ts)]};function ns(t,e){var n=po(e),i=po(t)*n;return[n*vo(t)/i,vo(e)/i]}ns.invert=zo(ho);function is(t,e){var n=e*e,i=n*n;return[t*(.8707-.131979*n+i*(i*(.003971*n-.001529*i)-.013791)),e*(1.007226+n*(.015085+i*(.028874*n-.044475-.005916*i)))]}is.invert=function(t,e){var n,i=e,r=25;do{var o=i*i,s=o*o;i-=n=(i*(1.007226+o*(.015085+s*(.028874*o-.044475-.005916*s)))-e)/(1.007226+o*(.045255+s*(.259866*o-.311325-.005916*11*s)))}while(co(n)>io&&--r>0);return[t/(.8707+(o=i*i)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),i]};function rs(t,e){return[po(e)*vo(t),vo(e)]}rs.invert=zo(wo);function os(t,e){var n=po(e),i=1+po(t)*n;return[n*vo(t)/i,vo(e)/i]}os.invert=zo((function(t){return 2*ho(t)}));function ss(t,e){return[mo(bo((so+e)/2)),-t]}ss.invert=function(t,e){return[-e,2*ho(go(t))-so]};function as(t){var e=0,n=t.children,i=n&&n.length;if(i)for(;--i>=0;)e+=n[i].value;else e=1;t.value=e}function us(t,e){var n,i,r,o,s,a=new fs(t),u=+t.value&&(a.value=t.value),l=[a];for(null==e&&(e=ls);n=l.pop();)if(u&&(n.value=+n.data.value),(r=e(n.data))&&(s=r.length))for(n.children=new Array(s),o=s-1;o>=0;--o)l.push(i=n.children[o]=new fs(r[o])),i.parent=n,i.depth=n.depth+1;return a.eachBefore(hs)}function ls(t){return t.children}function cs(t){t.data=t.data.data}function hs(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function fs(t){this.data=t,this.depth=this.height=0,this.parent=null}fs.prototype=us.prototype={constructor:fs,count:function(){return this.eachAfter(as)},each:function(t){var e,n,i,r,o=this,s=[o];do{for(e=s.reverse(),s=[];o=e.pop();)if(t(o),n=o.children)for(i=0,r=n.length;i<r;++i)s.push(n[i])}while(s.length);return this},eachAfter:function(t){for(var e,n,i,r=this,o=[r],s=[];r=o.pop();)if(s.push(r),e=r.children)for(n=0,i=e.length;n<i;++n)o.push(e[n]);for(;r=s.pop();)t(r);return this},eachBefore:function(t){for(var e,n,i=this,r=[i];i=r.pop();)if(t(i),e=i.children)for(n=e.length-1;n>=0;--n)r.push(e[n]);return this},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,i=e.children,r=i&&i.length;--r>=0;)n+=i[r].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),i=e.ancestors(),r=null;t=n.pop(),e=i.pop();for(;t===e;)r=t,t=n.pop(),e=i.pop();return r}(e,t),i=[e];e!==n;)e=e.parent,i.push(e);for(var r=i.length;t!==n;)i.splice(r,0,t),t=t.parent;return i},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return us(this).eachBefore(cs)}};var ps=Array.prototype.slice;var ds=function(t){for(var e,n,i=0,r=(t=function(t){for(var e,n,i=t.length;i;)n=Math.random()*i--|0,e=t[i],t[i]=t[n],t[n]=e;return t}(ps.call(t))).length,o=[];i<r;)e=t[i],n&&vs(n,e)?++i:(n=ys(o=gs(o,e)),i=0);return n};function gs(t,e){var n,i;if(_s(e,t))return[e];for(n=0;n<t.length;++n)if(ms(e,t[n])&&_s(bs(t[n],e),t))return[t[n],e];for(n=0;n<t.length-1;++n)for(i=n+1;i<t.length;++i)if(ms(bs(t[n],t[i]),e)&&ms(bs(t[n],e),t[i])&&ms(bs(t[i],e),t[n])&&_s(xs(t[n],t[i],e),t))return[t[n],t[i],e];throw new Error}function ms(t,e){var n=t.r-e.r,i=e.x-t.x,r=e.y-t.y;return n<0||n*n<i*i+r*r}function vs(t,e){var n=t.r-e.r+1e-6,i=e.x-t.x,r=e.y-t.y;return n>0&&n*n>i*i+r*r}function _s(t,e){for(var n=0;n<e.length;++n)if(!vs(t,e[n]))return!1;return!0}function ys(t){switch(t.length){case 1:return{x:(e=t[0]).x,y:e.y,r:e.r};case 2:return bs(t[0],t[1]);case 3:return xs(t[0],t[1],t[2])}var e}function bs(t,e){var n=t.x,i=t.y,r=t.r,o=e.x,s=e.y,a=e.r,u=o-n,l=s-i,c=a-r,h=Math.sqrt(u*u+l*l);return{x:(n+o+u/h*c)/2,y:(i+s+l/h*c)/2,r:(h+r+a)/2}}function xs(t,e,n){var i=t.x,r=t.y,o=t.r,s=e.x,a=e.y,u=e.r,l=n.x,c=n.y,h=n.r,f=i-s,p=i-l,d=r-a,g=r-c,m=u-o,v=h-o,_=i*i+r*r-o*o,y=_-s*s-a*a+u*u,b=_-l*l-c*c+h*h,x=p*d-f*g,w=(d*b-g*y)/(2*x)-i,T=(g*m-d*v)/x,E=(p*y-f*b)/(2*x)-r,C=(f*v-p*m)/x,S=T*T+C*C-1,N=2*(o+w*T+E*C),A=w*w+E*E-o*o,D=-(S?(N+Math.sqrt(N*N-4*S*A))/(2*S):A/N);return{x:i+w+T*D,y:r+E+C*D,r:D}}function ws(t,e,n){var i,r,o,s,a=t.x-e.x,u=t.y-e.y,l=a*a+u*u;l?(r=e.r+n.r,r*=r,s=t.r+n.r,r>(s*=s)?(i=(l+s-r)/(2*l),o=Math.sqrt(Math.max(0,s/l-i*i)),n.x=t.x-i*a-o*u,n.y=t.y-i*u+o*a):(i=(l+r-s)/(2*l),o=Math.sqrt(Math.max(0,r/l-i*i)),n.x=e.x+i*a-o*u,n.y=e.y+i*u+o*a)):(n.x=e.x+n.r,n.y=e.y)}function Ts(t,e){var n=t.r+e.r-1e-6,i=e.x-t.x,r=e.y-t.y;return n>0&&n*n>i*i+r*r}function Es(t){var e=t._,n=t.next._,i=e.r+n.r,r=(e.x*n.r+n.x*e.r)/i,o=(e.y*n.r+n.y*e.r)/i;return r*r+o*o}function Cs(t){this._=t,this.next=null,this.previous=null}function Ss(t){if(!(r=t.length))return 0;var e,n,i,r,o,s,a,u,l,c,h;if((e=t[0]).x=0,e.y=0,!(r>1))return e.r;if(n=t[1],e.x=-n.r,n.x=e.r,n.y=0,!(r>2))return e.r+n.r;ws(n,e,i=t[2]),e=new Cs(e),n=new Cs(n),i=new Cs(i),e.next=i.previous=n,n.next=e.previous=i,i.next=n.previous=e;t:for(a=3;a<r;++a){ws(e._,n._,i=t[a]),i=new Cs(i),u=n.next,l=e.previous,c=n._.r,h=e._.r;do{if(c<=h){if(Ts(u._,i._)){n=u,e.next=n,n.previous=e,--a;continue t}c+=u._.r,u=u.next}else{if(Ts(l._,i._)){(e=l).next=n,n.previous=e,--a;continue t}h+=l._.r,l=l.previous}}while(u!==l.next);for(i.previous=e,i.next=n,e.next=n.previous=n=i,o=Es(e);(i=i.next)!==n;)(s=Es(i))<o&&(e=i,o=s);n=e.next}for(e=[n._],i=n;(i=i.next)!==n;)e.push(i._);for(i=ds(e),a=0;a<r;++a)(e=t[a]).x-=i.x,e.y-=i.y;return i.r}function Ns(t){return null==t?null:As(t)}function As(t){if("function"!=typeof t)throw new Error;return t}function Ds(){return 0}var Ms=function(t){return function(){return t}};function ks(t){return Math.sqrt(t.value)}var Is=function(){var t=null,e=1,n=1,i=Ds;function r(r){return r.x=e/2,r.y=n/2,t?r.eachBefore(Os(t)).eachAfter(Ls(i,.5)).eachBefore(Ps(1)):r.eachBefore(Os(ks)).eachAfter(Ls(Ds,1)).eachAfter(Ls(i,r.r/Math.min(e,n))).eachBefore(Ps(Math.min(e,n)/(2*r.r))),r}return r.radius=function(e){return arguments.length?(t=Ns(e),r):t},r.size=function(t){return arguments.length?(e=+t[0],n=+t[1],r):[e,n]},r.padding=function(t){return arguments.length?(i="function"==typeof t?t:Ms(+t),r):i},r};function Os(t){return function(e){e.children||(e.r=Math.max(0,+t(e)||0))}}function Ls(t,e){return function(n){if(i=n.children){var i,r,o,s=i.length,a=t(n)*e||0;if(a)for(r=0;r<s;++r)i[r].r+=a;if(o=Ss(i),a)for(r=0;r<s;++r)i[r].r-=a;n.r=o+a}}}function Ps(t){return function(e){var n=e.parent;e.r*=t,n&&(e.x=n.x+t*e.x,e.y=n.y+t*e.y)}}var js=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},Rs=function(t,e,n,i,r){for(var o,s=t.children,a=-1,u=s.length,l=t.value&&(i-e)/t.value;++a<u;)(o=s[a]).y0=n,o.y1=r,o.x0=e,o.x1=e+=o.value*l},Hs="$",qs={depth:-1},Fs={};function Us(t){return t.id}function Bs(t){return t.parentId}function Ws(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}Ws.prototype=Object.create(fs.prototype);var Ys=function(t,e,n,i,r){for(var o,s=t.children,a=-1,u=s.length,l=t.value&&(r-n)/t.value;++a<u;)(o=s[a]).x0=e,o.x1=i,o.y0=n,o.y1=n+=o.value*l},zs=(1+Math.sqrt(5))/2;function Vs(t,e,n,i,r,o){for(var s,a,u,l,c,h,f,p,d,g,m,v=[],_=e.children,y=0,b=0,x=_.length,w=e.value;y<x;){u=r-n,l=o-i;do{c=_[b++].value}while(!c&&b<x);for(h=f=c,m=c*c*(g=Math.max(l/u,u/l)/(w*t)),d=Math.max(f/m,m/h);b<x;++b){if(c+=a=_[b].value,a<h&&(h=a),a>f&&(f=a),m=c*c*g,(p=Math.max(f/m,m/h))>d){c-=a;break}d=p}v.push(s={value:c,dice:u<l,children:_.slice(y,b)}),s.dice?Rs(s,n,i,r,w?i+=l*c/w:o):Ys(s,n,i,w?n+=u*c/w:r,o),w-=c,y=b}return v}var $s=function t(e){function n(t,n,i,r,o){Vs(e,t,n,i,r,o)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(zs),Xs=function(){var t=$s,e=!1,n=1,i=1,r=[0],o=Ds,s=Ds,a=Ds,u=Ds,l=Ds;function c(t){return t.x0=t.y0=0,t.x1=n,t.y1=i,t.eachBefore(h),r=[0],e&&t.eachBefore(js),t}function h(e){var n=r[e.depth],i=e.x0+n,c=e.y0+n,h=e.x1-n,f=e.y1-n;h<i&&(i=h=(i+h)/2),f<c&&(c=f=(c+f)/2),e.x0=i,e.y0=c,e.x1=h,e.y1=f,e.children&&(n=r[e.depth+1]=o(e)/2,i+=l(e)-n,c+=s(e)-n,(h-=a(e)-n)<i&&(i=h=(i+h)/2),(f-=u(e)-n)<c&&(c=f=(c+f)/2),t(e,i,c,h,f))}return c.round=function(t){return arguments.length?(e=!!t,c):e},c.size=function(t){return arguments.length?(n=+t[0],i=+t[1],c):[n,i]},c.tile=function(e){return arguments.length?(t=As(e),c):t},c.padding=function(t){return arguments.length?c.paddingInner(t).paddingOuter(t):c.paddingInner()},c.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:Ms(+t),c):o},c.paddingOuter=function(t){return arguments.length?c.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):c.paddingTop()},c.paddingTop=function(t){return arguments.length?(s="function"==typeof t?t:Ms(+t),c):s},c.paddingRight=function(t){return arguments.length?(a="function"==typeof t?t:Ms(+t),c):a},c.paddingBottom=function(t){return arguments.length?(u="function"==typeof t?t:Ms(+t),c):u},c.paddingLeft=function(t){return arguments.length?(l="function"==typeof t?t:Ms(+t),c):l},c};(function t(e){function n(t,n,i,r,o){if((s=t._squarify)&&s.ratio===e)for(var s,a,u,l,c,h=-1,f=s.length,p=t.value;++h<f;){for(u=(a=s[h]).children,l=a.value=0,c=u.length;l<c;++l)a.value+=u[l].value;a.dice?Rs(a,n,i,r,i+=(o-i)*a.value/p):Ys(a,n,i,n+=(r-n)*a.value/p,o),p-=a.value}else t._squarify=s=Vs(e,t,n,i,r,o),s.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n})(zs);var Ks=function(){return Math.random()},Gs=(function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(Ks),function t(e){function n(t,n){var i,r;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=i)o=i,i=null;else do{i=2*e()-1,o=2*e()-1,r=i*i+o*o}while(!r||r>1);return t+n*o*Math.sqrt(-2*Math.log(r)/r)}}return n.source=t,n}(Ks)),Qs=(function t(e){function n(){var t=Gs.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(Ks),function t(e){function n(t){return function(){for(var n=0,i=0;i<t;++i)n+=e();return n}}return n.source=t,n}(Ks));(function t(e){function n(t){var n=Qs.source(e)(t);return function(){return n()/t}}return n.source=t,n})(Ks),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(Ks);function Zs(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}var Js=Array.prototype,ta=Js.map,ea=Js.slice;var na=function(t){return function(){return t}},ia=function(t){return+t},ra=[0,1];function oa(t){return t}function sa(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:na(isNaN(e)?NaN:.5)}function aa(t){var e,n=t[0],i=t[t.length-1];return n>i&&(e=n,n=i,i=e),function(t){return Math.max(n,Math.min(i,t))}}function ua(t,e,n){var i=t[0],r=t[1],o=e[0],s=e[1];return r<i?(i=sa(r,i),o=n(s,o)):(i=sa(i,r),o=n(o,s)),function(t){return o(i(t))}}function la(t,e,n){var i=Math.min(t.length,e.length)-1,r=new Array(i),o=new Array(i),s=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++s<i;)r[s]=sa(t[s],t[s+1]),o[s]=n(e[s],e[s+1]);return function(e){var n=a(t,e,1,i)-1;return o[n](r[n](e))}}function ca(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function ha(){var t,e,n,i,r,o,s=ra,a=ra,u=rn,l=oa;function c(){return i=Math.min(s.length,a.length)>2?la:ua,r=o=null,h}function h(e){return isNaN(e=+e)?n:(r||(r=i(s.map(t),a,u)))(t(l(e)))}return h.invert=function(n){return l(e((o||(o=i(a,s.map(t),Xe)))(n)))},h.domain=function(t){return arguments.length?(s=ta.call(t,ia),l===oa||(l=aa(s)),c()):s.slice()},h.range=function(t){return arguments.length?(a=ea.call(t),c()):a.slice()},h.rangeRound=function(t){return a=ea.call(t),u=on,c()},h.clamp=function(t){return arguments.length?(l=t?aa(s):oa,h):l!==oa},h.interpolate=function(t){return arguments.length?(u=t,c()):u},h.unknown=function(t){return arguments.length?(n=t,h):n},function(n,i){return t=n,e=i,c()}}function fa(t,e){return ha()(t,e)}var pa=function(t,e,n,i){var r,o=y(t,e,n);switch((i=Ur(null==i?",f":i)).type){case"s":var s=Math.max(Math.abs(t),Math.abs(e));return null!=i.precision||isNaN(r=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(qr(e)/3)))-qr(Math.abs(t)))}(o,s))||(i.precision=r),Vr(i,s);case"":case"e":case"g":case"p":case"r":null!=i.precision||isNaN(r=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,qr(e)-qr(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(i.precision=r-("e"===i.type));break;case"f":case"%":null!=i.precision||isNaN(r=function(t){return Math.max(0,-qr(Math.abs(t)))}(o))||(i.precision=r-2*("%"===i.type))}return zr(i)};function da(t){var e=t.domain;return t.ticks=function(t){var n=e();return v(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var i=e();return pa(i[0],i[i.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var i,r=e(),o=0,s=r.length-1,a=r[o],u=r[s];return u<a&&(i=a,a=u,u=i,i=o,o=s,s=i),(i=_(a,u,n))>0?i=_(a=Math.floor(a/i)*i,u=Math.ceil(u/i)*i,n):i<0&&(i=_(a=Math.ceil(a*i)/i,u=Math.floor(u*i)/i,n)),i>0?(r[o]=Math.floor(a/i)*i,r[s]=Math.ceil(u/i)*i,e(r)):i<0&&(r[o]=Math.ceil(a*i)/i,r[s]=Math.floor(u*i)/i,e(r)),t},t}function ga(){var t=fa(oa,oa);return t.copy=function(){return ca(t,ga())},Zs.apply(t,arguments),da(t)}var ma=function(t,e){var n,i=0,r=(t=t.slice()).length-1,o=t[i],s=t[r];return s<o&&(n=i,i=r,r=n,n=o,o=s,s=n),t[i]=e.floor(o),t[r]=e.ceil(s),t};var va=new Date,_a=new Date;function ya(t,e,n,i){function r(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return r.floor=function(e){return t(e=new Date(+e)),e},r.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},r.round=function(t){var e=r(t),n=r.ceil(t);return t-e<n-t?e:n},r.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},r.range=function(n,i,o){var s,a=[];if(n=r.ceil(n),o=null==o?1:Math.floor(o),!(n<i&&o>0))return a;do{a.push(s=new Date(+n)),e(n,o),t(n)}while(s<n&&n<i);return a},r.filter=function(n){return ya((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,i){if(t>=t)if(i<0)for(;++i<=0;)for(;e(t,-1),!n(t););else for(;--i>=0;)for(;e(t,1),!n(t););}))},n&&(r.count=function(e,i){return va.setTime(+e),_a.setTime(+i),t(va),t(_a),Math.floor(n(va,_a))},r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(i?function(e){return i(e)%t==0}:function(e){return r.count(0,e)%t==0}):r:null}),r}var ba=ya((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));ba.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ya((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var xa=ba,wa=(ba.range,ya((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),Ta=wa,Ea=(wa.range,6e4),Ca=6048e5;function Sa(t){return ya((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Ea)/Ca}))}var Na=Sa(0),Aa=Sa(1),Da=Sa(2),Ma=Sa(3),ka=Sa(4),Ia=Sa(5),Oa=Sa(6),La=(Na.range,Aa.range,Da.range,Ma.range,ka.range,Ia.range,Oa.range,ya((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Ea)/864e5}),(function(t){return t.getDate()-1}))),Pa=La,ja=(La.range,ya((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Ea)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()}))),Ra=ja,Ha=(ja.range,ya((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+e*Ea)}),(function(t,e){return(e-t)/Ea}),(function(t){return t.getMinutes()}))),qa=Ha,Fa=(Ha.range,ya((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Ua=Fa,Ba=(Fa.range,ya((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t})));Ba.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ya((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):Ba:null};var Wa=Ba;Ba.range;function Ya(t){return ya((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/Ca}))}var za=Ya(0),Va=Ya(1),$a=Ya(2),Xa=Ya(3),Ka=Ya(4),Ga=Ya(5),Qa=Ya(6),Za=(za.range,Va.range,$a.range,Xa.range,Ka.range,Ga.range,Qa.range,ya((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Ja=Za,tu=(Za.range,ya((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));tu.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ya((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var eu=tu;tu.range;function nu(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function iu(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function ru(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var ou,su,au,uu={"-":"",_:" ",0:"0"},lu=/^\s*\d+/,cu=/^%/,hu=/[\\^$*+?|[\]().{}]/g;function fu(t,e,n){var i=t<0?"-":"",r=(i?-t:t)+"",o=r.length;return i+(o<n?new Array(n-o+1).join(e)+r:r)}function pu(t){return t.replace(hu,"\\$&")}function du(t){return new RegExp("^(?:"+t.map(pu).join("|")+")","i")}function gu(t){for(var e={},n=-1,i=t.length;++n<i;)e[t[n].toLowerCase()]=n;return e}function mu(t,e,n){var i=lu.exec(e.slice(n,n+1));return i?(t.w=+i[0],n+i[0].length):-1}function vu(t,e,n){var i=lu.exec(e.slice(n,n+1));return i?(t.u=+i[0],n+i[0].length):-1}function _u(t,e,n){var i=lu.exec(e.slice(n,n+2));return i?(t.U=+i[0],n+i[0].length):-1}function yu(t,e,n){var i=lu.exec(e.slice(n,n+2));return i?(t.V=+i[0],n+i[0].length):-1}function bu(t,e,n){var i=lu.exec(e.slice(n,n+2));return i?(t.W=+i[0],n+i[0].length):-1}function xu(t,e,n){var i=lu.exec(e.slice(n,n+4));return i?(t.y=+i[0],n+i[0].length):-1}function wu(t,e,n){var i=lu.exec(e.slice(n,n+2));return i?(t.y=+i[0]+(+i[0]>68?1900:2e3),n+i[0].length):-1}function Tu(t,e,n){var i=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return i?(t.Z=i[1]?0:-(i[2]+(i[3]||"00")),n+i[0].length):-1}function Eu(t,e,n){var i=lu.exec(e.slice(n,n+1));return i?(t.q=3*i[0]-3,n+i[0].length):-1}function Cu(t,e,n){var i=lu.exec(e.slice(n,n+2));return i?(t.m=i[0]-1,n+i[0].length):-1}function Su(t,e,n){var i=lu.exec(e.slice(n,n+2));return i?(t.d=+i[0],n+i[0].length):-1}function Nu(t,e,n){var i=lu.exec(e.slice(n,n+3));return i?(t.m=0,t.d=+i[0],n+i[0].length):-1}function Au(t,e,n){var i=lu.exec(e.slice(n,n+2));return i?(t.H=+i[0],n+i[0].length):-1}function Du(t,e,n){var i=lu.exec(e.slice(n,n+2));return i?(t.M=+i[0],n+i[0].length):-1}function Mu(t,e,n){var i=lu.exec(e.slice(n,n+2));return i?(t.S=+i[0],n+i[0].length):-1}function ku(t,e,n){var i=lu.exec(e.slice(n,n+3));return i?(t.L=+i[0],n+i[0].length):-1}function Iu(t,e,n){var i=lu.exec(e.slice(n,n+6));return i?(t.L=Math.floor(i[0]/1e3),n+i[0].length):-1}function Ou(t,e,n){var i=cu.exec(e.slice(n,n+1));return i?n+i[0].length:-1}function Lu(t,e,n){var i=lu.exec(e.slice(n));return i?(t.Q=+i[0],n+i[0].length):-1}function Pu(t,e,n){var i=lu.exec(e.slice(n));return i?(t.s=+i[0],n+i[0].length):-1}function ju(t,e){return fu(t.getDate(),e,2)}function Ru(t,e){return fu(t.getHours(),e,2)}function Hu(t,e){return fu(t.getHours()%12||12,e,2)}function qu(t,e){return fu(1+Pa.count(xa(t),t),e,3)}function Fu(t,e){return fu(t.getMilliseconds(),e,3)}function Uu(t,e){return Fu(t,e)+"000"}function Bu(t,e){return fu(t.getMonth()+1,e,2)}function Wu(t,e){return fu(t.getMinutes(),e,2)}function Yu(t,e){return fu(t.getSeconds(),e,2)}function zu(t){var e=t.getDay();return 0===e?7:e}function Vu(t,e){return fu(Na.count(xa(t)-1,t),e,2)}function $u(t,e){var n=t.getDay();return t=n>=4||0===n?ka(t):ka.ceil(t),fu(ka.count(xa(t),t)+(4===xa(t).getDay()),e,2)}function Xu(t){return t.getDay()}function Ku(t,e){return fu(Aa.count(xa(t)-1,t),e,2)}function Gu(t,e){return fu(t.getFullYear()%100,e,2)}function Qu(t,e){return fu(t.getFullYear()%1e4,e,4)}function Zu(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+fu(e/60|0,"0",2)+fu(e%60,"0",2)}function Ju(t,e){return fu(t.getUTCDate(),e,2)}function tl(t,e){return fu(t.getUTCHours(),e,2)}function el(t,e){return fu(t.getUTCHours()%12||12,e,2)}function nl(t,e){return fu(1+Ja.count(eu(t),t),e,3)}function il(t,e){return fu(t.getUTCMilliseconds(),e,3)}function rl(t,e){return il(t,e)+"000"}function ol(t,e){return fu(t.getUTCMonth()+1,e,2)}function sl(t,e){return fu(t.getUTCMinutes(),e,2)}function al(t,e){return fu(t.getUTCSeconds(),e,2)}function ul(t){var e=t.getUTCDay();return 0===e?7:e}function ll(t,e){return fu(za.count(eu(t)-1,t),e,2)}function cl(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Ka(t):Ka.ceil(t),fu(Ka.count(eu(t),t)+(4===eu(t).getUTCDay()),e,2)}function hl(t){return t.getUTCDay()}function fl(t,e){return fu(Va.count(eu(t)-1,t),e,2)}function pl(t,e){return fu(t.getUTCFullYear()%100,e,2)}function dl(t,e){return fu(t.getUTCFullYear()%1e4,e,4)}function gl(){return"+0000"}function ml(){return"%"}function vl(t){return+t}function _l(t){return Math.floor(+t/1e3)}!function(t){ou=function(t){var e=t.dateTime,n=t.date,i=t.time,r=t.periods,o=t.days,s=t.shortDays,a=t.months,u=t.shortMonths,l=du(r),c=gu(r),h=du(o),f=gu(o),p=du(s),d=gu(s),g=du(a),m=gu(a),v=du(u),_=gu(u),y={a:function(t){return s[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:ju,e:ju,f:Uu,H:Ru,I:Hu,j:qu,L:Fu,m:Bu,M:Wu,p:function(t){return r[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:vl,s:_l,S:Yu,u:zu,U:Vu,V:$u,w:Xu,W:Ku,x:null,X:null,y:Gu,Y:Qu,Z:Zu,"%":ml},b={a:function(t){return s[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:Ju,e:Ju,f:rl,H:tl,I:el,j:nl,L:il,m:ol,M:sl,p:function(t){return r[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:vl,s:_l,S:al,u:ul,U:ll,V:cl,w:hl,W:fl,x:null,X:null,y:pl,Y:dl,Z:gl,"%":ml},x={a:function(t,e,n){var i=p.exec(e.slice(n));return i?(t.w=d[i[0].toLowerCase()],n+i[0].length):-1},A:function(t,e,n){var i=h.exec(e.slice(n));return i?(t.w=f[i[0].toLowerCase()],n+i[0].length):-1},b:function(t,e,n){var i=v.exec(e.slice(n));return i?(t.m=_[i[0].toLowerCase()],n+i[0].length):-1},B:function(t,e,n){var i=g.exec(e.slice(n));return i?(t.m=m[i[0].toLowerCase()],n+i[0].length):-1},c:function(t,n,i){return E(t,e,n,i)},d:Su,e:Su,f:Iu,H:Au,I:Au,j:Nu,L:ku,m:Cu,M:Du,p:function(t,e,n){var i=l.exec(e.slice(n));return i?(t.p=c[i[0].toLowerCase()],n+i[0].length):-1},q:Eu,Q:Lu,s:Pu,S:Mu,u:vu,U:_u,V:yu,w:mu,W:bu,x:function(t,e,i){return E(t,n,e,i)},X:function(t,e,n){return E(t,i,e,n)},y:wu,Y:xu,Z:Tu,"%":Ou};function w(t,e){return function(n){var i,r,o,s=[],a=-1,u=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++a<l;)37===t.charCodeAt(a)&&(s.push(t.slice(u,a)),null!=(r=uu[i=t.charAt(++a)])?i=t.charAt(++a):r="e"===i?" ":"0",(o=e[i])&&(i=o(n,r)),s.push(i),u=a+1);return s.push(t.slice(u,a)),s.join("")}}function T(t,e){return function(n){var i,r,o=ru(1900,void 0,1);if(E(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(!e||"Z"in o||(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(r=(i=iu(ru(o.y,0,1))).getUTCDay(),i=r>4||0===r?Va.ceil(i):Va(i),i=Ja.offset(i,7*(o.V-1)),o.y=i.getUTCFullYear(),o.m=i.getUTCMonth(),o.d=i.getUTCDate()+(o.w+6)%7):(r=(i=nu(ru(o.y,0,1))).getDay(),i=r>4||0===r?Aa.ceil(i):Aa(i),i=Pa.offset(i,7*(o.V-1)),o.y=i.getFullYear(),o.m=i.getMonth(),o.d=i.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),r="Z"in o?iu(ru(o.y,0,1)).getUTCDay():nu(ru(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(r+5)%7:o.w+7*o.U-(r+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,iu(o)):nu(o)}}function E(t,e,n,i){for(var r,o,s=0,a=e.length,u=n.length;s<a;){if(i>=u)return-1;if(37===(r=e.charCodeAt(s++))){if(r=e.charAt(s++),!(o=x[r in uu?e.charAt(s++):r])||(i=o(t,n,i))<0)return-1}else if(r!=n.charCodeAt(i++))return-1}return i}return(y.x=w(n,y),y.X=w(i,y),y.c=w(e,y),b.x=w(n,b),b.X=w(i,b),b.c=w(e,b),{format:function(t){var e=w(t+="",y);return e.toString=function(){return t},e},parse:function(t){var e=T(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=w(t+="",b);return e.toString=function(){return t},e},utcParse:function(t){var e=T(t+="",!0);return e.toString=function(){return t},e}})}(t),su=ou.format,au=ou.parse,ou.utcFormat,ou.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var yl=1e3,bl=60*yl,xl=60*bl,wl=24*xl,Tl=7*wl,El=30*wl,Cl=365*wl;function Sl(t){return new Date(t)}function Nl(t){return t instanceof Date?+t:+new Date(+t)}function Al(t,e,n,i,o,s,a,u,l){var c=fa(oa,oa),h=c.invert,f=c.domain,p=l(".%L"),d=l(":%S"),g=l("%I:%M"),m=l("%I %p"),v=l("%a %d"),_=l("%b %d"),b=l("%B"),x=l("%Y"),w=[[a,1,yl],[a,5,5*yl],[a,15,15*yl],[a,30,30*yl],[s,1,bl],[s,5,5*bl],[s,15,15*bl],[s,30,30*bl],[o,1,xl],[o,3,3*xl],[o,6,6*xl],[o,12,12*xl],[i,1,wl],[i,2,2*wl],[n,1,Tl],[e,1,El],[e,3,3*El],[t,1,Cl]];function T(r){return(a(r)<r?p:s(r)<r?d:o(r)<r?g:i(r)<r?m:e(r)<r?n(r)<r?v:_:t(r)<r?b:x)(r)}function E(e,n,i,o){if(null==e&&(e=10),"number"==typeof e){var s=Math.abs(i-n)/e,a=r((function(t){return t[2]})).right(w,s);a===w.length?(o=y(n/Cl,i/Cl,e),e=t):a?(o=(a=w[s/w[a-1][2]<w[a][2]/s?a-1:a])[1],e=a[0]):(o=Math.max(y(n,i,e),1),e=u)}return null==o?e:e.every(o)}return c.invert=function(t){return new Date(h(t))},c.domain=function(t){return arguments.length?f(ta.call(t,Nl)):f().map(Sl)},c.ticks=function(t,e){var n,i=f(),r=i[0],o=i[i.length-1],s=o<r;return s&&(n=r,r=o,o=n),n=(n=E(t,r,o,e))?n.range(r,o+1):[],s?n.reverse():n},c.tickFormat=function(t,e){return null==e?T:l(e)},c.nice=function(t,e){var n=f();return(t=E(t,n[0],n[n.length-1],e))?f(ma(n,t)):c},c.copy=function(){return ca(c,Al(t,e,n,i,o,s,a,u,l))},c}var Dl=ya((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),Ml=(Dl.range,ya((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}))),kl=(Ml.range,ya((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+e*Ea)}),(function(t,e){return(e-t)/Ea}),(function(t){return t.getUTCMinutes()})));kl.range;Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt;var Il=1e-12,Ol=Math.PI,Ll=2*Ol;function Pl(t){this._context=t}Pl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var jl=function(t){return new Pl(t)};Hl(jl);function Rl(t){this._curve=t}function Hl(t){function e(e){return new Rl(t(e))}return e._curve=t,e}Rl.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var ql=Math.sin(Ol/10)/Math.sin(7*Ol/10),Fl=(Math.sin(Ll/10),Math.cos(Ll/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function Ul(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function Bl(t){this._context=t}Bl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Ul(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Ul(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function Wl(t){this._context=t}Wl.prototype={areaStart:Fl,areaEnd:Fl,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:Ul(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function Yl(t){this._context=t}Yl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,i=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,i):this._context.moveTo(n,i);break;case 3:this._point=4;default:Ul(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function zl(t,e){this._basis=new Bl(t),this._beta=e}zl.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var i,r=t[0],o=e[0],s=t[n]-r,a=e[n]-o,u=-1;++u<=n;)i=u/n,this._basis.point(this._beta*t[u]+(1-this._beta)*(r+i*s),this._beta*e[u]+(1-this._beta)*(o+i*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};(function t(e){function n(t){return 1===e?new Bl(t):new zl(t,e)}return n.beta=function(e){return t(+e)},n})(.85);function Vl(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function $l(t,e){this._context=t,this._k=(1-e)/6}$l.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Vl(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:Vl(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new $l(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Xl(t,e){this._context=t,this._k=(1-e)/6}Xl.prototype={areaStart:Fl,areaEnd:Fl,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Vl(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new Xl(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Kl(t,e){this._context=t,this._k=(1-e)/6}Kl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Vl(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new Kl(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Gl(t,e,n){var i=t._x1,r=t._y1,o=t._x2,s=t._y2;if(t._l01_a>Il){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,u=3*t._l01_a*(t._l01_a+t._l12_a);i=(i*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/u,r=(r*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/u}if(t._l23_a>Il){var l=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*l+t._x1*t._l23_2a-e*t._l12_2a)/c,s=(s*l+t._y1*t._l23_2a-n*t._l12_2a)/c}t._context.bezierCurveTo(i,r,o,s,t._x2,t._y2)}function Ql(t,e){this._context=t,this._alpha=e}Ql.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,i=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:Gl(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Ql(t,e):new $l(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function Zl(t,e){this._context=t,this._alpha=e}Zl.prototype={areaStart:Fl,areaEnd:Fl,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,i=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Gl(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Zl(t,e):new Xl(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function Jl(t,e){this._context=t,this._alpha=e}Jl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,i=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+i*i,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Gl(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Jl(t,e):new Kl(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function tc(t){this._context=t}tc.prototype={areaStart:Fl,areaEnd:Fl,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};function ec(t){return t<0?-1:1}function nc(t,e,n){var i=t._x1-t._x0,r=e-t._x1,o=(t._y1-t._y0)/(i||r<0&&-0),s=(n-t._y1)/(r||i<0&&-0),a=(o*r+s*i)/(i+r);return(ec(o)+ec(s))*Math.min(Math.abs(o),Math.abs(s),.5*Math.abs(a))||0}function ic(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function rc(t,e,n){var i=t._x0,r=t._y0,o=t._x1,s=t._y1,a=(o-i)/3;t._context.bezierCurveTo(i+a,r+a*e,o-a,s-a*n,o,s)}function oc(t){this._context=t}function sc(t){this._context=new ac(t)}function ac(t){this._context=t}function uc(t){this._context=t}function lc(t){var e,n,i=t.length-1,r=new Array(i),o=new Array(i),s=new Array(i);for(r[0]=0,o[0]=2,s[0]=t[0]+2*t[1],e=1;e<i-1;++e)r[e]=1,o[e]=4,s[e]=4*t[e]+2*t[e+1];for(r[i-1]=2,o[i-1]=7,s[i-1]=8*t[i-1]+t[i],e=1;e<i;++e)n=r[e]/o[e-1],o[e]-=n,s[e]-=n*s[e-1];for(r[i-1]=s[i-1]/o[i-1],e=i-2;e>=0;--e)r[e]=(s[e]-r[e+1])/o[e];for(o[i-1]=(t[i]+r[i-1])/2,e=0;e<i-1;++e)o[e]=2*t[e+1]-r[e+1];return[r,o]}oc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:rc(this,this._t0,ic(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,rc(this,ic(this,n=nc(this,t,e)),n);break;default:rc(this,this._t0,n=nc(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(sc.prototype=Object.create(oc.prototype)).point=function(t,e){oc.prototype.point.call(this,e,t)},ac.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,i,r,o){this._context.bezierCurveTo(e,t,i,n,o,r)}},uc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var i=lc(t),r=lc(e),o=0,s=1;s<n;++o,++s)this._context.bezierCurveTo(i[0][o],r[0][o],i[1][o],r[1][o],t[s],e[s]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};function cc(t,e){this._context=t,this._t=e}cc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};function hc(){this._=null}function fc(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function pc(t,e){var n=e,i=e.R,r=n.U;r?r.L===n?r.L=i:r.R=i:t._=i,i.U=r,n.U=i,n.R=i.L,n.R&&(n.R.U=n),i.L=n}function dc(t,e){var n=e,i=e.L,r=n.U;r?r.L===n?r.L=i:r.R=i:t._=i,i.U=r,n.U=i,n.L=i.R,n.L&&(n.L.U=n),i.R=n}function gc(t){for(;t.L;)t=t.L;return t}hc.prototype={constructor:hc,insert:function(t,e){var n,i,r;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=gc(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(i=n.U).L?(r=i.R)&&r.C?(n.C=r.C=!1,i.C=!0,t=i):(t===n.R&&(pc(this,n),n=(t=n).U),n.C=!1,i.C=!0,dc(this,i)):(r=i.L)&&r.C?(n.C=r.C=!1,i.C=!0,t=i):(t===n.L&&(dc(this,n),n=(t=n).U),n.C=!1,i.C=!0,pc(this,i)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,i,r=t.U,o=t.L,s=t.R;if(n=o?s?gc(s):o:s,r?r.L===t?r.L=n:r.R=n:this._=n,o&&s?(i=n.C,n.C=t.C,n.L=o,o.U=n,n!==s?(r=n.U,n.U=t.U,t=n.R,r.L=t,n.R=s,s.U=n):(n.U=r,r=n,t=n.R)):(i=t.C,t=n),t&&(t.U=r),!i)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===r.L){if((e=r.R).C&&(e.C=!1,r.C=!0,pc(this,r),e=r.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,dc(this,e),e=r.R),e.C=r.C,r.C=e.R.C=!1,pc(this,r),t=this._;break}}else if((e=r.L).C&&(e.C=!1,r.C=!0,dc(this,r),e=r.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,pc(this,e),e=r.L),e.C=r.C,r.C=e.L.C=!1,dc(this,r),t=this._;break}e.C=!0,t=r,r=r.U}while(!t.C);t&&(t.C=!1)}}};var mc=hc;function vc(t,e,n,i){var r=[null,null],o=Uc.push(r)-1;return r.left=t,r.right=e,n&&yc(r,t,e,n),i&&yc(r,e,t,i),qc[t.index].halfedges.push(o),qc[e.index].halfedges.push(o),r}function _c(t,e,n){var i=[e,n];return i.left=t,i}function yc(t,e,n,i){t[0]||t[1]?t.left===n?t[1]=i:t[0]=i:(t[0]=i,t.left=e,t.right=n)}function bc(t,e,n,i,r){var o,s=t[0],a=t[1],u=s[0],l=s[1],c=0,h=1,f=a[0]-u,p=a[1]-l;if(o=e-u,f||!(o>0)){if(o/=f,f<0){if(o<c)return;o<h&&(h=o)}else if(f>0){if(o>h)return;o>c&&(c=o)}if(o=i-u,f||!(o<0)){if(o/=f,f<0){if(o>h)return;o>c&&(c=o)}else if(f>0){if(o<c)return;o<h&&(h=o)}if(o=n-l,p||!(o>0)){if(o/=p,p<0){if(o<c)return;o<h&&(h=o)}else if(p>0){if(o>h)return;o>c&&(c=o)}if(o=r-l,p||!(o<0)){if(o/=p,p<0){if(o>h)return;o>c&&(c=o)}else if(p>0){if(o<c)return;o<h&&(h=o)}return!(c>0||h<1)||(c>0&&(t[0]=[u+c*f,l+c*p]),h<1&&(t[1]=[u+h*f,l+h*p]),!0)}}}}}function xc(t,e,n,i,r){var o=t[1];if(o)return!0;var s,a,u=t[0],l=t.left,c=t.right,h=l[0],f=l[1],p=c[0],d=c[1],g=(h+p)/2,m=(f+d)/2;if(d===f){if(g<e||g>=i)return;if(h>p){if(u){if(u[1]>=r)return}else u=[g,n];o=[g,r]}else{if(u){if(u[1]<n)return}else u=[g,r];o=[g,n]}}else if(a=m-(s=(h-p)/(d-f))*g,s<-1||s>1)if(h>p){if(u){if(u[1]>=r)return}else u=[(n-a)/s,n];o=[(r-a)/s,r]}else{if(u){if(u[1]<n)return}else u=[(r-a)/s,r];o=[(n-a)/s,n]}else if(f<d){if(u){if(u[0]>=i)return}else u=[e,s*e+a];o=[i,s*i+a]}else{if(u){if(u[0]<e)return}else u=[i,s*i+a];o=[e,s*e+a]}return t[0]=u,t[1]=o,!0}function wc(t,e){var n=t.site,i=e.left,r=e.right;return n===r&&(r=i,i=n),r?Math.atan2(r[1]-i[1],r[0]-i[0]):(n===i?(i=e[1],r=e[0]):(i=e[0],r=e[1]),Math.atan2(i[0]-r[0],r[1]-i[1]))}function Tc(t,e){return e[+(e.left!==t.site)]}function Ec(t,e){return e[+(e.left===t.site)]}var Cc,Sc=[];function Nc(){fc(this),this.x=this.y=this.arc=this.site=this.cy=null}function Ac(t){var e=t.P,n=t.N;if(e&&n){var i=e.site,r=t.site,o=n.site;if(i!==o){var s=r[0],a=r[1],u=i[0]-s,l=i[1]-a,c=o[0]-s,h=o[1]-a,f=2*(u*h-l*c);if(!(f>=-Wc)){var p=u*u+l*l,d=c*c+h*h,g=(h*p-l*d)/f,m=(u*d-c*p)/f,v=Sc.pop()||new Nc;v.arc=t,v.site=r,v.x=g+s,v.y=(v.cy=m+a)+Math.sqrt(g*g+m*m),t.circle=v;for(var _=null,y=Fc._;y;)if(v.y<y.y||v.y===y.y&&v.x<=y.x){if(!y.L){_=y.P;break}y=y.L}else{if(!y.R){_=y;break}y=y.R}Fc.insert(_,v),_||(Cc=v)}}}}function Dc(t){var e=t.circle;e&&(e.P||(Cc=e.N),Fc.remove(e),Sc.push(e),fc(e),t.circle=null)}var Mc=[];function kc(){fc(this),this.edge=this.site=this.circle=null}function Ic(t){var e=Mc.pop()||new kc;return e.site=t,e}function Oc(t){Dc(t),Hc.remove(t),Mc.push(t),fc(t)}function Lc(t){var e=t.circle,n=e.x,i=e.cy,r=[n,i],o=t.P,s=t.N,a=[t];Oc(t);for(var u=o;u.circle&&Math.abs(n-u.circle.x)<Bc&&Math.abs(i-u.circle.cy)<Bc;)o=u.P,a.unshift(u),Oc(u),u=o;a.unshift(u),Dc(u);for(var l=s;l.circle&&Math.abs(n-l.circle.x)<Bc&&Math.abs(i-l.circle.cy)<Bc;)s=l.N,a.push(l),Oc(l),l=s;a.push(l),Dc(l);var c,h=a.length;for(c=1;c<h;++c)l=a[c],u=a[c-1],yc(l.edge,u.site,l.site,r);u=a[0],(l=a[h-1]).edge=vc(u.site,l.site,null,r),Ac(u),Ac(l)}function Pc(t){for(var e,n,i,r,o=t[0],s=t[1],a=Hc._;a;)if((i=jc(a,s)-o)>Bc)a=a.L;else{if(!((r=o-Rc(a,s))>Bc)){i>-Bc?(e=a.P,n=a):r>-Bc?(e=a,n=a.N):e=n=a;break}if(!a.R){e=a;break}a=a.R}!function(t){qc[t.index]={site:t,halfedges:[]}}(t);var u=Ic(t);if(Hc.insert(e,u),e||n){if(e===n)return Dc(e),n=Ic(e.site),Hc.insert(u,n),u.edge=n.edge=vc(e.site,u.site),Ac(e),void Ac(n);if(n){Dc(e),Dc(n);var l=e.site,c=l[0],h=l[1],f=t[0]-c,p=t[1]-h,d=n.site,g=d[0]-c,m=d[1]-h,v=2*(f*m-p*g),_=f*f+p*p,y=g*g+m*m,b=[(m*_-p*y)/v+c,(f*y-g*_)/v+h];yc(n.edge,l,d,b),u.edge=vc(l,t,null,b),n.edge=vc(t,d,null,b),Ac(e),Ac(n)}else u.edge=vc(e.site,u.site)}}function jc(t,e){var n=t.site,i=n[0],r=n[1],o=r-e;if(!o)return i;var s=t.P;if(!s)return-1/0;var a=(n=s.site)[0],u=n[1],l=u-e;if(!l)return a;var c=a-i,h=1/o-1/l,f=c/l;return h?(-f+Math.sqrt(f*f-2*h*(c*c/(-2*l)-u+l/2+r-o/2)))/h+i:(i+a)/2}function Rc(t,e){var n=t.N;if(n)return jc(n,e);var i=t.site;return i[1]===e?i[0]:1/0}var Hc,qc,Fc,Uc,Bc=1e-6,Wc=1e-12;function Yc(t,e){return e[1]-t[1]||e[0]-t[0]}function zc(t,e){var n,i,r,o=t.sort(Yc).pop();for(Uc=[],qc=new Array(t.length),Hc=new mc,Fc=new mc;;)if(r=Cc,o&&(!r||o[1]<r.y||o[1]===r.y&&o[0]<r.x))o[0]===n&&o[1]===i||(Pc(o),n=o[0],i=o[1]),o=t.pop();else{if(!r)break;Lc(r.arc)}if(function(){for(var t,e,n,i,r=0,o=qc.length;r<o;++r)if((t=qc[r])&&(i=(e=t.halfedges).length)){var s=new Array(i),a=new Array(i);for(n=0;n<i;++n)s[n]=n,a[n]=wc(t,Uc[e[n]]);for(s.sort((function(t,e){return a[e]-a[t]})),n=0;n<i;++n)a[n]=e[s[n]];for(n=0;n<i;++n)e[n]=a[n]}}(),e){var s=+e[0][0],a=+e[0][1],u=+e[1][0],l=+e[1][1];!function(t,e,n,i){for(var r,o=Uc.length;o--;)xc(r=Uc[o],t,e,n,i)&&bc(r,t,e,n,i)&&(Math.abs(r[0][0]-r[1][0])>Bc||Math.abs(r[0][1]-r[1][1])>Bc)||delete Uc[o]}(s,a,u,l),function(t,e,n,i){var r,o,s,a,u,l,c,h,f,p,d,g,m=qc.length,v=!0;for(r=0;r<m;++r)if(o=qc[r]){for(s=o.site,a=(u=o.halfedges).length;a--;)Uc[u[a]]||u.splice(a,1);for(a=0,l=u.length;a<l;)d=(p=Ec(o,Uc[u[a]]))[0],g=p[1],h=(c=Tc(o,Uc[u[++a%l]]))[0],f=c[1],(Math.abs(d-h)>Bc||Math.abs(g-f)>Bc)&&(u.splice(a,0,Uc.push(_c(s,p,Math.abs(d-t)<Bc&&i-g>Bc?[t,Math.abs(h-t)<Bc?f:i]:Math.abs(g-i)<Bc&&n-d>Bc?[Math.abs(f-i)<Bc?h:n,i]:Math.abs(d-n)<Bc&&g-e>Bc?[n,Math.abs(h-n)<Bc?f:e]:Math.abs(g-e)<Bc&&d-t>Bc?[Math.abs(f-e)<Bc?h:t,e]:null))-1),++l);l&&(v=!1)}if(v){var _,y,b,x=1/0;for(r=0,v=null;r<m;++r)(o=qc[r])&&(b=(_=(s=o.site)[0]-t)*_+(y=s[1]-e)*y)<x&&(x=b,v=o);if(v){var w=[t,e],T=[t,i],E=[n,i],C=[n,e];v.halfedges.push(Uc.push(_c(s=v.site,w,T))-1,Uc.push(_c(s,T,E))-1,Uc.push(_c(s,E,C))-1,Uc.push(_c(s,C,w))-1)}}for(r=0;r<m;++r)(o=qc[r])&&(o.halfedges.length||delete qc[r])}(s,a,u,l)}this.edges=Uc,this.cells=qc,Hc=Fc=Uc=qc=null}zc.prototype={constructor:zc,polygons:function(){var t=this.edges;return this.cells.map((function(e){var n=e.halfedges.map((function(n){return Tc(e,t[n])}));return n.data=e.site.data,n}))},triangles:function(){var t=[],e=this.edges;return this.cells.forEach((function(n,i){if(o=(r=n.halfedges).length)for(var r,o,s,a,u,l,c=n.site,h=-1,f=e[r[o-1]],p=f.left===c?f.right:f.left;++h<o;)s=p,p=(f=e[r[h]]).left===c?f.right:f.left,s&&p&&i<s.index&&i<p.index&&(u=s,l=p,((a=c)[0]-l[0])*(u[1]-a[1])-(a[0]-u[0])*(l[1]-a[1])<0)&&t.push([c.data,s.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,e,n){for(var i,r,o=this,s=o._found||0,a=o.cells.length;!(r=o.cells[s]);)if(++s>=a)return null;var u=t-r.site[0],l=e-r.site[1],c=u*u+l*l;do{r=o.cells[i=s],s=null,r.halfedges.forEach((function(n){var i=o.edges[n],a=i.left;if(a!==r.site&&a||(a=i.right)){var u=t-a[0],l=e-a[1],h=u*u+l*l;h<c&&(c=h,s=a.index)}}))}while(null!==s);return o._found=i,null==n||c<=n*n?r.site:null}};function Vc(t,e,n){this.k=t,this.x=e,this.y=n}Vc.prototype={constructor:Vc,scale:function(t){return 1===t?this:new Vc(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Vc(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Vc(1,0,0);Vc.prototype;var $c={DARK_BG:"#333333",LIGHTER_BG:"#5F5F5F",LIGHT_GREY:"#ACACAC",TITLE_WHITE:"#DADADA",TEAL:"#00C89D",SELECTION_GREEN:"#A0C29E",TED_RED:"#E62B1E",BRIGHT_GREEN:"#13B100",BRIGHT_RED:"#B10007"},Xc=function(t,e){const n=10,i=80,r=800-i-30,o=500-n-80;t.attr("viewBox","0 0 800 500");const s=t.append("g");s.attr("transform","translate("+i+","+n+")");const a=au("%s"),l=u(e,t=>a(t.film_date)),c=function(){return Zs.apply(Al(xa,Ta,Na,Pa,Ra,qa,Ua,Wa,su).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}().domain(l).range([0,r]),h=R(c).tickFormat(su("%Y"));s.append("g").attr("transform","translate(0,"+o+")").call(h);const f=u(e,t=>+t.views),p=ga().domain(f).range([o,0]);s.append("g").call(H(p).tickFormat(zr("~s"))),s.selectAll("circle").data(e).enter().append("circle").attr("transform",(function(t){return"translate("+c(a(t.film_date))+","+p(+t.views)+")"})).attr("r",2).style("opacity","0.75").style("fill",$c.TEAL),s.append("text").attr("transform","translate(-50, 250) rotate(-90)").attr("fill",$c.TITLE_WHITE).text("Number of Views"),s.append("text").attr("transform","translate(320, 450)").attr("fill",$c.TITLE_WHITE).text("Year")};var Kc=function(t,e){const n=10,i=80,r=800-i-30,o=500-n-80;t.append("h2").text("What Do TED Talkers Do For a Living?"),t.append("hr").attr("color",$c.LIGHT_GREY);const s=t.append("select").attr("id","viewSelect");s.append("option").text("Circle Packing").attr("value","Circle Packing"),s.append("option").text("Treemap").attr("value","Treemap"),s.on("change",(function(){const t=ie("#viewSelect"),e=t._groups[0][0].options[t._groups[0][0].selectedIndex].value;console.log(e),"Circle Packing"==e?(se(".circlePackNode").style("opacity","1"),se(".treemapNode").style("opacity","0")):(se(".circlePackNode").style("opacity","0"),se(".treemapNode").style("opacity","1"))}));const a=t.append("svg").attr("id","professionsView");a.attr("viewBox","0 0 800 500"),a.append("g").attr("transform","translate("+i+","+n+")");const u=function(){var t=Us,e=Bs;function n(n){var i,r,o,s,a,u,l,c=n.length,h=new Array(c),f={};for(r=0;r<c;++r)i=n[r],a=h[r]=new fs(i),null!=(u=t(i,r,n))&&(u+="")&&(f[l=Hs+(a.id=u)]=l in f?Fs:a);for(r=0;r<c;++r)if(a=h[r],null!=(u=e(n[r],r,n))&&(u+="")){if(!(s=f[Hs+u]))throw new Error("missing: "+u);if(s===Fs)throw new Error("ambiguous: "+u);s.children?s.children.push(a):s.children=[a],a.parent=s}else{if(o)throw new Error("multiple roots");o=a}if(!o)throw new Error("no root");if(o.parent=qs,o.eachBefore((function(t){t.depth=t.parent.depth+1,--c})).eachBefore(hs),o.parent=null,c>0)throw new Error("cycle");return o}return n.id=function(e){return arguments.length?(t=As(e),n):t},n.parentId=function(t){return arguments.length?(e=As(t),n):e},n}().id(t=>t.profession).parentId(t=>"Root"!=t.profession?"Root":"")(e).sum(t=>+t.count).sort((t,e)=>+e.data.count-+t.data.count);!function(t,e,n,i){const r=Is().size([n,i]).padding(3)(e),o=t.selectAll(".circlePackNode").data(r.leaves()).enter().append("g").attr("transform",t=>`translate(${t.x+1},${t.y+1})`).attr("class","circlePackNode").style("opacity","1");o.append("circle").attr("r",t=>t.r).attr("fill",$c.TED_RED).attr("stroke",$c.LIGHT_GREY).attr("stroke-weight",5),o.append("text").text(t=>t.data.profession).style("font-size","1px").each((function(t){const e=this.getBBox(),n=this.parentNode.getBBox();t.data.scale=Math.min(n.width/e.width,n.height/e.height)})).style("font-size",(function(t){return t.data.scale+"px"})).attr("fill",$c.LIGHT_GREY).attr("class","professionLabel")}(a,u,800,500-2*n),function(t,e,n,i){const r=Xs().size([n,i]).padding(3)(e),o=t.selectAll(".treemapNode").data(r.leaves()).enter().append("g").attr("transform",t=>`translate(${t.x0+1},${t.y0+1})`).attr("class","treemapNode").style("opacity","0");o.append("rect").attr("width",t=>t.x1-t.x0).attr("height",t=>t.y1-t.y0).attr("fill",$c.LIGHT_GREY).attr("stroke",$c.LIGHTER_BG).attr("stroke-weight",5),o.append("text").text(t=>t.data.profession).style("font-size","1px").each((function(t){const e=this.getBBox(),n=this.parentNode.getBBox();t.data.scale=Math.min(n.width/e.width,n.height/e.height)})).style("font-size",(function(t){return t.data.scale+"px"})).attr("fill",$c.DARK_BG).attr("transform",t=>"translate("+(t.x1-t.x0)/2+","+(t.y1-t.y0)/2+")").attr("class","professionLabel")}(a,u,r,o)};const Gc=ie("svg.figure1"),Qc=ie("svg.figure2"),Zc=ie("svg.figure3"),Jc=ie("div.figure4"),th=ie("div.ratingsDiv");var eh,nh;Nr("./data/ted_main_grouped_professions.csv").then(t=>{!function(t){t.forEach(t=>{const e=new Date(1e3*parseInt(t.film_date,10));t.year=e.getFullYear().toString()})}(t),function(t,e){const n=10,i=80,r=800-i-30,o=500-n-80;t.attr("viewBox","0 0 800 500");const s=t.append("g");s.attr("transform","translate("+i+","+n+")");const a=u(e,t=>parseInt(t.year,10)),l=ga().domain(a).range([0,r]);s.append("g").attr("transform","translate(0,"+o+")").call(R(l).tickFormat(zr("d")));const c=x().domain(l.domain()).thresholds(l.ticks(a[1]-a[0]))(e.map(t=>parseInt(t.year,10))),h=ga().domain([0,w(c,t=>t.length)]).range([o,0]);s.append("g").call(H(h)),s.selectAll("rect").data(c).enter().append("rect").attr("x",1).attr("transform",(function(t){return"translate("+l(t.x0)+","+h(t.length)+")"})).attr("width",(function(t){return l(t.x1)-l(t.x0)-1})).attr("height",(function(t){return o-h(t.length)})).style("fill",$c.TED_RED),s.append("text").attr("transform","translate(-50, 250) rotate(-90)").attr("fill",$c.TITLE_WHITE).text("Number of talks"),s.append("text").attr("transform","translate(320, 450)").attr("fill",$c.TITLE_WHITE).text("Year")}(Gc,t),Xc(Qc,t),function(t,e){t.append("h2").text("Talk Ratings"),t.append("hr").attr("color",$c.LIGHT_GREY);const n=t.append("svg").attr("viewBox","0 0 800 500").append("g").attr("id","ratingsIconBar");n.append("rect").attr("width",800).attr("height",800/30).attr("fill",$c.LIGHT_GREY).attr("rx",800/30/6),n.append("image").attr("href","./images/icon_svgs/icon_beautiful.svg").attr("width",800/30*.8).attr("height",800/30*.8).attr("transform","translate(2.666666666666666,2.666666666666666)")}(th)}),Nr("./data/fk_scores.csv").then(t=>{!function(t,e){const n=10,i=80,r=800-i-30,o=500-n-80;t.attr("viewBox","0 0 800 500");const s=t.append("g");s.attr("transform","translate("+i+","+n+")");const a=u(e,t=>parseInt(t.level,10)),l=ga().domain(a).range([0,r]);s.append("g").attr("transform","translate(0,"+o+")").call(R(l).tickFormat(zr("d")));const c=x().domain(l.domain()).thresholds(l.ticks(40))(e.map(t=>parseInt(t.level,10))),h=ga().domain([0,w(c,t=>t.length)]).range([o,0]);s.append("g").call(H(h)),s.selectAll("rect").data(c).enter().append("rect").attr("x",1).attr("transform",(function(t){return"translate("+l(t.x0)+","+h(t.length)+")"})).attr("width",(function(t){return l(t.x1)-l(t.x0)-1})).attr("height",(function(t){return o-h(t.length)})).style("fill",$c.TED_RED),s.append("text").attr("transform","translate(-50, 250) rotate(-90)").attr("fill",$c.TITLE_WHITE).text("Number of talks"),s.append("text").attr("transform","translate(320, 450)").attr("fill",$c.TITLE_WHITE).text("Reading Level")}(Zc,t)}),(eh="./data/profession_counts.json",fetch(eh,nh).then(Ar)).then(t=>{Kc(Jc,t)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
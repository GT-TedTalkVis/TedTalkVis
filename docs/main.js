!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=11)}([,,function(t,e,n){var r,i;
/*!
 * ScrollMagic v2.0.7 (2019-05-07)
 * The javascript library for magical scroll interactions.
 * (c) 2019 Jan Paepke (@janpaepke)
 * Project Website: http://scrollmagic.io
 * 
 * @version 2.0.7
 * @license Dual licensed under MIT license and GPL.
 * @author Jan Paepke - e-mail@janpaepke.de
 *
 * @file ScrollMagic main library.
 */void 0===(i="function"==typeof(r=function(){"use strict";var t=function(){r.log(2,"(COMPATIBILITY NOTICE) -> As of ScrollMagic 2.0.0 you need to use 'new ScrollMagic.Controller()' to create a new controller instance. Use 'new ScrollMagic.Scene()' to instance a scene.")};t.version="2.0.7",window.addEventListener("mousewheel",(function(){})),t.Controller=function(n){var i,o,a="ScrollMagic.Controller",s=e.defaults,l=this,u=r.extend({},s,n),c=[],f=!1,h=0,p="PAUSED",d=!0,g=0,m=!0,v=function(){u.refreshInterval>0&&(o=window.setTimeout(E,u.refreshInterval))},y=function(){return u.vertical?r.get.scrollTop(u.container):r.get.scrollLeft(u.container)},_=function(){return u.vertical?r.get.height(u.container):r.get.width(u.container)},w=this._setScrollPos=function(t){u.vertical?d?window.scrollTo(r.get.scrollLeft(),t):u.container.scrollTop=t:d?window.scrollTo(t,r.get.scrollTop()):u.container.scrollLeft=t},b=function(){if(m&&f){var t=r.type.Array(f)?f:c.slice(0);f=!1;var e=h,n=(h=l.scrollPos())-e;0!==n&&(p=n>0?"FORWARD":"REVERSE"),"REVERSE"===p&&t.reverse(),t.forEach((function(e,n){C(3,"updating Scene "+(n+1)+"/"+t.length+" ("+c.length+" total)"),e.update(!0)})),0===t.length&&u.loglevel>=3&&C(3,"updating 0 Scenes (nothing added to controller)")}},x=function(){i=r.rAF(b)},T=function(t){C(3,"event fired causing an update:",t.type),"resize"==t.type&&(g=_(),p="PAUSED"),!0!==f&&(f=!0,x())},E=function(){if(!d&&g!=_()){var t;try{t=new Event("resize",{bubbles:!1,cancelable:!1})}catch(e){(t=document.createEvent("Event")).initEvent("resize",!1,!1)}u.container.dispatchEvent(t)}c.forEach((function(t,e){t.refresh()})),v()},C=this._log=function(t,e){u.loglevel>=t&&(Array.prototype.splice.call(arguments,1,0,"("+a+") ->"),r.log.apply(window,arguments))};this._options=u;var S=function(t){if(t.length<=1)return t;var e=t.slice(0);return e.sort((function(t,e){return t.scrollOffset()>e.scrollOffset()?1:-1})),e};return this.addScene=function(e){if(r.type.Array(e))e.forEach((function(t,e){l.addScene(t)}));else if(e instanceof t.Scene){if(e.controller()!==l)e.addTo(l);else if(c.indexOf(e)<0){for(var n in c.push(e),c=S(c),e.on("shift.controller_sort",(function(){c=S(c)})),u.globalSceneOptions)e[n]&&e[n].call(e,u.globalSceneOptions[n]);C(3,"adding Scene (now "+c.length+" total)")}}else C(1,"ERROR: invalid argument supplied for '.addScene()'");return l},this.removeScene=function(t){if(r.type.Array(t))t.forEach((function(t,e){l.removeScene(t)}));else{var e=c.indexOf(t);e>-1&&(t.off("shift.controller_sort"),c.splice(e,1),C(3,"removing Scene (now "+c.length+" left)"),t.remove())}return l},this.updateScene=function(e,n){return r.type.Array(e)?e.forEach((function(t,e){l.updateScene(t,n)})):n?e.update(!0):!0!==f&&e instanceof t.Scene&&(-1==(f=f||[]).indexOf(e)&&f.push(e),f=S(f),x()),l},this.update=function(t){return T({type:"resize"}),t&&b(),l},this.scrollTo=function(e,n){if(r.type.Number(e))w.call(u.container,e,n);else if(e instanceof t.Scene)e.controller()===l?l.scrollTo(e.scrollOffset(),n):C(2,"scrollTo(): The supplied scene does not belong to this controller. Scroll cancelled.",e);else if(r.type.Function(e))w=e;else{var i=r.get.elements(e)[0];if(i){for(;i.parentNode.hasAttribute("data-scrollmagic-pin-spacer");)i=i.parentNode;var o=u.vertical?"top":"left",a=r.get.offset(u.container),s=r.get.offset(i);d||(a[o]-=l.scrollPos()),l.scrollTo(s[o]-a[o],n)}else C(2,"scrollTo(): The supplied argument is invalid. Scroll cancelled.",e)}return l},this.scrollPos=function(t){return arguments.length?(r.type.Function(t)?y=t:C(2,"Provided value for method 'scrollPos' is not a function. To change the current scroll position use 'scrollTo()'."),l):y.call(l)},this.info=function(t){var e={size:g,vertical:u.vertical,scrollPos:h,scrollDirection:p,container:u.container,isDocument:d};return arguments.length?void 0!==e[t]?e[t]:void C(1,'ERROR: option "'+t+'" is not available'):e},this.loglevel=function(t){return arguments.length?(u.loglevel!=t&&(u.loglevel=t),l):u.loglevel},this.enabled=function(t){return arguments.length?(m!=t&&(m=!!t,l.updateScene(c,!0)),l):m},this.destroy=function(t){window.clearTimeout(o);for(var e=c.length;e--;)c[e].destroy(t);return u.container.removeEventListener("resize",T),u.container.removeEventListener("scroll",T),r.cAF(i),C(3,"destroyed "+a+" (reset: "+(t?"true":"false")+")"),null},function(){for(var e in u)s.hasOwnProperty(e)||(C(2,'WARNING: Unknown option "'+e+'"'),delete u[e]);if(u.container=r.get.elements(u.container)[0],!u.container)throw C(1,"ERROR creating object "+a+": No valid scroll container supplied"),a+" init failed.";(d=u.container===window||u.container===document.body||!document.body.contains(u.container))&&(u.container=window),g=_(),u.container.addEventListener("resize",T),u.container.addEventListener("scroll",T);var n=parseInt(u.refreshInterval,10);u.refreshInterval=r.type.Number(n)?n:s.refreshInterval,v(),C(3,"added new "+a+" controller (v"+t.version+")")}(),l};var e={defaults:{container:window,vertical:!0,globalSceneOptions:{},loglevel:2,refreshInterval:100}};t.Controller.addOption=function(t,n){e.defaults[t]=n},t.Controller.extend=function(e){var n=this;t.Controller=function(){return n.apply(this,arguments),this.$super=r.extend({},this),e.apply(this,arguments)||this},r.extend(t.Controller,n),t.Controller.prototype=n.prototype,t.Controller.prototype.constructor=t.Controller},t.Scene=function(e){var i,o,a="ScrollMagic.Scene",s=n.defaults,l=this,u=r.extend({},s,e),c="BEFORE",f=0,h={start:0,end:0},p=0,d=!0,g={};this.on=function(t,e){return r.type.Function(e)?(t=t.trim().split(" ")).forEach((function(t){var n=t.split("."),r=n[0],i=n[1];"*"!=r&&(g[r]||(g[r]=[]),g[r].push({namespace:i||"",callback:e}))})):m(1,"ERROR when calling '.on()': Supplied callback for '"+t+"' is not a valid function!"),l},this.off=function(t,e){return t?((t=t.trim().split(" ")).forEach((function(t,n){var r=t.split("."),i=r[0],o=r[1]||"";("*"===i?Object.keys(g):[i]).forEach((function(t){for(var n=g[t]||[],r=n.length;r--;){var i=n[r];!i||o!==i.namespace&&"*"!==o||e&&e!=i.callback||n.splice(r,1)}n.length||delete g[t]}))})),l):(m(1,"ERROR: Invalid event name supplied."),l)},this.trigger=function(e,n){if(e){var r=e.trim().split("."),i=r[0],o=r[1],a=g[i];m(3,"event fired:",i,n?"->":"",n||""),a&&a.forEach((function(e,r){o&&o!==e.namespace||e.callback.call(l,new t.Event(i,e.namespace,l,n))}))}else m(1,"ERROR: Invalid event name supplied.");return l},l.on("change.internal",(function(t){"loglevel"!==t.what&&"tweenChanges"!==t.what&&("triggerElement"===t.what?b():"reverse"===t.what&&l.update())})).on("shift.internal",(function(t){_(),l.update()}));var m=this._log=function(t,e){u.loglevel>=t&&(Array.prototype.splice.call(arguments,1,0,"("+a+") ->"),r.log.apply(window,arguments))};this.addTo=function(e){return e instanceof t.Controller?o!=e&&(o&&o.removeScene(l),o=e,E(),w(!0),b(!0),_(),o.info("container").addEventListener("resize",x),e.addScene(l),l.trigger("add",{controller:o}),m(3,"added "+a+" to controller"),l.update()):m(1,"ERROR: supplied argument of 'addTo()' is not a valid ScrollMagic Controller"),l},this.enabled=function(t){return arguments.length?(d!=t&&(d=!!t,l.update(!0)),l):d},this.remove=function(){if(o){o.info("container").removeEventListener("resize",x);var t=o;o=void 0,t.removeScene(l),l.trigger("remove"),m(3,"removed "+a+" from controller")}return l},this.destroy=function(t){return l.trigger("destroy",{reset:t}),l.remove(),l.off("*.*"),m(3,"destroyed "+a+" (reset: "+(t?"true":"false")+")"),null},this.update=function(t){if(o)if(t)if(o.enabled()&&d){var e,n=o.info("scrollPos");e=u.duration>0?(n-h.start)/(h.end-h.start):n>=h.start?1:0,l.trigger("update",{startPos:h.start,endPos:h.end,scrollPos:n}),l.progress(e)}else v&&"DURING"===c&&A(!0);else o.updateScene(l,!1);return l},this.refresh=function(){return w(),b(),l},this.progress=function(t){if(arguments.length){var e=!1,n=c,r=o?o.info("scrollDirection"):"PAUSED",i=u.reverse||t>=f;if(0===u.duration?(e=f!=t,c=0==(f=t<1&&i?0:1)?"BEFORE":"DURING"):t<0&&"BEFORE"!==c&&i?(f=0,c="BEFORE",e=!0):t>=0&&t<1&&i?(f=t,c="DURING",e=!0):t>=1&&"AFTER"!==c?(f=1,c="AFTER",e=!0):"DURING"!==c||i||A(),e){var a={progress:f,state:c,scrollDirection:r},s=c!=n,h=function(t){l.trigger(t,a)};s&&"DURING"!==n&&(h("enter"),h("BEFORE"===n?"start":"end")),h("progress"),s&&"DURING"!==c&&(h("BEFORE"===c?"start":"end"),h("leave"))}return l}return f};var v,y,_=function(){h={start:p+u.offset},o&&u.triggerElement&&(h.start-=o.info("size")*u.triggerHook),h.end=h.start+u.duration},w=function(t){i&&C("duration",i.call(l))&&!t&&(l.trigger("change",{what:"duration",newval:u.duration}),l.trigger("shift",{reason:"duration"}))},b=function(t){var e=0,n=u.triggerElement;if(o&&(n||p>0)){if(n)if(n.parentNode){for(var i=o.info(),a=r.get.offset(i.container),s=i.vertical?"top":"left";n.parentNode.hasAttribute("data-scrollmagic-pin-spacer");)n=n.parentNode;var c=r.get.offset(n);i.isDocument||(a[s]-=o.scrollPos()),e=c[s]-a[s]}else m(2,"WARNING: triggerElement was removed from DOM and will be reset to",void 0),l.triggerElement(void 0);var f=e!=p;p=e,f&&!t&&l.trigger("shift",{reason:"triggerElementPosition"})}},x=function(t){u.triggerHook>0&&l.trigger("shift",{reason:"containerResize"})},T=r.extend(n.validate,{duration:function(t){if(r.type.String(t)&&t.match(/^(\.|\d)*\d+%$/)){var e=parseFloat(t)/100;t=function(){return o?o.info("size")*e:0}}if(r.type.Function(t)){i=t;try{t=parseFloat(i.call(l))}catch(e){t=-1}}if(t=parseFloat(t),!r.type.Number(t)||t<0)throw i?(i=void 0,['Invalid return value of supplied function for option "duration":',t]):['Invalid value for option "duration":',t];return t}}),E=function(t){(t=arguments.length?[t]:Object.keys(T)).forEach((function(t,e){var n;if(T[t])try{n=T[t](u[t])}catch(e){n=s[t];var i=r.type.String(e)?[e]:e;r.type.Array(i)?(i[0]="ERROR: "+i[0],i.unshift(1),m.apply(this,i)):m(1,"ERROR: Problem executing validation callback for option '"+t+"':",e.message)}finally{u[t]=n}}))},C=function(t,e){var n=!1,r=u[t];return u[t]!=e&&(u[t]=e,E(t),n=r!=u[t]),n},S=function(t){l[t]||(l[t]=function(e){return arguments.length?("duration"===t&&(i=void 0),C(t,e)&&(l.trigger("change",{what:t,newval:u[t]}),n.shifts.indexOf(t)>-1&&l.trigger("shift",{reason:t})),l):u[t]})};this.controller=function(){return o},this.state=function(){return c},this.scrollOffset=function(){return h.start},this.triggerPosition=function(){var t=u.offset;return o&&(u.triggerElement?t+=p:t+=o.info("size")*l.triggerHook()),t},l.on("shift.internal",(function(t){var e="duration"===t.reason;("AFTER"===c&&e||"DURING"===c&&0===u.duration)&&A(),e&&N()})).on("progress.internal",(function(t){A()})).on("add.internal",(function(t){N()})).on("destroy.internal",(function(t){l.removePin(t.reset)}));var A=function(t){if(v&&o){var e=o.info(),n=y.spacer.firstChild;if(t||"DURING"!==c){var i={position:y.inFlow?"relative":"absolute",top:0,left:0},a=r.css(n,"position")!=i.position;y.pushFollowers?u.duration>0&&("AFTER"===c&&0===parseFloat(r.css(y.spacer,"padding-top"))?a=!0:"BEFORE"===c&&0===parseFloat(r.css(y.spacer,"padding-bottom"))&&(a=!0)):i[e.vertical?"top":"left"]=u.duration*f,r.css(n,i),a&&N()}else{"fixed"!=r.css(n,"position")&&(r.css(n,{position:"fixed"}),N());var s=r.get.offset(y.spacer,!0),l=u.reverse||0===u.duration?e.scrollPos-h.start:Math.round(f*u.duration*10)/10;s[e.vertical?"top":"left"]+=l,r.css(y.spacer.firstChild,{top:s.top,left:s.left})}}},N=function(){if(v&&o&&y.inFlow){var t="DURING"===c,e=o.info("vertical"),n=y.spacer.firstChild,i=r.isMarginCollapseType(r.css(y.spacer,"display")),a={};y.relSize.width||y.relSize.autoFullWidth?t?r.css(v,{width:r.get.width(y.spacer)}):r.css(v,{width:"100%"}):(a["min-width"]=r.get.width(e?v:n,!0,!0),a.width=t?a["min-width"]:"auto"),y.relSize.height?t?r.css(v,{height:r.get.height(y.spacer)-(y.pushFollowers?u.duration:0)}):r.css(v,{height:"100%"}):(a["min-height"]=r.get.height(e?n:v,!0,!i),a.height=t?a["min-height"]:"auto"),y.pushFollowers&&(a["padding"+(e?"Top":"Left")]=u.duration*f,a["padding"+(e?"Bottom":"Right")]=u.duration*(1-f)),r.css(y.spacer,a)}},D=function(){o&&v&&"DURING"===c&&!o.info("isDocument")&&A()},k=function(){o&&v&&"DURING"===c&&((y.relSize.width||y.relSize.autoFullWidth)&&r.get.width(window)!=r.get.width(y.spacer.parentNode)||y.relSize.height&&r.get.height(window)!=r.get.height(y.spacer.parentNode))&&N()},M=function(t){o&&v&&"DURING"===c&&!o.info("isDocument")&&(t.preventDefault(),o._setScrollPos(o.info("scrollPos")-((t.wheelDelta||t[o.info("vertical")?"wheelDeltaY":"wheelDeltaX"])/3||30*-t.detail)))};this.setPin=function(t,e){var n=e&&e.hasOwnProperty("pushFollowers");if(e=r.extend({},{pushFollowers:!0,spacerClass:"scrollmagic-pin-spacer"},e),!(t=r.get.elements(t)[0]))return m(1,"ERROR calling method 'setPin()': Invalid pin element supplied."),l;if("fixed"===r.css(t,"position"))return m(1,"ERROR calling method 'setPin()': Pin does not work with elements that are positioned 'fixed'."),l;if(v){if(v===t)return l;l.removePin()}var i=(v=t).parentNode.style.display,o=["top","left","bottom","right","margin","marginLeft","marginRight","marginTop","marginBottom"];v.parentNode.style.display="none";var a="absolute"!=r.css(v,"position"),s=r.css(v,o.concat(["display"])),c=r.css(v,["width","height"]);v.parentNode.style.display=i,!a&&e.pushFollowers&&(m(2,"WARNING: If the pinned element is positioned absolutely pushFollowers will be disabled."),e.pushFollowers=!1),window.setTimeout((function(){v&&0===u.duration&&n&&e.pushFollowers&&m(2,"WARNING: pushFollowers =",!0,"has no effect, when scene duration is 0.")}),0);var f=v.parentNode.insertBefore(document.createElement("div"),v),h=r.extend(s,{position:a?"relative":"absolute",boxSizing:"content-box",mozBoxSizing:"content-box",webkitBoxSizing:"content-box"});if(a||r.extend(h,r.css(v,["width","height"])),r.css(f,h),f.setAttribute("data-scrollmagic-pin-spacer",""),r.addClass(f,e.spacerClass),y={spacer:f,relSize:{width:"%"===c.width.slice(-1),height:"%"===c.height.slice(-1),autoFullWidth:"auto"===c.width&&a&&r.isMarginCollapseType(s.display)},pushFollowers:e.pushFollowers,inFlow:a},!v.___origStyle){v.___origStyle={};var p=v.style;o.concat(["width","height","position","boxSizing","mozBoxSizing","webkitBoxSizing"]).forEach((function(t){v.___origStyle[t]=p[t]||""}))}return y.relSize.width&&r.css(f,{width:c.width}),y.relSize.height&&r.css(f,{height:c.height}),f.appendChild(v),r.css(v,{position:a?"relative":"absolute",margin:"auto",top:"auto",left:"auto",bottom:"auto",right:"auto"}),(y.relSize.width||y.relSize.autoFullWidth)&&r.css(v,{boxSizing:"border-box",mozBoxSizing:"border-box",webkitBoxSizing:"border-box"}),window.addEventListener("scroll",D),window.addEventListener("resize",D),window.addEventListener("resize",k),v.addEventListener("mousewheel",M),v.addEventListener("DOMMouseScroll",M),m(3,"added pin"),A(),l},this.removePin=function(t){if(v){if("DURING"===c&&A(!0),t||!o){var e=y.spacer.firstChild;if(e.hasAttribute("data-scrollmagic-pin-spacer")){var n=y.spacer.style,i={};["margin","marginLeft","marginRight","marginTop","marginBottom"].forEach((function(t){i[t]=n[t]||""})),r.css(e,i)}y.spacer.parentNode.insertBefore(e,y.spacer),y.spacer.parentNode.removeChild(y.spacer),v.parentNode.hasAttribute("data-scrollmagic-pin-spacer")||(r.css(v,v.___origStyle),delete v.___origStyle)}window.removeEventListener("scroll",D),window.removeEventListener("resize",D),window.removeEventListener("resize",k),v.removeEventListener("mousewheel",M),v.removeEventListener("DOMMouseScroll",M),v=void 0,m(3,"removed pin (reset: "+(t?"true":"false")+")")}return l};var I,O=[];return l.on("destroy.internal",(function(t){l.removeClassToggle(t.reset)})),this.setClassToggle=function(t,e){var n=r.get.elements(t);return 0!==n.length&&r.type.String(e)?(O.length>0&&l.removeClassToggle(),I=e,O=n,l.on("enter.internal_class leave.internal_class",(function(t){var e="enter"===t.type?r.addClass:r.removeClass;O.forEach((function(t,n){e(t,I)}))})),l):(m(1,"ERROR calling method 'setClassToggle()': Invalid "+(0===n.length?"element":"classes")+" supplied."),l)},this.removeClassToggle=function(t){return t&&O.forEach((function(t,e){r.removeClass(t,I)})),l.off("start.internal_class end.internal_class"),I=void 0,O=[],l},function(){for(var t in u)s.hasOwnProperty(t)||(m(2,'WARNING: Unknown option "'+t+'"'),delete u[t]);for(var e in s)S(e);E()}(),l};var n={defaults:{duration:0,offset:0,triggerElement:void 0,triggerHook:.5,reverse:!0,loglevel:2},validate:{offset:function(t){if(t=parseFloat(t),!r.type.Number(t))throw['Invalid value for option "offset":',t];return t},triggerElement:function(t){if(t=t||void 0){var e=r.get.elements(t)[0];if(!e||!e.parentNode)throw['Element defined in option "triggerElement" was not found:',t];t=e}return t},triggerHook:function(t){var e={onCenter:.5,onEnter:1,onLeave:0};if(r.type.Number(t))t=Math.max(0,Math.min(parseFloat(t),1));else{if(!(t in e))throw['Invalid value for option "triggerHook": ',t];t=e[t]}return t},reverse:function(t){return!!t},loglevel:function(t){if(t=parseInt(t),!r.type.Number(t)||t<0||t>3)throw['Invalid value for option "loglevel":',t];return t}},shifts:["duration","offset","triggerHook"]};t.Scene.addOption=function(e,r,i,o){e in n.defaults?t._util.log(1,"[static] ScrollMagic.Scene -> Cannot add Scene option '"+e+"', because it already exists."):(n.defaults[e]=r,n.validate[e]=i,o&&n.shifts.push(e))},t.Scene.extend=function(e){var n=this;t.Scene=function(){return n.apply(this,arguments),this.$super=r.extend({},this),e.apply(this,arguments)||this},r.extend(t.Scene,n),t.Scene.prototype=n.prototype,t.Scene.prototype.constructor=t.Scene},t.Event=function(t,e,n,r){for(var i in r=r||{})this[i]=r[i];return this.type=t,this.target=this.currentTarget=n,this.namespace=e||"",this.timeStamp=this.timestamp=Date.now(),this};var r=t._util=function(t){var e,n={},r=function(t){return parseFloat(t)||0},i=function(e){return e.currentStyle?e.currentStyle:t.getComputedStyle(e)},o=function(e,n,o,a){if((n=n===document?t:n)===t)a=!1;else if(!d.DomElement(n))return 0;e=e.charAt(0).toUpperCase()+e.substr(1).toLowerCase();var s=(o?n["offset"+e]||n["outer"+e]:n["client"+e]||n["inner"+e])||0;if(o&&a){var l=i(n);s+="Height"===e?r(l.marginTop)+r(l.marginBottom):r(l.marginLeft)+r(l.marginRight)}return s},a=function(t){return t.replace(/^[^a-z]+([a-z])/g,"$1").replace(/-([a-z])/g,(function(t){return t[1].toUpperCase()}))};n.extend=function(t){for(t=t||{},e=1;e<arguments.length;e++)if(arguments[e])for(var n in arguments[e])arguments[e].hasOwnProperty(n)&&(t[n]=arguments[e][n]);return t},n.isMarginCollapseType=function(t){return["block","flex","list-item","table","-webkit-box"].indexOf(t)>-1};var s=0,l=["ms","moz","webkit","o"],u=t.requestAnimationFrame,c=t.cancelAnimationFrame;for(e=0;!u&&e<l.length;++e)u=t[l[e]+"RequestAnimationFrame"],c=t[l[e]+"CancelAnimationFrame"]||t[l[e]+"CancelRequestAnimationFrame"];u||(u=function(e){var n=(new Date).getTime(),r=Math.max(0,16-(n-s)),i=t.setTimeout((function(){e(n+r)}),r);return s=n+r,i}),c||(c=function(e){t.clearTimeout(e)}),n.rAF=u.bind(t),n.cAF=c.bind(t);var f=["error","warn","log"],h=t.console||{};for(h.log=h.log||function(){},e=0;e<f.length;e++){var p=f[e];h[p]||(h[p]=h.log)}n.log=function(t){(t>f.length||t<=0)&&(t=f.length);var e=new Date,n=("0"+e.getHours()).slice(-2)+":"+("0"+e.getMinutes()).slice(-2)+":"+("0"+e.getSeconds()).slice(-2)+":"+("00"+e.getMilliseconds()).slice(-3),r=f[t-1],i=Array.prototype.splice.call(arguments,1),o=Function.prototype.bind.call(h[r],h);i.unshift(n),o.apply(h,i)};var d=n.type=function(t){return Object.prototype.toString.call(t).replace(/^\[object (.+)\]$/,"$1").toLowerCase()};d.String=function(t){return"string"===d(t)},d.Function=function(t){return"function"===d(t)},d.Array=function(t){return Array.isArray(t)},d.Number=function(t){return!d.Array(t)&&t-parseFloat(t)+1>=0},d.DomElement=function(t){return"object"==typeof HTMLElement||"function"==typeof HTMLElement?t instanceof HTMLElement||t instanceof SVGElement:t&&"object"==typeof t&&null!==t&&1===t.nodeType&&"string"==typeof t.nodeName};var g=n.get={};return g.elements=function(e){var n=[];if(d.String(e))try{e=document.querySelectorAll(e)}catch(t){return n}if("nodelist"===d(e)||d.Array(e)||e instanceof NodeList)for(var r=0,i=n.length=e.length;r<i;r++){var o=e[r];n[r]=d.DomElement(o)?o:g.elements(o)}else(d.DomElement(e)||e===document||e===t)&&(n=[e]);return n},g.scrollTop=function(e){return e&&"number"==typeof e.scrollTop?e.scrollTop:t.pageYOffset||0},g.scrollLeft=function(e){return e&&"number"==typeof e.scrollLeft?e.scrollLeft:t.pageXOffset||0},g.width=function(t,e,n){return o("width",t,e,n)},g.height=function(t,e,n){return o("height",t,e,n)},g.offset=function(t,e){var n={top:0,left:0};if(t&&t.getBoundingClientRect){var r=t.getBoundingClientRect();n.top=r.top,n.left=r.left,e||(n.top+=g.scrollTop(),n.left+=g.scrollLeft())}return n},n.addClass=function(t,e){e&&(t.classList?t.classList.add(e):t.className+=" "+e)},n.removeClass=function(t,e){e&&(t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," "))},n.css=function(t,e){if(d.String(e))return i(t)[a(e)];if(d.Array(e)){var n={},r=i(t);return e.forEach((function(t,e){n[t]=r[a(t)]})),n}for(var o in e){var s=e[o];s==parseFloat(s)&&(s+="px"),t.style[a(o)]=s}},n}(window||{});return t.Scene.prototype.addIndicators=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling addIndicators() due to missing Plugin 'debug.addIndicators'. Please make sure to include plugins/debug.addIndicators.js"),this},t.Scene.prototype.removeIndicators=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeIndicators() due to missing Plugin 'debug.addIndicators'. Please make sure to include plugins/debug.addIndicators.js"),this},t.Scene.prototype.setTween=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling setTween() due to missing Plugin 'animation.gsap'. Please make sure to include plugins/animation.gsap.js"),this},t.Scene.prototype.removeTween=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeTween() due to missing Plugin 'animation.gsap'. Please make sure to include plugins/animation.gsap.js"),this},t.Scene.prototype.setVelocity=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling setVelocity() due to missing Plugin 'animation.velocity'. Please make sure to include plugins/animation.velocity.js"),this},t.Scene.prototype.removeVelocity=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeVelocity() due to missing Plugin 'animation.velocity'. Please make sure to include plugins/animation.velocity.js"),this},t})?r.call(e,n,e,t):r)||(t.exports=i)},,,,,function(t,e,n){
/*!
  * Bootstrap v4.3.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){o(t,e,n[e])}))}return t}e=e&&e.hasOwnProperty("default")?e.default:e,n=n&&n.hasOwnProperty("default")?n.default:n;var s="transitionend";function l(t){var n=this,r=!1;return e(this).one(u.TRANSITION_END,(function(){r=!0})),setTimeout((function(){r||u.triggerTransitionEnd(n)}),t),this}var u={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");if(!e||"#"===e){var n=t.getAttribute("href");e=n&&"#"!==n?n.trim():""}try{return document.querySelector(e)?e:null}catch(t){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var n=e(t).css("transition-duration"),r=e(t).css("transition-delay"),i=parseFloat(n),o=parseFloat(r);return i||o?(n=n.split(",")[0],r=r.split(",")[0],1e3*(parseFloat(n)+parseFloat(r))):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){e(t).trigger(s)},supportsTransitionEnd:function(){return Boolean(s)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var i=n[r],o=e[r],a=o&&u.isElement(o)?"element":(s=o,{}.toString.call(s).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(i).test(a))throw new Error(t.toUpperCase()+': Option "'+r+'" provided type "'+a+'" but expected type "'+i+'".')}var s},findShadowRoot:function(t){if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){var e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?u.findShadowRoot(t.parentNode):null}};e.fn.emulateTransitionEnd=l,e.event.special[u.TRANSITION_END]={bindType:s,delegateType:s,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}};var c=e.fn.alert,f={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},h="alert",p="fade",d="show",g=function(){function t(t){this._element=t}var n=t.prototype;return n.close=function(t){var e=this._element;t&&(e=this._getRootElement(t)),this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},n.dispose=function(){e.removeData(this._element,"bs.alert"),this._element=null},n._getRootElement=function(t){var n=u.getSelectorFromElement(t),r=!1;return n&&(r=document.querySelector(n)),r||(r=e(t).closest("."+h)[0]),r},n._triggerCloseEvent=function(t){var n=e.Event(f.CLOSE);return e(t).trigger(n),n},n._removeElement=function(t){var n=this;if(e(t).removeClass(d),e(t).hasClass(p)){var r=u.getTransitionDurationFromElement(t);e(t).one(u.TRANSITION_END,(function(e){return n._destroyElement(t,e)})).emulateTransitionEnd(r)}else this._destroyElement(t)},n._destroyElement=function(t){e(t).detach().trigger(f.CLOSED).remove()},t._jQueryInterface=function(n){return this.each((function(){var r=e(this),i=r.data("bs.alert");i||(i=new t(this),r.data("bs.alert",i)),"close"===n&&i[n](this)}))},t._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),t}();e(document).on(f.CLICK_DATA_API,'[data-dismiss="alert"]',g._handleDismiss(new g)),e.fn.alert=g._jQueryInterface,e.fn.alert.Constructor=g,e.fn.alert.noConflict=function(){return e.fn.alert=c,g._jQueryInterface};var m=e.fn.button,v="active",y="btn",_="focus",w='[data-toggle^="button"]',b='[data-toggle="buttons"]',x='input:not([type="hidden"])',T=".active",E=".btn",C={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},S=function(){function t(t){this._element=t}var n=t.prototype;return n.toggle=function(){var t=!0,n=!0,r=e(this._element).closest(b)[0];if(r){var i=this._element.querySelector(x);if(i){if("radio"===i.type)if(i.checked&&this._element.classList.contains(v))t=!1;else{var o=r.querySelector(T);o&&e(o).removeClass(v)}if(t){if(i.hasAttribute("disabled")||r.hasAttribute("disabled")||i.classList.contains("disabled")||r.classList.contains("disabled"))return;i.checked=!this._element.classList.contains(v),e(i).trigger("change")}i.focus(),n=!1}}n&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(v)),t&&e(this._element).toggleClass(v)},n.dispose=function(){e.removeData(this._element,"bs.button"),this._element=null},t._jQueryInterface=function(n){return this.each((function(){var r=e(this).data("bs.button");r||(r=new t(this),e(this).data("bs.button",r)),"toggle"===n&&r[n]()}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),t}();e(document).on(C.CLICK_DATA_API,w,(function(t){t.preventDefault();var n=t.target;e(n).hasClass(y)||(n=e(n).closest(E)),S._jQueryInterface.call(e(n),"toggle")})).on(C.FOCUS_BLUR_DATA_API,w,(function(t){var n=e(t.target).closest(E)[0];e(n).toggleClass(_,/^focus(in)?$/.test(t.type))})),e.fn.button=S._jQueryInterface,e.fn.button.Constructor=S,e.fn.button.noConflict=function(){return e.fn.button=m,S._jQueryInterface};var A="carousel",N=".bs.carousel",D=e.fn[A],k={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},M={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},I="next",O="prev",L="left",R="right",P={SLIDE:"slide.bs.carousel",SLID:"slid.bs.carousel",KEYDOWN:"keydown.bs.carousel",MOUSEENTER:"mouseenter.bs.carousel",MOUSELEAVE:"mouseleave.bs.carousel",TOUCHSTART:"touchstart.bs.carousel",TOUCHMOVE:"touchmove.bs.carousel",TOUCHEND:"touchend.bs.carousel",POINTERDOWN:"pointerdown.bs.carousel",POINTERUP:"pointerup.bs.carousel",DRAG_START:"dragstart.bs.carousel",LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},j="carousel",H="active",F="slide",q="carousel-item-right",U="carousel-item-left",B="carousel-item-next",W="carousel-item-prev",z="pointer-event",Y={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",ITEM_IMG:".carousel-item img",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},V={TOUCH:"touch",PEN:"pen"},G=function(){function t(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._element=t,this._indicatorsElement=this._element.querySelector(Y.INDICATORS),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}var n=t.prototype;return n.next=function(){this._isSliding||this._slide(I)},n.nextWhenVisible=function(){!document.hidden&&e(this._element).is(":visible")&&"hidden"!==e(this._element).css("visibility")&&this.next()},n.prev=function(){this._isSliding||this._slide(O)},n.pause=function(t){t||(this._isPaused=!0),this._element.querySelector(Y.NEXT_PREV)&&(u.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},n.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},n.to=function(t){var n=this;this._activeElement=this._element.querySelector(Y.ACTIVE_ITEM);var r=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)e(this._element).one(P.SLID,(function(){return n.to(t)}));else{if(r===t)return this.pause(),void this.cycle();var i=t>r?I:O;this._slide(i,this._items[t])}},n.dispose=function(){e(this._element).off(N),e.removeData(this._element,"bs.carousel"),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},n._getConfig=function(t){return t=a({},k,t),u.typeCheckConfig(A,t,M),t},n._handleSwipe=function(){var t=Math.abs(this.touchDeltaX);if(!(t<=40)){var e=t/this.touchDeltaX;e>0&&this.prev(),e<0&&this.next()}},n._addEventListeners=function(){var t=this;this._config.keyboard&&e(this._element).on(P.KEYDOWN,(function(e){return t._keydown(e)})),"hover"===this._config.pause&&e(this._element).on(P.MOUSEENTER,(function(e){return t.pause(e)})).on(P.MOUSELEAVE,(function(e){return t.cycle(e)})),this._config.touch&&this._addTouchEventListeners()},n._addTouchEventListeners=function(){var t=this;if(this._touchSupported){var n=function(e){t._pointerEvent&&V[e.originalEvent.pointerType.toUpperCase()]?t.touchStartX=e.originalEvent.clientX:t._pointerEvent||(t.touchStartX=e.originalEvent.touches[0].clientX)},r=function(e){t._pointerEvent&&V[e.originalEvent.pointerType.toUpperCase()]&&(t.touchDeltaX=e.originalEvent.clientX-t.touchStartX),t._handleSwipe(),"hover"===t._config.pause&&(t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout((function(e){return t.cycle(e)}),500+t._config.interval))};e(this._element.querySelectorAll(Y.ITEM_IMG)).on(P.DRAG_START,(function(t){return t.preventDefault()})),this._pointerEvent?(e(this._element).on(P.POINTERDOWN,(function(t){return n(t)})),e(this._element).on(P.POINTERUP,(function(t){return r(t)})),this._element.classList.add(z)):(e(this._element).on(P.TOUCHSTART,(function(t){return n(t)})),e(this._element).on(P.TOUCHMOVE,(function(e){return function(e){e.originalEvent.touches&&e.originalEvent.touches.length>1?t.touchDeltaX=0:t.touchDeltaX=e.originalEvent.touches[0].clientX-t.touchStartX}(e)})),e(this._element).on(P.TOUCHEND,(function(t){return r(t)})))}},n._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},n._getItemIndex=function(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(Y.ITEM)):[],this._items.indexOf(t)},n._getItemByDirection=function(t,e){var n=t===I,r=t===O,i=this._getItemIndex(e),o=this._items.length-1;if((r&&0===i||n&&i===o)&&!this._config.wrap)return e;var a=(i+(t===O?-1:1))%this._items.length;return-1===a?this._items[this._items.length-1]:this._items[a]},n._triggerSlideEvent=function(t,n){var r=this._getItemIndex(t),i=this._getItemIndex(this._element.querySelector(Y.ACTIVE_ITEM)),o=e.Event(P.SLIDE,{relatedTarget:t,direction:n,from:i,to:r});return e(this._element).trigger(o),o},n._setActiveIndicatorElement=function(t){if(this._indicatorsElement){var n=[].slice.call(this._indicatorsElement.querySelectorAll(Y.ACTIVE));e(n).removeClass(H);var r=this._indicatorsElement.children[this._getItemIndex(t)];r&&e(r).addClass(H)}},n._slide=function(t,n){var r,i,o,a=this,s=this._element.querySelector(Y.ACTIVE_ITEM),l=this._getItemIndex(s),c=n||s&&this._getItemByDirection(t,s),f=this._getItemIndex(c),h=Boolean(this._interval);if(t===I?(r=U,i=B,o=L):(r=q,i=W,o=R),c&&e(c).hasClass(H))this._isSliding=!1;else if(!this._triggerSlideEvent(c,o).isDefaultPrevented()&&s&&c){this._isSliding=!0,h&&this.pause(),this._setActiveIndicatorElement(c);var p=e.Event(P.SLID,{relatedTarget:c,direction:o,from:l,to:f});if(e(this._element).hasClass(F)){e(c).addClass(i),u.reflow(c),e(s).addClass(r),e(c).addClass(r);var d=parseInt(c.getAttribute("data-interval"),10);d?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=d):this._config.interval=this._config.defaultInterval||this._config.interval;var g=u.getTransitionDurationFromElement(s);e(s).one(u.TRANSITION_END,(function(){e(c).removeClass(r+" "+i).addClass(H),e(s).removeClass(H+" "+i+" "+r),a._isSliding=!1,setTimeout((function(){return e(a._element).trigger(p)}),0)})).emulateTransitionEnd(g)}else e(s).removeClass(H),e(c).addClass(H),this._isSliding=!1,e(this._element).trigger(p);h&&this.cycle()}},t._jQueryInterface=function(n){return this.each((function(){var r=e(this).data("bs.carousel"),i=a({},k,e(this).data());"object"==typeof n&&(i=a({},i,n));var o="string"==typeof n?n:i.slide;if(r||(r=new t(this,i),e(this).data("bs.carousel",r)),"number"==typeof n)r.to(n);else if("string"==typeof o){if(void 0===r[o])throw new TypeError('No method named "'+o+'"');r[o]()}else i.interval&&i.ride&&(r.pause(),r.cycle())}))},t._dataApiClickHandler=function(n){var r=u.getSelectorFromElement(this);if(r){var i=e(r)[0];if(i&&e(i).hasClass(j)){var o=a({},e(i).data(),e(this).data()),s=this.getAttribute("data-slide-to");s&&(o.interval=!1),t._jQueryInterface.call(e(i),o),s&&e(i).data("bs.carousel").to(s),n.preventDefault()}}},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return k}}]),t}();e(document).on(P.CLICK_DATA_API,Y.DATA_SLIDE,G._dataApiClickHandler),e(window).on(P.LOAD_DATA_API,(function(){for(var t=[].slice.call(document.querySelectorAll(Y.DATA_RIDE)),n=0,r=t.length;n<r;n++){var i=e(t[n]);G._jQueryInterface.call(i,i.data())}})),e.fn[A]=G._jQueryInterface,e.fn[A].Constructor=G,e.fn[A].noConflict=function(){return e.fn[A]=D,G._jQueryInterface};var $="collapse",X=e.fn[$],K={toggle:!0,parent:""},Q={toggle:"boolean",parent:"(string|element)"},Z={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},J="show",tt="collapse",et="collapsing",nt="collapsed",rt="width",it="height",ot={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},at=function(){function t(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(ot.DATA_TOGGLE)),r=0,i=n.length;r<i;r++){var o=n[r],a=u.getSelectorFromElement(o),s=[].slice.call(document.querySelectorAll(a)).filter((function(e){return e===t}));null!==a&&s.length>0&&(this._selector=a,this._triggerArray.push(o))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var n=t.prototype;return n.toggle=function(){e(this._element).hasClass(J)?this.hide():this.show()},n.show=function(){var n,r,i=this;if(!(this._isTransitioning||e(this._element).hasClass(J)||(this._parent&&0===(n=[].slice.call(this._parent.querySelectorAll(ot.ACTIVES)).filter((function(t){return"string"==typeof i._config.parent?t.getAttribute("data-parent")===i._config.parent:t.classList.contains(tt)}))).length&&(n=null),n&&(r=e(n).not(this._selector).data("bs.collapse"))&&r._isTransitioning))){var o=e.Event(Z.SHOW);if(e(this._element).trigger(o),!o.isDefaultPrevented()){n&&(t._jQueryInterface.call(e(n).not(this._selector),"hide"),r||e(n).data("bs.collapse",null));var a=this._getDimension();e(this._element).removeClass(tt).addClass(et),this._element.style[a]=0,this._triggerArray.length&&e(this._triggerArray).removeClass(nt).attr("aria-expanded",!0),this.setTransitioning(!0);var s="scroll"+(a[0].toUpperCase()+a.slice(1)),l=u.getTransitionDurationFromElement(this._element);e(this._element).one(u.TRANSITION_END,(function(){e(i._element).removeClass(et).addClass(tt).addClass(J),i._element.style[a]="",i.setTransitioning(!1),e(i._element).trigger(Z.SHOWN)})).emulateTransitionEnd(l),this._element.style[a]=this._element[s]+"px"}}},n.hide=function(){var t=this;if(!this._isTransitioning&&e(this._element).hasClass(J)){var n=e.Event(Z.HIDE);if(e(this._element).trigger(n),!n.isDefaultPrevented()){var r=this._getDimension();this._element.style[r]=this._element.getBoundingClientRect()[r]+"px",u.reflow(this._element),e(this._element).addClass(et).removeClass(tt).removeClass(J);var i=this._triggerArray.length;if(i>0)for(var o=0;o<i;o++){var a=this._triggerArray[o],s=u.getSelectorFromElement(a);null!==s&&(e([].slice.call(document.querySelectorAll(s))).hasClass(J)||e(a).addClass(nt).attr("aria-expanded",!1))}this.setTransitioning(!0),this._element.style[r]="";var l=u.getTransitionDurationFromElement(this._element);e(this._element).one(u.TRANSITION_END,(function(){t.setTransitioning(!1),e(t._element).removeClass(et).addClass(tt).trigger(Z.HIDDEN)})).emulateTransitionEnd(l)}}},n.setTransitioning=function(t){this._isTransitioning=t},n.dispose=function(){e.removeData(this._element,"bs.collapse"),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},n._getConfig=function(t){return(t=a({},K,t)).toggle=Boolean(t.toggle),u.typeCheckConfig($,t,Q),t},n._getDimension=function(){return e(this._element).hasClass(rt)?rt:it},n._getParent=function(){var n,r=this;u.isElement(this._config.parent)?(n=this._config.parent,void 0!==this._config.parent.jquery&&(n=this._config.parent[0])):n=document.querySelector(this._config.parent);var i='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',o=[].slice.call(n.querySelectorAll(i));return e(o).each((function(e,n){r._addAriaAndCollapsedClass(t._getTargetFromElement(n),[n])})),n},n._addAriaAndCollapsedClass=function(t,n){var r=e(t).hasClass(J);n.length&&e(n).toggleClass(nt,!r).attr("aria-expanded",r)},t._getTargetFromElement=function(t){var e=u.getSelectorFromElement(t);return e?document.querySelector(e):null},t._jQueryInterface=function(n){return this.each((function(){var r=e(this),i=r.data("bs.collapse"),o=a({},K,r.data(),"object"==typeof n&&n?n:{});if(!i&&o.toggle&&/show|hide/.test(n)&&(o.toggle=!1),i||(i=new t(this,o),r.data("bs.collapse",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return K}}]),t}();e(document).on(Z.CLICK_DATA_API,ot.DATA_TOGGLE,(function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var n=e(this),r=u.getSelectorFromElement(this),i=[].slice.call(document.querySelectorAll(r));e(i).each((function(){var t=e(this),r=t.data("bs.collapse")?"toggle":n.data();at._jQueryInterface.call(t,r)}))})),e.fn[$]=at._jQueryInterface,e.fn[$].Constructor=at,e.fn[$].noConflict=function(){return e.fn[$]=X,at._jQueryInterface};var st="dropdown",lt=e.fn[st],ut=new RegExp("38|40|27"),ct={HIDE:"hide.bs.dropdown",HIDDEN:"hidden.bs.dropdown",SHOW:"show.bs.dropdown",SHOWN:"shown.bs.dropdown",CLICK:"click.bs.dropdown",CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},ft="disabled",ht="show",pt="dropup",dt="dropright",gt="dropleft",mt="dropdown-menu-right",vt="position-static",yt='[data-toggle="dropdown"]',_t=".dropdown form",wt=".dropdown-menu",bt=".navbar-nav",xt=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",Tt="top-start",Et="top-end",Ct="bottom-start",St="bottom-end",At="right-start",Nt="left-start",Dt={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},kt={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},Mt=function(){function t(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var r=t.prototype;return r.toggle=function(){if(!this._element.disabled&&!e(this._element).hasClass(ft)){var r=t._getParentFromElement(this._element),i=e(this._menu).hasClass(ht);if(t._clearMenus(),!i){var o={relatedTarget:this._element},a=e.Event(ct.SHOW,o);if(e(r).trigger(a),!a.isDefaultPrevented()){if(!this._inNavbar){if(void 0===n)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var s=this._element;"parent"===this._config.reference?s=r:u.isElement(this._config.reference)&&(s=this._config.reference,void 0!==this._config.reference.jquery&&(s=this._config.reference[0])),"scrollParent"!==this._config.boundary&&e(r).addClass(vt),this._popper=new n(s,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===e(r).closest(bt).length&&e(document.body).children().on("mouseover",null,e.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),e(this._menu).toggleClass(ht),e(r).toggleClass(ht).trigger(e.Event(ct.SHOWN,o))}}}},r.show=function(){if(!(this._element.disabled||e(this._element).hasClass(ft)||e(this._menu).hasClass(ht))){var n={relatedTarget:this._element},r=e.Event(ct.SHOW,n),i=t._getParentFromElement(this._element);e(i).trigger(r),r.isDefaultPrevented()||(e(this._menu).toggleClass(ht),e(i).toggleClass(ht).trigger(e.Event(ct.SHOWN,n)))}},r.hide=function(){if(!this._element.disabled&&!e(this._element).hasClass(ft)&&e(this._menu).hasClass(ht)){var n={relatedTarget:this._element},r=e.Event(ct.HIDE,n),i=t._getParentFromElement(this._element);e(i).trigger(r),r.isDefaultPrevented()||(e(this._menu).toggleClass(ht),e(i).toggleClass(ht).trigger(e.Event(ct.HIDDEN,n)))}},r.dispose=function(){e.removeData(this._element,"bs.dropdown"),e(this._element).off(".bs.dropdown"),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},r.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},r._addEventListeners=function(){var t=this;e(this._element).on(ct.CLICK,(function(e){e.preventDefault(),e.stopPropagation(),t.toggle()}))},r._getConfig=function(t){return t=a({},this.constructor.Default,e(this._element).data(),t),u.typeCheckConfig(st,t,this.constructor.DefaultType),t},r._getMenuElement=function(){if(!this._menu){var e=t._getParentFromElement(this._element);e&&(this._menu=e.querySelector(wt))}return this._menu},r._getPlacement=function(){var t=e(this._element.parentNode),n=Ct;return t.hasClass(pt)?(n=Tt,e(this._menu).hasClass(mt)&&(n=Et)):t.hasClass(dt)?n=At:t.hasClass(gt)?n=Nt:e(this._menu).hasClass(mt)&&(n=St),n},r._detectNavbar=function(){return e(this._element).closest(".navbar").length>0},r._getOffset=function(){var t=this,e={};return"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=a({},e.offsets,t._config.offset(e.offsets,t._element)||{}),e}:e.offset=this._config.offset,e},r._getPopperConfig=function(){var t={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(t.modifiers.applyStyle={enabled:!1}),t},t._jQueryInterface=function(n){return this.each((function(){var r=e(this).data("bs.dropdown");if(r||(r=new t(this,"object"==typeof n?n:null),e(this).data("bs.dropdown",r)),"string"==typeof n){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}}))},t._clearMenus=function(n){if(!n||3!==n.which&&("keyup"!==n.type||9===n.which))for(var r=[].slice.call(document.querySelectorAll(yt)),i=0,o=r.length;i<o;i++){var a=t._getParentFromElement(r[i]),s=e(r[i]).data("bs.dropdown"),l={relatedTarget:r[i]};if(n&&"click"===n.type&&(l.clickEvent=n),s){var u=s._menu;if(e(a).hasClass(ht)&&!(n&&("click"===n.type&&/input|textarea/i.test(n.target.tagName)||"keyup"===n.type&&9===n.which)&&e.contains(a,n.target))){var c=e.Event(ct.HIDE,l);e(a).trigger(c),c.isDefaultPrevented()||("ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),r[i].setAttribute("aria-expanded","false"),e(u).removeClass(ht),e(a).removeClass(ht).trigger(e.Event(ct.HIDDEN,l)))}}}},t._getParentFromElement=function(t){var e,n=u.getSelectorFromElement(t);return n&&(e=document.querySelector(n)),e||t.parentNode},t._dataApiKeydownHandler=function(n){if((/input|textarea/i.test(n.target.tagName)?!(32===n.which||27!==n.which&&(40!==n.which&&38!==n.which||e(n.target).closest(wt).length)):ut.test(n.which))&&(n.preventDefault(),n.stopPropagation(),!this.disabled&&!e(this).hasClass(ft))){var r=t._getParentFromElement(this),i=e(r).hasClass(ht);if(i&&(!i||27!==n.which&&32!==n.which)){var o=[].slice.call(r.querySelectorAll(xt));if(0!==o.length){var a=o.indexOf(n.target);38===n.which&&a>0&&a--,40===n.which&&a<o.length-1&&a++,a<0&&(a=0),o[a].focus()}}else{if(27===n.which){var s=r.querySelector(yt);e(s).trigger("focus")}e(this).trigger("click")}}},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Dt}},{key:"DefaultType",get:function(){return kt}}]),t}();e(document).on(ct.KEYDOWN_DATA_API,yt,Mt._dataApiKeydownHandler).on(ct.KEYDOWN_DATA_API,wt,Mt._dataApiKeydownHandler).on(ct.CLICK_DATA_API+" "+ct.KEYUP_DATA_API,Mt._clearMenus).on(ct.CLICK_DATA_API,yt,(function(t){t.preventDefault(),t.stopPropagation(),Mt._jQueryInterface.call(e(this),"toggle")})).on(ct.CLICK_DATA_API,_t,(function(t){t.stopPropagation()})),e.fn[st]=Mt._jQueryInterface,e.fn[st].Constructor=Mt,e.fn[st].noConflict=function(){return e.fn[st]=lt,Mt._jQueryInterface};var It=e.fn.modal,Ot={backdrop:!0,keyboard:!0,focus:!0,show:!0},Lt={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},Rt={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},Pt="modal-dialog-scrollable",jt="modal-scrollbar-measure",Ht="modal-backdrop",Ft="modal-open",qt="fade",Ut="show",Bt={DIALOG:".modal-dialog",MODAL_BODY:".modal-body",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top"},Wt=function(){function t(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=t.querySelector(Bt.DIALOG),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}var n=t.prototype;return n.toggle=function(t){return this._isShown?this.hide():this.show(t)},n.show=function(t){var n=this;if(!this._isShown&&!this._isTransitioning){e(this._element).hasClass(qt)&&(this._isTransitioning=!0);var r=e.Event(Rt.SHOW,{relatedTarget:t});e(this._element).trigger(r),this._isShown||r.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),e(this._element).on(Rt.CLICK_DISMISS,Bt.DATA_DISMISS,(function(t){return n.hide(t)})),e(this._dialog).on(Rt.MOUSEDOWN_DISMISS,(function(){e(n._element).one(Rt.MOUSEUP_DISMISS,(function(t){e(t.target).is(n._element)&&(n._ignoreBackdropClick=!0)}))})),this._showBackdrop((function(){return n._showElement(t)})))}},n.hide=function(t){var n=this;if(t&&t.preventDefault(),this._isShown&&!this._isTransitioning){var r=e.Event(Rt.HIDE);if(e(this._element).trigger(r),this._isShown&&!r.isDefaultPrevented()){this._isShown=!1;var i=e(this._element).hasClass(qt);if(i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),e(document).off(Rt.FOCUSIN),e(this._element).removeClass(Ut),e(this._element).off(Rt.CLICK_DISMISS),e(this._dialog).off(Rt.MOUSEDOWN_DISMISS),i){var o=u.getTransitionDurationFromElement(this._element);e(this._element).one(u.TRANSITION_END,(function(t){return n._hideModal(t)})).emulateTransitionEnd(o)}else this._hideModal()}}},n.dispose=function(){[window,this._element,this._dialog].forEach((function(t){return e(t).off(".bs.modal")})),e(document).off(Rt.FOCUSIN),e.removeData(this._element,"bs.modal"),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},n.handleUpdate=function(){this._adjustDialog()},n._getConfig=function(t){return t=a({},Ot,t),u.typeCheckConfig("modal",t,Lt),t},n._showElement=function(t){var n=this,r=e(this._element).hasClass(qt);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),e(this._dialog).hasClass(Pt)?this._dialog.querySelector(Bt.MODAL_BODY).scrollTop=0:this._element.scrollTop=0,r&&u.reflow(this._element),e(this._element).addClass(Ut),this._config.focus&&this._enforceFocus();var i=e.Event(Rt.SHOWN,{relatedTarget:t}),o=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,e(n._element).trigger(i)};if(r){var a=u.getTransitionDurationFromElement(this._dialog);e(this._dialog).one(u.TRANSITION_END,o).emulateTransitionEnd(a)}else o()},n._enforceFocus=function(){var t=this;e(document).off(Rt.FOCUSIN).on(Rt.FOCUSIN,(function(n){document!==n.target&&t._element!==n.target&&0===e(t._element).has(n.target).length&&t._element.focus()}))},n._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?e(this._element).on(Rt.KEYDOWN_DISMISS,(function(e){27===e.which&&(e.preventDefault(),t.hide())})):this._isShown||e(this._element).off(Rt.KEYDOWN_DISMISS)},n._setResizeEvent=function(){var t=this;this._isShown?e(window).on(Rt.RESIZE,(function(e){return t.handleUpdate(e)})):e(window).off(Rt.RESIZE)},n._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._isTransitioning=!1,this._showBackdrop((function(){e(document.body).removeClass(Ft),t._resetAdjustments(),t._resetScrollbar(),e(t._element).trigger(Rt.HIDDEN)}))},n._removeBackdrop=function(){this._backdrop&&(e(this._backdrop).remove(),this._backdrop=null)},n._showBackdrop=function(t){var n=this,r=e(this._element).hasClass(qt)?qt:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=Ht,r&&this._backdrop.classList.add(r),e(this._backdrop).appendTo(document.body),e(this._element).on(Rt.CLICK_DISMISS,(function(t){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())})),r&&u.reflow(this._backdrop),e(this._backdrop).addClass(Ut),!t)return;if(!r)return void t();var i=u.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(u.TRANSITION_END,t).emulateTransitionEnd(i)}else if(!this._isShown&&this._backdrop){e(this._backdrop).removeClass(Ut);var o=function(){n._removeBackdrop(),t&&t()};if(e(this._element).hasClass(qt)){var a=u.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(u.TRANSITION_END,o).emulateTransitionEnd(a)}else o()}else t&&t()},n._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},n._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},n._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},n._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){var n=[].slice.call(document.querySelectorAll(Bt.FIXED_CONTENT)),r=[].slice.call(document.querySelectorAll(Bt.STICKY_CONTENT));e(n).each((function(n,r){var i=r.style.paddingRight,o=e(r).css("padding-right");e(r).data("padding-right",i).css("padding-right",parseFloat(o)+t._scrollbarWidth+"px")})),e(r).each((function(n,r){var i=r.style.marginRight,o=e(r).css("margin-right");e(r).data("margin-right",i).css("margin-right",parseFloat(o)-t._scrollbarWidth+"px")}));var i=document.body.style.paddingRight,o=e(document.body).css("padding-right");e(document.body).data("padding-right",i).css("padding-right",parseFloat(o)+this._scrollbarWidth+"px")}e(document.body).addClass(Ft)},n._resetScrollbar=function(){var t=[].slice.call(document.querySelectorAll(Bt.FIXED_CONTENT));e(t).each((function(t,n){var r=e(n).data("padding-right");e(n).removeData("padding-right"),n.style.paddingRight=r||""}));var n=[].slice.call(document.querySelectorAll(""+Bt.STICKY_CONTENT));e(n).each((function(t,n){var r=e(n).data("margin-right");void 0!==r&&e(n).css("margin-right",r).removeData("margin-right")}));var r=e(document.body).data("padding-right");e(document.body).removeData("padding-right"),document.body.style.paddingRight=r||""},n._getScrollbarWidth=function(){var t=document.createElement("div");t.className=jt,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},t._jQueryInterface=function(n,r){return this.each((function(){var i=e(this).data("bs.modal"),o=a({},Ot,e(this).data(),"object"==typeof n&&n?n:{});if(i||(i=new t(this,o),e(this).data("bs.modal",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n](r)}else o.show&&i.show(r)}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Ot}}]),t}();e(document).on(Rt.CLICK_DATA_API,Bt.DATA_TOGGLE,(function(t){var n,r=this,i=u.getSelectorFromElement(this);i&&(n=document.querySelector(i));var o=e(n).data("bs.modal")?"toggle":a({},e(n).data(),e(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var s=e(n).one(Rt.SHOW,(function(t){t.isDefaultPrevented()||s.one(Rt.HIDDEN,(function(){e(r).is(":visible")&&r.focus()}))}));Wt._jQueryInterface.call(e(n),o,this)})),e.fn.modal=Wt._jQueryInterface,e.fn.modal.Constructor=Wt,e.fn.modal.noConflict=function(){return e.fn.modal=It,Wt._jQueryInterface};var zt=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],Yt={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},Vt=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,Gt=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;function $t(t,e,n){if(0===t.length)return t;if(n&&"function"==typeof n)return n(t);for(var r=(new window.DOMParser).parseFromString(t,"text/html"),i=Object.keys(e),o=[].slice.call(r.body.querySelectorAll("*")),a=function(t,n){var r=o[t],a=r.nodeName.toLowerCase();if(-1===i.indexOf(r.nodeName.toLowerCase()))return r.parentNode.removeChild(r),"continue";var s=[].slice.call(r.attributes),l=[].concat(e["*"]||[],e[a]||[]);s.forEach((function(t){(function(t,e){var n=t.nodeName.toLowerCase();if(-1!==e.indexOf(n))return-1===zt.indexOf(n)||Boolean(t.nodeValue.match(Vt)||t.nodeValue.match(Gt));for(var r=e.filter((function(t){return t instanceof RegExp})),i=0,o=r.length;i<o;i++)if(n.match(r[i]))return!0;return!1})(t,l)||r.removeAttribute(t.nodeName)}))},s=0,l=o.length;s<l;s++)a(s);return r.body.innerHTML}var Xt="tooltip",Kt=e.fn.tooltip,Qt=new RegExp("(^|\\s)bs-tooltip\\S+","g"),Zt=["sanitize","whiteList","sanitizeFn"],Jt={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string|function)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)",sanitize:"boolean",sanitizeFn:"(null|function)",whiteList:"object"},te={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},ee={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent",sanitize:!0,sanitizeFn:null,whiteList:Yt},ne="show",re="out",ie={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},oe="fade",ae="show",se=".tooltip-inner",le=".arrow",ue="hover",ce="focus",fe="click",he="manual",pe=function(){function t(t,e){if(void 0===n)throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var r=t.prototype;return r.enable=function(){this._isEnabled=!0},r.disable=function(){this._isEnabled=!1},r.toggleEnabled=function(){this._isEnabled=!this._isEnabled},r.toggle=function(t){if(this._isEnabled)if(t){var n=this.constructor.DATA_KEY,r=e(t.currentTarget).data(n);r||(r=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(n,r)),r._activeTrigger.click=!r._activeTrigger.click,r._isWithActiveTrigger()?r._enter(null,r):r._leave(null,r)}else{if(e(this.getTipElement()).hasClass(ae))return void this._leave(null,this);this._enter(null,this)}},r.dispose=function(){clearTimeout(this._timeout),e.removeData(this.element,this.constructor.DATA_KEY),e(this.element).off(this.constructor.EVENT_KEY),e(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&e(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},r.show=function(){var t=this;if("none"===e(this.element).css("display"))throw new Error("Please use show on visible elements");var r=e.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){e(this.element).trigger(r);var i=u.findShadowRoot(this.element),o=e.contains(null!==i?i:this.element.ownerDocument.documentElement,this.element);if(r.isDefaultPrevented()||!o)return;var a=this.getTipElement(),s=u.getUID(this.constructor.NAME);a.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&e(a).addClass(oe);var l="function"==typeof this.config.placement?this.config.placement.call(this,a,this.element):this.config.placement,c=this._getAttachment(l);this.addAttachmentClass(c);var f=this._getContainer();e(a).data(this.constructor.DATA_KEY,this),e.contains(this.element.ownerDocument.documentElement,this.tip)||e(a).appendTo(f),e(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new n(this.element,a,{placement:c,modifiers:{offset:this._getOffset(),flip:{behavior:this.config.fallbackPlacement},arrow:{element:le},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){return t._handlePopperPlacementChange(e)}}),e(a).addClass(ae),"ontouchstart"in document.documentElement&&e(document.body).children().on("mouseover",null,e.noop);var h=function(){t.config.animation&&t._fixTransition();var n=t._hoverState;t._hoverState=null,e(t.element).trigger(t.constructor.Event.SHOWN),n===re&&t._leave(null,t)};if(e(this.tip).hasClass(oe)){var p=u.getTransitionDurationFromElement(this.tip);e(this.tip).one(u.TRANSITION_END,h).emulateTransitionEnd(p)}else h()}},r.hide=function(t){var n=this,r=this.getTipElement(),i=e.Event(this.constructor.Event.HIDE),o=function(){n._hoverState!==ne&&r.parentNode&&r.parentNode.removeChild(r),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),e(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),t&&t()};if(e(this.element).trigger(i),!i.isDefaultPrevented()){if(e(r).removeClass(ae),"ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),this._activeTrigger[fe]=!1,this._activeTrigger[ce]=!1,this._activeTrigger[ue]=!1,e(this.tip).hasClass(oe)){var a=u.getTransitionDurationFromElement(r);e(r).one(u.TRANSITION_END,o).emulateTransitionEnd(a)}else o();this._hoverState=""}},r.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},r.isWithContent=function(){return Boolean(this.getTitle())},r.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-tooltip-"+t)},r.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},r.setContent=function(){var t=this.getTipElement();this.setElementContent(e(t.querySelectorAll(se)),this.getTitle()),e(t).removeClass(oe+" "+ae)},r.setElementContent=function(t,n){"object"!=typeof n||!n.nodeType&&!n.jquery?this.config.html?(this.config.sanitize&&(n=$t(n,this.config.whiteList,this.config.sanitizeFn)),t.html(n)):t.text(n):this.config.html?e(n).parent().is(t)||t.empty().append(n):t.text(e(n).text())},r.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},r._getOffset=function(){var t=this,e={};return"function"==typeof this.config.offset?e.fn=function(e){return e.offsets=a({},e.offsets,t.config.offset(e.offsets,t.element)||{}),e}:e.offset=this.config.offset,e},r._getContainer=function(){return!1===this.config.container?document.body:u.isElement(this.config.container)?e(this.config.container):e(document).find(this.config.container)},r._getAttachment=function(t){return te[t.toUpperCase()]},r._setListeners=function(){var t=this;this.config.trigger.split(" ").forEach((function(n){if("click"===n)e(t.element).on(t.constructor.Event.CLICK,t.config.selector,(function(e){return t.toggle(e)}));else if(n!==he){var r=n===ue?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,i=n===ue?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;e(t.element).on(r,t.config.selector,(function(e){return t._enter(e)})).on(i,t.config.selector,(function(e){return t._leave(e)}))}})),e(this.element).closest(".modal").on("hide.bs.modal",(function(){t.element&&t.hide()})),this.config.selector?this.config=a({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},r._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},r._enter=function(t,n){var r=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(r))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(r,n)),t&&(n._activeTrigger["focusin"===t.type?ce:ue]=!0),e(n.getTipElement()).hasClass(ae)||n._hoverState===ne?n._hoverState=ne:(clearTimeout(n._timeout),n._hoverState=ne,n.config.delay&&n.config.delay.show?n._timeout=setTimeout((function(){n._hoverState===ne&&n.show()}),n.config.delay.show):n.show())},r._leave=function(t,n){var r=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(r))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(r,n)),t&&(n._activeTrigger["focusout"===t.type?ce:ue]=!1),n._isWithActiveTrigger()||(clearTimeout(n._timeout),n._hoverState=re,n.config.delay&&n.config.delay.hide?n._timeout=setTimeout((function(){n._hoverState===re&&n.hide()}),n.config.delay.hide):n.hide())},r._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},r._getConfig=function(t){var n=e(this.element).data();return Object.keys(n).forEach((function(t){-1!==Zt.indexOf(t)&&delete n[t]})),"number"==typeof(t=a({},this.constructor.Default,n,"object"==typeof t&&t?t:{})).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),u.typeCheckConfig(Xt,t,this.constructor.DefaultType),t.sanitize&&(t.template=$t(t.template,t.whiteList,t.sanitizeFn)),t},r._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},r._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(Qt);null!==n&&n.length&&t.removeClass(n.join(""))},r._handlePopperPlacementChange=function(t){var e=t.instance;this.tip=e.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},r._fixTransition=function(){var t=this.getTipElement(),n=this.config.animation;null===t.getAttribute("x-placement")&&(e(t).removeClass(oe),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},t._jQueryInterface=function(n){return this.each((function(){var r=e(this).data("bs.tooltip"),i="object"==typeof n&&n;if((r||!/dispose|hide/.test(n))&&(r||(r=new t(this,i),e(this).data("bs.tooltip",r)),"string"==typeof n)){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return ee}},{key:"NAME",get:function(){return Xt}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return ie}},{key:"EVENT_KEY",get:function(){return".bs.tooltip"}},{key:"DefaultType",get:function(){return Jt}}]),t}();e.fn.tooltip=pe._jQueryInterface,e.fn.tooltip.Constructor=pe,e.fn.tooltip.noConflict=function(){return e.fn.tooltip=Kt,pe._jQueryInterface};var de="popover",ge=e.fn.popover,me=new RegExp("(^|\\s)bs-popover\\S+","g"),ve=a({},pe.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),ye=a({},pe.DefaultType,{content:"(string|element|function)"}),_e="fade",we="show",be=".popover-header",xe=".popover-body",Te={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"},Ee=function(t){var n,r;function o(){return t.apply(this,arguments)||this}r=t,(n=o).prototype=Object.create(r.prototype),n.prototype.constructor=n,n.__proto__=r;var a=o.prototype;return a.isWithContent=function(){return this.getTitle()||this._getContent()},a.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-popover-"+t)},a.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},a.setContent=function(){var t=e(this.getTipElement());this.setElementContent(t.find(be),this.getTitle());var n=this._getContent();"function"==typeof n&&(n=n.call(this.element)),this.setElementContent(t.find(xe),n),t.removeClass(_e+" "+we)},a._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},a._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(me);null!==n&&n.length>0&&t.removeClass(n.join(""))},o._jQueryInterface=function(t){return this.each((function(){var n=e(this).data("bs.popover"),r="object"==typeof t?t:null;if((n||!/dispose|hide/.test(t))&&(n||(n=new o(this,r),e(this).data("bs.popover",n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}}))},i(o,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return ve}},{key:"NAME",get:function(){return de}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return Te}},{key:"EVENT_KEY",get:function(){return".bs.popover"}},{key:"DefaultType",get:function(){return ye}}]),o}(pe);e.fn.popover=Ee._jQueryInterface,e.fn.popover.Constructor=Ee,e.fn.popover.noConflict=function(){return e.fn.popover=ge,Ee._jQueryInterface};var Ce="scrollspy",Se=e.fn[Ce],Ae={offset:10,method:"auto",target:""},Ne={offset:"number",method:"string",target:"(string|element)"},De={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},ke="dropdown-item",Me="active",Ie={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},Oe="offset",Le="position",Re=function(){function t(t,n){var r=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(n),this._selector=this._config.target+" "+Ie.NAV_LINKS+","+this._config.target+" "+Ie.LIST_ITEMS+","+this._config.target+" "+Ie.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,e(this._scrollElement).on(De.SCROLL,(function(t){return r._process(t)})),this.refresh(),this._process()}var n=t.prototype;return n.refresh=function(){var t=this,n=this._scrollElement===this._scrollElement.window?Oe:Le,r="auto"===this._config.method?n:this._config.method,i=r===Le?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map((function(t){var n,o=u.getSelectorFromElement(t);if(o&&(n=document.querySelector(o)),n){var a=n.getBoundingClientRect();if(a.width||a.height)return[e(n)[r]().top+i,o]}return null})).filter((function(t){return t})).sort((function(t,e){return t[0]-e[0]})).forEach((function(e){t._offsets.push(e[0]),t._targets.push(e[1])}))},n.dispose=function(){e.removeData(this._element,"bs.scrollspy"),e(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},n._getConfig=function(t){if("string"!=typeof(t=a({},Ae,"object"==typeof t&&t?t:{})).target){var n=e(t.target).attr("id");n||(n=u.getUID(Ce),e(t.target).attr("id",n)),t.target="#"+n}return u.typeCheckConfig(Ce,t,Ne),t},n._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},n._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},n._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},n._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){var r=this._targets[this._targets.length-1];this._activeTarget!==r&&this._activate(r)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var i=this._offsets.length;i--;)this._activeTarget!==this._targets[i]&&t>=this._offsets[i]&&(void 0===this._offsets[i+1]||t<this._offsets[i+1])&&this._activate(this._targets[i])}},n._activate=function(t){this._activeTarget=t,this._clear();var n=this._selector.split(",").map((function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'})),r=e([].slice.call(document.querySelectorAll(n.join(","))));r.hasClass(ke)?(r.closest(Ie.DROPDOWN).find(Ie.DROPDOWN_TOGGLE).addClass(Me),r.addClass(Me)):(r.addClass(Me),r.parents(Ie.NAV_LIST_GROUP).prev(Ie.NAV_LINKS+", "+Ie.LIST_ITEMS).addClass(Me),r.parents(Ie.NAV_LIST_GROUP).prev(Ie.NAV_ITEMS).children(Ie.NAV_LINKS).addClass(Me)),e(this._scrollElement).trigger(De.ACTIVATE,{relatedTarget:t})},n._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter((function(t){return t.classList.contains(Me)})).forEach((function(t){return t.classList.remove(Me)}))},t._jQueryInterface=function(n){return this.each((function(){var r=e(this).data("bs.scrollspy");if(r||(r=new t(this,"object"==typeof n&&n),e(this).data("bs.scrollspy",r)),"string"==typeof n){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Ae}}]),t}();e(window).on(De.LOAD_DATA_API,(function(){for(var t=[].slice.call(document.querySelectorAll(Ie.DATA_SPY)),n=t.length;n--;){var r=e(t[n]);Re._jQueryInterface.call(r,r.data())}})),e.fn[Ce]=Re._jQueryInterface,e.fn[Ce].Constructor=Re,e.fn[Ce].noConflict=function(){return e.fn[Ce]=Se,Re._jQueryInterface};var Pe=e.fn.tab,je={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},He="dropdown-menu",Fe="active",qe="disabled",Ue="fade",Be="show",We=".dropdown",ze=".nav, .list-group",Ye=".active",Ve="> li > .active",Ge='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',$e=".dropdown-toggle",Xe="> .dropdown-menu .active",Ke=function(){function t(t){this._element=t}var n=t.prototype;return n.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&e(this._element).hasClass(Fe)||e(this._element).hasClass(qe))){var n,r,i=e(this._element).closest(ze)[0],o=u.getSelectorFromElement(this._element);if(i){var a="UL"===i.nodeName||"OL"===i.nodeName?Ve:Ye;r=(r=e.makeArray(e(i).find(a)))[r.length-1]}var s=e.Event(je.HIDE,{relatedTarget:this._element}),l=e.Event(je.SHOW,{relatedTarget:r});if(r&&e(r).trigger(s),e(this._element).trigger(l),!l.isDefaultPrevented()&&!s.isDefaultPrevented()){o&&(n=document.querySelector(o)),this._activate(this._element,i);var c=function(){var n=e.Event(je.HIDDEN,{relatedTarget:t._element}),i=e.Event(je.SHOWN,{relatedTarget:r});e(r).trigger(n),e(t._element).trigger(i)};n?this._activate(n,n.parentNode,c):c()}}},n.dispose=function(){e.removeData(this._element,"bs.tab"),this._element=null},n._activate=function(t,n,r){var i=this,o=(!n||"UL"!==n.nodeName&&"OL"!==n.nodeName?e(n).children(Ye):e(n).find(Ve))[0],a=r&&o&&e(o).hasClass(Ue),s=function(){return i._transitionComplete(t,o,r)};if(o&&a){var l=u.getTransitionDurationFromElement(o);e(o).removeClass(Be).one(u.TRANSITION_END,s).emulateTransitionEnd(l)}else s()},n._transitionComplete=function(t,n,r){if(n){e(n).removeClass(Fe);var i=e(n.parentNode).find(Xe)[0];i&&e(i).removeClass(Fe),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!1)}if(e(t).addClass(Fe),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),u.reflow(t),t.classList.contains(Ue)&&t.classList.add(Be),t.parentNode&&e(t.parentNode).hasClass(He)){var o=e(t).closest(We)[0];if(o){var a=[].slice.call(o.querySelectorAll($e));e(a).addClass(Fe)}t.setAttribute("aria-expanded",!0)}r&&r()},t._jQueryInterface=function(n){return this.each((function(){var r=e(this),i=r.data("bs.tab");if(i||(i=new t(this),r.data("bs.tab",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),t}();e(document).on(je.CLICK_DATA_API,Ge,(function(t){t.preventDefault(),Ke._jQueryInterface.call(e(this),"show")})),e.fn.tab=Ke._jQueryInterface,e.fn.tab.Constructor=Ke,e.fn.tab.noConflict=function(){return e.fn.tab=Pe,Ke._jQueryInterface};var Qe=e.fn.toast,Ze={CLICK_DISMISS:"click.dismiss.bs.toast",HIDE:"hide.bs.toast",HIDDEN:"hidden.bs.toast",SHOW:"show.bs.toast",SHOWN:"shown.bs.toast"},Je="fade",tn="hide",en="show",nn="showing",rn={animation:"boolean",autohide:"boolean",delay:"number"},on={animation:!0,autohide:!0,delay:500},an='[data-dismiss="toast"]',sn=function(){function t(t,e){this._element=t,this._config=this._getConfig(e),this._timeout=null,this._setListeners()}var n=t.prototype;return n.show=function(){var t=this;e(this._element).trigger(Ze.SHOW),this._config.animation&&this._element.classList.add(Je);var n=function(){t._element.classList.remove(nn),t._element.classList.add(en),e(t._element).trigger(Ze.SHOWN),t._config.autohide&&t.hide()};if(this._element.classList.remove(tn),this._element.classList.add(nn),this._config.animation){var r=u.getTransitionDurationFromElement(this._element);e(this._element).one(u.TRANSITION_END,n).emulateTransitionEnd(r)}else n()},n.hide=function(t){var n=this;this._element.classList.contains(en)&&(e(this._element).trigger(Ze.HIDE),t?this._close():this._timeout=setTimeout((function(){n._close()}),this._config.delay))},n.dispose=function(){clearTimeout(this._timeout),this._timeout=null,this._element.classList.contains(en)&&this._element.classList.remove(en),e(this._element).off(Ze.CLICK_DISMISS),e.removeData(this._element,"bs.toast"),this._element=null,this._config=null},n._getConfig=function(t){return t=a({},on,e(this._element).data(),"object"==typeof t&&t?t:{}),u.typeCheckConfig("toast",t,this.constructor.DefaultType),t},n._setListeners=function(){var t=this;e(this._element).on(Ze.CLICK_DISMISS,an,(function(){return t.hide(!0)}))},n._close=function(){var t=this,n=function(){t._element.classList.add(tn),e(t._element).trigger(Ze.HIDDEN)};if(this._element.classList.remove(en),this._config.animation){var r=u.getTransitionDurationFromElement(this._element);e(this._element).one(u.TRANSITION_END,n).emulateTransitionEnd(r)}else n()},t._jQueryInterface=function(n){return this.each((function(){var r=e(this),i=r.data("bs.toast");if(i||(i=new t(this,"object"==typeof n&&n),r.data("bs.toast",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n](this)}}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"DefaultType",get:function(){return rn}},{key:"Default",get:function(){return on}}]),t}();e.fn.toast=sn._jQueryInterface,e.fn.toast.Constructor=sn,e.fn.toast.noConflict=function(){return e.fn.toast=Qe,sn._jQueryInterface},function(){if(void 0===e)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(),t.Util=u,t.Alert=g,t.Button=S,t.Carousel=G,t.Collapse=at,t.Dropdown=Mt,t.Modal=Wt,t.Popover=Ee,t.Scrollspy=Re,t.Tab=Ke,t.Toast=sn,t.Tooltip=pe,Object.defineProperty(t,"__esModule",{value:!0})}(e,n(8),n(9))},function(t,e,n){var r;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,(function(n,i){"use strict";var o=[],a=n.document,s=Object.getPrototypeOf,l=o.slice,u=o.concat,c=o.push,f=o.indexOf,h={},p=h.toString,d=h.hasOwnProperty,g=d.toString,m=g.call(Object),v={},y=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},_=function(t){return null!=t&&t===t.window},w={type:!0,src:!0,nonce:!0,noModule:!0};function b(t,e,n){var r,i,o=(n=n||a).createElement("script");if(o.text=t,e)for(r in w)(i=e[r]||e.getAttribute&&e.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function x(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?h[p.call(t)]||"object":typeof t}var T=function(t,e){return new T.fn.init(t,e)},E=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(t){var e=!!t&&"length"in t&&t.length,n=x(t);return!y(t)&&!_(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}T.fn=T.prototype={jquery:"3.4.1",constructor:T,length:0,toArray:function(){return l.call(this)},get:function(t){return null==t?l.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=T.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return T.each(this,t)},map:function(t){return this.pushStack(T.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(l.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},T.extend=T.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||y(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(t=arguments[s]))for(e in t)r=t[e],"__proto__"!==e&&a!==r&&(u&&r&&(T.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[e],o=i&&!Array.isArray(n)?[]:i||T.isPlainObject(n)?n:{},i=!1,a[e]=T.extend(u,o,r)):void 0!==r&&(a[e]=r));return a},T.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==p.call(t))&&(!(e=s(t))||"function"==typeof(n=d.call(e,"constructor")&&e.constructor)&&g.call(n)===m)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e){b(t,{nonce:e&&e.nonce})},each:function(t,e){var n,r=0;if(C(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},trim:function(t){return null==t?"":(t+"").replace(E,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(C(Object(t))?T.merge(n,"string"==typeof t?[t]:t):c.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:f.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,a=!n;i<o;i++)!e(t[i],i)!==a&&r.push(t[i]);return r},map:function(t,e,n){var r,i,o=0,a=[];if(C(t))for(r=t.length;o<r;o++)null!=(i=e(t[o],o,n))&&a.push(i);else for(o in t)null!=(i=e(t[o],o,n))&&a.push(i);return u.apply([],a)},guid:1,support:v}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=o[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){h["[object "+e+"]"]=e.toLowerCase()}));var S=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(t){var e,n,r,i,o,a,s,l,u,c,f,h,p,d,g,m,v,y,_,w="sizzle"+1*new Date,b=t.document,x=0,T=0,E=lt(),C=lt(),S=lt(),A=lt(),N=function(t,e){return t===e&&(f=!0),0},D={}.hasOwnProperty,k=[],M=k.pop,I=k.push,O=k.push,L=k.slice,R=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",j="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",F="\\["+j+"*("+H+")(?:"+j+"*([*^$|!~]?=)"+j+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+j+"*\\]",q=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",U=new RegExp(j+"+","g"),B=new RegExp("^"+j+"+|((?:^|[^\\\\])(?:\\\\.)*)"+j+"+$","g"),W=new RegExp("^"+j+"*,"+j+"*"),z=new RegExp("^"+j+"*([>+~]|"+j+")"+j+"*"),Y=new RegExp(j+"|>"),V=new RegExp(q),G=new RegExp("^"+H+"$"),$={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+j+"*(even|odd|(([+-]|)(\\d*)n|)"+j+"*(?:([+-]|)"+j+"*(\\d+)|))"+j+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+j+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+j+"*((?:-\\d)?\\d*)"+j+"*\\)|)(?=[^-]|$)","i")},X=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\([\\da-f]{1,6}"+j+"?|("+j+")|.)","ig"),nt=function(t,e,n){var r="0x"+e-65536;return r!=r||n?e:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},rt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,it=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},ot=function(){h()},at=wt((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{O.apply(k=L.call(b.childNodes),b.childNodes),k[b.childNodes.length].nodeType}catch(t){O={apply:k.length?function(t,e){I.apply(t,L.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}function st(t,e,r,i){var o,s,u,c,f,d,v,y=e&&e.ownerDocument,x=e?e.nodeType:9;if(r=r||[],"string"!=typeof t||!t||1!==x&&9!==x&&11!==x)return r;if(!i&&((e?e.ownerDocument||e:b)!==p&&h(e),e=e||p,g)){if(11!==x&&(f=J.exec(t)))if(o=f[1]){if(9===x){if(!(u=e.getElementById(o)))return r;if(u.id===o)return r.push(u),r}else if(y&&(u=y.getElementById(o))&&_(e,u)&&u.id===o)return r.push(u),r}else{if(f[2])return O.apply(r,e.getElementsByTagName(t)),r;if((o=f[3])&&n.getElementsByClassName&&e.getElementsByClassName)return O.apply(r,e.getElementsByClassName(o)),r}if(n.qsa&&!A[t+" "]&&(!m||!m.test(t))&&(1!==x||"object"!==e.nodeName.toLowerCase())){if(v=t,y=e,1===x&&Y.test(t)){for((c=e.getAttribute("id"))?c=c.replace(rt,it):e.setAttribute("id",c=w),s=(d=a(t)).length;s--;)d[s]="#"+c+" "+_t(d[s]);v=d.join(","),y=tt.test(t)&&vt(e.parentNode)||e}try{return O.apply(r,y.querySelectorAll(v)),r}catch(e){A(t,!0)}finally{c===w&&e.removeAttribute("id")}}}return l(t.replace(B,"$1"),e,r,i)}function lt(){var t=[];return function e(n,i){return t.push(n+" ")>r.cacheLength&&delete e[t.shift()],e[n+" "]=i}}function ut(t){return t[w]=!0,t}function ct(t){var e=p.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ft(t,e){for(var n=t.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=e}function ht(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function pt(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function dt(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function gt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&at(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function mt(t){return ut((function(e){return e=+e,ut((function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=st.support={},o=st.isXML=function(t){var e=t.namespaceURI,n=(t.ownerDocument||t).documentElement;return!X.test(e||n&&n.nodeName||"HTML")},h=st.setDocument=function(t){var e,i,a=t?t.ownerDocument||t:b;return a!==p&&9===a.nodeType&&a.documentElement?(d=(p=a).documentElement,g=!o(p),b!==p&&(i=p.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",ot,!1):i.attachEvent&&i.attachEvent("onunload",ot)),n.attributes=ct((function(t){return t.className="i",!t.getAttribute("className")})),n.getElementsByTagName=ct((function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length})),n.getElementsByClassName=Z.test(p.getElementsByClassName),n.getById=ct((function(t){return d.appendChild(t).id=w,!p.getElementsByName||!p.getElementsByName(w).length})),n.getById?(r.filter.ID=function(t){var e=t.replace(et,nt);return function(t){return t.getAttribute("id")===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n=e.getElementById(t);return n?[n]:[]}}):(r.filter.ID=function(t){var e=t.replace(et,nt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},v=[],m=[],(n.qsa=Z.test(p.querySelectorAll))&&(ct((function(t){d.appendChild(t).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+j+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+j+"*(?:value|"+P+")"),t.querySelectorAll("[id~="+w+"-]").length||m.push("~="),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+w+"+*").length||m.push(".#.+[+~]")})),ct((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+j+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),d.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=Z.test(y=d.matches||d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&ct((function(t){n.disconnectedMatch=y.call(t,"*"),y.call(t,"[s!='']:x"),v.push("!=",q)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),e=Z.test(d.compareDocumentPosition),_=e||Z.test(d.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},N=e?function(t,e){if(t===e)return f=!0,0;var r=!t.compareDocumentPosition-!e.compareDocumentPosition;return r||(1&(r=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===r?t===p||t.ownerDocument===b&&_(b,t)?-1:e===p||e.ownerDocument===b&&_(b,e)?1:c?R(c,t)-R(c,e):0:4&r?-1:1)}:function(t,e){if(t===e)return f=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,a=[t],s=[e];if(!i||!o)return t===p?-1:e===p?1:i?-1:o?1:c?R(c,t)-R(c,e):0;if(i===o)return ht(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?ht(a[r],s[r]):a[r]===b?-1:s[r]===b?1:0},p):p},st.matches=function(t,e){return st(t,null,null,e)},st.matchesSelector=function(t,e){if((t.ownerDocument||t)!==p&&h(t),n.matchesSelector&&g&&!A[e+" "]&&(!v||!v.test(e))&&(!m||!m.test(e)))try{var r=y.call(t,e);if(r||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(t){A(e,!0)}return st(e,p,null,[t]).length>0},st.contains=function(t,e){return(t.ownerDocument||t)!==p&&h(t),_(t,e)},st.attr=function(t,e){(t.ownerDocument||t)!==p&&h(t);var i=r.attrHandle[e.toLowerCase()],o=i&&D.call(r.attrHandle,e.toLowerCase())?i(t,e,!g):void 0;return void 0!==o?o:n.attributes||!g?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},st.escape=function(t){return(t+"").replace(rt,it)},st.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},st.uniqueSort=function(t){var e,r=[],i=0,o=0;if(f=!n.detectDuplicates,c=!n.sortStable&&t.slice(0),t.sort(N),f){for(;e=t[o++];)e===t[o]&&(i=r.push(o));for(;i--;)t.splice(r[i],1)}return c=null,t},i=st.getText=function(t){var e,n="",r=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=i(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[r++];)n+=i(e);return n},(r=st.selectors={cacheLength:50,createPseudo:ut,match:$,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,nt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,nt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||st.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&st.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return $.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&V.test(n)&&(e=a(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,nt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=E[t+" "];return e||(e=new RegExp("(^|"+j+")"+t+"("+j+"|$)"))&&E(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(r){var i=st.attr(r,t);return null==i?"!="===e:!e||(i+="","="===e?i===n:"!="===e?i!==n:"^="===e?n&&0===i.indexOf(n):"*="===e?n&&i.indexOf(n)>-1:"$="===e?n&&i.slice(-n.length)===n:"~="===e?(" "+i.replace(U," ")+" ").indexOf(n)>-1:"|="===e&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,l){var u,c,f,h,p,d,g=o!==a?"nextSibling":"previousSibling",m=e.parentNode,v=s&&e.nodeName.toLowerCase(),y=!l&&!s,_=!1;if(m){if(o){for(;g;){for(h=e;h=h[g];)if(s?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;d=g="only"===t&&!d&&"nextSibling"}return!0}if(d=[a?m.firstChild:m.lastChild],a&&y){for(_=(p=(u=(c=(f=(h=m)[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===x&&u[1])&&u[2],h=p&&m.childNodes[p];h=++p&&h&&h[g]||(_=p=0)||d.pop();)if(1===h.nodeType&&++_&&h===e){c[t]=[x,p,_];break}}else if(y&&(_=p=(u=(c=(f=(h=e)[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===x&&u[1]),!1===_)for(;(h=++p&&h&&h[g]||(_=p=0)||d.pop())&&((s?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++_||(y&&((c=(f=h[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]=[x,_]),h!==e)););return(_-=i)===r||_%r==0&&_/r>=0}}},PSEUDO:function(t,e){var n,i=r.pseudos[t]||r.setFilters[t.toLowerCase()]||st.error("unsupported pseudo: "+t);return i[w]?i(e):i.length>1?(n=[t,t,"",e],r.setFilters.hasOwnProperty(t.toLowerCase())?ut((function(t,n){for(var r,o=i(t,e),a=o.length;a--;)t[r=R(t,o[a])]=!(n[r]=o[a])})):function(t){return i(t,0,n)}):i}},pseudos:{not:ut((function(t){var e=[],n=[],r=s(t.replace(B,"$1"));return r[w]?ut((function(t,e,n,i){for(var o,a=r(t,null,i,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))})):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}})),has:ut((function(t){return function(e){return st(t,e).length>0}})),contains:ut((function(t){return t=t.replace(et,nt),function(e){return(e.textContent||i(e)).indexOf(t)>-1}})),lang:ut((function(t){return G.test(t||"")||st.error("unsupported lang: "+t),t=t.replace(et,nt).toLowerCase(),function(e){var n;do{if(n=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===d},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!r.pseudos.empty(t)},header:function(t){return Q.test(t.nodeName)},input:function(t){return K.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:mt((function(){return[0]})),last:mt((function(t,e){return[e-1]})),eq:mt((function(t,e,n){return[n<0?n+e:n]})),even:mt((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:mt((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:mt((function(t,e,n){for(var r=n<0?n+e:n>e?e:n;--r>=0;)t.push(r);return t})),gt:mt((function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[e]=pt(e);for(e in{submit:!0,reset:!0})r.pseudos[e]=dt(e);function yt(){}function _t(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function wt(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,s=T++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,l){var u,c,f,h=[x,s];if(l){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,l))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(c=(f=e[w]||(e[w]={}))[e.uniqueID]||(f[e.uniqueID]={}),i&&i===e.nodeName.toLowerCase())e=e[r]||e;else{if((u=c[o])&&u[0]===x&&u[1]===s)return h[2]=u[2];if(c[o]=h,h[2]=t(e,n,l))return!0}return!1}}function bt(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function xt(t,e,n,r,i){for(var o,a=[],s=0,l=t.length,u=null!=e;s<l;s++)(o=t[s])&&(n&&!n(o,r,i)||(a.push(o),u&&e.push(s)));return a}function Tt(t,e,n,r,i,o){return r&&!r[w]&&(r=Tt(r)),i&&!i[w]&&(i=Tt(i,o)),ut((function(o,a,s,l){var u,c,f,h=[],p=[],d=a.length,g=o||function(t,e,n){for(var r=0,i=e.length;r<i;r++)st(t,e[r],n);return n}(e||"*",s.nodeType?[s]:s,[]),m=!t||!o&&e?g:xt(g,h,t,s,l),v=n?i||(o?t:d||r)?[]:a:m;if(n&&n(m,v,s,l),r)for(u=xt(v,p),r(u,[],s,l),c=u.length;c--;)(f=u[c])&&(v[p[c]]=!(m[p[c]]=f));if(o){if(i||t){if(i){for(u=[],c=v.length;c--;)(f=v[c])&&u.push(m[c]=f);i(null,v=[],u,l)}for(c=v.length;c--;)(f=v[c])&&(u=i?R(o,f):h[c])>-1&&(o[u]=!(a[u]=f))}}else v=xt(v===a?v.splice(d,v.length):v),i?i(null,a,v,l):O.apply(a,v)}))}function Et(t){for(var e,n,i,o=t.length,a=r.relative[t[0].type],s=a||r.relative[" "],l=a?1:0,c=wt((function(t){return t===e}),s,!0),f=wt((function(t){return R(e,t)>-1}),s,!0),h=[function(t,n,r){var i=!a&&(r||n!==u)||((e=n).nodeType?c(t,n,r):f(t,n,r));return e=null,i}];l<o;l++)if(n=r.relative[t[l].type])h=[wt(bt(h),n)];else{if((n=r.filter[t[l].type].apply(null,t[l].matches))[w]){for(i=++l;i<o&&!r.relative[t[i].type];i++);return Tt(l>1&&bt(h),l>1&&_t(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(B,"$1"),n,l<i&&Et(t.slice(l,i)),i<o&&Et(t=t.slice(i)),i<o&&_t(t))}h.push(n)}return bt(h)}return yt.prototype=r.filters=r.pseudos,r.setFilters=new yt,a=st.tokenize=function(t,e){var n,i,o,a,s,l,u,c=C[t+" "];if(c)return e?0:c.slice(0);for(s=t,l=[],u=r.preFilter;s;){for(a in n&&!(i=W.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(o=[])),n=!1,(i=z.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(B," ")}),s=s.slice(n.length)),r.filter)!(i=$[a].exec(s))||u[a]&&!(i=u[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return e?s.length:s?st.error(t):C(t,l).slice(0)},s=st.compile=function(t,e){var n,i=[],o=[],s=S[t+" "];if(!s){for(e||(e=a(t)),n=e.length;n--;)(s=Et(e[n]))[w]?i.push(s):o.push(s);(s=S(t,function(t,e){var n=e.length>0,i=t.length>0,o=function(o,a,s,l,c){var f,d,m,v=0,y="0",_=o&&[],w=[],b=u,T=o||i&&r.find.TAG("*",c),E=x+=null==b?1:Math.random()||.1,C=T.length;for(c&&(u=a===p||a||c);y!==C&&null!=(f=T[y]);y++){if(i&&f){for(d=0,a||f.ownerDocument===p||(h(f),s=!g);m=t[d++];)if(m(f,a||p,s)){l.push(f);break}c&&(x=E)}n&&((f=!m&&f)&&v--,o&&_.push(f))}if(v+=y,n&&y!==v){for(d=0;m=e[d++];)m(_,w,a,s);if(o){if(v>0)for(;y--;)_[y]||w[y]||(w[y]=M.call(l));w=xt(w)}O.apply(l,w),c&&!o&&w.length>0&&v+e.length>1&&st.uniqueSort(l)}return c&&(x=E,u=b),_};return n?ut(o):o}(o,i))).selector=t}return s},l=st.select=function(t,e,n,i){var o,l,u,c,f,h="function"==typeof t&&t,p=!i&&a(t=h.selector||t);if(n=n||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===e.nodeType&&g&&r.relative[l[1].type]){if(!(e=(r.find.ID(u.matches[0].replace(et,nt),e)||[])[0]))return n;h&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(o=$.needsContext.test(t)?0:l.length;o--&&(u=l[o],!r.relative[c=u.type]);)if((f=r.find[c])&&(i=f(u.matches[0].replace(et,nt),tt.test(l[0].type)&&vt(e.parentNode)||e))){if(l.splice(o,1),!(t=i.length&&_t(l)))return O.apply(n,i),n;break}}return(h||s(t,p))(i,e,!g,n,!e||tt.test(t)&&vt(e.parentNode)||e),n},n.sortStable=w.split("").sort(N).join("")===w,n.detectDuplicates=!!f,h(),n.sortDetached=ct((function(t){return 1&t.compareDocumentPosition(p.createElement("fieldset"))})),ct((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||ft("type|href|height|width",(function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),n.attributes&&ct((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||ft("value",(function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),ct((function(t){return null==t.getAttribute("disabled")}))||ft(P,(function(t,e,n){var r;if(!n)return!0===t[e]?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null})),st}(n);T.find=S,T.expr=S.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=S.uniqueSort,T.text=S.getText,T.isXMLDoc=S.isXML,T.contains=S.contains,T.escapeSelector=S.escape;var A=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&T(t).is(n))break;r.push(t)}return r},N=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},D=T.expr.match.needsContext;function k(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var M=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function I(t,e,n){return y(e)?T.grep(t,(function(t,r){return!!e.call(t,r,t)!==n})):e.nodeType?T.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?T.grep(t,(function(t){return f.call(e,t)>-1!==n})):T.filter(e,t,n)}T.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?T.find.matchesSelector(r,t)?[r]:[]:T.find.matches(t,T.grep(e,(function(t){return 1===t.nodeType})))},T.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(T(t).filter((function(){for(e=0;e<r;e++)if(T.contains(i[e],this))return!0})));for(n=this.pushStack([]),e=0;e<r;e++)T.find(t,i[e],n);return r>1?T.uniqueSort(n):n},filter:function(t){return this.pushStack(I(this,t||[],!1))},not:function(t){return this.pushStack(I(this,t||[],!0))},is:function(t){return!!I(this,"string"==typeof t&&D.test(t)?T(t):t||[],!1).length}});var O,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||O,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:L.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof T?e[0]:e,T.merge(this,T.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:a,!0)),M.test(r[1])&&T.isPlainObject(e))for(r in e)y(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(i=a.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):y(t)?void 0!==n.ready?n.ready(t):t(T):T.makeArray(t,this)}).prototype=T.fn,O=T(a);var R=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function j(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}T.fn.extend({has:function(t){var e=T(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(T.contains(this,e[t]))return!0}))},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&T(t);if(!D.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&T.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?T.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?f.call(T(t),this[0]):f.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),T.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return A(t,"parentNode")},parentsUntil:function(t,e,n){return A(t,"parentNode",n)},next:function(t){return j(t,"nextSibling")},prev:function(t){return j(t,"previousSibling")},nextAll:function(t){return A(t,"nextSibling")},prevAll:function(t){return A(t,"previousSibling")},nextUntil:function(t,e,n){return A(t,"nextSibling",n)},prevUntil:function(t,e,n){return A(t,"previousSibling",n)},siblings:function(t){return N((t.parentNode||{}).firstChild,t)},children:function(t){return N(t.firstChild)},contents:function(t){return void 0!==t.contentDocument?t.contentDocument:(k(t,"template")&&(t=t.content||t),T.merge([],t.childNodes))}},(function(t,e){T.fn[t]=function(n,r){var i=T.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=T.filter(r,i)),this.length>1&&(P[t]||T.uniqueSort(i),R.test(t)&&i.reverse()),this.pushStack(i)}}));var H=/[^\x20\t\r\n\f]+/g;function F(t){return t}function q(t){throw t}function U(t,e,n,r){var i;try{t&&y(i=t.promise)?i.call(t).done(e).fail(n):t&&y(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}T.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return T.each(t.match(H)||[],(function(t,n){e[n]=!0})),e}(t):T.extend({},t);var e,n,r,i,o=[],a=[],s=-1,l=function(){for(i=i||t.once,r=e=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&t.stopOnFalse&&(s=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},u={add:function(){return o&&(n&&!e&&(s=o.length-1,a.push(n)),function e(n){T.each(n,(function(n,r){y(r)?t.unique&&u.has(r)||o.push(r):r&&r.length&&"string"!==x(r)&&e(r)}))}(arguments),n&&!e&&l()),this},remove:function(){return T.each(arguments,(function(t,e){for(var n;(n=T.inArray(e,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(t){return t?T.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=[t,(n=n||[]).slice?n.slice():n],a.push(n),e||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},T.extend({Deferred:function(t){var e=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return T.Deferred((function(n){T.each(e,(function(e,r){var i=y(t[r[4]])&&t[r[4]];o[r[1]]((function(){var t=i&&i.apply(this,arguments);t&&y(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[t]:arguments)}))})),t=null})).promise()},then:function(t,r,i){var o=0;function a(t,e,r,i){return function(){var s=this,l=arguments,u=function(){var n,u;if(!(t<o)){if((n=r.apply(s,l))===e.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(u)?i?u.call(n,a(o,e,F,i),a(o,e,q,i)):(o++,u.call(n,a(o,e,F,i),a(o,e,q,i),a(o,e,F,e.notifyWith))):(r!==F&&(s=void 0,l=[n]),(i||e.resolveWith)(s,l))}},c=i?u:function(){try{u()}catch(n){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(n,c.stackTrace),t+1>=o&&(r!==q&&(s=void 0,l=[n]),e.rejectWith(s,l))}};t?c():(T.Deferred.getStackHook&&(c.stackTrace=T.Deferred.getStackHook()),n.setTimeout(c))}}return T.Deferred((function(n){e[0][3].add(a(0,n,y(i)?i:F,n.notifyWith)),e[1][3].add(a(0,n,y(t)?t:F)),e[2][3].add(a(0,n,y(r)?r:q))})).promise()},promise:function(t){return null!=t?T.extend(t,i):i}},o={};return T.each(e,(function(t,n){var a=n[2],s=n[5];i[n[1]]=a.add,s&&a.add((function(){r=s}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith})),i.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),i=l.call(arguments),o=T.Deferred(),a=function(t){return function(n){r[t]=this,i[t]=arguments.length>1?l.call(arguments):n,--e||o.resolveWith(r,i)}};if(e<=1&&(U(t,o.done(a(n)).resolve,o.reject,!e),"pending"===o.state()||y(i[n]&&i[n].then)))return o.then();for(;n--;)U(i[n],a(n),o.reject);return o.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&B.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},T.readyException=function(t){n.setTimeout((function(){throw t}))};var W=T.Deferred();function z(){a.removeEventListener("DOMContentLoaded",z),n.removeEventListener("load",z),T.ready()}T.fn.ready=function(t){return W.then(t).catch((function(t){T.readyException(t)})),this},T.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--T.readyWait:T.isReady)||(T.isReady=!0,!0!==t&&--T.readyWait>0||W.resolveWith(a,[T]))}}),T.ready.then=W.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(T.ready):(a.addEventListener("DOMContentLoaded",z),n.addEventListener("load",z));var Y=function(t,e,n,r,i,o,a){var s=0,l=t.length,u=null==n;if("object"===x(n))for(s in i=!0,n)Y(t,e,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,y(r)||(a=!0),u&&(a?(e.call(t,r),e=null):(u=e,e=function(t,e,n){return u.call(T(t),n)})),e))for(;s<l;s++)e(t[s],n,a?r:r.call(t[s],s,e(t[s],n)));return i?t:u?e.call(t):l?e(t[0],n):o},V=/^-ms-/,G=/-([a-z])/g;function $(t,e){return e.toUpperCase()}function X(t){return t.replace(V,"ms-").replace(G,$)}var K=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function Q(){this.expando=T.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(t){var e=t[this.expando];return e||(e={},K(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[X(e)]=n;else for(r in e)i[X(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][X(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(X):(e=X(e))in r?[e]:e.match(H)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||T.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!T.isEmptyObject(e)}};var Z=new Q,J=new Q,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}J.set(t,e,n)}else n=void 0;return n}T.extend({hasData:function(t){return J.hasData(t)||Z.hasData(t)},data:function(t,e,n){return J.access(t,e,n)},removeData:function(t,e){J.remove(t,e)},_data:function(t,e,n){return Z.access(t,e,n)},_removeData:function(t,e){Z.remove(t,e)}}),T.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=J.get(o),1===o.nodeType&&!Z.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=X(r.slice(5)),nt(o,r,i[r]));Z.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each((function(){J.set(this,t)})):Y(this,(function(e){var n;if(o&&void 0===e)return void 0!==(n=J.get(o,t))?n:void 0!==(n=nt(o,t))?n:void 0;this.each((function(){J.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){J.remove(this,t)}))}}),T.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=Z.get(t,e),n&&(!r||Array.isArray(n)?r=Z.access(t,e,T.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=T.queue(t,e),r=n.length,i=n.shift(),o=T._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,(function(){T.dequeue(t,e)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Z.get(t,n)||Z.access(t,n,{empty:T.Callbacks("once memory").add((function(){Z.remove(t,[e+"queue",n])}))})}}),T.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?T.queue(this[0],t):void 0===e?this:this.each((function(){var n=T.queue(this,t,e);T._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&T.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){T.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=T.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=Z.get(o[a],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(e)}});var rt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,it=new RegExp("^(?:([+-])=|)("+rt+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],at=a.documentElement,st=function(t){return T.contains(t.ownerDocument,t)},lt={composed:!0};at.getRootNode&&(st=function(t){return T.contains(t.ownerDocument,t)||t.getRootNode(lt)===t.ownerDocument});var ut=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&st(t)&&"none"===T.css(t,"display")},ct=function(t,e,n,r){var i,o,a={};for(o in e)a[o]=t.style[o],t.style[o]=e[o];for(o in i=n.apply(t,r||[]),e)t.style[o]=a[o];return i};function ft(t,e,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return T.css(t,e,"")},l=s(),u=n&&n[3]||(T.cssNumber[e]?"":"px"),c=t.nodeType&&(T.cssNumber[e]||"px"!==u&&+l)&&it.exec(T.css(t,e));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;a--;)T.style(t,e,c+u),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),c/=o;c*=2,T.style(t,e,c+u),n=n||[]}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}var ht={};function pt(t){var e,n=t.ownerDocument,r=t.nodeName,i=ht[r];return i||(e=n.body.appendChild(n.createElement(r)),i=T.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),ht[r]=i,i)}function dt(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)(r=t[o]).style&&(n=r.style.display,e?("none"===n&&(i[o]=Z.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ut(r)&&(i[o]=pt(r))):"none"!==n&&(i[o]="none",Z.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}T.fn.extend({show:function(){return dt(this,!0)},hide:function(){return dt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){ut(this)?T(this).show():T(this).hide()}))}});var gt=/^(?:checkbox|radio)$/i,mt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,vt=/^$|^module$|\/(?:java|ecma)script/i,yt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function _t(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&k(t,e)?T.merge([t],n):n}function wt(t,e){for(var n=0,r=t.length;n<r;n++)Z.set(t[n],"globalEval",!e||Z.get(e[n],"globalEval"))}yt.optgroup=yt.option,yt.tbody=yt.tfoot=yt.colgroup=yt.caption=yt.thead,yt.th=yt.td;var bt,xt,Tt=/<|&#?\w+;/;function Et(t,e,n,r,i){for(var o,a,s,l,u,c,f=e.createDocumentFragment(),h=[],p=0,d=t.length;p<d;p++)if((o=t[p])||0===o)if("object"===x(o))T.merge(h,o.nodeType?[o]:o);else if(Tt.test(o)){for(a=a||f.appendChild(e.createElement("div")),s=(mt.exec(o)||["",""])[1].toLowerCase(),l=yt[s]||yt._default,a.innerHTML=l[1]+T.htmlPrefilter(o)+l[2],c=l[0];c--;)a=a.lastChild;T.merge(h,a.childNodes),(a=f.firstChild).textContent=""}else h.push(e.createTextNode(o));for(f.textContent="",p=0;o=h[p++];)if(r&&T.inArray(o,r)>-1)i&&i.push(o);else if(u=st(o),a=_t(f.appendChild(o),"script"),u&&wt(a),n)for(c=0;o=a[c++];)vt.test(o.type||"")&&n.push(o);return f}bt=a.createDocumentFragment().appendChild(a.createElement("div")),(xt=a.createElement("input")).setAttribute("type","radio"),xt.setAttribute("checked","checked"),xt.setAttribute("name","t"),bt.appendChild(xt),v.checkClone=bt.cloneNode(!0).cloneNode(!0).lastChild.checked,bt.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!bt.cloneNode(!0).lastChild.defaultValue;var Ct=/^key/,St=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,At=/^([^.]*)(?:\.(.+)|)/;function Nt(){return!0}function Dt(){return!1}function kt(t,e){return t===function(){try{return a.activeElement}catch(t){}}()==("focus"===e)}function Mt(t,e,n,r,i,o){var a,s;if("object"==typeof e){for(s in"string"!=typeof n&&(r=r||n,n=void 0),e)Mt(t,s,n,r,e[s],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Dt;else if(!i)return t;return 1===o&&(a=i,(i=function(t){return T().off(t),a.apply(this,arguments)}).guid=a.guid||(a.guid=T.guid++)),t.each((function(){T.event.add(this,e,i,r,n)}))}function It(t,e,n){n?(Z.set(t,e,!1),T.event.add(t,e,{namespace:!1,handler:function(t){var r,i,o=Z.get(this,e);if(1&t.isTrigger&&this[e]){if(o.length)(T.event.special[e]||{}).delegateType&&t.stopPropagation();else if(o=l.call(arguments),Z.set(this,e,o),r=n(this,e),this[e](),o!==(i=Z.get(this,e))||r?Z.set(this,e,!1):i={},o!==i)return t.stopImmediatePropagation(),t.preventDefault(),i.value}else o.length&&(Z.set(this,e,{value:T.event.trigger(T.extend(o[0],T.Event.prototype),o.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===Z.get(t,e)&&T.event.add(t,e,Nt)}T.event={global:{},add:function(t,e,n,r,i){var o,a,s,l,u,c,f,h,p,d,g,m=Z.get(t);if(m)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&T.find.matchesSelector(at,i),n.guid||(n.guid=T.guid++),(l=m.events)||(l=m.events={}),(a=m.handle)||(a=m.handle=function(e){return void 0!==T&&T.event.triggered!==e.type?T.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(H)||[""]).length;u--;)p=g=(s=At.exec(e[u])||[])[1],d=(s[2]||"").split(".").sort(),p&&(f=T.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=T.event.special[p]||{},c=T.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&T.expr.match.needsContext.test(i),namespace:d.join(".")},o),(h=l[p])||((h=l[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,d,a)||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,c):h.push(c),T.event.global[p]=!0)},remove:function(t,e,n,r,i){var o,a,s,l,u,c,f,h,p,d,g,m=Z.hasData(t)&&Z.get(t);if(m&&(l=m.events)){for(u=(e=(e||"").match(H)||[""]).length;u--;)if(p=g=(s=At.exec(e[u])||[])[1],d=(s[2]||"").split(".").sort(),p){for(f=T.event.special[p]||{},h=l[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)c=h[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,f.remove&&f.remove.call(t,c));a&&!h.length&&(f.teardown&&!1!==f.teardown.call(t,d,m.handle)||T.removeEvent(t,p,m.handle),delete l[p])}else for(p in l)T.event.remove(t,p+e[u],n,r,!0);T.isEmptyObject(l)&&Z.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,s=T.event.fix(t),l=new Array(arguments.length),u=(Z.get(this,"events")||{})[s.type]||[],c=T.event.special[s.type]||{};for(l[0]=s,e=1;e<arguments.length;e++)l[e]=arguments[e];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(a=T.event.handlers.call(this,s,u),e=0;(i=a[e++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==o.namespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((T.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,l))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(t,e){var n,r,i,o,a,s=[],l=e.delegateCount,u=t.target;if(l&&u.nodeType&&!("click"===t.type&&t.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==t.type||!0!==u.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[i=(r=e[n]).selector+" "]&&(a[i]=r.needsContext?T(i,this).index(u)>-1:T.find(i,this,null,[u]).length),a[i]&&o.push(r);o.length&&s.push({elem:u,handlers:o})}return u=this,l<e.length&&s.push({elem:u,handlers:e.slice(l)}),s},addProp:function(t,e){Object.defineProperty(T.Event.prototype,t,{enumerable:!0,configurable:!0,get:y(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[T.expando]?t:new T.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return gt.test(e.type)&&e.click&&k(e,"input")&&It(e,"click",Nt),!1},trigger:function(t){var e=this||t;return gt.test(e.type)&&e.click&&k(e,"input")&&It(e,"click"),!0},_default:function(t){var e=t.target;return gt.test(e.type)&&e.click&&k(e,"input")&&Z.get(e,"click")||k(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},T.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},T.Event=function(t,e){if(!(this instanceof T.Event))return new T.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Nt:Dt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&T.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:Dt,isPropagationStopped:Dt,isImmediatePropagationStopped:Dt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Nt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Nt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Nt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Ct.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&St.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},(function(t,e){T.event.special[t]={setup:function(){return It(this,t,kt),!1},trigger:function(){return It(this,t),!0},delegateType:e}})),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){T.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=this,i=t.relatedTarget,o=t.handleObj;return i&&(i===r||T.contains(r,i))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}})),T.fn.extend({on:function(t,e,n,r){return Mt(this,t,e,n,r)},one:function(t,e,n,r){return Mt(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,T(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Dt),this.each((function(){T.event.remove(this,t,n,e)}))}});var Ot=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Lt=/<script|<style|<link/i,Rt=/checked\s*(?:[^=]|=\s*.checked.)/i,Pt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function jt(t,e){return k(t,"table")&&k(11!==e.nodeType?e:e.firstChild,"tr")&&T(t).children("tbody")[0]||t}function Ht(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Ft(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function qt(t,e){var n,r,i,o,a,s,l,u;if(1===e.nodeType){if(Z.hasData(t)&&(o=Z.access(t),a=Z.set(e,o),u=o.events))for(i in delete a.handle,a.events={},u)for(n=0,r=u[i].length;n<r;n++)T.event.add(e,i,u[i][n]);J.hasData(t)&&(s=J.access(t),l=T.extend({},s),J.set(e,l))}}function Ut(t,e){var n=e.nodeName.toLowerCase();"input"===n&&gt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function Bt(t,e,n,r){e=u.apply([],e);var i,o,a,s,l,c,f=0,h=t.length,p=h-1,d=e[0],g=y(d);if(g||h>1&&"string"==typeof d&&!v.checkClone&&Rt.test(d))return t.each((function(i){var o=t.eq(i);g&&(e[0]=d.call(this,i,o.html())),Bt(o,e,n,r)}));if(h&&(o=(i=Et(e,t[0].ownerDocument,!1,t,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=(a=T.map(_t(i,"script"),Ht)).length;f<h;f++)l=i,f!==p&&(l=T.clone(l,!0,!0),s&&T.merge(a,_t(l,"script"))),n.call(t[f],l,f);if(s)for(c=a[a.length-1].ownerDocument,T.map(a,Ft),f=0;f<s;f++)l=a[f],vt.test(l.type||"")&&!Z.access(l,"globalEval")&&T.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?T._evalUrl&&!l.noModule&&T._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):b(l.textContent.replace(Pt,""),l,c))}return t}function Wt(t,e,n){for(var r,i=e?T.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||T.cleanData(_t(r)),r.parentNode&&(n&&st(r)&&wt(_t(r,"script")),r.parentNode.removeChild(r));return t}T.extend({htmlPrefilter:function(t){return t.replace(Ot,"<$1></$2>")},clone:function(t,e,n){var r,i,o,a,s=t.cloneNode(!0),l=st(t);if(!(v.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||T.isXMLDoc(t)))for(a=_t(s),r=0,i=(o=_t(t)).length;r<i;r++)Ut(o[r],a[r]);if(e)if(n)for(o=o||_t(t),a=a||_t(s),r=0,i=o.length;r<i;r++)qt(o[r],a[r]);else qt(t,s);return(a=_t(s,"script")).length>0&&wt(a,!l&&_t(t,"script")),s},cleanData:function(t){for(var e,n,r,i=T.event.special,o=0;void 0!==(n=t[o]);o++)if(K(n)){if(e=n[Z.expando]){if(e.events)for(r in e.events)i[r]?T.event.remove(n,r):T.removeEvent(n,r,e.handle);n[Z.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),T.fn.extend({detach:function(t){return Wt(this,t,!0)},remove:function(t){return Wt(this,t)},text:function(t){return Y(this,(function(t){return void 0===t?T.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Bt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||jt(this,t).appendChild(t)}))},prepend:function(){return Bt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=jt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Bt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Bt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(T.cleanData(_t(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return T.clone(this,t,e)}))},html:function(t){return Y(this,(function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Lt.test(t)&&!yt[(mt.exec(t)||["",""])[1].toLowerCase()]){t=T.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(T.cleanData(_t(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Bt(this,arguments,(function(e){var n=this.parentNode;T.inArray(this,t)<0&&(T.cleanData(_t(this)),n&&n.replaceChild(e,this))}),t)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){T.fn[t]=function(t){for(var n,r=[],i=T(t),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),T(i[a])[e](n),c.apply(r,n.get());return this.pushStack(r)}}));var zt=new RegExp("^("+rt+")(?!px)[a-z%]+$","i"),Yt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},Vt=new RegExp(ot.join("|"),"i");function Gt(t,e,n){var r,i,o,a,s=t.style;return(n=n||Yt(t))&&(""!==(a=n.getPropertyValue(e)||n[e])||st(t)||(a=T.style(t,e)),!v.pixelBoxStyles()&&zt.test(a)&&Vt.test(e)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function $t(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",at.appendChild(u).appendChild(c);var t=n.getComputedStyle(c);r="1%"!==t.top,l=12===e(t.marginLeft),c.style.right="60%",s=36===e(t.right),i=36===e(t.width),c.style.position="absolute",o=12===e(c.offsetWidth/3),at.removeChild(u),c=null}}function e(t){return Math.round(parseFloat(t))}var r,i,o,s,l,u=a.createElement("div"),c=a.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===c.style.backgroundClip,T.extend(v,{boxSizingReliable:function(){return t(),i},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),r},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),o}}))}();var Xt=["Webkit","Moz","ms"],Kt=a.createElement("div").style,Qt={};function Zt(t){var e=T.cssProps[t]||Qt[t];return e||(t in Kt?t:Qt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Xt.length;n--;)if((t=Xt[n]+e)in Kt)return t}(t)||t)}var Jt=/^(none|table(?!-c[ea]).+)/,te=/^--/,ee={position:"absolute",visibility:"hidden",display:"block"},ne={letterSpacing:"0",fontWeight:"400"};function re(t,e,n){var r=it.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function ie(t,e,n,r,i,o){var a="width"===e?1:0,s=0,l=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=T.css(t,n+ot[a],!0,i)),r?("content"===n&&(l-=T.css(t,"padding"+ot[a],!0,i)),"margin"!==n&&(l-=T.css(t,"border"+ot[a]+"Width",!0,i))):(l+=T.css(t,"padding"+ot[a],!0,i),"padding"!==n?l+=T.css(t,"border"+ot[a]+"Width",!0,i):s+=T.css(t,"border"+ot[a]+"Width",!0,i));return!r&&o>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-l-s-.5))||0),l}function oe(t,e,n){var r=Yt(t),i=(!v.boxSizingReliable()||n)&&"border-box"===T.css(t,"boxSizing",!1,r),o=i,a=Gt(t,e,r),s="offset"+e[0].toUpperCase()+e.slice(1);if(zt.test(a)){if(!n)return a;a="auto"}return(!v.boxSizingReliable()&&i||"auto"===a||!parseFloat(a)&&"inline"===T.css(t,"display",!1,r))&&t.getClientRects().length&&(i="border-box"===T.css(t,"boxSizing",!1,r),(o=s in t)&&(a=t[s])),(a=parseFloat(a)||0)+ie(t,e,n||(i?"border":"content"),o,r,a)+"px"}function ae(t,e,n,r,i){return new ae.prototype.init(t,e,n,r,i)}T.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Gt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,s=X(e),l=te.test(e),u=t.style;if(l||(e=Zt(s)),a=T.cssHooks[e]||T.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:u[e];"string"===(o=typeof n)&&(i=it.exec(n))&&i[1]&&(n=ft(t,e,i),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=i&&i[3]||(T.cssNumber[s]?"":"px")),v.clearCloneStyle||""!==n||0!==e.indexOf("background")||(u[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(l?u.setProperty(e,n):u[e]=n))}},css:function(t,e,n,r){var i,o,a,s=X(e);return te.test(e)||(e=Zt(s)),(a=T.cssHooks[e]||T.cssHooks[s])&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=Gt(t,e,r)),"normal"===i&&e in ne&&(i=ne[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),T.each(["height","width"],(function(t,e){T.cssHooks[e]={get:function(t,n,r){if(n)return!Jt.test(T.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?oe(t,e,r):ct(t,ee,(function(){return oe(t,e,r)}))},set:function(t,n,r){var i,o=Yt(t),a=!v.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===T.css(t,"boxSizing",!1,o),l=r?ie(t,e,r,s,o):0;return s&&a&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-ie(t,e,"border",!1,o)-.5)),l&&(i=it.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=T.css(t,e)),re(0,n,l)}}})),T.cssHooks.marginLeft=$t(v.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Gt(t,"marginLeft"))||t.getBoundingClientRect().left-ct(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),T.each({margin:"",padding:"",border:"Width"},(function(t,e){T.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+ot[r]+e]=o[r]||o[r-2]||o[0];return i}},"margin"!==t&&(T.cssHooks[t+e].set=re)})),T.fn.extend({css:function(t,e){return Y(this,(function(t,e,n){var r,i,o={},a=0;if(Array.isArray(e)){for(r=Yt(t),i=e.length;a<i;a++)o[e[a]]=T.css(t,e[a],!1,r);return o}return void 0!==n?T.style(t,e,n):T.css(t,e)}),t,e,arguments.length>1)}}),T.Tween=ae,ae.prototype={constructor:ae,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||T.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(T.cssNumber[n]?"":"px")},cur:function(){var t=ae.propHooks[this.prop];return t&&t.get?t.get(this):ae.propHooks._default.get(this)},run:function(t){var e,n=ae.propHooks[this.prop];return this.options.duration?this.pos=e=T.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ae.propHooks._default.set(this),this}},ae.prototype.init.prototype=ae.prototype,ae.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=T.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){T.fx.step[t.prop]?T.fx.step[t.prop](t):1!==t.elem.nodeType||!T.cssHooks[t.prop]&&null==t.elem.style[Zt(t.prop)]?t.elem[t.prop]=t.now:T.style(t.elem,t.prop,t.now+t.unit)}}},ae.propHooks.scrollTop=ae.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},T.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},T.fx=ae.prototype.init,T.fx.step={};var se,le,ue=/^(?:toggle|show|hide)$/,ce=/queueHooks$/;function fe(){le&&(!1===a.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(fe):n.setTimeout(fe,T.fx.interval),T.fx.tick())}function he(){return n.setTimeout((function(){se=void 0})),se=Date.now()}function pe(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)i["margin"+(n=ot[r])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function de(t,e,n){for(var r,i=(ge.tweeners[e]||[]).concat(ge.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function ge(t,e,n){var r,i,o=0,a=ge.prefilters.length,s=T.Deferred().always((function(){delete l.elem})),l=function(){if(i)return!1;for(var e=se||he(),n=Math.max(0,u.startTime+u.duration-e),r=1-(n/u.duration||0),o=0,a=u.tweens.length;o<a;o++)u.tweens[o].run(r);return s.notifyWith(t,[u,r,n]),r<1&&a?n:(a||s.notifyWith(t,[u,1,0]),s.resolveWith(t,[u]),!1)},u=s.promise({elem:t,props:T.extend({},e),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},n),originalProperties:e,originalOptions:n,startTime:se||he(),duration:n.duration,tweens:[],createTween:function(e,n){var r=T.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(r),r},stop:function(e){var n=0,r=e?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return e?(s.notifyWith(t,[u,1,0]),s.resolveWith(t,[u,e])):s.rejectWith(t,[u,e]),this}}),c=u.props;for(!function(t,e){var n,r,i,o,a;for(n in t)if(i=e[r=X(n)],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(a=T.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete t[r],o)n in t||(t[n]=o[n],e[n]=i);else e[r]=i}(c,u.opts.specialEasing);o<a;o++)if(r=ge.prefilters[o].call(u,t,c,u.opts))return y(r.stop)&&(T._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return T.map(c,de,u),y(u.opts.start)&&u.opts.start.call(t,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),T.fx.timer(T.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u}T.Animation=T.extend(ge,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ft(n.elem,t,it.exec(e),n),n}]},tweener:function(t,e){y(t)?(e=t,t=["*"]):t=t.match(H);for(var n,r=0,i=t.length;r<i;r++)n=t[r],ge.tweeners[n]=ge.tweeners[n]||[],ge.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,i,o,a,s,l,u,c,f="width"in e||"height"in e,h=this,p={},d=t.style,g=t.nodeType&&ut(t),m=Z.get(t,"fxshow");for(r in n.queue||(null==(a=T._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,h.always((function(){h.always((function(){a.unqueued--,T.queue(t,"fx").length||a.empty.fire()}))}))),e)if(i=e[r],ue.test(i)){if(delete e[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;g=!0}p[r]=m&&m[r]||T.style(t,r)}if((l=!T.isEmptyObject(e))||!T.isEmptyObject(p))for(r in f&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(u=m&&m.display)&&(u=Z.get(t,"display")),"none"===(c=T.css(t,"display"))&&(u?c=u:(dt([t],!0),u=t.style.display||u,c=T.css(t,"display"),dt([t]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===T.css(t,"float")&&(l||(h.done((function(){d.display=u})),null==u&&(c=d.display,u="none"===c?"":c)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",h.always((function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}))),l=!1,p)l||(m?"hidden"in m&&(g=m.hidden):m=Z.access(t,"fxshow",{display:u}),o&&(m.hidden=!g),g&&dt([t],!0),h.done((function(){for(r in g||dt([t]),Z.remove(t,"fxshow"),p)T.style(t,r,p[r])}))),l=de(g?m[r]:0,r,h),r in m||(m[r]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?ge.prefilters.unshift(t):ge.prefilters.push(t)}}),T.speed=function(t,e,n){var r=t&&"object"==typeof t?T.extend({},t):{complete:n||!n&&e||y(t)&&t,duration:t,easing:n&&e||e&&!y(e)&&e};return T.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in T.fx.speeds?r.duration=T.fx.speeds[r.duration]:r.duration=T.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&T.dequeue(this,r.queue)},r},T.fn.extend({fadeTo:function(t,e,n,r){return this.filter(ut).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=T.isEmptyObject(t),o=T.speed(e,n,r),a=function(){var e=ge(this,T.extend({},t),o);(i||Z.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each((function(){var e=!0,i=null!=t&&t+"queueHooks",o=T.timers,a=Z.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ce.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||T.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=Z.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=T.timers,a=r?r.length:0;for(n.finish=!0,T.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish}))}}),T.each(["toggle","show","hide"],(function(t,e){var n=T.fn[e];T.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(pe(e,!0),t,r,i)}})),T.each({slideDown:pe("show"),slideUp:pe("hide"),slideToggle:pe("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){T.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}})),T.timers=[],T.fx.tick=function(){var t,e=0,n=T.timers;for(se=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||T.fx.stop(),se=void 0},T.fx.timer=function(t){T.timers.push(t),T.fx.start()},T.fx.interval=13,T.fx.start=function(){le||(le=!0,fe())},T.fx.stop=function(){le=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(t,e){return t=T.fx&&T.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,r){var i=n.setTimeout(e,t);r.stop=function(){n.clearTimeout(i)}}))},function(){var t=a.createElement("input"),e=a.createElement("select").appendChild(a.createElement("option"));t.type="checkbox",v.checkOn=""!==t.value,v.optSelected=e.selected,(t=a.createElement("input")).value="t",t.type="radio",v.radioValue="t"===t.value}();var me,ve=T.expr.attrHandle;T.fn.extend({attr:function(t,e){return Y(this,T.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){T.removeAttr(this,t)}))}}),T.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?T.prop(t,e,n):(1===o&&T.isXMLDoc(t)||(i=T.attrHooks[e.toLowerCase()]||(T.expr.match.bool.test(e)?me:void 0)),void 0!==n?null===n?void T.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:null==(r=T.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!v.radioValue&&"radio"===e&&k(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(H);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),me={set:function(t,e,n){return!1===e?T.removeAttr(t,n):t.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=ve[e]||T.find.attr;ve[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=ve[a],ve[a]=i,i=null!=n(t,e,r)?a:null,ve[a]=o),i}}));var ye=/^(?:input|select|textarea|button)$/i,_e=/^(?:a|area)$/i;function we(t){return(t.match(H)||[]).join(" ")}function be(t){return t.getAttribute&&t.getAttribute("class")||""}function xe(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(H)||[]}T.fn.extend({prop:function(t,e){return Y(this,T.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[T.propFix[t]||t]}))}}),T.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&T.isXMLDoc(t)||(e=T.propFix[e]||e,i=T.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=T.find.attr(t,"tabindex");return e?parseInt(e,10):ye.test(t.nodeName)||_e.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(T.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){T.propFix[this.toLowerCase()]=this})),T.fn.extend({addClass:function(t){var e,n,r,i,o,a,s,l=0;if(y(t))return this.each((function(e){T(this).addClass(t.call(this,e,be(this)))}));if((e=xe(t)).length)for(;n=this[l++];)if(i=be(n),r=1===n.nodeType&&" "+we(i)+" "){for(a=0;o=e[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=we(r))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,a,s,l=0;if(y(t))return this.each((function(e){T(this).removeClass(t.call(this,e,be(this)))}));if(!arguments.length)return this.attr("class","");if((e=xe(t)).length)for(;n=this[l++];)if(i=be(n),r=1===n.nodeType&&" "+we(i)+" "){for(a=0;o=e[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(s=we(r))&&n.setAttribute("class",s)}return this},toggleClass:function(t,e){var n=typeof t,r="string"===n||Array.isArray(t);return"boolean"==typeof e&&r?e?this.addClass(t):this.removeClass(t):y(t)?this.each((function(n){T(this).toggleClass(t.call(this,n,be(this),e),e)})):this.each((function(){var e,i,o,a;if(r)for(i=0,o=T(this),a=xe(t);e=a[i++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=be(this))&&Z.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Z.get(this,"__className__")||""))}))},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+we(be(n))+" ").indexOf(e)>-1)return!0;return!1}});var Te=/\r/g;T.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=y(t),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?t.call(this,n,T(this).val()):t)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=T.map(i,(function(t){return null==t?"":t+""}))),(e=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))}))):i?(e=T.valHooks[i.type]||T.valHooks[i.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Te,""):null==n?"":n:void 0}}),T.extend({valHooks:{option:{get:function(t){var e=T.find.attr(t,"value");return null!=e?e:we(T.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,a="select-one"===t.type,s=a?null:[],l=a?o+1:i.length;for(r=o<0?l:a?o:0;r<l;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!k(n.parentNode,"optgroup"))){if(e=T(n).val(),a)return e;s.push(e)}return s},set:function(t,e){for(var n,r,i=t.options,o=T.makeArray(e),a=i.length;a--;)((r=i[a]).selected=T.inArray(T.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),T.each(["radio","checkbox"],(function(){T.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=T.inArray(T(t).val(),e)>-1}},v.checkOn||(T.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),v.focusin="onfocusin"in n;var Ee=/^(?:focusinfocus|focusoutblur)$/,Ce=function(t){t.stopPropagation()};T.extend(T.event,{trigger:function(t,e,r,i){var o,s,l,u,c,f,h,p,g=[r||a],m=d.call(t,"type")?t.type:t,v=d.call(t,"namespace")?t.namespace.split("."):[];if(s=p=l=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!Ee.test(m+T.event.triggered)&&(m.indexOf(".")>-1&&(v=m.split("."),m=v.shift(),v.sort()),c=m.indexOf(":")<0&&"on"+m,(t=t[T.expando]?t:new T.Event(m,"object"==typeof t&&t)).isTrigger=i?2:3,t.namespace=v.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),e=null==e?[t]:T.makeArray(e,[t]),h=T.event.special[m]||{},i||!h.trigger||!1!==h.trigger.apply(r,e))){if(!i&&!h.noBubble&&!_(r)){for(u=h.delegateType||m,Ee.test(u+m)||(s=s.parentNode);s;s=s.parentNode)g.push(s),l=s;l===(r.ownerDocument||a)&&g.push(l.defaultView||l.parentWindow||n)}for(o=0;(s=g[o++])&&!t.isPropagationStopped();)p=s,t.type=o>1?u:h.bindType||m,(f=(Z.get(s,"events")||{})[t.type]&&Z.get(s,"handle"))&&f.apply(s,e),(f=c&&s[c])&&f.apply&&K(s)&&(t.result=f.apply(s,e),!1===t.result&&t.preventDefault());return t.type=m,i||t.isDefaultPrevented()||h._default&&!1!==h._default.apply(g.pop(),e)||!K(r)||c&&y(r[m])&&!_(r)&&((l=r[c])&&(r[c]=null),T.event.triggered=m,t.isPropagationStopped()&&p.addEventListener(m,Ce),r[m](),t.isPropagationStopped()&&p.removeEventListener(m,Ce),T.event.triggered=void 0,l&&(r[c]=l)),t.result}},simulate:function(t,e,n){var r=T.extend(new T.Event,n,{type:t,isSimulated:!0});T.event.trigger(r,null,e)}}),T.fn.extend({trigger:function(t,e){return this.each((function(){T.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return T.event.trigger(t,e,n,!0)}}),v.focusin||T.each({focus:"focusin",blur:"focusout"},(function(t,e){var n=function(t){T.event.simulate(e,t.target,T.event.fix(t))};T.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=Z.access(r,e);i||r.addEventListener(t,n,!0),Z.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Z.access(r,e)-1;i?Z.access(r,e,i):(r.removeEventListener(t,n,!0),Z.remove(r,e))}}}));var Se=n.location,Ae=Date.now(),Ne=/\?/;T.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+t),e};var De=/\[\]$/,ke=/\r?\n/g,Me=/^(?:submit|button|image|reset|file)$/i,Ie=/^(?:input|select|textarea|keygen)/i;function Oe(t,e,n,r){var i;if(Array.isArray(e))T.each(e,(function(e,i){n||De.test(t)?r(t,i):Oe(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)}));else if(n||"object"!==x(e))r(t,e);else for(i in e)Oe(t+"["+i+"]",e[i],n,r)}T.param=function(t,e){var n,r=[],i=function(t,e){var n=y(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!T.isPlainObject(t))T.each(t,(function(){i(this.name,this.value)}));else for(n in t)Oe(n,t[n],e,i);return r.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=T.prop(this,"elements");return t?T.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!T(this).is(":disabled")&&Ie.test(this.nodeName)&&!Me.test(t)&&(this.checked||!gt.test(t))})).map((function(t,e){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,(function(t){return{name:e.name,value:t.replace(ke,"\r\n")}})):{name:e.name,value:n.replace(ke,"\r\n")}})).get()}});var Le=/%20/g,Re=/#.*$/,Pe=/([?&])_=[^&]*/,je=/^(.*?):[ \t]*([^\r\n]*)$/gm,He=/^(?:GET|HEAD)$/,Fe=/^\/\//,qe={},Ue={},Be="*/".concat("*"),We=a.createElement("a");function ze(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(H)||[];if(y(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function Ye(t,e,n,r){var i={},o=t===Ue;function a(s){var l;return i[s]=!0,T.each(t[s]||[],(function(t,s){var u=s(e,n,r);return"string"!=typeof u||o||i[u]?o?!(l=u):void 0:(e.dataTypes.unshift(u),a(u),!1)})),l}return a(e.dataTypes[0])||!i["*"]&&a("*")}function Ve(t,e){var n,r,i=T.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&T.extend(!0,t,r),t}We.href=Se.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Se.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Se.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Be,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ve(Ve(t,T.ajaxSettings),e):Ve(T.ajaxSettings,t)},ajaxPrefilter:ze(qe),ajaxTransport:ze(Ue),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var r,i,o,s,l,u,c,f,h,p,d=T.ajaxSetup({},e),g=d.context||d,m=d.context&&(g.nodeType||g.jquery)?T(g):T.event,v=T.Deferred(),y=T.Callbacks("once memory"),_=d.statusCode||{},w={},b={},x="canceled",E={readyState:0,getResponseHeader:function(t){var e;if(c){if(!s)for(s={};e=je.exec(o);)s[e[1].toLowerCase()+" "]=(s[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=s[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(t,e){return null==c&&(t=b[t.toLowerCase()]=b[t.toLowerCase()]||t,w[t]=e),this},overrideMimeType:function(t){return null==c&&(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)E.always(t[E.status]);else for(e in t)_[e]=[_[e],t[e]];return this},abort:function(t){var e=t||x;return r&&r.abort(e),C(0,e),this}};if(v.promise(E),d.url=((t||d.url||Se.href)+"").replace(Fe,Se.protocol+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(H)||[""],null==d.crossDomain){u=a.createElement("a");try{u.href=d.url,u.href=u.href,d.crossDomain=We.protocol+"//"+We.host!=u.protocol+"//"+u.host}catch(t){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=T.param(d.data,d.traditional)),Ye(qe,d,e,E),c)return E;for(h in(f=T.event&&d.global)&&0==T.active++&&T.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!He.test(d.type),i=d.url.replace(Re,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(Le,"+")):(p=d.url.slice(i.length),d.data&&(d.processData||"string"==typeof d.data)&&(i+=(Ne.test(i)?"&":"?")+d.data,delete d.data),!1===d.cache&&(i=i.replace(Pe,"$1"),p=(Ne.test(i)?"&":"?")+"_="+Ae+++p),d.url=i+p),d.ifModified&&(T.lastModified[i]&&E.setRequestHeader("If-Modified-Since",T.lastModified[i]),T.etag[i]&&E.setRequestHeader("If-None-Match",T.etag[i])),(d.data&&d.hasContent&&!1!==d.contentType||e.contentType)&&E.setRequestHeader("Content-Type",d.contentType),E.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Be+"; q=0.01":""):d.accepts["*"]),d.headers)E.setRequestHeader(h,d.headers[h]);if(d.beforeSend&&(!1===d.beforeSend.call(g,E,d)||c))return E.abort();if(x="abort",y.add(d.complete),E.done(d.success),E.fail(d.error),r=Ye(Ue,d,e,E)){if(E.readyState=1,f&&m.trigger("ajaxSend",[E,d]),c)return E;d.async&&d.timeout>0&&(l=n.setTimeout((function(){E.abort("timeout")}),d.timeout));try{c=!1,r.send(w,C)}catch(t){if(c)throw t;C(-1,t)}}else C(-1,"No Transport");function C(t,e,a,s){var u,h,p,w,b,x=e;c||(c=!0,l&&n.clearTimeout(l),r=void 0,o=s||"",E.readyState=t>0?4:0,u=t>=200&&t<300||304===t,a&&(w=function(t,e,n){for(var r,i,o,a,s=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||t.converters[i+" "+l[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(d,E,a)),w=function(t,e,n,r){var i,o,a,s,l,u={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)u[a.toLowerCase()]=t.converters[a];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=u[l+" "+o]||u["* "+o]))for(i in u)if((s=i.split(" "))[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[i]:!0!==u[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(d,w,E,u),u?(d.ifModified&&((b=E.getResponseHeader("Last-Modified"))&&(T.lastModified[i]=b),(b=E.getResponseHeader("etag"))&&(T.etag[i]=b)),204===t||"HEAD"===d.type?x="nocontent":304===t?x="notmodified":(x=w.state,h=w.data,u=!(p=w.error))):(p=x,!t&&x||(x="error",t<0&&(t=0))),E.status=t,E.statusText=(e||x)+"",u?v.resolveWith(g,[h,x,E]):v.rejectWith(g,[E,x,p]),E.statusCode(_),_=void 0,f&&m.trigger(u?"ajaxSuccess":"ajaxError",[E,d,u?h:p]),y.fireWith(g,[E,x]),f&&(m.trigger("ajaxComplete",[E,d]),--T.active||T.event.trigger("ajaxStop")))}return E},getJSON:function(t,e,n){return T.get(t,e,n,"json")},getScript:function(t,e){return T.get(t,void 0,e,"script")}}),T.each(["get","post"],(function(t,e){T[e]=function(t,n,r,i){return y(n)&&(i=i||r,r=n,n=void 0),T.ajax(T.extend({url:t,type:e,dataType:i,data:n,success:r},T.isPlainObject(t)&&t))}})),T._evalUrl=function(t,e){return T.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){T.globalEval(t,e)}})},T.fn.extend({wrapAll:function(t){var e;return this[0]&&(y(t)&&(t=t.call(this[0])),e=T(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return y(t)?this.each((function(e){T(this).wrapInner(t.call(this,e))})):this.each((function(){var e=T(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=y(t);return this.each((function(n){T(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){T(this).replaceWith(this.childNodes)})),this}}),T.expr.pseudos.hidden=function(t){return!T.expr.pseudos.visible(t)},T.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var Ge={0:200,1223:204},$e=T.ajaxSettings.xhr();v.cors=!!$e&&"withCredentials"in $e,v.ajax=$e=!!$e,T.ajaxTransport((function(t){var e,r;if(v.cors||$e&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];for(a in t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);e=function(t){return function(){e&&(e=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Ge[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=e(),r=s.onerror=s.ontimeout=e("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){e&&r()}))},e=e("abort");try{s.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),T.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return T.globalEval(t),t}}}),T.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),T.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(r,i){e=T("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),a.head.appendChild(e[0])},abort:function(){n&&n()}}}));var Xe,Ke=[],Qe=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ke.pop()||T.expando+"_"+Ae++;return this[t]=!0,t}}),T.ajaxPrefilter("json jsonp",(function(t,e,r){var i,o,a,s=!1!==t.jsonp&&(Qe.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qe.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=y(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Qe,"$1"+i):!1!==t.jsonp&&(t.url+=(Ne.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||T.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always((function(){void 0===o?T(n).removeProp(i):n[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,Ke.push(i)),a&&y(o)&&o(a[0]),a=o=void 0})),"script"})),v.createHTMLDocument=((Xe=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Xe.childNodes.length),T.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(v.createHTMLDocument?((r=(e=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,e.head.appendChild(r)):e=a),o=!n&&[],(i=M.exec(t))?[e.createElement(i[1])]:(i=Et([t],e,o),o&&o.length&&T(o).remove(),T.merge([],i.childNodes)));var r,i,o},T.fn.load=function(t,e,n){var r,i,o,a=this,s=t.indexOf(" ");return s>-1&&(r=we(t.slice(s)),t=t.slice(0,s)),y(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&T.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done((function(t){o=arguments,a.html(r?T("<div>").append(T.parseHTML(t)).find(r):t)})).always(n&&function(t,e){a.each((function(){n.apply(this,o||[t.responseText,e,t])}))}),this},T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){T.fn[e]=function(t){return this.on(e,t)}})),T.expr.pseudos.animated=function(t){return T.grep(T.timers,(function(e){return t===e.elem})).length},T.offset={setOffset:function(t,e,n){var r,i,o,a,s,l,u=T.css(t,"position"),c=T(t),f={};"static"===u&&(t.style.position="relative"),s=c.offset(),o=T.css(t,"top"),l=T.css(t,"left"),("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(l)||0),y(e)&&(e=e.call(t,n,T.extend({},s))),null!=e.top&&(f.top=e.top-s.top+a),null!=e.left&&(f.left=e.left-s.left+i),"using"in e?e.using.call(t,f):c.css(f)}},T.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){T.offset.setOffset(this,t,e)}));var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,r=this[0],i={top:0,left:0};if("fixed"===T.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),n=r.ownerDocument,t=r.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===T.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((i=T(t).offset()).top+=T.css(t,"borderTopWidth",!0),i.left+=T.css(t,"borderLeftWidth",!0))}return{top:e.top-i.top-T.css(r,"marginTop",!0),left:e.left-i.left-T.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===T.css(t,"position");)t=t.offsetParent;return t||at}))}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;T.fn[t]=function(r){return Y(this,(function(t,r,i){var o;if(_(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[e]:t[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i}),t,r,arguments.length)}})),T.each(["top","left"],(function(t,e){T.cssHooks[e]=$t(v.pixelPosition,(function(t,n){if(n)return n=Gt(t,e),zt.test(n)?T(t).position()[e]+"px":n}))})),T.each({Height:"height",Width:"width"},(function(t,e){T.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,r){T.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return Y(this,(function(e,n,i){var o;return _(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?T.css(e,n,s):T.style(e,n,i,s)}),e,a?i:void 0,a)}}))})),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){T.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}})),T.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),T.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),T.proxy=function(t,e){var n,r,i;if("string"==typeof e&&(n=t[e],e=t,t=n),y(t))return r=l.call(arguments,2),(i=function(){return t.apply(e||this,r.concat(l.call(arguments)))}).guid=t.guid=t.guid||T.guid++,i},T.holdReady=function(t){t?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=k,T.isFunction=y,T.isWindow=_,T.camelCase=X,T.type=x,T.now=Date.now,T.isNumeric=function(t){var e=T.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},void 0===(r=function(){return T}.apply(e,[]))||(t.exports=r);var Ze=n.jQuery,Je=n.$;return T.noConflict=function(t){return n.$===T&&(n.$=Je),t&&n.jQuery===T&&(n.jQuery=Ze),T},i||(n.jQuery=n.$=T),T}))},function(t,e,n){"use strict";n.r(e),function(t){
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.0
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,r=function(){for(var t=["Edge","Trident","Firefox"],e=0;e<t.length;e+=1)if(n&&navigator.userAgent.indexOf(t[e])>=0)return 1;return 0}();var i=n&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then((function(){e=!1,t()})))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout((function(){e=!1,t()}),r))}};function o(t){return t&&"[object Function]"==={}.toString.call(t)}function a(t,e){if(1!==t.nodeType)return[];var n=t.ownerDocument.defaultView.getComputedStyle(t,null);return e?n[e]:n}function s(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function l(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=a(t),n=e.overflow,r=e.overflowX,i=e.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?t:l(s(t))}function u(t){return t&&t.referenceNode?t.referenceNode:t}var c=n&&!(!window.MSInputMethodContext||!document.documentMode),f=n&&/MSIE 10/.test(navigator.userAgent);function h(t){return 11===t?c:10===t?f:c||f}function p(t){if(!t)return document.documentElement;for(var e=h(10)?document.body:null,n=t.offsetParent||null;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===a(n,"position")?p(n):n:t?t.ownerDocument.documentElement:document.documentElement}function d(t){return null!==t.parentNode?d(t.parentNode):t}function g(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?t:e,i=n?e:t,o=document.createRange();o.setStart(r,0),o.setEnd(i,0);var a,s,l=o.commonAncestorContainer;if(t!==l&&e!==l||r.contains(i))return"BODY"===(s=(a=l).nodeName)||"HTML"!==s&&p(a.firstElementChild)!==a?p(l):l;var u=d(t);return u.host?g(u.host,e):g(t,d(e).host)}function m(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var r=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||r)[e]}return t[e]}function v(t,e){var n="x"===e?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+r+"Width"],10)}function y(t,e,n,r){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],h(10)?parseInt(n["offset"+t])+parseInt(r["margin"+("Height"===t?"Top":"Left")])+parseInt(r["margin"+("Height"===t?"Bottom":"Right")]):0)}function _(t){var e=t.body,n=t.documentElement,r=h(10)&&getComputedStyle(n);return{height:y("Height",e,n,r),width:y("Width",e,n,r)}}var w=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},b=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),x=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},T=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function E(t){return T({},t,{right:t.left+t.width,bottom:t.top+t.height})}function C(t){var e={};try{if(h(10)){e=t.getBoundingClientRect();var n=m(t,"top"),r=m(t,"left");e.top+=n,e.left+=r,e.bottom+=n,e.right+=r}else e=t.getBoundingClientRect()}catch(t){}var i={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},o="HTML"===t.nodeName?_(t.ownerDocument):{},s=o.width||t.clientWidth||i.width,l=o.height||t.clientHeight||i.height,u=t.offsetWidth-s,c=t.offsetHeight-l;if(u||c){var f=a(t);u-=v(f,"x"),c-=v(f,"y"),i.width-=u,i.height-=c}return E(i)}function S(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=h(10),i="HTML"===e.nodeName,o=C(t),s=C(e),u=l(t),c=a(e),f=parseFloat(c.borderTopWidth,10),p=parseFloat(c.borderLeftWidth,10);n&&i&&(s.top=Math.max(s.top,0),s.left=Math.max(s.left,0));var d=E({top:o.top-s.top-f,left:o.left-s.left-p,width:o.width,height:o.height});if(d.marginTop=0,d.marginLeft=0,!r&&i){var g=parseFloat(c.marginTop,10),v=parseFloat(c.marginLeft,10);d.top-=f-g,d.bottom-=f-g,d.left-=p-v,d.right-=p-v,d.marginTop=g,d.marginLeft=v}return(r&&!n?e.contains(u):e===u&&"BODY"!==u.nodeName)&&(d=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=m(e,"top"),i=m(e,"left"),o=n?-1:1;return t.top+=r*o,t.bottom+=r*o,t.left+=i*o,t.right+=i*o,t}(d,e)),d}function A(t){if(!t||!t.parentElement||h())return document.documentElement;for(var e=t.parentElement;e&&"none"===a(e,"transform");)e=e.parentElement;return e||document.documentElement}function N(t,e,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},c=i?A(t):g(t,u(e));if("viewport"===r)o=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,r=S(t,n),i=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),a=e?0:m(n),s=e?0:m(n,"left");return E({top:a-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:i,height:o})}(c,i);else{var f=void 0;"scrollParent"===r?"BODY"===(f=l(s(e))).nodeName&&(f=t.ownerDocument.documentElement):f="window"===r?t.ownerDocument.documentElement:r;var h=S(f,c,i);if("HTML"!==f.nodeName||function t(e){var n=e.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===a(e,"position"))return!0;var r=s(e);return!!r&&t(r)}(c))o=h;else{var p=_(t.ownerDocument),d=p.height,v=p.width;o.top+=h.top-h.marginTop,o.bottom=d+h.top,o.left+=h.left-h.marginLeft,o.right=v+h.left}}var y="number"==typeof(n=n||0);return o.left+=y?n:n.left||0,o.top+=y?n:n.top||0,o.right-=y?n:n.right||0,o.bottom-=y?n:n.bottom||0,o}function D(t,e,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var a=N(n,r,o,i),s={top:{width:a.width,height:e.top-a.top},right:{width:a.right-e.right,height:a.height},bottom:{width:a.width,height:a.bottom-e.bottom},left:{width:e.left-a.left,height:a.height}},l=Object.keys(s).map((function(t){return T({key:t},s[t],{area:(e=s[t],e.width*e.height)});var e})).sort((function(t,e){return e.area-t.area})),u=l.filter((function(t){var e=t.width,r=t.height;return e>=n.clientWidth&&r>=n.clientHeight})),c=u.length>0?u[0].key:l[0].key,f=t.split("-")[1];return c+(f?"-"+f:"")}function k(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return S(n,r?A(e):g(e,u(n)),r)}function M(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),n=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),r=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+r,height:t.offsetHeight+n}}function I(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,(function(t){return e[t]}))}function O(t,e,n){n=n.split("-")[0];var r=M(t),i={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",s=o?"left":"top",l=o?"height":"width",u=o?"width":"height";return i[a]=e[a]+e[l]/2-r[l]/2,i[s]=n===s?e[s]-r[u]:e[I(s)],i}function L(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function R(t,e,n){return(void 0===n?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex((function(t){return t[e]===n}));var r=L(t,(function(t){return t[e]===n}));return t.indexOf(r)}(t,"name",n))).forEach((function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&o(n)&&(e.offsets.popper=E(e.offsets.popper),e.offsets.reference=E(e.offsets.reference),e=n(e,t))})),e}function P(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=k(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=D(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=O(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=R(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}function j(t,e){return t.some((function(t){var n=t.name;return t.enabled&&n===e}))}function H(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),r=0;r<e.length;r++){var i=e[r],o=i?""+i+n:t;if(void 0!==document.body.style[o])return o}return null}function F(){return this.state.isDestroyed=!0,j(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function q(t){var e=t.ownerDocument;return e?e.defaultView:window}function U(t,e,n,r){n.updateBound=r,q(t).addEventListener("resize",n.updateBound,{passive:!0});var i=l(t);return function t(e,n,r,i){var o="BODY"===e.nodeName,a=o?e.ownerDocument.defaultView:e;a.addEventListener(n,r,{passive:!0}),o||t(l(a.parentNode),n,r,i),i.push(a)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function B(){this.state.eventsEnabled||(this.state=U(this.reference,this.options,this.state,this.scheduleUpdate))}function W(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,q(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach((function(t){t.removeEventListener("scroll",e.updateBound)})),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function z(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function Y(t,e){Object.keys(e).forEach((function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&z(e[n])&&(r="px"),t.style[n]=e[n]+r}))}var V=n&&/Firefox/i.test(navigator.userAgent);function G(t,e,n){var r=L(t,(function(t){return t.name===e})),i=!!r&&t.some((function(t){return t.name===n&&t.enabled&&t.order<r.order}));if(!i){var o="`"+e+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var $=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],X=$.slice(3);function K(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=X.indexOf(t),r=X.slice(n+1).concat(X.slice(0,n));return e?r.reverse():r}var Q={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function Z(t,e,n,r){var i=[0,0],o=-1!==["right","left"].indexOf(r),a=t.split(/(\+|\-)/).map((function(t){return t.trim()})),s=a.indexOf(L(a,(function(t){return-1!==t.search(/,|\s/)})));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,u=-1!==s?[a.slice(0,s).concat([a[s].split(l)[0]]),[a[s].split(l)[1]].concat(a.slice(s+1))]:[a];return(u=u.map((function(t,r){var i=(1===r?!o:o)?"height":"width",a=!1;return t.reduce((function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,a=!0,t):a?(t[t.length-1]+=e,a=!1,t):t.concat(e)}),[]).map((function(t){return function(t,e,n,r){var i=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],a=i[2];if(!o)return t;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=r}return E(s)[e]/100*o}if("vh"===a||"vw"===a){return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o}return o}(t,i,e,n)}))}))).forEach((function(t,e){t.forEach((function(n,r){z(n)&&(i[e]+=n*("-"===t[r-1]?-1:1))}))})),i}var J={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],r=e.split("-")[1];if(r){var i=t.offsets,o=i.reference,a=i.popper,s=-1!==["bottom","top"].indexOf(n),l=s?"left":"top",u=s?"width":"height",c={start:x({},l,o[l]),end:x({},l,o[l]+o[u]-a[u])};t.offsets.popper=T({},a,c[r])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,r=t.placement,i=t.offsets,o=i.popper,a=i.reference,s=r.split("-")[0],l=void 0;return l=z(+n)?[+n,0]:Z(n,o,a,s),"left"===s?(o.top+=l[0],o.left-=l[1]):"right"===s?(o.top+=l[0],o.left+=l[1]):"top"===s?(o.left+=l[0],o.top-=l[1]):"bottom"===s&&(o.left+=l[0],o.top+=l[1]),t.popper=o,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||p(t.instance.popper);t.instance.reference===n&&(n=p(n));var r=H("transform"),i=t.instance.popper.style,o=i.top,a=i.left,s=i[r];i.top="",i.left="",i[r]="";var l=N(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);i.top=o,i.left=a,i[r]=s,e.boundaries=l;var u=e.priority,c=t.offsets.popper,f={primary:function(t){var n=c[t];return c[t]<l[t]&&!e.escapeWithReference&&(n=Math.max(c[t],l[t])),x({},t,n)},secondary:function(t){var n="right"===t?"left":"top",r=c[n];return c[t]>l[t]&&!e.escapeWithReference&&(r=Math.min(c[n],l[t]-("right"===t?c.width:c.height))),x({},n,r)}};return u.forEach((function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";c=T({},c,f[e](t))})),t.offsets.popper=c,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,r=e.reference,i=t.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(i),s=a?"right":"bottom",l=a?"left":"top",u=a?"width":"height";return n[s]<o(r[l])&&(t.offsets.popper[l]=o(r[l])-n[u]),n[l]>o(r[s])&&(t.offsets.popper[l]=o(r[s])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!G(t.instance.modifiers,"arrow","keepTogether"))return t;var r=e.element;if("string"==typeof r){if(!(r=t.instance.popper.querySelector(r)))return t}else if(!t.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var i=t.placement.split("-")[0],o=t.offsets,s=o.popper,l=o.reference,u=-1!==["left","right"].indexOf(i),c=u?"height":"width",f=u?"Top":"Left",h=f.toLowerCase(),p=u?"left":"top",d=u?"bottom":"right",g=M(r)[c];l[d]-g<s[h]&&(t.offsets.popper[h]-=s[h]-(l[d]-g)),l[h]+g>s[d]&&(t.offsets.popper[h]+=l[h]+g-s[d]),t.offsets.popper=E(t.offsets.popper);var m=l[h]+l[c]/2-g/2,v=a(t.instance.popper),y=parseFloat(v["margin"+f],10),_=parseFloat(v["border"+f+"Width"],10),w=m-t.offsets.popper[h]-y-_;return w=Math.max(Math.min(s[c]-g,w),0),t.arrowElement=r,t.offsets.arrow=(x(n={},h,Math.round(w)),x(n,p,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(j(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=N(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),r=t.placement.split("-")[0],i=I(r),o=t.placement.split("-")[1]||"",a=[];switch(e.behavior){case Q.FLIP:a=[r,i];break;case Q.CLOCKWISE:a=K(r);break;case Q.COUNTERCLOCKWISE:a=K(r,!0);break;default:a=e.behavior}return a.forEach((function(s,l){if(r!==s||a.length===l+1)return t;r=t.placement.split("-")[0],i=I(r);var u=t.offsets.popper,c=t.offsets.reference,f=Math.floor,h="left"===r&&f(u.right)>f(c.left)||"right"===r&&f(u.left)<f(c.right)||"top"===r&&f(u.bottom)>f(c.top)||"bottom"===r&&f(u.top)<f(c.bottom),p=f(u.left)<f(n.left),d=f(u.right)>f(n.right),g=f(u.top)<f(n.top),m=f(u.bottom)>f(n.bottom),v="left"===r&&p||"right"===r&&d||"top"===r&&g||"bottom"===r&&m,y=-1!==["top","bottom"].indexOf(r),_=!!e.flipVariations&&(y&&"start"===o&&p||y&&"end"===o&&d||!y&&"start"===o&&g||!y&&"end"===o&&m),w=!!e.flipVariationsByContent&&(y&&"start"===o&&d||y&&"end"===o&&p||!y&&"start"===o&&m||!y&&"end"===o&&g),b=_||w;(h||v||b)&&(t.flipped=!0,(h||v)&&(r=a[l+1]),b&&(o=function(t){return"end"===t?"start":"start"===t?"end":t}(o)),t.placement=r+(o?"-"+o:""),t.offsets.popper=T({},t.offsets.popper,O(t.instance.popper,t.offsets.reference,t.placement)),t=R(t.instance.modifiers,t,"flip"))})),t},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],r=t.offsets,i=r.popper,o=r.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return i[a?"left":"top"]=o[n]-(s?i[a?"width":"height"]:0),t.placement=I(e),t.offsets.popper=E(i),t}},hide:{order:800,enabled:!0,fn:function(t){if(!G(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=L(t.instance.modifiers,(function(t){return"preventOverflow"===t.name})).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,r=e.y,i=t.offsets.popper,o=L(t.instance.modifiers,(function(t){return"applyStyle"===t.name})).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:e.gpuAcceleration,s=p(t.instance.popper),l=C(s),u={position:i.position},c=function(t,e){var n=t.offsets,r=n.popper,i=n.reference,o=Math.round,a=Math.floor,s=function(t){return t},l=o(i.width),u=o(r.width),c=-1!==["left","right"].indexOf(t.placement),f=-1!==t.placement.indexOf("-"),h=e?c||f||l%2==u%2?o:a:s,p=e?o:s;return{left:h(l%2==1&&u%2==1&&!f&&e?r.left-1:r.left),top:p(r.top),bottom:p(r.bottom),right:h(r.right)}}(t,window.devicePixelRatio<2||!V),f="bottom"===n?"top":"bottom",h="right"===r?"left":"right",d=H("transform"),g=void 0,m=void 0;if(m="bottom"===f?"HTML"===s.nodeName?-s.clientHeight+c.bottom:-l.height+c.bottom:c.top,g="right"===h?"HTML"===s.nodeName?-s.clientWidth+c.right:-l.width+c.right:c.left,a&&d)u[d]="translate3d("+g+"px, "+m+"px, 0)",u[f]=0,u[h]=0,u.willChange="transform";else{var v="bottom"===f?-1:1,y="right"===h?-1:1;u[f]=m*v,u[h]=g*y,u.willChange=f+", "+h}var _={"x-placement":t.placement};return t.attributes=T({},_,t.attributes),t.styles=T({},u,t.styles),t.arrowStyles=T({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return Y(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach((function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)})),t.arrowElement&&Object.keys(t.arrowStyles).length&&Y(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,r,i){var o=k(i,e,t,n.positionFixed),a=D(n.placement,o,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",a),Y(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},tt=function(){function t(e,n){var r=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};w(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=i(this.update.bind(this)),this.options=T({},t.Defaults,a),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(T({},t.Defaults.modifiers,a.modifiers)).forEach((function(e){r.options.modifiers[e]=T({},t.Defaults.modifiers[e]||{},a.modifiers?a.modifiers[e]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(t){return T({name:t},r.options.modifiers[t])})).sort((function(t,e){return t.order-e.order})),this.modifiers.forEach((function(t){t.enabled&&o(t.onLoad)&&t.onLoad(r.reference,r.popper,r.options,t,r.state)})),this.update();var s=this.options.eventsEnabled;s&&this.enableEventListeners(),this.state.eventsEnabled=s}return b(t,[{key:"update",value:function(){return P.call(this)}},{key:"destroy",value:function(){return F.call(this)}},{key:"enableEventListeners",value:function(){return B.call(this)}},{key:"disableEventListeners",value:function(){return W.call(this)}}]),t}();tt.Utils=("undefined"!=typeof window?window:t).PopperUtils,tt.placements=$,tt.Defaults=J,e.default=tt}.call(this,n(10))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";n.r(e);n(7);var r=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},i=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return r(e(t),n)}),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}};var o=i(r),a=o.right,s=(o.left,a);var l=function(t,e){var n,r,i,o=t.length,a=-1;if(null==e){for(;++a<o;)if(null!=(n=t[a])&&n>=n)for(r=i=n;++a<o;)null!=(n=t[a])&&(r>n&&(r=n),i<n&&(i=n))}else for(;++a<o;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=i=n;++a<o;)null!=(n=e(t[a],a,t))&&(r>n&&(r=n),i<n&&(i=n));return[r,i]},u=Array.prototype,c=u.slice,f=(u.map,function(t){return function(){return t}}),h=function(t){return t},p=function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o},d=Math.sqrt(50),g=Math.sqrt(10),m=Math.sqrt(2),v=function(t,e,n){var r,i,o,a,s=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=y(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),o=new Array(i=Math.ceil(t-e+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o};function y(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=d?10:o>=g?5:o>=m?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=d?10:o>=g?5:o>=m?2:1)}function _(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=d?i*=10:o>=g?i*=5:o>=m&&(i*=2),e<t?-i:i}var w=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},b=function(){var t=h,e=l,n=w;function r(r){var i,o,a=r.length,l=new Array(a);for(i=0;i<a;++i)l[i]=t(r[i],i,r);var u=e(l),c=u[0],f=u[1],h=n(l,c,f);Array.isArray(h)||(h=_(c,f,h),h=p(Math.ceil(c/h)*h,f,h));for(var d=h.length;h[0]<=c;)h.shift(),--d;for(;h[d-1]>f;)h.pop(),--d;var g,m=new Array(d+1);for(i=0;i<=d;++i)(g=m[i]=[]).x0=i>0?h[i-1]:c,g.x1=i<d?h[i]:f;for(i=0;i<a;++i)c<=(o=l[i])&&o<=f&&m[s(h,o,0,d)].push(r[i]);return m}return r.value=function(e){return arguments.length?(t="function"==typeof e?e:f(e),r):t},r.domain=function(t){return arguments.length?(e="function"==typeof t?t:f([t[0],t[1]]),r):e},r.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?f(c.call(t)):f(t),r):n},r},x=function(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&n>r&&(r=n);return r};var T=Array.prototype.slice,E=function(t){return t},C=1,S=2,A=3,N=4,D=1e-6;function k(t){return"translate("+(t+.5)+",0)"}function M(t){return"translate(0,"+(t+.5)+")"}function I(t){return function(e){return+t(e)}}function O(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function L(){return!this.__axis}function R(t,e){var n=[],r=null,i=null,o=6,a=6,s=3,l=t===C||t===N?-1:1,u=t===N||t===S?"x":"y",c=t===C||t===A?k:M;function f(f){var h=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,p=null==i?e.tickFormat?e.tickFormat.apply(e,n):E:i,d=Math.max(o,0)+s,g=e.range(),m=+g[0]+.5,v=+g[g.length-1]+.5,y=(e.bandwidth?O:I)(e.copy()),_=f.selection?f.selection():f,w=_.selectAll(".domain").data([null]),b=_.selectAll(".tick").data(h,e).order(),x=b.exit(),T=b.enter().append("g").attr("class","tick"),k=b.select("line"),M=b.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),b=b.merge(T),k=k.merge(T.append("line").attr("stroke","currentColor").attr(u+"2",l*o)),M=M.merge(T.append("text").attr("fill","currentColor").attr(u,l*d).attr("dy",t===C?"0em":t===A?"0.71em":"0.32em")),f!==_&&(w=w.transition(f),b=b.transition(f),k=k.transition(f),M=M.transition(f),x=x.transition(f).attr("opacity",D).attr("transform",(function(t){return isFinite(t=y(t))?c(t):this.getAttribute("transform")})),T.attr("opacity",D).attr("transform",(function(t){var e=this.parentNode.__axis;return c(e&&isFinite(e=e(t))?e:y(t))}))),x.remove(),w.attr("d",t===N||t==S?a?"M"+l*a+","+m+"H0.5V"+v+"H"+l*a:"M0.5,"+m+"V"+v:a?"M"+m+","+l*a+"V0.5H"+v+"V"+l*a:"M"+m+",0.5H"+v),b.attr("opacity",1).attr("transform",(function(t){return c(y(t))})),k.attr(u+"2",l*o),M.attr(u,l*d).text(p),_.filter(L).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===S?"start":t===N?"end":"middle"),_.each((function(){this.__axis=y}))}return f.scale=function(t){return arguments.length?(e=t,f):e},f.ticks=function(){return n=T.call(arguments),f},f.tickArguments=function(t){return arguments.length?(n=null==t?[]:T.call(t),f):n.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:T.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(o=a=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(a=+t,f):a},f.tickPadding=function(t){return arguments.length?(s=+t,f):s},f}function P(t){return R(A,t)}function j(t){return R(N,t)}var H={value:function(){}};function F(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new q(r)}function q(t){this._=t}function U(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function B(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function W(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=H,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}q.prototype=F.prototype={constructor:q,on:function(t,e){var n,r=this._,i=U(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<a;)if(n=(t=i[o]).type)r[n]=W(r[n],t.name,e);else if(null==e)for(n in r)r[n]=W(r[n],t.name,null);return this}for(;++o<a;)if((n=(t=i[o]).type)&&(n=B(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new q(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var z=F,Y="http://www.w3.org/1999/xhtml",V={svg:"http://www.w3.org/2000/svg",xhtml:Y,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},G=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),V.hasOwnProperty(e)?{space:V[e],local:t}:t};function $(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===Y&&e.documentElement.namespaceURI===Y?e.createElement(t):e.createElementNS(n,t)}}function X(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var K=function(t){var e=G(t);return(e.local?X:$)(e)};function Q(){}var Z=function(t){return null==t?Q:function(){return this.querySelector(t)}};function J(){return[]}var tt=function(t){return null==t?J:function(){return this.querySelectorAll(t)}},et=function(t){return function(){return this.matches(t)}},nt=function(t){return new Array(t.length)};function rt(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}rt.prototype={constructor:rt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var it="$";function ot(t,e,n,r,i,o){for(var a,s=0,l=e.length,u=o.length;s<u;++s)(a=e[s])?(a.__data__=o[s],r[s]=a):n[s]=new rt(t,o[s]);for(;s<l;++s)(a=e[s])&&(i[s]=a)}function at(t,e,n,r,i,o,a){var s,l,u,c={},f=e.length,h=o.length,p=new Array(f);for(s=0;s<f;++s)(l=e[s])&&(p[s]=u=it+a.call(l,l.__data__,s,e),u in c?i[s]=l:c[u]=l);for(s=0;s<h;++s)(l=c[u=it+a.call(t,o[s],s,o)])?(r[s]=l,l.__data__=o[s],c[u]=null):n[s]=new rt(t,o[s]);for(s=0;s<f;++s)(l=e[s])&&c[p[s]]===l&&(i[s]=l)}function st(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function lt(t){return function(){this.removeAttribute(t)}}function ut(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ct(t,e){return function(){this.setAttribute(t,e)}}function ft(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function ht(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function pt(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var dt=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function gt(t){return function(){this.style.removeProperty(t)}}function mt(t,e,n){return function(){this.style.setProperty(t,e,n)}}function vt(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function yt(t,e){return t.style.getPropertyValue(e)||dt(t).getComputedStyle(t,null).getPropertyValue(e)}function _t(t){return function(){delete this[t]}}function wt(t,e){return function(){this[t]=e}}function bt(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function xt(t){return t.trim().split(/^|\s+/)}function Tt(t){return t.classList||new Et(t)}function Et(t){this._node=t,this._names=xt(t.getAttribute("class")||"")}function Ct(t,e){for(var n=Tt(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function St(t,e){for(var n=Tt(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function At(t){return function(){Ct(this,t)}}function Nt(t){return function(){St(this,t)}}function Dt(t,e){return function(){(e.apply(this,arguments)?Ct:St)(this,t)}}Et.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function kt(){this.textContent=""}function Mt(t){return function(){this.textContent=t}}function It(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function Ot(){this.innerHTML=""}function Lt(t){return function(){this.innerHTML=t}}function Rt(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Pt(){this.nextSibling&&this.parentNode.appendChild(this)}function jt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Ht(){return null}function Ft(){var t=this.parentNode;t&&t.removeChild(this)}function qt(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Ut(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Bt={},Wt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Bt={mouseenter:"mouseover",mouseleave:"mouseout"}));function zt(t,e,n){return t=Yt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function Yt(t,e,n){return function(r){var i=Wt;Wt=r;try{t.call(this,this.__data__,e,n)}finally{Wt=i}}}function Vt(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function Gt(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function $t(t,e,n){var r=Bt.hasOwnProperty(t.type)?zt:Yt;return function(i,o,a){var s,l=this.__on,u=r(e,o,a);if(l)for(var c=0,f=l.length;c<f;++c)if((s=l[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=u,s.capture=n),void(s.value=e);this.addEventListener(t.type,u,n),s={type:t.type,name:t.name,value:e,listener:u,capture:n},l?l.push(s):this.__on=[s]}}function Xt(t,e,n){var r=dt(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function Kt(t,e){return function(){return Xt(this,t,e)}}function Qt(t,e){return function(){return Xt(this,t,e.apply(this,arguments))}}var Zt=[null];function Jt(t,e){this._groups=t,this._parents=e}function te(){return new Jt([[document.documentElement]],Zt)}Jt.prototype=te.prototype={constructor:Jt,select:function(t){"function"!=typeof t&&(t=Z(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,s=e[i],l=s.length,u=r[i]=new Array(l),c=0;c<l;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),u[c]=a);return new Jt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=tt(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var a,s=e[o],l=s.length,u=0;u<l;++u)(a=s[u])&&(r.push(t.call(a,a.__data__,u,s)),i.push(a));return new Jt(r,i)},filter:function(t){"function"!=typeof t&&(t=et(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],u=0;u<s;++u)(o=a[u])&&t.call(o,o.__data__,u,a)&&l.push(o);return new Jt(r,this._parents)},data:function(t,e){if(!t)return d=new Array(this.size()),c=-1,this.each((function(t){d[++c]=t})),d;var n,r=e?at:ot,i=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var a=o.length,s=new Array(a),l=new Array(a),u=new Array(a),c=0;c<a;++c){var f=i[c],h=o[c],p=h.length,d=t.call(f,f&&f.__data__,c,i),g=d.length,m=l[c]=new Array(g),v=s[c]=new Array(g);r(f,h,m,v,u[c]=new Array(p),d,e);for(var y,_,w=0,b=0;w<g;++w)if(y=m[w]){for(w>=b&&(b=w+1);!(_=v[b])&&++b<g;);y._next=_||null}}return(s=new Jt(s,i))._enter=l,s._exit=u,s},enter:function(){return new Jt(this._enter||this._groups.map(nt),this._parents)},exit:function(){return new Jt(this._exit||this._groups.map(nt),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,u=e[s],c=n[s],f=u.length,h=a[s]=new Array(f),p=0;p<f;++p)(l=u[p]||c[p])&&(h[p]=l);for(;s<r;++s)a[s]=e[s];return new Jt(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=st);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],l=s.length,u=i[o]=new Array(l),c=0;c<l;++c)(a=s[c])&&(u[c]=a);u.sort(e)}return new Jt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=G(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?ut:lt:"function"==typeof e?n.local?pt:ht:n.local?ft:ct)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?gt:"function"==typeof e?vt:mt)(t,e,null==n?"":n)):yt(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?_t:"function"==typeof e?bt:wt)(t,e)):this.node()[t]},classed:function(t,e){var n=xt(t+"");if(arguments.length<2){for(var r=Tt(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?Dt:e?At:Nt)(n,e))},text:function(t){return arguments.length?this.each(null==t?kt:("function"==typeof t?It:Mt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Ot:("function"==typeof t?Rt:Lt)(t)):this.node().innerHTML},raise:function(){return this.each(Pt)},lower:function(){return this.each(jt)},append:function(t){var e="function"==typeof t?t:K(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:K(t),r=null==e?Ht:"function"==typeof e?e:Z(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Ft)},clone:function(t){return this.select(t?Ut:qt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=Vt(t+""),a=o.length;if(!(arguments.length<2)){for(s=e?$t:Gt,null==n&&(n=!1),r=0;r<a;++r)this.each(s(o[r],e,n));return this}var s=this.node().__on;if(s)for(var l,u=0,c=s.length;u<c;++u)for(r=0,l=s[u];r<a;++r)if((i=o[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?Qt:Kt)(t,e))}};var ee=te,ne=function(t){return"string"==typeof t?new Jt([[document.querySelector(t)]],[document.documentElement]):new Jt([[t]],Zt)},re=0;function ie(){this._="@"+(++re).toString(36)}ie.prototype=function(){return new ie}.prototype={constructor:ie,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var oe=function(t){return"string"==typeof t?new Jt([document.querySelectorAll(t)],[document.documentElement]):new Jt([null==t?[]:t],Zt)};function ae(t,e,n,r,i,o,a,s,l,u){this.target=t,this.type=e,this.subject=n,this.identifier=r,this.active=i,this.x=o,this.y=a,this.dx=s,this.dy=l,this._=u}ae.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var se=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function le(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function ue(){}var ce="\\s*([+-]?\\d+)\\s*",fe="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",he="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",pe=/^#([0-9a-f]{3,8})$/,de=new RegExp("^rgb\\("+[ce,ce,ce]+"\\)$"),ge=new RegExp("^rgb\\("+[he,he,he]+"\\)$"),me=new RegExp("^rgba\\("+[ce,ce,ce,fe]+"\\)$"),ve=new RegExp("^rgba\\("+[he,he,he,fe]+"\\)$"),ye=new RegExp("^hsl\\("+[fe,he,he]+"\\)$"),_e=new RegExp("^hsla\\("+[fe,he,he,fe]+"\\)$"),we={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function be(){return this.rgb().formatHex()}function xe(){return this.rgb().formatRgb()}function Te(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=pe.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Ee(e):3===n?new Ne(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?new Ne(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?new Ne(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=de.exec(t))?new Ne(e[1],e[2],e[3],1):(e=ge.exec(t))?new Ne(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=me.exec(t))?Ce(e[1],e[2],e[3],e[4]):(e=ve.exec(t))?Ce(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ye.exec(t))?Ie(e[1],e[2]/100,e[3]/100,1):(e=_e.exec(t))?Ie(e[1],e[2]/100,e[3]/100,e[4]):we.hasOwnProperty(t)?Ee(we[t]):"transparent"===t?new Ne(NaN,NaN,NaN,0):null}function Ee(t){return new Ne(t>>16&255,t>>8&255,255&t,1)}function Ce(t,e,n,r){return r<=0&&(t=e=n=NaN),new Ne(t,e,n,r)}function Se(t){return t instanceof ue||(t=Te(t)),t?new Ne((t=t.rgb()).r,t.g,t.b,t.opacity):new Ne}function Ae(t,e,n,r){return 1===arguments.length?Se(t):new Ne(t,e,n,null==r?1:r)}function Ne(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function De(){return"#"+Me(this.r)+Me(this.g)+Me(this.b)}function ke(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Me(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Ie(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Re(t,e,n,r)}function Oe(t){if(t instanceof Re)return new Re(t.h,t.s,t.l,t.opacity);if(t instanceof ue||(t=Te(t)),!t)return new Re;if(t instanceof Re)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,s=o-i,l=(o+i)/2;return s?(a=e===o?(n-r)/s+6*(n<r):n===o?(r-e)/s+2:(e-n)/s+4,s/=l<.5?o+i:2-o-i,a*=60):s=l>0&&l<1?0:a,new Re(a,s,l,t.opacity)}function Le(t,e,n,r){return 1===arguments.length?Oe(t):new Re(t,e,n,null==r?1:r)}function Re(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Pe(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function je(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}se(ue,Te,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:be,formatHex:be,formatHsl:function(){return Oe(this).formatHsl()},formatRgb:xe,toString:xe}),se(Ne,Ae,le(ue,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ne(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ne(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:De,formatHex:De,formatRgb:ke,toString:ke})),se(Re,Le,le(ue,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Re(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Re(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new Ne(Pe(t>=240?t-240:t+120,i,r),Pe(t,i,r),Pe(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var He=function(t){return function(){return t}};function Fe(t,e){return function(n){return t+n*e}}function qe(t,e){var n=e-t;return n?Fe(t,n>180||n<-180?n-360*Math.round(n/360):n):He(isNaN(t)?e:t)}function Ue(t){return 1==(t=+t)?Be:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):He(isNaN(e)?n:e)}}function Be(t,e){var n=e-t;return n?Fe(t,n):He(isNaN(t)?e:t)}var We=function t(e){var n=Ue(e);function r(t,e){var r=n((t=Ae(t)).r,(e=Ae(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=Be(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function ze(t){return function(e){var n,r,i=e.length,o=new Array(i),a=new Array(i),s=new Array(i);for(n=0;n<i;++n)r=Ae(e[n]),o[n]=r.r||0,a[n]=r.g||0,s[n]=r.b||0;return o=t(o),a=t(a),s=t(s),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=s(t),r+""}}}ze((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<e-1?t[r+2]:2*o-i;return je((n-r/e)*e,a,i,o,s)}})),ze((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],a=t[(r+1)%e],s=t[(r+2)%e];return je((n-r/e)*e,i,o,a,s)}}));var Ye=function(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=nn(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}},Ve=function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}},Ge=function(t,e){return e-=t=+t,function(n){return t+e*n}},$e=function(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=nn(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}},Xe=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ke=new RegExp(Xe.source,"g");var Qe,Ze,Je,tn,en=function(t,e){var n,r,i,o=Xe.lastIndex=Ke.lastIndex=0,a=-1,s=[],l=[];for(t+="",e+="";(n=Xe.exec(t))&&(r=Ke.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,l.push({i:a,x:Ge(n,r)})),o=Ke.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,r=0;r<e;++r)s[(n=l[r]).i]=n.x(t);return s.join("")})},nn=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?He(e):("number"===r?Ge:"string"===r?(n=Te(e))?(e=n,We):en:e instanceof Te?We:e instanceof Date?Ve:Array.isArray(e)?Ye:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?$e:Ge)(t,e)},rn=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},on=180/Math.PI,an={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},sn=function(t,e,n,r,i,o){var a,s,l;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,l/=s),t*r<e*n&&(t=-t,e=-e,l=-l,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*on,skewX:Math.atan(l)*on,scaleX:a,scaleY:s}};function ln(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],l=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var l=a.push("translate(",null,e,null,n);s.push({i:l-4,x:Ge(t,i)},{i:l-2,x:Ge(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,l),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Ge(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,s,l),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Ge(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,s,l),function(t,e,n,r,o,a){if(t!==n||e!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:Ge(t,n)},{i:s-2,x:Ge(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,l),o=a=null,function(t){for(var e,n=-1,r=l.length;++n<r;)s[(e=l[n]).i]=e.x(t);return s.join("")}}}var un=ln((function(t){return"none"===t?an:(Qe||(Qe=document.createElement("DIV"),Ze=document.documentElement,Je=document.defaultView),Qe.style.transform=t,t=Je.getComputedStyle(Ze.appendChild(Qe),null).getPropertyValue("transform"),Ze.removeChild(Qe),t=t.slice(7,-1).split(","),sn(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),cn=ln((function(t){return null==t?an:(tn||(tn=document.createElementNS("http://www.w3.org/2000/svg","g")),tn.setAttribute("transform",t),(t=tn.transform.baseVal.consolidate())?(t=t.matrix,sn(t.a,t.b,t.c,t.d,t.e,t.f)):an)}),", ",")",")");Math.SQRT2;function fn(t){return function(e,n){var r=t((e=Le(e)).h,(n=Le(n)).h),i=Be(e.s,n.s),o=Be(e.l,n.l),a=Be(e.opacity,n.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=o(t),e.opacity=a(t),e+""}}}fn(qe),fn(Be);var hn=Math.PI/180,pn=180/Math.PI,dn=.96422,gn=1,mn=.82521,vn=4/29,yn=6/29,_n=3*yn*yn,wn=yn*yn*yn;function bn(t){if(t instanceof Tn)return new Tn(t.l,t.a,t.b,t.opacity);if(t instanceof kn)return Mn(t);t instanceof Ne||(t=Se(t));var e,n,r=An(t.r),i=An(t.g),o=An(t.b),a=En((.2225045*r+.7168786*i+.0606169*o)/gn);return r===i&&i===o?e=n=a:(e=En((.4360747*r+.3850649*i+.1430804*o)/dn),n=En((.0139322*r+.0971045*i+.7141733*o)/mn)),new Tn(116*a-16,500*(e-a),200*(a-n),t.opacity)}function xn(t,e,n,r){return 1===arguments.length?bn(t):new Tn(t,e,n,null==r?1:r)}function Tn(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function En(t){return t>wn?Math.pow(t,1/3):t/_n+vn}function Cn(t){return t>yn?t*t*t:_n*(t-vn)}function Sn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function An(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Nn(t){if(t instanceof kn)return new kn(t.h,t.c,t.l,t.opacity);if(t instanceof Tn||(t=bn(t)),0===t.a&&0===t.b)return new kn(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*pn;return new kn(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Dn(t,e,n,r){return 1===arguments.length?Nn(t):new kn(t,e,n,null==r?1:r)}function kn(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function Mn(t){if(isNaN(t.h))return new Tn(t.l,0,0,t.opacity);var e=t.h*hn;return new Tn(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}function In(t){return function(e,n){var r=t((e=Dn(e)).h,(n=Dn(n)).h),i=Be(e.c,n.c),o=Be(e.l,n.l),a=Be(e.opacity,n.opacity);return function(t){return e.h=r(t),e.c=i(t),e.l=o(t),e.opacity=a(t),e+""}}}se(Tn,xn,le(ue,{brighter:function(t){return new Tn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Tn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Ne(Sn(3.1338561*(e=dn*Cn(e))-1.6168667*(t=gn*Cn(t))-.4906146*(n=mn*Cn(n))),Sn(-.9787684*e+1.9161415*t+.033454*n),Sn(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),se(kn,Dn,le(ue,{brighter:function(t){return new kn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new kn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Mn(this).rgb()}}));In(qe),In(Be);var On=-.14861,Ln=-.29227,Rn=-.90649,Pn=1.97294,jn=Pn*Rn,Hn=1.78277*Pn,Fn=1.78277*Ln-Rn*On;function qn(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Un)return new Un(t.h,t.s,t.l,t.opacity);t instanceof Ne||(t=Se(t));var e=t.r/255,n=t.g/255,r=t.b/255,i=(Fn*r+jn*e-Hn*n)/(Fn+jn-Hn),o=r-i,a=(Pn*(n-i)-Ln*o)/Rn,s=Math.sqrt(a*a+o*o)/(Pn*i*(1-i)),l=s?Math.atan2(a,o)*pn-120:NaN;return new Un(l<0?l+360:l,s,i,t.opacity)}(t):new Un(t,e,n,null==r?1:r)}function Un(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Bn(t){return function e(n){function r(e,r){var i=t((e=qn(e)).h,(r=qn(r)).h),o=Be(e.s,r.s),a=Be(e.l,r.l),s=Be(e.opacity,r.opacity);return function(t){return e.h=i(t),e.s=o(t),e.l=a(Math.pow(t,n)),e.opacity=s(t),e+""}}return n=+n,r.gamma=e,r}(1)}se(Un,qn,le(ue,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Un(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Un(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*hn,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),i=Math.sin(t);return new Ne(255*(e+n*(On*r+1.78277*i)),255*(e+n*(Ln*r+Rn*i)),255*(e+n*(Pn*r)),this.opacity)}}));Bn(qe),Bn(Be);var Wn,zn,Yn=0,Vn=0,Gn=0,$n=1e3,Xn=0,Kn=0,Qn=0,Zn="object"==typeof performance&&performance.now?performance:Date,Jn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function tr(){return Kn||(Jn(er),Kn=Zn.now()+Qn)}function er(){Kn=0}function nr(){this._call=this._time=this._next=null}function rr(t,e,n){var r=new nr;return r.restart(t,e,n),r}function ir(){Kn=(Xn=Zn.now())+Qn,Yn=Vn=0;try{!function(){tr(),++Yn;for(var t,e=Wn;e;)(t=Kn-e._time)>=0&&e._call.call(null,t),e=e._next;--Yn}()}finally{Yn=0,function(){var t,e,n=Wn,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Wn=e);zn=t,ar(r)}(),Kn=0}}function or(){var t=Zn.now(),e=t-Xn;e>$n&&(Qn-=e,Xn=t)}function ar(t){Yn||(Vn&&(Vn=clearTimeout(Vn)),t-Kn>24?(t<1/0&&(Vn=setTimeout(ir,t-Zn.now()-Qn)),Gn&&(Gn=clearInterval(Gn))):(Gn||(Xn=Zn.now(),Gn=setInterval(or,$n)),Yn=1,Jn(ir)))}nr.prototype=rr.prototype={constructor:nr,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?tr():+n)+(null==e?0:+e),this._next||zn===this||(zn?zn._next=this:Wn=this,zn=this),this._call=t,this._time=n,ar()},stop:function(){this._call&&(this._call=null,this._time=1/0,ar())}};var sr=function(t,e,n){var r=new nr;return e=null==e?0:+e,r.restart((function(n){r.stop(),t(n+e)}),e,n),r},lr=z("start","end","cancel","interrupt"),ur=[],cr=0,fr=1,hr=2,pr=3,dr=4,gr=5,mr=6,vr=function(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(l){var u,c,f,h;if(n.state!==fr)return s();for(u in i)if((h=i[u]).name===n.name){if(h.state===pr)return sr(o);h.state===dr?(h.state=mr,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[u]):+u<e&&(h.state=mr,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[u])}if(sr((function(){n.state===pr&&(n.state=dr,n.timer.restart(a,n.delay,n.time),a(l))})),n.state=hr,n.on.call("start",t,t.__data__,n.index,n.group),n.state===hr){for(n.state=pr,r=new Array(f=n.tween.length),u=0,c=-1;u<f;++u)(h=n.tween[u].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=h);r.length=c+1}}function a(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(s),n.state=gr,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);n.state===gr&&(n.on.call("end",t,t.__data__,n.index,n.group),s())}function s(){for(var r in n.state=mr,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=rr((function(t){n.state=fr,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:i,on:lr,tween:ur,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:cr})};function yr(t,e){var n=wr(t,e);if(n.state>cr)throw new Error("too late; already scheduled");return n}function _r(t,e){var n=wr(t,e);if(n.state>pr)throw new Error("too late; already running");return n}function wr(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var br=function(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>hr&&n.state<gr,n.state=mr,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}};function xr(t,e){var n,r;return function(){var i=_r(this,t),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function Tr(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=_r(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:e,value:n},l=0,u=i.length;l<u;++l)if(i[l].name===e){i[l]=s;break}l===u&&i.push(s)}o.tween=i}}function Er(t,e,n){var r=t._id;return t.each((function(){var t=_r(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return wr(t,r).value[e]}}var Cr=function(t,e){var n;return("number"==typeof e?Ge:e instanceof Te?We:(n=Te(e))?(e=n,We):en)(t,e)};function Sr(t){return function(){this.removeAttribute(t)}}function Ar(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Nr(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function Dr(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function kr(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttribute(t))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttribute(t)}}function Mr(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttributeNS(t.space,t.local))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttributeNS(t.space,t.local)}}function Ir(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e(n))}}(t,i)),n}return i._value=e,i}function Or(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttribute(t,e(n))}}(t,i)),n}return i._value=e,i}function Lr(t,e){return function(){yr(this,t).delay=+e.apply(this,arguments)}}function Rr(t,e){return e=+e,function(){yr(this,t).delay=e}}function Pr(t,e){return function(){_r(this,t).duration=+e.apply(this,arguments)}}function jr(t,e){return e=+e,function(){_r(this,t).duration=e}}function Hr(t,e){if("function"!=typeof e)throw new Error;return function(){_r(this,t).ease=e}}function Fr(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?yr:_r;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(e,n),a.on=i}}var qr=ee.prototype.constructor;function Ur(t){return function(){this.style.removeProperty(t)}}function Br(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,e,n){return function(r){this.style.setProperty(t,e(r),n)}}(t,o,n)),r}return o._value=e,o}var Wr=0;function zr(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Yr(){return++Wr}var Vr=ee.prototype;zr.prototype=function(t){return ee().transition(t)}.prototype={constructor:zr,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Z(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,l,u=r[a],c=u.length,f=o[a]=new Array(c),h=0;h<c;++h)(s=u[h])&&(l=t.call(s,s.__data__,h,u))&&("__data__"in s&&(l.__data__=s.__data__),f[h]=l,vr(f[h],e,n,h,f,wr(s,n)));return new zr(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=tt(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var l,u=r[s],c=u.length,f=0;f<c;++f)if(l=u[f]){for(var h,p=t.call(l,l.__data__,f,u),d=wr(l,n),g=0,m=p.length;g<m;++g)(h=p[g])&&vr(h,e,n,g,p,d);o.push(p),a.push(l)}return new zr(o,a,e,n)},filter:function(t){"function"!=typeof t&&(t=et(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],u=0;u<s;++u)(o=a[u])&&t.call(o,o.__data__,u,a)&&l.push(o);return new zr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,u=e[s],c=n[s],f=u.length,h=a[s]=new Array(f),p=0;p<f;++p)(l=u[p]||c[p])&&(h[p]=l);for(;s<r;++s)a[s]=e[s];return new zr(a,this._parents,this._name,this._id)},selection:function(){return new qr(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Yr(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,u=0;u<l;++u)if(a=s[u]){var c=wr(a,e);vr(a,t,n,u,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new zr(r,this._parents,t,n)},call:Vr.call,nodes:Vr.nodes,node:Vr.node,size:Vr.size,empty:Vr.empty,each:Vr.each,on:function(t,e){var n=this._id;return arguments.length<2?wr(this.node(),n).on.on(t):this.each(Fr(n,t,e))},attr:function(t,e){var n=G(t),r="transform"===n?cn:Cr;return this.attrTween(t,"function"==typeof e?(n.local?Mr:kr)(n,r,Er(this,"attr."+t,e)):null==e?(n.local?Ar:Sr)(n):(n.local?Dr:Nr)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=G(t);return this.tween(n,(r.local?Ir:Or)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?un:Cr;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=yt(this,t),a=(this.style.removeProperty(t),yt(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,Ur(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=yt(this,t),s=n(this),l=s+"";return null==s&&(this.style.removeProperty(t),l=s=yt(this,t)),a===l?null:a===r&&l===i?o:(i=l,o=e(r=a,s))}}(t,r,Er(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,s="end."+a;return function(){var l=_r(this,t),u=l.on,c=null==l.value[a]?o||(o=Ur(e)):void 0;u===n&&i===c||(r=(n=u).copy()).on(s,i=c),l.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=yt(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,Br(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Er(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=wr(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?xr:Tr)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Lr:Rr)(e,t)):wr(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Pr:jr)(e,t)):wr(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(Hr(e,t)):wr(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},l={value:function(){0==--i&&o()}};n.each((function(){var n=_r(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(l)),n.on=e}))}))}};(function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n})(3),function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),Math.PI;(function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n})(1.70158),function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158);var Gr=2*Math.PI,$r=(function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Gr);function i(t){return e*Math.pow(2,10*--t)*Math.sin((r-t)/n)}return i.amplitude=function(e){return t(e,n*Gr)},i.period=function(n){return t(e,n)},i}(1,.3),function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Gr);function i(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/n)}return i.amplitude=function(e){return t(e,n*Gr)},i.period=function(n){return t(e,n)},i}(1,.3),function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Gr);function i(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((r-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((r+t)/n))/2}return i.amplitude=function(e){return t(e,n*Gr)},i.period=function(n){return t(e,n)},i}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function Xr(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return $r.time=tr(),$r;return n}ee.prototype.interrupt=function(t){return this.each((function(){br(this,t)}))},ee.prototype.transition=function(t){var e,n;t instanceof zr?(e=t._id,t=t._name):(e=Yr(),(n=$r).time=tr(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,u=0;u<l;++u)(a=s[u])&&vr(a,t,e,u,s,n||Xr(a,e));return new zr(r,this._parents,t,e)};function Kr(t){return[+t[0],+t[1]]}function Qr(t){return[Kr(t[0]),Kr(t[1])]}["w","e"].map(Zr),["n","s"].map(Zr),["n","w","e","s","nw","ne","sw","se"].map(Zr);function Zr(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Jr=Math.PI,ti=2*Jr,ei=ti-1e-6;function ni(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ri(){return new ni}ni.prototype=ri.prototype={constructor:ni,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,s=n-t,l=r-e,u=o-t,c=a-e,f=u*u+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>1e-6)if(Math.abs(c*s-l*u)>1e-6&&i){var h=n-o,p=r-a,d=s*s+l*l,g=h*h+p*p,m=Math.sqrt(d),v=Math.sqrt(f),y=i*Math.tan((Jr-Math.acos((d+f-g)/(2*m*v)))/2),_=y/v,w=y/m;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*u)+","+(e+_*c)),this._+="A"+i+","+i+",0,0,"+ +(c*h>u*p)+","+(this._x1=t+w*s)+","+(this._y1=e+w*l)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var a=(n=+n)*Math.cos(r),s=n*Math.sin(r),l=t+a,u=e+s,c=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+l+","+u:(Math.abs(this._x1-l)>1e-6||Math.abs(this._y1-u)>1e-6)&&(this._+="L"+l+","+u),n&&(f<0&&(f=f%ti+ti),f>ei?this._+="A"+n+","+n+",0,1,"+c+","+(t-a)+","+(e-s)+"A"+n+","+n+",0,1,"+c+","+(this._x1=l)+","+(this._y1=u):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=Jr)+","+c+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var ii=ri;function oi(){}function ai(t,e){var n=new oi;if(t instanceof oi)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==e)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e(r=t[i],i,t),r)}else if(t)for(var a in t)n.set(a,t[a]);return n}oi.prototype=ai.prototype={constructor:oi,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var si=ai;function li(){}var ui=si.prototype;function ci(t,e){var n=new li;if(t instanceof li)t.each((function(t){n.add(t)}));else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}li.prototype=ci.prototype={constructor:li,has:ui.has,add:function(t){return this["$"+(t+="")]=t,this},remove:ui.remove,clear:ui.clear,values:ui.keys,size:ui.size,empty:ui.empty,each:ui.each};var fi=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e};Array.prototype.slice;var hi={},pi={},di=34,gi=10,mi=13;function vi(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+"]"})).join(",")+"}")}function yi(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var r in t)r in e||n.push(e[r]=r)})),n}function _i(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function wi(t){var e,n=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+_i(-e,6):e>9999?"+"+_i(e,6):_i(e,4))+"-"+_i(t.getUTCMonth()+1,2)+"-"+_i(t.getUTCDate(),2)+(o?"T"+_i(n,2)+":"+_i(r,2)+":"+_i(i,2)+"."+_i(o,3)+"Z":i?"T"+_i(n,2)+":"+_i(r,2)+":"+_i(i,2)+"Z":r||n?"T"+_i(n,2)+":"+_i(r,2)+"Z":"")}var bi=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,i=[],o=t.length,a=0,s=0,l=o<=0,u=!1;function c(){if(l)return pi;if(u)return u=!1,hi;var e,r,i=a;if(t.charCodeAt(i)===di){for(;a++<o&&t.charCodeAt(a)!==di||t.charCodeAt(++a)===di;);return(e=a)>=o?l=!0:(r=t.charCodeAt(a++))===gi?u=!0:r===mi&&(u=!0,t.charCodeAt(a)===gi&&++a),t.slice(i+1,e-1).replace(/""/g,'"')}for(;a<o;){if((r=t.charCodeAt(e=a++))===gi)u=!0;else if(r===mi)u=!0,t.charCodeAt(a)===gi&&++a;else if(r!==n)continue;return t.slice(i,e)}return l=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===gi&&--o,t.charCodeAt(o-1)===mi&&--o;(r=c())!==pi;){for(var f=[];r!==hi&&r!==pi;)f.push(r),r=c();e&&null==(f=e(f,s++))||i.push(f)}return i}function i(e,n){return e.map((function(e){return n.map((function(t){return a(e[t])})).join(t)}))}function o(e){return e.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?wi(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,i,o=r(t,(function(t,r){if(n)return n(t,r-1);i=t,n=e?function(t,e){var n=vi(t);return function(r,i){return e(n(r),i,t)}}(t,e):vi(t)}));return o.columns=i||[],o},parseRows:r,format:function(e,n){return null==n&&(n=yi(e)),[n.map(a).join(t)].concat(i(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=yi(t)),i(t,e).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},xi=bi(","),Ti=xi.parse,Ei=(xi.parseRows,xi.format,xi.formatBody,xi.formatRows,bi("\t")),Ci=Ei.parse;Ei.parseRows,Ei.format,Ei.formatBody,Ei.formatRows;function Si(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Ai=function(t,e){return fetch(t,e).then(Si)};function Ni(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),Ai(e,n).then((function(e){return t(e,r)}))}}var Di=Ni(Ti);Ni(Ci);function ki(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var Mi=function(t,e){return fetch(t,e).then(ki)};function Ii(t){return function(e,n){return Ai(e,n).then((function(e){return(new DOMParser).parseFromString(e,t)}))}}Ii("application/xml"),Ii("text/html"),Ii("image/svg+xml");function Oi(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var i,o,a,s,l,u,c,f,h,p=t._root,d={data:r},g=t._x0,m=t._y0,v=t._x1,y=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((u=e>=(o=(g+v)/2))?g=o:v=o,(c=n>=(a=(m+y)/2))?m=a:y=a,i=p,!(p=p[f=c<<1|u]))return i[f]=d,t;if(s=+t._x.call(null,p.data),l=+t._y.call(null,p.data),e===s&&n===l)return d.next=p,i?i[f]=d:t._root=d,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(u=e>=(o=(g+v)/2))?g=o:v=o,(c=n>=(a=(m+y)/2))?m=a:y=a}while((f=c<<1|u)==(h=(l>=a)<<1|s>=o));return i[h]=p,i[f]=d,t}var Li=function(t,e,n,r,i){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=i};function Ri(t){return t[0]}function Pi(t){return t[1]}function ji(t,e,n){var r=new Hi(null==e?Ri:e,null==n?Pi:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Hi(t,e,n,r,i,o){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Fi(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var qi=ji.prototype=Hi.prototype;qi.copy=function(){var t,e,n=new Hi(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=Fi(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(e=r.source[i])&&(e.length?t.push({source:e,target:r.target[i]=new Array(4)}):r.target[i]=Fi(e));return n},qi.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return Oi(this.cover(e,n),e,n,t)},qi.addAll=function(t){var e,n,r,i,o=t.length,a=new Array(o),s=new Array(o),l=1/0,u=1/0,c=-1/0,f=-1/0;for(n=0;n<o;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(i=+this._y.call(null,e))||(a[n]=r,s[n]=i,r<l&&(l=r),r>c&&(c=r),i<u&&(u=i),i>f&&(f=i));if(l>c||u>f)return this;for(this.cover(l,u).cover(c,f),n=0;n<o;++n)Oi(this,a[n],s[n],t[n]);return this},qi.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(n))i=(n=Math.floor(t))+1,o=(r=Math.floor(e))+1;else{for(var a,s,l=i-n,u=this._root;n>t||t>=i||r>e||e>=o;)switch(s=(e<r)<<1|t<n,(a=new Array(4))[s]=u,u=a,l*=2,s){case 0:i=n+l,o=r+l;break;case 1:n=i-l,o=r+l;break;case 2:i=n+l,r=o-l;break;case 3:n=i-l,r=o-l}this._root&&this._root.length&&(this._root=u)}return this._x0=n,this._y0=r,this._x1=i,this._y1=o,this},qi.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},qi.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},qi.find=function(t,e,n){var r,i,o,a,s,l,u,c=this._x0,f=this._y0,h=this._x1,p=this._y1,d=[],g=this._root;for(g&&d.push(new Li(g,c,f,h,p)),null==n?n=1/0:(c=t-n,f=e-n,h=t+n,p=e+n,n*=n);l=d.pop();)if(!(!(g=l.node)||(i=l.x0)>h||(o=l.y0)>p||(a=l.x1)<c||(s=l.y1)<f))if(g.length){var m=(i+a)/2,v=(o+s)/2;d.push(new Li(g[3],m,v,a,s),new Li(g[2],i,v,m,s),new Li(g[1],m,o,a,v),new Li(g[0],i,o,m,v)),(u=(e>=v)<<1|t>=m)&&(l=d[d.length-1],d[d.length-1]=d[d.length-1-u],d[d.length-1-u]=l)}else{var y=t-+this._x.call(null,g.data),_=e-+this._y.call(null,g.data),w=y*y+_*_;if(w<n){var b=Math.sqrt(n=w);c=t-b,f=e-b,h=t+b,p=e+b,r=g.data}}return r},qi.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var e,n,r,i,o,a,s,l,u,c,f,h,p=this._root,d=this._x0,g=this._y0,m=this._x1,v=this._y1;if(!p)return this;if(p.length)for(;;){if((u=o>=(s=(d+m)/2))?d=s:m=s,(c=a>=(l=(g+v)/2))?g=l:v=l,e=p,!(p=p[f=c<<1|u]))return this;if(!p.length)break;(e[f+1&3]||e[f+2&3]||e[f+3&3])&&(n=e,h=f)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):e?(i?e[f]=i:delete e[f],(p=e[0]||e[1]||e[2]||e[3])&&p===(e[3]||e[2]||e[1]||e[0])&&!p.length&&(n?n[h]=p:this._root=p),this):(this._root=i,this)},qi.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},qi.root=function(){return this._root},qi.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},qi.visit=function(t){var e,n,r,i,o,a,s=[],l=this._root;for(l&&s.push(new Li(l,this._x0,this._y0,this._x1,this._y1));e=s.pop();)if(!t(l=e.node,r=e.x0,i=e.y0,o=e.x1,a=e.y1)&&l.length){var u=(r+o)/2,c=(i+a)/2;(n=l[3])&&s.push(new Li(n,u,c,o,a)),(n=l[2])&&s.push(new Li(n,r,c,u,a)),(n=l[1])&&s.push(new Li(n,u,i,o,c)),(n=l[0])&&s.push(new Li(n,r,i,u,c))}return this},qi.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new Li(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var i=e.node;if(i.length){var o,a=e.x0,s=e.y0,l=e.x1,u=e.y1,c=(a+l)/2,f=(s+u)/2;(o=i[0])&&n.push(new Li(o,a,s,c,f)),(o=i[1])&&n.push(new Li(o,c,s,l,f)),(o=i[2])&&n.push(new Li(o,a,f,c,u)),(o=i[3])&&n.push(new Li(o,c,f,l,u))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},qi.x=function(t){return arguments.length?(this._x=t,this):this._x},qi.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Ui=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},Bi=function(t){return(t=Ui(Math.abs(t)))?t[1]:NaN},Wi=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function zi(t){if(!(e=Wi.exec(t)))throw new Error("invalid format: "+t);var e;return new Yi({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Yi(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}zi.prototype=Yi.prototype,Yi.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Vi,Gi,$i,Xi,Ki=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(e+1):t},Qi=function(t,e){var n=Ui(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Zi={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Qi(100*t,e)},r:Qi,s:function(t,e){var n=Ui(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(Vi=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Ui(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Ji=function(t){return t},to=Array.prototype.map,eo=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Gi=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?Ji:(e=to.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=e[0],l=0;i>0&&s>0&&(l+s+1>r&&(s=Math.max(1,r-l)),o.push(t.substring(i-=s,i+s)),!((l+=s+1)>r));)s=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?Ji:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(to.call(t.numerals,String)),l=void 0===t.percent?"%":t.percent+"",u=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=zi(t)).fill,n=t.align,f=t.sign,h=t.symbol,p=t.zero,d=t.width,g=t.comma,m=t.precision,v=t.trim,y=t.type;"n"===y?(g=!0,y="g"):Zi[y]||(void 0===m&&(m=12),v=!0,y="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var _="$"===h?i:"#"===h&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",w="$"===h?o:/[%p]/.test(y)?l:"",b=Zi[y],x=/[defgprs%]/.test(y);function T(t){var i,o,l,h=_,T=w;if("c"===y)T=b(t)+T,t="";else{var E=(t=+t)<0;if(t=isNaN(t)?c:b(Math.abs(t),m),v&&(t=Ki(t)),E&&0==+t&&(E=!1),h=(E?"("===f?f:u:"-"===f||"("===f?"":f)+h,T=("s"===y?eo[8+Vi/3]:"")+T+(E&&"("===f?")":""),x)for(i=-1,o=t.length;++i<o;)if(48>(l=t.charCodeAt(i))||l>57){T=(46===l?a+t.slice(i+1):t.slice(i))+T,t=t.slice(0,i);break}}g&&!p&&(t=r(t,1/0));var C=h.length+t.length+T.length,S=C<d?new Array(d-C+1).join(e):"";switch(g&&p&&(t=r(S+t,S.length?d-T.length:1/0),S=""),n){case"<":t=h+t+T+S;break;case"=":t=h+S+t+T;break;case"^":t=S.slice(0,C=S.length>>1)+h+t+T+S.slice(C);break;default:t=S+h+t+T}return s(t)}return m=void 0===m?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),T.toString=function(){return t+""},T}return{format:f,formatPrefix:function(t,e){var n=f(((t=zi(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Bi(e)/3))),i=Math.pow(10,-r),o=eo[8+r/3];return function(t){return n(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),$i=Gi.format,Xi=Gi.formatPrefix;function no(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function ro(t,e){var n,r,i,o,a,s=new so(t),l=+t.value&&(s.value=t.value),u=[s];for(null==e&&(e=io);n=u.pop();)if(l&&(n.value=+n.data.value),(i=e(n.data))&&(a=i.length))for(n.children=new Array(a),o=a-1;o>=0;--o)u.push(r=n.children[o]=new so(i[o])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(ao)}function io(t){return t.children}function oo(t){t.data=t.data.data}function ao(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function so(t){this.data=t,this.depth=this.height=0,this.parent=null}so.prototype=ro.prototype={constructor:so,count:function(){return this.eachAfter(no)},each:function(t){var e,n,r,i,o=this,a=[o];do{for(e=a.reverse(),a=[];o=e.pop();)if(t(o),n=o.children)for(r=0,i=n.length;r<i;++r)a.push(n[r])}while(a.length);return this},eachAfter:function(t){for(var e,n,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),e=i.children)for(n=0,r=e.length;n<r;++n)o.push(e[n]);for(;i=a.pop();)t(i);return this},eachBefore:function(t){for(var e,n,r=this,i=[r];r=i.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)i.push(e[n]);return this},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;t=n.pop(),e=r.pop();for(;t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return ro(this).eachBefore(oo)}};var lo=Array.prototype.slice;var uo=function(t){for(var e,n,r=0,i=(t=function(t){for(var e,n,r=t.length;r;)n=Math.random()*r--|0,e=t[r],t[r]=t[n],t[n]=e;return t}(lo.call(t))).length,o=[];r<i;)e=t[r],n&&ho(n,e)?++r:(n=go(o=co(o,e)),r=0);return n};function co(t,e){var n,r;if(po(e,t))return[e];for(n=0;n<t.length;++n)if(fo(e,t[n])&&po(mo(t[n],e),t))return[t[n],e];for(n=0;n<t.length-1;++n)for(r=n+1;r<t.length;++r)if(fo(mo(t[n],t[r]),e)&&fo(mo(t[n],e),t[r])&&fo(mo(t[r],e),t[n])&&po(vo(t[n],t[r],e),t))return[t[n],t[r],e];throw new Error}function fo(t,e){var n=t.r-e.r,r=e.x-t.x,i=e.y-t.y;return n<0||n*n<r*r+i*i}function ho(t,e){var n=t.r-e.r+1e-6,r=e.x-t.x,i=e.y-t.y;return n>0&&n*n>r*r+i*i}function po(t,e){for(var n=0;n<e.length;++n)if(!ho(t,e[n]))return!1;return!0}function go(t){switch(t.length){case 1:return{x:(e=t[0]).x,y:e.y,r:e.r};case 2:return mo(t[0],t[1]);case 3:return vo(t[0],t[1],t[2])}var e}function mo(t,e){var n=t.x,r=t.y,i=t.r,o=e.x,a=e.y,s=e.r,l=o-n,u=a-r,c=s-i,f=Math.sqrt(l*l+u*u);return{x:(n+o+l/f*c)/2,y:(r+a+u/f*c)/2,r:(f+i+s)/2}}function vo(t,e,n){var r=t.x,i=t.y,o=t.r,a=e.x,s=e.y,l=e.r,u=n.x,c=n.y,f=n.r,h=r-a,p=r-u,d=i-s,g=i-c,m=l-o,v=f-o,y=r*r+i*i-o*o,_=y-a*a-s*s+l*l,w=y-u*u-c*c+f*f,b=p*d-h*g,x=(d*w-g*_)/(2*b)-r,T=(g*m-d*v)/b,E=(p*_-h*w)/(2*b)-i,C=(h*v-p*m)/b,S=T*T+C*C-1,A=2*(o+x*T+E*C),N=x*x+E*E-o*o,D=-(S?(A+Math.sqrt(A*A-4*S*N))/(2*S):N/A);return{x:r+x+T*D,y:i+E+C*D,r:D}}function yo(t,e,n){var r,i,o,a,s=t.x-e.x,l=t.y-e.y,u=s*s+l*l;u?(i=e.r+n.r,i*=i,a=t.r+n.r,i>(a*=a)?(r=(u+a-i)/(2*u),o=Math.sqrt(Math.max(0,a/u-r*r)),n.x=t.x-r*s-o*l,n.y=t.y-r*l+o*s):(r=(u+i-a)/(2*u),o=Math.sqrt(Math.max(0,i/u-r*r)),n.x=e.x+r*s-o*l,n.y=e.y+r*l+o*s)):(n.x=e.x+n.r,n.y=e.y)}function _o(t,e){var n=t.r+e.r-1e-6,r=e.x-t.x,i=e.y-t.y;return n>0&&n*n>r*r+i*i}function wo(t){var e=t._,n=t.next._,r=e.r+n.r,i=(e.x*n.r+n.x*e.r)/r,o=(e.y*n.r+n.y*e.r)/r;return i*i+o*o}function bo(t){this._=t,this.next=null,this.previous=null}function xo(t){if(!(i=t.length))return 0;var e,n,r,i,o,a,s,l,u,c,f;if((e=t[0]).x=0,e.y=0,!(i>1))return e.r;if(n=t[1],e.x=-n.r,n.x=e.r,n.y=0,!(i>2))return e.r+n.r;yo(n,e,r=t[2]),e=new bo(e),n=new bo(n),r=new bo(r),e.next=r.previous=n,n.next=e.previous=r,r.next=n.previous=e;t:for(s=3;s<i;++s){yo(e._,n._,r=t[s]),r=new bo(r),l=n.next,u=e.previous,c=n._.r,f=e._.r;do{if(c<=f){if(_o(l._,r._)){n=l,e.next=n,n.previous=e,--s;continue t}c+=l._.r,l=l.next}else{if(_o(u._,r._)){(e=u).next=n,n.previous=e,--s;continue t}f+=u._.r,u=u.previous}}while(l!==u.next);for(r.previous=e,r.next=n,e.next=n.previous=n=r,o=wo(e);(r=r.next)!==n;)(a=wo(r))<o&&(e=r,o=a);n=e.next}for(e=[n._],r=n;(r=r.next)!==n;)e.push(r._);for(r=uo(e),s=0;s<i;++s)(e=t[s]).x-=r.x,e.y-=r.y;return r.r}function To(t){return null==t?null:Eo(t)}function Eo(t){if("function"!=typeof t)throw new Error;return t}function Co(){return 0}var So=function(t){return function(){return t}};function Ao(t){return Math.sqrt(t.value)}var No=function(){var t=null,e=1,n=1,r=Co;function i(i){return i.x=e/2,i.y=n/2,t?i.eachBefore(Do(t)).eachAfter(ko(r,.5)).eachBefore(Mo(1)):i.eachBefore(Do(Ao)).eachAfter(ko(Co,1)).eachAfter(ko(r,i.r/Math.min(e,n))).eachBefore(Mo(Math.min(e,n)/(2*i.r))),i}return i.radius=function(e){return arguments.length?(t=To(e),i):t},i.size=function(t){return arguments.length?(e=+t[0],n=+t[1],i):[e,n]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:So(+t),i):r},i};function Do(t){return function(e){e.children||(e.r=Math.max(0,+t(e)||0))}}function ko(t,e){return function(n){if(r=n.children){var r,i,o,a=r.length,s=t(n)*e||0;if(s)for(i=0;i<a;++i)r[i].r+=s;if(o=xo(r),s)for(i=0;i<a;++i)r[i].r-=s;n.r=o+s}}}function Mo(t){return function(e){var n=e.parent;e.r*=t,n&&(e.x=n.x+t*e.x,e.y=n.y+t*e.y)}}var Io=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},Oo=function(t,e,n,r,i){for(var o,a=t.children,s=-1,l=a.length,u=t.value&&(r-e)/t.value;++s<l;)(o=a[s]).y0=n,o.y1=i,o.x0=e,o.x1=e+=o.value*u},Lo="$",Ro={depth:-1},Po={};function jo(t){return t.id}function Ho(t){return t.parentId}function Fo(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}Fo.prototype=Object.create(so.prototype);var qo=function(t,e,n,r,i){for(var o,a=t.children,s=-1,l=a.length,u=t.value&&(i-n)/t.value;++s<l;)(o=a[s]).x0=e,o.x1=r,o.y0=n,o.y1=n+=o.value*u},Uo=(1+Math.sqrt(5))/2;function Bo(t,e,n,r,i,o){for(var a,s,l,u,c,f,h,p,d,g,m,v=[],y=e.children,_=0,w=0,b=y.length,x=e.value;_<b;){l=i-n,u=o-r;do{c=y[w++].value}while(!c&&w<b);for(f=h=c,m=c*c*(g=Math.max(u/l,l/u)/(x*t)),d=Math.max(h/m,m/f);w<b;++w){if(c+=s=y[w].value,s<f&&(f=s),s>h&&(h=s),m=c*c*g,(p=Math.max(h/m,m/f))>d){c-=s;break}d=p}v.push(a={value:c,dice:l<u,children:y.slice(_,w)}),a.dice?Oo(a,n,r,i,x?r+=u*c/x:o):qo(a,n,r,x?n+=l*c/x:i,o),x-=c,_=w}return v}var Wo=function t(e){function n(t,n,r,i,o){Bo(e,t,n,r,i,o)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(Uo),zo=function(){var t=Wo,e=!1,n=1,r=1,i=[0],o=Co,a=Co,s=Co,l=Co,u=Co;function c(t){return t.x0=t.y0=0,t.x1=n,t.y1=r,t.eachBefore(f),i=[0],e&&t.eachBefore(Io),t}function f(e){var n=i[e.depth],r=e.x0+n,c=e.y0+n,f=e.x1-n,h=e.y1-n;f<r&&(r=f=(r+f)/2),h<c&&(c=h=(c+h)/2),e.x0=r,e.y0=c,e.x1=f,e.y1=h,e.children&&(n=i[e.depth+1]=o(e)/2,r+=u(e)-n,c+=a(e)-n,(f-=s(e)-n)<r&&(r=f=(r+f)/2),(h-=l(e)-n)<c&&(c=h=(c+h)/2),t(e,r,c,f,h))}return c.round=function(t){return arguments.length?(e=!!t,c):e},c.size=function(t){return arguments.length?(n=+t[0],r=+t[1],c):[n,r]},c.tile=function(e){return arguments.length?(t=Eo(e),c):t},c.padding=function(t){return arguments.length?c.paddingInner(t).paddingOuter(t):c.paddingInner()},c.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:So(+t),c):o},c.paddingOuter=function(t){return arguments.length?c.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):c.paddingTop()},c.paddingTop=function(t){return arguments.length?(a="function"==typeof t?t:So(+t),c):a},c.paddingRight=function(t){return arguments.length?(s="function"==typeof t?t:So(+t),c):s},c.paddingBottom=function(t){return arguments.length?(l="function"==typeof t?t:So(+t),c):l},c.paddingLeft=function(t){return arguments.length?(u="function"==typeof t?t:So(+t),c):u},c};(function t(e){function n(t,n,r,i,o){if((a=t._squarify)&&a.ratio===e)for(var a,s,l,u,c,f=-1,h=a.length,p=t.value;++f<h;){for(l=(s=a[f]).children,u=s.value=0,c=l.length;u<c;++u)s.value+=l[u].value;s.dice?Oo(s,n,r,i,r+=(o-r)*s.value/p):qo(s,n,r,n+=(i-n)*s.value/p,o),p-=s.value}else t._squarify=a=Bo(e,t,n,r,i,o),a.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n})(Uo);var Yo=function(){return Math.random()},Vo=(function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(Yo),function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*e()-1,o=2*e()-1,i=r*r+o*o}while(!i||i>1);return t+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(Yo)),Go=(function t(e){function n(){var t=Vo.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(Yo),function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(Yo));(function t(e){function n(t){var n=Go.source(e)(t);return function(){return n()/t}}return n.source=t,n})(Yo),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(Yo);function $o(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}var Xo=Array.prototype,Ko=Xo.map,Qo=Xo.slice,Zo={name:"implicit"};function Jo(){var t=si(),e=[],n=[],r=Zo;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==Zo)return r;t.set(o,a=e.push(i))}return n[(a-1)%n.length]}return i.domain=function(n){if(!arguments.length)return e.slice();e=[],t=si();for(var r,o,a=-1,s=n.length;++a<s;)t.has(o=(r=n[a])+"")||t.set(o,e.push(r));return i},i.range=function(t){return arguments.length?(n=Qo.call(t),i):n.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Jo(e,n).unknown(r)},$o.apply(i,arguments),i}var ta=function(t){return function(){return t}},ea=function(t){return+t},na=[0,1];function ra(t){return t}function ia(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:ta(isNaN(e)?NaN:.5)}function oa(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function aa(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=ia(i,r),o=n(a,o)):(r=ia(r,i),o=n(o,a)),function(t){return o(r(t))}}function sa(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=ia(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=s(t,e,1,r)-1;return o[n](i[n](e))}}function la(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function ua(){var t,e,n,r,i,o,a=na,s=na,l=nn,u=ra;function c(){return r=Math.min(a.length,s.length)>2?sa:aa,i=o=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),s,l)))(t(u(e)))}return f.invert=function(n){return u(e((o||(o=r(s,a.map(t),Ge)))(n)))},f.domain=function(t){return arguments.length?(a=Ko.call(t,ea),u===ra||(u=oa(a)),c()):a.slice()},f.range=function(t){return arguments.length?(s=Qo.call(t),c()):s.slice()},f.rangeRound=function(t){return s=Qo.call(t),l=rn,c()},f.clamp=function(t){return arguments.length?(u=t?oa(a):ra,f):u!==ra},f.interpolate=function(t){return arguments.length?(l=t,c()):l},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}function ca(t,e){return ua()(t,e)}var fa=function(t,e,n,r){var i,o=_(t,e,n);switch((r=zi(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Bi(e)/3)))-Bi(Math.abs(t)))}(o,a))||(r.precision=i),Xi(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Bi(e)-Bi(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Bi(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return $i(r)};function ha(t){var e=t.domain;return t.ticks=function(t){var n=e();return v(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return fa(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),o=0,a=i.length-1,s=i[o],l=i[a];return l<s&&(r=s,s=l,l=r,r=o,o=a,a=r),(r=y(s,l,n))>0?r=y(s=Math.floor(s/r)*r,l=Math.ceil(l/r)*r,n):r<0&&(r=y(s=Math.ceil(s*r)/r,l=Math.floor(l*r)/r,n)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(l/r)*r,e(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(l*r)/r,e(i)),t},t}function pa(){var t=ca(ra,ra);return t.copy=function(){return la(t,pa())},$o.apply(t,arguments),ha(t)}var da=function(t,e){var n,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(n=r,r=i,i=n,n=o,o=a,a=n),t[r]=e.floor(o),t[i]=e.ceil(a),t};var ga=new Date,ma=new Date;function va(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=function(e){return t(e=new Date(+e)),e},i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,o){var a,s=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return s;do{s.push(a=new Date(+n)),e(n,o),t(n)}while(a<n&&n<r);return s},i.filter=function(n){return va((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(i.count=function(e,r){return ga.setTime(+e),ma.setTime(+r),t(ga),t(ma),Math.floor(n(ga,ma))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var ya=va((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));ya.every=function(t){return isFinite(t=Math.floor(t))&&t>0?va((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var _a=ya,wa=(ya.range,va((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),ba=wa,xa=(wa.range,6e4),Ta=6048e5;function Ea(t){return va((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*xa)/Ta}))}var Ca=Ea(0),Sa=Ea(1),Aa=Ea(2),Na=Ea(3),Da=Ea(4),ka=Ea(5),Ma=Ea(6),Ia=(Ca.range,Sa.range,Aa.range,Na.range,Da.range,ka.range,Ma.range,va((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*xa)/864e5}),(function(t){return t.getDate()-1}))),Oa=Ia,La=(Ia.range,va((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*xa)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()}))),Ra=La,Pa=(La.range,va((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+e*xa)}),(function(t,e){return(e-t)/xa}),(function(t){return t.getMinutes()}))),ja=Pa,Ha=(Pa.range,va((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Fa=Ha,qa=(Ha.range,va((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t})));qa.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?va((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):qa:null};var Ua=qa;qa.range;function Ba(t){return va((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/Ta}))}var Wa=Ba(0),za=Ba(1),Ya=Ba(2),Va=Ba(3),Ga=Ba(4),$a=Ba(5),Xa=Ba(6),Ka=(Wa.range,za.range,Ya.range,Va.range,Ga.range,$a.range,Xa.range,va((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Qa=Ka,Za=(Ka.range,va((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));Za.every=function(t){return isFinite(t=Math.floor(t))&&t>0?va((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var Ja=Za;Za.range;function ts(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function es(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function ns(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var rs,is,os,as={"-":"",_:" ",0:"0"},ss=/^\s*\d+/,ls=/^%/,us=/[\\^$*+?|[\]().{}]/g;function cs(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function fs(t){return t.replace(us,"\\$&")}function hs(t){return new RegExp("^(?:"+t.map(fs).join("|")+")","i")}function ps(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function ds(t,e,n){var r=ss.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function gs(t,e,n){var r=ss.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function ms(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function vs(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function ys(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function _s(t,e,n){var r=ss.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function ws(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function bs(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function xs(t,e,n){var r=ss.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function Ts(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function Es(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Cs(t,e,n){var r=ss.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Ss(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function As(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Ns(t,e,n){var r=ss.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Ds(t,e,n){var r=ss.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function ks(t,e,n){var r=ss.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Ms(t,e,n){var r=ls.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Is(t,e,n){var r=ss.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Os(t,e,n){var r=ss.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function Ls(t,e){return cs(t.getDate(),e,2)}function Rs(t,e){return cs(t.getHours(),e,2)}function Ps(t,e){return cs(t.getHours()%12||12,e,2)}function js(t,e){return cs(1+Oa.count(_a(t),t),e,3)}function Hs(t,e){return cs(t.getMilliseconds(),e,3)}function Fs(t,e){return Hs(t,e)+"000"}function qs(t,e){return cs(t.getMonth()+1,e,2)}function Us(t,e){return cs(t.getMinutes(),e,2)}function Bs(t,e){return cs(t.getSeconds(),e,2)}function Ws(t){var e=t.getDay();return 0===e?7:e}function zs(t,e){return cs(Ca.count(_a(t)-1,t),e,2)}function Ys(t,e){var n=t.getDay();return t=n>=4||0===n?Da(t):Da.ceil(t),cs(Da.count(_a(t),t)+(4===_a(t).getDay()),e,2)}function Vs(t){return t.getDay()}function Gs(t,e){return cs(Sa.count(_a(t)-1,t),e,2)}function $s(t,e){return cs(t.getFullYear()%100,e,2)}function Xs(t,e){return cs(t.getFullYear()%1e4,e,4)}function Ks(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+cs(e/60|0,"0",2)+cs(e%60,"0",2)}function Qs(t,e){return cs(t.getUTCDate(),e,2)}function Zs(t,e){return cs(t.getUTCHours(),e,2)}function Js(t,e){return cs(t.getUTCHours()%12||12,e,2)}function tl(t,e){return cs(1+Qa.count(Ja(t),t),e,3)}function el(t,e){return cs(t.getUTCMilliseconds(),e,3)}function nl(t,e){return el(t,e)+"000"}function rl(t,e){return cs(t.getUTCMonth()+1,e,2)}function il(t,e){return cs(t.getUTCMinutes(),e,2)}function ol(t,e){return cs(t.getUTCSeconds(),e,2)}function al(t){var e=t.getUTCDay();return 0===e?7:e}function sl(t,e){return cs(Wa.count(Ja(t)-1,t),e,2)}function ll(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Ga(t):Ga.ceil(t),cs(Ga.count(Ja(t),t)+(4===Ja(t).getUTCDay()),e,2)}function ul(t){return t.getUTCDay()}function cl(t,e){return cs(za.count(Ja(t)-1,t),e,2)}function fl(t,e){return cs(t.getUTCFullYear()%100,e,2)}function hl(t,e){return cs(t.getUTCFullYear()%1e4,e,4)}function pl(){return"+0000"}function dl(){return"%"}function gl(t){return+t}function ml(t){return Math.floor(+t/1e3)}!function(t){rs=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,s=t.months,l=t.shortMonths,u=hs(i),c=ps(i),f=hs(o),h=ps(o),p=hs(a),d=ps(a),g=hs(s),m=ps(s),v=hs(l),y=ps(l),_={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return l[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:Ls,e:Ls,f:Fs,H:Rs,I:Ps,j:js,L:Hs,m:qs,M:Us,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:gl,s:ml,S:Bs,u:Ws,U:zs,V:Ys,w:Vs,W:Gs,x:null,X:null,y:$s,Y:Xs,Z:Ks,"%":dl},w={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return l[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:Qs,e:Qs,f:nl,H:Zs,I:Js,j:tl,L:el,m:rl,M:il,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:gl,s:ml,S:ol,u:al,U:sl,V:ll,w:ul,W:cl,x:null,X:null,y:fl,Y:hl,Z:pl,"%":dl},b={a:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=h[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=v.exec(e.slice(n));return r?(t.m=y[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.m=m[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return E(t,e,n,r)},d:Es,e:Es,f:ks,H:Ss,I:Ss,j:Cs,L:Ds,m:Ts,M:As,p:function(t,e,n){var r=u.exec(e.slice(n));return r?(t.p=c[r[0].toLowerCase()],n+r[0].length):-1},q:xs,Q:Is,s:Os,S:Ns,u:gs,U:ms,V:vs,w:ds,W:ys,x:function(t,e,r){return E(t,n,e,r)},X:function(t,e,n){return E(t,r,e,n)},y:ws,Y:_s,Z:bs,"%":Ms};function x(t,e){return function(n){var r,i,o,a=[],s=-1,l=0,u=t.length;for(n instanceof Date||(n=new Date(+n));++s<u;)37===t.charCodeAt(s)&&(a.push(t.slice(l,s)),null!=(i=as[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(o=e[r])&&(r=o(n,i)),a.push(r),l=s+1);return a.push(t.slice(l,s)),a.join("")}}function T(t,e){return function(n){var r,i,o=ns(1900,void 0,1);if(E(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(!e||"Z"in o||(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=es(ns(o.y,0,1))).getUTCDay(),r=i>4||0===i?za.ceil(r):za(r),r=Qa.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=ts(ns(o.y,0,1))).getDay(),r=i>4||0===i?Sa.ceil(r):Sa(r),r=Oa.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?es(ns(o.y,0,1)).getUTCDay():ts(ns(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,es(o)):ts(o)}}function E(t,e,n,r){for(var i,o,a=0,s=e.length,l=n.length;a<s;){if(r>=l)return-1;if(37===(i=e.charCodeAt(a++))){if(i=e.charAt(a++),!(o=b[i in as?e.charAt(a++):i])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return(_.x=x(n,_),_.X=x(r,_),_.c=x(e,_),w.x=x(n,w),w.X=x(r,w),w.c=x(e,w),{format:function(t){var e=x(t+="",_);return e.toString=function(){return t},e},parse:function(t){var e=T(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=x(t+="",w);return e.toString=function(){return t},e},utcParse:function(t){var e=T(t+="",!0);return e.toString=function(){return t},e}})}(t),is=rs.format,os=rs.parse,rs.utcFormat,rs.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var vl=1e3,yl=60*vl,_l=60*yl,wl=24*_l,bl=7*wl,xl=30*wl,Tl=365*wl;function El(t){return new Date(t)}function Cl(t){return t instanceof Date?+t:+new Date(+t)}function Sl(t,e,n,r,o,a,s,l,u){var c=ca(ra,ra),f=c.invert,h=c.domain,p=u(".%L"),d=u(":%S"),g=u("%I:%M"),m=u("%I %p"),v=u("%a %d"),y=u("%b %d"),w=u("%B"),b=u("%Y"),x=[[s,1,vl],[s,5,5*vl],[s,15,15*vl],[s,30,30*vl],[a,1,yl],[a,5,5*yl],[a,15,15*yl],[a,30,30*yl],[o,1,_l],[o,3,3*_l],[o,6,6*_l],[o,12,12*_l],[r,1,wl],[r,2,2*wl],[n,1,bl],[e,1,xl],[e,3,3*xl],[t,1,Tl]];function T(i){return(s(i)<i?p:a(i)<i?d:o(i)<i?g:r(i)<i?m:e(i)<i?n(i)<i?v:y:t(i)<i?w:b)(i)}function E(e,n,r,o){if(null==e&&(e=10),"number"==typeof e){var a=Math.abs(r-n)/e,s=i((function(t){return t[2]})).right(x,a);s===x.length?(o=_(n/Tl,r/Tl,e),e=t):s?(o=(s=x[a/x[s-1][2]<x[s][2]/a?s-1:s])[1],e=s[0]):(o=Math.max(_(n,r,e),1),e=l)}return null==o?e:e.every(o)}return c.invert=function(t){return new Date(f(t))},c.domain=function(t){return arguments.length?h(Ko.call(t,Cl)):h().map(El)},c.ticks=function(t,e){var n,r=h(),i=r[0],o=r[r.length-1],a=o<i;return a&&(n=i,i=o,o=n),n=(n=E(t,i,o,e))?n.range(i,o+1):[],a?n.reverse():n},c.tickFormat=function(t,e){return null==e?T:u(e)},c.nice=function(t,e){var n=h();return(t=E(t,n[0],n[n.length-1],e))?h(da(n,t)):c},c.copy=function(){return la(c,Sl(t,e,n,r,o,a,s,l,u))},c}var Al=va((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),Nl=(Al.range,va((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}))),Dl=(Nl.range,va((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+e*xa)}),(function(t,e){return(e-t)/xa}),(function(t){return t.getUTCMinutes()})));Dl.range;var kl=function(t){return function(){return t}},Ml=Math.abs,Il=Math.atan2,Ol=Math.cos,Ll=Math.max,Rl=Math.min,Pl=Math.sin,jl=Math.sqrt,Hl=1e-12,Fl=Math.PI,ql=Fl/2,Ul=2*Fl;function Bl(t){return t>=1?ql:t<=-1?-ql:Math.asin(t)}function Wl(t){return t.innerRadius}function zl(t){return t.outerRadius}function Yl(t){return t.startAngle}function Vl(t){return t.endAngle}function Gl(t){return t&&t.padAngle}function $l(t,e,n,r,i,o,a){var s=t-n,l=e-r,u=(a?o:-o)/jl(s*s+l*l),c=u*l,f=-u*s,h=t+c,p=e+f,d=n+c,g=r+f,m=(h+d)/2,v=(p+g)/2,y=d-h,_=g-p,w=y*y+_*_,b=i-o,x=h*g-d*p,T=(_<0?-1:1)*jl(Ll(0,b*b*w-x*x)),E=(x*_-y*T)/w,C=(-x*y-_*T)/w,S=(x*_+y*T)/w,A=(-x*y+_*T)/w,N=E-m,D=C-v,k=S-m,M=A-v;return N*N+D*D>k*k+M*M&&(E=S,C=A),{cx:E,cy:C,x01:-c,y01:-f,x11:E*(i/b-1),y11:C*(i/b-1)}}var Xl=function(){var t=Wl,e=zl,n=kl(0),r=null,i=Yl,o=Vl,a=Gl,s=null;function l(){var l,u,c,f=+t.apply(this,arguments),h=+e.apply(this,arguments),p=i.apply(this,arguments)-ql,d=o.apply(this,arguments)-ql,g=Ml(d-p),m=d>p;if(s||(s=l=ii()),h<f&&(u=h,h=f,f=u),h>Hl)if(g>Ul-Hl)s.moveTo(h*Ol(p),h*Pl(p)),s.arc(0,0,h,p,d,!m),f>Hl&&(s.moveTo(f*Ol(d),f*Pl(d)),s.arc(0,0,f,d,p,m));else{var v,y,_=p,w=d,b=p,x=d,T=g,E=g,C=a.apply(this,arguments)/2,S=C>Hl&&(r?+r.apply(this,arguments):jl(f*f+h*h)),A=Rl(Ml(h-f)/2,+n.apply(this,arguments)),N=A,D=A;if(S>Hl){var k=Bl(S/f*Pl(C)),M=Bl(S/h*Pl(C));(T-=2*k)>Hl?(b+=k*=m?1:-1,x-=k):(T=0,b=x=(p+d)/2),(E-=2*M)>Hl?(_+=M*=m?1:-1,w-=M):(E=0,_=w=(p+d)/2)}var I=h*Ol(_),O=h*Pl(_),L=f*Ol(x),R=f*Pl(x);if(A>Hl){var P,j=h*Ol(w),H=h*Pl(w),F=f*Ol(b),q=f*Pl(b);if(g<Fl&&(P=function(t,e,n,r,i,o,a,s){var l=n-t,u=r-e,c=a-i,f=s-o,h=f*l-c*u;if(!(h*h<Hl))return[t+(h=(c*(e-o)-f*(t-i))/h)*l,e+h*u]}(I,O,F,q,j,H,L,R))){var U=I-P[0],B=O-P[1],W=j-P[0],z=H-P[1],Y=1/Pl(((c=(U*W+B*z)/(jl(U*U+B*B)*jl(W*W+z*z)))>1?0:c<-1?Fl:Math.acos(c))/2),V=jl(P[0]*P[0]+P[1]*P[1]);N=Rl(A,(f-V)/(Y-1)),D=Rl(A,(h-V)/(Y+1))}}E>Hl?D>Hl?(v=$l(F,q,I,O,h,D,m),y=$l(j,H,L,R,h,D,m),s.moveTo(v.cx+v.x01,v.cy+v.y01),D<A?s.arc(v.cx,v.cy,D,Il(v.y01,v.x01),Il(y.y01,y.x01),!m):(s.arc(v.cx,v.cy,D,Il(v.y01,v.x01),Il(v.y11,v.x11),!m),s.arc(0,0,h,Il(v.cy+v.y11,v.cx+v.x11),Il(y.cy+y.y11,y.cx+y.x11),!m),s.arc(y.cx,y.cy,D,Il(y.y11,y.x11),Il(y.y01,y.x01),!m))):(s.moveTo(I,O),s.arc(0,0,h,_,w,!m)):s.moveTo(I,O),f>Hl&&T>Hl?N>Hl?(v=$l(L,R,j,H,f,-N,m),y=$l(I,O,F,q,f,-N,m),s.lineTo(v.cx+v.x01,v.cy+v.y01),N<A?s.arc(v.cx,v.cy,N,Il(v.y01,v.x01),Il(y.y01,y.x01),!m):(s.arc(v.cx,v.cy,N,Il(v.y01,v.x01),Il(v.y11,v.x11),!m),s.arc(0,0,f,Il(v.cy+v.y11,v.cx+v.x11),Il(y.cy+y.y11,y.cx+y.x11),m),s.arc(y.cx,y.cy,N,Il(y.y11,y.x11),Il(y.y01,y.x01),!m))):s.arc(0,0,f,x,b,m):s.lineTo(L,R)}else s.moveTo(0,0);if(s.closePath(),l)return s=null,l+""||null}return l.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-Fl/2;return[Ol(r)*n,Pl(r)*n]},l.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:kl(+e),l):t},l.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:kl(+t),l):e},l.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:kl(+t),l):n},l.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:kl(+t),l):r},l.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:kl(+t),l):i},l.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:kl(+t),l):o},l.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:kl(+t),l):a},l.context=function(t){return arguments.length?(s=null==t?null:t,l):s},l};function Kl(t){this._context=t}Kl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Ql=function(t){return new Kl(t)};var Zl=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},Jl=function(t){return t},tu=function(){var t=Jl,e=Zl,n=null,r=kl(0),i=kl(Ul),o=kl(0);function a(a){var s,l,u,c,f,h=a.length,p=0,d=new Array(h),g=new Array(h),m=+r.apply(this,arguments),v=Math.min(Ul,Math.max(-Ul,i.apply(this,arguments)-m)),y=Math.min(Math.abs(v)/h,o.apply(this,arguments)),_=y*(v<0?-1:1);for(s=0;s<h;++s)(f=g[d[s]=s]=+t(a[s],s,a))>0&&(p+=f);for(null!=e?d.sort((function(t,n){return e(g[t],g[n])})):null!=n&&d.sort((function(t,e){return n(a[t],a[e])})),s=0,u=p?(v-h*_)/p:0;s<h;++s,m=c)l=d[s],c=m+((f=g[l])>0?f*u:0)+_,g[l]={data:a[l],index:s,value:f,startAngle:m,endAngle:c,padAngle:y};return g}return a.value=function(e){return arguments.length?(t="function"==typeof e?e:kl(+e),a):t},a.sortValues=function(t){return arguments.length?(e=t,n=null,a):e},a.sort=function(t){return arguments.length?(n=t,e=null,a):n},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:kl(+t),a):r},a.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:kl(+t),a):i},a.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:kl(+t),a):o},a};nu(Ql);function eu(t){this._curve=t}function nu(t){function e(e){return new eu(t(e))}return e._curve=t,e}eu.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var ru=Math.sin(Fl/10)/Math.sin(7*Fl/10),iu=(Math.sin(Ul/10),Math.cos(Ul/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function ou(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function au(t){this._context=t}au.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:ou(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:ou(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function su(t){this._context=t}su.prototype={areaStart:iu,areaEnd:iu,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:ou(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function lu(t){this._context=t}lu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:ou(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function uu(t,e){this._basis=new au(t),this._beta=e}uu.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,i=t[0],o=e[0],a=t[n]-i,s=e[n]-o,l=-1;++l<=n;)r=l/n,this._basis.point(this._beta*t[l]+(1-this._beta)*(i+r*a),this._beta*e[l]+(1-this._beta)*(o+r*s));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};(function t(e){function n(t){return 1===e?new au(t):new uu(t,e)}return n.beta=function(e){return t(+e)},n})(.85);function cu(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function fu(t,e){this._context=t,this._k=(1-e)/6}fu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:cu(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:cu(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new fu(t,e)}return n.tension=function(e){return t(+e)},n})(0);function hu(t,e){this._context=t,this._k=(1-e)/6}hu.prototype={areaStart:iu,areaEnd:iu,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:cu(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new hu(t,e)}return n.tension=function(e){return t(+e)},n})(0);function pu(t,e){this._context=t,this._k=(1-e)/6}pu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:cu(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new pu(t,e)}return n.tension=function(e){return t(+e)},n})(0);function du(t,e,n){var r=t._x1,i=t._y1,o=t._x2,a=t._y2;if(t._l01_a>Hl){var s=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,l=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*s-t._x0*t._l12_2a+t._x2*t._l01_2a)/l,i=(i*s-t._y0*t._l12_2a+t._y2*t._l01_2a)/l}if(t._l23_a>Hl){var u=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*u+t._x1*t._l23_2a-e*t._l12_2a)/c,a=(a*u+t._y1*t._l23_2a-n*t._l12_2a)/c}t._context.bezierCurveTo(r,i,o,a,t._x2,t._y2)}function gu(t,e){this._context=t,this._alpha=e}gu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:du(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new gu(t,e):new fu(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function mu(t,e){this._context=t,this._alpha=e}mu.prototype={areaStart:iu,areaEnd:iu,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:du(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new mu(t,e):new hu(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function vu(t,e){this._context=t,this._alpha=e}vu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:du(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new vu(t,e):new pu(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function yu(t){this._context=t}yu.prototype={areaStart:iu,areaEnd:iu,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};function _u(t){return t<0?-1:1}function wu(t,e,n){var r=t._x1-t._x0,i=e-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(n-t._y1)/(i||r<0&&-0),s=(o*i+a*r)/(r+i);return(_u(o)+_u(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(s))||0}function bu(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function xu(t,e,n){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,s=(o-r)/3;t._context.bezierCurveTo(r+s,i+s*e,o-s,a-s*n,o,a)}function Tu(t){this._context=t}function Eu(t){this._context=new Cu(t)}function Cu(t){this._context=t}function Su(t){this._context=t}function Au(t){var e,n,r=t.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=t[0]+2*t[1],e=1;e<r-1;++e)i[e]=1,o[e]=4,a[e]=4*t[e]+2*t[e+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=i[e]/o[e-1],o[e]-=n,a[e]-=n*a[e-1];for(i[r-1]=a[r-1]/o[r-1],e=r-2;e>=0;--e)i[e]=(a[e]-i[e+1])/o[e];for(o[r-1]=(t[r]+i[r-1])/2,e=0;e<r-1;++e)o[e]=2*t[e+1]-i[e+1];return[i,o]}Tu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:xu(this,this._t0,bu(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,xu(this,bu(this,n=wu(this,t,e)),n);break;default:xu(this,this._t0,n=wu(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(Eu.prototype=Object.create(Tu.prototype)).point=function(t,e){Tu.prototype.point.call(this,e,t)},Cu.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,o){this._context.bezierCurveTo(e,t,r,n,o,i)}},Su.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=Au(t),i=Au(e),o=0,a=1;a<n;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[a],e[a]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};function Nu(t,e){this._context=t,this._t=e}Nu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};function Du(){this._=null}function ku(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Mu(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Iu(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Ou(t){for(;t.L;)t=t.L;return t}Du.prototype={constructor:Du,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Ou(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(Mu(this,n),n=(t=n).U),n.C=!1,r.C=!0,Iu(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(Iu(this,n),n=(t=n).U),n.C=!1,r.C=!0,Mu(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,a=t.R;if(n=o?a?Ou(a):o:a,i?i.L===t?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=a,a.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,Mu(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,Iu(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,Mu(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,Iu(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,Mu(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,Iu(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Lu=Du;function Ru(t,e,n,r){var i=[null,null],o=oc.push(i)-1;return i.left=t,i.right=e,n&&ju(i,t,e,n),r&&ju(i,e,t,r),rc[t.index].halfedges.push(o),rc[e.index].halfedges.push(o),i}function Pu(t,e,n){var r=[e,n];return r.left=t,r}function ju(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function Hu(t,e,n,r,i){var o,a=t[0],s=t[1],l=a[0],u=a[1],c=0,f=1,h=s[0]-l,p=s[1]-u;if(o=e-l,h||!(o>0)){if(o/=h,h<0){if(o<c)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>c&&(c=o)}if(o=r-l,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>c&&(c=o)}else if(h>0){if(o<c)return;o<f&&(f=o)}if(o=n-u,p||!(o>0)){if(o/=p,p<0){if(o<c)return;o<f&&(f=o)}else if(p>0){if(o>f)return;o>c&&(c=o)}if(o=i-u,p||!(o<0)){if(o/=p,p<0){if(o>f)return;o>c&&(c=o)}else if(p>0){if(o<c)return;o<f&&(f=o)}return!(c>0||f<1)||(c>0&&(t[0]=[l+c*h,u+c*p]),f<1&&(t[1]=[l+f*h,u+f*p]),!0)}}}}}function Fu(t,e,n,r,i){var o=t[1];if(o)return!0;var a,s,l=t[0],u=t.left,c=t.right,f=u[0],h=u[1],p=c[0],d=c[1],g=(f+p)/2,m=(h+d)/2;if(d===h){if(g<e||g>=r)return;if(f>p){if(l){if(l[1]>=i)return}else l=[g,n];o=[g,i]}else{if(l){if(l[1]<n)return}else l=[g,i];o=[g,n]}}else if(s=m-(a=(f-p)/(d-h))*g,a<-1||a>1)if(f>p){if(l){if(l[1]>=i)return}else l=[(n-s)/a,n];o=[(i-s)/a,i]}else{if(l){if(l[1]<n)return}else l=[(i-s)/a,i];o=[(n-s)/a,n]}else if(h<d){if(l){if(l[0]>=r)return}else l=[e,a*e+s];o=[r,a*r+s]}else{if(l){if(l[0]<e)return}else l=[r,a*r+s];o=[e,a*e+s]}return t[0]=l,t[1]=o,!0}function qu(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Uu(t,e){return e[+(e.left!==t.site)]}function Bu(t,e){return e[+(e.left===t.site)]}var Wu,zu=[];function Yu(){ku(this),this.x=this.y=this.arc=this.site=this.cy=null}function Vu(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var a=i[0],s=i[1],l=r[0]-a,u=r[1]-s,c=o[0]-a,f=o[1]-s,h=2*(l*f-u*c);if(!(h>=-sc)){var p=l*l+u*u,d=c*c+f*f,g=(f*p-u*d)/h,m=(l*d-c*p)/h,v=zu.pop()||new Yu;v.arc=t,v.site=i,v.x=g+a,v.y=(v.cy=m+s)+Math.sqrt(g*g+m*m),t.circle=v;for(var y=null,_=ic._;_;)if(v.y<_.y||v.y===_.y&&v.x<=_.x){if(!_.L){y=_.P;break}_=_.L}else{if(!_.R){y=_;break}_=_.R}ic.insert(y,v),y||(Wu=v)}}}}function Gu(t){var e=t.circle;e&&(e.P||(Wu=e.N),ic.remove(e),zu.push(e),ku(e),t.circle=null)}var $u=[];function Xu(){ku(this),this.edge=this.site=this.circle=null}function Ku(t){var e=$u.pop()||new Xu;return e.site=t,e}function Qu(t){Gu(t),nc.remove(t),$u.push(t),ku(t)}function Zu(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],o=t.P,a=t.N,s=[t];Qu(t);for(var l=o;l.circle&&Math.abs(n-l.circle.x)<ac&&Math.abs(r-l.circle.cy)<ac;)o=l.P,s.unshift(l),Qu(l),l=o;s.unshift(l),Gu(l);for(var u=a;u.circle&&Math.abs(n-u.circle.x)<ac&&Math.abs(r-u.circle.cy)<ac;)a=u.N,s.push(u),Qu(u),u=a;s.push(u),Gu(u);var c,f=s.length;for(c=1;c<f;++c)u=s[c],l=s[c-1],ju(u.edge,l.site,u.site,i);l=s[0],(u=s[f-1]).edge=Ru(l.site,u.site,null,i),Vu(l),Vu(u)}function Ju(t){for(var e,n,r,i,o=t[0],a=t[1],s=nc._;s;)if((r=tc(s,a)-o)>ac)s=s.L;else{if(!((i=o-ec(s,a))>ac)){r>-ac?(e=s.P,n=s):i>-ac?(e=s,n=s.N):e=n=s;break}if(!s.R){e=s;break}s=s.R}!function(t){rc[t.index]={site:t,halfedges:[]}}(t);var l=Ku(t);if(nc.insert(e,l),e||n){if(e===n)return Gu(e),n=Ku(e.site),nc.insert(l,n),l.edge=n.edge=Ru(e.site,l.site),Vu(e),void Vu(n);if(n){Gu(e),Gu(n);var u=e.site,c=u[0],f=u[1],h=t[0]-c,p=t[1]-f,d=n.site,g=d[0]-c,m=d[1]-f,v=2*(h*m-p*g),y=h*h+p*p,_=g*g+m*m,w=[(m*y-p*_)/v+c,(h*_-g*y)/v+f];ju(n.edge,u,d,w),l.edge=Ru(u,t,null,w),n.edge=Ru(t,d,null,w),Vu(e),Vu(n)}else l.edge=Ru(e.site,l.site)}}function tc(t,e){var n=t.site,r=n[0],i=n[1],o=i-e;if(!o)return r;var a=t.P;if(!a)return-1/0;var s=(n=a.site)[0],l=n[1],u=l-e;if(!u)return s;var c=s-r,f=1/o-1/u,h=c/u;return f?(-h+Math.sqrt(h*h-2*f*(c*c/(-2*u)-l+u/2+i-o/2)))/f+r:(r+s)/2}function ec(t,e){var n=t.N;if(n)return tc(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var nc,rc,ic,oc,ac=1e-6,sc=1e-12;function lc(t,e){return e[1]-t[1]||e[0]-t[0]}function uc(t,e){var n,r,i,o=t.sort(lc).pop();for(oc=[],rc=new Array(t.length),nc=new Lu,ic=new Lu;;)if(i=Wu,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(Ju(o),n=o[0],r=o[1]),o=t.pop();else{if(!i)break;Zu(i.arc)}if(function(){for(var t,e,n,r,i=0,o=rc.length;i<o;++i)if((t=rc[i])&&(r=(e=t.halfedges).length)){var a=new Array(r),s=new Array(r);for(n=0;n<r;++n)a[n]=n,s[n]=qu(t,oc[e[n]]);for(a.sort((function(t,e){return s[e]-s[t]})),n=0;n<r;++n)s[n]=e[a[n]];for(n=0;n<r;++n)e[n]=s[n]}}(),e){var a=+e[0][0],s=+e[0][1],l=+e[1][0],u=+e[1][1];!function(t,e,n,r){for(var i,o=oc.length;o--;)Fu(i=oc[o],t,e,n,r)&&Hu(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>ac||Math.abs(i[0][1]-i[1][1])>ac)||delete oc[o]}(a,s,l,u),function(t,e,n,r){var i,o,a,s,l,u,c,f,h,p,d,g,m=rc.length,v=!0;for(i=0;i<m;++i)if(o=rc[i]){for(a=o.site,s=(l=o.halfedges).length;s--;)oc[l[s]]||l.splice(s,1);for(s=0,u=l.length;s<u;)d=(p=Bu(o,oc[l[s]]))[0],g=p[1],f=(c=Uu(o,oc[l[++s%u]]))[0],h=c[1],(Math.abs(d-f)>ac||Math.abs(g-h)>ac)&&(l.splice(s,0,oc.push(Pu(a,p,Math.abs(d-t)<ac&&r-g>ac?[t,Math.abs(f-t)<ac?h:r]:Math.abs(g-r)<ac&&n-d>ac?[Math.abs(h-r)<ac?f:n,r]:Math.abs(d-n)<ac&&g-e>ac?[n,Math.abs(f-n)<ac?h:e]:Math.abs(g-e)<ac&&d-t>ac?[Math.abs(h-e)<ac?f:t,e]:null))-1),++u);u&&(v=!1)}if(v){var y,_,w,b=1/0;for(i=0,v=null;i<m;++i)(o=rc[i])&&(w=(y=(a=o.site)[0]-t)*y+(_=a[1]-e)*_)<b&&(b=w,v=o);if(v){var x=[t,e],T=[t,r],E=[n,r],C=[n,e];v.halfedges.push(oc.push(Pu(a=v.site,x,T))-1,oc.push(Pu(a,T,E))-1,oc.push(Pu(a,E,C))-1,oc.push(Pu(a,C,x))-1)}}for(i=0;i<m;++i)(o=rc[i])&&(o.halfedges.length||delete rc[i])}(a,s,l,u)}this.edges=oc,this.cells=rc,nc=ic=oc=rc=null}uc.prototype={constructor:uc,polygons:function(){var t=this.edges;return this.cells.map((function(e){var n=e.halfedges.map((function(n){return Uu(e,t[n])}));return n.data=e.site.data,n}))},triangles:function(){var t=[],e=this.edges;return this.cells.forEach((function(n,r){if(o=(i=n.halfedges).length)for(var i,o,a,s,l,u,c=n.site,f=-1,h=e[i[o-1]],p=h.left===c?h.right:h.left;++f<o;)a=p,p=(h=e[i[f]]).left===c?h.right:h.left,a&&p&&r<a.index&&r<p.index&&(l=a,u=p,((s=c)[0]-u[0])*(l[1]-s[1])-(s[0]-l[0])*(u[1]-s[1])<0)&&t.push([c.data,a.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,e,n){for(var r,i,o=this,a=o._found||0,s=o.cells.length;!(i=o.cells[a]);)if(++a>=s)return null;var l=t-i.site[0],u=e-i.site[1],c=l*l+u*u;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(n){var r=o.edges[n],s=r.left;if(s!==i.site&&s||(s=r.right)){var l=t-s[0],u=e-s[1],f=l*l+u*u;f<c&&(c=f,a=s.index)}}))}while(null!==a);return o._found=r,null==n||c<=n*n?i.site:null}};function cc(t,e,n){this.k=t,this.x=e,this.y=n}cc.prototype={constructor:cc,scale:function(t){return 1===t?this:new cc(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new cc(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new cc(1,0,0);cc.prototype;var fc=n(2),hc=n.n(fc);var pc={DARK_BG:"#333333",LIGHTER_BG:"#5F5F5F",LIGHT_GREY:"#ACACAC",TITLE_WHITE:"#DADADA",TEAL:"#00C89D",SELECTION_GREEN:"#A0C29E",TED_RED:"#E62B1E",BRIGHT_GREEN:"#13B100",BRIGHT_RED:"#B10007",BRIGHT_ORANGE:"#B17D00"};function dc(t){return"function"==typeof t?t:function(){return t}}var gc=function(){function t(){const t=ne(document.createElement("div"));return t.style("position","absolute").style("top",0).style("opacity",0).style("pointer-events","none").style("box-sizing","border-box"),t.node()}let e="n",n=[0,0],r=" ",i=t(),o=null,a=null,s=null;function l(t){var e;null!=t.node()&&(o="svg"===(e=(e=t).node()).tagName.toLowerCase()?e:e.ownerSVGElement,a=o.createSVGPoint(),document.body.appendChild(i))}function u(){return null==i&&(i=t(),document.body.appendChild(i)),ne(i)}function c(){let t=s||Wt.target;for(;void 0===t.getScreenCTM&&"undefined"===t.parentNode;)t=t.parentNode;const e=t.getScreenCTM(),n=t.getBBox(),r=n.width,i=n.height,o=n.y,l={nw:a.matrixTransform(e),ne:a.matrixTransform(e),se:a.matrixTransform(e),w:a.matrixTransform(e),e:a.matrixTransform(e),n:a.matrixTransform(e),s:a.matrixTransform(e),sw:a.matrixTransform(e)};return a.x=n.x,a.y=o,l.nw=a.matrixTransform(e),a.x+=r,l.nw=a.matrixTransform(e),a.y+=i,l.se=a.matrixTransform(e),a.x-=r,l.nw=a.matrixTransform(e),a.y-=i/2,l.w=a.matrixTransform(e),a.x+=r,l.e=a.matrixTransform(e),a.x-=r/2,a.y-=i/2,l.n=a.matrixTransform(e),a.y+=i,l.s=a.matrixTransform(e),l}const f={n:function(){const t=c();return{top:t.n.y-i.offsetHeight,left:t.n.x-i.offsetWidth/2}},s:function(){const t=c();return{top:t.s.y,left:t.s.x-i.offsetWidth/2}},e:function(){const t=c();return{top:t.e.y-i.offsetHeight/2,left:t.e.x}},w:function(){const t=c();return{top:t.w.y-i.offsetHeight/2,left:t.w.x-i.offsetWidth}},nw:function(){const t=c();return{top:t.nw.y-i.offsetHeight,left:t.nw.x-i.offsetWidth}},ne:function(){const t=c();return{top:t.ne.y-i.offsetHeight,left:t.ne.x}},sw:function(){const t=c();return{top:t.sw.y,left:t.sw.x-i.offsetWidth}},se:function(){const t=c();return{top:t.se.y,left:t.e.x}}},h=Object.keys(f);return l.show=function(){const t=Array.prototype.slice.call(arguments);t[t.length-1]instanceof SVGElement&&(s=t.pop());const i=r.apply(this,t),o=n,a=e,c=u();let p=h.length;const d=document.documentElement.scrollTop||document.body.scrollTop,g=document.documentElement.scrollLeft||document.body.scrollLeft;for(c.html(i).style("position","absolute").style("opacity",1).style("pointer-events","all");p--;)c.classed(h[p],!1);let m;switch(a){case"n":m=f.n.apply(this);break;case"s":m=f.s.apply(this);break;case"e":m=f.e.apply(this);break;case"w":m=f.w.apply(this);break;case"nw":m=f.nw.apply(this);break;case"sw":m=f.sw.apply(this);break;case"ne":m=f.ne.apply(this);break;case"se":m=f.se.apply(this)}return c.classed(a,!0).style("top",m.top+o[0]+d+"px").style("left",m.left+o[1]+g+"px"),l},l.hide=function(){return u().style("opacity",0).style("pointer-events","none"),l},l.attr=function(t,e){if(arguments.length<2&&"string"==typeof t)return u().attr(t);{const t=Array.prototype.slice.call(arguments);ee.prototype.attr.apply(u(),t)}return l},l.style=function(t,e){if(arguments.length<2&&"string"==typeof t)return u().style(t);{const t=Array.prototype.slice.call(arguments);if(1===t.length){const e=t[0];Object.keys(e).forEach((function(t){return ee.prototype.style.apply(u(),[t,e[t]])}))}}return l},l.direction=function(t){return arguments.length?(e=null==t?t:dc(t),l):e},l.offset=function(t){return arguments.length?(n=null==t?t:dc(t),l):n},l.html=function(t){return arguments.length?(r=null==t?t:dc(t),l):r},l.destroy=function(){return i&&(u().remove(),i=null),l},l},mc=function(t,e){const n=10,r=80,i=800-r-30,o=500-n-80;t.attr("viewBox","0 0 800 500");const a=t.append("g");a.attr("transform","translate("+r+","+n+")");const s=os("%s"),u=l(e,t=>s(t.film_date)),c=function(){return $o.apply(Sl(_a,ba,Ca,Oa,Ra,ja,Fa,Ua,is).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}().domain(u).range([0,i]),f=P(c).tickFormat(is("%Y"));a.append("g").attr("transform","translate(0,"+o+")").call(f);const h=l(e,t=>+t.views),p=pa().domain(h).range([o,0]);a.append("g").call(j(p).tickFormat($i("~s")));const d=gc().attr("class","d3-tip").html((function(t){return`${t.name}: ${t.views} views`}));a.selectAll("circle").data(e).enter().append("circle").attr("transform",(function(t){return"translate("+c(s(t.film_date))+","+p(+t.views)+")"})).attr("r",2).style("opacity","0.75").style("fill",pc.TEAL).call(d).on("mouseover",d.show).on("mouseout",d.hide),a.append("text").attr("transform","translate(-50, 250) rotate(-90)").attr("fill",pc.TITLE_WHITE).text("Number of Views"),a.append("text").attr("transform","translate(320, 450)").attr("fill",pc.TITLE_WHITE).text("Year")};var vc=function(t,e){const n=10,r=80,i=800-r-30,o=500-n-80;t.append("h2").text("What Do TED Talkers Do For a Living?"),t.append("hr").attr("color",pc.LIGHT_GREY);const a=t.append("select").attr("id","viewSelect");a.append("option").text("Circle Packing").attr("value","Circle Packing"),a.append("option").text("Treemap").attr("value","Treemap"),a.on("change",(function(){const t=ne("#viewSelect"),e=t._groups[0][0].options[t._groups[0][0].selectedIndex].value;console.log(e),"Circle Packing"==e?(oe(".circlePackNode").style("opacity","1"),oe(".treemapNode").style("opacity","0")):(oe(".circlePackNode").style("opacity","0"),oe(".treemapNode").style("opacity","1"))}));const s=t.append("svg").attr("id","professionsView");s.attr("viewBox","0 0 800 500"),s.append("g").attr("transform","translate("+r+","+n+")");const l=function(){var t=jo,e=Ho;function n(n){var r,i,o,a,s,l,u,c=n.length,f=new Array(c),h={};for(i=0;i<c;++i)r=n[i],s=f[i]=new so(r),null!=(l=t(r,i,n))&&(l+="")&&(h[u=Lo+(s.id=l)]=u in h?Po:s);for(i=0;i<c;++i)if(s=f[i],null!=(l=e(n[i],i,n))&&(l+="")){if(!(a=h[Lo+l]))throw new Error("missing: "+l);if(a===Po)throw new Error("ambiguous: "+l);a.children?a.children.push(s):a.children=[s],s.parent=a}else{if(o)throw new Error("multiple roots");o=s}if(!o)throw new Error("no root");if(o.parent=Ro,o.eachBefore((function(t){t.depth=t.parent.depth+1,--c})).eachBefore(ao),o.parent=null,c>0)throw new Error("cycle");return o}return n.id=function(e){return arguments.length?(t=Eo(e),n):t},n.parentId=function(t){return arguments.length?(e=Eo(t),n):e},n}().id(t=>t.profession).parentId(t=>"Root"!=t.profession?"Root":"")(e).sum(t=>+t.count).sort((t,e)=>+e.data.count-+t.data.count);!function(t,e,n,r){const i=No().size([n,r]).padding(3)(e),o=t.selectAll(".circlePackNode").data(i.leaves()).enter().append("g").attr("transform",t=>`translate(${t.x+1},${t.y+1})`).attr("class","circlePackNode").style("opacity","1");o.append("circle").attr("r",t=>t.r).attr("fill",pc.TED_RED).attr("stroke",pc.LIGHT_GREY).attr("stroke-weight",5),o.append("text").text(t=>t.data.profession).style("font-size","1px").each((function(t){const e=this.getBBox(),n=this.parentNode.getBBox();t.data.scale=Math.min(n.width/e.width,n.height/e.height)})).style("font-size",(function(t){return t.data.scale+"px"})).attr("fill",pc.LIGHT_GREY).attr("class","professionLabel")}(s,l,800,500-2*n),function(t,e,n,r){const i=zo().size([n,r]).padding(3)(e),o=t.selectAll(".treemapNode").data(i.leaves()).enter().append("g").attr("transform",t=>`translate(${t.x0+1},${t.y0+1})`).attr("class","treemapNode").style("opacity","0");o.append("rect").attr("width",t=>t.x1-t.x0).attr("height",t=>t.y1-t.y0).attr("fill",pc.LIGHT_GREY).attr("stroke",pc.LIGHTER_BG).attr("stroke-weight",5),o.append("text").text(t=>t.data.profession).style("font-size","1px").each((function(t){const e=this.getBBox(),n=this.parentNode.getBBox();t.data.scale=Math.min(n.width/e.width,n.height/e.height)})).style("font-size",(function(t){return t.data.scale+"px"})).attr("fill",pc.DARK_BG).attr("transform",t=>"translate("+(t.x1-t.x0)/2+","+(t.y1-t.y0)/2+")").attr("class","professionLabel")}(s,l,i,o)},yc=function(t){return"./images/icon_svgs/icon_"+(t=t.toLowerCase())+".svg"};console.log(hc.a);const _c=ne("svg.figure1"),wc=ne("svg.figure2"),bc=ne("svg.figure3"),xc=ne("div.figure4"),Tc=ne("div.ratingsDiv");ne("div.topicsDiv");Di("./data/ted_main_grouped_professions.csv").then(t=>{!function(t){t.forEach(t=>{const e=new Date(1e3*parseInt(t.film_date,10));t.year=e.getFullYear().toString()})}(t),function(t,e){const n=10,r=80,i=800-r-30,o=500-n-80;t.attr("viewBox","0 0 800 500");const a=t.append("g");a.attr("transform","translate("+r+","+n+")");const s=l(e,t=>parseInt(t.year,10)),u=pa().domain(s).range([0,i]);a.append("g").attr("transform","translate(0,"+o+")").call(P(u).tickFormat($i("d")));const c=b().domain(u.domain()).thresholds(u.ticks(s[1]-s[0]))(e.map(t=>parseInt(t.year,10))),f=pa().domain([0,x(c,t=>t.length)]).range([o,0]);a.append("g").call(j(f)),a.selectAll("rect").data(c).enter().append("rect").attr("x",1).attr("transform",(function(t){return"translate("+u(t.x0)+","+f(t.length)+")"})).attr("width",(function(t){return u(t.x1)-u(t.x0)-1})).attr("height",(function(t){return o-f(t.length)})).style("fill",pc.TED_RED),a.append("text").attr("transform","translate(-50, 250) rotate(-90)").attr("fill",pc.TITLE_WHITE).text("Number of talks"),a.append("text").attr("transform","translate(320, 450)").attr("fill",pc.TITLE_WHITE).text("Year")}(_c,t),mc(wc,t),function(t,e){const n={top:10,right:30,bottom:80,left:80},r=800,i=r-n.left-n.right,o=500-n.top-n.bottom,a=r/30,s=.8*a,u=s,c=(a-s)/2,f=.22*o,h=.78*f;function p(){const t=ne("#talkSelector"),i=t._groups[0][0].options[t._groups[0][0].selectedIndex].value;let p=0;for(let t=0;t<e.length;t++)if(e[t].name==i){p=t;break}const d=e[p].ratings.replace(/'/g,'"'),g=JSON.parse(d);g.sort((function(t,e){return+e.count-+t.count}));const m=g.length,v=(r-s*m)/(m+1),y=l(g,t=>+t.count),_=ne("#ratingsIconBarGroup"),w=pa().domain([0,y[1]]).range([0,o-s/2]),b=gc().attr("class","d3-tip").html((function(t){return`${t.name}: ${t.count}`})),x=_.selectAll(".ratingsG").data(g,t=>t.name),T=x.enter().append("g").attr("class","ratingsG").call(b).on("mouseover",b.show).on("mouseout",b.hide);T.append("path").attr("class","ratingBar").attr("fill",(function(t){switch(t.name.toLowerCase()){case"confusing":case"longwinded":case"unconvincing":return pc.BRIGHT_RED;case"obnoxious":case"ok":return pc.BRIGHT_ORANGE;default:return pc.BRIGHT_GREEN}})),T.append("image").attr("class","icon-image").attr("href",t=>yc(t.name)).attr("width",s).attr("height",s).attr("transform","translate(0,"+c+")"),x.merge(T).transition().duration(750).attr("transform",(t,e)=>"translate("+(v*(e+1)+s*e)+",0)").select(".ratingBar").attr("d",(function(t){const e=w(+t.count);return function(t,e,n,r,i){let o="M"+t+","+e+"v"+(-r+i);return o+="a"+i+","+i+" 0 0 1 "+i+","+-i,o+="h"+(n-2*i),o+="a"+i+","+i+" 0 0 1 "+i+","+i,o+="v"+(r-i)+"z"}(0,0,u,e,a/6)}));const E={good:0,bad:0,ok:0};for(let t=0;t<g.length;t++)switch(g[t].name.toLowerCase()){case"confusing":case"longwinded":case"unconvincing":E.bad+=+g[t].count;break;case"obnoxious":case"ok":E.ok+=+g[t].count;break;default:E.good+=+g[t].count}const C=E.good+E.bad+E.ok,S=gc().attr("class","d3-tip").html(t=>`${t.data.key.toUpperCase()}: ${(+t.data.value/t.voteTotal*100).toFixed(1)}%`),A=Jo().domain(["good","bad","ok"]).range([pc.BRIGHT_GREEN,pc.BRIGHT_RED,pc.BRIGHT_ORANGE]),N=tu().value((function(t){return t.value}))(fi(E));N.forEach(t=>{t.voteTotal=C});const D=ne(".ratingsSVG").selectAll(".pieChart").data(N,(function(t){return t.data.key})).enter().append("path").attr("class","pieChart").attr("fill",(function(t){return A(t.data.key)})).attr("transform","translate("+(r-n.right-f)+","+(3*n.top+f)+")").call(S).on("mouseover",S.show).on("mouseout",S.hide);ne(".ratingsSVG").selectAll(".pieChart").data(N,(function(t){return t.data.key})).merge(D).transition().duration(750).attr("d",Xl().innerRadius(h).outerRadius(f))}t.append("h2").text("Talk Ratings"),t.append("hr").attr("color",pc.LIGHT_GREY);const d=t.append("select").attr("id","talkSelector").style("width",i+"px");for(let t=0;t<e.length;t++)d.append("option").attr("value",e[t].name).text(e[t].name);d.on("change",p),t.append("svg").attr("viewBox",`0 0 ${r} 500`).attr("class","ratingsSVG").append("g").attr("id","ratingsIconBarGroup").attr("transform","translate(0,"+(500-n.bottom)+")").append("rect").attr("id","iconBar").attr("width",r).attr("height",a).attr("fill",pc.LIGHT_GREY).attr("rx",a/6),p()}(Tc,t)}),Di("./data/fk_scores.csv").then(t=>{!function(t,e){const n=10,r=80,i=800-r-30,o=500-n-80;t.attr("viewBox","0 0 800 500");const a=t.append("g");a.attr("transform","translate("+r+","+n+")");const s=l(e,t=>parseInt(t.level,10)),u=pa().domain(s).range([0,i]);a.append("g").attr("transform","translate(0,"+o+")").call(P(u).tickFormat($i("d")));const c=b().domain(u.domain()).thresholds(u.ticks(40))(e.map(t=>parseInt(t.level,10))),f=pa().domain([0,x(c,t=>t.length)]).range([o,0]);a.append("g").call(j(f)),a.selectAll("rect").data(c).enter().append("rect").attr("x",1).attr("transform",(function(t){return"translate("+u(t.x0)+","+f(t.length)+")"})).attr("width",(function(t){return u(t.x1)-u(t.x0)-1})).attr("height",(function(t){return o-f(t.length)})).style("fill",pc.TED_RED),a.append("text").attr("transform","translate(-50, 250) rotate(-90)").attr("fill",pc.TITLE_WHITE).text("Number of talks"),a.append("text").attr("transform","translate(320, 450)").attr("fill",pc.TITLE_WHITE).text("Reading Level")}(bc,t)}),Mi("./data/profession_counts.json").then(t=>{vc(xc,t)}),Mi("./data/topic_relationships.json").then(t=>{})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Njcm9sbG1hZ2ljL3Njcm9sbG1hZ2ljL3VuY29tcHJlc3NlZC9TY3JvbGxNYWdpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2Rpc3QvanMvYm9vdHN0cmFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9kaXN0L2VzbS9wb3BwZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvY3Jvc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9leHRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9yYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGhyZXNob2xkL3N0dXJnZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9oaXN0b2dyYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tYXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy96aXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvYXhpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZGlzcGF0Y2gvc3JjL2Rpc3BhdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NyZWF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3JBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbWF0Y2hlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXR0ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3N0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xhc3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmFpc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2xvd2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbnNlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0QWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2V4aXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2pvaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL21lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vcmRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VtcHR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hcHBlbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdHVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9sb2NhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zb3VyY2VFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL2V2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9kcmFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yZ2IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpc0Nsb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL29iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9wYXJzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3ZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vZGVjb21wb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvem9vbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2hzbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL21hdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9sYWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9oY2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9jdWJlaGVsaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jdWJlaGVsaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9xdWFudGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZW91dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zY2hlZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvaW50ZXJydXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3R3ZWVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ludGVycG9sYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0clR3ZWVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2RlbGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2R1cmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2Vhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vcmVtb3ZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zdHlsZVR3ZWVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdEFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL3BvbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL3Npbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvYmFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvZWxhc3RpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2N1YmljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbnRlcnJ1cHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9icnVzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY2hvcmQvc3JjL21hdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNob3JkL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY2hvcmQvc3JjL2Nob3JkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1wYXRoL3NyYy9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL3NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29udG91ci9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2RlbnNpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvZHN2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Nzdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHN2L3NyYy90c3YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy90ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvZHN2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL3htbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2FkZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2NvdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvcXVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy95LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvcXVhZHRyZWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9kYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvZXh0ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvZmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9zaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvdmlzaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy92aXNpdEFmdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvc2ltdWxhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXREZWNpbWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2V4cG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRUcmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXROdW1lcmFscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvY291bnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9lYWNoQWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2VhY2hCZWZvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L3N1bS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvYW5jZXN0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9kZXNjZW5kYW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvbGVhdmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9saW5rcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9wYWNrL2VuY2xvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvcGFjay9zaWJsaW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9hY2Nlc3NvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvcGFjay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL3JvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvZGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9zdHJhdGlmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9zcXVhcmlmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvcmVzcXVhcmlmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcG9seWdvbi9zcmMvaHVsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9kZWZhdWx0U291cmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL25vcm1hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy91bmlmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2lyd2luSGFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9sb2dOb3JtYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvYmF0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvZXhwb25lbnRpYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9pbml0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9vcmRpbmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb250aW51b3VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGlja0Zvcm1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25QcmVmaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uRml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9saW5lYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9uaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9pbnRlcnZhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMveWVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbW9udGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2R1cmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy93ZWVrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9kYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2hvdXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbnV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvc2Vjb25kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9taWxsaXNlY29uZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjV2Vlay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjRGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNZZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvbG9jYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01vbnRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNIb3VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNNaW51dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL21hdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9saW5lYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvZGVzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvcmFkaWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvZGlhbW9uZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3N5bWJvbC9jaXJjbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvc3Rhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL25vb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvdHJpYW5nbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvd3llLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvYmFzaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9iYXNpc0Nsb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2Jhc2lzT3Blbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2J1bmRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhcmRpbmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2FyZGluYWxDbG9zZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXJkaW5hbE9wZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXRtdWxsUm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2F0bXVsbFJvbUNsb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhdG11bGxSb21PcGVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbGluZWFyQ2xvc2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbW9ub3RvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9uYXR1cmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvUmVkQmxhY2tUcmVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9FZGdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9DZWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9DaXJjbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL0JlYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9EaWFncmFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy16b29tL3NyYy90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL3pvb20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvVG9vbFRpcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvdGVkU2l0ZVZpZXdzLmpzIiwid2VicGFjazovLy8uL3NyYy90cy9wcm9mZXNzaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY2lyY2xlUGFja1Byb2Zlc3Npb25zLmpzIiwid2VicGFjazovLy8uL3NyYy90cy90cmVlbWFwUHJvZmVzc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2ltYWdlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy90cy90YWxrRGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvcmF0aW5nc0JyZWFrZG93bi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvcmVhZGluZ0xldmVsLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiU2Nyb2xsTWFnaWMiLCJfdXRpbCIsImxvZyIsInZlcnNpb24iLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiQ29udHJvbGxlciIsIm9wdGlvbnMiLCJfdXBkYXRlVGltZW91dCIsIl9yZWZyZXNoVGltZW91dCIsIk5BTUVTUEFDRSIsIkRFRkFVTFRfT1BUSU9OUyIsIkNPTlRST0xMRVJfT1BUSU9OUyIsImRlZmF1bHRzIiwidGhpcyIsIl9vcHRpb25zIiwiZXh0ZW5kIiwiX3NjZW5lT2JqZWN0cyIsIl91cGRhdGVTY2VuZXNPbk5leHRDeWNsZSIsIl9zY3JvbGxQb3MiLCJfc2Nyb2xsRGlyZWN0aW9uIiwiX2lzRG9jdW1lbnQiLCJfdmlld1BvcnRTaXplIiwiX2VuYWJsZWQiLCJzY2hlZHVsZVJlZnJlc2giLCJyZWZyZXNoSW50ZXJ2YWwiLCJzZXRUaW1lb3V0IiwicmVmcmVzaCIsImdldFNjcm9sbFBvcyIsInZlcnRpY2FsIiwic2Nyb2xsVG9wIiwiY29udGFpbmVyIiwic2Nyb2xsTGVmdCIsImdldFZpZXdwb3J0U2l6ZSIsImhlaWdodCIsIndpZHRoIiwic2V0U2Nyb2xsUG9zIiwiX3NldFNjcm9sbFBvcyIsInBvcyIsInNjcm9sbFRvIiwidXBkYXRlU2NlbmVzIiwic2NlbmVzVG9VcGRhdGUiLCJ0eXBlIiwiQXJyYXkiLCJzbGljZSIsIm9sZFNjcm9sbFBvcyIsImRlbHRhU2Nyb2xsIiwic2Nyb2xsUG9zIiwicmV2ZXJzZSIsImZvckVhY2giLCJzY2VuZSIsImluZGV4IiwibGVuZ3RoIiwidXBkYXRlIiwibG9nbGV2ZWwiLCJkZWJvdW5jZVVwZGF0ZSIsInJBRiIsIm9uQ2hhbmdlIiwiZSIsInJlc2l6ZUV2ZW50IiwiRXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRvY3VtZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiX2xvZyIsIm91dHB1dCIsInNwbGljZSIsImFyZ3VtZW50cyIsImFwcGx5Iiwic29ydFNjZW5lcyIsIlNjZW5lc0FycmF5Iiwic2NlbmVzIiwic29ydCIsImEiLCJiIiwic2Nyb2xsT2Zmc2V0IiwiYWRkU2NlbmUiLCJuZXdTY2VuZSIsIlNjZW5lIiwiY29udHJvbGxlciIsImFkZFRvIiwiaW5kZXhPZiIsInB1c2giLCJvbiIsImdsb2JhbFNjZW5lT3B0aW9ucyIsInJlbW92ZVNjZW5lIiwib2ZmIiwicmVtb3ZlIiwidXBkYXRlU2NlbmUiLCJpbW1lZGlhdGVseSIsInNjcm9sbFRhcmdldCIsImFkZGl0aW9uYWxQYXJhbWV0ZXIiLCJOdW1iZXIiLCJGdW5jdGlvbiIsImVsZW0iLCJlbGVtZW50cyIsInBhcmVudE5vZGUiLCJoYXNBdHRyaWJ1dGUiLCJwYXJhbSIsImNvbnRhaW5lck9mZnNldCIsIm9mZnNldCIsImVsZW1lbnRPZmZzZXQiLCJzY3JvbGxQb3NNZXRob2QiLCJpbmZvIiwiYWJvdXQiLCJ2YWx1ZXMiLCJzaXplIiwic2Nyb2xsRGlyZWN0aW9uIiwiaXNEb2N1bWVudCIsInVuZGVmaW5lZCIsIm5ld0xvZ2xldmVsIiwiZW5hYmxlZCIsIm5ld1N0YXRlIiwiZGVzdHJveSIsInJlc2V0U2NlbmVzIiwiY2xlYXJUaW1lb3V0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNBRiIsImJvZHkiLCJjb250YWlucyIsInJpIiwicGFyc2VJbnQiLCJjb25zdHJ1Y3QiLCJhZGRPcHRpb24iLCJkZWZhdWx0VmFsdWUiLCJleHRlbnNpb24iLCJvbGRDbGFzcyIsIiRzdXBlciIsImNvbnN0cnVjdG9yIiwiX2R1cmF0aW9uVXBkYXRlTWV0aG9kIiwiX2NvbnRyb2xsZXIiLCJTQ0VORV9PUFRJT05TIiwiX3N0YXRlIiwiX3Byb2dyZXNzIiwiX3Njcm9sbE9mZnNldCIsInN0YXJ0IiwiZW5kIiwiX3RyaWdnZXJQb3MiLCJfbGlzdGVuZXJzIiwibmFtZXMiLCJjYWxsYmFjayIsInRyaW0iLCJzcGxpdCIsImZ1bGxuYW1lIiwibmFtZXBhcnRzIiwiZXZlbnRuYW1lIiwibmFtZXNwYWNlIiwia2V5cyIsImxpc3QiLCJsaXN0ZW5lciIsInRyaWdnZXIiLCJ2YXJzIiwibGlzdGVuZXJzIiwid2hhdCIsInVwZGF0ZVRyaWdnZXJFbGVtZW50UG9zaXRpb24iLCJ1cGRhdGVTY3JvbGxPZmZzZXQiLCJ2YWxpZGF0ZU9wdGlvbiIsInVwZGF0ZUR1cmF0aW9uIiwib25Db250YWluZXJSZXNpemUiLCJ0bXBQYXJlbnQiLCJyZXNldCIsIm5ld1Byb2dyZXNzIiwiZHVyYXRpb24iLCJzdGFydFBvcyIsImVuZFBvcyIsInByb2dyZXNzIiwiX3BpbiIsInVwZGF0ZVBpblN0YXRlIiwiZG9VcGRhdGUiLCJvbGRTdGF0ZSIsInJldmVyc2VPckZvcndhcmQiLCJldmVudFZhcnMiLCJzdGF0ZSIsInN0YXRlQ2hhbmdlZCIsImV2ZW50TmFtZSIsIl9waW5PcHRpb25zIiwidHJpZ2dlckVsZW1lbnQiLCJ0cmlnZ2VySG9vayIsInN1cHByZXNzRXZlbnRzIiwiY2hhbmdlT3B0aW9uIiwibmV3dmFsIiwicmVhc29uIiwiZWxlbWVudFBvcyIsInRlbGVtIiwiY29udHJvbGxlckluZm8iLCJjaGFuZ2VkIiwiX3ZhbGlkYXRlIiwidmFsaWRhdGUiLCJ2YWwiLCJTdHJpbmciLCJtYXRjaCIsInBlcmMiLCJwYXJzZUZsb2F0IiwiY2hlY2siLCJvcHRpb25OYW1lIiwibG9nTVNHIiwidW5zaGlmdCIsIm1lc3NhZ2UiLCJ2YXJuYW1lIiwib2xkdmFsIiwiYWRkU2NlbmVPcHRpb24iLCJuZXdWYWwiLCJzaGlmdHMiLCJ0cmlnZ2VyUG9zaXRpb24iLCJkdXJhdGlvbkNoYW5nZWQiLCJ1cGRhdGVQaW5EaW1lbnNpb25zIiwicmVtb3ZlUGluIiwiZm9yY2VVbnBpbiIsImNvbnRhaW5lckluZm8iLCJwaW5UYXJnZXQiLCJzcGFjZXIiLCJmaXJzdENoaWxkIiwibmV3Q1NTIiwicG9zaXRpb24iLCJpbkZsb3ciLCJ0b3AiLCJsZWZ0IiwiY2hhbmdlIiwiY3NzIiwicHVzaEZvbGxvd2VycyIsImZpeGVkUG9zIiwic2Nyb2xsRGlzdGFuY2UiLCJNYXRoIiwicm91bmQiLCJkdXJpbmciLCJtYXJnaW5Db2xsYXBzZSIsImlzTWFyZ2luQ29sbGFwc2VUeXBlIiwicmVsU2l6ZSIsImF1dG9GdWxsV2lkdGgiLCJ1cGRhdGVQaW5JbkNvbnRhaW5lciIsInVwZGF0ZVJlbGF0aXZlUGluU3BhY2VyIiwib25Nb3VzZXdoZWVsT3ZlclBpbiIsInByZXZlbnREZWZhdWx0Iiwid2hlZWxEZWx0YSIsImRldGFpbCIsInNldFBpbiIsImVsZW1lbnQiLCJzZXR0aW5ncyIsInB1c2hGb2xsb3dlcnNBY3RpdmVseVNldCIsInNwYWNlckNsYXNzIiwicGFyZW50RGlzcGxheSIsInN0eWxlIiwiZGlzcGxheSIsImJvdW5kc1BhcmFtcyIsInBpbkNTUyIsImNvbmNhdCIsInNpemVDU1MiLCJpbnNlcnRCZWZvcmUiLCJjcmVhdGVFbGVtZW50Iiwic3BhY2VyQ1NTIiwiYm94U2l6aW5nIiwibW96Qm94U2l6aW5nIiwid2Via2l0Qm94U2l6aW5nIiwic2V0QXR0cmlidXRlIiwiYWRkQ2xhc3MiLCJfX19vcmlnU3R5bGUiLCJwaW5JbmxpbmVDU1MiLCJhcHBlbmRDaGlsZCIsIm1hcmdpbiIsImJvdHRvbSIsInJpZ2h0IiwibWFyZ2lucyIsInJlbW92ZUNoaWxkIiwiX2Nzc0NsYXNzZXMiLCJfY3NzQ2xhc3NFbGVtcyIsInJlbW92ZUNsYXNzVG9nZ2xlIiwic2V0Q2xhc3NUb2dnbGUiLCJjbGFzc2VzIiwiZWxlbXMiLCJ0b2dnbGUiLCJyZW1vdmVDbGFzcyIsInRyYW5zbGF0ZSIsIm1heCIsIm1pbiIsInZhbGlkYXRpb25DYWxsYmFjayIsInRhcmdldCIsImN1cnJlbnRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwiVSIsImZsb2F0dmFsIiwibnVtYmVyIiwiX2dldENvbXB1dGVkU3R5bGUiLCJjdXJyZW50U3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiX2RpbWVuc2lvbiIsIndoaWNoIiwib3V0ZXIiLCJpbmNsdWRlTWFyZ2luIiwiX3R5cGUiLCJEb21FbGVtZW50IiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzdWJzdHIiLCJ0b0xvd2VyQ2FzZSIsImRpbWVuc2lvbiIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIl9jYW1lbENhc2UiLCJzdHIiLCJyZXBsYWNlIiwiZyIsIm9iaiIsImxhc3RUaW1lIiwidmVuZG9ycyIsIl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJfY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImN1cnJUaW1lIiwiZ2V0VGltZSIsInRpbWVUb0NhbGwiLCJpZCIsImxvZ2xldmVscyIsImNvbnNvbGUiLCJtZXRob2QiLCJ0aW1lIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsImFyZ3MiLCJmdW5jIiwidiIsInRvU3RyaW5nIiwiaXNBcnJheSIsIkhUTUxFbGVtZW50IiwiU1ZHRWxlbWVudCIsIm5vZGVUeXBlIiwibm9kZU5hbWUiLCJfZ2V0Iiwic2VsZWN0b3IiLCJhcnIiLCJxdWVyeVNlbGVjdG9yQWxsIiwiTm9kZUxpc3QiLCJyZWYiLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0IiwicmVsYXRpdmVUb1ZpZXdwb3J0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmVjdCIsImNsYXNzbmFtZSIsImNsYXNzTGlzdCIsImFkZCIsImNsYXNzTmFtZSIsIlJlZ0V4cCIsImpvaW4iLCJvcHRpb24iLCJhZGRJbmRpY2F0b3JzIiwicmVtb3ZlSW5kaWNhdG9ycyIsInNldFR3ZWVuIiwicmVtb3ZlVHdlZW4iLCJzZXRWZWxvY2l0eSIsInJlbW92ZVZlbG9jaXR5IiwiJCIsIlBvcHBlciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfY3JlYXRlQ2xhc3MiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9vYmplY3RTcHJlYWQiLCJzb3VyY2UiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiVFJBTlNJVElPTl9FTkQiLCJ0cmFuc2l0aW9uRW5kRW11bGF0b3IiLCJfdGhpcyIsImNhbGxlZCIsIm9uZSIsIlV0aWwiLCJ0cmlnZ2VyVHJhbnNpdGlvbkVuZCIsImdldFVJRCIsInByZWZpeCIsInJhbmRvbSIsImdldEVsZW1lbnRCeUlkIiwiZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCIsImdldEF0dHJpYnV0ZSIsImhyZWZBdHRyIiwicXVlcnlTZWxlY3RvciIsImVyciIsImdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50IiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkRlbGF5IiwiZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24iLCJmbG9hdFRyYW5zaXRpb25EZWxheSIsInJlZmxvdyIsIm9mZnNldEhlaWdodCIsInN1cHBvcnRzVHJhbnNpdGlvbkVuZCIsIkJvb2xlYW4iLCJpc0VsZW1lbnQiLCJ0eXBlQ2hlY2tDb25maWciLCJjb21wb25lbnROYW1lIiwiY29uZmlnIiwiY29uZmlnVHlwZXMiLCJleHBlY3RlZFR5cGVzIiwidmFsdWVUeXBlIiwidGVzdCIsIkVycm9yIiwiZmluZFNoYWRvd1Jvb3QiLCJkb2N1bWVudEVsZW1lbnQiLCJhdHRhY2hTaGFkb3ciLCJnZXRSb290Tm9kZSIsInJvb3QiLCJTaGFkb3dSb290IiwiZm4iLCJlbXVsYXRlVHJhbnNpdGlvbkVuZCIsImV2ZW50Iiwic3BlY2lhbCIsImJpbmRUeXBlIiwiZGVsZWdhdGVUeXBlIiwiaGFuZGxlIiwiaXMiLCJoYW5kbGVPYmoiLCJoYW5kbGVyIiwiSlFVRVJZX05PX0NPTkZMSUNUIiwiQ0xPU0UiLCJDTE9TRUQiLCJDTElDS19EQVRBX0FQSSIsIkNsYXNzTmFtZSIsIkFsZXJ0IiwiX2VsZW1lbnQiLCJfcHJvdG8iLCJjbG9zZSIsInJvb3RFbGVtZW50IiwiX2dldFJvb3RFbGVtZW50IiwiX3RyaWdnZXJDbG9zZUV2ZW50IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiX3JlbW92ZUVsZW1lbnQiLCJkaXNwb3NlIiwicmVtb3ZlRGF0YSIsInBhcmVudCIsImNsb3Nlc3QiLCJjbG9zZUV2ZW50IiwiaGFzQ2xhc3MiLCJfZGVzdHJveUVsZW1lbnQiLCJkZXRhY2giLCJfalF1ZXJ5SW50ZXJmYWNlIiwiZWFjaCIsIiRlbGVtZW50IiwiZGF0YSIsIl9oYW5kbGVEaXNtaXNzIiwiYWxlcnRJbnN0YW5jZSIsIm5vQ29uZmxpY3QiLCJKUVVFUllfTk9fQ09ORkxJQ1QkMSIsIkNsYXNzTmFtZSQxIiwiU2VsZWN0b3IkMSIsIkV2ZW50JDEiLCJGT0NVU19CTFVSX0RBVEFfQVBJIiwiQnV0dG9uIiwidHJpZ2dlckNoYW5nZUV2ZW50IiwiYWRkQXJpYVByZXNzZWQiLCJpbnB1dCIsImNoZWNrZWQiLCJhY3RpdmVFbGVtZW50IiwiZm9jdXMiLCJ0b2dnbGVDbGFzcyIsImJ1dHRvbiIsIk5BTUUkMiIsIkVWRU5UX0tFWSQyIiwiSlFVRVJZX05PX0NPTkZMSUNUJDIiLCJEZWZhdWx0IiwiaW50ZXJ2YWwiLCJrZXlib2FyZCIsInNsaWRlIiwicGF1c2UiLCJ3cmFwIiwidG91Y2giLCJEZWZhdWx0VHlwZSIsIkRpcmVjdGlvbiIsIkV2ZW50JDIiLCJTTElERSIsIlNMSUQiLCJLRVlET1dOIiwiTU9VU0VFTlRFUiIsIk1PVVNFTEVBVkUiLCJUT1VDSFNUQVJUIiwiVE9VQ0hNT1ZFIiwiVE9VQ0hFTkQiLCJQT0lOVEVSRE9XTiIsIlBPSU5URVJVUCIsIkRSQUdfU1RBUlQiLCJMT0FEX0RBVEFfQVBJIiwiQ2xhc3NOYW1lJDIiLCJTZWxlY3RvciQyIiwiQUNUSVZFIiwiQUNUSVZFX0lURU0iLCJJVEVNIiwiSVRFTV9JTUciLCJORVhUX1BSRVYiLCJJTkRJQ0FUT1JTIiwiREFUQV9TTElERSIsIkRBVEFfUklERSIsIlBvaW50ZXJUeXBlIiwiVE9VQ0giLCJQRU4iLCJDYXJvdXNlbCIsIl9pdGVtcyIsIl9pbnRlcnZhbCIsIl9hY3RpdmVFbGVtZW50IiwiX2lzUGF1c2VkIiwiX2lzU2xpZGluZyIsInRvdWNoVGltZW91dCIsInRvdWNoU3RhcnRYIiwidG91Y2hEZWx0YVgiLCJfY29uZmlnIiwiX2dldENvbmZpZyIsIl9pbmRpY2F0b3JzRWxlbWVudCIsIl90b3VjaFN1cHBvcnRlZCIsIm5hdmlnYXRvciIsIm1heFRvdWNoUG9pbnRzIiwiX3BvaW50ZXJFdmVudCIsIlBvaW50ZXJFdmVudCIsIk1TUG9pbnRlckV2ZW50IiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwibmV4dCIsIl9zbGlkZSIsIm5leHRXaGVuVmlzaWJsZSIsImhpZGRlbiIsInByZXYiLCJjeWNsZSIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsInZpc2liaWxpdHlTdGF0ZSIsInRvIiwiYWN0aXZlSW5kZXgiLCJfZ2V0SXRlbUluZGV4IiwiZGlyZWN0aW9uIiwiX2hhbmRsZVN3aXBlIiwiYWJzRGVsdGF4IiwiYWJzIiwiX3RoaXMyIiwiX2tleWRvd24iLCJfYWRkVG91Y2hFdmVudExpc3RlbmVycyIsIl90aGlzMyIsIm9yaWdpbmFsRXZlbnQiLCJwb2ludGVyVHlwZSIsImNsaWVudFgiLCJ0b3VjaGVzIiwibW92ZSIsInRhZ05hbWUiLCJfZ2V0SXRlbUJ5RGlyZWN0aW9uIiwiaXNOZXh0RGlyZWN0aW9uIiwiaXNQcmV2RGlyZWN0aW9uIiwibGFzdEl0ZW1JbmRleCIsIml0ZW1JbmRleCIsIl90cmlnZ2VyU2xpZGVFdmVudCIsInJlbGF0ZWRUYXJnZXQiLCJldmVudERpcmVjdGlvbk5hbWUiLCJ0YXJnZXRJbmRleCIsImZyb21JbmRleCIsInNsaWRlRXZlbnQiLCJmcm9tIiwiX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQiLCJpbmRpY2F0b3JzIiwibmV4dEluZGljYXRvciIsImNoaWxkcmVuIiwiZGlyZWN0aW9uYWxDbGFzc05hbWUiLCJvcmRlckNsYXNzTmFtZSIsIl90aGlzNCIsImFjdGl2ZUVsZW1lbnRJbmRleCIsIm5leHRFbGVtZW50IiwibmV4dEVsZW1lbnRJbmRleCIsImlzQ3ljbGluZyIsInNsaWRFdmVudCIsIm5leHRFbGVtZW50SW50ZXJ2YWwiLCJkZWZhdWx0SW50ZXJ2YWwiLCJhY3Rpb24iLCJUeXBlRXJyb3IiLCJyaWRlIiwiX2RhdGFBcGlDbGlja0hhbmRsZXIiLCJzbGlkZUluZGV4IiwiY2Fyb3VzZWxzIiwibGVuIiwiJGNhcm91c2VsIiwiTkFNRSQzIiwiSlFVRVJZX05PX0NPTkZMSUNUJDMiLCJEZWZhdWx0JDEiLCJEZWZhdWx0VHlwZSQxIiwiRXZlbnQkMyIsIlNIT1ciLCJTSE9XTiIsIkhJREUiLCJISURERU4iLCJDbGFzc05hbWUkMyIsIkRpbWVuc2lvbiIsIlNlbGVjdG9yJDMiLCJBQ1RJVkVTIiwiREFUQV9UT0dHTEUiLCJDb2xsYXBzZSIsIl9pc1RyYW5zaXRpb25pbmciLCJfdHJpZ2dlckFycmF5IiwidG9nZ2xlTGlzdCIsImZpbHRlckVsZW1lbnQiLCJmb3VuZEVsZW0iLCJfc2VsZWN0b3IiLCJfcGFyZW50IiwiX2dldFBhcmVudCIsIl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJoaWRlIiwic2hvdyIsImFjdGl2ZXMiLCJhY3RpdmVzRGF0YSIsIm5vdCIsInN0YXJ0RXZlbnQiLCJfZ2V0RGltZW5zaW9uIiwiYXR0ciIsInNldFRyYW5zaXRpb25pbmciLCJzY3JvbGxTaXplIiwidHJpZ2dlckFycmF5TGVuZ3RoIiwiaXNUcmFuc2l0aW9uaW5nIiwianF1ZXJ5IiwiX2dldFRhcmdldEZyb21FbGVtZW50IiwidHJpZ2dlckFycmF5IiwiaXNPcGVuIiwiJHRoaXMiLCIkdHJpZ2dlciIsInNlbGVjdG9ycyIsIiR0YXJnZXQiLCJOQU1FJDQiLCJKUVVFUllfTk9fQ09ORkxJQ1QkNCIsIlJFR0VYUF9LRVlET1dOIiwiQVJST1dfVVBfS0VZQ09ERSIsIkV2ZW50JDQiLCJDTElDSyIsIktFWURPV05fREFUQV9BUEkiLCJLRVlVUF9EQVRBX0FQSSIsIkNsYXNzTmFtZSQ0IiwiU2VsZWN0b3IkNCIsIkF0dGFjaG1lbnRNYXAiLCJEZWZhdWx0JDIiLCJmbGlwIiwiYm91bmRhcnkiLCJyZWZlcmVuY2UiLCJEZWZhdWx0VHlwZSQyIiwiRHJvcGRvd24iLCJfcG9wcGVyIiwiX21lbnUiLCJfZ2V0TWVudUVsZW1lbnQiLCJfaW5OYXZiYXIiLCJfZGV0ZWN0TmF2YmFyIiwiZGlzYWJsZWQiLCJfZ2V0UGFyZW50RnJvbUVsZW1lbnQiLCJpc0FjdGl2ZSIsIl9jbGVhck1lbnVzIiwic2hvd0V2ZW50IiwicmVmZXJlbmNlRWxlbWVudCIsIl9nZXRQb3BwZXJDb25maWciLCJub29wIiwiaGlkZUV2ZW50Iiwic2NoZWR1bGVVcGRhdGUiLCJzdG9wUHJvcGFnYXRpb24iLCJfZ2V0UGxhY2VtZW50IiwiJHBhcmVudERyb3Bkb3duIiwicGxhY2VtZW50IiwiX2dldE9mZnNldCIsIm9mZnNldHMiLCJwb3BwZXJDb25maWciLCJtb2RpZmllcnMiLCJwcmV2ZW50T3ZlcmZsb3ciLCJib3VuZGFyaWVzRWxlbWVudCIsImFwcGx5U3R5bGUiLCJ0b2dnbGVzIiwiY29udGV4dCIsImNsaWNrRXZlbnQiLCJkcm9wZG93bk1lbnUiLCJfZGF0YUFwaUtleWRvd25IYW5kbGVyIiwiaXRlbXMiLCJKUVVFUllfTk9fQ09ORkxJQ1QkNSIsIkRlZmF1bHQkMyIsImJhY2tkcm9wIiwiRGVmYXVsdFR5cGUkMyIsIkV2ZW50JDUiLCJGT0NVU0lOIiwiUkVTSVpFIiwiQ0xJQ0tfRElTTUlTUyIsIktFWURPV05fRElTTUlTUyIsIk1PVVNFVVBfRElTTUlTUyIsIk1PVVNFRE9XTl9ESVNNSVNTIiwiQ2xhc3NOYW1lJDUiLCJTZWxlY3RvciQ1IiwiRElBTE9HIiwiTU9EQUxfQk9EWSIsIkRBVEFfRElTTUlTUyIsIkZJWEVEX0NPTlRFTlQiLCJTVElDS1lfQ09OVEVOVCIsIk1vZGFsIiwiX2RpYWxvZyIsIl9iYWNrZHJvcCIsIl9pc1Nob3duIiwiX2lzQm9keU92ZXJmbG93aW5nIiwiX2lnbm9yZUJhY2tkcm9wQ2xpY2siLCJfc2Nyb2xsYmFyV2lkdGgiLCJfY2hlY2tTY3JvbGxiYXIiLCJfc2V0U2Nyb2xsYmFyIiwiX2FkanVzdERpYWxvZyIsIl9zZXRFc2NhcGVFdmVudCIsIl9zZXRSZXNpemVFdmVudCIsIl9zaG93QmFja2Ryb3AiLCJfc2hvd0VsZW1lbnQiLCJ0cmFuc2l0aW9uIiwiX2hpZGVNb2RhbCIsImh0bWxFbGVtZW50IiwiaGFuZGxlVXBkYXRlIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsInJlbW92ZUF0dHJpYnV0ZSIsIl9lbmZvcmNlRm9jdXMiLCJzaG93bkV2ZW50IiwidHJhbnNpdGlvbkNvbXBsZXRlIiwiaGFzIiwiX3RoaXM1IiwiX3RoaXM2IiwiX3RoaXM3IiwiX3Jlc2V0QWRqdXN0bWVudHMiLCJfcmVzZXRTY3JvbGxiYXIiLCJfcmVtb3ZlQmFja2Ryb3AiLCJfdGhpczgiLCJhbmltYXRlIiwiYXBwZW5kVG8iLCJiYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbiIsImNhbGxiYWNrUmVtb3ZlIiwiX2JhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uIiwiaXNNb2RhbE92ZXJmbG93aW5nIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJpbm5lcldpZHRoIiwiX2dldFNjcm9sbGJhcldpZHRoIiwiX3RoaXM5IiwiZml4ZWRDb250ZW50Iiwic3RpY2t5Q29udGVudCIsImFjdHVhbFBhZGRpbmciLCJjYWxjdWxhdGVkUGFkZGluZyIsImFjdHVhbE1hcmdpbiIsImNhbGN1bGF0ZWRNYXJnaW4iLCJwYWRkaW5nIiwic2Nyb2xsRGl2Iiwic2Nyb2xsYmFyV2lkdGgiLCJjbGllbnRXaWR0aCIsIl90aGlzMTAiLCJ1cmlBdHRycyIsIkRlZmF1bHRXaGl0ZWxpc3QiLCJhcmVhIiwiYnIiLCJjb2wiLCJjb2RlIiwiZGl2IiwiZW0iLCJociIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsImltZyIsImxpIiwib2wiLCJwcmUiLCJzbWFsbCIsInNwYW4iLCJzdWIiLCJzdXAiLCJzdHJvbmciLCJ1IiwidWwiLCJTQUZFX1VSTF9QQVRURVJOIiwiREFUQV9VUkxfUEFUVEVSTiIsInNhbml0aXplSHRtbCIsInVuc2FmZUh0bWwiLCJ3aGl0ZUxpc3QiLCJzYW5pdGl6ZUZuIiwiY3JlYXRlZERvY3VtZW50IiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwid2hpdGVsaXN0S2V5cyIsIl9sb29wIiwiZWwiLCJlbE5hbWUiLCJhdHRyaWJ1dGVMaXN0IiwiYXR0cmlidXRlcyIsIndoaXRlbGlzdGVkQXR0cmlidXRlcyIsImFsbG93ZWRBdHRyaWJ1dGVMaXN0IiwiYXR0ck5hbWUiLCJub2RlVmFsdWUiLCJyZWdFeHAiLCJhdHRyUmVnZXgiLCJhbGxvd2VkQXR0cmlidXRlIiwiaW5uZXJIVE1MIiwiTkFNRSQ2IiwiSlFVRVJZX05PX0NPTkZMSUNUJDYiLCJCU0NMU19QUkVGSVhfUkVHRVgiLCJESVNBTExPV0VEX0FUVFJJQlVURVMiLCJEZWZhdWx0VHlwZSQ0IiwiYW5pbWF0aW9uIiwidGVtcGxhdGUiLCJ0aXRsZSIsImRlbGF5IiwiaHRtbCIsImZhbGxiYWNrUGxhY2VtZW50Iiwic2FuaXRpemUiLCJBdHRhY2htZW50TWFwJDEiLCJBVVRPIiwiVE9QIiwiUklHSFQiLCJCT1RUT00iLCJMRUZUIiwiRGVmYXVsdCQ0IiwiSG92ZXJTdGF0ZSIsIkV2ZW50JDYiLCJJTlNFUlRFRCIsIkZPQ1VTT1VUIiwiQ2xhc3NOYW1lJDYiLCJTZWxlY3RvciQ2IiwiVHJpZ2dlciIsIlRvb2x0aXAiLCJfaXNFbmFibGVkIiwiX3RpbWVvdXQiLCJfaG92ZXJTdGF0ZSIsIl9hY3RpdmVUcmlnZ2VyIiwidGlwIiwiX3NldExpc3RlbmVycyIsImVuYWJsZSIsImRpc2FibGUiLCJ0b2dnbGVFbmFibGVkIiwiZGF0YUtleSIsIkRBVEFfS0VZIiwiX2dldERlbGVnYXRlQ29uZmlnIiwiY2xpY2siLCJfaXNXaXRoQWN0aXZlVHJpZ2dlciIsIl9lbnRlciIsIl9sZWF2ZSIsImdldFRpcEVsZW1lbnQiLCJFVkVOVF9LRVkiLCJpc1dpdGhDb250ZW50Iiwic2hhZG93Um9vdCIsImlzSW5UaGVEb20iLCJvd25lckRvY3VtZW50IiwidGlwSWQiLCJOQU1FIiwic2V0Q29udGVudCIsImF0dGFjaG1lbnQiLCJfZ2V0QXR0YWNobWVudCIsImFkZEF0dGFjaG1lbnRDbGFzcyIsIl9nZXRDb250YWluZXIiLCJiZWhhdmlvciIsImFycm93Iiwib25DcmVhdGUiLCJvcmlnaW5hbFBsYWNlbWVudCIsIl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UiLCJvblVwZGF0ZSIsImNvbXBsZXRlIiwiX2ZpeFRyYW5zaXRpb24iLCJwcmV2SG92ZXJTdGF0ZSIsIl9jbGVhblRpcENsYXNzIiwiZ2V0VGl0bGUiLCJDTEFTU19QUkVGSVgiLCJzZXRFbGVtZW50Q29udGVudCIsImNvbnRlbnQiLCJ0ZXh0IiwiZW1wdHkiLCJhcHBlbmQiLCJmaW5kIiwiZXZlbnRJbiIsImV2ZW50T3V0IiwiX2ZpeFRpdGxlIiwidGl0bGVUeXBlIiwiZGF0YUF0dHJpYnV0ZXMiLCJkYXRhQXR0ciIsIiR0aXAiLCJ0YWJDbGFzcyIsInBvcHBlckRhdGEiLCJwb3BwZXJJbnN0YW5jZSIsImluc3RhbmNlIiwicG9wcGVyIiwiaW5pdENvbmZpZ0FuaW1hdGlvbiIsIk5BTUUkNyIsIkpRVUVSWV9OT19DT05GTElDVCQ3IiwiQlNDTFNfUFJFRklYX1JFR0VYJDEiLCJEZWZhdWx0JDUiLCJEZWZhdWx0VHlwZSQ1IiwiQ2xhc3NOYW1lJDciLCJTZWxlY3RvciQ3IiwiRXZlbnQkNyIsIlBvcG92ZXIiLCJfVG9vbHRpcCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9fcHJvdG9fXyIsIl9nZXRDb250ZW50IiwiQ0xBU1NfUFJFRklYJDEiLCJOQU1FJDgiLCJKUVVFUllfTk9fQ09ORkxJQ1QkOCIsIkRlZmF1bHQkNiIsIkRlZmF1bHRUeXBlJDYiLCJFdmVudCQ4IiwiQUNUSVZBVEUiLCJTQ1JPTEwiLCJDbGFzc05hbWUkOCIsIlNlbGVjdG9yJDgiLCJEQVRBX1NQWSIsIk5BVl9MSVNUX0dST1VQIiwiTkFWX0xJTktTIiwiTkFWX0lURU1TIiwiTElTVF9JVEVNUyIsIkRST1BET1dOIiwiRFJPUERPV05fSVRFTVMiLCJEUk9QRE9XTl9UT0dHTEUiLCJPZmZzZXRNZXRob2QiLCJTY3JvbGxTcHkiLCJfc2Nyb2xsRWxlbWVudCIsIl9vZmZzZXRzIiwiX3RhcmdldHMiLCJfYWN0aXZlVGFyZ2V0IiwiX3Njcm9sbEhlaWdodCIsIl9wcm9jZXNzIiwiYXV0b01ldGhvZCIsIm9mZnNldE1ldGhvZCIsIm9mZnNldEJhc2UiLCJfZ2V0U2Nyb2xsVG9wIiwiX2dldFNjcm9sbEhlaWdodCIsIm1hcCIsInRhcmdldFNlbGVjdG9yIiwidGFyZ2V0QkNSIiwiaXRlbSIsIl9nZXRPZmZzZXRIZWlnaHQiLCJpbm5lckhlaWdodCIsIm1heFNjcm9sbCIsIl9hY3RpdmF0ZSIsIl9jbGVhciIsInF1ZXJpZXMiLCIkbGluayIsInBhcmVudHMiLCJub2RlIiwic2Nyb2xsU3B5cyIsIiRzcHkiLCJKUVVFUllfTk9fQ09ORkxJQ1QkOSIsIkV2ZW50JDkiLCJDbGFzc05hbWUkOSIsIlNlbGVjdG9yJDkiLCJUYWIiLCJwcmV2aW91cyIsImxpc3RFbGVtZW50IiwiaXRlbVNlbGVjdG9yIiwibWFrZUFycmF5IiwiaGlkZGVuRXZlbnQiLCJhY3RpdmUiLCJfdHJhbnNpdGlvbkNvbXBsZXRlIiwiZHJvcGRvd25DaGlsZCIsImRyb3Bkb3duRWxlbWVudCIsImRyb3Bkb3duVG9nZ2xlTGlzdCIsIkpRVUVSWV9OT19DT05GTElDVCRhIiwiRXZlbnQkYSIsIkNsYXNzTmFtZSRhIiwiRGVmYXVsdFR5cGUkNyIsImF1dG9oaWRlIiwiRGVmYXVsdCQ3IiwiU2VsZWN0b3IkYSIsIlRvYXN0Iiwid2l0aG91dFRpbWVvdXQiLCJfY2xvc2UiLCJTY3JvbGxzcHkiLCJmYWN0b3J5IiwiZ2xvYmFsIiwidyIsIm5vR2xvYmFsIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImNsYXNzMnR5cGUiLCJoYXNPd24iLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNGdW5jdGlvbiIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInNyYyIsIm5vbmNlIiwibm9Nb2R1bGUiLCJET01FdmFsIiwiZG9jIiwic2NyaXB0IiwiaGVhZCIsInRvVHlwZSIsImpRdWVyeSIsImluaXQiLCJydHJpbSIsImlzQXJyYXlMaWtlIiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImZpcnN0IiwiZXEiLCJsYXN0IiwiaiIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJleHBhbmRvIiwiaXNSZWFkeSIsImVycm9yIiwibXNnIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImdyZXAiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJndWlkIiwiaXRlcmF0b3IiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwicG9wIiwicHVzaF9uYXRpdmUiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmRlc2NlbmQiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJyaHRtbCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsIl8iLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiZnJvbUNoYXJDb2RlIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJjaCIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsInVubG9hZEhhbmRsZXIiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZGlyIiwiY2hpbGROb2RlcyIsImVscyIsInNlZWQiLCJuaWQiLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJleGVjIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidG9TZWxlY3RvciIsInRlc3RDb250ZXh0IiwicXNhRXJyb3IiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJhZGRIYW5kbGUiLCJhdHRycyIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJjdXIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJpc0Rpc2FibGVkIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwibmFtZXNwYWNlVVJJIiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwiYXR0YWNoRXZlbnQiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsInRtcCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwiZXhwciIsInNwZWNpZmllZCIsImVzY2FwZSIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwicmVzdWx0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInRva2VucyIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJzZXRNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwidG9rZW4iLCJjb21waWxlZCIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJ1bnRpbCIsInRydW5jYXRlIiwic2libGluZ3MiLCJybmVlZHNDb250ZXh0IiwibmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsIndpbm5vdyIsInF1YWxpZmllciIsInNlbGYiLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY29udGVudHMiLCJzaWJsaW5nIiwidGFyZ2V0cyIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsInJub3RodG1sd2hpdGUiLCJJZGVudGl0eSIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9WYWx1ZSIsInByb21pc2UiLCJmYWlsIiwidGhlbiIsIkNhbGxiYWNrcyIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsImxvY2siLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwidHVwbGVzIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwiZGVwdGgiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJtYXN0ZXIiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsIndhcm4iLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsImNhdGNoIiwicmVhZHlXYWl0Iiwid2FpdCIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwiY2FtZWxDYXNlIiwic3RyaW5nIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsInNldCIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJKU09OIiwicGFyc2UiLCJnZXREYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzQXR0YWNoZWQiLCJjb21wb3NlZCIsImlzSGlkZGVuV2l0aGluVHJlZSIsInN3YXAiLCJvbGQiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJzaG93SGlkZSIsInJjaGVja2FibGVUeXBlIiwicnRhZ05hbWUiLCJyc2NyaXB0VHlwZSIsIndyYXBNYXAiLCJ0aGVhZCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwiYXR0YWNoZWQiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJleHBlY3RTeW5jIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJ0eXBlcyIsIm9yaWdGbiIsImxldmVyYWdlTmF0aXZlIiwibm90QXN5bmMiLCJzYXZlZCIsImlzVHJpZ2dlciIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsImxvYWQiLCJub0J1YmJsZSIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwiZGVmYXVsdFByZXZlbnRlZCIsImlzU2ltdWxhdGVkIiwiYWx0S2V5IiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsImJsdXIiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJfZXZhbFVybCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJwcmVwZW5kIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwicmJveFN0eWxlIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsQm94U3R5bGVzIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjb21wdXRlU3R5bGVUZXN0cyIsImNzc1RleHQiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm9mZnNldFdpZHRoIiwibWVhc3VyZSIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BzIiwiZmluYWxQcm9wTmFtZSIsImZpbmFsIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiYm94IiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJjb21wdXRlZFZhbCIsImV4dHJhIiwiZGVsdGEiLCJjZWlsIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRQcm9wIiwiZ2V0Q2xpZW50UmVjdHMiLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3BhY2l0eSIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsInNjcm9sbGJveFNpemVCdWdneSIsImJvcmRlciIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJwcm9wSG9va3MiLCJydW4iLCJwZXJjZW50IiwiZWFzZWQiLCJzdGVwIiwiZngiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJ0aW1lciIsImFuaW0iLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwidGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImJvb2wiLCJhdHRyTmFtZXMiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImZvY3VzaW4iLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImF0dGFjaGVzIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiYWpheFNldHVwIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidW53cmFwIiwidmlzaWJsZSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInNjcmlwdEF0dHJzIiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInBhcmFtcyIsImFuaW1hdGVkIiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsIndpbiIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsIkhlaWdodCIsIldpZHRoIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwicHJveHkiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJfalF1ZXJ5IiwiXyQiLCJpc0Jyb3dzZXIiLCJ0aW1lb3V0RHVyYXRpb24iLCJsb25nZXJUaW1lb3V0QnJvd3NlcnMiLCJ1c2VyQWdlbnQiLCJkZWJvdW5jZSIsIlByb21pc2UiLCJzY2hlZHVsZWQiLCJmdW5jdGlvblRvQ2hlY2siLCJnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkiLCJnZXRQYXJlbnROb2RlIiwiZ2V0U2Nyb2xsUGFyZW50IiwiX2dldFN0eWxlQ29tcHV0ZWRQcm9wIiwiZ2V0UmVmZXJlbmNlTm9kZSIsInJlZmVyZW5jZU5vZGUiLCJpc0lFMTEiLCJNU0lucHV0TWV0aG9kQ29udGV4dCIsImRvY3VtZW50TW9kZSIsImlzSUUxMCIsImlzSUUiLCJnZXRPZmZzZXRQYXJlbnQiLCJub09mZnNldFBhcmVudCIsIm5leHRFbGVtZW50U2libGluZyIsImdldFJvb3QiLCJmaW5kQ29tbW9uT2Zmc2V0UGFyZW50IiwiZWxlbWVudDEiLCJlbGVtZW50MiIsIm9yZGVyIiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwicmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJlbGVtZW50MXJvb3QiLCJnZXRTY3JvbGwiLCJ1cHBlclNpZGUiLCJzY3JvbGxpbmdFbGVtZW50IiwiZ2V0Qm9yZGVyc1NpemUiLCJheGlzIiwic2lkZUEiLCJzaWRlQiIsImdldFNpemUiLCJjb21wdXRlZFN0eWxlIiwiZ2V0V2luZG93U2l6ZXMiLCJjbGFzc0NhbGxDaGVjayIsImNyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsIl9leHRlbmRzIiwiYXNzaWduIiwiZ2V0Q2xpZW50UmVjdCIsInNpemVzIiwiaG9yaXpTY3JvbGxiYXIiLCJ2ZXJ0U2Nyb2xsYmFyIiwiZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlIiwiZml4ZWRQb3NpdGlvbiIsImlzSFRNTCIsImNoaWxkcmVuUmVjdCIsInBhcmVudFJlY3QiLCJzY3JvbGxQYXJlbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1vZGlmaWVyIiwiaW5jbHVkZVNjcm9sbCIsImdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQiLCJwYXJlbnRFbGVtZW50IiwiZ2V0Qm91bmRhcmllcyIsImJvdW5kYXJpZXMiLCJleGNsdWRlU2Nyb2xsIiwicmVsYXRpdmVPZmZzZXQiLCJnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUiLCJib3VuZGFyaWVzTm9kZSIsImlzRml4ZWQiLCJfZ2V0V2luZG93U2l6ZXMiLCJpc1BhZGRpbmdOdW1iZXIiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInJlZlJlY3QiLCJyZWN0cyIsInNvcnRlZEFyZWFzIiwiX3JlZiIsImZpbHRlcmVkQXJlYXMiLCJfcmVmMiIsImNvbXB1dGVkUGxhY2VtZW50IiwidmFyaWF0aW9uIiwiZ2V0UmVmZXJlbmNlT2Zmc2V0cyIsImdldE91dGVyU2l6ZXMiLCJ4IiwieSIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwiZ2V0UG9wcGVyT2Zmc2V0cyIsInJlZmVyZW5jZU9mZnNldHMiLCJwb3BwZXJSZWN0IiwicG9wcGVyT2Zmc2V0cyIsImlzSG9yaXoiLCJtYWluU2lkZSIsInNlY29uZGFyeVNpZGUiLCJtZWFzdXJlbWVudCIsInNlY29uZGFyeU1lYXN1cmVtZW50IiwicnVuTW9kaWZpZXJzIiwiZW5kcyIsImZpbmRJbmRleCIsImlzRGVzdHJveWVkIiwiYXJyb3dTdHlsZXMiLCJmbGlwcGVkIiwicG9zaXRpb25GaXhlZCIsImlzQ3JlYXRlZCIsImlzTW9kaWZpZXJFbmFibGVkIiwibW9kaWZpZXJOYW1lIiwic29tZSIsImdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSIsInByZWZpeGVzIiwidXBwZXJQcm9wIiwidG9DaGVjayIsIndpbGxDaGFuZ2UiLCJkaXNhYmxlRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVPbkRlc3Ryb3kiLCJnZXRXaW5kb3ciLCJzZXR1cEV2ZW50TGlzdGVuZXJzIiwidXBkYXRlQm91bmQiLCJwYXNzaXZlIiwic2Nyb2xsRWxlbWVudCIsImF0dGFjaFRvU2Nyb2xsUGFyZW50cyIsInNjcm9sbFBhcmVudHMiLCJpc0JvZHkiLCJldmVudHNFbmFibGVkIiwiZW5hYmxlRXZlbnRMaXN0ZW5lcnMiLCJzZXRTdHlsZXMiLCJpc0ZpcmVmb3giLCJpc01vZGlmaWVyUmVxdWlyZWQiLCJyZXF1ZXN0aW5nTmFtZSIsInJlcXVlc3RlZE5hbWUiLCJyZXF1ZXN0aW5nIiwiaXNSZXF1aXJlZCIsIl9yZXF1ZXN0aW5nIiwicmVxdWVzdGVkIiwicGxhY2VtZW50cyIsInZhbGlkUGxhY2VtZW50cyIsImNsb2Nrd2lzZSIsImNvdW50ZXIiLCJCRUhBVklPUlMiLCJGTElQIiwiQ0xPQ0tXSVNFIiwiQ09VTlRFUkNMT0NLV0lTRSIsInBhcnNlT2Zmc2V0IiwiYmFzZVBsYWNlbWVudCIsInVzZUhlaWdodCIsImZyYWdtZW50cyIsImZyYWciLCJkaXZpZGVyIiwic2VhcmNoIiwic3BsaXRSZWdleCIsIm9wcyIsIm9wIiwibWVyZ2VXaXRoUHJldmlvdXMiLCJyZWR1Y2UiLCJ0b1ZhbHVlIiwiaW5kZXgyIiwiRGVmYXVsdHMiLCJzaGlmdHZhcmlhdGlvbiIsIl9kYXRhJG9mZnNldHMiLCJpc1ZlcnRpY2FsIiwic2lkZSIsInNoaWZ0T2Zmc2V0cyIsInRyYW5zZm9ybVByb3AiLCJwb3BwZXJTdHlsZXMiLCJ0cmFuc2Zvcm0iLCJwcmlvcml0eSIsInByaW1hcnkiLCJlc2NhcGVXaXRoUmVmZXJlbmNlIiwic2Vjb25kYXJ5Iiwia2VlcFRvZ2V0aGVyIiwiZmxvb3IiLCJvcFNpZGUiLCJfZGF0YSRvZmZzZXRzJGFycm93IiwiYXJyb3dFbGVtZW50Iiwic2lkZUNhcGl0YWxpemVkIiwiYWx0U2lkZSIsImFycm93RWxlbWVudFNpemUiLCJjZW50ZXIiLCJwb3BwZXJNYXJnaW5TaWRlIiwicG9wcGVyQm9yZGVyU2lkZSIsInNpZGVWYWx1ZSIsInBsYWNlbWVudE9wcG9zaXRlIiwiZmxpcE9yZGVyIiwicmVmT2Zmc2V0cyIsIm92ZXJsYXBzUmVmIiwib3ZlcmZsb3dzTGVmdCIsIm92ZXJmbG93c1JpZ2h0Iiwib3ZlcmZsb3dzVG9wIiwib3ZlcmZsb3dzQm90dG9tIiwib3ZlcmZsb3dzQm91bmRhcmllcyIsImZsaXBwZWRWYXJpYXRpb25CeVJlZiIsImZsaXBWYXJpYXRpb25zIiwiZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudCIsImZsaXBWYXJpYXRpb25zQnlDb250ZW50IiwiZmxpcHBlZFZhcmlhdGlvbiIsImdldE9wcG9zaXRlVmFyaWF0aW9uIiwiaW5uZXIiLCJzdWJ0cmFjdExlbmd0aCIsImJvdW5kIiwiY29tcHV0ZVN0eWxlIiwibGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIiwiZ3B1QWNjZWxlcmF0aW9uIiwib2Zmc2V0UGFyZW50UmVjdCIsInNob3VsZFJvdW5kIiwibm9Sb3VuZCIsInJlZmVyZW5jZVdpZHRoIiwicG9wcGVyV2lkdGgiLCJpc1ZhcmlhdGlvbiIsImhvcml6b250YWxUb0ludGVnZXIiLCJ2ZXJ0aWNhbFRvSW50ZWdlciIsImdldFJvdW5kZWRPZmZzZXRzIiwiZGV2aWNlUGl4ZWxSYXRpbyIsInByZWZpeGVkUHJvcGVydHkiLCJpbnZlcnRUb3AiLCJpbnZlcnRMZWZ0Iiwib25Mb2FkIiwibW9kaWZpZXJPcHRpb25zIiwiVXRpbHMiLCJQb3BwZXJVdGlscyIsIk5hTiIsImYiLCJhc2NlbmRpbmciLCJsbyIsImhpIiwibWlkIiwiYXNjZW5kaW5nQmlzZWN0IiwiYmlzZWN0b3IiLCJiaXNlY3RSaWdodCIsImJpc2VjdCIsInZhbHVlb2YiLCJlMTAiLCJzcXJ0IiwiZTUiLCJlMiIsInRpY2tzIiwidGlja0luY3JlbWVudCIsInBvd2VyIiwiTE4xMCIsInBvdyIsInRpY2tTdGVwIiwic3RlcDAiLCJzdGVwMSIsIkxOMiIsImlkZW50aXR5IiwiZG9tYWluIiwidGhyZXNob2xkIiwic3R1cmdlcyIsImhpc3RvZ3JhbSIsInh6IiwieDAiLCJ4MSIsInR6IiwiYmluIiwiYmlucyIsImNvbnN0YW50IiwidGhyZXNob2xkcyIsImVwc2lsb24iLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsImJhbmR3aWR0aCIsImVudGVyaW5nIiwiX19heGlzIiwib3JpZW50IiwidGlja0FyZ3VtZW50cyIsInRpY2tWYWx1ZXMiLCJ0aWNrRm9ybWF0IiwidGlja1NpemVJbm5lciIsInRpY2tTaXplT3V0ZXIiLCJ0aWNrUGFkZGluZyIsImsiLCJmb3JtYXQiLCJzcGFjaW5nIiwicmFuZ2UwIiwicmFuZ2UxIiwicGF0aCIsInNlbGVjdEFsbCIsInRpY2tFeGl0IiwiZXhpdCIsInRpY2tFbnRlciIsImVudGVyIiwibGluZSIsInRpY2tTaXplIiwiYXhpc0JvdHRvbSIsImF4aXNMZWZ0IiwiRGlzcGF0Y2giLCJwYXJzZVR5cGVuYW1lcyIsInR5cGVuYW1lcyIsInR5cGVuYW1lIiwiVCIsInhodG1sIiwic3ZnIiwieGxpbmsiLCJ4bWxucyIsInNwYWNlIiwibG9jYWwiLCJjcmVhdG9ySW5oZXJpdCIsInVyaSIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0b3JGaXhlZCIsIm5vbmUiLCJFbnRlck5vZGUiLCJkYXR1bSIsIl9uZXh0IiwiX19kYXRhX18iLCJjaGlsZCIsImtleVByZWZpeCIsImJpbmRJbmRleCIsImdyb3VwIiwiZ3JvdXBMZW5ndGgiLCJkYXRhTGVuZ3RoIiwiYmluZEtleSIsImtleVZhbHVlIiwibm9kZUJ5S2V5VmFsdWUiLCJrZXlWYWx1ZXMiLCJhdHRyUmVtb3ZlIiwiYXR0clJlbW92ZU5TIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJhdHRyQ29uc3RhbnQiLCJhdHRyQ29uc3RhbnROUyIsInNldEF0dHJpYnV0ZU5TIiwiYXR0ckZ1bmN0aW9uIiwiYXR0ckZ1bmN0aW9uTlMiLCJzdHlsZVJlbW92ZSIsInJlbW92ZVByb3BlcnR5Iiwic3R5bGVDb25zdGFudCIsInN0eWxlRnVuY3Rpb24iLCJzdHlsZVZhbHVlIiwicHJvcGVydHlSZW1vdmUiLCJwcm9wZXJ0eUNvbnN0YW50IiwicHJvcGVydHlGdW5jdGlvbiIsImNsYXNzQXJyYXkiLCJDbGFzc0xpc3QiLCJfbm9kZSIsIl9uYW1lcyIsImNsYXNzZWRBZGQiLCJjbGFzc2VkUmVtb3ZlIiwiY2xhc3NlZFRydWUiLCJjbGFzc2VkRmFsc2UiLCJjbGFzc2VkRnVuY3Rpb24iLCJ0ZXh0UmVtb3ZlIiwidGV4dENvbnN0YW50IiwidGV4dEZ1bmN0aW9uIiwiaHRtbFJlbW92ZSIsImh0bWxDb25zdGFudCIsImh0bWxGdW5jdGlvbiIsInJhaXNlIiwibG93ZXIiLCJwcmV2aW91c1NpYmxpbmciLCJjb25zdGFudE51bGwiLCJzZWxlY3Rpb25fY2xvbmVTaGFsbG93Iiwic2VsZWN0aW9uX2Nsb25lRGVlcCIsImZpbHRlckV2ZW50cyIsImZpbHRlckNvbnRleHRMaXN0ZW5lciIsImNvbnRleHRMaXN0ZW5lciIsImV2ZW50MSIsImV2ZW50MCIsIm9uUmVtb3ZlIiwiX19vbiIsImNhcHR1cmUiLCJvbkFkZCIsIkN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hDb25zdGFudCIsImRpc3BhdGNoRnVuY3Rpb24iLCJTZWxlY3Rpb24iLCJfZ3JvdXBzIiwiX3BhcmVudHMiLCJzdWJncm91cHMiLCJzdWJub2RlIiwic3ViZ3JvdXAiLCJzZWxlY3RvckFsbCIsImVudGVyR3JvdXAiLCJ1cGRhdGVHcm91cCIsImkwIiwiaTEiLCJfZXhpdCIsInNwYXJzZSIsIm9uZW50ZXIiLCJvbnVwZGF0ZSIsIm9uZXhpdCIsImdyb3VwczAiLCJncm91cHMxIiwibTAiLCJtMSIsIm1lcmdlcyIsImdyb3VwMCIsImdyb3VwMSIsImNvbXBhcmVOb2RlIiwic29ydGdyb3VwcyIsInNvcnRncm91cCIsImdldEF0dHJpYnV0ZU5TIiwiY2xhc3NlZCIsImNyZWF0b3IiLCJuZXh0SWQiLCJMb2NhbCIsIkRyYWdFdmVudCIsInN1YmplY3QiLCJkeCIsImR5IiwiZGVmaW5pdGlvbiIsIkNvbG9yIiwicmVJIiwicmVOIiwicmVQIiwicmVIZXgiLCJyZVJnYkludGVnZXIiLCJyZVJnYlBlcmNlbnQiLCJyZVJnYmFJbnRlZ2VyIiwicmVSZ2JhUGVyY2VudCIsInJlSHNsUGVyY2VudCIsInJlSHNsYVBlcmNlbnQiLCJuYW1lZCIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiY29sb3JfZm9ybWF0SGV4IiwicmdiIiwiZm9ybWF0SGV4IiwiY29sb3JfZm9ybWF0UmdiIiwiZm9ybWF0UmdiIiwicmdibiIsIlJnYiIsInJnYmEiLCJoc2xhIiwicmdiQ29udmVydCIsInJnYl9mb3JtYXRIZXgiLCJoZXgiLCJyZ2JfZm9ybWF0UmdiIiwiaCIsIkhzbCIsImhzbENvbnZlcnQiLCJoc2wiLCJoc2wycmdiIiwibTIiLCJiYXNpcyIsInQxIiwidjAiLCJ2MSIsInYyIiwidjMiLCJ0MiIsInQzIiwiZGVmaW5lIiwiY2hhbm5lbHMiLCJkaXNwbGF5YWJsZSIsImZvcm1hdEhzbCIsImJyaWdodGVyIiwiZGFya2VyIiwiZ2FtbWEiLCJub2dhbW1hIiwiZXhwb25lbnRpYWwiLCJjb2xvciIsInJnYkdhbW1hIiwicmdiU3BsaW5lIiwic3BsaW5lIiwiY29sb3JzIiwibmIiLCJuYSIsInNldFRpbWUiLCJyZUEiLCJyZUIiLCJjc3NOb2RlIiwiY3NzUm9vdCIsImNzc1ZpZXciLCJzdmdOb2RlIiwiYW0iLCJibSIsImJzIiwiYmkiLCJsYXN0SW5kZXgiLCJxIiwidmFsdWVPZiIsImRlZ3JlZXMiLCJyb3RhdGUiLCJza2V3WCIsInNjYWxlWCIsInNjYWxlWSIsImF0YW4yIiwiYXRhbiIsImludGVycG9sYXRlVHJhbnNmb3JtIiwicHhDb21tYSIsInB4UGFyZW4iLCJkZWdQYXJlbiIsInhhIiwieWEiLCJ4YiIsInliIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MiLCJkZWNvbXBvc2UiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsIm1hdHJpeCIsIlNRUlQyIiwiaHVlIiwiZGVnMnJhZCIsInJhZDJkZWciLCJYbiIsIlluIiwiWm4iLCJsYWJDb252ZXJ0IiwiTGFiIiwiSGNsIiwiaGNsMmxhYiIsInoiLCJyZ2IybHJnYiIsInh5ejJsYWIiLCJsYWIiLCJsYWIyeHl6IiwibHJnYjJyZ2IiLCJoY2xDb252ZXJ0IiwiaGNsIiwic2luIiwiQSIsIkMiLCJFRCIsIkVCIiwiQkNfREEiLCJDdWJlaGVsaXgiLCJibCIsImN1YmVoZWxpeENvbnZlcnQiLCJjdWJlaGVsaXhHYW1tYSIsImN1YmVoZWxpeCIsImNvc2giLCJzaW5oIiwidGFza0hlYWQiLCJ0YXNrVGFpbCIsInBva2VEZWxheSIsImNsb2NrTGFzdCIsImNsb2NrTm93IiwiY2xvY2tTa2V3IiwiY2xvY2siLCJwZXJmb3JtYW5jZSIsInNldEZyYW1lIiwiY2xlYXJOb3ciLCJUaW1lciIsIl9jYWxsIiwiX3RpbWUiLCJyZXN0YXJ0Iiwid2FrZSIsInRpbWVyRmx1c2giLCJ0MCIsIkluZmluaXR5Iiwic2xlZXAiLCJuYXAiLCJwb2tlIiwiZWxhcHNlZCIsImVtcHR5T24iLCJlbXB0eVR3ZWVuIiwiQ1JFQVRFRCIsIlNDSEVEVUxFRCIsIlNUQVJUSU5HIiwiU1RBUlRFRCIsIlJVTk5JTkciLCJFTkRJTkciLCJFTkRFRCIsInNjaGVkdWxlcyIsIl9fdHJhbnNpdGlvbiIsImVhc2UiLCJ0aW1pbmciLCJ0d2VlblJlbW92ZSIsInR3ZWVuMCIsInR3ZWVuMSIsInR3ZWVuRnVuY3Rpb24iLCJ0d2VlblZhbHVlIiwiX2lkIiwiaW50ZXJwb2xhdGUiLCJ2YWx1ZTEiLCJzdHJpbmcwMCIsImludGVycG9sYXRlMCIsInN0cmluZzEiLCJzdHJpbmcwIiwic3RyaW5nMTAiLCJhdHRyVHdlZW5OUyIsImF0dHJJbnRlcnBvbGF0ZU5TIiwiX3ZhbHVlIiwiYXR0clR3ZWVuIiwiYXR0ckludGVycG9sYXRlIiwiZGVsYXlGdW5jdGlvbiIsImRlbGF5Q29uc3RhbnQiLCJkdXJhdGlvbkZ1bmN0aW9uIiwiZHVyYXRpb25Db25zdGFudCIsImVhc2VDb25zdGFudCIsIm9uRnVuY3Rpb24iLCJvbjAiLCJvbjEiLCJzaXQiLCJldmVyeSIsInN0eWxlVHdlZW4iLCJzdHlsZUludGVycG9sYXRlIiwiVHJhbnNpdGlvbiIsIl9uYW1lIiwibmV3SWQiLCJzZWxlY3Rpb25fcHJvdG90eXBlIiwiaW5oZXJpdCIsImlkMCIsImlkMSIsInN0eWxlTnVsbCIsImxpc3RlbmVyMCIsInN0eWxlTWF5YmVSZW1vdmUiLCJjYW5jZWwiLCJpbnRlcnJ1cHQiLCJjdXN0b20iLCJwb2x5SW4iLCJleHBvbmVudCIsInBvbHlPdXQiLCJwb2x5SW5PdXQiLCJiYWNrSW4iLCJvdmVyc2hvb3QiLCJiYWNrT3V0IiwiYmFja0luT3V0IiwidGF1IiwiZGVmYXVsdFRpbWluZyIsImFzaW4iLCJlbGFzdGljSW4iLCJhbXBsaXR1ZGUiLCJwZXJpb2QiLCJlbGFzdGljT3V0IiwiZWxhc3RpY0luT3V0IiwibnVtYmVyMSIsIm51bWJlcjIiLCJ0YXVFcHNpbG9uIiwiUGF0aCIsIl94MCIsIl95MCIsIl94MSIsIl95MSIsIm1vdmVUbyIsImNsb3NlUGF0aCIsImxpbmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJ5MSIsImJlemllckN1cnZlVG8iLCJ4MiIsInkyIiwiYXJjVG8iLCJ5MCIsIngyMSIsInkyMSIsIngwMSIsInkwMSIsImwwMV8yIiwieDIwIiwieTIwIiwibDIxXzIiLCJsMjBfMiIsImwyMSIsImwwMSIsImFjb3MiLCJ0MDEiLCJ0MjEiLCJhcmMiLCJhMCIsImExIiwiY2N3IiwiY3ciLCJkYSIsIk1hcCIsImNsZWFyIiwiZW50cmllcyIsIlNldCIsIkVPTCIsIkVPRiIsIlFVT1RFIiwiTkVXTElORSIsIlJFVFVSTiIsIm9iamVjdENvbnZlcnRlciIsImNvbHVtbnMiLCJzdHJpbmdpZnkiLCJpbmZlckNvbHVtbnMiLCJyb3dzIiwiY29sdW1uU2V0Iiwicm93IiwiY29sdW1uIiwicGFkIiwiZm9ybWF0RGF0ZSIsImRhdGUiLCJ5ZWFyIiwiaG91cnMiLCJnZXRVVENIb3VycyIsIm1pbnV0ZXMiLCJnZXRVVENNaW51dGVzIiwic2Vjb25kcyIsImdldFVUQ1NlY29uZHMiLCJtaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsInJlRm9ybWF0IiwiZGVsaW1pdGVyIiwiREVMSU1JVEVSIiwicGFyc2VSb3dzIiwiTiIsIkkiLCJlb2YiLCJlb2wiLCJwcmVmb3JtYXRCb2R5IiwiZm9ybWF0VmFsdWUiLCJmb3JtYXRSb3ciLCJjb252ZXJ0IiwiY3VzdG9tQ29udmVydGVyIiwiZm9ybWF0Qm9keSIsImZvcm1hdFJvd3MiLCJjc3YiLCJkc3YiLCJjc3ZQYXJzZSIsInRzdiIsInRzdlBhcnNlIiwib2siLCJmZXRjaCIsImRzdlBhcnNlIiwicmVzcG9uc2VKc29uIiwicGFyc2VyIiwidHJlZSIsInhtIiwieW0iLCJ4cCIsInlwIiwiX3Jvb3QiLCJsZWFmIiwiX3giLCJfeSIsInF1YWR0cmVlIiwiUXVhZHRyZWUiLCJhZGRBbGwiLCJsZWFmX2NvcHkiLCJ0cmVlUHJvdG8iLCJjb3ZlciIsInl6IiwidmlzaXQiLCJleHRlbnQiLCJ4MyIsInkzIiwicXVhZHMiLCJyYWRpdXMiLCJkMiIsInJldGFpbmVyIiwicmVtb3ZlQWxsIiwidmlzaXRBZnRlciIsInRvRXhwb25lbnRpYWwiLCJjb2VmZmljaWVudCIsImZvcm1hdERlY2ltYWwiLCJyZSIsImZvcm1hdFNwZWNpZmllciIsInNwZWNpZmllciIsIkZvcm1hdFNwZWNpZmllciIsImZpbGwiLCJhbGlnbiIsInNpZ24iLCJzeW1ib2wiLCJ6ZXJvIiwiY29tbWEiLCJwcmVjaXNpb24iLCJwcmVmaXhFeHBvbmVudCIsIm91dCIsInRvRml4ZWQiLCJ0b1ByZWNpc2lvbiIsImZvcm1hdFJvdW5kZWQiLCJsb2NhbGUiLCJncm91cGluZyIsInRob3VzYW5kcyIsInN1YnN0cmluZyIsImN1cnJlbmN5UHJlZml4IiwiY3VycmVuY3kiLCJjdXJyZW5jeVN1ZmZpeCIsImRlY2ltYWwiLCJudW1lcmFscyIsImZvcm1hdE51bWVyYWxzIiwibWludXMiLCJuYW4iLCJuZXdGb3JtYXQiLCJmb3JtYXRUeXBlcyIsImZvcm1hdFR5cGUiLCJtYXliZVN1ZmZpeCIsInZhbHVlUHJlZml4IiwidmFsdWVTdWZmaXgiLCJ2YWx1ZU5lZ2F0aXZlIiwiZm9ybWF0VHJpbSIsImZvcm1hdFByZWZpeCIsInN1bSIsImhpZXJhcmNoeSIsImNoaWxkcyIsInZhbHVlZCIsImRlZmF1bHRDaGlsZHJlbiIsImVhY2hCZWZvcmUiLCJjb21wdXRlSGVpZ2h0IiwiY29weURhdGEiLCJlYWNoQWZ0ZXIiLCJhbmNlc3RvciIsImFOb2RlcyIsImFuY2VzdG9ycyIsImJOb2RlcyIsImxlYXN0Q29tbW9uQW5jZXN0b3IiLCJkZXNjZW5kYW50cyIsImxlYXZlcyIsImxpbmtzIiwiY2lyY2xlcyIsImFycmF5IiwiQiIsImVuY2xvc2VzV2VhayIsImVuY2xvc2VCYXNpcyIsImV4dGVuZEJhc2lzIiwiZW5jbG9zZXNXZWFrQWxsIiwiZW5jbG9zZXNOb3QiLCJlbmNsb3NlQmFzaXMyIiwiZW5jbG9zZUJhc2lzMyIsImRyIiwicjEiLCJyMiIsInIyMSIsInIzIiwiYTIiLCJhMyIsImIyIiwiYjMiLCJjMiIsImMzIiwiZDEiLCJkMyIsImFiIiwicGxhY2UiLCJpbnRlcnNlY3RzIiwic2NvcmUiLCJjaXJjbGUiLCJwYWNrRW5jbG9zZSIsImFhIiwiY2EiLCJzaiIsInNrIiwicGFjayIsImVuY2xvc2UiLCJvcHRpb25hbCIsInJlcXVpcmVkIiwiY29uc3RhbnRaZXJvIiwicmFkaXVzTGVhZiIsInBhY2tDaGlsZHJlbiIsInRyYW5zbGF0ZUNoaWxkIiwicHJlcm9vdCIsImFtYmlndW91cyIsImRlZmF1bHRJZCIsImRlZmF1bHRQYXJlbnRJZCIsInBhcmVudElkIiwiVHJlZU5vZGUiLCJwaGkiLCJzcXVhcmlmeVJhdGlvIiwicmF0aW8iLCJzdW1WYWx1ZSIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJuZXdSYXRpbyIsIm1pblJhdGlvIiwiYWxwaGEiLCJiZXRhIiwiZGljZSIsInNxdWFyaWZ5IiwidGlsZSIsInBhZGRpbmdTdGFjayIsInBhZGRpbmdJbm5lciIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwidHJlZW1hcCIsInBvc2l0aW9uTm9kZSIsInBhZGRpbmdPdXRlciIsInJlc3F1YXJpZnkiLCJfc3F1YXJpZnkiLCJyYW5kb21Vbmlmb3JtIiwic291cmNlUmFuZG9tVW5pZm9ybSIsInJhbmRvbU5vcm1hbCIsIm11Iiwic2lnbWEiLCJzb3VyY2VSYW5kb21Ob3JtYWwiLCJyYW5kb21Mb2dOb3JtYWwiLCJub3JtYWwiLCJleHAiLCJzb3VyY2VSYW5kb21Mb2dOb3JtYWwiLCJyYW5kb21JcndpbkhhbGwiLCJzb3VyY2VSYW5kb21JcndpbkhhbGwiLCJyYW5kb21CYXRlcyIsImlyd2luSGFsbCIsInNvdXJjZVJhbmRvbUJhdGVzIiwicmFuZG9tRXhwb25lbnRpYWwiLCJsYW1iZGEiLCJzb3VyY2VSYW5kb21FeHBvbmVudGlhbCIsImluaXRSYW5nZSIsImltcGxpY2l0Iiwib3JkaW5hbCIsInVua25vd24iLCJub3JtYWxpemUiLCJjbGFtcGVyIiwiYmltYXAiLCJkMCIsInIwIiwicG9seW1hcCIsImNsYW1wIiwidHJhbnNmb3JtZXIiLCJ1bnRyYW5zZm9ybSIsInBpZWNld2lzZSIsInJlc2NhbGUiLCJyYW5nZVJvdW5kIiwiY29udGludW91cyIsInByZWNpc2lvblByZWZpeCIsInByZWNpc2lvblJvdW5kIiwicHJlY2lzaW9uRml4ZWQiLCJsaW5lYXJpc2giLCJuaWNlIiwibmV3SW50ZXJ2YWwiLCJmbG9vcmkiLCJvZmZzZXRpIiwiZmllbGQiLCJzZXRNb250aCIsInNldEhvdXJzIiwic2V0RnVsbFllYXIiLCJnZXRGdWxsWWVhciIsInNldERhdGUiLCJnZXRNb250aCIsImR1cmF0aW9uTWludXRlIiwiZHVyYXRpb25XZWVrIiwid2Vla2RheSIsImdldERhdGUiLCJnZXREYXkiLCJnZXRUaW1lem9uZU9mZnNldCIsInN1bmRheSIsIm1vbmRheSIsInR1ZXNkYXkiLCJ3ZWRuZXNkYXkiLCJ0aHVyc2RheSIsImZyaWRheSIsInNhdHVyZGF5IiwidXRjV2Vla2RheSIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXkiLCJzZXRVVENIb3VycyIsInV0Y1N1bmRheSIsInV0Y01vbmRheSIsInV0Y1R1ZXNkYXkiLCJ1dGNXZWRuZXNkYXkiLCJ1dGNUaHVyc2RheSIsInV0Y0ZyaWRheSIsInV0Y1NhdHVyZGF5IiwidXRjRGF5IiwidXRjWWVhciIsInNldFVUQ01vbnRoIiwic2V0VVRDRnVsbFllYXIiLCJsb2NhbERhdGUiLCJIIiwiTSIsIlMiLCJMIiwidXRjRGF0ZSIsIlVUQyIsIm5ld0RhdGUiLCJ0aW1lRm9ybWF0IiwidGltZVBhcnNlIiwicGFkcyIsIm51bWJlclJlIiwicGVyY2VudFJlIiwicmVxdW90ZVJlIiwicmVxdW90ZSIsImZvcm1hdFJlIiwiZm9ybWF0TG9va3VwIiwicGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5IiwicGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5IiwicGFyc2VXZWVrTnVtYmVyU3VuZGF5IiwicGFyc2VXZWVrTnVtYmVySVNPIiwiViIsInBhcnNlV2Vla051bWJlck1vbmRheSIsIlciLCJwYXJzZUZ1bGxZZWFyIiwicGFyc2VZZWFyIiwicGFyc2Vab25lIiwiWiIsInBhcnNlUXVhcnRlciIsInBhcnNlTW9udGhOdW1iZXIiLCJwYXJzZURheU9mTW9udGgiLCJwYXJzZURheU9mWWVhciIsInBhcnNlSG91cjI0IiwicGFyc2VNaW51dGVzIiwicGFyc2VTZWNvbmRzIiwicGFyc2VNaWxsaXNlY29uZHMiLCJwYXJzZU1pY3Jvc2Vjb25kcyIsInBhcnNlTGl0ZXJhbFBlcmNlbnQiLCJwYXJzZVVuaXhUaW1lc3RhbXAiLCJRIiwicGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyIsImZvcm1hdERheU9mTW9udGgiLCJmb3JtYXRIb3VyMjQiLCJmb3JtYXRIb3VyMTIiLCJmb3JtYXREYXlPZlllYXIiLCJmb3JtYXRNaWxsaXNlY29uZHMiLCJmb3JtYXRNaWNyb3NlY29uZHMiLCJmb3JtYXRNb250aE51bWJlciIsImZvcm1hdE1pbnV0ZXMiLCJmb3JtYXRTZWNvbmRzIiwiZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSIsImRheSIsImZvcm1hdFdlZWtOdW1iZXJTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVySVNPIiwiZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFdlZWtOdW1iZXJNb25kYXkiLCJmb3JtYXRGdWxsWWVhciIsImZvcm1hdFpvbmUiLCJmb3JtYXRVVENEYXlPZk1vbnRoIiwiZm9ybWF0VVRDSG91cjI0IiwiZm9ybWF0VVRDSG91cjEyIiwiZm9ybWF0VVRDRGF5T2ZZZWFyIiwiZm9ybWF0VVRDTWlsbGlzZWNvbmRzIiwiZm9ybWF0VVRDTWljcm9zZWNvbmRzIiwiZm9ybWF0VVRDTW9udGhOdW1iZXIiLCJmb3JtYXRVVENNaW51dGVzIiwiZm9ybWF0VVRDU2Vjb25kcyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkiLCJkb3ciLCJmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlcklTTyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5IiwiZm9ybWF0VVRDWWVhciIsImZvcm1hdFVUQ0Z1bGxZZWFyIiwiZm9ybWF0VVRDWm9uZSIsImZvcm1hdExpdGVyYWxQZXJjZW50IiwiZm9ybWF0VW5peFRpbWVzdGFtcCIsImZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzIiwibG9jYWxlX2RhdGVUaW1lIiwiZGF0ZVRpbWUiLCJsb2NhbGVfZGF0ZSIsImxvY2FsZV90aW1lIiwibG9jYWxlX3BlcmlvZHMiLCJwZXJpb2RzIiwibG9jYWxlX3dlZWtkYXlzIiwiZGF5cyIsImxvY2FsZV9zaG9ydFdlZWtkYXlzIiwic2hvcnREYXlzIiwibG9jYWxlX21vbnRocyIsIm1vbnRocyIsImxvY2FsZV9zaG9ydE1vbnRocyIsInNob3J0TW9udGhzIiwicGVyaW9kUmUiLCJwZXJpb2RMb29rdXAiLCJ3ZWVrZGF5UmUiLCJ3ZWVrZGF5TG9va3VwIiwic2hvcnRXZWVrZGF5UmUiLCJzaG9ydFdlZWtkYXlMb29rdXAiLCJtb250aFJlIiwibW9udGhMb29rdXAiLCJzaG9ydE1vbnRoUmUiLCJzaG9ydE1vbnRoTG9va3VwIiwiZm9ybWF0cyIsInV0Y0Zvcm1hdHMiLCJwYXJzZXMiLCJwYXJzZVNwZWNpZmllciIsIm5ld1BhcnNlIiwid2VlayIsIlgiLCJ1dGNGb3JtYXQiLCJ1dGNQYXJzZSIsImZvcm1hdExvY2FsZSIsImR1cmF0aW9uTW9udGgiLCJkdXJhdGlvblllYXIiLCJjYWxlbmRhciIsIm1vbnRoIiwiaG91ciIsIm1pbnV0ZSIsIm1pbGxpc2Vjb25kIiwiZm9ybWF0TWlsbGlzZWNvbmQiLCJmb3JtYXRTZWNvbmQiLCJmb3JtYXRNaW51dGUiLCJmb3JtYXRIb3VyIiwiZm9ybWF0RGF5IiwiZm9ybWF0V2VlayIsImZvcm1hdE1vbnRoIiwiZm9ybWF0WWVhciIsInRpY2tJbnRlcnZhbHMiLCJ0aWNrSW50ZXJ2YWwiLCJ1dGNNb250aCIsInV0Y0hvdXIiLCJzZXRVVENNaW51dGVzIiwidXRjTWludXRlIiwic2V0VVRDU2Vjb25kcyIsImFyY0lubmVyUmFkaXVzIiwiaW5uZXJSYWRpdXMiLCJhcmNPdXRlclJhZGl1cyIsIm91dGVyUmFkaXVzIiwiYXJjU3RhcnRBbmdsZSIsInN0YXJ0QW5nbGUiLCJhcmNFbmRBbmdsZSIsImVuZEFuZ2xlIiwiYXJjUGFkQW5nbGUiLCJwYWRBbmdsZSIsImNvcm5lclRhbmdlbnRzIiwicmMiLCJveCIsIm95IiwieDExIiwieTExIiwieDEwIiwieTEwIiwieDAwIiwieTAwIiwiRCIsImN4MCIsImN5MCIsImN4MSIsImN5MSIsImR4MCIsImR5MCIsImR4MSIsImR5MSIsImN4IiwiY3kiLCJjb3JuZXJSYWRpdXMiLCJwYWRSYWRpdXMiLCJidWZmZXIiLCJhMDEiLCJhMTEiLCJhMDAiLCJhMTAiLCJkYTAiLCJkYTEiLCJycCIsInJjMCIsInJjMSIsInAwIiwicDEiLCJvYyIsIngzMiIsInkzMiIsImludGVyc2VjdCIsImF4IiwiYXkiLCJieCIsImJ5Iiwia2MiLCJsYyIsImNlbnRyb2lkIiwiTGluZWFyIiwiX2NvbnRleHQiLCJhcmVhU3RhcnQiLCJfbGluZSIsImFyZWFFbmQiLCJsaW5lU3RhcnQiLCJfcG9pbnQiLCJsaW5lRW5kIiwicG9pbnQiLCJzb3J0VmFsdWVzIiwicGllIiwiYXJjcyIsInBhIiwiY3VydmVSYWRpYWwiLCJSYWRpYWwiLCJjdXJ2ZSIsIl9jdXJ2ZSIsInJhZGlhbCIsImtyIiwiQmFzaXMiLCJCYXNpc0Nsb3NlZCIsIl94MiIsIl94MyIsIl94NCIsIl95MiIsIl95MyIsIl95NCIsIkJhc2lzT3BlbiIsIkJ1bmRsZSIsIl9iYXNpcyIsIl9iZXRhIiwiYnVuZGxlIiwiX2siLCJDYXJkaW5hbCIsInRlbnNpb24iLCJjYXJkaW5hbCIsIkNhcmRpbmFsQ2xvc2VkIiwiX3g1IiwiX3k1IiwiQ2FyZGluYWxPcGVuIiwiX2wwMV9hIiwiX2wwMV8yYSIsIl9sMTJfYSIsIl9sMTJfMmEiLCJfbDIzX2EiLCJfbDIzXzJhIiwiQ2F0bXVsbFJvbSIsIl9hbHBoYSIsIngyMyIsInkyMyIsImNhdG11bGxSb20iLCJDYXRtdWxsUm9tQ2xvc2VkIiwiQ2F0bXVsbFJvbU9wZW4iLCJMaW5lYXJDbG9zZWQiLCJzbG9wZTMiLCJoMCIsInMwIiwiczEiLCJzbG9wZTIiLCJNb25vdG9uZVgiLCJNb25vdG9uZVkiLCJSZWZsZWN0Q29udGV4dCIsIk5hdHVyYWwiLCJjb250cm9sUG9pbnRzIiwiX3QwIiwicHgiLCJweSIsIlN0ZXAiLCJfdCIsIlJlZEJsYWNrVHJlZSIsIlJlZEJsYWNrTm9kZSIsIlIiLCJQIiwiUmVkQmxhY2tSb3RhdGVMZWZ0IiwiUmVkQmxhY2tSb3RhdGVSaWdodCIsIlJlZEJsYWNrRmlyc3QiLCJncmFuZHBhIiwidW5jbGUiLCJjcmVhdGVFZGdlIiwiZWRnZSIsInNldEVkZ2VFbmQiLCJjZWxscyIsImhhbGZlZGdlcyIsImNyZWF0ZUJvcmRlckVkZ2UiLCJ2ZXJ0ZXgiLCJjbGlwRWRnZSIsImNvbm5lY3RFZGdlIiwiZm0iLCJmYiIsImx4IiwibHkiLCJyeCIsInJ5IiwiZnkiLCJjZWxsSGFsZmVkZ2VBbmdsZSIsImNlbGwiLCJzaXRlIiwidmEiLCJ2YiIsImNlbGxIYWxmZWRnZVN0YXJ0IiwiY2VsbEhhbGZlZGdlRW5kIiwiZmlyc3RDaXJjbGUiLCJjaXJjbGVQb29sIiwiQ2lyY2xlIiwiYXR0YWNoQ2lyY2xlIiwibEFyYyIsInJBcmMiLCJsU2l0ZSIsImNTaXRlIiwiclNpdGUiLCJoYSIsImhjIiwiZGV0YWNoQ2lyY2xlIiwiYmVhY2hQb29sIiwiQmVhY2giLCJjcmVhdGVCZWFjaCIsImJlYWNoIiwiZGV0YWNoQmVhY2giLCJiZWFjaGVzIiwicmVtb3ZlQmVhY2giLCJkaXNhcHBlYXJpbmciLCJpQXJjIiwibkFyY3MiLCJhZGRCZWFjaCIsImR4bCIsImR4ciIsImRpcmVjdHJpeCIsImxlZnRCcmVha1BvaW50IiwicmlnaHRCcmVha1BvaW50IiwiY3JlYXRlQ2VsbCIsIm5ld0FyYyIsImhiIiwicmZvY3giLCJyZm9jeSIsInBieTIiLCJsZm9jeCIsImxmb2N5IiwicGxieTIiLCJobCIsImFieTIiLCJsZXhpY29ncmFwaGljIiwiRGlhZ3JhbSIsInNpdGVzIiwic29ydENlbGxIYWxmZWRnZXMiLCJjbGlwRWRnZXMiLCJpQ2VsbCIsImlIYWxmZWRnZSIsIm5IYWxmZWRnZXMiLCJzdGFydFgiLCJzdGFydFkiLCJlbmRYIiwiZW5kWSIsIm5DZWxscyIsImRjIiwidjAwIiwidjAxIiwidjExIiwidjEwIiwiY2xpcENlbGxzIiwiZWRnZXMiLCJwb2x5Z29ucyIsInBvbHlnb24iLCJ0cmlhbmdsZXMiLCJlMSIsIl9mb3VuZCIsInZ4IiwidnkiLCJUcmFuc2Zvcm0iLCJhcHBseVgiLCJhcHBseVkiLCJpbnZlcnRYIiwiaW52ZXJ0WSIsInJlc2NhbGVYIiwicmVzY2FsZVkiLCJEQVJLX0JHIiwiTElHSFRFUl9CRyIsIkxJR0hUX0dSRVkiLCJUSVRMRV9XSElURSIsIlRFQUwiLCJTRUxFQ1RJT05fR1JFRU4iLCJURURfUkVEIiwiQlJJR0hUX0dSRUVOIiwiQlJJR0hUX1JFRCIsIkJSSUdIVF9PUkFOR0UiLCJmdW5jdG9yIiwiaW5pdE5vZGUiLCJ2aXMiLCJvd25lclNWR0VsZW1lbnQiLCJjcmVhdGVTVkdQb2ludCIsImdldE5vZGVFbCIsImdldFNjcmVlbkJCb3giLCJ0YXJnZXRlbCIsImdldFNjcmVlbkNUTSIsInRiYm94IiwiZ2V0QkJveCIsImJib3giLCJudyIsIm1hdHJpeFRyYW5zZm9ybSIsIm5lIiwic2UiLCJzdyIsImRpcmVjdGlvbkNhbGxiYWNrcyIsImRpcmVjdGlvbnMiLCJwb2Zmc2V0Iiwibm9kZWwiLCJjb29yZHMiLCJwYXJzZVRpbWUiLCJkYXRlUmFuZ2UiLCJ4QXhpcyIsInlFeHRlbnQiLCJUb29sVGlwIiwidmlld3MiLCJ2aWV3U2VsZWN0b3IiLCJkcm9wZG93biIsImNhdGVnb3J5Iiwic3RyYXRpZnkiLCJub2RlSWQiLCJub2RlS2V5Iiwibm9kZUJ5S2V5IiwicHJvZmVzc2lvbiIsImNpcmNsZVBhY2siLCJjYmJveCIsImNpcmNsZVBhY2tQcm9mZXNzaW9ucyIsInRyZWVtYXBQcm9mZXNzaW9ucyIsInJhdGluZyIsInN2ZzEiLCJzdmcyIiwic3ZnMyIsImRpdjQiLCJyYXRpbmdzRGl2IiwidGFsayIsImRhdGFDbGVhbmVyIiwieWVhclJhbmdlIiwidGFsa0RhdGUiLCJ0ZWRTaXRlVmlld3MiLCJzdmdXaWR0aCIsImJhckhlaWdodCIsImljb25IZWlnaHQiLCJyYXRpbmdCYXJXaWR0aCIsImljb25PZmZzZXQiLCJwaWVPdXRlclJhZGl1cyIsInBpZUlubmVyUmFkaXVzIiwidXBkYXRlQ2hhcnQiLCJzZWxlY3RlZFRhbGtOYW1lIiwic2VsZWN0ZWRSb3ciLCJyYXRpbmdzU3RyaW5nIiwicmF0aW5ncyIsIm51bVJhdGluZ0NhdGVnb3JpZXMiLCJyYXRpbmdzU3BhY2luZyIsInJhdGluZ0RvbWFpbiIsImJhckciLCJ5U2NhbGUiLCJyYXRpbmdzRyIsInJhdGluZ3NFbnRlciIsImltYWdlU2VsZWN0b3IiLCJ0b3BSb3VuZGVkUmVjdCIsInBpZURhdGFSYXciLCJnb29kIiwiYmFkIiwidm90ZVRvdGFsIiwicGllVGlwIiwicGllRGF0YSIsInBpZUVudGVyIiwidGFsa1NlbGVjdG9yIiwicmF0aW5nc0JyZWFrZG93biIsInJlYWRpbmdMZXZlbCIsInByb2Zlc3Npb25zIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdB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YXRDLEdBQU0zNEYsS0FHckIsR0FBUSxpQ0FBaUNxMEIsS0FBS3IwQixJQUM1Q2s3RixHQUFZdEMsR0FBTTU0RixLQUdwQixHQUFRLG1DQUFtQ3EwQixLQUFLcjBCIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTEpO1xuIiwiLyohXHJcbiAqIFNjcm9sbE1hZ2ljIHYyLjAuNyAoMjAxOS0wNS0wNylcclxuICogVGhlIGphdmFzY3JpcHQgbGlicmFyeSBmb3IgbWFnaWNhbCBzY3JvbGwgaW50ZXJhY3Rpb25zLlxyXG4gKiAoYykgMjAxOSBKYW4gUGFlcGtlIChAamFucGFlcGtlKVxyXG4gKiBQcm9qZWN0IFdlYnNpdGU6IGh0dHA6Ly9zY3JvbGxtYWdpYy5pb1xyXG4gKiBcclxuICogQHZlcnNpb24gMi4wLjdcclxuICogQGxpY2Vuc2UgRHVhbCBsaWNlbnNlZCB1bmRlciBNSVQgbGljZW5zZSBhbmQgR1BMLlxyXG4gKiBAYXV0aG9yIEphbiBQYWVwa2UgLSBlLW1haWxAamFucGFlcGtlLmRlXHJcbiAqXHJcbiAqIEBmaWxlIFNjcm9sbE1hZ2ljIG1haW4gbGlicmFyeS5cclxuICovXHJcbi8qKlxyXG4gKiBAbmFtZXNwYWNlIFNjcm9sbE1hZ2ljXHJcbiAqL1xyXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcclxuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XHJcblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXHJcblx0XHRkZWZpbmUoZmFjdG9yeSk7XHJcblx0fSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcclxuXHRcdC8vIENvbW1vbkpTXHJcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxcclxuXHRcdHJvb3QuU2Nyb2xsTWFnaWMgPSBmYWN0b3J5KCk7XHJcblx0fVxyXG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcclxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHJcblx0dmFyIFNjcm9sbE1hZ2ljID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0X3V0aWwubG9nKDIsICcoQ09NUEFUSUJJTElUWSBOT1RJQ0UpIC0+IEFzIG9mIFNjcm9sbE1hZ2ljIDIuMC4wIHlvdSBuZWVkIHRvIHVzZSBcXCduZXcgU2Nyb2xsTWFnaWMuQ29udHJvbGxlcigpXFwnIHRvIGNyZWF0ZSBhIG5ldyBjb250cm9sbGVyIGluc3RhbmNlLiBVc2UgXFwnbmV3IFNjcm9sbE1hZ2ljLlNjZW5lKClcXCcgdG8gaW5zdGFuY2UgYSBzY2VuZS4nKTtcclxuXHR9O1xyXG5cclxuXHRTY3JvbGxNYWdpYy52ZXJzaW9uID0gXCIyLjAuN1wiO1xyXG5cclxuXHQvLyBUT0RPOiB0ZW1wb3Jhcnkgd29ya2Fyb3VuZCBmb3IgY2hyb21lJ3Mgc2Nyb2xsIGppdHRlciBidWdcclxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNld2hlZWxcIiwgZnVuY3Rpb24gKCkge30pO1xyXG5cclxuXHQvLyBnbG9iYWwgY29uc3RcclxuXHR2YXIgUElOX1NQQUNFUl9BVFRSSUJVVEUgPSBcImRhdGEtc2Nyb2xsbWFnaWMtcGluLXNwYWNlclwiO1xyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgbWFpbiBjbGFzcyB0aGF0IGlzIG5lZWRlZCBvbmNlIHBlciBzY3JvbGwgY29udGFpbmVyLlxyXG5cdCAqXHJcblx0ICogQGNsYXNzXHJcblx0ICpcclxuXHQgKiBAZXhhbXBsZVxyXG5cdCAqIC8vIGJhc2ljIGluaXRpYWxpemF0aW9uXHJcblx0ICogdmFyIGNvbnRyb2xsZXIgPSBuZXcgU2Nyb2xsTWFnaWMuQ29udHJvbGxlcigpO1xyXG5cdCAqXHJcblx0ICogLy8gcGFzc2luZyBvcHRpb25zXHJcblx0ICogdmFyIGNvbnRyb2xsZXIgPSBuZXcgU2Nyb2xsTWFnaWMuQ29udHJvbGxlcih7Y29udGFpbmVyOiBcIiNteUNvbnRhaW5lclwiLCBsb2dsZXZlbDogM30pO1xyXG5cdCAqXHJcblx0ICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIEFuIG9iamVjdCBjb250YWluaW5nIG9uZSBvciBtb3JlIG9wdGlvbnMgZm9yIHRoZSBjb250cm9sbGVyLlxyXG5cdCAqIEBwYXJhbSB7KHN0cmluZ3xvYmplY3QpfSBbb3B0aW9ucy5jb250YWluZXI9d2luZG93XSAtIEEgc2VsZWN0b3IsIERPTSBvYmplY3QgdGhhdCByZWZlcmVuY2VzIHRoZSBtYWluIGNvbnRhaW5lciBmb3Igc2Nyb2xsaW5nLlxyXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudmVydGljYWw9dHJ1ZV0gLSBTZXRzIHRoZSBzY3JvbGwgbW9kZSB0byB2ZXJ0aWNhbCAoYHRydWVgKSBvciBob3Jpem9udGFsIChgZmFsc2VgKSBzY3JvbGxpbmcuXHJcblx0ICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmdsb2JhbFNjZW5lT3B0aW9ucz17fV0gLSBUaGVzZSBvcHRpb25zIHdpbGwgYmUgcGFzc2VkIHRvIGV2ZXJ5IFNjZW5lIHRoYXQgaXMgYWRkZWQgdG8gdGhlIGNvbnRyb2xsZXIgdXNpbmcgdGhlIGFkZFNjZW5lIG1ldGhvZC4gRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gU2NlbmUgb3B0aW9ucyBzZWUge0BsaW5rIFNjcm9sbE1hZ2ljLlNjZW5lfS5cclxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubG9nbGV2ZWw9Ml0gTG9nbGV2ZWwgZm9yIGRlYnVnZ2luZy4gTm90ZSB0aGF0IGxvZ2dpbmcgaXMgZGlzYWJsZWQgaW4gdGhlIG1pbmlmaWVkIHZlcnNpb24gb2YgU2Nyb2xsTWFnaWMuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgKiogYDBgID0+IHNpbGVudFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ICoqIGAxYCA9PiBlcnJvcnNcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCAqKiBgMmAgPT4gZXJyb3JzLCB3YXJuaW5nc1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ICoqIGAzYCA9PiBlcnJvcnMsIHdhcm5pbmdzLCBkZWJ1Z2luZm9cclxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnJlZnJlc2hJbnRlcnZhbD0xMDBdIC0gU29tZSBjaGFuZ2VzIGRvbid0IGNhbGwgZXZlbnRzIGJ5IGRlZmF1bHQsIGxpa2UgY2hhbmdpbmcgdGhlIGNvbnRhaW5lciBzaXplIG9yIG1vdmluZyBhIHNjZW5lIHRyaWdnZXIgZWxlbWVudC4gIFxyXG5cdCBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0IFRoaXMgaW50ZXJ2YWwgcG9sbHMgdGhlc2UgcGFyYW1ldGVycyB0byBmaXJlIHRoZSBuZWNlc3NhcnkgZXZlbnRzLiAgXHJcblx0IFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgSWYgeW91IGRvbid0IHVzZSBjdXN0b20gY29udGFpbmVycywgdHJpZ2dlciBlbGVtZW50cyBvciBoYXZlIHN0YXRpYyBsYXlvdXRzLCB3aGVyZSB0aGUgcG9zaXRpb25zIG9mIHRoZSB0cmlnZ2VyIGVsZW1lbnRzIGRvbid0IGNoYW5nZSwgeW91IGNhbiBzZXQgdGhpcyB0byAwIGRpc2FibGUgaW50ZXJ2YWwgY2hlY2tpbmcgYW5kIGltcHJvdmUgcGVyZm9ybWFuY2UuXHJcblx0ICpcclxuXHQgKi9cclxuXHRTY3JvbGxNYWdpYy5Db250cm9sbGVyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHRcdC8qXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKiBzZXR0aW5nc1xyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICovXHJcblx0XHR2YXJcclxuXHRcdFx0TkFNRVNQQUNFID0gJ1Njcm9sbE1hZ2ljLkNvbnRyb2xsZXInLFxyXG5cdFx0XHRTQ1JPTExfRElSRUNUSU9OX0ZPUldBUkQgPSAnRk9SV0FSRCcsXHJcblx0XHRcdFNDUk9MTF9ESVJFQ1RJT05fUkVWRVJTRSA9ICdSRVZFUlNFJyxcclxuXHRcdFx0U0NST0xMX0RJUkVDVElPTl9QQVVTRUQgPSAnUEFVU0VEJyxcclxuXHRcdFx0REVGQVVMVF9PUFRJT05TID0gQ09OVFJPTExFUl9PUFRJT05TLmRlZmF1bHRzO1xyXG5cclxuXHRcdC8qXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKiBwcml2YXRlIHZhcnNcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqL1xyXG5cdFx0dmFyXHJcblx0XHRcdENvbnRyb2xsZXIgPSB0aGlzLFxyXG5cdFx0XHRfb3B0aW9ucyA9IF91dGlsLmV4dGVuZCh7fSwgREVGQVVMVF9PUFRJT05TLCBvcHRpb25zKSxcclxuXHRcdFx0X3NjZW5lT2JqZWN0cyA9IFtdLFxyXG5cdFx0XHRfdXBkYXRlU2NlbmVzT25OZXh0Q3ljbGUgPSBmYWxzZSwgLy8gY2FuIGJlIGJvb2xlYW4gKHRydWUgPT4gYWxsIHNjZW5lcykgb3IgYW4gYXJyYXkgb2Ygc2NlbmVzIHRvIGJlIHVwZGF0ZWRcclxuXHRcdFx0X3Njcm9sbFBvcyA9IDAsXHJcblx0XHRcdF9zY3JvbGxEaXJlY3Rpb24gPSBTQ1JPTExfRElSRUNUSU9OX1BBVVNFRCxcclxuXHRcdFx0X2lzRG9jdW1lbnQgPSB0cnVlLFxyXG5cdFx0XHRfdmlld1BvcnRTaXplID0gMCxcclxuXHRcdFx0X2VuYWJsZWQgPSB0cnVlLFxyXG5cdFx0XHRfdXBkYXRlVGltZW91dCxcclxuXHRcdFx0X3JlZnJlc2hUaW1lb3V0O1xyXG5cclxuXHRcdC8qXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKiBwcml2YXRlIGZ1bmN0aW9uc1xyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICovXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBJbnRlcm5hbCBjb25zdHJ1Y3RvciBmdW5jdGlvbiBvZiB0aGUgU2Nyb2xsTWFnaWMgQ29udHJvbGxlclxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0Zm9yICh2YXIga2V5IGluIF9vcHRpb25zKSB7XHJcblx0XHRcdFx0aWYgKCFERUZBVUxUX09QVElPTlMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG5cdFx0XHRcdFx0bG9nKDIsIFwiV0FSTklORzogVW5rbm93biBvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiXCIpO1xyXG5cdFx0XHRcdFx0ZGVsZXRlIF9vcHRpb25zW2tleV07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdF9vcHRpb25zLmNvbnRhaW5lciA9IF91dGlsLmdldC5lbGVtZW50cyhfb3B0aW9ucy5jb250YWluZXIpWzBdO1xyXG5cdFx0XHQvLyBjaGVjayBTY3JvbGxDb250YWluZXJcclxuXHRcdFx0aWYgKCFfb3B0aW9ucy5jb250YWluZXIpIHtcclxuXHRcdFx0XHRsb2coMSwgXCJFUlJPUiBjcmVhdGluZyBvYmplY3QgXCIgKyBOQU1FU1BBQ0UgKyBcIjogTm8gdmFsaWQgc2Nyb2xsIGNvbnRhaW5lciBzdXBwbGllZFwiKTtcclxuXHRcdFx0XHR0aHJvdyBOQU1FU1BBQ0UgKyBcIiBpbml0IGZhaWxlZC5cIjsgLy8gY2FuY2VsXHJcblx0XHRcdH1cclxuXHRcdFx0X2lzRG9jdW1lbnQgPSBfb3B0aW9ucy5jb250YWluZXIgPT09IHdpbmRvdyB8fCBfb3B0aW9ucy5jb250YWluZXIgPT09IGRvY3VtZW50LmJvZHkgfHwgIWRvY3VtZW50LmJvZHkuY29udGFpbnMoX29wdGlvbnMuY29udGFpbmVyKTtcclxuXHRcdFx0Ly8gbm9ybWFsaXplIHRvIHdpbmRvd1xyXG5cdFx0XHRpZiAoX2lzRG9jdW1lbnQpIHtcclxuXHRcdFx0XHRfb3B0aW9ucy5jb250YWluZXIgPSB3aW5kb3c7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gdXBkYXRlIGNvbnRhaW5lciBzaXplIGltbWVkaWF0ZWx5XHJcblx0XHRcdF92aWV3UG9ydFNpemUgPSBnZXRWaWV3cG9ydFNpemUoKTtcclxuXHRcdFx0Ly8gc2V0IGV2ZW50IGhhbmRsZXJzXHJcblx0XHRcdF9vcHRpb25zLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIG9uQ2hhbmdlKTtcclxuXHRcdFx0X29wdGlvbnMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgb25DaGFuZ2UpO1xyXG5cclxuXHRcdFx0dmFyIHJpID0gcGFyc2VJbnQoX29wdGlvbnMucmVmcmVzaEludGVydmFsLCAxMCk7XHJcblx0XHRcdF9vcHRpb25zLnJlZnJlc2hJbnRlcnZhbCA9IF91dGlsLnR5cGUuTnVtYmVyKHJpKSA/IHJpIDogREVGQVVMVF9PUFRJT05TLnJlZnJlc2hJbnRlcnZhbDtcclxuXHRcdFx0c2NoZWR1bGVSZWZyZXNoKCk7XHJcblxyXG5cdFx0XHRsb2coMywgXCJhZGRlZCBuZXcgXCIgKyBOQU1FU1BBQ0UgKyBcIiBjb250cm9sbGVyICh2XCIgKyBTY3JvbGxNYWdpYy52ZXJzaW9uICsgXCIpXCIpO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFNjaGVkdWxlIHRoZSBuZXh0IGV4ZWN1dGlvbiBvZiB0aGUgcmVmcmVzaCBmdW5jdGlvblxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIHNjaGVkdWxlUmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0aWYgKF9vcHRpb25zLnJlZnJlc2hJbnRlcnZhbCA+IDApIHtcclxuXHRcdFx0XHRfcmVmcmVzaFRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChyZWZyZXNoLCBfb3B0aW9ucy5yZWZyZXNoSW50ZXJ2YWwpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogRGVmYXVsdCBmdW5jdGlvbiB0byBnZXQgc2Nyb2xsIHBvcyAtIG92ZXJ3cml0ZWFibGUgdXNpbmcgYENvbnRyb2xsZXIuc2Nyb2xsUG9zKG5ld0Z1bmN0aW9uKWBcclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciBnZXRTY3JvbGxQb3MgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHJldHVybiBfb3B0aW9ucy52ZXJ0aWNhbCA/IF91dGlsLmdldC5zY3JvbGxUb3AoX29wdGlvbnMuY29udGFpbmVyKSA6IF91dGlsLmdldC5zY3JvbGxMZWZ0KF9vcHRpb25zLmNvbnRhaW5lcik7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogUmV0dXJucyB0aGUgY3VycmVudCB2aWV3cG9ydCBTaXplICh3aWR0aCB2b3IgaG9yaXpvbnRhbCwgaGVpZ2h0IGZvciB2ZXJ0aWNhbClcclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciBnZXRWaWV3cG9ydFNpemUgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHJldHVybiBfb3B0aW9ucy52ZXJ0aWNhbCA/IF91dGlsLmdldC5oZWlnaHQoX29wdGlvbnMuY29udGFpbmVyKSA6IF91dGlsLmdldC53aWR0aChfb3B0aW9ucy5jb250YWluZXIpO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIERlZmF1bHQgZnVuY3Rpb24gdG8gc2V0IHNjcm9sbCBwb3MgLSBvdmVyd3JpdGVhYmxlIHVzaW5nIGBDb250cm9sbGVyLnNjcm9sbFRvKG5ld0Z1bmN0aW9uKWBcclxuXHRcdCAqIE1ha2UgYXZhaWxhYmxlIHB1YmxpY2x5IGZvciBwaW5uZWQgbW91c2V3aGVlbCB3b3JrYXJvdW5kLlxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIHNldFNjcm9sbFBvcyA9IHRoaXMuX3NldFNjcm9sbFBvcyA9IGZ1bmN0aW9uIChwb3MpIHtcclxuXHRcdFx0aWYgKF9vcHRpb25zLnZlcnRpY2FsKSB7XHJcblx0XHRcdFx0aWYgKF9pc0RvY3VtZW50KSB7XHJcblx0XHRcdFx0XHR3aW5kb3cuc2Nyb2xsVG8oX3V0aWwuZ2V0LnNjcm9sbExlZnQoKSwgcG9zKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0X29wdGlvbnMuY29udGFpbmVyLnNjcm9sbFRvcCA9IHBvcztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0aWYgKF9pc0RvY3VtZW50KSB7XHJcblx0XHRcdFx0XHR3aW5kb3cuc2Nyb2xsVG8ocG9zLCBfdXRpbC5nZXQuc2Nyb2xsVG9wKCkpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRfb3B0aW9ucy5jb250YWluZXIuc2Nyb2xsTGVmdCA9IHBvcztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBIYW5kbGUgdXBkYXRlcyBpbiBjeWNsZXMgaW5zdGVhZCBvZiBvbiBzY3JvbGwgKHBlcmZvcm1hbmNlKVxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIHVwZGF0ZVNjZW5lcyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0aWYgKF9lbmFibGVkICYmIF91cGRhdGVTY2VuZXNPbk5leHRDeWNsZSkge1xyXG5cdFx0XHRcdC8vIGRldGVybWluZSBzY2VuZXMgdG8gdXBkYXRlXHJcblx0XHRcdFx0dmFyIHNjZW5lc1RvVXBkYXRlID0gX3V0aWwudHlwZS5BcnJheShfdXBkYXRlU2NlbmVzT25OZXh0Q3ljbGUpID8gX3VwZGF0ZVNjZW5lc09uTmV4dEN5Y2xlIDogX3NjZW5lT2JqZWN0cy5zbGljZSgwKTtcclxuXHRcdFx0XHQvLyByZXNldCBzY2VuZXNcclxuXHRcdFx0XHRfdXBkYXRlU2NlbmVzT25OZXh0Q3ljbGUgPSBmYWxzZTtcclxuXHRcdFx0XHR2YXIgb2xkU2Nyb2xsUG9zID0gX3Njcm9sbFBvcztcclxuXHRcdFx0XHQvLyB1cGRhdGUgc2Nyb2xsIHBvcyBub3cgaW5zdGVhZCBvZiBvbkNoYW5nZSwgYXMgaXQgbWlnaHQgaGF2ZSBjaGFuZ2VkIHNpbmNlIHNjaGVkdWxpbmcgKGkuZS4gaW4tYnJvd3NlciBzbW9vdGggc2Nyb2xsKVxyXG5cdFx0XHRcdF9zY3JvbGxQb3MgPSBDb250cm9sbGVyLnNjcm9sbFBvcygpO1xyXG5cdFx0XHRcdHZhciBkZWx0YVNjcm9sbCA9IF9zY3JvbGxQb3MgLSBvbGRTY3JvbGxQb3M7XHJcblx0XHRcdFx0aWYgKGRlbHRhU2Nyb2xsICE9PSAwKSB7IC8vIHNjcm9sbCBwb3NpdGlvbiBjaGFuZ2VkP1xyXG5cdFx0XHRcdFx0X3Njcm9sbERpcmVjdGlvbiA9IChkZWx0YVNjcm9sbCA+IDApID8gU0NST0xMX0RJUkVDVElPTl9GT1JXQVJEIDogU0NST0xMX0RJUkVDVElPTl9SRVZFUlNFO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvLyByZXZlcnNlIG9yZGVyIG9mIHNjZW5lcyBpZiBzY3JvbGxpbmcgcmV2ZXJzZVxyXG5cdFx0XHRcdGlmIChfc2Nyb2xsRGlyZWN0aW9uID09PSBTQ1JPTExfRElSRUNUSU9OX1JFVkVSU0UpIHtcclxuXHRcdFx0XHRcdHNjZW5lc1RvVXBkYXRlLnJldmVyc2UoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ly8gdXBkYXRlIHNjZW5lc1xyXG5cdFx0XHRcdHNjZW5lc1RvVXBkYXRlLmZvckVhY2goZnVuY3Rpb24gKHNjZW5lLCBpbmRleCkge1xyXG5cdFx0XHRcdFx0bG9nKDMsIFwidXBkYXRpbmcgU2NlbmUgXCIgKyAoaW5kZXggKyAxKSArIFwiL1wiICsgc2NlbmVzVG9VcGRhdGUubGVuZ3RoICsgXCIgKFwiICsgX3NjZW5lT2JqZWN0cy5sZW5ndGggKyBcIiB0b3RhbClcIik7XHJcblx0XHRcdFx0XHRzY2VuZS51cGRhdGUodHJ1ZSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0aWYgKHNjZW5lc1RvVXBkYXRlLmxlbmd0aCA9PT0gMCAmJiBfb3B0aW9ucy5sb2dsZXZlbCA+PSAzKSB7XHJcblx0XHRcdFx0XHRsb2coMywgXCJ1cGRhdGluZyAwIFNjZW5lcyAobm90aGluZyBhZGRlZCB0byBjb250cm9sbGVyKVwiKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBJbml0aWFsaXplcyByQUYgY2FsbGJhY2tcclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciBkZWJvdW5jZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0X3VwZGF0ZVRpbWVvdXQgPSBfdXRpbC5yQUYodXBkYXRlU2NlbmVzKTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBIYW5kbGVzIENvbnRhaW5lciBjaGFuZ2VzXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgb25DaGFuZ2UgPSBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRsb2coMywgXCJldmVudCBmaXJlZCBjYXVzaW5nIGFuIHVwZGF0ZTpcIiwgZS50eXBlKTtcclxuXHRcdFx0aWYgKGUudHlwZSA9PSBcInJlc2l6ZVwiKSB7XHJcblx0XHRcdFx0Ly8gcmVzaXplXHJcblx0XHRcdFx0X3ZpZXdQb3J0U2l6ZSA9IGdldFZpZXdwb3J0U2l6ZSgpO1xyXG5cdFx0XHRcdF9zY3JvbGxEaXJlY3Rpb24gPSBTQ1JPTExfRElSRUNUSU9OX1BBVVNFRDtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBzY2hlZHVsZSB1cGRhdGVcclxuXHRcdFx0aWYgKF91cGRhdGVTY2VuZXNPbk5leHRDeWNsZSAhPT0gdHJ1ZSkge1xyXG5cdFx0XHRcdF91cGRhdGVTY2VuZXNPbk5leHRDeWNsZSA9IHRydWU7XHJcblx0XHRcdFx0ZGVib3VuY2VVcGRhdGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHR2YXIgcmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0aWYgKCFfaXNEb2N1bWVudCkge1xyXG5cdFx0XHRcdC8vIHNpbXVsYXRlIHJlc2l6ZSBldmVudC4gT25seSB3b3JrcyBmb3Igdmlld3BvcnQgcmVsZXZhbnQgcGFyYW0gKHBlcmZvcm1hbmNlKVxyXG5cdFx0XHRcdGlmIChfdmlld1BvcnRTaXplICE9IGdldFZpZXdwb3J0U2l6ZSgpKSB7XHJcblx0XHRcdFx0XHR2YXIgcmVzaXplRXZlbnQ7XHJcblx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRyZXNpemVFdmVudCA9IG5ldyBFdmVudCgncmVzaXplJywge1xyXG5cdFx0XHRcdFx0XHRcdGJ1YmJsZXM6IGZhbHNlLFxyXG5cdFx0XHRcdFx0XHRcdGNhbmNlbGFibGU6IGZhbHNlXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkgeyAvLyBzdHVwaWQgSUVcclxuXHRcdFx0XHRcdFx0cmVzaXplRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xyXG5cdFx0XHRcdFx0XHRyZXNpemVFdmVudC5pbml0RXZlbnQoXCJyZXNpemVcIiwgZmFsc2UsIGZhbHNlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdF9vcHRpb25zLmNvbnRhaW5lci5kaXNwYXRjaEV2ZW50KHJlc2l6ZUV2ZW50KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0X3NjZW5lT2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChzY2VuZSwgaW5kZXgpIHsgLy8gcmVmcmVzaCBhbGwgc2NlbmVzXHJcblx0XHRcdFx0c2NlbmUucmVmcmVzaCgpO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0c2NoZWR1bGVSZWZyZXNoKCk7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogU2VuZCBhIGRlYnVnIG1lc3NhZ2UgdG8gdGhlIGNvbnNvbGUuXHJcblx0XHQgKiBwcm92aWRlZCBwdWJsaWNseSB3aXRoIF9sb2cgZm9yIHBsdWdpbnNcclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IGxvZ2xldmVsIC0gVGhlIGxvZ2xldmVsIHJlcXVpcmVkIHRvIGluaXRpYXRlIG91dHB1dCBmb3IgdGhlIG1lc3NhZ2UuXHJcblx0XHQgKiBAcGFyYW0gey4uLm1peGVkfSBvdXRwdXQgLSBPbmUgb3IgbW9yZSB2YXJpYWJsZXMgdGhhdCBzaG91bGQgYmUgcGFzc2VkIHRvIHRoZSBjb25zb2xlLlxyXG5cdFx0ICovXHJcblx0XHR2YXIgbG9nID0gdGhpcy5fbG9nID0gZnVuY3Rpb24gKGxvZ2xldmVsLCBvdXRwdXQpIHtcclxuXHRcdFx0aWYgKF9vcHRpb25zLmxvZ2xldmVsID49IGxvZ2xldmVsKSB7XHJcblx0XHRcdFx0QXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGFyZ3VtZW50cywgMSwgMCwgXCIoXCIgKyBOQU1FU1BBQ0UgKyBcIikgLT5cIik7XHJcblx0XHRcdFx0X3V0aWwubG9nLmFwcGx5KHdpbmRvdywgYXJndW1lbnRzKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcdC8vIGZvciBzY2VuZXMgd2UgaGF2ZSBnZXR0ZXJzIGZvciBlYWNoIG9wdGlvbiwgYnV0IGZvciB0aGUgY29udHJvbGxlciB3ZSBkb24ndCwgc28gd2UgbmVlZCB0byBtYWtlIGl0IGF2YWlsYWJsZSBleHRlcm5hbGx5IGZvciBwbHVnaW5zXHJcblx0XHR0aGlzLl9vcHRpb25zID0gX29wdGlvbnM7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBTb3J0IHNjZW5lcyBpbiBhc2NlbmRpbmcgb3JkZXIgb2YgdGhlaXIgc3RhcnQgb2Zmc2V0LlxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge2FycmF5fSBTY2VuZXNBcnJheSAtIGFuIGFycmF5IG9mIFNjcm9sbE1hZ2ljIFNjZW5lcyB0aGF0IHNob3VsZCBiZSBzb3J0ZWRcclxuXHRcdCAqIEByZXR1cm4ge2FycmF5fSBUaGUgc29ydGVkIGFycmF5IG9mIFNjZW5lcy5cclxuXHRcdCAqL1xyXG5cdFx0dmFyIHNvcnRTY2VuZXMgPSBmdW5jdGlvbiAoU2NlbmVzQXJyYXkpIHtcclxuXHRcdFx0aWYgKFNjZW5lc0FycmF5Lmxlbmd0aCA8PSAxKSB7XHJcblx0XHRcdFx0cmV0dXJuIFNjZW5lc0FycmF5O1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHZhciBzY2VuZXMgPSBTY2VuZXNBcnJheS5zbGljZSgwKTtcclxuXHRcdFx0XHRzY2VuZXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGEuc2Nyb2xsT2Zmc2V0KCkgPiBiLnNjcm9sbE9mZnNldCgpID8gMSA6IC0xO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHJldHVybiBzY2VuZXM7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKiBwdWJsaWMgZnVuY3Rpb25zXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKi9cclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFkZCBvbmUgb3JlIG1vcmUgc2NlbmUocykgdG8gdGhlIGNvbnRyb2xsZXIuICBcclxuXHRcdCAqIFRoaXMgaXMgdGhlIGVxdWl2YWxlbnQgdG8gYFNjZW5lLmFkZFRvKGNvbnRyb2xsZXIpYC5cclxuXHRcdCAqIEBwdWJsaWNcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyB3aXRoIGEgcHJldmlvdXNseSBkZWZpbmVkIHNjZW5lXHJcblx0XHQgKiBjb250cm9sbGVyLmFkZFNjZW5lKHNjZW5lKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyB3aXRoIGEgbmV3bHkgY3JlYXRlZCBzY2VuZS5cclxuXHRcdCAqIGNvbnRyb2xsZXIuYWRkU2NlbmUobmV3IFNjcm9sbE1hZ2ljLlNjZW5lKHtkdXJhdGlvbiA6IDB9KSk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gYWRkaW5nIG11bHRpcGxlIHNjZW5lc1xyXG5cdFx0ICogY29udHJvbGxlci5hZGRTY2VuZShbc2NlbmUsIHNjZW5lMiwgbmV3IFNjcm9sbE1hZ2ljLlNjZW5lKHtkdXJhdGlvbiA6IDB9KV0pO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7KFNjcm9sbE1hZ2ljLlNjZW5lfGFycmF5KX0gbmV3U2NlbmUgLSBTY3JvbGxNYWdpYyBTY2VuZSBvciBBcnJheSBvZiBTY2VuZXMgdG8gYmUgYWRkZWQgdG8gdGhlIGNvbnRyb2xsZXIuXHJcblx0XHQgKiBAcmV0dXJuIHtDb250cm9sbGVyfSBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5hZGRTY2VuZSA9IGZ1bmN0aW9uIChuZXdTY2VuZSkge1xyXG5cdFx0XHRpZiAoX3V0aWwudHlwZS5BcnJheShuZXdTY2VuZSkpIHtcclxuXHRcdFx0XHRuZXdTY2VuZS5mb3JFYWNoKGZ1bmN0aW9uIChzY2VuZSwgaW5kZXgpIHtcclxuXHRcdFx0XHRcdENvbnRyb2xsZXIuYWRkU2NlbmUoc2NlbmUpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9IGVsc2UgaWYgKG5ld1NjZW5lIGluc3RhbmNlb2YgU2Nyb2xsTWFnaWMuU2NlbmUpIHtcclxuXHRcdFx0XHRpZiAobmV3U2NlbmUuY29udHJvbGxlcigpICE9PSBDb250cm9sbGVyKSB7XHJcblx0XHRcdFx0XHRuZXdTY2VuZS5hZGRUbyhDb250cm9sbGVyKTtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKF9zY2VuZU9iamVjdHMuaW5kZXhPZihuZXdTY2VuZSkgPCAwKSB7XHJcblx0XHRcdFx0XHQvLyBuZXcgc2NlbmVcclxuXHRcdFx0XHRcdF9zY2VuZU9iamVjdHMucHVzaChuZXdTY2VuZSk7IC8vIGFkZCB0byBhcnJheVxyXG5cdFx0XHRcdFx0X3NjZW5lT2JqZWN0cyA9IHNvcnRTY2VuZXMoX3NjZW5lT2JqZWN0cyk7IC8vIHNvcnRcclxuXHRcdFx0XHRcdG5ld1NjZW5lLm9uKFwic2hpZnQuY29udHJvbGxlcl9zb3J0XCIsIGZ1bmN0aW9uICgpIHsgLy8gcmVzb3J0IHdoZW5ldmVyIHNjZW5lIG1vdmVzXHJcblx0XHRcdFx0XHRcdF9zY2VuZU9iamVjdHMgPSBzb3J0U2NlbmVzKF9zY2VuZU9iamVjdHMpO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHQvLyBpbnNlcnQgR2xvYmFsIGRlZmF1bHRzLlxyXG5cdFx0XHRcdFx0Zm9yICh2YXIga2V5IGluIF9vcHRpb25zLmdsb2JhbFNjZW5lT3B0aW9ucykge1xyXG5cdFx0XHRcdFx0XHRpZiAobmV3U2NlbmVba2V5XSkge1xyXG5cdFx0XHRcdFx0XHRcdG5ld1NjZW5lW2tleV0uY2FsbChuZXdTY2VuZSwgX29wdGlvbnMuZ2xvYmFsU2NlbmVPcHRpb25zW2tleV0pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRsb2coMywgXCJhZGRpbmcgU2NlbmUgKG5vdyBcIiArIF9zY2VuZU9iamVjdHMubGVuZ3RoICsgXCIgdG90YWwpXCIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRsb2coMSwgXCJFUlJPUjogaW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCBmb3IgJy5hZGRTY2VuZSgpJ1wiKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gQ29udHJvbGxlcjtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBSZW1vdmUgb25lIG9yZSBtb3JlIHNjZW5lKHMpIGZyb20gdGhlIGNvbnRyb2xsZXIuICBcclxuXHRcdCAqIFRoaXMgaXMgdGhlIGVxdWl2YWxlbnQgdG8gYFNjZW5lLnJlbW92ZSgpYC5cclxuXHRcdCAqIEBwdWJsaWNcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyByZW1vdmUgYSBzY2VuZSBmcm9tIHRoZSBjb250cm9sbGVyXHJcblx0XHQgKiBjb250cm9sbGVyLnJlbW92ZVNjZW5lKHNjZW5lKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyByZW1vdmUgbXVsdGlwbGUgc2NlbmVzIGZyb20gdGhlIGNvbnRyb2xsZXJcclxuXHRcdCAqIGNvbnRyb2xsZXIucmVtb3ZlU2NlbmUoW3NjZW5lLCBzY2VuZTIsIHNjZW5lM10pO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7KFNjcm9sbE1hZ2ljLlNjZW5lfGFycmF5KX0gU2NlbmUgLSBTY3JvbGxNYWdpYyBTY2VuZSBvciBBcnJheSBvZiBTY2VuZXMgdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBjb250cm9sbGVyLlxyXG5cdFx0ICogQHJldHVybnMge0NvbnRyb2xsZXJ9IFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLnJlbW92ZVNjZW5lID0gZnVuY3Rpb24gKFNjZW5lKSB7XHJcblx0XHRcdGlmIChfdXRpbC50eXBlLkFycmF5KFNjZW5lKSkge1xyXG5cdFx0XHRcdFNjZW5lLmZvckVhY2goZnVuY3Rpb24gKHNjZW5lLCBpbmRleCkge1xyXG5cdFx0XHRcdFx0Q29udHJvbGxlci5yZW1vdmVTY2VuZShzY2VuZSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dmFyIGluZGV4ID0gX3NjZW5lT2JqZWN0cy5pbmRleE9mKFNjZW5lKTtcclxuXHRcdFx0XHRpZiAoaW5kZXggPiAtMSkge1xyXG5cdFx0XHRcdFx0U2NlbmUub2ZmKFwic2hpZnQuY29udHJvbGxlcl9zb3J0XCIpO1xyXG5cdFx0XHRcdFx0X3NjZW5lT2JqZWN0cy5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cdFx0XHRcdFx0bG9nKDMsIFwicmVtb3ZpbmcgU2NlbmUgKG5vdyBcIiArIF9zY2VuZU9iamVjdHMubGVuZ3RoICsgXCIgbGVmdClcIik7XHJcblx0XHRcdFx0XHRTY2VuZS5yZW1vdmUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIENvbnRyb2xsZXI7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdCAqIFVwZGF0ZSBvbmUgb3JlIG1vcmUgc2NlbmUocykgYWNjb3JkaW5nIHRvIHRoZSBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIGNvbnRhaW5lci4gIFxyXG5cdCAqIFRoaXMgaXMgdGhlIGVxdWl2YWxlbnQgdG8gYFNjZW5lLnVwZGF0ZSgpYC4gIFxyXG5cdCAqIFRoZSB1cGRhdGUgbWV0aG9kIGNhbGN1bGF0ZXMgdGhlIHNjZW5lJ3Mgc3RhcnQgYW5kIGVuZCBwb3NpdGlvbiAoYmFzZWQgb24gdGhlIHRyaWdnZXIgZWxlbWVudCwgdHJpZ2dlciBob29rLCBkdXJhdGlvbiBhbmQgb2Zmc2V0KSBhbmQgY2hlY2tzIGl0IGFnYWluc3QgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBjb250YWluZXIuICBcclxuXHQgKiBJdCB0aGVuIHVwZGF0ZXMgdGhlIGN1cnJlbnQgc2NlbmUgc3RhdGUgYWNjb3JkaW5nbHkgKG9yIGRvZXMgbm90aGluZywgaWYgdGhlIHN0YXRlIGlzIGFscmVhZHkgY29ycmVjdCkg4oCTIFBpbnMgd2lsbCBiZSBzZXQgdG8gdGhlaXIgY29ycmVjdCBwb3NpdGlvbiBhbmQgdHdlZW5zIHdpbGwgYmUgdXBkYXRlZCB0byB0aGVpciBjb3JyZWN0IHByb2dyZXNzLiAgXHJcblx0ICogXyoqTm90ZToqKiBUaGlzIG1ldGhvZCBnZXRzIGNhbGxlZCBjb25zdGFudGx5IHdoZW5ldmVyIENvbnRyb2xsZXIgZGV0ZWN0cyBhIGNoYW5nZS4gVGhlIG9ubHkgYXBwbGljYXRpb24gZm9yIHlvdSBpcyBpZiB5b3UgY2hhbmdlIHNvbWV0aGluZyBvdXRzaWRlIG9mIHRoZSByZWFsbSBvZiBTY3JvbGxNYWdpYywgbGlrZSBtb3ZpbmcgdGhlIHRyaWdnZXIgb3IgY2hhbmdpbmcgdHdlZW4gcGFyYW1ldGVycy5fXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBleGFtcGxlXHJcblx0ICogLy8gdXBkYXRlIGEgc3BlY2lmaWMgc2NlbmUgb24gbmV4dCBjeWNsZVxyXG4gXHQgKiBjb250cm9sbGVyLnVwZGF0ZVNjZW5lKHNjZW5lKTtcclxuIFx0ICpcclxuXHQgKiAvLyB1cGRhdGUgYSBzcGVjaWZpYyBzY2VuZSBpbW1lZGlhdGVseVxyXG5cdCAqIGNvbnRyb2xsZXIudXBkYXRlU2NlbmUoc2NlbmUsIHRydWUpO1xyXG4gXHQgKlxyXG5cdCAqIC8vIHVwZGF0ZSBtdWx0aXBsZSBzY2VuZXMgc2NlbmUgb24gbmV4dCBjeWNsZVxyXG5cdCAqIGNvbnRyb2xsZXIudXBkYXRlU2NlbmUoW3NjZW5lMSwgc2NlbmUyLCBzY2VuZTNdKTtcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSB7U2Nyb2xsTWFnaWMuU2NlbmV9IFNjZW5lIC0gU2Nyb2xsTWFnaWMgU2NlbmUgb3IgQXJyYXkgb2YgU2NlbmVzIHRoYXQgaXMvYXJlIHN1cHBvc2VkIHRvIGJlIHVwZGF0ZWQuXHJcblx0ICogQHBhcmFtIHtib29sZWFufSBbaW1tZWRpYXRlbHk9ZmFsc2VdIC0gSWYgYHRydWVgIHRoZSB1cGRhdGUgd2lsbCBiZSBpbnN0YW50LCBpZiBgZmFsc2VgIGl0IHdpbGwgd2FpdCB1bnRpbCBuZXh0IHVwZGF0ZSBjeWNsZS4gIFxyXG5cdCBcdFx0XHRcdFx0XHRcdFx0XHRcdCAgVGhpcyBpcyB1c2VmdWwgd2hlbiBjaGFuZ2luZyBtdWx0aXBsZSBwcm9wZXJ0aWVzIG9mIHRoZSBzY2VuZSAtIHRoaXMgd2F5IGl0IHdpbGwgb25seSBiZSB1cGRhdGVkIG9uY2UgYWxsIG5ldyBwcm9wZXJ0aWVzIGFyZSBzZXQgKHVwZGF0ZVNjZW5lcykuXHJcblx0ICogQHJldHVybiB7Q29udHJvbGxlcn0gUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0ICovXHJcblx0XHR0aGlzLnVwZGF0ZVNjZW5lID0gZnVuY3Rpb24gKFNjZW5lLCBpbW1lZGlhdGVseSkge1xyXG5cdFx0XHRpZiAoX3V0aWwudHlwZS5BcnJheShTY2VuZSkpIHtcclxuXHRcdFx0XHRTY2VuZS5mb3JFYWNoKGZ1bmN0aW9uIChzY2VuZSwgaW5kZXgpIHtcclxuXHRcdFx0XHRcdENvbnRyb2xsZXIudXBkYXRlU2NlbmUoc2NlbmUsIGltbWVkaWF0ZWx5KTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRpZiAoaW1tZWRpYXRlbHkpIHtcclxuXHRcdFx0XHRcdFNjZW5lLnVwZGF0ZSh0cnVlKTtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKF91cGRhdGVTY2VuZXNPbk5leHRDeWNsZSAhPT0gdHJ1ZSAmJiBTY2VuZSBpbnN0YW5jZW9mIFNjcm9sbE1hZ2ljLlNjZW5lKSB7IC8vIGlmIF91cGRhdGVTY2VuZXNPbk5leHRDeWNsZSBpcyB0cnVlLCBhbGwgY29ubmVjdGVkIHNjZW5lcyBhcmUgYWxyZWFkeSBzY2hlZHVsZWQgZm9yIHVwZGF0ZVxyXG5cdFx0XHRcdFx0Ly8gcHJlcCBhcnJheSBmb3IgbmV4dCB1cGRhdGUgY3ljbGVcclxuXHRcdFx0XHRcdF91cGRhdGVTY2VuZXNPbk5leHRDeWNsZSA9IF91cGRhdGVTY2VuZXNPbk5leHRDeWNsZSB8fCBbXTtcclxuXHRcdFx0XHRcdGlmIChfdXBkYXRlU2NlbmVzT25OZXh0Q3ljbGUuaW5kZXhPZihTY2VuZSkgPT0gLTEpIHtcclxuXHRcdFx0XHRcdFx0X3VwZGF0ZVNjZW5lc09uTmV4dEN5Y2xlLnB1c2goU2NlbmUpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0X3VwZGF0ZVNjZW5lc09uTmV4dEN5Y2xlID0gc29ydFNjZW5lcyhfdXBkYXRlU2NlbmVzT25OZXh0Q3ljbGUpOyAvLyBzb3J0XHJcblx0XHRcdFx0XHRkZWJvdW5jZVVwZGF0ZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gQ29udHJvbGxlcjtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBVcGRhdGVzIHRoZSBjb250cm9sbGVyIHBhcmFtcyBhbmQgY2FsbHMgdXBkYXRlU2NlbmUgb24gZXZlcnkgc2NlbmUsIHRoYXQgaXMgYXR0YWNoZWQgdG8gdGhlIGNvbnRyb2xsZXIuICBcclxuXHRcdCAqIFNlZSBgQ29udHJvbGxlci51cGRhdGVTY2VuZSgpYCBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IHRoaXMgbWVhbnMuICBcclxuXHRcdCAqIEluIG1vc3QgY2FzZXMgeW91IHdpbGwgbm90IG5lZWQgdGhpcyBmdW5jdGlvbiwgYXMgaXQgaXMgY2FsbGVkIGNvbnN0YW50bHksIHdoZW5ldmVyIFNjcm9sbE1hZ2ljIGRldGVjdHMgYSBzdGF0ZSBjaGFuZ2UgZXZlbnQsIGxpa2UgcmVzaXplIG9yIHNjcm9sbC4gIFxyXG5cdFx0ICogVGhlIG9ubHkgYXBwbGljYXRpb24gZm9yIHRoaXMgbWV0aG9kIGlzIHdoZW4gU2Nyb2xsTWFnaWMgZmFpbHMgdG8gZGV0ZWN0IHRoZXNlIGV2ZW50cy4gIFxyXG5cdFx0ICogT25lIGFwcGxpY2F0aW9uIGlzIHdpdGggc29tZSBleHRlcm5hbCBzY3JvbGwgbGlicmFyaWVzIChsaWtlIGlTY3JvbGwpIHRoYXQgbW92ZSBhbiBpbnRlcm5hbCBjb250YWluZXIgdG8gYSBuZWdhdGl2ZSBvZmZzZXQgaW5zdGVhZCBvZiBhY3R1YWxseSBzY3JvbGxpbmcuIEluIHRoaXMgY2FzZSB0aGUgdXBkYXRlIG9uIHRoZSBjb250cm9sbGVyIG5lZWRzIHRvIGJlIGNhbGxlZCB3aGVuZXZlciB0aGUgY2hpbGQgY29udGFpbmVyJ3MgcG9zaXRpb24gY2hhbmdlcy5cclxuXHRcdCAqIEZvciB0aGlzIGNhc2UgdGhlcmUgd2lsbCBhbHNvIGJlIHRoZSBuZWVkIHRvIHByb3ZpZGUgYSBjdXN0b20gZnVuY3Rpb24gdG8gY2FsY3VsYXRlIHRoZSBjb3JyZWN0IHNjcm9sbCBwb3NpdGlvbi4gU2VlIGBDb250cm9sbGVyLnNjcm9sbFBvcygpYCBmb3IgZGV0YWlscy5cclxuXHRcdCAqIEBwdWJsaWNcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyB1cGRhdGUgdGhlIGNvbnRyb2xsZXIgb24gbmV4dCBjeWNsZSAoc2F2ZXMgcGVyZm9ybWFuY2UgZHVlIHRvIGVsaW1pbmF0aW9uIG9mIHJlZHVuZGFudCB1cGRhdGVzKVxyXG5cdFx0ICogY29udHJvbGxlci51cGRhdGUoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyB1cGRhdGUgdGhlIGNvbnRyb2xsZXIgaW1tZWRpYXRlbHlcclxuXHRcdCAqIGNvbnRyb2xsZXIudXBkYXRlKHRydWUpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ltbWVkaWF0ZWx5PWZhbHNlXSAtIElmIGB0cnVlYCB0aGUgdXBkYXRlIHdpbGwgYmUgaW5zdGFudCwgaWYgYGZhbHNlYCBpdCB3aWxsIHdhaXQgdW50aWwgbmV4dCB1cGRhdGUgY3ljbGUgKGJldHRlciBwZXJmb3JtYW5jZSlcclxuXHRcdCAqIEByZXR1cm4ge0NvbnRyb2xsZXJ9IFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uIChpbW1lZGlhdGVseSkge1xyXG5cdFx0XHRvbkNoYW5nZSh7XHJcblx0XHRcdFx0dHlwZTogXCJyZXNpemVcIlxyXG5cdFx0XHR9KTsgLy8gd2lsbCB1cGRhdGUgc2l6ZSBhbmQgc2V0IF91cGRhdGVTY2VuZXNPbk5leHRDeWNsZSB0byB0cnVlXHJcblx0XHRcdGlmIChpbW1lZGlhdGVseSkge1xyXG5cdFx0XHRcdHVwZGF0ZVNjZW5lcygpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBDb250cm9sbGVyO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFNjcm9sbCB0byBhIG51bWVyaWMgc2Nyb2xsIG9mZnNldCwgYSBET00gZWxlbWVudCwgdGhlIHN0YXJ0IG9mIGEgc2NlbmUgb3IgcHJvdmlkZSBhbiBhbHRlcm5hdGUgbWV0aG9kIGZvciBzY3JvbGxpbmcuICBcclxuXHRcdCAqIEZvciB2ZXJ0aWNhbCBjb250cm9sbGVycyBpdCB3aWxsIGNoYW5nZSB0aGUgdG9wIHNjcm9sbCBvZmZzZXQgYW5kIGZvciBob3Jpem9udGFsIGFwcGxpY2F0aW9ucyBpdCB3aWxsIGNoYW5nZSB0aGUgbGVmdCBvZmZzZXQuXHJcblx0XHQgKiBAcHVibGljXHJcblx0XHQgKlxyXG5cdFx0ICogQHNpbmNlIDEuMS4wXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gc2Nyb2xsIHRvIGFuIG9mZnNldCBvZiAxMDBcclxuXHRcdCAqIGNvbnRyb2xsZXIuc2Nyb2xsVG8oMTAwKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBzY3JvbGwgdG8gYSBET00gZWxlbWVudFxyXG5cdFx0ICogY29udHJvbGxlci5zY3JvbGxUbyhcIiNhbmNob3JcIik7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gc2Nyb2xsIHRvIHRoZSBiZWdpbm5pbmcgb2YgYSBzY2VuZVxyXG5cdFx0ICogdmFyIHNjZW5lID0gbmV3IFNjcm9sbE1hZ2ljLlNjZW5lKHtvZmZzZXQ6IDIwMH0pO1xyXG5cdFx0ICogY29udHJvbGxlci5zY3JvbGxUbyhzY2VuZSk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gZGVmaW5lIGEgbmV3IHNjcm9sbCBwb3NpdGlvbiBtb2RpZmljYXRpb24gZnVuY3Rpb24gKGpRdWVyeSBhbmltYXRlIGluc3RlYWQgb2YganVtcClcclxuXHRcdCAqIGNvbnRyb2xsZXIuc2Nyb2xsVG8oZnVuY3Rpb24gKG5ld1Njcm9sbFBvcykge1xyXG5cdFx0ICpcdCQoXCJodG1sLCBib2R5XCIpLmFuaW1hdGUoe3Njcm9sbFRvcDogbmV3U2Nyb2xsUG9zfSk7XHJcblx0XHQgKiB9KTtcclxuXHRcdCAqIGNvbnRyb2xsZXIuc2Nyb2xsVG8oMTAwKTsgLy8gY2FsbCBhcyB1c3VhbCwgYnV0IHRoZSBuZXcgZnVuY3Rpb24gd2lsbCBiZSB1c2VkIGluc3RlYWRcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBkZWZpbmUgYSBuZXcgc2Nyb2xsIGZ1bmN0aW9uIHdpdGggYW4gYWRkaXRpb25hbCBwYXJhbWV0ZXJcclxuXHRcdCAqIGNvbnRyb2xsZXIuc2Nyb2xsVG8oZnVuY3Rpb24gKG5ld1Njcm9sbFBvcywgbWVzc2FnZSkge1xyXG5cdFx0ICogIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xyXG5cdFx0ICpcdCQodGhpcykuYW5pbWF0ZSh7c2Nyb2xsVG9wOiBuZXdTY3JvbGxQb3N9KTtcclxuXHRcdCAqIH0pO1xyXG5cdFx0ICogLy8gY2FsbCBhcyB1c3VhbCwgYnV0IHN1cHBseSBhbiBleHRyYSBwYXJhbWV0ZXIgdG8gdGhlIGRlZmluZWQgY3VzdG9tIGZ1bmN0aW9uXHJcblx0XHQgKiBjb250cm9sbGVyLnNjcm9sbFRvKDEwMCwgXCJteSBtZXNzYWdlXCIpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIGRlZmluZSBhIG5ldyBzY3JvbGwgZnVuY3Rpb24gd2l0aCBhbiBhZGRpdGlvbmFsIHBhcmFtZXRlciBjb250YWluaW5nIG11bHRpcGxlIHZhcmlhYmxlc1xyXG5cdFx0ICogY29udHJvbGxlci5zY3JvbGxUbyhmdW5jdGlvbiAobmV3U2Nyb2xsUG9zLCBvcHRpb25zKSB7XHJcblx0XHQgKiAgc29tZUdsb2JhbFZhciA9IG9wdGlvbnMuYSArIG9wdGlvbnMuYjtcclxuXHRcdCAqXHQkKHRoaXMpLmFuaW1hdGUoe3Njcm9sbFRvcDogbmV3U2Nyb2xsUG9zfSk7XHJcblx0XHQgKiB9KTtcclxuXHRcdCAqIC8vIGNhbGwgYXMgdXN1YWwsIGJ1dCBzdXBwbHkgYW4gZXh0cmEgcGFyYW1ldGVyIGNvbnRhaW5pbmcgbXVsdGlwbGUgb3B0aW9uc1xyXG5cdFx0ICogY29udHJvbGxlci5zY3JvbGxUbygxMDAsIHthOiAxLCBiOiAyfSk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gZGVmaW5lIGEgbmV3IHNjcm9sbCBmdW5jdGlvbiB3aXRoIGEgY2FsbGJhY2sgc3VwcGxpZWQgYXMgYW4gYWRkaXRpb25hbCBwYXJhbWV0ZXJcclxuXHRcdCAqIGNvbnRyb2xsZXIuc2Nyb2xsVG8oZnVuY3Rpb24gKG5ld1Njcm9sbFBvcywgY2FsbGJhY2spIHtcclxuXHRcdCAqXHQkKHRoaXMpLmFuaW1hdGUoe3Njcm9sbFRvcDogbmV3U2Nyb2xsUG9zfSwgNDAwLCBcInN3aW5nXCIsIGNhbGxiYWNrKTtcclxuXHRcdCAqIH0pO1xyXG5cdFx0ICogLy8gY2FsbCBhcyB1c3VhbCwgYnV0IHN1cHBseSBhbiBleHRyYSBwYXJhbWV0ZXIsIHdoaWNoIGlzIHVzZWQgYXMgYSBjYWxsYmFjayBpbiB0aGUgcHJldmlvdXNseSBkZWZpbmVkIGN1c3RvbSBzY3JvbGwgZnVuY3Rpb25cclxuXHRcdCAqIGNvbnRyb2xsZXIuc2Nyb2xsVG8oMTAwLCBmdW5jdGlvbigpIHtcclxuXHRcdCAqXHRjb25zb2xlLmxvZyhcInNjcm9sbCBoYXMgZmluaXNoZWQuXCIpO1xyXG5cdFx0ICogfSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHttaXhlZH0gc2Nyb2xsVGFyZ2V0IC0gVGhlIHN1cHBsaWVkIGFyZ3VtZW50IGNhbiBiZSBvbmUgb2YgdGhlc2UgdHlwZXM6XHJcblx0XHQgKiAxLiBgbnVtYmVyYCAtPiBUaGUgY29udGFpbmVyIHdpbGwgc2Nyb2xsIHRvIHRoaXMgbmV3IHNjcm9sbCBvZmZzZXQuXHJcblx0XHQgKiAyLiBgc3RyaW5nYCBvciBgb2JqZWN0YCAtPiBDYW4gYmUgYSBzZWxlY3RvciBvciBhIERPTSBvYmplY3QuICBcclxuXHRcdCAqICBUaGUgY29udGFpbmVyIHdpbGwgc2Nyb2xsIHRvIHRoZSBwb3NpdGlvbiBvZiB0aGlzIGVsZW1lbnQuXHJcblx0XHQgKiAzLiBgU2Nyb2xsTWFnaWMgU2NlbmVgIC0+IFRoZSBjb250YWluZXIgd2lsbCBzY3JvbGwgdG8gdGhlIHN0YXJ0IG9mIHRoaXMgc2NlbmUuXHJcblx0XHQgKiA0LiBgZnVuY3Rpb25gIC0+IFRoaXMgZnVuY3Rpb24gd2lsbCBiZSB1c2VkIGZvciBmdXR1cmUgc2Nyb2xsIHBvc2l0aW9uIG1vZGlmaWNhdGlvbnMuICBcclxuXHRcdCAqICBUaGlzIHByb3ZpZGVzIGEgd2F5IGZvciB5b3UgdG8gY2hhbmdlIHRoZSBiZWhhdmlvdXIgb2Ygc2Nyb2xsaW5nIGFuZCBhZGRpbmcgbmV3IGJlaGF2aW91ciBsaWtlIGFuaW1hdGlvbi4gVGhlIGZ1bmN0aW9uIHJlY2VpdmVzIHRoZSBuZXcgc2Nyb2xsIHBvc2l0aW9uIGFzIGEgcGFyYW1ldGVyIGFuZCBhIHJlZmVyZW5jZSB0byB0aGUgY29udGFpbmVyIGVsZW1lbnQgdXNpbmcgYHRoaXNgLiAgXHJcblx0XHQgKiAgSXQgbWF5IGFsc28gb3B0aW9uYWxseSByZWNlaXZlIGFuIG9wdGlvbmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVyIChzZWUgYmVsb3cpICBcclxuXHRcdCAqICBfKipOT1RFOioqICBcclxuXHRcdCAqICBBbGwgb3RoZXIgb3B0aW9ucyB3aWxsIHN0aWxsIHdvcmsgYXMgZXhwZWN0ZWQsIHVzaW5nIHRoZSBuZXcgZnVuY3Rpb24gdG8gc2Nyb2xsLl9cclxuXHRcdCAqIEBwYXJhbSB7bWl4ZWR9IFthZGRpdGlvbmFsUGFyYW1ldGVyXSAtIElmIGEgY3VzdG9tIHNjcm9sbCBmdW5jdGlvbiB3YXMgZGVmaW5lZCAoc2VlIGFib3ZlIDQuKSwgeW91IG1heSB3YW50IHRvIHN1cHBseSBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgdG8gaXQsIHdoZW4gY2FsbGluZyBpdC4gWW91IGNhbiBkbyB0aGlzIHVzaW5nIHRoaXMgcGFyYW1ldGVyIOKAkyBzZWUgZXhhbXBsZXMgZm9yIGRldGFpbHMuIFBsZWFzZSBub3RlLCB0aGF0IHRoaXMgcGFyYW1ldGVyIHdpbGwgaGF2ZSBubyBlZmZlY3QsIGlmIHlvdSB1c2UgdGhlIGRlZmF1bHQgc2Nyb2xsaW5nIGZ1bmN0aW9uLlxyXG5cdFx0ICogQHJldHVybnMge0NvbnRyb2xsZXJ9IFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLnNjcm9sbFRvID0gZnVuY3Rpb24gKHNjcm9sbFRhcmdldCwgYWRkaXRpb25hbFBhcmFtZXRlcikge1xyXG5cdFx0XHRpZiAoX3V0aWwudHlwZS5OdW1iZXIoc2Nyb2xsVGFyZ2V0KSkgeyAvLyBleGNlY3V0ZVxyXG5cdFx0XHRcdHNldFNjcm9sbFBvcy5jYWxsKF9vcHRpb25zLmNvbnRhaW5lciwgc2Nyb2xsVGFyZ2V0LCBhZGRpdGlvbmFsUGFyYW1ldGVyKTtcclxuXHRcdFx0fSBlbHNlIGlmIChzY3JvbGxUYXJnZXQgaW5zdGFuY2VvZiBTY3JvbGxNYWdpYy5TY2VuZSkgeyAvLyBzY3JvbGwgdG8gc2NlbmVcclxuXHRcdFx0XHRpZiAoc2Nyb2xsVGFyZ2V0LmNvbnRyb2xsZXIoKSA9PT0gQ29udHJvbGxlcikgeyAvLyBjaGVjayBpZiB0aGUgY29udHJvbGxlciBpcyBhc3NvY2lhdGVkIHdpdGggdGhpcyBzY2VuZVxyXG5cdFx0XHRcdFx0Q29udHJvbGxlci5zY3JvbGxUbyhzY3JvbGxUYXJnZXQuc2Nyb2xsT2Zmc2V0KCksIGFkZGl0aW9uYWxQYXJhbWV0ZXIpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRsb2coMiwgXCJzY3JvbGxUbygpOiBUaGUgc3VwcGxpZWQgc2NlbmUgZG9lcyBub3QgYmVsb25nIHRvIHRoaXMgY29udHJvbGxlci4gU2Nyb2xsIGNhbmNlbGxlZC5cIiwgc2Nyb2xsVGFyZ2V0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSBpZiAoX3V0aWwudHlwZS5GdW5jdGlvbihzY3JvbGxUYXJnZXQpKSB7IC8vIGFzc2lnbiBuZXcgc2Nyb2xsIGZ1bmN0aW9uXHJcblx0XHRcdFx0c2V0U2Nyb2xsUG9zID0gc2Nyb2xsVGFyZ2V0O1xyXG5cdFx0XHR9IGVsc2UgeyAvLyBzY3JvbGwgdG8gZWxlbWVudFxyXG5cdFx0XHRcdHZhciBlbGVtID0gX3V0aWwuZ2V0LmVsZW1lbnRzKHNjcm9sbFRhcmdldClbMF07XHJcblx0XHRcdFx0aWYgKGVsZW0pIHtcclxuXHRcdFx0XHRcdC8vIGlmIHBhcmVudCBpcyBwaW4gc3BhY2VyLCB1c2Ugc3BhY2VyIHBvc2l0aW9uIGluc3RlYWQgc28gY29ycmVjdCBzdGFydCBwb3NpdGlvbiBpcyByZXR1cm5lZCBmb3IgcGlubmVkIGVsZW1lbnRzLlxyXG5cdFx0XHRcdFx0d2hpbGUgKGVsZW0ucGFyZW50Tm9kZS5oYXNBdHRyaWJ1dGUoUElOX1NQQUNFUl9BVFRSSUJVVEUpKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtLnBhcmVudE5vZGU7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRcdHBhcmFtID0gX29wdGlvbnMudmVydGljYWwgPyBcInRvcFwiIDogXCJsZWZ0XCIsIC8vIHdoaWNoIHBhcmFtIGlzIG9mIGludGVyZXN0ID9cclxuXHRcdFx0XHRcdFx0Y29udGFpbmVyT2Zmc2V0ID0gX3V0aWwuZ2V0Lm9mZnNldChfb3B0aW9ucy5jb250YWluZXIpLCAvLyBjb250YWluZXIgcG9zaXRpb24gaXMgbmVlZGVkIGJlY2F1c2UgZWxlbWVudCBvZmZzZXQgaXMgcmV0dXJuZWQgaW4gcmVsYXRpb24gdG8gZG9jdW1lbnQsIG5vdCBpbiByZWxhdGlvbiB0byBjb250YWluZXIuXHJcblx0XHRcdFx0XHRcdGVsZW1lbnRPZmZzZXQgPSBfdXRpbC5nZXQub2Zmc2V0KGVsZW0pO1xyXG5cclxuXHRcdFx0XHRcdGlmICghX2lzRG9jdW1lbnQpIHsgLy8gY29udGFpbmVyIGlzIG5vdCB0aGUgZG9jdW1lbnQgcm9vdCwgc28gc3Vic3RyYWN0IHNjcm9sbCBQb3NpdGlvbiB0byBnZXQgY29ycmVjdCB0cmlnZ2VyIGVsZW1lbnQgcG9zaXRpb24gcmVsYXRpdmUgdG8gc2Nyb2xsY29udGVudFxyXG5cdFx0XHRcdFx0XHRjb250YWluZXJPZmZzZXRbcGFyYW1dIC09IENvbnRyb2xsZXIuc2Nyb2xsUG9zKCk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Q29udHJvbGxlci5zY3JvbGxUbyhlbGVtZW50T2Zmc2V0W3BhcmFtXSAtIGNvbnRhaW5lck9mZnNldFtwYXJhbV0sIGFkZGl0aW9uYWxQYXJhbWV0ZXIpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRsb2coMiwgXCJzY3JvbGxUbygpOiBUaGUgc3VwcGxpZWQgYXJndW1lbnQgaXMgaW52YWxpZC4gU2Nyb2xsIGNhbmNlbGxlZC5cIiwgc2Nyb2xsVGFyZ2V0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIENvbnRyb2xsZXI7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogKipHZXQqKiB0aGUgY3VycmVudCBzY3JvbGxQb3NpdGlvbiBvciAqKlNldCoqIGEgbmV3IG1ldGhvZCB0byBjYWxjdWxhdGUgaXQuICBcclxuXHRcdCAqIC0+ICoqR0VUKio6XHJcblx0XHQgKiBXaGVuIHVzZWQgYXMgYSBnZXR0ZXIgdGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24uICBcclxuXHRcdCAqIFRvIGdldCBhIGNhY2hlZCB2YWx1ZSB1c2UgQ29udHJvbGxlci5pbmZvKFwic2Nyb2xsUG9zXCIpLCB3aGljaCB3aWxsIGJlIHVwZGF0ZWQgaW4gdGhlIHVwZGF0ZSBjeWNsZS4gIFxyXG5cdFx0ICogRm9yIHZlcnRpY2FsIGNvbnRyb2xsZXJzIGl0IHdpbGwgcmV0dXJuIHRoZSB0b3Agc2Nyb2xsIG9mZnNldCBhbmQgZm9yIGhvcml6b250YWwgYXBwbGljYXRpb25zIGl0IHdpbGwgcmV0dXJuIHRoZSBsZWZ0IG9mZnNldC5cclxuXHRcdCAqXHJcblx0XHQgKiAtPiAqKlNFVCoqOlxyXG5cdFx0ICogV2hlbiB1c2VkIGFzIGEgc2V0dGVyIHRoaXMgbWV0aG9kIHByb2RlcyBhIHdheSB0byBwZXJtYW5lbnRseSBvdmVyd3JpdGUgdGhlIGNvbnRyb2xsZXIncyBzY3JvbGwgcG9zaXRpb24gY2FsY3VsYXRpb24uICBcclxuXHRcdCAqIEEgdHlwaWNhbCB1c2VjYXNlIGlzIHdoZW4gdGhlIHNjcm9sbCBwb3NpdGlvbiBpcyBub3QgcmVmbGVjdGVkIGJ5IHRoZSBjb250YWluZXJzIHNjcm9sbFRvcCBvciBzY3JvbGxMZWZ0IHZhbHVlcywgYnV0IGZvciBleGFtcGxlIGJ5IHRoZSBpbm5lciBvZmZzZXQgb2YgYSBjaGlsZCBjb250YWluZXIuICBcclxuXHRcdCAqIE1vdmluZyBhIGNoaWxkIGNvbnRhaW5lciBpbnNpZGUgYSBwYXJlbnQgaXMgYSBjb21tb25seSB1c2VkIG1ldGhvZCBmb3Igc2V2ZXJhbCBzY3JvbGxpbmcgZnJhbWV3b3JrcywgaW5jbHVkaW5nIGlTY3JvbGwuICBcclxuXHRcdCAqIEJ5IHByb3ZpZGluZyBhbiBhbHRlcm5hdGUgY2FsY3VsYXRpb24gZnVuY3Rpb24geW91IGNhbiBtYWtlIHN1cmUgU2Nyb2xsTWFnaWMgcmVjZWl2ZXMgdGhlIGNvcnJlY3Qgc2Nyb2xsIHBvc2l0aW9uLiAgXHJcblx0XHQgKiBQbGVhc2UgYWxzbyBiZWFyIGluIG1pbmQgdGhhdCB5b3VyIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4geSB2YWx1ZXMgZm9yIHZlcnRpY2FsIHNjcm9sbHMgYW4geCBmb3IgaG9yaXpvbnRhbHMuXHJcblx0XHQgKlxyXG5cdFx0ICogVG8gY2hhbmdlIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBwbGVhc2UgdXNlIGBDb250cm9sbGVyLnNjcm9sbFRvKClgLlxyXG5cdFx0ICogQHB1YmxpY1xyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBnZXQgdGhlIGN1cnJlbnQgc2Nyb2xsIFBvc2l0aW9uXHJcblx0XHQgKiB2YXIgc2Nyb2xsUG9zID0gY29udHJvbGxlci5zY3JvbGxQb3MoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBzZXQgYSBuZXcgc2Nyb2xsIHBvc2l0aW9uIGNhbGN1bGF0aW9uIG1ldGhvZFxyXG5cdFx0ICogY29udHJvbGxlci5zY3JvbGxQb3MoZnVuY3Rpb24gKCkge1xyXG5cdFx0ICpcdHJldHVybiB0aGlzLmluZm8oXCJ2ZXJ0aWNhbFwiKSA/IC1teWNoaWxkY29udGFpbmVyLnkgOiAtbXljaGlsZGNvbnRhaW5lci54XHJcblx0XHQgKiB9KTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbc2Nyb2xsUG9zTWV0aG9kXSAtIFRoZSBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciB0aGUgc2Nyb2xsIHBvc2l0aW9uIGNhbGN1bGF0aW9uIG9mIHRoZSBjb250YWluZXIuXHJcblx0XHQgKiBAcmV0dXJucyB7KG51bWJlcnxDb250cm9sbGVyKX0gQ3VycmVudCBzY3JvbGwgcG9zaXRpb24gb3IgcGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuc2Nyb2xsUG9zID0gZnVuY3Rpb24gKHNjcm9sbFBvc01ldGhvZCkge1xyXG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHsgLy8gZ2V0XHJcblx0XHRcdFx0cmV0dXJuIGdldFNjcm9sbFBvcy5jYWxsKENvbnRyb2xsZXIpO1xyXG5cdFx0XHR9IGVsc2UgeyAvLyBzZXRcclxuXHRcdFx0XHRpZiAoX3V0aWwudHlwZS5GdW5jdGlvbihzY3JvbGxQb3NNZXRob2QpKSB7XHJcblx0XHRcdFx0XHRnZXRTY3JvbGxQb3MgPSBzY3JvbGxQb3NNZXRob2Q7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGxvZygyLCBcIlByb3ZpZGVkIHZhbHVlIGZvciBtZXRob2QgJ3Njcm9sbFBvcycgaXMgbm90IGEgZnVuY3Rpb24uIFRvIGNoYW5nZSB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gdXNlICdzY3JvbGxUbygpJy5cIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBDb250cm9sbGVyO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqICoqR2V0KiogYWxsIGluZm9zIG9yIG9uZSBpbiBwYXJ0aWN1bGFyIGFib3V0IHRoZSBjb250cm9sbGVyLlxyXG5cdFx0ICogQHB1YmxpY1xyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIHJldHVybnMgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIChudW1iZXIpXHJcblx0XHQgKiB2YXIgc2Nyb2xsUG9zID0gY29udHJvbGxlci5pbmZvKFwic2Nyb2xsUG9zXCIpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHJldHVybnMgYWxsIGluZm9zIGFzIGFuIG9iamVjdFxyXG5cdFx0ICogdmFyIGluZm9zID0gY29udHJvbGxlci5pbmZvKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IFthYm91dF0gLSBJZiBwYXNzZWQgb25seSB0aGlzIGluZm8gd2lsbCBiZSByZXR1cm5lZCBpbnN0ZWFkIG9mIGFuIG9iamVjdCBjb250YWluaW5nIGFsbC4gIFxyXG5cdFx0IFx0XHRcdFx0XHRcdFx0IFZhbGlkIG9wdGlvbnMgYXJlOlxyXG5cdFx0IFx0XHRcdFx0XHRcdFx0ICoqIGBcInNpemVcImAgPT4gdGhlIGN1cnJlbnQgdmlld3BvcnQgc2l6ZSBvZiB0aGUgY29udGFpbmVyXHJcblx0XHQgXHRcdFx0XHRcdFx0XHQgKiogYFwidmVydGljYWxcImAgPT4gdHJ1ZSBpZiB2ZXJ0aWNhbCBzY3JvbGxpbmcsIG90aGVyd2lzZSBmYWxzZVxyXG5cdFx0IFx0XHRcdFx0XHRcdFx0ICoqIGBcInNjcm9sbFBvc1wiYCA9PiB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb25cclxuXHRcdCBcdFx0XHRcdFx0XHRcdCAqKiBgXCJzY3JvbGxEaXJlY3Rpb25cImAgPT4gdGhlIGxhc3Qga25vd24gZGlyZWN0aW9uIG9mIHRoZSBzY3JvbGxcclxuXHRcdCBcdFx0XHRcdFx0XHRcdCAqKiBgXCJjb250YWluZXJcImAgPT4gdGhlIGNvbnRhaW5lciBlbGVtZW50XHJcblx0XHQgXHRcdFx0XHRcdFx0XHQgKiogYFwiaXNEb2N1bWVudFwiYCA9PiB0cnVlIGlmIGNvbnRhaW5lciBlbGVtZW50IGlzIHRoZSBkb2N1bWVudC5cclxuXHRcdCAqIEByZXR1cm5zIHsobWl4ZWR8b2JqZWN0KX0gVGhlIHJlcXVlc3RlZCBpbmZvKHMpLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLmluZm8gPSBmdW5jdGlvbiAoYWJvdXQpIHtcclxuXHRcdFx0dmFyIHZhbHVlcyA9IHtcclxuXHRcdFx0XHRzaXplOiBfdmlld1BvcnRTaXplLCAvLyBjb250YWlucyBoZWlnaHQgb3Igd2lkdGggKGluIHJlZ2FyZCB0byBvcmllbnRhdGlvbik7XHJcblx0XHRcdFx0dmVydGljYWw6IF9vcHRpb25zLnZlcnRpY2FsLFxyXG5cdFx0XHRcdHNjcm9sbFBvczogX3Njcm9sbFBvcyxcclxuXHRcdFx0XHRzY3JvbGxEaXJlY3Rpb246IF9zY3JvbGxEaXJlY3Rpb24sXHJcblx0XHRcdFx0Y29udGFpbmVyOiBfb3B0aW9ucy5jb250YWluZXIsXHJcblx0XHRcdFx0aXNEb2N1bWVudDogX2lzRG9jdW1lbnRcclxuXHRcdFx0fTtcclxuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7IC8vIGdldCBhbGwgYXMgYW4gb2JqZWN0XHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcclxuXHRcdFx0fSBlbHNlIGlmICh2YWx1ZXNbYWJvdXRdICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzW2Fib3V0XTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRsb2coMSwgXCJFUlJPUjogb3B0aW9uIFxcXCJcIiArIGFib3V0ICsgXCJcXFwiIGlzIG5vdCBhdmFpbGFibGVcIik7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogKipHZXQqKiBvciAqKlNldCoqIHRoZSBjdXJyZW50IGxvZ2xldmVsIG9wdGlvbiB2YWx1ZS5cclxuXHRcdCAqIEBwdWJsaWNcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gZ2V0IHRoZSBjdXJyZW50IHZhbHVlXHJcblx0XHQgKiB2YXIgbG9nbGV2ZWwgPSBjb250cm9sbGVyLmxvZ2xldmVsKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gc2V0IGEgbmV3IHZhbHVlXHJcblx0XHQgKiBjb250cm9sbGVyLmxvZ2xldmVsKDMpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBbbmV3TG9nbGV2ZWxdIC0gVGhlIG5ldyBsb2dsZXZlbCBzZXR0aW5nIG9mIHRoZSBDb250cm9sbGVyLiBgWzAtM11gXHJcblx0XHQgKiBAcmV0dXJucyB7KG51bWJlcnxDb250cm9sbGVyKX0gQ3VycmVudCBsb2dsZXZlbCBvciBwYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5sb2dsZXZlbCA9IGZ1bmN0aW9uIChuZXdMb2dsZXZlbCkge1xyXG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHsgLy8gZ2V0XHJcblx0XHRcdFx0cmV0dXJuIF9vcHRpb25zLmxvZ2xldmVsO1xyXG5cdFx0XHR9IGVsc2UgaWYgKF9vcHRpb25zLmxvZ2xldmVsICE9IG5ld0xvZ2xldmVsKSB7IC8vIHNldFxyXG5cdFx0XHRcdF9vcHRpb25zLmxvZ2xldmVsID0gbmV3TG9nbGV2ZWw7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIENvbnRyb2xsZXI7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogKipHZXQqKiBvciAqKlNldCoqIHRoZSBjdXJyZW50IGVuYWJsZWQgc3RhdGUgb2YgdGhlIGNvbnRyb2xsZXIuICBcclxuXHRcdCAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gZGlzYWJsZSBhbGwgU2NlbmVzIGNvbm5lY3RlZCB0byB0aGUgY29udHJvbGxlciB3aXRob3V0IGRlc3Ryb3lpbmcgb3IgcmVtb3ZpbmcgdGhlbS5cclxuXHRcdCAqIEBwdWJsaWNcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gZ2V0IHRoZSBjdXJyZW50IHZhbHVlXHJcblx0XHQgKiB2YXIgZW5hYmxlZCA9IGNvbnRyb2xsZXIuZW5hYmxlZCgpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIGRpc2FibGUgdGhlIGNvbnRyb2xsZXJcclxuXHRcdCAqIGNvbnRyb2xsZXIuZW5hYmxlZChmYWxzZSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBbbmV3U3RhdGVdIC0gVGhlIG5ldyBlbmFibGVkIHN0YXRlIG9mIHRoZSBjb250cm9sbGVyIGB0cnVlYCBvciBgZmFsc2VgLlxyXG5cdFx0ICogQHJldHVybnMgeyhib29sZWFufENvbnRyb2xsZXIpfSBDdXJyZW50IGVuYWJsZWQgc3RhdGUgb3IgcGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuZW5hYmxlZCA9IGZ1bmN0aW9uIChuZXdTdGF0ZSkge1xyXG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHsgLy8gZ2V0XHJcblx0XHRcdFx0cmV0dXJuIF9lbmFibGVkO1xyXG5cdFx0XHR9IGVsc2UgaWYgKF9lbmFibGVkICE9IG5ld1N0YXRlKSB7IC8vIHNldFxyXG5cdFx0XHRcdF9lbmFibGVkID0gISFuZXdTdGF0ZTtcclxuXHRcdFx0XHRDb250cm9sbGVyLnVwZGF0ZVNjZW5lKF9zY2VuZU9iamVjdHMsIHRydWUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBDb250cm9sbGVyO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIERlc3Ryb3kgdGhlIENvbnRyb2xsZXIsIGFsbCBTY2VuZXMgYW5kIGV2ZXJ5dGhpbmcuXHJcblx0XHQgKiBAcHVibGljXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIHdpdGhvdXQgcmVzZXR0aW5nIHRoZSBzY2VuZXNcclxuXHRcdCAqIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyLmRlc3Ryb3koKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyB3aXRoIHNjZW5lIHJlc2V0XHJcblx0XHQgKiBjb250cm9sbGVyID0gY29udHJvbGxlci5kZXN0cm95KHRydWUpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Jlc2V0U2NlbmVzPWZhbHNlXSAtIElmIGB0cnVlYCB0aGUgcGlucyBhbmQgdHdlZW5zIChpZiBleGlzdGVudCkgb2YgYWxsIHNjZW5lcyB3aWxsIGJlIHJlc2V0LlxyXG5cdFx0ICogQHJldHVybnMge251bGx9IE51bGwgdG8gdW5zZXQgaGFuZGxlciB2YXJpYWJsZXMuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuZGVzdHJveSA9IGZ1bmN0aW9uIChyZXNldFNjZW5lcykge1xyXG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KF9yZWZyZXNoVGltZW91dCk7XHJcblx0XHRcdHZhciBpID0gX3NjZW5lT2JqZWN0cy5sZW5ndGg7XHJcblx0XHRcdHdoaWxlIChpLS0pIHtcclxuXHRcdFx0XHRfc2NlbmVPYmplY3RzW2ldLmRlc3Ryb3kocmVzZXRTY2VuZXMpO1xyXG5cdFx0XHR9XHJcblx0XHRcdF9vcHRpb25zLmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIG9uQ2hhbmdlKTtcclxuXHRcdFx0X29wdGlvbnMuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgb25DaGFuZ2UpO1xyXG5cdFx0XHRfdXRpbC5jQUYoX3VwZGF0ZVRpbWVvdXQpO1xyXG5cdFx0XHRsb2coMywgXCJkZXN0cm95ZWQgXCIgKyBOQU1FU1BBQ0UgKyBcIiAocmVzZXQ6IFwiICsgKHJlc2V0U2NlbmVzID8gXCJ0cnVlXCIgOiBcImZhbHNlXCIpICsgXCIpXCIpO1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gSU5JVFxyXG5cdFx0Y29uc3RydWN0KCk7XHJcblx0XHRyZXR1cm4gQ29udHJvbGxlcjtcclxuXHR9O1xyXG5cclxuXHQvLyBzdG9yZSBwYWdld2lkZSBjb250cm9sbGVyIG9wdGlvbnNcclxuXHR2YXIgQ09OVFJPTExFUl9PUFRJT05TID0ge1xyXG5cdFx0ZGVmYXVsdHM6IHtcclxuXHRcdFx0Y29udGFpbmVyOiB3aW5kb3csXHJcblx0XHRcdHZlcnRpY2FsOiB0cnVlLFxyXG5cdFx0XHRnbG9iYWxTY2VuZU9wdGlvbnM6IHt9LFxyXG5cdFx0XHRsb2dsZXZlbDogMixcclxuXHRcdFx0cmVmcmVzaEludGVydmFsOiAxMDBcclxuXHRcdH1cclxuXHR9O1xyXG5cdC8qXHJcblx0ICogbWV0aG9kIHVzZWQgdG8gYWRkIGFuIG9wdGlvbiB0byBTY3JvbGxNYWdpYyBTY2VuZXMuXHJcblx0ICovXHJcblx0U2Nyb2xsTWFnaWMuQ29udHJvbGxlci5hZGRPcHRpb24gPSBmdW5jdGlvbiAobmFtZSwgZGVmYXVsdFZhbHVlKSB7XHJcblx0XHRDT05UUk9MTEVSX09QVElPTlMuZGVmYXVsdHNbbmFtZV0gPSBkZWZhdWx0VmFsdWU7XHJcblx0fTtcclxuXHQvLyBpbnN0YW5jZSBleHRlbnNpb24gZnVuY3Rpb24gZm9yIHBsdWdpbnNcclxuXHRTY3JvbGxNYWdpYy5Db250cm9sbGVyLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbnNpb24pIHtcclxuXHRcdHZhciBvbGRDbGFzcyA9IHRoaXM7XHJcblx0XHRTY3JvbGxNYWdpYy5Db250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRvbGRDbGFzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdFx0XHR0aGlzLiRzdXBlciA9IF91dGlsLmV4dGVuZCh7fSwgdGhpcyk7IC8vIGNvcHkgcGFyZW50IHN0YXRlXHJcblx0XHRcdHJldHVybiBleHRlbnNpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG5cdFx0fTtcclxuXHRcdF91dGlsLmV4dGVuZChTY3JvbGxNYWdpYy5Db250cm9sbGVyLCBvbGRDbGFzcyk7IC8vIGNvcHkgcHJvcGVydGllc1xyXG5cdFx0U2Nyb2xsTWFnaWMuQ29udHJvbGxlci5wcm90b3R5cGUgPSBvbGRDbGFzcy5wcm90b3R5cGU7IC8vIGNvcHkgcHJvdG90eXBlXHJcblx0XHRTY3JvbGxNYWdpYy5Db250cm9sbGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNjcm9sbE1hZ2ljLkNvbnRyb2xsZXI7IC8vIHJlc3RvcmUgY29uc3RydWN0b3JcclxuXHR9O1xyXG5cclxuXHJcblx0LyoqXHJcblx0ICogQSBTY2VuZSBkZWZpbmVzIHdoZXJlIHRoZSBjb250cm9sbGVyIHNob3VsZCByZWFjdCBhbmQgaG93LlxyXG5cdCAqXHJcblx0ICogQGNsYXNzXHJcblx0ICpcclxuXHQgKiBAZXhhbXBsZVxyXG5cdCAqIC8vIGNyZWF0ZSBhIHN0YW5kYXJkIHNjZW5lIGFuZCBhZGQgaXQgdG8gYSBjb250cm9sbGVyXHJcblx0ICogbmV3IFNjcm9sbE1hZ2ljLlNjZW5lKClcclxuXHQgKlx0XHQuYWRkVG8oY29udHJvbGxlcik7XHJcblx0ICpcclxuXHQgKiAvLyBjcmVhdGUgYSBzY2VuZSB3aXRoIGN1c3RvbSBvcHRpb25zIGFuZCBhc3NpZ24gYSBoYW5kbGVyIHRvIGl0LlxyXG5cdCAqIHZhciBzY2VuZSA9IG5ldyBTY3JvbGxNYWdpYy5TY2VuZSh7XHJcblx0ICogXHRcdGR1cmF0aW9uOiAxMDAsXHJcblx0ICpcdFx0b2Zmc2V0OiAyMDAsXHJcblx0ICpcdFx0dHJpZ2dlckhvb2s6IFwib25FbnRlclwiLFxyXG5cdCAqXHRcdHJldmVyc2U6IGZhbHNlXHJcblx0ICogfSk7XHJcblx0ICpcclxuXHQgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gT3B0aW9ucyBmb3IgdGhlIFNjZW5lLiBUaGUgb3B0aW9ucyBjYW4gYmUgdXBkYXRlZCBhdCBhbnkgdGltZS4gIFxyXG5cdCBcdFx0XHRcdFx0XHRcdCAgIEluc3RlYWQgb2Ygc2V0dGluZyB0aGUgb3B0aW9ucyBmb3IgZWFjaCBzY2VuZSBpbmRpdmlkdWFsbHkgeW91IGNhbiBhbHNvIHNldCB0aGVtIGdsb2JhbGx5IGluIHRoZSBjb250cm9sbGVyIGFzIHRoZSBjb250cm9sbGVycyBgZ2xvYmFsU2NlbmVPcHRpb25zYCBvcHRpb24uIFRoZSBvYmplY3QgYWNjZXB0cyB0aGUgc2FtZSBwcm9wZXJ0aWVzIGFzIHRoZSBvbmVzIGJlbG93LiAgXHJcblx0IFx0XHRcdFx0XHRcdFx0ICAgV2hlbiBhIHNjZW5lIGlzIGFkZGVkIHRvIHRoZSBjb250cm9sbGVyIHRoZSBvcHRpb25zIGRlZmluZWQgdXNpbmcgdGhlIFNjZW5lIGNvbnN0cnVjdG9yIHdpbGwgYmUgb3ZlcndyaXR0ZW4gYnkgdGhvc2Ugc2V0IGluIGBnbG9iYWxTY2VuZU9wdGlvbnNgLlxyXG5cdCAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmd8ZnVuY3Rpb24pfSBbb3B0aW9ucy5kdXJhdGlvbj0wXSAtIFRoZSBkdXJhdGlvbiBvZiB0aGUgc2NlbmUuIFxyXG5cdCBcdFx0XHRcdFx0UGxlYXNlIHNlZSBgU2NlbmUuZHVyYXRpb24oKWAgZm9yIGRldGFpbHMuXHJcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm9mZnNldD0wXSAtIE9mZnNldCBWYWx1ZSBmb3IgdGhlIFRyaWdnZXIgUG9zaXRpb24uIElmIG5vIHRyaWdnZXJFbGVtZW50IGlzIGRlZmluZWQgdGhpcyB3aWxsIGJlIHRoZSBzY3JvbGwgZGlzdGFuY2UgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIHBhZ2UsIGFmdGVyIHdoaWNoIHRoZSBzY2VuZSB3aWxsIHN0YXJ0LlxyXG5cdCAqIEBwYXJhbSB7KHN0cmluZ3xvYmplY3QpfSBbb3B0aW9ucy50cmlnZ2VyRWxlbWVudD1udWxsXSAtIFNlbGVjdG9yIG9yIERPTSBvYmplY3QgdGhhdCBkZWZpbmVzIHRoZSBzdGFydCBvZiB0aGUgc2NlbmUuIElmIHVuZGVmaW5lZCB0aGUgc2NlbmUgd2lsbCBzdGFydCByaWdodCBhdCB0aGUgc3RhcnQgb2YgdGhlIHBhZ2UgKHVubGVzcyBhbiBvZmZzZXQgaXMgc2V0KS5cclxuXHQgKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKX0gW29wdGlvbnMudHJpZ2dlckhvb2s9XCJvbkNlbnRlclwiXSAtIENhbiBiZSBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEgZGVmaW5pbmcgdGhlIHBvc2l0aW9uIG9mIHRoZSB0cmlnZ2VyIEhvb2sgaW4gcmVsYXRpb24gdG8gdGhlIHZpZXdwb3J0LiAgXHJcblx0IFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCAgQ2FuIGFsc28gYmUgZGVmaW5lZCB1c2luZyBhIHN0cmluZzpcclxuXHQgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ICAqKiBgXCJvbkVudGVyXCJgID0+IGAxYFxyXG5cdCBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgICoqIGBcIm9uQ2VudGVyXCJgID0+IGAwLjVgXHJcblx0IFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCAgKiogYFwib25MZWF2ZVwiYCA9PiBgMGBcclxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnJldmVyc2U9dHJ1ZV0gLSBTaG91bGQgdGhlIHNjZW5lIHJldmVyc2UsIHdoZW4gc2Nyb2xsaW5nIHVwP1xyXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sb2dsZXZlbD0yXSAtIExvZ2xldmVsIGZvciBkZWJ1Z2dpbmcuIE5vdGUgdGhhdCBsb2dnaW5nIGlzIGRpc2FibGVkIGluIHRoZSBtaW5pZmllZCB2ZXJzaW9uIG9mIFNjcm9sbE1hZ2ljLlxyXG5cdCBcdFx0XHRcdFx0XHRcdFx0XHRcdCAgKiogYDBgID0+IHNpbGVudFxyXG5cdCBcdFx0XHRcdFx0XHRcdFx0XHRcdCAgKiogYDFgID0+IGVycm9yc1xyXG5cdCBcdFx0XHRcdFx0XHRcdFx0XHRcdCAgKiogYDJgID0+IGVycm9ycywgd2FybmluZ3NcclxuXHQgXHRcdFx0XHRcdFx0XHRcdFx0XHQgICoqIGAzYCA9PiBlcnJvcnMsIHdhcm5pbmdzLCBkZWJ1Z2luZm9cclxuXHQgKiBcclxuXHQgKi9cclxuXHRTY3JvbGxNYWdpYy5TY2VuZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcblxyXG5cdFx0LypcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqIHNldHRpbmdzXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKi9cclxuXHJcblx0XHR2YXJcclxuXHRcdFx0TkFNRVNQQUNFID0gJ1Njcm9sbE1hZ2ljLlNjZW5lJyxcclxuXHRcdFx0U0NFTkVfU1RBVEVfQkVGT1JFID0gJ0JFRk9SRScsXHJcblx0XHRcdFNDRU5FX1NUQVRFX0RVUklORyA9ICdEVVJJTkcnLFxyXG5cdFx0XHRTQ0VORV9TVEFURV9BRlRFUiA9ICdBRlRFUicsXHJcblx0XHRcdERFRkFVTFRfT1BUSU9OUyA9IFNDRU5FX09QVElPTlMuZGVmYXVsdHM7XHJcblxyXG5cdFx0LypcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqIHByaXZhdGUgdmFyc1xyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICovXHJcblxyXG5cdFx0dmFyXHJcblx0XHRcdFNjZW5lID0gdGhpcyxcclxuXHRcdFx0X29wdGlvbnMgPSBfdXRpbC5leHRlbmQoe30sIERFRkFVTFRfT1BUSU9OUywgb3B0aW9ucyksXHJcblx0XHRcdF9zdGF0ZSA9IFNDRU5FX1NUQVRFX0JFRk9SRSxcclxuXHRcdFx0X3Byb2dyZXNzID0gMCxcclxuXHRcdFx0X3Njcm9sbE9mZnNldCA9IHtcclxuXHRcdFx0XHRzdGFydDogMCxcclxuXHRcdFx0XHRlbmQ6IDBcclxuXHRcdFx0fSwgLy8gcmVmbGVjdHMgdGhlIGNvbnRyb2xsZXJzJ3Mgc2Nyb2xsIHBvc2l0aW9uIGZvciB0aGUgc3RhcnQgYW5kIGVuZCBvZiB0aGUgc2NlbmUgcmVzcGVjdGl2ZWx5XHJcblx0XHRcdF90cmlnZ2VyUG9zID0gMCxcclxuXHRcdFx0X2VuYWJsZWQgPSB0cnVlLFxyXG5cdFx0XHRfZHVyYXRpb25VcGRhdGVNZXRob2QsXHJcblx0XHRcdF9jb250cm9sbGVyO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogSW50ZXJuYWwgY29uc3RydWN0b3IgZnVuY3Rpb24gb2YgdGhlIFNjcm9sbE1hZ2ljIFNjZW5lXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gX29wdGlvbnMpIHsgLy8gY2hlY2sgc3VwcGxpZWQgb3B0aW9uc1xyXG5cdFx0XHRcdGlmICghREVGQVVMVF9PUFRJT05TLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuXHRcdFx0XHRcdGxvZygyLCBcIldBUk5JTkc6IFVua25vd24gb3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcclxuXHRcdFx0XHRcdGRlbGV0ZSBfb3B0aW9uc1trZXldO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBhZGQgZ2V0dGVycy9zZXR0ZXJzIGZvciBhbGwgcG9zc2libGUgb3B0aW9uc1xyXG5cdFx0XHRmb3IgKHZhciBvcHRpb25OYW1lIGluIERFRkFVTFRfT1BUSU9OUykge1xyXG5cdFx0XHRcdGFkZFNjZW5lT3B0aW9uKG9wdGlvbk5hbWUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIHZhbGlkYXRlIGFsbCBvcHRpb25zXHJcblx0XHRcdHZhbGlkYXRlT3B0aW9uKCk7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKiBFdmVudCBNYW5hZ2VtZW50XHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKi9cclxuXHJcblx0XHR2YXIgX2xpc3RlbmVycyA9IHt9O1xyXG5cdFx0LyoqXHJcblx0XHQgKiBTY2VuZSBzdGFydCBldmVudC4gIFxyXG5cdFx0ICogRmlyZXMgd2hlbmV2ZXIgdGhlIHNjcm9sbCBwb3NpdGlvbiBpdHMgdGhlIHN0YXJ0aW5nIHBvaW50IG9mIHRoZSBzY2VuZS4gIFxyXG5cdFx0ICogSXQgd2lsbCBhbHNvIGZpcmUgd2hlbiBzY3JvbGxpbmcgYmFjayB1cCBnb2luZyBvdmVyIHRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc2NlbmUuIElmIHlvdSB3YW50IHNvbWV0aGluZyB0byBoYXBwZW4gb25seSB3aGVuIHNjcm9sbGluZyBkb3duL3JpZ2h0LCB1c2UgdGhlIHNjcm9sbERpcmVjdGlvbiBwYXJhbWV0ZXIgcGFzc2VkIHRvIHRoZSBjYWxsYmFjay5cclxuXHRcdCAqXHJcblx0XHQgKiBGb3IgZGV0YWlscyBvbiB0aGlzIGV2ZW50IGFuZCB0aGUgb3JkZXIgaW4gd2hpY2ggaXQgaXMgZmlyZWQsIHBsZWFzZSByZXZpZXcgdGhlIHtAbGluayBTY2VuZS5wcm9ncmVzc30gbWV0aG9kLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBldmVudCBTY3JvbGxNYWdpYy5TY2VuZSNzdGFydFxyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiBzY2VuZS5vbihcInN0YXJ0XCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cdFx0ICogXHRjb25zb2xlLmxvZyhcIkhpdCBzdGFydCBwb2ludCBvZiBzY2VuZS5cIik7XHJcblx0XHQgKiB9KTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcHJvcGVydHkge29iamVjdH0gZXZlbnQgLSBUaGUgZXZlbnQgT2JqZWN0IHBhc3NlZCB0byBlYWNoIGNhbGxiYWNrXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQudHlwZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtTY2VuZX0gZXZlbnQudGFyZ2V0IC0gVGhlIFNjZW5lIG9iamVjdCB0aGF0IHRyaWdnZXJlZCB0aGlzIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge251bWJlcn0gZXZlbnQucHJvZ3Jlc3MgLSBSZWZsZWN0cyB0aGUgY3VycmVudCBwcm9ncmVzcyBvZiB0aGUgc2NlbmVcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC5zdGF0ZSAtIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBzY2VuZSBgXCJCRUZPUkVcImAgb3IgYFwiRFVSSU5HXCJgXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQuc2Nyb2xsRGlyZWN0aW9uIC0gSW5kaWNhdGVzIHdoaWNoIHdheSB3ZSBhcmUgc2Nyb2xsaW5nIGBcIlBBVVNFRFwiYCwgYFwiRk9SV0FSRFwiYCBvciBgXCJSRVZFUlNFXCJgXHJcblx0XHQgKi9cclxuXHRcdC8qKlxyXG5cdFx0ICogU2NlbmUgZW5kIGV2ZW50LiAgXHJcblx0XHQgKiBGaXJlcyB3aGVuZXZlciB0aGUgc2Nyb2xsIHBvc2l0aW9uIGl0cyB0aGUgZW5kaW5nIHBvaW50IG9mIHRoZSBzY2VuZS4gIFxyXG5cdFx0ICogSXQgd2lsbCBhbHNvIGZpcmUgd2hlbiBzY3JvbGxpbmcgYmFjayB1cCBmcm9tIGFmdGVyIHRoZSBzY2VuZSBhbmQgZ29pbmcgb3ZlciBpdHMgZW5kIHBvc2l0aW9uLiBJZiB5b3Ugd2FudCBzb21ldGhpbmcgdG8gaGFwcGVuIG9ubHkgd2hlbiBzY3JvbGxpbmcgZG93bi9yaWdodCwgdXNlIHRoZSBzY3JvbGxEaXJlY3Rpb24gcGFyYW1ldGVyIHBhc3NlZCB0byB0aGUgY2FsbGJhY2suXHJcblx0XHQgKlxyXG5cdFx0ICogRm9yIGRldGFpbHMgb24gdGhpcyBldmVudCBhbmQgdGhlIG9yZGVyIGluIHdoaWNoIGl0IGlzIGZpcmVkLCBwbGVhc2UgcmV2aWV3IHRoZSB7QGxpbmsgU2NlbmUucHJvZ3Jlc3N9IG1ldGhvZC5cclxuXHRcdCAqXHJcblx0XHQgKiBAZXZlbnQgU2Nyb2xsTWFnaWMuU2NlbmUjZW5kXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIHNjZW5lLm9uKFwiZW5kXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cdFx0ICogXHRjb25zb2xlLmxvZyhcIkhpdCBlbmQgcG9pbnQgb2Ygc2NlbmUuXCIpO1xyXG5cdFx0ICogfSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHByb3BlcnR5IHtvYmplY3R9IGV2ZW50IC0gVGhlIGV2ZW50IE9iamVjdCBwYXNzZWQgdG8gZWFjaCBjYWxsYmFja1xyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnR5cGUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7U2NlbmV9IGV2ZW50LnRhcmdldCAtIFRoZSBTY2VuZSBvYmplY3QgdGhhdCB0cmlnZ2VyZWQgdGhpcyBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtudW1iZXJ9IGV2ZW50LnByb2dyZXNzIC0gUmVmbGVjdHMgdGhlIGN1cnJlbnQgcHJvZ3Jlc3Mgb2YgdGhlIHNjZW5lXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQuc3RhdGUgLSBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgc2NlbmUgYFwiRFVSSU5HXCJgIG9yIGBcIkFGVEVSXCJgXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQuc2Nyb2xsRGlyZWN0aW9uIC0gSW5kaWNhdGVzIHdoaWNoIHdheSB3ZSBhcmUgc2Nyb2xsaW5nIGBcIlBBVVNFRFwiYCwgYFwiRk9SV0FSRFwiYCBvciBgXCJSRVZFUlNFXCJgXHJcblx0XHQgKi9cclxuXHRcdC8qKlxyXG5cdFx0ICogU2NlbmUgZW50ZXIgZXZlbnQuICBcclxuXHRcdCAqIEZpcmVzIHdoZW5ldmVyIHRoZSBzY2VuZSBlbnRlcnMgdGhlIFwiRFVSSU5HXCIgc3RhdGUuICBcclxuXHRcdCAqIEtlZXAgaW4gbWluZCB0aGF0IGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHRoZSBzY2VuZSBwbGF5cyBmb3J3YXJkIG9yIGJhY2t3YXJkOiBUaGlzIGV2ZW50IGFsd2F5cyBmaXJlcyB3aGVuIHRoZSBzY2VuZSBlbnRlcnMgaXRzIGFjdGl2ZSBzY3JvbGwgdGltZWZyYW1lLCByZWdhcmRsZXNzIG9mIHRoZSBzY3JvbGwtZGlyZWN0aW9uLlxyXG5cdFx0ICpcclxuXHRcdCAqIEZvciBkZXRhaWxzIG9uIHRoaXMgZXZlbnQgYW5kIHRoZSBvcmRlciBpbiB3aGljaCBpdCBpcyBmaXJlZCwgcGxlYXNlIHJldmlldyB0aGUge0BsaW5rIFNjZW5lLnByb2dyZXNzfSBtZXRob2QuXHJcblx0XHQgKlxyXG5cdFx0ICogQGV2ZW50IFNjcm9sbE1hZ2ljLlNjZW5lI2VudGVyXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIHNjZW5lLm9uKFwiZW50ZXJcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcblx0XHQgKiBcdGNvbnNvbGUubG9nKFwiU2NlbmUgZW50ZXJlZC5cIik7XHJcblx0XHQgKiB9KTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcHJvcGVydHkge29iamVjdH0gZXZlbnQgLSBUaGUgZXZlbnQgT2JqZWN0IHBhc3NlZCB0byBlYWNoIGNhbGxiYWNrXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQudHlwZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtTY2VuZX0gZXZlbnQudGFyZ2V0IC0gVGhlIFNjZW5lIG9iamVjdCB0aGF0IHRyaWdnZXJlZCB0aGlzIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge251bWJlcn0gZXZlbnQucHJvZ3Jlc3MgLSBSZWZsZWN0cyB0aGUgY3VycmVudCBwcm9ncmVzcyBvZiB0aGUgc2NlbmVcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC5zdGF0ZSAtIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBzY2VuZSAtIGFsd2F5cyBgXCJEVVJJTkdcImBcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC5zY3JvbGxEaXJlY3Rpb24gLSBJbmRpY2F0ZXMgd2hpY2ggd2F5IHdlIGFyZSBzY3JvbGxpbmcgYFwiUEFVU0VEXCJgLCBgXCJGT1JXQVJEXCJgIG9yIGBcIlJFVkVSU0VcImBcclxuXHRcdCAqL1xyXG5cdFx0LyoqXHJcblx0XHQgKiBTY2VuZSBsZWF2ZSBldmVudC4gIFxyXG5cdFx0ICogRmlyZXMgd2hlbmV2ZXIgdGhlIHNjZW5lJ3Mgc3RhdGUgZ29lcyBmcm9tIFwiRFVSSU5HXCIgdG8gZWl0aGVyIFwiQkVGT1JFXCIgb3IgXCJBRlRFUlwiLiAgXHJcblx0XHQgKiBLZWVwIGluIG1pbmQgdGhhdCBpdCBkb2Vzbid0IG1hdHRlciBpZiB0aGUgc2NlbmUgcGxheXMgZm9yd2FyZCBvciBiYWNrd2FyZDogVGhpcyBldmVudCBhbHdheXMgZmlyZXMgd2hlbiB0aGUgc2NlbmUgbGVhdmVzIGl0cyBhY3RpdmUgc2Nyb2xsIHRpbWVmcmFtZSwgcmVnYXJkbGVzcyBvZiB0aGUgc2Nyb2xsLWRpcmVjdGlvbi5cclxuXHRcdCAqXHJcblx0XHQgKiBGb3IgZGV0YWlscyBvbiB0aGlzIGV2ZW50IGFuZCB0aGUgb3JkZXIgaW4gd2hpY2ggaXQgaXMgZmlyZWQsIHBsZWFzZSByZXZpZXcgdGhlIHtAbGluayBTY2VuZS5wcm9ncmVzc30gbWV0aG9kLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBldmVudCBTY3JvbGxNYWdpYy5TY2VuZSNsZWF2ZVxyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiBzY2VuZS5vbihcImxlYXZlXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cdFx0ICogXHRjb25zb2xlLmxvZyhcIlNjZW5lIGxlZnQuXCIpO1xyXG5cdFx0ICogfSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHByb3BlcnR5IHtvYmplY3R9IGV2ZW50IC0gVGhlIGV2ZW50IE9iamVjdCBwYXNzZWQgdG8gZWFjaCBjYWxsYmFja1xyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnR5cGUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7U2NlbmV9IGV2ZW50LnRhcmdldCAtIFRoZSBTY2VuZSBvYmplY3QgdGhhdCB0cmlnZ2VyZWQgdGhpcyBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtudW1iZXJ9IGV2ZW50LnByb2dyZXNzIC0gUmVmbGVjdHMgdGhlIGN1cnJlbnQgcHJvZ3Jlc3Mgb2YgdGhlIHNjZW5lXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQuc3RhdGUgLSBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgc2NlbmUgYFwiQkVGT1JFXCJgIG9yIGBcIkFGVEVSXCJgXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQuc2Nyb2xsRGlyZWN0aW9uIC0gSW5kaWNhdGVzIHdoaWNoIHdheSB3ZSBhcmUgc2Nyb2xsaW5nIGBcIlBBVVNFRFwiYCwgYFwiRk9SV0FSRFwiYCBvciBgXCJSRVZFUlNFXCJgXHJcblx0XHQgKi9cclxuXHRcdC8qKlxyXG5cdFx0ICogU2NlbmUgdXBkYXRlIGV2ZW50LiAgXHJcblx0XHQgKiBGaXJlcyB3aGVuZXZlciB0aGUgc2NlbmUgaXMgdXBkYXRlZCAoYnV0IG5vdCBuZWNlc3NhcmlseSBjaGFuZ2VzIHRoZSBwcm9ncmVzcykuXHJcblx0XHQgKlxyXG5cdFx0ICogQGV2ZW50IFNjcm9sbE1hZ2ljLlNjZW5lI3VwZGF0ZVxyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiBzY2VuZS5vbihcInVwZGF0ZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHRcdCAqIFx0Y29uc29sZS5sb2coXCJTY2VuZSB1cGRhdGVkLlwiKTtcclxuXHRcdCAqIH0pO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBldmVudCAtIFRoZSBldmVudCBPYmplY3QgcGFzc2VkIHRvIGVhY2ggY2FsbGJhY2tcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC50eXBlIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge1NjZW5lfSBldmVudC50YXJnZXQgLSBUaGUgU2NlbmUgb2JqZWN0IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBldmVudC5zdGFydFBvcyAtIFRoZSBzdGFydGluZyBwb3NpdGlvbiBvZiB0aGUgc2NlbmUgKGluIHJlbGF0aW9uIHRvIHRoZSBjb25haW5lcilcclxuXHRcdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBldmVudC5lbmRQb3MgLSBUaGUgZW5kaW5nIHBvc2l0aW9uIG9mIHRoZSBzY2VuZSAoaW4gcmVsYXRpb24gdG8gdGhlIGNvbmFpbmVyKVxyXG5cdFx0ICogQHByb3BlcnR5IHtudW1iZXJ9IGV2ZW50LnNjcm9sbFBvcyAtIFRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgY29udGFpbmVyXHJcblx0XHQgKi9cclxuXHRcdC8qKlxyXG5cdFx0ICogU2NlbmUgcHJvZ3Jlc3MgZXZlbnQuICBcclxuXHRcdCAqIEZpcmVzIHdoZW5ldmVyIHRoZSBwcm9ncmVzcyBvZiB0aGUgc2NlbmUgY2hhbmdlcy5cclxuXHRcdCAqXHJcblx0XHQgKiBGb3IgZGV0YWlscyBvbiB0aGlzIGV2ZW50IGFuZCB0aGUgb3JkZXIgaW4gd2hpY2ggaXQgaXMgZmlyZWQsIHBsZWFzZSByZXZpZXcgdGhlIHtAbGluayBTY2VuZS5wcm9ncmVzc30gbWV0aG9kLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBldmVudCBTY3JvbGxNYWdpYy5TY2VuZSNwcm9ncmVzc1xyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiBzY2VuZS5vbihcInByb2dyZXNzXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cdFx0ICogXHRjb25zb2xlLmxvZyhcIlNjZW5lIHByb2dyZXNzIGNoYW5nZWQgdG8gXCIgKyBldmVudC5wcm9ncmVzcyk7XHJcblx0XHQgKiB9KTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcHJvcGVydHkge29iamVjdH0gZXZlbnQgLSBUaGUgZXZlbnQgT2JqZWN0IHBhc3NlZCB0byBlYWNoIGNhbGxiYWNrXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQudHlwZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtTY2VuZX0gZXZlbnQudGFyZ2V0IC0gVGhlIFNjZW5lIG9iamVjdCB0aGF0IHRyaWdnZXJlZCB0aGlzIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge251bWJlcn0gZXZlbnQucHJvZ3Jlc3MgLSBSZWZsZWN0cyB0aGUgY3VycmVudCBwcm9ncmVzcyBvZiB0aGUgc2NlbmVcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC5zdGF0ZSAtIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBzY2VuZSBgXCJCRUZPUkVcImAsIGBcIkRVUklOR1wiYCBvciBgXCJBRlRFUlwiYFxyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnNjcm9sbERpcmVjdGlvbiAtIEluZGljYXRlcyB3aGljaCB3YXkgd2UgYXJlIHNjcm9sbGluZyBgXCJQQVVTRURcImAsIGBcIkZPUldBUkRcImAgb3IgYFwiUkVWRVJTRVwiYFxyXG5cdFx0ICovXHJcblx0XHQvKipcclxuXHRcdCAqIFNjZW5lIGNoYW5nZSBldmVudC4gIFxyXG5cdFx0ICogRmlyZXMgd2hlbnZldmVyIGEgcHJvcGVydHkgb2YgdGhlIHNjZW5lIGlzIGNoYW5nZWQuXHJcblx0XHQgKlxyXG5cdFx0ICogQGV2ZW50IFNjcm9sbE1hZ2ljLlNjZW5lI2NoYW5nZVxyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiBzY2VuZS5vbihcImNoYW5nZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHRcdCAqIFx0Y29uc29sZS5sb2coXCJTY2VuZSBQcm9wZXJ0eSBcXFwiXCIgKyBldmVudC53aGF0ICsgXCJcXFwiIGNoYW5nZWQgdG8gXCIgKyBldmVudC5uZXd2YWwpO1xyXG5cdFx0ICogfSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHByb3BlcnR5IHtvYmplY3R9IGV2ZW50IC0gVGhlIGV2ZW50IE9iamVjdCBwYXNzZWQgdG8gZWFjaCBjYWxsYmFja1xyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnR5cGUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7U2NlbmV9IGV2ZW50LnRhcmdldCAtIFRoZSBTY2VuZSBvYmplY3QgdGhhdCB0cmlnZ2VyZWQgdGhpcyBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LndoYXQgLSBJbmRpY2F0ZXMgd2hhdCB2YWx1ZSBoYXMgYmVlbiBjaGFuZ2VkXHJcblx0XHQgKiBAcHJvcGVydHkge21peGVkfSBldmVudC5uZXd2YWwgLSBUaGUgbmV3IHZhbHVlIG9mIHRoZSBjaGFuZ2VkIHByb3BlcnR5XHJcblx0XHQgKi9cclxuXHRcdC8qKlxyXG5cdFx0ICogU2NlbmUgc2hpZnQgZXZlbnQuICBcclxuXHRcdCAqIEZpcmVzIHdoZW52ZXZlciB0aGUgc3RhcnQgb3IgZW5kICoqc2Nyb2xsIG9mZnNldCoqIG9mIHRoZSBzY2VuZSBjaGFuZ2UuXHJcblx0XHQgKiBUaGlzIGhhcHBlbnMgZXhwbGljaXRlbHksIHdoZW4gb25lIG9mIHRoZXNlIHZhbHVlcyBjaGFuZ2U6IGBvZmZzZXRgLCBgZHVyYXRpb25gIG9yIGB0cmlnZ2VySG9va2AuXHJcblx0XHQgKiBJdCB3aWxsIGZpcmUgaW1wbGljaXRseSB3aGVuIHRoZSBgdHJpZ2dlckVsZW1lbnRgIGNoYW5nZXMsIGlmIHRoZSBuZXcgZWxlbWVudCBoYXMgYSBkaWZmZXJlbnQgcG9zaXRpb24gKG1vc3QgY2FzZXMpLlxyXG5cdFx0ICogSXQgd2lsbCBhbHNvIGZpcmUgaW1wbGljaXRseSB3aGVuIHRoZSBzaXplIG9mIHRoZSBjb250YWluZXIgY2hhbmdlcyBhbmQgdGhlIHRyaWdnZXJIb29rIGlzIGFueXRoaW5nIG90aGVyIHRoYW4gYG9uTGVhdmVgLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBldmVudCBTY3JvbGxNYWdpYy5TY2VuZSNzaGlmdFxyXG5cdFx0ICogQHNpbmNlIDEuMS4wXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIHNjZW5lLm9uKFwic2hpZnRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcblx0XHQgKiBcdGNvbnNvbGUubG9nKFwiU2NlbmUgbW92ZWQsIGJlY2F1c2UgdGhlIFwiICsgZXZlbnQucmVhc29uICsgXCIgaGFzIGNoYW5nZWQuKVwiKTtcclxuXHRcdCAqIH0pO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBldmVudCAtIFRoZSBldmVudCBPYmplY3QgcGFzc2VkIHRvIGVhY2ggY2FsbGJhY2tcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC50eXBlIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50XHJcblx0XHQgKiBAcHJvcGVydHkge1NjZW5lfSBldmVudC50YXJnZXQgLSBUaGUgU2NlbmUgb2JqZWN0IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBldmVudC5yZWFzb24gLSBJbmRpY2F0ZXMgd2h5IHRoZSBzY2VuZSBoYXMgc2hpZnRlZFxyXG5cdFx0ICovXHJcblx0XHQvKipcclxuXHRcdCAqIFNjZW5lIGRlc3Ryb3kgZXZlbnQuICBcclxuXHRcdCAqIEZpcmVzIHdoZW52ZXZlciB0aGUgc2NlbmUgaXMgZGVzdHJveWVkLlxyXG5cdFx0ICogVGhpcyBjYW4gYmUgdXNlZCB0byB0aWR5IHVwIGN1c3RvbSBiZWhhdmlvdXIgdXNlZCBpbiBldmVudHMuXHJcblx0XHQgKlxyXG5cdFx0ICogQGV2ZW50IFNjcm9sbE1hZ2ljLlNjZW5lI2Rlc3Ryb3lcclxuXHRcdCAqIEBzaW5jZSAxLjEuMFxyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiBzY2VuZS5vbihcImVudGVyXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cdFx0ICogICAgICAgIC8vIGFkZCBjdXN0b20gYWN0aW9uXHJcblx0XHQgKiAgICAgICAgJChcIiNteS1lbGVtXCIpLmxlZnQoXCIyMDBcIik7XHJcblx0XHQgKiAgICAgIH0pXHJcblx0XHQgKiAgICAgIC5vbihcImRlc3Ryb3lcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcblx0XHQgKiAgICAgICAgLy8gcmVzZXQgbXkgZWxlbWVudCB0byBzdGFydCBwb3NpdGlvblxyXG5cdFx0ICogICAgICAgIGlmIChldmVudC5yZXNldCkge1xyXG5cdFx0ICogICAgICAgICAgJChcIiNteS1lbGVtXCIpLmxlZnQoXCIwXCIpO1xyXG5cdFx0ICogICAgICAgIH1cclxuXHRcdCAqICAgICAgfSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHByb3BlcnR5IHtvYmplY3R9IGV2ZW50IC0gVGhlIGV2ZW50IE9iamVjdCBwYXNzZWQgdG8gZWFjaCBjYWxsYmFja1xyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnR5cGUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7U2NlbmV9IGV2ZW50LnRhcmdldCAtIFRoZSBTY2VuZSBvYmplY3QgdGhhdCB0cmlnZ2VyZWQgdGhpcyBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtib29sZWFufSBldmVudC5yZXNldCAtIEluZGljYXRlcyBpZiB0aGUgZGVzdHJveSBtZXRob2Qgd2FzIGNhbGxlZCB3aXRoIHJlc2V0IGB0cnVlYCBvciBgZmFsc2VgLlxyXG5cdFx0ICovXHJcblx0XHQvKipcclxuXHRcdCAqIFNjZW5lIGFkZCBldmVudC4gIFxyXG5cdFx0ICogRmlyZXMgd2hlbiB0aGUgc2NlbmUgaXMgYWRkZWQgdG8gYSBjb250cm9sbGVyLlxyXG5cdFx0ICogVGhpcyBpcyBtb3N0bHkgdXNlZCBieSBwbHVnaW5zIHRvIGtub3cgdGhhdCBjaGFuZ2UgbWlnaHQgYmUgZHVlLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBldmVudCBTY3JvbGxNYWdpYy5TY2VuZSNhZGRcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiBzY2VuZS5vbihcImFkZFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHRcdCAqIFx0Y29uc29sZS5sb2coJ1NjZW5lIHdhcyBhZGRlZCB0byBhIG5ldyBjb250cm9sbGVyLicpO1xyXG5cdFx0ICogfSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHByb3BlcnR5IHtvYmplY3R9IGV2ZW50IC0gVGhlIGV2ZW50IE9iamVjdCBwYXNzZWQgdG8gZWFjaCBjYWxsYmFja1xyXG5cdFx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGV2ZW50LnR5cGUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcclxuXHRcdCAqIEBwcm9wZXJ0eSB7U2NlbmV9IGV2ZW50LnRhcmdldCAtIFRoZSBTY2VuZSBvYmplY3QgdGhhdCB0cmlnZ2VyZWQgdGhpcyBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtib29sZWFufSBldmVudC5jb250cm9sbGVyIC0gVGhlIGNvbnRyb2xsZXIgb2JqZWN0IHRoZSBzY2VuZSB3YXMgYWRkZWQgdG8uXHJcblx0XHQgKi9cclxuXHRcdC8qKlxyXG5cdFx0ICogU2NlbmUgcmVtb3ZlIGV2ZW50LiAgXHJcblx0XHQgKiBGaXJlcyB3aGVuIHRoZSBzY2VuZSBpcyByZW1vdmVkIGZyb20gYSBjb250cm9sbGVyLlxyXG5cdFx0ICogVGhpcyBpcyBtb3N0bHkgdXNlZCBieSBwbHVnaW5zIHRvIGtub3cgdGhhdCBjaGFuZ2UgbWlnaHQgYmUgZHVlLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBldmVudCBTY3JvbGxNYWdpYy5TY2VuZSNyZW1vdmVcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiBzY2VuZS5vbihcInJlbW92ZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHRcdCAqIFx0Y29uc29sZS5sb2coJ1NjZW5lIHdhcyByZW1vdmVkIGZyb20gaXRzIGNvbnRyb2xsZXIuJyk7XHJcblx0XHQgKiB9KTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcHJvcGVydHkge29iamVjdH0gZXZlbnQgLSBUaGUgZXZlbnQgT2JqZWN0IHBhc3NlZCB0byBlYWNoIGNhbGxiYWNrXHJcblx0XHQgKiBAcHJvcGVydHkge3N0cmluZ30gZXZlbnQudHlwZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG5cdFx0ICogQHByb3BlcnR5IHtTY2VuZX0gZXZlbnQudGFyZ2V0IC0gVGhlIFNjZW5lIG9iamVjdCB0aGF0IHRyaWdnZXJlZCB0aGlzIGV2ZW50XHJcblx0XHQgKi9cclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFkZCBvbmUgb3JlIG1vcmUgZXZlbnQgbGlzdGVuZXIuICBcclxuXHRcdCAqIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB3aWxsIGJlIGZpcmVkIGF0IHRoZSByZXNwZWN0aXZlIGV2ZW50LCBhbmQgYW4gb2JqZWN0IGNvbnRhaW5pbmcgcmVsZXZhbnQgZGF0YSB3aWxsIGJlIHBhc3NlZCB0byB0aGUgY2FsbGJhY2suXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI29uXHJcblx0XHQgKlxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIGZ1bmN0aW9uIGNhbGxiYWNrIChldmVudCkge1xyXG5cdFx0ICogXHRcdGNvbnNvbGUubG9nKFwiRXZlbnQgZmlyZWQhIChcIiArIGV2ZW50LnR5cGUgKyBcIilcIik7XHJcblx0XHQgKiB9XHJcblx0XHQgKiAvLyBhZGQgbGlzdGVuZXJzXHJcblx0XHQgKiBzY2VuZS5vbihcImNoYW5nZSB1cGRhdGUgcHJvZ3Jlc3Mgc3RhcnQgZW5kIGVudGVyIGxlYXZlXCIsIGNhbGxiYWNrKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZXMgLSBUaGUgbmFtZSBvciBuYW1lcyBvZiB0aGUgZXZlbnQgdGhlIGNhbGxiYWNrIHNob3VsZCBiZSBhdHRhY2hlZCB0by5cclxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gQSBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSBleGVjdXRlZCwgd2hlbiB0aGUgZXZlbnQgaXMgZGlzcGF0Y2hlZC4gQW4gZXZlbnQgb2JqZWN0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBjYWxsYmFjay5cclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMub24gPSBmdW5jdGlvbiAobmFtZXMsIGNhbGxiYWNrKSB7XHJcblx0XHRcdGlmIChfdXRpbC50eXBlLkZ1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG5cdFx0XHRcdG5hbWVzID0gbmFtZXMudHJpbSgpLnNwbGl0KCcgJyk7XHJcblx0XHRcdFx0bmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoZnVsbG5hbWUpIHtcclxuXHRcdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0XHRuYW1lcGFydHMgPSBmdWxsbmFtZS5zcGxpdCgnLicpLFxyXG5cdFx0XHRcdFx0XHRldmVudG5hbWUgPSBuYW1lcGFydHNbMF0sXHJcblx0XHRcdFx0XHRcdG5hbWVzcGFjZSA9IG5hbWVwYXJ0c1sxXTtcclxuXHRcdFx0XHRcdGlmIChldmVudG5hbWUgIT0gXCIqXCIpIHsgLy8gZGlzYWxsb3cgd2lsZGNhcmRzXHJcblx0XHRcdFx0XHRcdGlmICghX2xpc3RlbmVyc1tldmVudG5hbWVdKSB7XHJcblx0XHRcdFx0XHRcdFx0X2xpc3RlbmVyc1tldmVudG5hbWVdID0gW107XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0X2xpc3RlbmVyc1tldmVudG5hbWVdLnB1c2goe1xyXG5cdFx0XHRcdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlIHx8ICcnLFxyXG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrOiBjYWxsYmFja1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRsb2coMSwgXCJFUlJPUiB3aGVuIGNhbGxpbmcgJy5vbigpJzogU3VwcGxpZWQgY2FsbGJhY2sgZm9yICdcIiArIG5hbWVzICsgXCInIGlzIG5vdCBhIHZhbGlkIGZ1bmN0aW9uIVwiKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gU2NlbmU7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogUmVtb3ZlIG9uZSBvciBtb3JlIGV2ZW50IGxpc3RlbmVyLlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNvZmZcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogZnVuY3Rpb24gY2FsbGJhY2sgKGV2ZW50KSB7XHJcblx0XHQgKiBcdFx0Y29uc29sZS5sb2coXCJFdmVudCBmaXJlZCEgKFwiICsgZXZlbnQudHlwZSArIFwiKVwiKTtcclxuXHRcdCAqIH1cclxuXHRcdCAqIC8vIGFkZCBsaXN0ZW5lcnNcclxuXHRcdCAqIHNjZW5lLm9uKFwiY2hhbmdlIHVwZGF0ZVwiLCBjYWxsYmFjayk7XHJcblx0XHQgKiAvLyByZW1vdmUgbGlzdGVuZXJzXHJcblx0XHQgKiBzY2VuZS5vZmYoXCJjaGFuZ2UgdXBkYXRlXCIsIGNhbGxiYWNrKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZXMgLSBUaGUgbmFtZSBvciBuYW1lcyBvZiB0aGUgZXZlbnQgdGhhdCBzaG91bGQgYmUgcmVtb3ZlZC5cclxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gLSBBIHNwZWNpZmljIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIHJlbW92ZWQuIElmIG5vbmUgaXMgcGFzc2VkIGFsbCBjYWxsYmFja3MgdG8gdGhlIGV2ZW50IGxpc3RlbmVyIHdpbGwgYmUgcmVtb3ZlZC5cclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMub2ZmID0gZnVuY3Rpb24gKG5hbWVzLCBjYWxsYmFjaykge1xyXG5cdFx0XHRpZiAoIW5hbWVzKSB7XHJcblx0XHRcdFx0bG9nKDEsIFwiRVJST1I6IEludmFsaWQgZXZlbnQgbmFtZSBzdXBwbGllZC5cIik7XHJcblx0XHRcdFx0cmV0dXJuIFNjZW5lO1xyXG5cdFx0XHR9XHJcblx0XHRcdG5hbWVzID0gbmFtZXMudHJpbSgpLnNwbGl0KCcgJyk7XHJcblx0XHRcdG5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGZ1bGxuYW1lLCBrZXkpIHtcclxuXHRcdFx0XHR2YXJcclxuXHRcdFx0XHRcdG5hbWVwYXJ0cyA9IGZ1bGxuYW1lLnNwbGl0KCcuJyksXHJcblx0XHRcdFx0XHRldmVudG5hbWUgPSBuYW1lcGFydHNbMF0sXHJcblx0XHRcdFx0XHRuYW1lc3BhY2UgPSBuYW1lcGFydHNbMV0gfHwgJycsXHJcblx0XHRcdFx0XHRyZW1vdmVMaXN0ID0gZXZlbnRuYW1lID09PSAnKicgPyBPYmplY3Qua2V5cyhfbGlzdGVuZXJzKSA6IFtldmVudG5hbWVdO1xyXG5cdFx0XHRcdHJlbW92ZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAocmVtb3ZlKSB7XHJcblx0XHRcdFx0XHR2YXJcclxuXHRcdFx0XHRcdFx0bGlzdCA9IF9saXN0ZW5lcnNbcmVtb3ZlXSB8fCBbXSxcclxuXHRcdFx0XHRcdFx0aSA9IGxpc3QubGVuZ3RoO1xyXG5cdFx0XHRcdFx0d2hpbGUgKGktLSkge1xyXG5cdFx0XHRcdFx0XHR2YXIgbGlzdGVuZXIgPSBsaXN0W2ldO1xyXG5cdFx0XHRcdFx0XHRpZiAobGlzdGVuZXIgJiYgKG5hbWVzcGFjZSA9PT0gbGlzdGVuZXIubmFtZXNwYWNlIHx8IG5hbWVzcGFjZSA9PT0gJyonKSAmJiAoIWNhbGxiYWNrIHx8IGNhbGxiYWNrID09IGxpc3RlbmVyLmNhbGxiYWNrKSkge1xyXG5cdFx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKGksIDEpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAoIWxpc3QubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdGRlbGV0ZSBfbGlzdGVuZXJzW3JlbW92ZV07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRyZXR1cm4gU2NlbmU7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogVHJpZ2dlciBhbiBldmVudC5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjdHJpZ2dlclxyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiB0aGlzLnRyaWdnZXIoXCJjaGFuZ2VcIik7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdGhhdCBzaG91bGQgYmUgdHJpZ2dlcmVkLlxyXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IFt2YXJzXSAtIEFuIG9iamVjdCBjb250YWluaW5nIGluZm8gdGhhdCBzaG91bGQgYmUgcGFzc2VkIHRvIHRoZSBjYWxsYmFjay5cclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMudHJpZ2dlciA9IGZ1bmN0aW9uIChuYW1lLCB2YXJzKSB7XHJcblx0XHRcdGlmIChuYW1lKSB7XHJcblx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRuYW1lcGFydHMgPSBuYW1lLnRyaW0oKS5zcGxpdCgnLicpLFxyXG5cdFx0XHRcdFx0ZXZlbnRuYW1lID0gbmFtZXBhcnRzWzBdLFxyXG5cdFx0XHRcdFx0bmFtZXNwYWNlID0gbmFtZXBhcnRzWzFdLFxyXG5cdFx0XHRcdFx0bGlzdGVuZXJzID0gX2xpc3RlbmVyc1tldmVudG5hbWVdO1xyXG5cdFx0XHRcdGxvZygzLCAnZXZlbnQgZmlyZWQ6JywgZXZlbnRuYW1lLCB2YXJzID8gXCItPlwiIDogJycsIHZhcnMgfHwgJycpO1xyXG5cdFx0XHRcdGlmIChsaXN0ZW5lcnMpIHtcclxuXHRcdFx0XHRcdGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lciwga2V5KSB7XHJcblx0XHRcdFx0XHRcdGlmICghbmFtZXNwYWNlIHx8IG5hbWVzcGFjZSA9PT0gbGlzdGVuZXIubmFtZXNwYWNlKSB7XHJcblx0XHRcdFx0XHRcdFx0bGlzdGVuZXIuY2FsbGJhY2suY2FsbChTY2VuZSwgbmV3IFNjcm9sbE1hZ2ljLkV2ZW50KGV2ZW50bmFtZSwgbGlzdGVuZXIubmFtZXNwYWNlLCBTY2VuZSwgdmFycykpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bG9nKDEsIFwiRVJST1I6IEludmFsaWQgZXZlbnQgbmFtZSBzdXBwbGllZC5cIik7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIFNjZW5lO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBzZXQgZXZlbnQgbGlzdGVuZXJzXHJcblx0XHRTY2VuZVxyXG5cdFx0XHQub24oXCJjaGFuZ2UuaW50ZXJuYWxcIiwgZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0XHRpZiAoZS53aGF0ICE9PSBcImxvZ2xldmVsXCIgJiYgZS53aGF0ICE9PSBcInR3ZWVuQ2hhbmdlc1wiKSB7IC8vIG5vIG5lZWQgZm9yIGEgc2NlbmUgdXBkYXRlIHNjZW5lIHdpdGggdGhlc2Ugb3B0aW9ucy4uLlxyXG5cdFx0XHRcdFx0aWYgKGUud2hhdCA9PT0gXCJ0cmlnZ2VyRWxlbWVudFwiKSB7XHJcblx0XHRcdFx0XHRcdHVwZGF0ZVRyaWdnZXJFbGVtZW50UG9zaXRpb24oKTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoZS53aGF0ID09PSBcInJldmVyc2VcIikgeyAvLyB0aGUgb25seSBwcm9wZXJ0eSBsZWZ0IHRoYXQgbWF5IGhhdmUgYW4gaW1wYWN0IG9uIHRoZSBjdXJyZW50IHNjZW5lIHN0YXRlLiBFdmVyeXRoaW5nIGVsc2UgaXMgaGFuZGxlZCBieSB0aGUgc2hpZnQgZXZlbnQuXHJcblx0XHRcdFx0XHRcdFNjZW5lLnVwZGF0ZSgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHRcdFx0Lm9uKFwic2hpZnQuaW50ZXJuYWxcIiwgZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0XHR1cGRhdGVTY3JvbGxPZmZzZXQoKTtcclxuXHRcdFx0XHRTY2VuZS51cGRhdGUoKTsgLy8gdXBkYXRlIHNjZW5lIHRvIHJlZmxlY3QgbmV3IHBvc2l0aW9uXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogU2VuZCBhIGRlYnVnIG1lc3NhZ2UgdG8gdGhlIGNvbnNvbGUuXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICogYnV0IHByb3ZpZGVkIHB1YmxpY2x5IHdpdGggX2xvZyBmb3IgcGx1Z2luc1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBsb2dsZXZlbCAtIFRoZSBsb2dsZXZlbCByZXF1aXJlZCB0byBpbml0aWF0ZSBvdXRwdXQgZm9yIHRoZSBtZXNzYWdlLlxyXG5cdFx0ICogQHBhcmFtIHsuLi5taXhlZH0gb3V0cHV0IC0gT25lIG9yIG1vcmUgdmFyaWFibGVzIHRoYXQgc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgY29uc29sZS5cclxuXHRcdCAqL1xyXG5cdFx0dmFyIGxvZyA9IHRoaXMuX2xvZyA9IGZ1bmN0aW9uIChsb2dsZXZlbCwgb3V0cHV0KSB7XHJcblx0XHRcdGlmIChfb3B0aW9ucy5sb2dsZXZlbCA+PSBsb2dsZXZlbCkge1xyXG5cdFx0XHRcdEFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChhcmd1bWVudHMsIDEsIDAsIFwiKFwiICsgTkFNRVNQQUNFICsgXCIpIC0+XCIpO1xyXG5cdFx0XHRcdF91dGlsLmxvZy5hcHBseSh3aW5kb3csIGFyZ3VtZW50cyk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBZGQgdGhlIHNjZW5lIHRvIGEgY29udHJvbGxlci4gIFxyXG5cdFx0ICogVGhpcyBpcyB0aGUgZXF1aXZhbGVudCB0byBgQ29udHJvbGxlci5hZGRTY2VuZShzY2VuZSlgLlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNhZGRUb1xyXG5cdFx0ICpcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBhZGQgYSBzY2VuZSB0byBhIFNjcm9sbE1hZ2ljIENvbnRyb2xsZXJcclxuXHRcdCAqIHNjZW5lLmFkZFRvKGNvbnRyb2xsZXIpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7U2Nyb2xsTWFnaWMuQ29udHJvbGxlcn0gY29udHJvbGxlciAtIFRoZSBjb250cm9sbGVyIHRvIHdoaWNoIHRoZSBzY2VuZSBzaG91bGQgYmUgYWRkZWQuXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLmFkZFRvID0gZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHtcclxuXHRcdFx0aWYgKCEoY29udHJvbGxlciBpbnN0YW5jZW9mIFNjcm9sbE1hZ2ljLkNvbnRyb2xsZXIpKSB7XHJcblx0XHRcdFx0bG9nKDEsIFwiRVJST1I6IHN1cHBsaWVkIGFyZ3VtZW50IG9mICdhZGRUbygpJyBpcyBub3QgYSB2YWxpZCBTY3JvbGxNYWdpYyBDb250cm9sbGVyXCIpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKF9jb250cm9sbGVyICE9IGNvbnRyb2xsZXIpIHtcclxuXHRcdFx0XHQvLyBuZXcgY29udHJvbGxlclxyXG5cdFx0XHRcdGlmIChfY29udHJvbGxlcikgeyAvLyB3YXMgYXNzb2NpYXRlZCB0byBhIGRpZmZlcmVudCBjb250cm9sbGVyIGJlZm9yZSwgc28gcmVtb3ZlIGl0Li4uXHJcblx0XHRcdFx0XHRfY29udHJvbGxlci5yZW1vdmVTY2VuZShTY2VuZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdF9jb250cm9sbGVyID0gY29udHJvbGxlcjtcclxuXHRcdFx0XHR2YWxpZGF0ZU9wdGlvbigpO1xyXG5cdFx0XHRcdHVwZGF0ZUR1cmF0aW9uKHRydWUpO1xyXG5cdFx0XHRcdHVwZGF0ZVRyaWdnZXJFbGVtZW50UG9zaXRpb24odHJ1ZSk7XHJcblx0XHRcdFx0dXBkYXRlU2Nyb2xsT2Zmc2V0KCk7XHJcblx0XHRcdFx0X2NvbnRyb2xsZXIuaW5mbyhcImNvbnRhaW5lclwiKS5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbkNvbnRhaW5lclJlc2l6ZSk7XHJcblx0XHRcdFx0Y29udHJvbGxlci5hZGRTY2VuZShTY2VuZSk7XHJcblx0XHRcdFx0U2NlbmUudHJpZ2dlcihcImFkZFwiLCB7XHJcblx0XHRcdFx0XHRjb250cm9sbGVyOiBfY29udHJvbGxlclxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdGxvZygzLCBcImFkZGVkIFwiICsgTkFNRVNQQUNFICsgXCIgdG8gY29udHJvbGxlclwiKTtcclxuXHRcdFx0XHRTY2VuZS51cGRhdGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gU2NlbmU7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogKipHZXQqKiBvciAqKlNldCoqIHRoZSBjdXJyZW50IGVuYWJsZWQgc3RhdGUgb2YgdGhlIHNjZW5lLiAgXHJcblx0XHQgKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGRpc2FibGUgdGhpcyBzY2VuZSB3aXRob3V0IHJlbW92aW5nIG9yIGRlc3Ryb3lpbmcgaXQuXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI2VuYWJsZWRcclxuXHRcdCAqXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gZ2V0IHRoZSBjdXJyZW50IHZhbHVlXHJcblx0XHQgKiB2YXIgZW5hYmxlZCA9IHNjZW5lLmVuYWJsZWQoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBkaXNhYmxlIHRoZSBzY2VuZVxyXG5cdFx0ICogc2NlbmUuZW5hYmxlZChmYWxzZSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBbbmV3U3RhdGVdIC0gVGhlIG5ldyBlbmFibGVkIHN0YXRlIG9mIHRoZSBzY2VuZSBgdHJ1ZWAgb3IgYGZhbHNlYC5cclxuXHRcdCAqIEByZXR1cm5zIHsoYm9vbGVhbnxTY2VuZSl9IEN1cnJlbnQgZW5hYmxlZCBzdGF0ZSBvciBwYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5lbmFibGVkID0gZnVuY3Rpb24gKG5ld1N0YXRlKSB7XHJcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkgeyAvLyBnZXRcclxuXHRcdFx0XHRyZXR1cm4gX2VuYWJsZWQ7XHJcblx0XHRcdH0gZWxzZSBpZiAoX2VuYWJsZWQgIT0gbmV3U3RhdGUpIHsgLy8gc2V0XHJcblx0XHRcdFx0X2VuYWJsZWQgPSAhIW5ld1N0YXRlO1xyXG5cdFx0XHRcdFNjZW5lLnVwZGF0ZSh0cnVlKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gU2NlbmU7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogUmVtb3ZlIHRoZSBzY2VuZSBmcm9tIHRoZSBjb250cm9sbGVyLiAgXHJcblx0XHQgKiBUaGlzIGlzIHRoZSBlcXVpdmFsZW50IHRvIGBDb250cm9sbGVyLnJlbW92ZVNjZW5lKHNjZW5lKWAuXHJcblx0XHQgKiBUaGUgc2NlbmUgd2lsbCBub3QgYmUgdXBkYXRlZCBhbnltb3JlIHVudGlsIHlvdSByZWFkZCBpdCB0byBhIGNvbnRyb2xsZXIuXHJcblx0XHQgKiBUbyByZW1vdmUgdGhlIHBpbiBvciB0aGUgdHdlZW4geW91IG5lZWQgdG8gY2FsbCByZW1vdmVUd2VlbigpIG9yIHJlbW92ZVBpbigpIHJlc3BlY3RpdmVseS5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjcmVtb3ZlXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gcmVtb3ZlIHRoZSBzY2VuZSBmcm9tIGl0cyBjb250cm9sbGVyXHJcblx0XHQgKiBzY2VuZS5yZW1vdmUoKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0aWYgKF9jb250cm9sbGVyKSB7XHJcblx0XHRcdFx0X2NvbnRyb2xsZXIuaW5mbyhcImNvbnRhaW5lclwiKS5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbkNvbnRhaW5lclJlc2l6ZSk7XHJcblx0XHRcdFx0dmFyIHRtcFBhcmVudCA9IF9jb250cm9sbGVyO1xyXG5cdFx0XHRcdF9jb250cm9sbGVyID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdHRtcFBhcmVudC5yZW1vdmVTY2VuZShTY2VuZSk7XHJcblx0XHRcdFx0U2NlbmUudHJpZ2dlcihcInJlbW92ZVwiKTtcclxuXHRcdFx0XHRsb2coMywgXCJyZW1vdmVkIFwiICsgTkFNRVNQQUNFICsgXCIgZnJvbSBjb250cm9sbGVyXCIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBTY2VuZTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBEZXN0cm95IHRoZSBzY2VuZSBhbmQgZXZlcnl0aGluZy5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjZGVzdHJveVxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGRlc3Ryb3kgdGhlIHNjZW5lIHdpdGhvdXQgcmVzZXR0aW5nIHRoZSBwaW4gYW5kIHR3ZWVuIHRvIHRoZWlyIGluaXRpYWwgcG9zaXRpb25zXHJcblx0XHQgKiBzY2VuZSA9IHNjZW5lLmRlc3Ryb3koKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBkZXN0cm95IHRoZSBzY2VuZSBhbmQgcmVzZXQgdGhlIHBpbiBhbmQgdHdlZW5cclxuXHRcdCAqIHNjZW5lID0gc2NlbmUuZGVzdHJveSh0cnVlKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXNldD1mYWxzZV0gLSBJZiBgdHJ1ZWAgdGhlIHBpbiBhbmQgdHdlZW4gKGlmIGV4aXN0ZW50KSB3aWxsIGJlIHJlc2V0LlxyXG5cdFx0ICogQHJldHVybnMge251bGx9IE51bGwgdG8gdW5zZXQgaGFuZGxlciB2YXJpYWJsZXMuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuZGVzdHJveSA9IGZ1bmN0aW9uIChyZXNldCkge1xyXG5cdFx0XHRTY2VuZS50cmlnZ2VyKFwiZGVzdHJveVwiLCB7XHJcblx0XHRcdFx0cmVzZXQ6IHJlc2V0XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRTY2VuZS5yZW1vdmUoKTtcclxuXHRcdFx0U2NlbmUub2ZmKFwiKi4qXCIpO1xyXG5cdFx0XHRsb2coMywgXCJkZXN0cm95ZWQgXCIgKyBOQU1FU1BBQ0UgKyBcIiAocmVzZXQ6IFwiICsgKHJlc2V0ID8gXCJ0cnVlXCIgOiBcImZhbHNlXCIpICsgXCIpXCIpO1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH07XHJcblxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogVXBkYXRlcyB0aGUgU2NlbmUgdG8gcmVmbGVjdCB0aGUgY3VycmVudCBzdGF0ZS4gIFxyXG5cdFx0ICogVGhpcyBpcyB0aGUgZXF1aXZhbGVudCB0byBgQ29udHJvbGxlci51cGRhdGVTY2VuZShzY2VuZSwgaW1tZWRpYXRlbHkpYC4gIFxyXG5cdFx0ICogVGhlIHVwZGF0ZSBtZXRob2QgY2FsY3VsYXRlcyB0aGUgc2NlbmUncyBzdGFydCBhbmQgZW5kIHBvc2l0aW9uIChiYXNlZCBvbiB0aGUgdHJpZ2dlciBlbGVtZW50LCB0cmlnZ2VyIGhvb2ssIGR1cmF0aW9uIGFuZCBvZmZzZXQpIGFuZCBjaGVja3MgaXQgYWdhaW5zdCB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIGNvbnRhaW5lci4gIFxyXG5cdFx0ICogSXQgdGhlbiB1cGRhdGVzIHRoZSBjdXJyZW50IHNjZW5lIHN0YXRlIGFjY29yZGluZ2x5IChvciBkb2VzIG5vdGhpbmcsIGlmIHRoZSBzdGF0ZSBpcyBhbHJlYWR5IGNvcnJlY3QpIOKAkyBQaW5zIHdpbGwgYmUgc2V0IHRvIHRoZWlyIGNvcnJlY3QgcG9zaXRpb24gYW5kIHR3ZWVucyB3aWxsIGJlIHVwZGF0ZWQgdG8gdGhlaXIgY29ycmVjdCBwcm9ncmVzcy5cclxuXHRcdCAqIFRoaXMgbWVhbnMgYW4gdXBkYXRlIGRvZXNuJ3QgbmVjZXNzYXJpbHkgcmVzdWx0IGluIGEgcHJvZ3Jlc3MgY2hhbmdlLiBUaGUgYHByb2dyZXNzYCBldmVudCB3aWxsIGJlIGZpcmVkIGlmIHRoZSBwcm9ncmVzcyBoYXMgaW5kZWVkIGNoYW5nZWQgYmV0d2VlbiB0aGlzIHVwZGF0ZSBhbmQgdGhlIGxhc3QuICBcclxuXHRcdCAqIF8qKk5PVEU6KiogVGhpcyBtZXRob2QgZ2V0cyBjYWxsZWQgY29uc3RhbnRseSB3aGVuZXZlciBTY3JvbGxNYWdpYyBkZXRlY3RzIGEgY2hhbmdlLiBUaGUgb25seSBhcHBsaWNhdGlvbiBmb3IgeW91IGlzIGlmIHlvdSBjaGFuZ2Ugc29tZXRoaW5nIG91dHNpZGUgb2YgdGhlIHJlYWxtIG9mIFNjcm9sbE1hZ2ljLCBsaWtlIG1vdmluZyB0aGUgdHJpZ2dlciBvciBjaGFuZ2luZyB0d2VlbiBwYXJhbWV0ZXJzLl9cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjdXBkYXRlXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gdXBkYXRlIHRoZSBzY2VuZSBvbiBuZXh0IHRpY2tcclxuXHRcdCAqIHNjZW5lLnVwZGF0ZSgpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHVwZGF0ZSB0aGUgc2NlbmUgaW1tZWRpYXRlbHlcclxuXHRcdCAqIHNjZW5lLnVwZGF0ZSh0cnVlKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAZmlyZXMgU2NlbmUudXBkYXRlXHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBbaW1tZWRpYXRlbHk9ZmFsc2VdIC0gSWYgYHRydWVgIHRoZSB1cGRhdGUgd2lsbCBiZSBpbnN0YW50LCBpZiBgZmFsc2VgIGl0IHdpbGwgd2FpdCB1bnRpbCBuZXh0IHVwZGF0ZSBjeWNsZSAoYmV0dGVyIHBlcmZvcm1hbmNlKS5cclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMudXBkYXRlID0gZnVuY3Rpb24gKGltbWVkaWF0ZWx5KSB7XHJcblx0XHRcdGlmIChfY29udHJvbGxlcikge1xyXG5cdFx0XHRcdGlmIChpbW1lZGlhdGVseSkge1xyXG5cdFx0XHRcdFx0aWYgKF9jb250cm9sbGVyLmVuYWJsZWQoKSAmJiBfZW5hYmxlZCkge1xyXG5cdFx0XHRcdFx0XHR2YXJcclxuXHRcdFx0XHRcdFx0XHRzY3JvbGxQb3MgPSBfY29udHJvbGxlci5pbmZvKFwic2Nyb2xsUG9zXCIpLFxyXG5cdFx0XHRcdFx0XHRcdG5ld1Byb2dyZXNzO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKF9vcHRpb25zLmR1cmF0aW9uID4gMCkge1xyXG5cdFx0XHRcdFx0XHRcdG5ld1Byb2dyZXNzID0gKHNjcm9sbFBvcyAtIF9zY3JvbGxPZmZzZXQuc3RhcnQpIC8gKF9zY3JvbGxPZmZzZXQuZW5kIC0gX3Njcm9sbE9mZnNldC5zdGFydCk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0bmV3UHJvZ3Jlc3MgPSBzY3JvbGxQb3MgPj0gX3Njcm9sbE9mZnNldC5zdGFydCA/IDEgOiAwO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRTY2VuZS50cmlnZ2VyKFwidXBkYXRlXCIsIHtcclxuXHRcdFx0XHRcdFx0XHRzdGFydFBvczogX3Njcm9sbE9mZnNldC5zdGFydCxcclxuXHRcdFx0XHRcdFx0XHRlbmRQb3M6IF9zY3JvbGxPZmZzZXQuZW5kLFxyXG5cdFx0XHRcdFx0XHRcdHNjcm9sbFBvczogc2Nyb2xsUG9zXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdFx0U2NlbmUucHJvZ3Jlc3MobmV3UHJvZ3Jlc3MpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChfcGluICYmIF9zdGF0ZSA9PT0gU0NFTkVfU1RBVEVfRFVSSU5HKSB7XHJcblx0XHRcdFx0XHRcdHVwZGF0ZVBpblN0YXRlKHRydWUpOyAvLyB1bnBpbiBpbiBwb3NpdGlvblxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRfY29udHJvbGxlci51cGRhdGVTY2VuZShTY2VuZSwgZmFsc2UpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gU2NlbmU7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogVXBkYXRlcyBkeW5hbWljIHNjZW5lIHZhcmlhYmxlcyBsaWtlIHRoZSB0cmlnZ2VyIGVsZW1lbnQgcG9zaXRpb24gb3IgdGhlIGR1cmF0aW9uLlxyXG5cdFx0ICogVGhpcyBtZXRob2QgaXMgYXV0b21hdGljYWxseSBjYWxsZWQgaW4gcmVndWxhciBpbnRlcnZhbHMgZnJvbSB0aGUgY29udHJvbGxlci4gU2VlIHtAbGluayBTY3JvbGxNYWdpYy5Db250cm9sbGVyfSBvcHRpb24gYHJlZnJlc2hJbnRlcnZhbGAuXHJcblx0XHQgKiBcclxuXHRcdCAqIFlvdSBjYW4gY2FsbCBpdCB0byBtaW5pbWl6ZSBsYWcsIGZvciBleGFtcGxlIHdoZW4geW91IGludGVudGlvbmFsbHkgY2hhbmdlIHRoZSBwb3NpdGlvbiBvZiB0aGUgdHJpZ2dlckVsZW1lbnQuXHJcblx0XHQgKiBJZiB5b3UgZG9uJ3QgaXQgd2lsbCBzaW1wbHkgYmUgdXBkYXRlZCBpbiB0aGUgbmV4dCByZWZyZXNoIGludGVydmFsIG9mIHRoZSBjb250YWluZXIsIHdoaWNoIGlzIHVzdWFsbHkgc3VmZmljaWVudC5cclxuXHRcdCAqXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI3JlZnJlc2hcclxuXHRcdCAqIEBzaW5jZSAxLjEuMFxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIHNjZW5lID0gbmV3IFNjcm9sbE1hZ2ljLlNjZW5lKHt0cmlnZ2VyRWxlbWVudDogXCIjdHJpZ2dlclwifSk7XHJcblx0XHQgKiBcclxuXHRcdCAqIC8vIGNoYW5nZSB0aGUgcG9zaXRpb24gb2YgdGhlIHRyaWdnZXJcclxuXHRcdCAqICQoXCIjdHJpZ2dlclwiKS5jc3MoXCJ0b3BcIiwgNTAwKTtcclxuXHRcdCAqIC8vIGltbWVkaWF0ZWx5IGxldCB0aGUgc2NlbmUga25vdyBvZiB0aGlzIGNoYW5nZVxyXG5cdFx0ICogc2NlbmUucmVmcmVzaCgpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUuc2hpZnR9LCBpZiB0aGUgdHJpZ2dlciBlbGVtZW50IHBvc2l0aW9uIG9yIHRoZSBkdXJhdGlvbiBjaGFuZ2VkXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLmNoYW5nZX0sIGlmIHRoZSBkdXJhdGlvbiBjaGFuZ2VkXHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHR1cGRhdGVEdXJhdGlvbigpO1xyXG5cdFx0XHR1cGRhdGVUcmlnZ2VyRWxlbWVudFBvc2l0aW9uKCk7XHJcblx0XHRcdC8vIHVwZGF0ZSB0cmlnZ2VyIGVsZW1lbnQgcG9zaXRpb25cclxuXHRcdFx0cmV0dXJuIFNjZW5lO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqICoqR2V0Kiogb3IgKipTZXQqKiB0aGUgc2NlbmUncyBwcm9ncmVzcy4gIFxyXG5cdFx0ICogVXN1YWxseSBpdCBzaG91bGRuJ3QgYmUgbmVjZXNzYXJ5IHRvIHVzZSB0aGlzIGFzIGEgc2V0dGVyLCBhcyBpdCBpcyBzZXQgYXV0b21hdGljYWxseSBieSBzY2VuZS51cGRhdGUoKS4gIFxyXG5cdFx0ICogVGhlIG9yZGVyIGluIHdoaWNoIHRoZSBldmVudHMgYXJlIGZpcmVkIGRlcGVuZHMgb24gdGhlIGR1cmF0aW9uIG9mIHRoZSBzY2VuZTpcclxuXHRcdCAqICAxLiBTY2VuZXMgd2l0aCBgZHVyYXRpb24gPT0gMGA6ICBcclxuXHRcdCAqICBTY2VuZXMgdGhhdCBoYXZlIG5vIGR1cmF0aW9uIGJ5IGRlZmluaXRpb24gaGF2ZSBubyBlbmRpbmcuIFRodXMgdGhlIGBlbmRgIGV2ZW50IHdpbGwgbmV2ZXIgYmUgZmlyZWQuICBcclxuXHRcdCAqICBXaGVuIHRoZSB0cmlnZ2VyIHBvc2l0aW9uIG9mIHRoZSBzY2VuZSBpcyBwYXNzZWQgdGhlIGV2ZW50cyBhcmUgYWx3YXlzIGZpcmVkIGluIHRoaXMgb3JkZXI6ICBcclxuXHRcdCAqICBgZW50ZXJgLCBgc3RhcnRgLCBgcHJvZ3Jlc3NgIHdoZW4gc2Nyb2xsaW5nIGZvcndhcmQgIFxyXG5cdFx0ICogIGFuZCAgXHJcblx0XHQgKiAgYHByb2dyZXNzYCwgYHN0YXJ0YCwgYGxlYXZlYCB3aGVuIHNjcm9sbGluZyBpbiByZXZlcnNlXHJcblx0XHQgKiAgMi4gU2NlbmVzIHdpdGggYGR1cmF0aW9uID4gMGA6ICBcclxuXHRcdCAqICBTY2VuZXMgd2l0aCBhIHNldCBkdXJhdGlvbiBoYXZlIGEgZGVmaW5lZCBzdGFydCBhbmQgZW5kIHBvaW50LiAgXHJcblx0XHQgKiAgV2hlbiBzY3JvbGxpbmcgcGFzdCB0aGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHNjZW5lIGl0IHdpbGwgZmlyZSB0aGVzZSBldmVudHMgaW4gdGhpcyBvcmRlcjogIFxyXG5cdFx0ICogIGBlbnRlcmAsIGBzdGFydGAsIGBwcm9ncmVzc2AgIFxyXG5cdFx0ICogIFdoZW4gY29udGludWluZyB0byBzY3JvbGwgYW5kIHBhc3NpbmcgdGhlIGVuZCBwb2ludCBpdCB3aWxsIGZpcmUgdGhlc2UgZXZlbnRzOiAgXHJcblx0XHQgKiAgYHByb2dyZXNzYCwgYGVuZGAsIGBsZWF2ZWAgIFxyXG5cdFx0ICogIFdoZW4gcmV2ZXJzaW5nIHRocm91Z2ggdGhlIGVuZCBwb2ludCB0aGVzZSBldmVudHMgYXJlIGZpcmVkOiAgXHJcblx0XHQgKiAgYGVudGVyYCwgYGVuZGAsIGBwcm9ncmVzc2AgIFxyXG5cdFx0ICogIEFuZCB3aGVuIGNvbnRpbnVpbmcgdG8gc2Nyb2xsIHBhc3QgdGhlIHN0YXJ0IHBvc2l0aW9uIGluIHJldmVyc2UgaXQgd2lsbCBmaXJlOiAgXHJcblx0XHQgKiAgYHByb2dyZXNzYCwgYHN0YXJ0YCwgYGxlYXZlYCAgXHJcblx0XHQgKiAgSW4gYmV0d2VlbiBzdGFydCBhbmQgZW5kIHRoZSBgcHJvZ3Jlc3NgIGV2ZW50IHdpbGwgYmUgY2FsbGVkIGNvbnN0YW50bHksIHdoZW5ldmVyIHRoZSBwcm9ncmVzcyBjaGFuZ2VzLlxyXG5cdFx0ICogXHJcblx0XHQgKiBJbiBzaG9ydDogIFxyXG5cdFx0ICogYGVudGVyYCBldmVudHMgd2lsbCBhbHdheXMgdHJpZ2dlciAqKmJlZm9yZSoqIHRoZSBwcm9ncmVzcyB1cGRhdGUgYW5kIGBsZWF2ZWAgZW52ZW50cyB3aWxsIHRyaWdnZXIgKiphZnRlcioqIHRoZSBwcm9ncmVzcyB1cGRhdGUuICBcclxuXHRcdCAqIGBzdGFydGAgYW5kIGBlbmRgIHdpbGwgYWx3YXlzIHRyaWdnZXIgYXQgdGhlaXIgcmVzcGVjdGl2ZSBwb3NpdGlvbi5cclxuXHRcdCAqIFxyXG5cdFx0ICogUGxlYXNlIHJldmlldyB0aGUgZXZlbnQgZGVzY3JpcHRpb25zIGZvciBkZXRhaWxzIG9uIHRoZSBldmVudHMgYW5kIHRoZSBldmVudCBvYmplY3QgdGhhdCBpcyBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrLlxyXG5cdFx0ICogXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI3Byb2dyZXNzXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gZ2V0IHRoZSBjdXJyZW50IHNjZW5lIHByb2dyZXNzXHJcblx0XHQgKiB2YXIgcHJvZ3Jlc3MgPSBzY2VuZS5wcm9ncmVzcygpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHNldCBuZXcgc2NlbmUgcHJvZ3Jlc3NcclxuXHRcdCAqIHNjZW5lLnByb2dyZXNzKDAuMyk7XHJcblx0XHQgKlxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5lbnRlcn0sIHdoZW4gdXNlZCBhcyBzZXR0ZXJcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUuc3RhcnR9LCB3aGVuIHVzZWQgYXMgc2V0dGVyXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLnByb2dyZXNzfSwgd2hlbiB1c2VkIGFzIHNldHRlclxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5lbmR9LCB3aGVuIHVzZWQgYXMgc2V0dGVyXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLmxlYXZlfSwgd2hlbiB1c2VkIGFzIHNldHRlclxyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBbcHJvZ3Jlc3NdIC0gVGhlIG5ldyBwcm9ncmVzcyB2YWx1ZSBvZiB0aGUgc2NlbmUgYFswLTFdYC5cclxuXHRcdCAqIEByZXR1cm5zIHtudW1iZXJ9IGBnZXRgIC0gIEN1cnJlbnQgc2NlbmUgcHJvZ3Jlc3MuXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IGBzZXRgIC0gIFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLnByb2dyZXNzID0gZnVuY3Rpb24gKHByb2dyZXNzKSB7XHJcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkgeyAvLyBnZXRcclxuXHRcdFx0XHRyZXR1cm4gX3Byb2dyZXNzO1xyXG5cdFx0XHR9IGVsc2UgeyAvLyBzZXRcclxuXHRcdFx0XHR2YXJcclxuXHRcdFx0XHRcdGRvVXBkYXRlID0gZmFsc2UsXHJcblx0XHRcdFx0XHRvbGRTdGF0ZSA9IF9zdGF0ZSxcclxuXHRcdFx0XHRcdHNjcm9sbERpcmVjdGlvbiA9IF9jb250cm9sbGVyID8gX2NvbnRyb2xsZXIuaW5mbyhcInNjcm9sbERpcmVjdGlvblwiKSA6ICdQQVVTRUQnLFxyXG5cdFx0XHRcdFx0cmV2ZXJzZU9yRm9yd2FyZCA9IF9vcHRpb25zLnJldmVyc2UgfHwgcHJvZ3Jlc3MgPj0gX3Byb2dyZXNzO1xyXG5cdFx0XHRcdGlmIChfb3B0aW9ucy5kdXJhdGlvbiA9PT0gMCkge1xyXG5cdFx0XHRcdFx0Ly8gemVybyBkdXJhdGlvbiBzY2VuZXNcclxuXHRcdFx0XHRcdGRvVXBkYXRlID0gX3Byb2dyZXNzICE9IHByb2dyZXNzO1xyXG5cdFx0XHRcdFx0X3Byb2dyZXNzID0gcHJvZ3Jlc3MgPCAxICYmIHJldmVyc2VPckZvcndhcmQgPyAwIDogMTtcclxuXHRcdFx0XHRcdF9zdGF0ZSA9IF9wcm9ncmVzcyA9PT0gMCA/IFNDRU5FX1NUQVRFX0JFRk9SRSA6IFNDRU5FX1NUQVRFX0RVUklORztcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8gc2NlbmVzIHdpdGggc3RhcnQgYW5kIGVuZFxyXG5cdFx0XHRcdFx0aWYgKHByb2dyZXNzIDwgMCAmJiBfc3RhdGUgIT09IFNDRU5FX1NUQVRFX0JFRk9SRSAmJiByZXZlcnNlT3JGb3J3YXJkKSB7XHJcblx0XHRcdFx0XHRcdC8vIGdvIGJhY2sgdG8gaW5pdGlhbCBzdGF0ZVxyXG5cdFx0XHRcdFx0XHRfcHJvZ3Jlc3MgPSAwO1xyXG5cdFx0XHRcdFx0XHRfc3RhdGUgPSBTQ0VORV9TVEFURV9CRUZPUkU7XHJcblx0XHRcdFx0XHRcdGRvVXBkYXRlID0gdHJ1ZTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAocHJvZ3Jlc3MgPj0gMCAmJiBwcm9ncmVzcyA8IDEgJiYgcmV2ZXJzZU9yRm9yd2FyZCkge1xyXG5cdFx0XHRcdFx0XHRfcHJvZ3Jlc3MgPSBwcm9ncmVzcztcclxuXHRcdFx0XHRcdFx0X3N0YXRlID0gU0NFTkVfU1RBVEVfRFVSSU5HO1xyXG5cdFx0XHRcdFx0XHRkb1VwZGF0ZSA9IHRydWU7XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHByb2dyZXNzID49IDEgJiYgX3N0YXRlICE9PSBTQ0VORV9TVEFURV9BRlRFUikge1xyXG5cdFx0XHRcdFx0XHRfcHJvZ3Jlc3MgPSAxO1xyXG5cdFx0XHRcdFx0XHRfc3RhdGUgPSBTQ0VORV9TVEFURV9BRlRFUjtcclxuXHRcdFx0XHRcdFx0ZG9VcGRhdGUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChfc3RhdGUgPT09IFNDRU5FX1NUQVRFX0RVUklORyAmJiAhcmV2ZXJzZU9yRm9yd2FyZCkge1xyXG5cdFx0XHRcdFx0XHR1cGRhdGVQaW5TdGF0ZSgpOyAvLyBpbiBjYXNlIHdlIHNjcm9sbGVkIGJhY2t3YXJkcyBtaWQtc2NlbmUgYW5kIHJldmVyc2UgaXMgZGlzYWJsZWQgPT4gdXBkYXRlIHRoZSBwaW4gcG9zaXRpb24sIHNvIGl0IGRvZXNuJ3QgbW92ZSBiYWNrIGFzIHdlbGwuXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChkb1VwZGF0ZSkge1xyXG5cdFx0XHRcdFx0Ly8gZmlyZSBldmVudHNcclxuXHRcdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0XHRldmVudFZhcnMgPSB7XHJcblx0XHRcdFx0XHRcdFx0cHJvZ3Jlc3M6IF9wcm9ncmVzcyxcclxuXHRcdFx0XHRcdFx0XHRzdGF0ZTogX3N0YXRlLFxyXG5cdFx0XHRcdFx0XHRcdHNjcm9sbERpcmVjdGlvbjogc2Nyb2xsRGlyZWN0aW9uXHJcblx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdHN0YXRlQ2hhbmdlZCA9IF9zdGF0ZSAhPSBvbGRTdGF0ZTtcclxuXHJcblx0XHRcdFx0XHR2YXIgdHJpZ2dlciA9IGZ1bmN0aW9uIChldmVudE5hbWUpIHsgLy8gdG1wIGhlbHBlciB0byBzaW1wbGlmeSBjb2RlXHJcblx0XHRcdFx0XHRcdFNjZW5lLnRyaWdnZXIoZXZlbnROYW1lLCBldmVudFZhcnMpO1xyXG5cdFx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0XHRpZiAoc3RhdGVDaGFuZ2VkKSB7IC8vIGVudGVyIGV2ZW50c1xyXG5cdFx0XHRcdFx0XHRpZiAob2xkU3RhdGUgIT09IFNDRU5FX1NUQVRFX0RVUklORykge1xyXG5cdFx0XHRcdFx0XHRcdHRyaWdnZXIoXCJlbnRlclwiKTtcclxuXHRcdFx0XHRcdFx0XHR0cmlnZ2VyKG9sZFN0YXRlID09PSBTQ0VORV9TVEFURV9CRUZPUkUgPyBcInN0YXJ0XCIgOiBcImVuZFwiKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0dHJpZ2dlcihcInByb2dyZXNzXCIpO1xyXG5cdFx0XHRcdFx0aWYgKHN0YXRlQ2hhbmdlZCkgeyAvLyBsZWF2ZSBldmVudHNcclxuXHRcdFx0XHRcdFx0aWYgKF9zdGF0ZSAhPT0gU0NFTkVfU1RBVEVfRFVSSU5HKSB7XHJcblx0XHRcdFx0XHRcdFx0dHJpZ2dlcihfc3RhdGUgPT09IFNDRU5FX1NUQVRFX0JFRk9SRSA/IFwic3RhcnRcIiA6IFwiZW5kXCIpO1xyXG5cdFx0XHRcdFx0XHRcdHRyaWdnZXIoXCJsZWF2ZVwiKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIFNjZW5lO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFVwZGF0ZSB0aGUgc3RhcnQgYW5kIGVuZCBzY3JvbGxPZmZzZXQgb2YgdGhlIGNvbnRhaW5lci5cclxuXHRcdCAqIFRoZSBwb3NpdGlvbnMgcmVmbGVjdCB3aGF0IHRoZSBjb250cm9sbGVyJ3Mgc2Nyb2xsIHBvc2l0aW9uIHdpbGwgYmUgYXQgdGhlIHN0YXJ0IGFuZCBlbmQgcmVzcGVjdGl2ZWx5LlxyXG5cdFx0ICogSXMgY2FsbGVkLCB3aGVuOlxyXG5cdFx0ICogICAtIFNjZW5lIGV2ZW50IFwiY2hhbmdlXCIgaXMgY2FsbGVkIHdpdGg6IG9mZnNldCwgdHJpZ2dlckhvb2ssIGR1cmF0aW9uIFxyXG5cdFx0ICogICAtIHNjcm9sbCBjb250YWluZXIgZXZlbnQgXCJyZXNpemVcIiBpcyBjYWxsZWRcclxuXHRcdCAqICAgLSB0aGUgcG9zaXRpb24gb2YgdGhlIHRyaWdnZXJFbGVtZW50IGNoYW5nZXNcclxuXHRcdCAqICAgLSB0aGUgY29udHJvbGxlciBjaGFuZ2VzIC0+IGFkZFRvKClcclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciB1cGRhdGVTY3JvbGxPZmZzZXQgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdF9zY3JvbGxPZmZzZXQgPSB7XHJcblx0XHRcdFx0c3RhcnQ6IF90cmlnZ2VyUG9zICsgX29wdGlvbnMub2Zmc2V0XHJcblx0XHRcdH07XHJcblx0XHRcdGlmIChfY29udHJvbGxlciAmJiBfb3B0aW9ucy50cmlnZ2VyRWxlbWVudCkge1xyXG5cdFx0XHRcdC8vIHRha2UgYXdheSB0cmlnZ2VySG9vayBwb3J0aW9uIHRvIGdldCByZWxhdGl2ZSB0byB0b3BcclxuXHRcdFx0XHRfc2Nyb2xsT2Zmc2V0LnN0YXJ0IC09IF9jb250cm9sbGVyLmluZm8oXCJzaXplXCIpICogX29wdGlvbnMudHJpZ2dlckhvb2s7XHJcblx0XHRcdH1cclxuXHRcdFx0X3Njcm9sbE9mZnNldC5lbmQgPSBfc2Nyb2xsT2Zmc2V0LnN0YXJ0ICsgX29wdGlvbnMuZHVyYXRpb247XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogVXBkYXRlcyB0aGUgZHVyYXRpb24gaWYgc2V0IHRvIGEgZHluYW1pYyBmdW5jdGlvbi5cclxuXHRcdCAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIHRoZSBzY2VuZSBpcyBhZGRlZCB0byBhIGNvbnRyb2xsZXIgYW5kIGluIHJlZ3VsYXIgaW50ZXJ2YWxzIGZyb20gdGhlIGNvbnRyb2xsZXIgdGhyb3VnaCBzY2VuZS5yZWZyZXNoKCkuXHJcblx0XHQgKiBcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUuY2hhbmdlfSwgaWYgdGhlIGR1cmF0aW9uIGNoYW5nZWRcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUuc2hpZnR9LCBpZiB0aGUgZHVyYXRpb24gY2hhbmdlZFxyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3N1cHByZXNzRXZlbnRzPWZhbHNlXSAtIElmIHRydWUgdGhlIHNoaWZ0IGV2ZW50IHdpbGwgYmUgc3VwcHJlc3NlZC5cclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciB1cGRhdGVEdXJhdGlvbiA9IGZ1bmN0aW9uIChzdXBwcmVzc0V2ZW50cykge1xyXG5cdFx0XHQvLyB1cGRhdGUgZHVyYXRpb25cclxuXHRcdFx0aWYgKF9kdXJhdGlvblVwZGF0ZU1ldGhvZCkge1xyXG5cdFx0XHRcdHZhciB2YXJuYW1lID0gXCJkdXJhdGlvblwiO1xyXG5cdFx0XHRcdGlmIChjaGFuZ2VPcHRpb24odmFybmFtZSwgX2R1cmF0aW9uVXBkYXRlTWV0aG9kLmNhbGwoU2NlbmUpKSAmJiAhc3VwcHJlc3NFdmVudHMpIHsgLy8gc2V0XHJcblx0XHRcdFx0XHRTY2VuZS50cmlnZ2VyKFwiY2hhbmdlXCIsIHtcclxuXHRcdFx0XHRcdFx0d2hhdDogdmFybmFtZSxcclxuXHRcdFx0XHRcdFx0bmV3dmFsOiBfb3B0aW9uc1t2YXJuYW1lXVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRTY2VuZS50cmlnZ2VyKFwic2hpZnRcIiwge1xyXG5cdFx0XHRcdFx0XHRyZWFzb246IHZhcm5hbWVcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSB0cmlnZ2VyRWxlbWVudCwgaWYgcHJlc2VudC5cclxuXHRcdCAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCAuLi5cclxuXHRcdCAqICAtIC4uLiB3aGVuIHRoZSB0cmlnZ2VyRWxlbWVudCBpcyBjaGFuZ2VkXHJcblx0XHQgKiAgLSAuLi4gd2hlbiB0aGUgc2NlbmUgaXMgYWRkZWQgdG8gYSAobmV3KSBjb250cm9sbGVyXHJcblx0XHQgKiAgLSAuLi4gaW4gcmVndWxhciBpbnRlcnZhbHMgZnJvbSB0aGUgY29udHJvbGxlciB0aHJvdWdoIHNjZW5lLnJlZnJlc2goKS5cclxuXHRcdCAqIFxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5zaGlmdH0sIGlmIHRoZSBwb3NpdGlvbiBjaGFuZ2VkXHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBbc3VwcHJlc3NFdmVudHM9ZmFsc2VdIC0gSWYgdHJ1ZSB0aGUgc2hpZnQgZXZlbnQgd2lsbCBiZSBzdXBwcmVzc2VkLlxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIHVwZGF0ZVRyaWdnZXJFbGVtZW50UG9zaXRpb24gPSBmdW5jdGlvbiAoc3VwcHJlc3NFdmVudHMpIHtcclxuXHRcdFx0dmFyXHJcblx0XHRcdFx0ZWxlbWVudFBvcyA9IDAsXHJcblx0XHRcdFx0dGVsZW0gPSBfb3B0aW9ucy50cmlnZ2VyRWxlbWVudDtcclxuXHRcdFx0aWYgKF9jb250cm9sbGVyICYmICh0ZWxlbSB8fCBfdHJpZ2dlclBvcyA+IDApKSB7IC8vIGVpdGhlciBhbiBlbGVtZW50IGV4aXN0cyBvciB3YXMgcmVtb3ZlZCBhbmQgdGhlIHRyaWdnZXJQb3MgaXMgc3RpbGwgPiAwXHJcblx0XHRcdFx0aWYgKHRlbGVtKSB7IC8vIHRoZXJlIGN1cnJlbnRseSBhIHRyaWdnZXJFbGVtZW50IHNldFxyXG5cdFx0XHRcdFx0aWYgKHRlbGVtLnBhcmVudE5vZGUpIHsgLy8gY2hlY2sgaWYgZWxlbWVudCBpcyBzdGlsbCBhdHRhY2hlZCB0byBET01cclxuXHRcdFx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRcdFx0Y29udHJvbGxlckluZm8gPSBfY29udHJvbGxlci5pbmZvKCksXHJcblx0XHRcdFx0XHRcdFx0Y29udGFpbmVyT2Zmc2V0ID0gX3V0aWwuZ2V0Lm9mZnNldChjb250cm9sbGVySW5mby5jb250YWluZXIpLCAvLyBjb250YWluZXIgcG9zaXRpb24gaXMgbmVlZGVkIGJlY2F1c2UgZWxlbWVudCBvZmZzZXQgaXMgcmV0dXJuZWQgaW4gcmVsYXRpb24gdG8gZG9jdW1lbnQsIG5vdCBpbiByZWxhdGlvbiB0byBjb250YWluZXIuXHJcblx0XHRcdFx0XHRcdFx0cGFyYW0gPSBjb250cm9sbGVySW5mby52ZXJ0aWNhbCA/IFwidG9wXCIgOiBcImxlZnRcIjsgLy8gd2hpY2ggcGFyYW0gaXMgb2YgaW50ZXJlc3QgP1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gaWYgcGFyZW50IGlzIHNwYWNlciwgdXNlIHNwYWNlciBwb3NpdGlvbiBpbnN0ZWFkIHNvIGNvcnJlY3Qgc3RhcnQgcG9zaXRpb24gaXMgcmV0dXJuZWQgZm9yIHBpbm5lZCBlbGVtZW50cy5cclxuXHRcdFx0XHRcdFx0d2hpbGUgKHRlbGVtLnBhcmVudE5vZGUuaGFzQXR0cmlidXRlKFBJTl9TUEFDRVJfQVRUUklCVVRFKSkge1xyXG5cdFx0XHRcdFx0XHRcdHRlbGVtID0gdGVsZW0ucGFyZW50Tm9kZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGVsZW1lbnRPZmZzZXQgPSBfdXRpbC5nZXQub2Zmc2V0KHRlbGVtKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICghY29udHJvbGxlckluZm8uaXNEb2N1bWVudCkgeyAvLyBjb250YWluZXIgaXMgbm90IHRoZSBkb2N1bWVudCByb290LCBzbyBzdWJzdHJhY3Qgc2Nyb2xsIFBvc2l0aW9uIHRvIGdldCBjb3JyZWN0IHRyaWdnZXIgZWxlbWVudCBwb3NpdGlvbiByZWxhdGl2ZSB0byBzY3JvbGxjb250ZW50XHJcblx0XHRcdFx0XHRcdFx0Y29udGFpbmVyT2Zmc2V0W3BhcmFtXSAtPSBfY29udHJvbGxlci5zY3JvbGxQb3MoKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0ZWxlbWVudFBvcyA9IGVsZW1lbnRPZmZzZXRbcGFyYW1dIC0gY29udGFpbmVyT2Zmc2V0W3BhcmFtXTtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2UgeyAvLyB0aGVyZSB3YXMgYW4gZWxlbWVudCwgYnV0IGl0IHdhcyByZW1vdmVkIGZyb20gRE9NXHJcblx0XHRcdFx0XHRcdGxvZygyLCBcIldBUk5JTkc6IHRyaWdnZXJFbGVtZW50IHdhcyByZW1vdmVkIGZyb20gRE9NIGFuZCB3aWxsIGJlIHJlc2V0IHRvXCIsIHVuZGVmaW5lZCk7XHJcblx0XHRcdFx0XHRcdFNjZW5lLnRyaWdnZXJFbGVtZW50KHVuZGVmaW5lZCk7IC8vIHVuc2V0LCBzbyBhIGNoYW5nZSBldmVudCBpcyB0cmlnZ2VyZWRcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHZhciBjaGFuZ2VkID0gZWxlbWVudFBvcyAhPSBfdHJpZ2dlclBvcztcclxuXHRcdFx0XHRfdHJpZ2dlclBvcyA9IGVsZW1lbnRQb3M7XHJcblx0XHRcdFx0aWYgKGNoYW5nZWQgJiYgIXN1cHByZXNzRXZlbnRzKSB7XHJcblx0XHRcdFx0XHRTY2VuZS50cmlnZ2VyKFwic2hpZnRcIiwge1xyXG5cdFx0XHRcdFx0XHRyZWFzb246IFwidHJpZ2dlckVsZW1lbnRQb3NpdGlvblwiXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBUcmlnZ2VyIGEgc2hpZnQgZXZlbnQsIHdoZW4gdGhlIGNvbnRhaW5lciBpcyByZXNpemVkIGFuZCB0aGUgdHJpZ2dlckhvb2sgaXMgPiAxLlxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIG9uQ29udGFpbmVyUmVzaXplID0gZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0aWYgKF9vcHRpb25zLnRyaWdnZXJIb29rID4gMCkge1xyXG5cdFx0XHRcdFNjZW5lLnRyaWdnZXIoXCJzaGlmdFwiLCB7XHJcblx0XHRcdFx0XHRyZWFzb246IFwiY29udGFpbmVyUmVzaXplXCJcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblxyXG5cdFx0dmFyIF92YWxpZGF0ZSA9IF91dGlsLmV4dGVuZChTQ0VORV9PUFRJT05TLnZhbGlkYXRlLCB7XHJcblx0XHRcdC8vIHZhbGlkYXRpb24gZm9yIGR1cmF0aW9uIGhhbmRsZWQgaW50ZXJuYWxseSBmb3IgcmVmZXJlbmNlIHRvIHByaXZhdGUgdmFyIF9kdXJhdGlvbk1ldGhvZFxyXG5cdFx0XHRkdXJhdGlvbjogZnVuY3Rpb24gKHZhbCkge1xyXG5cdFx0XHRcdGlmIChfdXRpbC50eXBlLlN0cmluZyh2YWwpICYmIHZhbC5tYXRjaCgvXihcXC58XFxkKSpcXGQrJSQvKSkge1xyXG5cdFx0XHRcdFx0Ly8gcGVyY2VudGFnZSB2YWx1ZVxyXG5cdFx0XHRcdFx0dmFyIHBlcmMgPSBwYXJzZUZsb2F0KHZhbCkgLyAxMDA7XHJcblx0XHRcdFx0XHR2YWwgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBfY29udHJvbGxlciA/IF9jb250cm9sbGVyLmluZm8oXCJzaXplXCIpICogcGVyYyA6IDA7XHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoX3V0aWwudHlwZS5GdW5jdGlvbih2YWwpKSB7XHJcblx0XHRcdFx0XHQvLyBmdW5jdGlvblxyXG5cdFx0XHRcdFx0X2R1cmF0aW9uVXBkYXRlTWV0aG9kID0gdmFsO1xyXG5cdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0dmFsID0gcGFyc2VGbG9hdChfZHVyYXRpb25VcGRhdGVNZXRob2QuY2FsbChTY2VuZSkpO1xyXG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRcdFx0XHR2YWwgPSAtMTsgLy8gd2lsbCBjYXVzZSBlcnJvciBiZWxvd1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvLyB2YWwgaGFzIHRvIGJlIGZsb2F0XHJcblx0XHRcdFx0dmFsID0gcGFyc2VGbG9hdCh2YWwpO1xyXG5cdFx0XHRcdGlmICghX3V0aWwudHlwZS5OdW1iZXIodmFsKSB8fCB2YWwgPCAwKSB7XHJcblx0XHRcdFx0XHRpZiAoX2R1cmF0aW9uVXBkYXRlTWV0aG9kKSB7XHJcblx0XHRcdFx0XHRcdF9kdXJhdGlvblVwZGF0ZU1ldGhvZCA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRcdFx0dGhyb3cgW1wiSW52YWxpZCByZXR1cm4gdmFsdWUgb2Ygc3VwcGxpZWQgZnVuY3Rpb24gZm9yIG9wdGlvbiBcXFwiZHVyYXRpb25cXFwiOlwiLCB2YWxdO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0dGhyb3cgW1wiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJkdXJhdGlvblxcXCI6XCIsIHZhbF07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB2YWw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQ2hlY2tzIHRoZSB2YWxpZGl0eSBvZiBhIHNwZWNpZmljIG9yIGFsbCBvcHRpb25zIGFuZCByZXNldCB0byBkZWZhdWx0IGlmIG5lY2Nlc3NhcnkuXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgdmFsaWRhdGVPcHRpb24gPSBmdW5jdGlvbiAoY2hlY2spIHtcclxuXHRcdFx0Y2hlY2sgPSBhcmd1bWVudHMubGVuZ3RoID8gW2NoZWNrXSA6IE9iamVjdC5rZXlzKF92YWxpZGF0ZSk7XHJcblx0XHRcdGNoZWNrLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvbk5hbWUsIGtleSkge1xyXG5cdFx0XHRcdHZhciB2YWx1ZTtcclxuXHRcdFx0XHRpZiAoX3ZhbGlkYXRlW29wdGlvbk5hbWVdKSB7IC8vIHRoZXJlIGlzIGEgdmFsaWRhdGlvbiBtZXRob2QgZm9yIHRoaXMgb3B0aW9uXHJcblx0XHRcdFx0XHR0cnkgeyAvLyB2YWxpZGF0ZSB2YWx1ZVxyXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IF92YWxpZGF0ZVtvcHRpb25OYW1lXShfb3B0aW9uc1tvcHRpb25OYW1lXSk7XHJcblx0XHRcdFx0XHR9IGNhdGNoIChlKSB7IC8vIHZhbGlkYXRpb24gZmFpbGVkIC0+IHJlc2V0IHRvIGRlZmF1bHRcclxuXHRcdFx0XHRcdFx0dmFsdWUgPSBERUZBVUxUX09QVElPTlNbb3B0aW9uTmFtZV07XHJcblx0XHRcdFx0XHRcdHZhciBsb2dNU0cgPSBfdXRpbC50eXBlLlN0cmluZyhlKSA/IFtlXSA6IGU7XHJcblx0XHRcdFx0XHRcdGlmIChfdXRpbC50eXBlLkFycmF5KGxvZ01TRykpIHtcclxuXHRcdFx0XHRcdFx0XHRsb2dNU0dbMF0gPSBcIkVSUk9SOiBcIiArIGxvZ01TR1swXTtcclxuXHRcdFx0XHRcdFx0XHRsb2dNU0cudW5zaGlmdCgxKTsgLy8gbG9nbGV2ZWwgMSBmb3IgZXJyb3IgbXNnXHJcblx0XHRcdFx0XHRcdFx0bG9nLmFwcGx5KHRoaXMsIGxvZ01TRyk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0bG9nKDEsIFwiRVJST1I6IFByb2JsZW0gZXhlY3V0aW5nIHZhbGlkYXRpb24gY2FsbGJhY2sgZm9yIG9wdGlvbiAnXCIgKyBvcHRpb25OYW1lICsgXCInOlwiLCBlLm1lc3NhZ2UpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xyXG5cdFx0XHRcdFx0XHRfb3B0aW9uc1tvcHRpb25OYW1lXSA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogSGVscGVyIHVzZWQgYnkgdGhlIHNldHRlci9nZXR0ZXJzIGZvciBzY2VuZSBvcHRpb25zXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHR2YXIgY2hhbmdlT3B0aW9uID0gZnVuY3Rpb24gKHZhcm5hbWUsIG5ld3ZhbCkge1xyXG5cdFx0XHR2YXJcclxuXHRcdFx0XHRjaGFuZ2VkID0gZmFsc2UsXHJcblx0XHRcdFx0b2xkdmFsID0gX29wdGlvbnNbdmFybmFtZV07XHJcblx0XHRcdGlmIChfb3B0aW9uc1t2YXJuYW1lXSAhPSBuZXd2YWwpIHtcclxuXHRcdFx0XHRfb3B0aW9uc1t2YXJuYW1lXSA9IG5ld3ZhbDtcclxuXHRcdFx0XHR2YWxpZGF0ZU9wdGlvbih2YXJuYW1lKTsgLy8gcmVzZXRzIHRvIGRlZmF1bHQgaWYgbmVjZXNzYXJ5XHJcblx0XHRcdFx0Y2hhbmdlZCA9IG9sZHZhbCAhPSBfb3B0aW9uc1t2YXJuYW1lXTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gY2hhbmdlZDtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gZ2VuZXJhdGUgZ2V0dGVycy9zZXR0ZXJzIGZvciBhbGwgb3B0aW9uc1xyXG5cdFx0dmFyIGFkZFNjZW5lT3B0aW9uID0gZnVuY3Rpb24gKG9wdGlvbk5hbWUpIHtcclxuXHRcdFx0aWYgKCFTY2VuZVtvcHRpb25OYW1lXSkge1xyXG5cdFx0XHRcdFNjZW5lW29wdGlvbk5hbWVdID0gZnVuY3Rpb24gKG5ld1ZhbCkge1xyXG5cdFx0XHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7IC8vIGdldFxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gX29wdGlvbnNbb3B0aW9uTmFtZV07XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRpZiAob3B0aW9uTmFtZSA9PT0gXCJkdXJhdGlvblwiKSB7IC8vIG5ldyBkdXJhdGlvbiBpcyBzZXQsIHNvIGFueSBwcmV2aW91c2x5IHNldCBmdW5jdGlvbiBtdXN0IGJlIHVuc2V0XHJcblx0XHRcdFx0XHRcdFx0X2R1cmF0aW9uVXBkYXRlTWV0aG9kID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGlmIChjaGFuZ2VPcHRpb24ob3B0aW9uTmFtZSwgbmV3VmFsKSkgeyAvLyBzZXRcclxuXHRcdFx0XHRcdFx0XHRTY2VuZS50cmlnZ2VyKFwiY2hhbmdlXCIsIHtcclxuXHRcdFx0XHRcdFx0XHRcdHdoYXQ6IG9wdGlvbk5hbWUsXHJcblx0XHRcdFx0XHRcdFx0XHRuZXd2YWw6IF9vcHRpb25zW29wdGlvbk5hbWVdXHJcblx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdFx0aWYgKFNDRU5FX09QVElPTlMuc2hpZnRzLmluZGV4T2Yob3B0aW9uTmFtZSkgPiAtMSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0U2NlbmUudHJpZ2dlcihcInNoaWZ0XCIsIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmVhc29uOiBvcHRpb25OYW1lXHJcblx0XHRcdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiBTY2VuZTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogKipHZXQqKiBvciAqKlNldCoqIHRoZSBkdXJhdGlvbiBvcHRpb24gdmFsdWUuXHJcblx0XHQgKlxyXG5cdFx0ICogQXMgYSAqKnNldHRlcioqIGl0IGFjY2VwdHMgdGhyZWUgdHlwZXMgb2YgcGFyYW1ldGVyczpcclxuXHRcdCAqIDEuIGBudW1iZXJgOiBTZXRzIHRoZSBkdXJhdGlvbiBvZiB0aGUgc2NlbmUgdG8gZXhhY3RseSB0aGlzIGFtb3VudCBvZiBwaXhlbHMuICBcclxuXHRcdCAqICAgVGhpcyBtZWFucyB0aGUgc2NlbmUgd2lsbCBsYXN0IGZvciBleGFjdGx5IHRoaXMgYW1vdW50IG9mIHBpeGVscyBzY3JvbGxlZC4gU3ViLVBpeGVscyBhcmUgYWxzbyB2YWxpZC5cclxuXHRcdCAqICAgQSB2YWx1ZSBvZiBgMGAgbWVhbnMgdGhhdCB0aGUgc2NlbmUgaXMgJ29wZW4gZW5kJyBhbmQgbm8gZW5kIHdpbGwgYmUgdHJpZ2dlcmVkLiBQaW5zIHdpbGwgbmV2ZXIgdW5waW4gYW5kIGFuaW1hdGlvbnMgd2lsbCBwbGF5IGluZGVwZW5kZW50bHkgb2Ygc2Nyb2xsIHByb2dyZXNzLlxyXG5cdFx0ICogMi4gYHN0cmluZ2A6IEFsd2F5cyB1cGRhdGVzIHRoZSBkdXJhdGlvbiByZWxhdGl2ZSB0byBwYXJlbnQgc2Nyb2xsIGNvbnRhaW5lci4gIFxyXG5cdFx0ICogICBGb3IgZXhhbXBsZSBgXCIxMDAlXCJgIHdpbGwga2VlcCB0aGUgZHVyYXRpb24gYWx3YXlzIGV4YWN0bHkgYXQgdGhlIGlubmVyIGhlaWdodCBvZiB0aGUgc2Nyb2xsIGNvbnRhaW5lci5cclxuXHRcdCAqICAgV2hlbiBzY3JvbGxpbmcgdmVydGljYWxseSB0aGUgd2lkdGggaXMgdXNlZCBmb3IgcmVmZXJlbmNlIHJlc3BlY3RpdmVseS5cclxuXHRcdCAqIDMuIGBmdW5jdGlvbmA6IFRoZSBzdXBwbGllZCBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB0byByZXR1cm4gdGhlIHNjZW5lIGR1cmF0aW9uLlxyXG5cdFx0ICogICBUaGlzIGlzIHVzZWZ1bCBpbiBzZXR1cHMgd2hlcmUgdGhlIGR1cmF0aW9uIGRlcGVuZHMgb24gb3RoZXIgZWxlbWVudHMgd2hvIG1pZ2h0IGNoYW5nZSBzaXplLiBCeSBzdXBwbHlpbmcgYSBmdW5jdGlvbiB5b3UgY2FuIHJldHVybiBhIHZhbHVlIGluc3RlYWQgb2YgdXBkYXRpbmcgcG90ZW50aWFsbHkgbXVsdGlwbGUgc2NlbmUgZHVyYXRpb25zLiAgXHJcblx0XHQgKiAgIFRoZSBzY2VuZSBjYW4gYmUgcmVmZXJlbmNlZCBpbnNpZGUgdGhlIGNhbGxiYWNrIHVzaW5nIGB0aGlzYC5cclxuXHRcdCAqICAgXyoqV0FSTklORzoqKiBUaGlzIGlzIGFuIGVhc3kgd2F5IHRvIGtpbGwgcGVyZm9ybWFuY2UsIGFzIHRoZSBjYWxsYmFjayB3aWxsIGJlIGV4ZWN1dGVkIGV2ZXJ5IHRpbWUgYFNjZW5lLnJlZnJlc2goKWAgaXMgY2FsbGVkLCB3aGljaCBoYXBwZW5zIGEgbG90LiBUaGUgaW50ZXJ2YWwgaXMgZGVmaW5lZCBieSB0aGUgY29udHJvbGxlciAoc2VlIFNjcm9sbE1hZ2ljLkNvbnRyb2xsZXIgb3B0aW9uIGByZWZyZXNoSW50ZXJ2YWxgKS4gIFxyXG5cdFx0ICogICBJdCdzIHJlY29tZW5kZWQgdG8gYXZvaWQgY2FsY3VsYXRpb25zIHdpdGhpbiB0aGUgZnVuY3Rpb24gYW5kIHVzZSBjYWNoZWQgdmFyaWFibGVzIGFzIHJldHVybiB2YWx1ZXMuICBcclxuXHRcdCAqICAgVGhpcyBjb3VudHMgZG91YmxlIGlmIHlvdSB1c2UgdGhlIHNhbWUgZnVuY3Rpb24gZm9yIG11bHRpcGxlIHNjZW5lcy5fXHJcblx0XHQgKlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNkdXJhdGlvblxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGdldCB0aGUgY3VycmVudCBkdXJhdGlvbiB2YWx1ZVxyXG5cdFx0ICogdmFyIGR1cmF0aW9uID0gc2NlbmUuZHVyYXRpb24oKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBzZXQgYSBuZXcgZHVyYXRpb25cclxuXHRcdCAqIHNjZW5lLmR1cmF0aW9uKDMwMCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gc2V0IGR1cmF0aW9uIHJlc3BvbnNpdmVseSB0byBjb250YWluZXIgc2l6ZVxyXG5cdFx0ICogc2NlbmUuZHVyYXRpb24oXCIxMDAlXCIpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHVzZSBhIGZ1bmN0aW9uIHRvIHJhbmRvbWl6ZSB0aGUgZHVyYXRpb24gZm9yIHNvbWUgcmVhc29uLlxyXG5cdFx0ICogdmFyIGR1cmF0aW9uVmFsdWVDYWNoZTtcclxuXHRcdCAqIGZ1bmN0aW9uIGR1cmF0aW9uQ2FsbGJhY2sgKCkge1xyXG5cdFx0ICogICByZXR1cm4gZHVyYXRpb25WYWx1ZUNhY2hlO1xyXG5cdFx0ICogfVxyXG5cdFx0ICogZnVuY3Rpb24gdXBkYXRlRHVyYXRpb24gKCkge1xyXG5cdFx0ICogICBkdXJhdGlvblZhbHVlQ2FjaGUgPSBNYXRoLnJhbmRvbSgpICogMTAwO1xyXG5cdFx0ICogfVxyXG5cdFx0ICogdXBkYXRlRHVyYXRpb24oKTsgLy8gc2V0IHRvIGluaXRpYWwgdmFsdWVcclxuXHRcdCAqIHNjZW5lLmR1cmF0aW9uKGR1cmF0aW9uQ2FsbGJhY2spOyAvLyBzZXQgZHVyYXRpb24gY2FsbGJhY2tcclxuXHRcdCAqXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLmNoYW5nZX0sIHdoZW4gdXNlZCBhcyBzZXR0ZXJcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUuc2hpZnR9LCB3aGVuIHVzZWQgYXMgc2V0dGVyXHJcblx0XHQgKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nfGZ1bmN0aW9uKX0gW25ld0R1cmF0aW9uXSAtIFRoZSBuZXcgZHVyYXRpb24gc2V0dGluZyBmb3IgdGhlIHNjZW5lLlxyXG5cdFx0ICogQHJldHVybnMge251bWJlcn0gYGdldGAgLSAgQ3VycmVudCBzY2VuZSBkdXJhdGlvbi5cclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gYHNldGAgLSAgUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHJcblx0XHQvKipcclxuXHRcdCAqICoqR2V0Kiogb3IgKipTZXQqKiB0aGUgb2Zmc2V0IG9wdGlvbiB2YWx1ZS5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjb2Zmc2V0XHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gZ2V0IHRoZSBjdXJyZW50IG9mZnNldFxyXG5cdFx0ICogdmFyIG9mZnNldCA9IHNjZW5lLm9mZnNldCgpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHNldCBhIG5ldyBvZmZzZXRcclxuXHRcdCAqIHNjZW5lLm9mZnNldCgxMDApO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBmaXJlcyB7QGxpbmsgU2NlbmUuY2hhbmdlfSwgd2hlbiB1c2VkIGFzIHNldHRlclxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5zaGlmdH0sIHdoZW4gdXNlZCBhcyBzZXR0ZXJcclxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBbbmV3T2Zmc2V0XSAtIFRoZSBuZXcgb2Zmc2V0IG9mIHRoZSBzY2VuZS5cclxuXHRcdCAqIEByZXR1cm5zIHtudW1iZXJ9IGBnZXRgIC0gIEN1cnJlbnQgc2NlbmUgb2Zmc2V0LlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBgc2V0YCAtICBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogKipHZXQqKiBvciAqKlNldCoqIHRoZSB0cmlnZ2VyRWxlbWVudCBvcHRpb24gdmFsdWUuXHJcblx0XHQgKiBEb2VzICoqbm90KiogZmlyZSBgU2NlbmUuc2hpZnRgLCBiZWNhdXNlIGNoYW5naW5nIHRoZSB0cmlnZ2VyIEVsZW1lbnQgZG9lc24ndCBuZWNlc3NhcmlseSBtZWFuIHRoZSBzdGFydCBwb3NpdGlvbiBjaGFuZ2VzLiBUaGlzIHdpbGwgYmUgZGV0ZXJtaW5lZCBpbiBgU2NlbmUucmVmcmVzaCgpYCwgd2hpY2ggaXMgYXV0b21hdGljYWxseSB0cmlnZ2VyZWQuXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI3RyaWdnZXJFbGVtZW50XHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gZ2V0IHRoZSBjdXJyZW50IHRyaWdnZXJFbGVtZW50XHJcblx0XHQgKiB2YXIgdHJpZ2dlckVsZW1lbnQgPSBzY2VuZS50cmlnZ2VyRWxlbWVudCgpO1xyXG5cdFx0ICpcclxuXHRcdCAqIC8vIHNldCBhIG5ldyB0cmlnZ2VyRWxlbWVudCB1c2luZyBhIHNlbGVjdG9yXHJcblx0XHQgKiBzY2VuZS50cmlnZ2VyRWxlbWVudChcIiN0cmlnZ2VyXCIpO1xyXG5cdFx0ICogLy8gc2V0IGEgbmV3IHRyaWdnZXJFbGVtZW50IHVzaW5nIGEgRE9NIG9iamVjdFxyXG5cdFx0ICogc2NlbmUudHJpZ2dlckVsZW1lbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0cmlnZ2VyXCIpKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLmNoYW5nZX0sIHdoZW4gdXNlZCBhcyBzZXR0ZXJcclxuXHRcdCAqIEBwYXJhbSB7KHN0cmluZ3xvYmplY3QpfSBbbmV3VHJpZ2dlckVsZW1lbnRdIC0gVGhlIG5ldyB0cmlnZ2VyIGVsZW1lbnQgZm9yIHRoZSBzY2VuZS5cclxuXHRcdCAqIEByZXR1cm5zIHsoc3RyaW5nfG9iamVjdCl9IGBnZXRgIC0gIEN1cnJlbnQgdHJpZ2dlckVsZW1lbnQuXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IGBzZXRgIC0gIFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAqKkdldCoqIG9yICoqU2V0KiogdGhlIHRyaWdnZXJIb29rIG9wdGlvbiB2YWx1ZS5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjdHJpZ2dlckhvb2tcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBnZXQgdGhlIGN1cnJlbnQgdHJpZ2dlckhvb2sgdmFsdWVcclxuXHRcdCAqIHZhciB0cmlnZ2VySG9vayA9IHNjZW5lLnRyaWdnZXJIb29rKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gc2V0IGEgbmV3IHRyaWdnZXJIb29rIHVzaW5nIGEgc3RyaW5nXHJcblx0XHQgKiBzY2VuZS50cmlnZ2VySG9vayhcIm9uTGVhdmVcIik7XHJcblx0XHQgKiAvLyBzZXQgYSBuZXcgdHJpZ2dlckhvb2sgdXNpbmcgYSBudW1iZXJcclxuXHRcdCAqIHNjZW5lLnRyaWdnZXJIb29rKDAuNyk7XHJcblx0XHQgKlxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5jaGFuZ2V9LCB3aGVuIHVzZWQgYXMgc2V0dGVyXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLnNoaWZ0fSwgd2hlbiB1c2VkIGFzIHNldHRlclxyXG5cdFx0ICogQHBhcmFtIHsobnVtYmVyfHN0cmluZyl9IFtuZXdUcmlnZ2VySG9va10gLSBUaGUgbmV3IHRyaWdnZXJIb29rIG9mIHRoZSBzY2VuZS4gU2VlIHtAbGluayBTY2VuZX0gcGFyYW1ldGVyIGRlc2NyaXB0aW9uIGZvciB2YWx1ZSBvcHRpb25zLlxyXG5cdFx0ICogQHJldHVybnMge251bWJlcn0gYGdldGAgLSAgQ3VycmVudCB0cmlnZ2VySG9vayAoQUxXQVlTIG51bWVyaWNhbCkuXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IGBzZXRgIC0gIFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAqKkdldCoqIG9yICoqU2V0KiogdGhlIHJldmVyc2Ugb3B0aW9uIHZhbHVlLlxyXG5cdFx0ICogQG1ldGhvZCBTY3JvbGxNYWdpYy5TY2VuZSNyZXZlcnNlXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gZ2V0IHRoZSBjdXJyZW50IHJldmVyc2Ugb3B0aW9uXHJcblx0XHQgKiB2YXIgcmV2ZXJzZSA9IHNjZW5lLnJldmVyc2UoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBzZXQgbmV3IHJldmVyc2Ugb3B0aW9uXHJcblx0XHQgKiBzY2VuZS5yZXZlcnNlKGZhbHNlKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAZmlyZXMge0BsaW5rIFNjZW5lLmNoYW5nZX0sIHdoZW4gdXNlZCBhcyBzZXR0ZXJcclxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW25ld1JldmVyc2VdIC0gVGhlIG5ldyByZXZlcnNlIHNldHRpbmcgb2YgdGhlIHNjZW5lLlxyXG5cdFx0ICogQHJldHVybnMge2Jvb2xlYW59IGBnZXRgIC0gIEN1cnJlbnQgcmV2ZXJzZSBvcHRpb24gdmFsdWUuXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IGBzZXRgIC0gIFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAqKkdldCoqIG9yICoqU2V0KiogdGhlIGxvZ2xldmVsIG9wdGlvbiB2YWx1ZS5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjbG9nbGV2ZWxcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBnZXQgdGhlIGN1cnJlbnQgbG9nbGV2ZWxcclxuXHRcdCAqIHZhciBsb2dsZXZlbCA9IHNjZW5lLmxvZ2xldmVsKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gc2V0IG5ldyBsb2dsZXZlbFxyXG5cdFx0ICogc2NlbmUubG9nbGV2ZWwoMyk7XHJcblx0XHQgKlxyXG5cdFx0ICogQGZpcmVzIHtAbGluayBTY2VuZS5jaGFuZ2V9LCB3aGVuIHVzZWQgYXMgc2V0dGVyXHJcblx0XHQgKiBAcGFyYW0ge251bWJlcn0gW25ld0xvZ2xldmVsXSAtIFRoZSBuZXcgbG9nbGV2ZWwgc2V0dGluZyBvZiB0aGUgc2NlbmUuIGBbMC0zXWBcclxuXHRcdCAqIEByZXR1cm5zIHtudW1iZXJ9IGBnZXRgIC0gIEN1cnJlbnQgbG9nbGV2ZWwuXHJcblx0XHQgKiBAcmV0dXJucyB7U2NlbmV9IGBzZXRgIC0gIFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLlxyXG5cdFx0ICovXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAqKkdldCoqIHRoZSBhc3NvY2lhdGVkIGNvbnRyb2xsZXIuXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI2NvbnRyb2xsZXJcclxuXHRcdCAqIEBleGFtcGxlXHJcblx0XHQgKiAvLyBnZXQgdGhlIGNvbnRyb2xsZXIgb2YgYSBzY2VuZVxyXG5cdFx0ICogdmFyIGNvbnRyb2xsZXIgPSBzY2VuZS5jb250cm9sbGVyKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybnMge1Njcm9sbE1hZ2ljLkNvbnRyb2xsZXJ9IFBhcmVudCBjb250cm9sbGVyIG9yIGB1bmRlZmluZWRgXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuY29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIF9jb250cm9sbGVyO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqICoqR2V0KiogdGhlIGN1cnJlbnQgc3RhdGUuXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI3N0YXRlXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gZ2V0IHRoZSBjdXJyZW50IHN0YXRlXHJcblx0XHQgKiB2YXIgc3RhdGUgPSBzY2VuZS5zdGF0ZSgpO1xyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm5zIHtzdHJpbmd9IGBcIkJFRk9SRVwiYCwgYFwiRFVSSU5HXCJgIG9yIGBcIkFGVEVSXCJgXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuc3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHJldHVybiBfc3RhdGU7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogKipHZXQqKiB0aGUgY3VycmVudCBzY3JvbGwgb2Zmc2V0IGZvciB0aGUgc3RhcnQgb2YgdGhlIHNjZW5lLiAgXHJcblx0XHQgKiBNaW5kLCB0aGF0IHRoZSBzY3JvbGxPZmZzZXQgaXMgcmVsYXRlZCB0byB0aGUgc2l6ZSBvZiB0aGUgY29udGFpbmVyLCBpZiBgdHJpZ2dlckhvb2tgIGlzIGJpZ2dlciB0aGFuIGAwYCAob3IgYFwib25MZWF2ZVwiYCkuICBcclxuXHRcdCAqIFRoaXMgbWVhbnMsIHRoYXQgcmVzaXppbmcgdGhlIGNvbnRhaW5lciBvciBjaGFuZ2luZyB0aGUgYHRyaWdnZXJIb29rYCB3aWxsIGluZmx1ZW5jZSB0aGUgc2NlbmUncyBzdGFydCBvZmZzZXQuXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI3Njcm9sbE9mZnNldFxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGdldCB0aGUgY3VycmVudCBzY3JvbGwgb2Zmc2V0IGZvciB0aGUgc3RhcnQgYW5kIGVuZCBvZiB0aGUgc2NlbmUuXHJcblx0XHQgKiB2YXIgc3RhcnQgPSBzY2VuZS5zY3JvbGxPZmZzZXQoKTtcclxuXHRcdCAqIHZhciBlbmQgPSBzY2VuZS5zY3JvbGxPZmZzZXQoKSArIHNjZW5lLmR1cmF0aW9uKCk7XHJcblx0XHQgKiBjb25zb2xlLmxvZyhcInRoZSBzY2VuZSBzdGFydHMgYXRcIiwgc3RhcnQsIFwiYW5kIGVuZHMgYXRcIiwgZW5kKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgc2Nyb2xsIG9mZnNldCAob2YgdGhlIGNvbnRhaW5lcikgYXQgd2hpY2ggdGhlIHNjZW5lIHdpbGwgdHJpZ2dlci4gWSB2YWx1ZSBmb3IgdmVydGljYWwgYW5kIFggdmFsdWUgZm9yIGhvcml6b250YWwgc2Nyb2xscy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5zY3JvbGxPZmZzZXQgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHJldHVybiBfc2Nyb2xsT2Zmc2V0LnN0YXJ0O1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqICoqR2V0KiogdGhlIHRyaWdnZXIgcG9zaXRpb24gb2YgdGhlIHNjZW5lIChpbmNsdWRpbmcgdGhlIHZhbHVlIG9mIHRoZSBgb2Zmc2V0YCBvcHRpb24pLiAgXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI3RyaWdnZXJQb3NpdGlvblxyXG5cdFx0ICogQGV4YW1wbGVcclxuXHRcdCAqIC8vIGdldCB0aGUgc2NlbmUncyB0cmlnZ2VyIHBvc2l0aW9uXHJcblx0XHQgKiB2YXIgdHJpZ2dlclBvc2l0aW9uID0gc2NlbmUudHJpZ2dlclBvc2l0aW9uKCk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybnMge251bWJlcn0gU3RhcnQgcG9zaXRpb24gb2YgdGhlIHNjZW5lLiBUb3AgcG9zaXRpb24gdmFsdWUgZm9yIHZlcnRpY2FsIGFuZCBsZWZ0IHBvc2l0aW9uIHZhbHVlIGZvciBob3Jpem9udGFsIHNjcm9sbHMuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMudHJpZ2dlclBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHR2YXIgcG9zID0gX29wdGlvbnMub2Zmc2V0OyAvLyB0aGUgb2Zmc2V0IGlzIHRoZSBiYXNpc1xyXG5cdFx0XHRpZiAoX2NvbnRyb2xsZXIpIHtcclxuXHRcdFx0XHQvLyBnZXQgdGhlIHRyaWdnZXIgcG9zaXRpb25cclxuXHRcdFx0XHRpZiAoX29wdGlvbnMudHJpZ2dlckVsZW1lbnQpIHtcclxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgYXMgdHJpZ2dlclxyXG5cdFx0XHRcdFx0cG9zICs9IF90cmlnZ2VyUG9zO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyByZXR1cm4gdGhlIGhlaWdodCBvZiB0aGUgdHJpZ2dlckhvb2sgdG8gc3RhcnQgYXQgdGhlIGJlZ2lubmluZ1xyXG5cdFx0XHRcdFx0cG9zICs9IF9jb250cm9sbGVyLmluZm8oXCJzaXplXCIpICogU2NlbmUudHJpZ2dlckhvb2soKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHBvcztcclxuXHRcdH07XHJcblxyXG5cclxuXHRcdHZhclxyXG5cdFx0XHRfcGluLFxyXG5cdFx0XHRfcGluT3B0aW9ucztcclxuXHJcblx0XHRTY2VuZVxyXG5cdFx0XHQub24oXCJzaGlmdC5pbnRlcm5hbFwiLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdHZhciBkdXJhdGlvbkNoYW5nZWQgPSBlLnJlYXNvbiA9PT0gXCJkdXJhdGlvblwiO1xyXG5cdFx0XHRcdGlmICgoX3N0YXRlID09PSBTQ0VORV9TVEFURV9BRlRFUiAmJiBkdXJhdGlvbkNoYW5nZWQpIHx8IChfc3RhdGUgPT09IFNDRU5FX1NUQVRFX0RVUklORyAmJiBfb3B0aW9ucy5kdXJhdGlvbiA9PT0gMCkpIHtcclxuXHRcdFx0XHRcdC8vIGlmIFtkdXJhdGlvbiBjaGFuZ2VkIGFmdGVyIGEgc2NlbmUgKGluc2lkZSBzY2VuZSBwcm9ncmVzcyB1cGRhdGVzIHBpbiBwb3NpdGlvbildIG9yIFtkdXJhdGlvbiBpcyAwLCB3ZSBhcmUgaW4gcGluIHBoYXNlIGFuZCBzb21lIG90aGVyIHZhbHVlIGNoYW5nZWRdLlxyXG5cdFx0XHRcdFx0dXBkYXRlUGluU3RhdGUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKGR1cmF0aW9uQ2hhbmdlZCkge1xyXG5cdFx0XHRcdFx0dXBkYXRlUGluRGltZW5zaW9ucygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHRcdFx0Lm9uKFwicHJvZ3Jlc3MuaW50ZXJuYWxcIiwgZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0XHR1cGRhdGVQaW5TdGF0ZSgpO1xyXG5cdFx0XHR9KVxyXG5cdFx0XHQub24oXCJhZGQuaW50ZXJuYWxcIiwgZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0XHR1cGRhdGVQaW5EaW1lbnNpb25zKCk7XHJcblx0XHRcdH0pXHJcblx0XHRcdC5vbihcImRlc3Ryb3kuaW50ZXJuYWxcIiwgZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0XHRTY2VuZS5yZW1vdmVQaW4oZS5yZXNldCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0LyoqXHJcblx0XHQgKiBVcGRhdGUgdGhlIHBpbiBzdGF0ZS5cclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciB1cGRhdGVQaW5TdGF0ZSA9IGZ1bmN0aW9uIChmb3JjZVVucGluKSB7XHJcblx0XHRcdGlmIChfcGluICYmIF9jb250cm9sbGVyKSB7XHJcblx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRjb250YWluZXJJbmZvID0gX2NvbnRyb2xsZXIuaW5mbygpLFxyXG5cdFx0XHRcdFx0cGluVGFyZ2V0ID0gX3Bpbk9wdGlvbnMuc3BhY2VyLmZpcnN0Q2hpbGQ7IC8vIG1heSBiZSBwaW4gZWxlbWVudCBvciBhbm90aGVyIHNwYWNlciwgaWYgY2FzY2FkaW5nIHBpbnNcclxuXHJcblx0XHRcdFx0aWYgKCFmb3JjZVVucGluICYmIF9zdGF0ZSA9PT0gU0NFTkVfU1RBVEVfRFVSSU5HKSB7IC8vIGR1cmluZyBzY2VuZSBvciBpZiBkdXJhdGlvbiBpcyAwIGFuZCB3ZSBhcmUgcGFzdCB0aGUgdHJpZ2dlclxyXG5cdFx0XHRcdFx0Ly8gcGlubmVkIHN0YXRlXHJcblx0XHRcdFx0XHRpZiAoX3V0aWwuY3NzKHBpblRhcmdldCwgXCJwb3NpdGlvblwiKSAhPSBcImZpeGVkXCIpIHtcclxuXHRcdFx0XHRcdFx0Ly8gY2hhbmdlIHN0YXRlIGJlZm9yZSB1cGRhdGluZyBwaW4gc3BhY2VyIChwb3NpdGlvbiBjaGFuZ2VzIGR1ZSB0byBmaXhlZCBjb2xsYXBzaW5nIG1pZ2h0IG9jY3VyLilcclxuXHRcdFx0XHRcdFx0X3V0aWwuY3NzKHBpblRhcmdldCwge1xyXG5cdFx0XHRcdFx0XHRcdFwicG9zaXRpb25cIjogXCJmaXhlZFwiXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHQvLyB1cGRhdGUgcGluIHNwYWNlclxyXG5cdFx0XHRcdFx0XHR1cGRhdGVQaW5EaW1lbnNpb25zKCk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRcdGZpeGVkUG9zID0gX3V0aWwuZ2V0Lm9mZnNldChfcGluT3B0aW9ucy5zcGFjZXIsIHRydWUpLCAvLyBnZXQgdmlld3BvcnQgcG9zaXRpb24gb2Ygc3BhY2VyXHJcblx0XHRcdFx0XHRcdHNjcm9sbERpc3RhbmNlID0gX29wdGlvbnMucmV2ZXJzZSB8fCBfb3B0aW9ucy5kdXJhdGlvbiA9PT0gMCA/XHJcblx0XHRcdFx0XHRcdGNvbnRhaW5lckluZm8uc2Nyb2xsUG9zIC0gX3Njcm9sbE9mZnNldC5zdGFydCAvLyBxdWlja2VyXHJcblx0XHRcdFx0XHRcdDpcclxuXHRcdFx0XHRcdFx0TWF0aC5yb3VuZChfcHJvZ3Jlc3MgKiBfb3B0aW9ucy5kdXJhdGlvbiAqIDEwKSAvIDEwOyAvLyBpZiBubyByZXZlcnNlIGFuZCBkdXJpbmcgcGluIHRoZSBwb3NpdGlvbiBuZWVkcyB0byBiZSByZWNhbGN1bGF0ZWQgdXNpbmcgdGhlIHByb2dyZXNzXHJcblxyXG5cdFx0XHRcdFx0Ly8gYWRkIHNjcm9sbERpc3RhbmNlXHJcblx0XHRcdFx0XHRmaXhlZFBvc1tjb250YWluZXJJbmZvLnZlcnRpY2FsID8gXCJ0b3BcIiA6IFwibGVmdFwiXSArPSBzY3JvbGxEaXN0YW5jZTtcclxuXHJcblx0XHRcdFx0XHQvLyBzZXQgbmV3IHZhbHVlc1xyXG5cdFx0XHRcdFx0X3V0aWwuY3NzKF9waW5PcHRpb25zLnNwYWNlci5maXJzdENoaWxkLCB7XHJcblx0XHRcdFx0XHRcdHRvcDogZml4ZWRQb3MudG9wLFxyXG5cdFx0XHRcdFx0XHRsZWZ0OiBmaXhlZFBvcy5sZWZ0XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8gdW5waW5uZWQgc3RhdGVcclxuXHRcdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0XHRuZXdDU1MgPSB7XHJcblx0XHRcdFx0XHRcdFx0cG9zaXRpb246IF9waW5PcHRpb25zLmluRmxvdyA/IFwicmVsYXRpdmVcIiA6IFwiYWJzb2x1dGVcIixcclxuXHRcdFx0XHRcdFx0XHR0b3A6IDAsXHJcblx0XHRcdFx0XHRcdFx0bGVmdDogMFxyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHRjaGFuZ2UgPSBfdXRpbC5jc3MocGluVGFyZ2V0LCBcInBvc2l0aW9uXCIpICE9IG5ld0NTUy5wb3NpdGlvbjtcclxuXHJcblx0XHRcdFx0XHRpZiAoIV9waW5PcHRpb25zLnB1c2hGb2xsb3dlcnMpIHtcclxuXHRcdFx0XHRcdFx0bmV3Q1NTW2NvbnRhaW5lckluZm8udmVydGljYWwgPyBcInRvcFwiIDogXCJsZWZ0XCJdID0gX29wdGlvbnMuZHVyYXRpb24gKiBfcHJvZ3Jlc3M7XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKF9vcHRpb25zLmR1cmF0aW9uID4gMCkgeyAvLyBvbmx5IGNvbmNlcm5zIHNjZW5lcyB3aXRoIGR1cmF0aW9uXHJcblx0XHRcdFx0XHRcdGlmIChfc3RhdGUgPT09IFNDRU5FX1NUQVRFX0FGVEVSICYmIHBhcnNlRmxvYXQoX3V0aWwuY3NzKF9waW5PcHRpb25zLnNwYWNlciwgXCJwYWRkaW5nLXRvcFwiKSkgPT09IDApIHtcclxuXHRcdFx0XHRcdFx0XHRjaGFuZ2UgPSB0cnVlOyAvLyBpZiBpbiBhZnRlciBzdGF0ZSBidXQgaGF2ZW50IHVwZGF0ZWQgc3BhY2VyIHlldCAoanVtcGVkIHBhc3QgcGluKVxyXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKF9zdGF0ZSA9PT0gU0NFTkVfU1RBVEVfQkVGT1JFICYmIHBhcnNlRmxvYXQoX3V0aWwuY3NzKF9waW5PcHRpb25zLnNwYWNlciwgXCJwYWRkaW5nLWJvdHRvbVwiKSkgPT09IDApIHsgLy8gYmVmb3JlXHJcblx0XHRcdFx0XHRcdFx0Y2hhbmdlID0gdHJ1ZTsgLy8ganVtcGVkIHBhc3QgZml4ZWQgc3RhdGUgdXB3YXJkIGRpcmVjdGlvblxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQvLyBzZXQgbmV3IHZhbHVlc1xyXG5cdFx0XHRcdFx0X3V0aWwuY3NzKHBpblRhcmdldCwgbmV3Q1NTKTtcclxuXHRcdFx0XHRcdGlmIChjaGFuZ2UpIHtcclxuXHRcdFx0XHRcdFx0Ly8gdXBkYXRlIHBpbiBzcGFjZXIgaWYgc3RhdGUgY2hhbmdlZFxyXG5cdFx0XHRcdFx0XHR1cGRhdGVQaW5EaW1lbnNpb25zKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogVXBkYXRlIHRoZSBwaW4gc3BhY2VyIGFuZC9vciBlbGVtZW50IHNpemUuXHJcblx0XHQgKiBUaGUgc2l6ZSBvZiB0aGUgc3BhY2VyIG5lZWRzIHRvIGJlIHVwZGF0ZWQgd2hlbmV2ZXIgdGhlIGR1cmF0aW9uIG9mIHRoZSBzY2VuZSBjaGFuZ2VzLCBpZiBpdCBpcyB0byBwdXNoIGRvd24gZm9sbG93aW5nIGVsZW1lbnRzLlxyXG5cdFx0ICogQHByaXZhdGVcclxuXHRcdCAqL1xyXG5cdFx0dmFyIHVwZGF0ZVBpbkRpbWVuc2lvbnMgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGlmIChfcGluICYmIF9jb250cm9sbGVyICYmIF9waW5PcHRpb25zLmluRmxvdykgeyAvLyBubyBzcGFjZXJyZXNpemUsIGlmIG9yaWdpbmFsIHBvc2l0aW9uIGlzIGFic29sdXRlXHJcblx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRhZnRlciA9IChfc3RhdGUgPT09IFNDRU5FX1NUQVRFX0FGVEVSKSxcclxuXHRcdFx0XHRcdGJlZm9yZSA9IChfc3RhdGUgPT09IFNDRU5FX1NUQVRFX0JFRk9SRSksXHJcblx0XHRcdFx0XHRkdXJpbmcgPSAoX3N0YXRlID09PSBTQ0VORV9TVEFURV9EVVJJTkcpLFxyXG5cdFx0XHRcdFx0dmVydGljYWwgPSBfY29udHJvbGxlci5pbmZvKFwidmVydGljYWxcIiksXHJcblx0XHRcdFx0XHRwaW5UYXJnZXQgPSBfcGluT3B0aW9ucy5zcGFjZXIuZmlyc3RDaGlsZCwgLy8gdXN1YWxseSB0aGUgcGluZWQgZWxlbWVudCBidXQgY2FuIGFsc28gYmUgYW5vdGhlciBzcGFjZXIgKGNhc2NhZGVkIHBpbnMpXHJcblx0XHRcdFx0XHRtYXJnaW5Db2xsYXBzZSA9IF91dGlsLmlzTWFyZ2luQ29sbGFwc2VUeXBlKF91dGlsLmNzcyhfcGluT3B0aW9ucy5zcGFjZXIsIFwiZGlzcGxheVwiKSksXHJcblx0XHRcdFx0XHRjc3MgPSB7fTtcclxuXHJcblx0XHRcdFx0Ly8gc2V0IG5ldyBzaXplXHJcblx0XHRcdFx0Ly8gaWYgcmVsc2l6ZTogc3BhY2VyIC0+IHBpbiB8IGVsc2U6IHBpbiAtPiBzcGFjZXJcclxuXHRcdFx0XHRpZiAoX3Bpbk9wdGlvbnMucmVsU2l6ZS53aWR0aCB8fCBfcGluT3B0aW9ucy5yZWxTaXplLmF1dG9GdWxsV2lkdGgpIHtcclxuXHRcdFx0XHRcdGlmIChkdXJpbmcpIHtcclxuXHRcdFx0XHRcdFx0X3V0aWwuY3NzKF9waW4sIHtcclxuXHRcdFx0XHRcdFx0XHRcIndpZHRoXCI6IF91dGlsLmdldC53aWR0aChfcGluT3B0aW9ucy5zcGFjZXIpXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0X3V0aWwuY3NzKF9waW4sIHtcclxuXHRcdFx0XHRcdFx0XHRcIndpZHRoXCI6IFwiMTAwJVwiXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyBtaW53aWR0aCBpcyBuZWVkZWQgZm9yIGNhc2NhZGVkIHBpbnMuXHJcblx0XHRcdFx0XHRjc3NbXCJtaW4td2lkdGhcIl0gPSBfdXRpbC5nZXQud2lkdGgodmVydGljYWwgPyBfcGluIDogcGluVGFyZ2V0LCB0cnVlLCB0cnVlKTtcclxuXHRcdFx0XHRcdGNzcy53aWR0aCA9IGR1cmluZyA/IGNzc1tcIm1pbi13aWR0aFwiXSA6IFwiYXV0b1wiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoX3Bpbk9wdGlvbnMucmVsU2l6ZS5oZWlnaHQpIHtcclxuXHRcdFx0XHRcdGlmIChkdXJpbmcpIHtcclxuXHRcdFx0XHRcdFx0Ly8gdGhlIG9ubHkgcGFkZGluZyB0aGUgc3BhY2VyIHNob3VsZCBldmVyIGluY2x1ZGUgaXMgdGhlIGR1cmF0aW9uIChpZiBwdXNoRm9sbG93ZXJzID0gdHJ1ZSksIHNvIHdlIG5lZWQgdG8gc3Vic3RyYWN0IHRoYXQuXHJcblx0XHRcdFx0XHRcdF91dGlsLmNzcyhfcGluLCB7XHJcblx0XHRcdFx0XHRcdFx0XCJoZWlnaHRcIjogX3V0aWwuZ2V0LmhlaWdodChfcGluT3B0aW9ucy5zcGFjZXIpIC0gKF9waW5PcHRpb25zLnB1c2hGb2xsb3dlcnMgPyBfb3B0aW9ucy5kdXJhdGlvbiA6IDApXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0X3V0aWwuY3NzKF9waW4sIHtcclxuXHRcdFx0XHRcdFx0XHRcImhlaWdodFwiOiBcIjEwMCVcIlxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8gbWFyZ2luIGlzIG9ubHkgaW5jbHVkZWQgaWYgaXQncyBhIGNhc2NhZGVkIHBpbiB0byByZXNvbHZlIGFuIElFOSBidWdcclxuXHRcdFx0XHRcdGNzc1tcIm1pbi1oZWlnaHRcIl0gPSBfdXRpbC5nZXQuaGVpZ2h0KHZlcnRpY2FsID8gcGluVGFyZ2V0IDogX3BpbiwgdHJ1ZSwgIW1hcmdpbkNvbGxhcHNlKTsgLy8gbmVlZGVkIGZvciBjYXNjYWRpbmcgcGluc1xyXG5cdFx0XHRcdFx0Y3NzLmhlaWdodCA9IGR1cmluZyA/IGNzc1tcIm1pbi1oZWlnaHRcIl0gOiBcImF1dG9cIjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIGFkZCBzcGFjZSBmb3IgZHVyYXRpb24gaWYgcHVzaEZvbGxvd2VycyBpcyB0cnVlXHJcblx0XHRcdFx0aWYgKF9waW5PcHRpb25zLnB1c2hGb2xsb3dlcnMpIHtcclxuXHRcdFx0XHRcdGNzc1tcInBhZGRpbmdcIiArICh2ZXJ0aWNhbCA/IFwiVG9wXCIgOiBcIkxlZnRcIildID0gX29wdGlvbnMuZHVyYXRpb24gKiBfcHJvZ3Jlc3M7XHJcblx0XHRcdFx0XHRjc3NbXCJwYWRkaW5nXCIgKyAodmVydGljYWwgPyBcIkJvdHRvbVwiIDogXCJSaWdodFwiKV0gPSBfb3B0aW9ucy5kdXJhdGlvbiAqICgxIC0gX3Byb2dyZXNzKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0X3V0aWwuY3NzKF9waW5PcHRpb25zLnNwYWNlciwgY3NzKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFVwZGF0ZXMgdGhlIFBpbiBzdGF0ZSAoaW4gY2VydGFpbiBzY2VuYXJpb3MpXHJcblx0XHQgKiBJZiB0aGUgY29udHJvbGxlciBjb250YWluZXIgaXMgbm90IHRoZSBkb2N1bWVudCBhbmQgd2UgYXJlIG1pZC1waW4tcGhhc2Ugc2Nyb2xsaW5nIG9yIHJlc2l6aW5nIHRoZSBtYWluIGRvY3VtZW50IGNhbiByZXN1bHQgdG8gd3JvbmcgcGluIHBvc2l0aW9ucy5cclxuXHRcdCAqIFNvIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIHJlc2l6ZSBhbmQgc2Nyb2xsIG9mIHRoZSBkb2N1bWVudC5cclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciB1cGRhdGVQaW5JbkNvbnRhaW5lciA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0aWYgKF9jb250cm9sbGVyICYmIF9waW4gJiYgX3N0YXRlID09PSBTQ0VORV9TVEFURV9EVVJJTkcgJiYgIV9jb250cm9sbGVyLmluZm8oXCJpc0RvY3VtZW50XCIpKSB7XHJcblx0XHRcdFx0dXBkYXRlUGluU3RhdGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFVwZGF0ZXMgdGhlIFBpbiBzcGFjZXIgc2l6ZSBzdGF0ZSAoaW4gY2VydGFpbiBzY2VuYXJpb3MpXHJcblx0XHQgKiBJZiBjb250YWluZXIgaXMgcmVzaXplZCBkdXJpbmcgcGluIGFuZCByZWxhdGl2ZWx5IHNpemVkIHRoZSBzaXplIG9mIHRoZSBwaW4gbWlnaHQgbmVlZCB0byBiZSB1cGRhdGVkLi4uXHJcblx0XHQgKiBTbyB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiByZXNpemUgb2YgdGhlIGNvbnRhaW5lci5cclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciB1cGRhdGVSZWxhdGl2ZVBpblNwYWNlciA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0aWYgKF9jb250cm9sbGVyICYmIF9waW4gJiYgLy8gd2VsbCwgZHVoXHJcblx0XHRcdFx0X3N0YXRlID09PSBTQ0VORV9TVEFURV9EVVJJTkcgJiYgLy8gZWxlbWVudCBpbiBwaW5uZWQgc3RhdGU/XHJcblx0XHRcdFx0KCAvLyBpcyB3aWR0aCBvciBoZWlnaHQgcmVsYXRpdmVseSBzaXplZCwgYnV0IG5vdCBpbiByZWxhdGlvbiB0byBib2R5PyB0aGVuIHdlIG5lZWQgdG8gcmVjYWxjLlxyXG5cdFx0XHRcdFx0KChfcGluT3B0aW9ucy5yZWxTaXplLndpZHRoIHx8IF9waW5PcHRpb25zLnJlbFNpemUuYXV0b0Z1bGxXaWR0aCkgJiYgX3V0aWwuZ2V0LndpZHRoKHdpbmRvdykgIT0gX3V0aWwuZ2V0LndpZHRoKF9waW5PcHRpb25zLnNwYWNlci5wYXJlbnROb2RlKSkgfHxcclxuXHRcdFx0XHRcdChfcGluT3B0aW9ucy5yZWxTaXplLmhlaWdodCAmJiBfdXRpbC5nZXQuaGVpZ2h0KHdpbmRvdykgIT0gX3V0aWwuZ2V0LmhlaWdodChfcGluT3B0aW9ucy5zcGFjZXIucGFyZW50Tm9kZSkpXHJcblx0XHRcdFx0KVxyXG5cdFx0XHQpIHtcclxuXHRcdFx0XHR1cGRhdGVQaW5EaW1lbnNpb25zKCk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBJcyBjYWxsZWQsIHdoZW4gdGhlIG1vdXNld2hlbCBpcyB1c2VkIHdoaWxlIG92ZXIgYSBwaW5uZWQgZWxlbWVudCBpbnNpZGUgYSBkaXYgY29udGFpbmVyLlxyXG5cdFx0ICogSWYgdGhlIHNjZW5lIGlzIGluIGZpeGVkIHN0YXRlIHNjcm9sbCBldmVudHMgd291bGQgYmUgY291bnRlZCB0b3dhcmRzIHRoZSBib2R5LiBUaGlzIGZvcndhcmRzIHRoZSBldmVudCB0byB0aGUgc2Nyb2xsIGNvbnRhaW5lci5cclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdHZhciBvbk1vdXNld2hlZWxPdmVyUGluID0gZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0aWYgKF9jb250cm9sbGVyICYmIF9waW4gJiYgX3N0YXRlID09PSBTQ0VORV9TVEFURV9EVVJJTkcgJiYgIV9jb250cm9sbGVyLmluZm8oXCJpc0RvY3VtZW50XCIpKSB7IC8vIGluIHBpbiBzdGF0ZVxyXG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRfY29udHJvbGxlci5fc2V0U2Nyb2xsUG9zKF9jb250cm9sbGVyLmluZm8oXCJzY3JvbGxQb3NcIikgLSAoKGUud2hlZWxEZWx0YSB8fCBlW19jb250cm9sbGVyLmluZm8oXCJ2ZXJ0aWNhbFwiKSA/IFwid2hlZWxEZWx0YVlcIiA6IFwid2hlZWxEZWx0YVhcIl0pIC8gMyB8fCAtZS5kZXRhaWwgKiAzMCkpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogUGluIGFuIGVsZW1lbnQgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgc2NlbmUuXHJcblx0XHQgKiBJZiB0aGUgc2NlbmUgZHVyYXRpb24gaXMgMCB0aGUgZWxlbWVudCB3aWxsIG9ubHkgYmUgdW5waW5uZWQsIGlmIHRoZSB1c2VyIHNjcm9sbHMgYmFjayBwYXN0IHRoZSBzdGFydCBwb3NpdGlvbi4gIFxyXG5cdFx0ICogTWFrZSBzdXJlIG9ubHkgb25lIHBpbiBpcyBhcHBsaWVkIHRvIGFuIGVsZW1lbnQgYXQgdGhlIHNhbWUgdGltZS5cclxuXHRcdCAqIEFuIGVsZW1lbnQgY2FuIGJlIHBpbm5lZCBtdWx0aXBsZSB0aW1lcywgYnV0IG9ubHkgc3VjY2Vzc2l2ZWx5LlxyXG5cdFx0ICogXyoqTk9URToqKiBUaGUgb3B0aW9uIGBwdXNoRm9sbG93ZXJzYCBoYXMgbm8gZWZmZWN0LCB3aGVuIHRoZSBzY2VuZSBkdXJhdGlvbiBpcyAwLl9cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjc2V0UGluXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gcGluIGVsZW1lbnQgYW5kIHB1c2ggYWxsIGZvbGxvd2luZyBlbGVtZW50cyBkb3duIGJ5IHRoZSBhbW91bnQgb2YgdGhlIHBpbiBkdXJhdGlvbi5cclxuXHRcdCAqIHNjZW5lLnNldFBpbihcIiNwaW5cIik7XHJcblx0XHQgKlxyXG5cdFx0ICogLy8gcGluIGVsZW1lbnQgYW5kIGtlZXBpbmcgYWxsIGZvbGxvd2luZyBlbGVtZW50cyBpbiB0aGVpciBwbGFjZS4gVGhlIHBpbm5lZCBlbGVtZW50IHdpbGwgbW92ZSBwYXN0IHRoZW0uXHJcblx0XHQgKiBzY2VuZS5zZXRQaW4oXCIjcGluXCIsIHtwdXNoRm9sbG93ZXJzOiBmYWxzZX0pO1xyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7KHN0cmluZ3xvYmplY3QpfSBlbGVtZW50IC0gQSBTZWxlY3RvciB0YXJnZXRpbmcgYW4gZWxlbWVudCBvciBhIERPTSBvYmplY3QgdGhhdCBpcyBzdXBwb3NlZCB0byBiZSBwaW5uZWQuXHJcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gW3NldHRpbmdzXSAtIHNldHRpbmdzIGZvciB0aGUgcGluXHJcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtzZXR0aW5ncy5wdXNoRm9sbG93ZXJzPXRydWVdIC0gSWYgYHRydWVgIGZvbGxvd2luZyBlbGVtZW50cyB3aWxsIGJlIFwicHVzaGVkXCIgZG93biBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBwaW4sIGlmIGBmYWxzZWAgdGhlIHBpbm5lZCBlbGVtZW50IHdpbGwganVzdCBzY3JvbGwgcGFzdCB0aGVtLiAgXHJcblx0XHQgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ICAgSWdub3JlZCwgd2hlbiBkdXJhdGlvbiBpcyBgMGAuXHJcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gW3NldHRpbmdzLnNwYWNlckNsYXNzPVwic2Nyb2xsbWFnaWMtcGluLXNwYWNlclwiXSAtIENsYXNzbmFtZSBvZiB0aGUgcGluIHNwYWNlciBlbGVtZW50LCB3aGljaCBpcyB1c2VkIHRvIHJlcGxhY2UgdGhlIGVsZW1lbnQuXHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5zZXRQaW4gPSBmdW5jdGlvbiAoZWxlbWVudCwgc2V0dGluZ3MpIHtcclxuXHRcdFx0dmFyXHJcblx0XHRcdFx0ZGVmYXVsdFNldHRpbmdzID0ge1xyXG5cdFx0XHRcdFx0cHVzaEZvbGxvd2VyczogdHJ1ZSxcclxuXHRcdFx0XHRcdHNwYWNlckNsYXNzOiBcInNjcm9sbG1hZ2ljLXBpbi1zcGFjZXJcIlxyXG5cdFx0XHRcdH07XHJcblx0XHRcdHZhciBwdXNoRm9sbG93ZXJzQWN0aXZlbHlTZXQgPSBzZXR0aW5ncyAmJiBzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eSgncHVzaEZvbGxvd2VycycpO1xyXG5cdFx0XHRzZXR0aW5ncyA9IF91dGlsLmV4dGVuZCh7fSwgZGVmYXVsdFNldHRpbmdzLCBzZXR0aW5ncyk7XHJcblxyXG5cdFx0XHQvLyB2YWxpZGF0ZSBFbGVtZW50XHJcblx0XHRcdGVsZW1lbnQgPSBfdXRpbC5nZXQuZWxlbWVudHMoZWxlbWVudClbMF07XHJcblx0XHRcdGlmICghZWxlbWVudCkge1xyXG5cdFx0XHRcdGxvZygxLCBcIkVSUk9SIGNhbGxpbmcgbWV0aG9kICdzZXRQaW4oKSc6IEludmFsaWQgcGluIGVsZW1lbnQgc3VwcGxpZWQuXCIpO1xyXG5cdFx0XHRcdHJldHVybiBTY2VuZTsgLy8gY2FuY2VsXHJcblx0XHRcdH0gZWxzZSBpZiAoX3V0aWwuY3NzKGVsZW1lbnQsIFwicG9zaXRpb25cIikgPT09IFwiZml4ZWRcIikge1xyXG5cdFx0XHRcdGxvZygxLCBcIkVSUk9SIGNhbGxpbmcgbWV0aG9kICdzZXRQaW4oKSc6IFBpbiBkb2VzIG5vdCB3b3JrIHdpdGggZWxlbWVudHMgdGhhdCBhcmUgcG9zaXRpb25lZCAnZml4ZWQnLlwiKTtcclxuXHRcdFx0XHRyZXR1cm4gU2NlbmU7IC8vIGNhbmNlbFxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoX3BpbikgeyAvLyBwcmVleGlzdGluZyBwaW4/XHJcblx0XHRcdFx0aWYgKF9waW4gPT09IGVsZW1lbnQpIHtcclxuXHRcdFx0XHRcdC8vIHNhbWUgcGluIHdlIGFscmVhZHkgaGF2ZSAtPiBkbyBub3RoaW5nXHJcblx0XHRcdFx0XHRyZXR1cm4gU2NlbmU7IC8vIGNhbmNlbFxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyBraWxsIG9sZCBwaW5cclxuXHRcdFx0XHRcdFNjZW5lLnJlbW92ZVBpbigpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHRcdFx0X3BpbiA9IGVsZW1lbnQ7XHJcblxyXG5cdFx0XHR2YXJcclxuXHRcdFx0XHRwYXJlbnREaXNwbGF5ID0gX3Bpbi5wYXJlbnROb2RlLnN0eWxlLmRpc3BsYXksXHJcblx0XHRcdFx0Ym91bmRzUGFyYW1zID0gW1widG9wXCIsIFwibGVmdFwiLCBcImJvdHRvbVwiLCBcInJpZ2h0XCIsIFwibWFyZ2luXCIsIFwibWFyZ2luTGVmdFwiLCBcIm1hcmdpblJpZ2h0XCIsIFwibWFyZ2luVG9wXCIsIFwibWFyZ2luQm90dG9tXCJdO1xyXG5cclxuXHRcdFx0X3Bpbi5wYXJlbnROb2RlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7IC8vIGhhY2sgc3RhcnQgdG8gZm9yY2UgY3NzIHRvIHJldHVybiBzdHlsZXNoZWV0IHZhbHVlcyBpbnN0ZWFkIG9mIGNhbGN1bGF0ZWQgcHggdmFsdWVzLlxyXG5cdFx0XHR2YXJcclxuXHRcdFx0XHRpbkZsb3cgPSBfdXRpbC5jc3MoX3BpbiwgXCJwb3NpdGlvblwiKSAhPSBcImFic29sdXRlXCIsXHJcblx0XHRcdFx0cGluQ1NTID0gX3V0aWwuY3NzKF9waW4sIGJvdW5kc1BhcmFtcy5jb25jYXQoW1wiZGlzcGxheVwiXSkpLFxyXG5cdFx0XHRcdHNpemVDU1MgPSBfdXRpbC5jc3MoX3BpbiwgW1wid2lkdGhcIiwgXCJoZWlnaHRcIl0pO1xyXG5cdFx0XHRfcGluLnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9IHBhcmVudERpc3BsYXk7IC8vIGhhY2sgZW5kLlxyXG5cclxuXHRcdFx0aWYgKCFpbkZsb3cgJiYgc2V0dGluZ3MucHVzaEZvbGxvd2Vycykge1xyXG5cdFx0XHRcdGxvZygyLCBcIldBUk5JTkc6IElmIHRoZSBwaW5uZWQgZWxlbWVudCBpcyBwb3NpdGlvbmVkIGFic29sdXRlbHkgcHVzaEZvbGxvd2VycyB3aWxsIGJlIGRpc2FibGVkLlwiKTtcclxuXHRcdFx0XHRzZXR0aW5ncy5wdXNoRm9sbG93ZXJzID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyAvLyB3YWl0IHVudGlsIGFsbCBmaW5pc2hlZCwgYmVjYXVzZSB3aXRoIHJlc3BvbnNpdmUgZHVyYXRpb24gaXQgd2lsbCBvbmx5IGJlIHNldCBhZnRlciBzY2VuZSBpcyBhZGRlZCB0byBjb250cm9sbGVyXHJcblx0XHRcdFx0aWYgKF9waW4gJiYgX29wdGlvbnMuZHVyYXRpb24gPT09IDAgJiYgcHVzaEZvbGxvd2Vyc0FjdGl2ZWx5U2V0ICYmIHNldHRpbmdzLnB1c2hGb2xsb3dlcnMpIHtcclxuXHRcdFx0XHRcdGxvZygyLCBcIldBUk5JTkc6IHB1c2hGb2xsb3dlcnMgPVwiLCB0cnVlLCBcImhhcyBubyBlZmZlY3QsIHdoZW4gc2NlbmUgZHVyYXRpb24gaXMgMC5cIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCAwKTtcclxuXHJcblx0XHRcdC8vIGNyZWF0ZSBzcGFjZXIgYW5kIGluc2VydFxyXG5cdFx0XHR2YXJcclxuXHRcdFx0XHRzcGFjZXIgPSBfcGluLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBfcGluKSxcclxuXHRcdFx0XHRzcGFjZXJDU1MgPSBfdXRpbC5leHRlbmQocGluQ1NTLCB7XHJcblx0XHRcdFx0XHRwb3NpdGlvbjogaW5GbG93ID8gXCJyZWxhdGl2ZVwiIDogXCJhYnNvbHV0ZVwiLFxyXG5cdFx0XHRcdFx0Ym94U2l6aW5nOiBcImNvbnRlbnQtYm94XCIsXHJcblx0XHRcdFx0XHRtb3pCb3hTaXppbmc6IFwiY29udGVudC1ib3hcIixcclxuXHRcdFx0XHRcdHdlYmtpdEJveFNpemluZzogXCJjb250ZW50LWJveFwiXHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRpZiAoIWluRmxvdykgeyAvLyBjb3B5IHNpemUgaWYgcG9zaXRpb25lZCBhYnNvbHV0ZWx5LCB0byB3b3JrIGZvciBib3R0b20vcmlnaHQgcG9zaXRpb25lZCBlbGVtZW50cy5cclxuXHRcdFx0XHRfdXRpbC5leHRlbmQoc3BhY2VyQ1NTLCBfdXRpbC5jc3MoX3BpbiwgW1wid2lkdGhcIiwgXCJoZWlnaHRcIl0pKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0X3V0aWwuY3NzKHNwYWNlciwgc3BhY2VyQ1NTKTtcclxuXHRcdFx0c3BhY2VyLnNldEF0dHJpYnV0ZShQSU5fU1BBQ0VSX0FUVFJJQlVURSwgXCJcIik7XHJcblx0XHRcdF91dGlsLmFkZENsYXNzKHNwYWNlciwgc2V0dGluZ3Muc3BhY2VyQ2xhc3MpO1xyXG5cclxuXHRcdFx0Ly8gc2V0IHRoZSBwaW4gT3B0aW9uc1xyXG5cdFx0XHRfcGluT3B0aW9ucyA9IHtcclxuXHRcdFx0XHRzcGFjZXI6IHNwYWNlcixcclxuXHRcdFx0XHRyZWxTaXplOiB7IC8vIHNhdmUgaWYgc2l6ZSBpcyBkZWZpbmVkIHVzaW5nICUgdmFsdWVzLiBpZiBzbywgaGFuZGxlIHNwYWNlciByZXNpemUgZGlmZmVyZW50bHkuLi5cclxuXHRcdFx0XHRcdHdpZHRoOiBzaXplQ1NTLndpZHRoLnNsaWNlKC0xKSA9PT0gXCIlXCIsXHJcblx0XHRcdFx0XHRoZWlnaHQ6IHNpemVDU1MuaGVpZ2h0LnNsaWNlKC0xKSA9PT0gXCIlXCIsXHJcblx0XHRcdFx0XHRhdXRvRnVsbFdpZHRoOiBzaXplQ1NTLndpZHRoID09PSBcImF1dG9cIiAmJiBpbkZsb3cgJiYgX3V0aWwuaXNNYXJnaW5Db2xsYXBzZVR5cGUocGluQ1NTLmRpc3BsYXkpXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRwdXNoRm9sbG93ZXJzOiBzZXR0aW5ncy5wdXNoRm9sbG93ZXJzLFxyXG5cdFx0XHRcdGluRmxvdzogaW5GbG93LCAvLyBzdG9yZXMgaWYgdGhlIGVsZW1lbnQgdGFrZXMgdXAgc3BhY2UgaW4gdGhlIGRvY3VtZW50IGZsb3dcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGlmICghX3Bpbi5fX19vcmlnU3R5bGUpIHtcclxuXHRcdFx0XHRfcGluLl9fX29yaWdTdHlsZSA9IHt9O1xyXG5cdFx0XHRcdHZhclxyXG5cdFx0XHRcdFx0cGluSW5saW5lQ1NTID0gX3Bpbi5zdHlsZSxcclxuXHRcdFx0XHRcdGNvcHlTdHlsZXMgPSBib3VuZHNQYXJhbXMuY29uY2F0KFtcIndpZHRoXCIsIFwiaGVpZ2h0XCIsIFwicG9zaXRpb25cIiwgXCJib3hTaXppbmdcIiwgXCJtb3pCb3hTaXppbmdcIiwgXCJ3ZWJraXRCb3hTaXppbmdcIl0pO1xyXG5cdFx0XHRcdGNvcHlTdHlsZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsKSB7XHJcblx0XHRcdFx0XHRfcGluLl9fX29yaWdTdHlsZVt2YWxdID0gcGluSW5saW5lQ1NTW3ZhbF0gfHwgXCJcIjtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gaWYgcmVsYXRpdmUgc2l6ZSwgdHJhbnNmZXIgaXQgdG8gc3BhY2VyIGFuZCBtYWtlIHBpbiBjYWxjdWxhdGUgaXQuLi5cclxuXHRcdFx0aWYgKF9waW5PcHRpb25zLnJlbFNpemUud2lkdGgpIHtcclxuXHRcdFx0XHRfdXRpbC5jc3Moc3BhY2VyLCB7XHJcblx0XHRcdFx0XHR3aWR0aDogc2l6ZUNTUy53aWR0aFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChfcGluT3B0aW9ucy5yZWxTaXplLmhlaWdodCkge1xyXG5cdFx0XHRcdF91dGlsLmNzcyhzcGFjZXIsIHtcclxuXHRcdFx0XHRcdGhlaWdodDogc2l6ZUNTUy5oZWlnaHRcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gbm93IHBsYWNlIHRoZSBwaW4gZWxlbWVudCBpbnNpZGUgdGhlIHNwYWNlclx0XHJcblx0XHRcdHNwYWNlci5hcHBlbmRDaGlsZChfcGluKTtcclxuXHRcdFx0Ly8gYW5kIHNldCBuZXcgY3NzXHJcblx0XHRcdF91dGlsLmNzcyhfcGluLCB7XHJcblx0XHRcdFx0cG9zaXRpb246IGluRmxvdyA/IFwicmVsYXRpdmVcIiA6IFwiYWJzb2x1dGVcIixcclxuXHRcdFx0XHRtYXJnaW46IFwiYXV0b1wiLFxyXG5cdFx0XHRcdHRvcDogXCJhdXRvXCIsXHJcblx0XHRcdFx0bGVmdDogXCJhdXRvXCIsXHJcblx0XHRcdFx0Ym90dG9tOiBcImF1dG9cIixcclxuXHRcdFx0XHRyaWdodDogXCJhdXRvXCJcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRpZiAoX3Bpbk9wdGlvbnMucmVsU2l6ZS53aWR0aCB8fCBfcGluT3B0aW9ucy5yZWxTaXplLmF1dG9GdWxsV2lkdGgpIHtcclxuXHRcdFx0XHRfdXRpbC5jc3MoX3Bpbiwge1xyXG5cdFx0XHRcdFx0Ym94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcclxuXHRcdFx0XHRcdG1vekJveFNpemluZzogXCJib3JkZXItYm94XCIsXHJcblx0XHRcdFx0XHR3ZWJraXRCb3hTaXppbmc6IFwiYm9yZGVyLWJveFwiXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGFkZCBsaXN0ZW5lciB0byBkb2N1bWVudCB0byB1cGRhdGUgcGluIHBvc2l0aW9uIGluIGNhc2UgY29udHJvbGxlciBpcyBub3QgdGhlIGRvY3VtZW50LlxyXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdXBkYXRlUGluSW5Db250YWluZXIpO1xyXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdXBkYXRlUGluSW5Db250YWluZXIpO1xyXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdXBkYXRlUmVsYXRpdmVQaW5TcGFjZXIpO1xyXG5cdFx0XHQvLyBhZGQgbW91c2V3aGVlbCBsaXN0ZW5lciB0byBjYXRjaCBzY3JvbGxzIG92ZXIgZml4ZWQgZWxlbWVudHNcclxuXHRcdFx0X3Bpbi5hZGRFdmVudExpc3RlbmVyKFwibW91c2V3aGVlbFwiLCBvbk1vdXNld2hlZWxPdmVyUGluKTtcclxuXHRcdFx0X3Bpbi5hZGRFdmVudExpc3RlbmVyKFwiRE9NTW91c2VTY3JvbGxcIiwgb25Nb3VzZXdoZWVsT3ZlclBpbik7XHJcblxyXG5cdFx0XHRsb2coMywgXCJhZGRlZCBwaW5cIik7XHJcblxyXG5cdFx0XHQvLyBmaW5hbGx5IHVwZGF0ZSB0aGUgcGluIHRvIGluaXRcclxuXHRcdFx0dXBkYXRlUGluU3RhdGUoKTtcclxuXHJcblx0XHRcdHJldHVybiBTY2VuZTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBSZW1vdmUgdGhlIHBpbiBmcm9tIHRoZSBzY2VuZS5cclxuXHRcdCAqIEBtZXRob2QgU2Nyb2xsTWFnaWMuU2NlbmUjcmVtb3ZlUGluXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gcmVtb3ZlIHRoZSBwaW4gZnJvbSB0aGUgc2NlbmUgd2l0aG91dCByZXNldHRpbmcgaXQgKHRoZSBzcGFjZXIgaXMgbm90IHJlbW92ZWQpXHJcblx0XHQgKiBzY2VuZS5yZW1vdmVQaW4oKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyByZW1vdmUgdGhlIHBpbiBmcm9tIHRoZSBzY2VuZSBhbmQgcmVzZXQgdGhlIHBpbiBlbGVtZW50IHRvIGl0cyBpbml0aWFsIHBvc2l0aW9uIChzcGFjZXIgaXMgcmVtb3ZlZClcclxuXHRcdCAqIHNjZW5lLnJlbW92ZVBpbih0cnVlKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXNldD1mYWxzZV0gLSBJZiBgZmFsc2VgIHRoZSBzcGFjZXIgd2lsbCBub3QgYmUgcmVtb3ZlZCBhbmQgdGhlIGVsZW1lbnQncyBwb3NpdGlvbiB3aWxsIG5vdCBiZSByZXNldC5cclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMucmVtb3ZlUGluID0gZnVuY3Rpb24gKHJlc2V0KSB7XHJcblx0XHRcdGlmIChfcGluKSB7XHJcblx0XHRcdFx0aWYgKF9zdGF0ZSA9PT0gU0NFTkVfU1RBVEVfRFVSSU5HKSB7XHJcblx0XHRcdFx0XHR1cGRhdGVQaW5TdGF0ZSh0cnVlKTsgLy8gZm9yY2UgdW5waW4gYXQgcG9zaXRpb25cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKHJlc2V0IHx8ICFfY29udHJvbGxlcikgeyAvLyBpZiB0aGVyZSdzIG5vIGNvbnRyb2xsZXIgbm8gcHJvZ3Jlc3Mgd2FzIG1hZGUgYW55d2F5Li4uXHJcblx0XHRcdFx0XHR2YXIgcGluVGFyZ2V0ID0gX3Bpbk9wdGlvbnMuc3BhY2VyLmZpcnN0Q2hpbGQ7IC8vIHVzdWFsbHkgdGhlIHBpbiBlbGVtZW50LCBidXQgbWF5IGJlIGFub3RoZXIgc3BhY2VyIChjYXNjYWRlZCBwaW5zKS4uLlxyXG5cdFx0XHRcdFx0aWYgKHBpblRhcmdldC5oYXNBdHRyaWJ1dGUoUElOX1NQQUNFUl9BVFRSSUJVVEUpKSB7IC8vIGNvcHkgbWFyZ2lucyB0byBjaGlsZCBzcGFjZXJcclxuXHRcdFx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRcdFx0c3R5bGUgPSBfcGluT3B0aW9ucy5zcGFjZXIuc3R5bGUsXHJcblx0XHRcdFx0XHRcdFx0dmFsdWVzID0gW1wibWFyZ2luXCIsIFwibWFyZ2luTGVmdFwiLCBcIm1hcmdpblJpZ2h0XCIsIFwibWFyZ2luVG9wXCIsIFwibWFyZ2luQm90dG9tXCJdLFxyXG5cdFx0XHRcdFx0XHRcdG1hcmdpbnMgPSB7fTtcclxuXHRcdFx0XHRcdFx0dmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKHZhbCkge1xyXG5cdFx0XHRcdFx0XHRcdG1hcmdpbnNbdmFsXSA9IHN0eWxlW3ZhbF0gfHwgXCJcIjtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdF91dGlsLmNzcyhwaW5UYXJnZXQsIG1hcmdpbnMpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0X3Bpbk9wdGlvbnMuc3BhY2VyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHBpblRhcmdldCwgX3Bpbk9wdGlvbnMuc3BhY2VyKTtcclxuXHRcdFx0XHRcdF9waW5PcHRpb25zLnNwYWNlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKF9waW5PcHRpb25zLnNwYWNlcik7XHJcblx0XHRcdFx0XHRpZiAoIV9waW4ucGFyZW50Tm9kZS5oYXNBdHRyaWJ1dGUoUElOX1NQQUNFUl9BVFRSSUJVVEUpKSB7IC8vIGlmIGl0J3MgdGhlIGxhc3QgcGluIGZvciB0aGlzIGVsZW1lbnQgLT4gcmVzdG9yZSBpbmxpbmUgc3R5bGVzXHJcblx0XHRcdFx0XHRcdC8vIFRPRE86IG9ubHkgY29ycmVjdGx5IHNldCBmb3IgZmlyc3QgcGluICh3aGVuIGNhc2NhZGluZykgLSBob3cgdG8gZml4P1xyXG5cdFx0XHRcdFx0XHRfdXRpbC5jc3MoX3BpbiwgX3Bpbi5fX19vcmlnU3R5bGUpO1xyXG5cdFx0XHRcdFx0XHRkZWxldGUgX3Bpbi5fX19vcmlnU3R5bGU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB1cGRhdGVQaW5JbkNvbnRhaW5lcik7XHJcblx0XHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHVwZGF0ZVBpbkluQ29udGFpbmVyKTtcclxuXHRcdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdXBkYXRlUmVsYXRpdmVQaW5TcGFjZXIpO1xyXG5cdFx0XHRcdF9waW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNld2hlZWxcIiwgb25Nb3VzZXdoZWVsT3ZlclBpbik7XHJcblx0XHRcdFx0X3Bpbi5yZW1vdmVFdmVudExpc3RlbmVyKFwiRE9NTW91c2VTY3JvbGxcIiwgb25Nb3VzZXdoZWVsT3ZlclBpbik7XHJcblx0XHRcdFx0X3BpbiA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRsb2coMywgXCJyZW1vdmVkIHBpbiAocmVzZXQ6IFwiICsgKHJlc2V0ID8gXCJ0cnVlXCIgOiBcImZhbHNlXCIpICsgXCIpXCIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBTY2VuZTtcclxuXHRcdH07XHJcblxyXG5cclxuXHRcdHZhclxyXG5cdFx0XHRfY3NzQ2xhc3NlcyxcclxuXHRcdFx0X2Nzc0NsYXNzRWxlbXMgPSBbXTtcclxuXHJcblx0XHRTY2VuZVxyXG5cdFx0XHQub24oXCJkZXN0cm95LmludGVybmFsXCIsIGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0U2NlbmUucmVtb3ZlQ2xhc3NUb2dnbGUoZS5yZXNldCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0LyoqXHJcblx0XHQgKiBEZWZpbmUgYSBjc3MgY2xhc3MgbW9kaWZpY2F0aW9uIHdoaWxlIHRoZSBzY2VuZSBpcyBhY3RpdmUuICBcclxuXHRcdCAqIFdoZW4gdGhlIHNjZW5lIHRyaWdnZXJzIHRoZSBjbGFzc2VzIHdpbGwgYmUgYWRkZWQgdG8gdGhlIHN1cHBsaWVkIGVsZW1lbnQgYW5kIHJlbW92ZWQsIHdoZW4gdGhlIHNjZW5lIGlzIG92ZXIuXHJcblx0XHQgKiBJZiB0aGUgc2NlbmUgZHVyYXRpb24gaXMgMCB0aGUgY2xhc3NlcyB3aWxsIG9ubHkgYmUgcmVtb3ZlZCBpZiB0aGUgdXNlciBzY3JvbGxzIGJhY2sgcGFzdCB0aGUgc3RhcnQgcG9zaXRpb24uXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI3NldENsYXNzVG9nZ2xlXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gYWRkIHRoZSBjbGFzcyAnbXljbGFzcycgdG8gdGhlIGVsZW1lbnQgd2l0aCB0aGUgaWQgJ215LWVsZW0nIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIHNjZW5lXHJcblx0XHQgKiBzY2VuZS5zZXRDbGFzc1RvZ2dsZShcIiNteS1lbGVtXCIsIFwibXljbGFzc1wiKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyBhZGQgbXVsdGlwbGUgY2xhc3NlcyB0byBtdWx0aXBsZSBlbGVtZW50cyBkZWZpbmVkIGJ5IHRoZSBzZWxlY3RvciAnLmNsYXNzQ2hhbmdlJ1xyXG5cdFx0ICogc2NlbmUuc2V0Q2xhc3NUb2dnbGUoXCIuY2xhc3NDaGFuZ2VcIiwgXCJjbGFzczEgY2xhc3MyIGNsYXNzM1wiKTtcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0geyhzdHJpbmd8b2JqZWN0KX0gZWxlbWVudCAtIEEgU2VsZWN0b3IgdGFyZ2V0aW5nIG9uZSBvciBtb3JlIGVsZW1lbnRzIG9yIGEgRE9NIG9iamVjdCB0aGF0IGlzIHN1cHBvc2VkIHRvIGJlIG1vZGlmaWVkLlxyXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzZXMgLSBPbmUgb3IgbW9yZSBDbGFzc25hbWVzIChzZXBhcmF0ZWQgYnkgc3BhY2UpIHRoYXQgc2hvdWxkIGJlIGFkZGVkIHRvIHRoZSBlbGVtZW50IGR1cmluZyB0aGUgc2NlbmUuXHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybnMge1NjZW5lfSBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5zZXRDbGFzc1RvZ2dsZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc2VzKSB7XHJcblx0XHRcdHZhciBlbGVtcyA9IF91dGlsLmdldC5lbGVtZW50cyhlbGVtZW50KTtcclxuXHRcdFx0aWYgKGVsZW1zLmxlbmd0aCA9PT0gMCB8fCAhX3V0aWwudHlwZS5TdHJpbmcoY2xhc3NlcykpIHtcclxuXHRcdFx0XHRsb2coMSwgXCJFUlJPUiBjYWxsaW5nIG1ldGhvZCAnc2V0Q2xhc3NUb2dnbGUoKSc6IEludmFsaWQgXCIgKyAoZWxlbXMubGVuZ3RoID09PSAwID8gXCJlbGVtZW50XCIgOiBcImNsYXNzZXNcIikgKyBcIiBzdXBwbGllZC5cIik7XHJcblx0XHRcdFx0cmV0dXJuIFNjZW5lO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChfY3NzQ2xhc3NFbGVtcy5sZW5ndGggPiAwKSB7XHJcblx0XHRcdFx0Ly8gcmVtb3ZlIG9sZCBvbmVzXHJcblx0XHRcdFx0U2NlbmUucmVtb3ZlQ2xhc3NUb2dnbGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRfY3NzQ2xhc3NlcyA9IGNsYXNzZXM7XHJcblx0XHRcdF9jc3NDbGFzc0VsZW1zID0gZWxlbXM7XHJcblx0XHRcdFNjZW5lLm9uKFwiZW50ZXIuaW50ZXJuYWxfY2xhc3MgbGVhdmUuaW50ZXJuYWxfY2xhc3NcIiwgZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0XHR2YXIgdG9nZ2xlID0gZS50eXBlID09PSBcImVudGVyXCIgPyBfdXRpbC5hZGRDbGFzcyA6IF91dGlsLnJlbW92ZUNsYXNzO1xyXG5cdFx0XHRcdF9jc3NDbGFzc0VsZW1zLmZvckVhY2goZnVuY3Rpb24gKGVsZW0sIGtleSkge1xyXG5cdFx0XHRcdFx0dG9nZ2xlKGVsZW0sIF9jc3NDbGFzc2VzKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdHJldHVybiBTY2VuZTtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBSZW1vdmUgdGhlIGNsYXNzIGJpbmRpbmcgZnJvbSB0aGUgc2NlbmUuXHJcblx0XHQgKiBAbWV0aG9kIFNjcm9sbE1hZ2ljLlNjZW5lI3JlbW92ZUNsYXNzVG9nZ2xlXHJcblx0XHQgKiBAZXhhbXBsZVxyXG5cdFx0ICogLy8gcmVtb3ZlIGNsYXNzIGJpbmRpbmcgZnJvbSB0aGUgc2NlbmUgd2l0aG91dCByZXNldFxyXG5cdFx0ICogc2NlbmUucmVtb3ZlQ2xhc3NUb2dnbGUoKTtcclxuXHRcdCAqXHJcblx0XHQgKiAvLyByZW1vdmUgY2xhc3MgYmluZGluZyBhbmQgcmVtb3ZlIHRoZSBjaGFuZ2VzIGl0IGNhdXNlZFxyXG5cdFx0ICogc2NlbmUucmVtb3ZlQ2xhc3NUb2dnbGUodHJ1ZSk7XHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBbcmVzZXQ9ZmFsc2VdIC0gSWYgYGZhbHNlYCBhbmQgdGhlIGNsYXNzZXMgYXJlIGN1cnJlbnRseSBhY3RpdmUsIHRoZXkgd2lsbCByZW1haW4gb24gdGhlIGVsZW1lbnQuIElmIGB0cnVlYCB0aGV5IHdpbGwgYmUgcmVtb3ZlZC5cclxuXHRcdCAqIEByZXR1cm5zIHtTY2VuZX0gUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMucmVtb3ZlQ2xhc3NUb2dnbGUgPSBmdW5jdGlvbiAocmVzZXQpIHtcclxuXHRcdFx0aWYgKHJlc2V0KSB7XHJcblx0XHRcdFx0X2Nzc0NsYXNzRWxlbXMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbSwga2V5KSB7XHJcblx0XHRcdFx0XHRfdXRpbC5yZW1vdmVDbGFzcyhlbGVtLCBfY3NzQ2xhc3Nlcyk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdFx0U2NlbmUub2ZmKFwic3RhcnQuaW50ZXJuYWxfY2xhc3MgZW5kLmludGVybmFsX2NsYXNzXCIpO1xyXG5cdFx0XHRfY3NzQ2xhc3NlcyA9IHVuZGVmaW5lZDtcclxuXHRcdFx0X2Nzc0NsYXNzRWxlbXMgPSBbXTtcclxuXHRcdFx0cmV0dXJuIFNjZW5lO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBJTklUXHJcblx0XHRjb25zdHJ1Y3QoKTtcclxuXHRcdHJldHVybiBTY2VuZTtcclxuXHR9O1xyXG5cclxuXHQvLyBzdG9yZSBwYWdld2lkZSBzY2VuZSBvcHRpb25zXHJcblx0dmFyIFNDRU5FX09QVElPTlMgPSB7XHJcblx0XHRkZWZhdWx0czoge1xyXG5cdFx0XHRkdXJhdGlvbjogMCxcclxuXHRcdFx0b2Zmc2V0OiAwLFxyXG5cdFx0XHR0cmlnZ2VyRWxlbWVudDogdW5kZWZpbmVkLFxyXG5cdFx0XHR0cmlnZ2VySG9vazogMC41LFxyXG5cdFx0XHRyZXZlcnNlOiB0cnVlLFxyXG5cdFx0XHRsb2dsZXZlbDogMlxyXG5cdFx0fSxcclxuXHRcdHZhbGlkYXRlOiB7XHJcblx0XHRcdG9mZnNldDogZnVuY3Rpb24gKHZhbCkge1xyXG5cdFx0XHRcdHZhbCA9IHBhcnNlRmxvYXQodmFsKTtcclxuXHRcdFx0XHRpZiAoIV91dGlsLnR5cGUuTnVtYmVyKHZhbCkpIHtcclxuXHRcdFx0XHRcdHRocm93IFtcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwib2Zmc2V0XFxcIjpcIiwgdmFsXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHZhbDtcclxuXHRcdFx0fSxcclxuXHRcdFx0dHJpZ2dlckVsZW1lbnQ6IGZ1bmN0aW9uICh2YWwpIHtcclxuXHRcdFx0XHR2YWwgPSB2YWwgfHwgdW5kZWZpbmVkO1xyXG5cdFx0XHRcdGlmICh2YWwpIHtcclxuXHRcdFx0XHRcdHZhciBlbGVtID0gX3V0aWwuZ2V0LmVsZW1lbnRzKHZhbClbMF07XHJcblx0XHRcdFx0XHRpZiAoZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUpIHtcclxuXHRcdFx0XHRcdFx0dmFsID0gZWxlbTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHRocm93IFtcIkVsZW1lbnQgZGVmaW5lZCBpbiBvcHRpb24gXFxcInRyaWdnZXJFbGVtZW50XFxcIiB3YXMgbm90IGZvdW5kOlwiLCB2YWxdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdmFsO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHR0cmlnZ2VySG9vazogZnVuY3Rpb24gKHZhbCkge1xyXG5cdFx0XHRcdHZhciB0cmFuc2xhdGUgPSB7XHJcblx0XHRcdFx0XHRcIm9uQ2VudGVyXCI6IDAuNSxcclxuXHRcdFx0XHRcdFwib25FbnRlclwiOiAxLFxyXG5cdFx0XHRcdFx0XCJvbkxlYXZlXCI6IDBcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdGlmIChfdXRpbC50eXBlLk51bWJlcih2YWwpKSB7XHJcblx0XHRcdFx0XHR2YWwgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihwYXJzZUZsb2F0KHZhbCksIDEpKTsgLy8gIG1ha2Ugc3VyZSBpdHMgYmV0d2VlZW4gMCBhbmQgMVxyXG5cdFx0XHRcdH0gZWxzZSBpZiAodmFsIGluIHRyYW5zbGF0ZSkge1xyXG5cdFx0XHRcdFx0dmFsID0gdHJhbnNsYXRlW3ZhbF07XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHRocm93IFtcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwidHJpZ2dlckhvb2tcXFwiOiBcIiwgdmFsXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHZhbDtcclxuXHRcdFx0fSxcclxuXHRcdFx0cmV2ZXJzZTogZnVuY3Rpb24gKHZhbCkge1xyXG5cdFx0XHRcdHJldHVybiAhIXZhbDsgLy8gZm9yY2UgYm9vbGVhblxyXG5cdFx0XHR9LFxyXG5cdFx0XHRsb2dsZXZlbDogZnVuY3Rpb24gKHZhbCkge1xyXG5cdFx0XHRcdHZhbCA9IHBhcnNlSW50KHZhbCk7XHJcblx0XHRcdFx0aWYgKCFfdXRpbC50eXBlLk51bWJlcih2YWwpIHx8IHZhbCA8IDAgfHwgdmFsID4gMykge1xyXG5cdFx0XHRcdFx0dGhyb3cgW1wiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJsb2dsZXZlbFxcXCI6XCIsIHZhbF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB2YWw7XHJcblx0XHRcdH1cclxuXHRcdH0sIC8vIGhvbGRlciBmb3IgIHZhbGlkYXRpb24gbWV0aG9kcy4gZHVyYXRpb24gdmFsaWRhdGlvbiBpcyBoYW5kbGVkIGluICdnZXR0ZXJzLXNldHRlcnMuanMnXHJcblx0XHRzaGlmdHM6IFtcImR1cmF0aW9uXCIsIFwib2Zmc2V0XCIsIFwidHJpZ2dlckhvb2tcIl0sIC8vIGxpc3Qgb2Ygb3B0aW9ucyB0aGF0IHRyaWdnZXIgYSBgc2hpZnRgIGV2ZW50XHJcblx0fTtcclxuXHQvKlxyXG5cdCAqIG1ldGhvZCB1c2VkIHRvIGFkZCBhbiBvcHRpb24gdG8gU2Nyb2xsTWFnaWMgU2NlbmVzLlxyXG5cdCAqIFRPRE86IERPQyAocHJpdmF0ZSBmb3IgZGV2KVxyXG5cdCAqL1xyXG5cdFNjcm9sbE1hZ2ljLlNjZW5lLmFkZE9wdGlvbiA9IGZ1bmN0aW9uIChuYW1lLCBkZWZhdWx0VmFsdWUsIHZhbGlkYXRpb25DYWxsYmFjaywgc2hpZnRzKSB7XHJcblx0XHRpZiAoIShuYW1lIGluIFNDRU5FX09QVElPTlMuZGVmYXVsdHMpKSB7XHJcblx0XHRcdFNDRU5FX09QVElPTlMuZGVmYXVsdHNbbmFtZV0gPSBkZWZhdWx0VmFsdWU7XHJcblx0XHRcdFNDRU5FX09QVElPTlMudmFsaWRhdGVbbmFtZV0gPSB2YWxpZGF0aW9uQ2FsbGJhY2s7XHJcblx0XHRcdGlmIChzaGlmdHMpIHtcclxuXHRcdFx0XHRTQ0VORV9PUFRJT05TLnNoaWZ0cy5wdXNoKG5hbWUpO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRTY3JvbGxNYWdpYy5fdXRpbC5sb2coMSwgXCJbc3RhdGljXSBTY3JvbGxNYWdpYy5TY2VuZSAtPiBDYW5ub3QgYWRkIFNjZW5lIG9wdGlvbiAnXCIgKyBuYW1lICsgXCInLCBiZWNhdXNlIGl0IGFscmVhZHkgZXhpc3RzLlwiKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cdC8vIGluc3RhbmNlIGV4dGVuc2lvbiBmdW5jdGlvbiBmb3IgcGx1Z2luc1xyXG5cdC8vIFRPRE86IERPQyAocHJpdmF0ZSBmb3IgZGV2KVxyXG5cdFNjcm9sbE1hZ2ljLlNjZW5lLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbnNpb24pIHtcclxuXHRcdHZhciBvbGRDbGFzcyA9IHRoaXM7XHJcblx0XHRTY3JvbGxNYWdpYy5TY2VuZSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0b2xkQ2xhc3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHRcdFx0dGhpcy4kc3VwZXIgPSBfdXRpbC5leHRlbmQoe30sIHRoaXMpOyAvLyBjb3B5IHBhcmVudCBzdGF0ZVxyXG5cdFx0XHRyZXR1cm4gZXh0ZW5zaW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuXHRcdH07XHJcblx0XHRfdXRpbC5leHRlbmQoU2Nyb2xsTWFnaWMuU2NlbmUsIG9sZENsYXNzKTsgLy8gY29weSBwcm9wZXJ0aWVzXHJcblx0XHRTY3JvbGxNYWdpYy5TY2VuZS5wcm90b3R5cGUgPSBvbGRDbGFzcy5wcm90b3R5cGU7IC8vIGNvcHkgcHJvdG90eXBlXHJcblx0XHRTY3JvbGxNYWdpYy5TY2VuZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTY3JvbGxNYWdpYy5TY2VuZTsgLy8gcmVzdG9yZSBjb25zdHJ1Y3RvclxyXG5cdH07XHJcblxyXG5cclxuXHJcblx0LyoqXHJcblx0ICogVE9ETzogRE9DUyAocHJpdmF0ZSBmb3IgZGV2KVxyXG5cdCAqIEBjbGFzc1xyXG5cdCAqIEBwcml2YXRlXHJcblx0ICovXHJcblxyXG5cdFNjcm9sbE1hZ2ljLkV2ZW50ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWVzcGFjZSwgdGFyZ2V0LCB2YXJzKSB7XHJcblx0XHR2YXJzID0gdmFycyB8fCB7fTtcclxuXHRcdGZvciAodmFyIGtleSBpbiB2YXJzKSB7XHJcblx0XHRcdHRoaXNba2V5XSA9IHZhcnNba2V5XTtcclxuXHRcdH1cclxuXHRcdHRoaXMudHlwZSA9IHR5cGU7XHJcblx0XHR0aGlzLnRhcmdldCA9IHRoaXMuY3VycmVudFRhcmdldCA9IHRhcmdldDtcclxuXHRcdHRoaXMubmFtZXNwYWNlID0gbmFtZXNwYWNlIHx8ICcnO1xyXG5cdFx0dGhpcy50aW1lU3RhbXAgPSB0aGlzLnRpbWVzdGFtcCA9IERhdGUubm93KCk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cclxuXHQvKlxyXG5cdCAqIFRPRE86IERPQ1MgKHByaXZhdGUgZm9yIGRldilcclxuXHQgKi9cclxuXHJcblx0dmFyIF91dGlsID0gU2Nyb2xsTWFnaWMuX3V0aWwgPSAoZnVuY3Rpb24gKHdpbmRvdykge1xyXG5cdFx0dmFyIFUgPSB7fSxcclxuXHRcdFx0aTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICogaW50ZXJuYWwgaGVscGVyc1xyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKi9cclxuXHJcblx0XHQvLyBwYXJzZSBmbG9hdCBhbmQgZmFsbCBiYWNrIHRvIDAuXHJcblx0XHR2YXIgZmxvYXR2YWwgPSBmdW5jdGlvbiAobnVtYmVyKSB7XHJcblx0XHRcdHJldHVybiBwYXJzZUZsb2F0KG51bWJlcikgfHwgMDtcclxuXHRcdH07XHJcblx0XHQvLyBnZXQgY3VycmVudCBzdHlsZSBJRSBzYWZlIChvdGhlcndpc2UgSUUgd291bGQgcmV0dXJuIGNhbGN1bGF0ZWQgdmFsdWVzIGZvciAnYXV0bycpXHJcblx0XHR2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBmdW5jdGlvbiAoZWxlbSkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5jdXJyZW50U3R5bGUgPyBlbGVtLmN1cnJlbnRTdHlsZSA6IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW0pO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBnZXQgZWxlbWVudCBkaW1lbnNpb24gKHdpZHRoIG9yIGhlaWdodClcclxuXHRcdHZhciBfZGltZW5zaW9uID0gZnVuY3Rpb24gKHdoaWNoLCBlbGVtLCBvdXRlciwgaW5jbHVkZU1hcmdpbikge1xyXG5cdFx0XHRlbGVtID0gKGVsZW0gPT09IGRvY3VtZW50KSA/IHdpbmRvdyA6IGVsZW07XHJcblx0XHRcdGlmIChlbGVtID09PSB3aW5kb3cpIHtcclxuXHRcdFx0XHRpbmNsdWRlTWFyZ2luID0gZmFsc2U7XHJcblx0XHRcdH0gZWxzZSBpZiAoIV90eXBlLkRvbUVsZW1lbnQoZWxlbSkpIHtcclxuXHRcdFx0XHRyZXR1cm4gMDtcclxuXHRcdFx0fVxyXG5cdFx0XHR3aGljaCA9IHdoaWNoLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd2hpY2guc3Vic3RyKDEpLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdHZhciBkaW1lbnNpb24gPSAob3V0ZXIgPyBlbGVtWydvZmZzZXQnICsgd2hpY2hdIHx8IGVsZW1bJ291dGVyJyArIHdoaWNoXSA6IGVsZW1bJ2NsaWVudCcgKyB3aGljaF0gfHwgZWxlbVsnaW5uZXInICsgd2hpY2hdKSB8fCAwO1xyXG5cdFx0XHRpZiAob3V0ZXIgJiYgaW5jbHVkZU1hcmdpbikge1xyXG5cdFx0XHRcdHZhciBzdHlsZSA9IF9nZXRDb21wdXRlZFN0eWxlKGVsZW0pO1xyXG5cdFx0XHRcdGRpbWVuc2lvbiArPSB3aGljaCA9PT0gJ0hlaWdodCcgPyBmbG9hdHZhbChzdHlsZS5tYXJnaW5Ub3ApICsgZmxvYXR2YWwoc3R5bGUubWFyZ2luQm90dG9tKSA6IGZsb2F0dmFsKHN0eWxlLm1hcmdpbkxlZnQpICsgZmxvYXR2YWwoc3R5bGUubWFyZ2luUmlnaHQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBkaW1lbnNpb247XHJcblx0XHR9O1xyXG5cdFx0Ly8gY29udmVydHMgJ21hcmdpbi10b3AnIGludG8gJ21hcmdpblRvcCdcclxuXHRcdHZhciBfY2FtZWxDYXNlID0gZnVuY3Rpb24gKHN0cikge1xyXG5cdFx0XHRyZXR1cm4gc3RyLnJlcGxhY2UoL15bXmEtel0rKFthLXpdKS9nLCAnJDEnKS5yZXBsYWNlKC8tKFthLXpdKS9nLCBmdW5jdGlvbiAoZykge1xyXG5cdFx0XHRcdHJldHVybiBnWzFdLnRvVXBwZXJDYXNlKCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICogZXh0ZXJuYWwgaGVscGVyc1xyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKi9cclxuXHJcblx0XHQvLyBleHRlbmQgb2JqIOKAkyBzYW1lIGFzIGpRdWVyeS5leHRlbmQoe30sIG9iakEsIG9iakIpXHJcblx0XHRVLmV4dGVuZCA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHRcdFx0b2JqID0gb2JqIHx8IHt9O1xyXG5cdFx0XHRmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0aWYgKCFhcmd1bWVudHNbaV0pIHtcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJndW1lbnRzW2ldKSB7XHJcblx0XHRcdFx0XHRpZiAoYXJndW1lbnRzW2ldLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuXHRcdFx0XHRcdFx0b2JqW2tleV0gPSBhcmd1bWVudHNbaV1ba2V5XTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG9iajtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gY2hlY2sgaWYgYSBjc3MgZGlzcGxheSB0eXBlIHJlc3VsdHMgaW4gbWFyZ2luLWNvbGxhcHNlIG9yIG5vdFxyXG5cdFx0VS5pc01hcmdpbkNvbGxhcHNlVHlwZSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuXHRcdFx0cmV0dXJuIFtcImJsb2NrXCIsIFwiZmxleFwiLCBcImxpc3QtaXRlbVwiLCBcInRhYmxlXCIsIFwiLXdlYmtpdC1ib3hcIl0uaW5kZXhPZihzdHIpID4gLTE7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIGltcGxlbWVudGF0aW9uIG9mIHJlcXVlc3RBbmltYXRpb25GcmFtZVxyXG5cdFx0Ly8gYmFzZWQgb24gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcGF1bGlyaXNoLzE1Nzk2NzFcclxuXHRcdHZhclxyXG5cdFx0XHRsYXN0VGltZSA9IDAsXHJcblx0XHRcdHZlbmRvcnMgPSBbJ21zJywgJ21veicsICd3ZWJraXQnLCAnbyddO1xyXG5cdFx0dmFyIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xyXG5cdFx0dmFyIF9jYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcclxuXHRcdC8vIHRyeSB2ZW5kb3IgcHJlZml4ZXMgaWYgdGhlIGFib3ZlIGRvZXNuJ3Qgd29ya1xyXG5cdFx0Zm9yIChpID0gMDsgIV9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgJiYgaSA8IHZlbmRvcnMubGVuZ3RoOyArK2kpIHtcclxuXHRcdFx0X3JlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2ZW5kb3JzW2ldICsgJ1JlcXVlc3RBbmltYXRpb25GcmFtZSddO1xyXG5cdFx0XHRfY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdmVuZG9yc1tpXSArICdDYW5jZWxBbmltYXRpb25GcmFtZSddIHx8IHdpbmRvd1t2ZW5kb3JzW2ldICsgJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSddO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGZhbGxiYWNrc1xyXG5cdFx0aWYgKCFfcmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XHJcblx0XHRcdF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuXHRcdFx0XHR2YXJcclxuXHRcdFx0XHRcdGN1cnJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCksXHJcblx0XHRcdFx0XHR0aW1lVG9DYWxsID0gTWF0aC5tYXgoMCwgMTYgLSAoY3VyclRpbWUgLSBsYXN0VGltZSkpLFxyXG5cdFx0XHRcdFx0aWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRcdGNhbGxiYWNrKGN1cnJUaW1lICsgdGltZVRvQ2FsbCk7XHJcblx0XHRcdFx0XHR9LCB0aW1lVG9DYWxsKTtcclxuXHRcdFx0XHRsYXN0VGltZSA9IGN1cnJUaW1lICsgdGltZVRvQ2FsbDtcclxuXHRcdFx0XHRyZXR1cm4gaWQ7XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblx0XHRpZiAoIV9jYW5jZWxBbmltYXRpb25GcmFtZSkge1xyXG5cdFx0XHRfY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoaWQpIHtcclxuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KGlkKTtcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHRcdFUuckFGID0gX3JlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdyk7XHJcblx0XHRVLmNBRiA9IF9jYW5jZWxBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdyk7XHJcblxyXG5cdFx0dmFyXHJcblx0XHRcdGxvZ2xldmVscyA9IFtcImVycm9yXCIsIFwid2FyblwiLCBcImxvZ1wiXSxcclxuXHRcdFx0Y29uc29sZSA9IHdpbmRvdy5jb25zb2xlIHx8IHt9O1xyXG5cclxuXHRcdGNvbnNvbGUubG9nID0gY29uc29sZS5sb2cgfHwgZnVuY3Rpb24gKCkge307IC8vIG5vIGNvbnNvbGUgbG9nLCB3ZWxsIC0gZG8gbm90aGluZyB0aGVuLi4uXHJcblx0XHQvLyBtYWtlIHN1cmUgbWV0aG9kcyBmb3IgYWxsIGxldmVscyBleGlzdC5cclxuXHRcdGZvciAoaSA9IDA7IGkgPCBsb2dsZXZlbHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIG1ldGhvZCA9IGxvZ2xldmVsc1tpXTtcclxuXHRcdFx0aWYgKCFjb25zb2xlW21ldGhvZF0pIHtcclxuXHRcdFx0XHRjb25zb2xlW21ldGhvZF0gPSBjb25zb2xlLmxvZzsgLy8gcHJlZmVyIC5sb2cgb3ZlciBub3RoaW5nXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdFUubG9nID0gZnVuY3Rpb24gKGxvZ2xldmVsKSB7XHJcblx0XHRcdGlmIChsb2dsZXZlbCA+IGxvZ2xldmVscy5sZW5ndGggfHwgbG9nbGV2ZWwgPD0gMCkgbG9nbGV2ZWwgPSBsb2dsZXZlbHMubGVuZ3RoO1xyXG5cdFx0XHR2YXIgbm93ID0gbmV3IERhdGUoKSxcclxuXHRcdFx0XHR0aW1lID0gKFwiMFwiICsgbm93LmdldEhvdXJzKCkpLnNsaWNlKC0yKSArIFwiOlwiICsgKFwiMFwiICsgbm93LmdldE1pbnV0ZXMoKSkuc2xpY2UoLTIpICsgXCI6XCIgKyAoXCIwXCIgKyBub3cuZ2V0U2Vjb25kcygpKS5zbGljZSgtMikgKyBcIjpcIiArIChcIjAwXCIgKyBub3cuZ2V0TWlsbGlzZWNvbmRzKCkpLnNsaWNlKC0zKSxcclxuXHRcdFx0XHRtZXRob2QgPSBsb2dsZXZlbHNbbG9nbGV2ZWwgLSAxXSxcclxuXHRcdFx0XHRhcmdzID0gQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXHJcblx0XHRcdFx0ZnVuYyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwoY29uc29sZVttZXRob2RdLCBjb25zb2xlKTtcclxuXHRcdFx0YXJncy51bnNoaWZ0KHRpbWUpO1xyXG5cdFx0XHRmdW5jLmFwcGx5KGNvbnNvbGUsIGFyZ3MpO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0ICogdHlwZSB0ZXN0aW5nXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqL1xyXG5cclxuXHRcdHZhciBfdHlwZSA9IFUudHlwZSA9IGZ1bmN0aW9uICh2KSB7XHJcblx0XHRcdHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodikucmVwbGFjZSgvXlxcW29iamVjdCAoLispXFxdJC8sIFwiJDFcIikudG9Mb3dlckNhc2UoKTtcclxuXHRcdH07XHJcblx0XHRfdHlwZS5TdHJpbmcgPSBmdW5jdGlvbiAodikge1xyXG5cdFx0XHRyZXR1cm4gX3R5cGUodikgPT09ICdzdHJpbmcnO1xyXG5cdFx0fTtcclxuXHRcdF90eXBlLkZ1bmN0aW9uID0gZnVuY3Rpb24gKHYpIHtcclxuXHRcdFx0cmV0dXJuIF90eXBlKHYpID09PSAnZnVuY3Rpb24nO1xyXG5cdFx0fTtcclxuXHRcdF90eXBlLkFycmF5ID0gZnVuY3Rpb24gKHYpIHtcclxuXHRcdFx0cmV0dXJuIEFycmF5LmlzQXJyYXkodik7XHJcblx0XHR9O1xyXG5cdFx0X3R5cGUuTnVtYmVyID0gZnVuY3Rpb24gKHYpIHtcclxuXHRcdFx0cmV0dXJuICFfdHlwZS5BcnJheSh2KSAmJiAodiAtIHBhcnNlRmxvYXQodikgKyAxKSA+PSAwO1xyXG5cdFx0fTtcclxuXHRcdF90eXBlLkRvbUVsZW1lbnQgPSBmdW5jdGlvbiAobykge1xyXG5cdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdHR5cGVvZiBIVE1MRWxlbWVudCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgSFRNTEVsZW1lbnQgPT09IFwiZnVuY3Rpb25cIiA/IG8gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCB8fCBvIGluc3RhbmNlb2YgU1ZHRWxlbWVudCA6IC8vRE9NMlxyXG5cdFx0XHRcdG8gJiYgdHlwZW9mIG8gPT09IFwib2JqZWN0XCIgJiYgbyAhPT0gbnVsbCAmJiBvLm5vZGVUeXBlID09PSAxICYmIHR5cGVvZiBvLm5vZGVOYW1lID09PSBcInN0cmluZ1wiXHJcblx0XHRcdCk7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKiBET00gRWxlbWVudCBpbmZvXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqL1xyXG5cdFx0Ly8gYWx3YXlzIHJldHVybnMgYSBsaXN0IG9mIG1hdGNoaW5nIERPTSBlbGVtZW50cywgZnJvbSBhIHNlbGVjdG9yLCBhIERPTSBlbGVtZW50IG9yIGFuIGxpc3Qgb2YgZWxlbWVudHMgb3IgZXZlbiBhbiBhcnJheSBvZiBzZWxlY3RvcnNcclxuXHRcdHZhciBfZ2V0ID0gVS5nZXQgPSB7fTtcclxuXHRcdF9nZXQuZWxlbWVudHMgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcclxuXHRcdFx0dmFyIGFyciA9IFtdO1xyXG5cdFx0XHRpZiAoX3R5cGUuU3RyaW5nKHNlbGVjdG9yKSkge1xyXG5cdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRzZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xyXG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHsgLy8gaW52YWxpZCBzZWxlY3RvclxyXG5cdFx0XHRcdFx0cmV0dXJuIGFycjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKF90eXBlKHNlbGVjdG9yKSA9PT0gJ25vZGVsaXN0JyB8fCBfdHlwZS5BcnJheShzZWxlY3RvcikgfHwgc2VsZWN0b3IgaW5zdGFuY2VvZiBOb2RlTGlzdCkge1xyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCByZWYgPSBhcnIubGVuZ3RoID0gc2VsZWN0b3IubGVuZ3RoOyBpIDwgcmVmOyBpKyspIHsgLy8gbGlzdCBvZiBlbGVtZW50c1xyXG5cdFx0XHRcdFx0dmFyIGVsZW0gPSBzZWxlY3RvcltpXTtcclxuXHRcdFx0XHRcdGFycltpXSA9IF90eXBlLkRvbUVsZW1lbnQoZWxlbSkgPyBlbGVtIDogX2dldC5lbGVtZW50cyhlbGVtKTsgLy8gaWYgbm90IGFuIGVsZW1lbnQsIHRyeSB0byByZXNvbHZlIHJlY3Vyc2l2ZWx5XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKF90eXBlLkRvbUVsZW1lbnQoc2VsZWN0b3IpIHx8IHNlbGVjdG9yID09PSBkb2N1bWVudCB8fCBzZWxlY3RvciA9PT0gd2luZG93KSB7XHJcblx0XHRcdFx0YXJyID0gW3NlbGVjdG9yXTsgLy8gb25seSB0aGUgZWxlbWVudFxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBhcnI7XHJcblx0XHR9O1xyXG5cdFx0Ly8gZ2V0IHNjcm9sbCB0b3AgdmFsdWVcclxuXHRcdF9nZXQuc2Nyb2xsVG9wID0gZnVuY3Rpb24gKGVsZW0pIHtcclxuXHRcdFx0cmV0dXJuIChlbGVtICYmIHR5cGVvZiBlbGVtLnNjcm9sbFRvcCA9PT0gJ251bWJlcicpID8gZWxlbS5zY3JvbGxUb3AgOiB3aW5kb3cucGFnZVlPZmZzZXQgfHwgMDtcclxuXHRcdH07XHJcblx0XHQvLyBnZXQgc2Nyb2xsIGxlZnQgdmFsdWVcclxuXHRcdF9nZXQuc2Nyb2xsTGVmdCA9IGZ1bmN0aW9uIChlbGVtKSB7XHJcblx0XHRcdHJldHVybiAoZWxlbSAmJiB0eXBlb2YgZWxlbS5zY3JvbGxMZWZ0ID09PSAnbnVtYmVyJykgPyBlbGVtLnNjcm9sbExlZnQgOiB3aW5kb3cucGFnZVhPZmZzZXQgfHwgMDtcclxuXHRcdH07XHJcblx0XHQvLyBnZXQgZWxlbWVudCBoZWlnaHRcclxuXHRcdF9nZXQud2lkdGggPSBmdW5jdGlvbiAoZWxlbSwgb3V0ZXIsIGluY2x1ZGVNYXJnaW4pIHtcclxuXHRcdFx0cmV0dXJuIF9kaW1lbnNpb24oJ3dpZHRoJywgZWxlbSwgb3V0ZXIsIGluY2x1ZGVNYXJnaW4pO1xyXG5cdFx0fTtcclxuXHRcdC8vIGdldCBlbGVtZW50IHdpZHRoXHJcblx0XHRfZ2V0LmhlaWdodCA9IGZ1bmN0aW9uIChlbGVtLCBvdXRlciwgaW5jbHVkZU1hcmdpbikge1xyXG5cdFx0XHRyZXR1cm4gX2RpbWVuc2lvbignaGVpZ2h0JywgZWxlbSwgb3V0ZXIsIGluY2x1ZGVNYXJnaW4pO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBnZXQgZWxlbWVudCBwb3NpdGlvbiAob3B0aW9uYWxseSByZWxhdGl2ZSB0byB2aWV3cG9ydClcclxuXHRcdF9nZXQub2Zmc2V0ID0gZnVuY3Rpb24gKGVsZW0sIHJlbGF0aXZlVG9WaWV3cG9ydCkge1xyXG5cdFx0XHR2YXIgb2Zmc2V0ID0ge1xyXG5cdFx0XHRcdHRvcDogMCxcclxuXHRcdFx0XHRsZWZ0OiAwXHJcblx0XHRcdH07XHJcblx0XHRcdGlmIChlbGVtICYmIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSB7IC8vIGNoZWNrIGlmIGF2YWlsYWJsZVxyXG5cdFx0XHRcdHZhciByZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHRcdFx0XHRvZmZzZXQudG9wID0gcmVjdC50b3A7XHJcblx0XHRcdFx0b2Zmc2V0LmxlZnQgPSByZWN0LmxlZnQ7XHJcblx0XHRcdFx0aWYgKCFyZWxhdGl2ZVRvVmlld3BvcnQpIHsgLy8gY2xpZW50UmVjdCBpcyBieSBkZWZhdWx0IHJlbGF0aXZlIHRvIHZpZXdwb3J0Li4uXHJcblx0XHRcdFx0XHRvZmZzZXQudG9wICs9IF9nZXQuc2Nyb2xsVG9wKCk7XHJcblx0XHRcdFx0XHRvZmZzZXQubGVmdCArPSBfZ2V0LnNjcm9sbExlZnQoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG9mZnNldDtcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdCAqIERPTSBFbGVtZW50IG1hbmlwdWxhdGlvblxyXG5cdFx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQgKi9cclxuXHJcblx0XHRVLmFkZENsYXNzID0gZnVuY3Rpb24gKGVsZW0sIGNsYXNzbmFtZSkge1xyXG5cdFx0XHRpZiAoY2xhc3NuYW1lKSB7XHJcblx0XHRcdFx0aWYgKGVsZW0uY2xhc3NMaXN0KVxyXG5cdFx0XHRcdFx0ZWxlbS5jbGFzc0xpc3QuYWRkKGNsYXNzbmFtZSk7XHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0ZWxlbS5jbGFzc05hbWUgKz0gJyAnICsgY2xhc3NuYW1lO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdFx0VS5yZW1vdmVDbGFzcyA9IGZ1bmN0aW9uIChlbGVtLCBjbGFzc25hbWUpIHtcclxuXHRcdFx0aWYgKGNsYXNzbmFtZSkge1xyXG5cdFx0XHRcdGlmIChlbGVtLmNsYXNzTGlzdClcclxuXHRcdFx0XHRcdGVsZW0uY2xhc3NMaXN0LnJlbW92ZShjbGFzc25hbWUpO1xyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdGVsZW0uY2xhc3NOYW1lID0gZWxlbS5jbGFzc05hbWUucmVwbGFjZShuZXcgUmVnRXhwKCcoXnxcXFxcYiknICsgY2xhc3NuYW1lLnNwbGl0KCcgJykuam9pbignfCcpICsgJyhcXFxcYnwkKScsICdnaScpLCAnICcpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdFx0Ly8gaWYgb3B0aW9ucyBpcyBzdHJpbmcgLT4gcmV0dXJucyBjc3MgdmFsdWVcclxuXHRcdC8vIGlmIG9wdGlvbnMgaXMgYXJyYXkgLT4gcmV0dXJucyBvYmplY3Qgd2l0aCBjc3MgdmFsdWUgcGFpcnNcclxuXHRcdC8vIGlmIG9wdGlvbnMgaXMgb2JqZWN0IC0+IHNldCBuZXcgY3NzIHZhbHVlc1xyXG5cdFx0VS5jc3MgPSBmdW5jdGlvbiAoZWxlbSwgb3B0aW9ucykge1xyXG5cdFx0XHRpZiAoX3R5cGUuU3RyaW5nKG9wdGlvbnMpKSB7XHJcblx0XHRcdFx0cmV0dXJuIF9nZXRDb21wdXRlZFN0eWxlKGVsZW0pW19jYW1lbENhc2Uob3B0aW9ucyldO1xyXG5cdFx0XHR9IGVsc2UgaWYgKF90eXBlLkFycmF5KG9wdGlvbnMpKSB7XHJcblx0XHRcdFx0dmFyXHJcblx0XHRcdFx0XHRvYmogPSB7fSxcclxuXHRcdFx0XHRcdHN0eWxlID0gX2dldENvbXB1dGVkU3R5bGUoZWxlbSk7XHJcblx0XHRcdFx0b3B0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb24sIGtleSkge1xyXG5cdFx0XHRcdFx0b2JqW29wdGlvbl0gPSBzdHlsZVtfY2FtZWxDYXNlKG9wdGlvbildO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHJldHVybiBvYmo7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Zm9yICh2YXIgb3B0aW9uIGluIG9wdGlvbnMpIHtcclxuXHRcdFx0XHRcdHZhciB2YWwgPSBvcHRpb25zW29wdGlvbl07XHJcblx0XHRcdFx0XHRpZiAodmFsID09IHBhcnNlRmxvYXQodmFsKSkgeyAvLyBhc3N1bWUgcGl4ZWwgZm9yIHNlZW1pbmdseSBudW1lcmljYWwgdmFsdWVzXHJcblx0XHRcdFx0XHRcdHZhbCArPSAncHgnO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxlbS5zdHlsZVtfY2FtZWxDYXNlKG9wdGlvbildID0gdmFsO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHRyZXR1cm4gVTtcclxuXHR9KHdpbmRvdyB8fCB7fSkpO1xyXG5cclxuXHJcblx0U2Nyb2xsTWFnaWMuU2NlbmUucHJvdG90eXBlLmFkZEluZGljYXRvcnMgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRTY3JvbGxNYWdpYy5fdXRpbC5sb2coMSwgJyhTY3JvbGxNYWdpYy5TY2VuZSkgLT4gRVJST1IgY2FsbGluZyBhZGRJbmRpY2F0b3JzKCkgZHVlIHRvIG1pc3NpbmcgUGx1Z2luIFxcJ2RlYnVnLmFkZEluZGljYXRvcnNcXCcuIFBsZWFzZSBtYWtlIHN1cmUgdG8gaW5jbHVkZSBwbHVnaW5zL2RlYnVnLmFkZEluZGljYXRvcnMuanMnKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRTY3JvbGxNYWdpYy5TY2VuZS5wcm90b3R5cGUucmVtb3ZlSW5kaWNhdG9ycyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFNjcm9sbE1hZ2ljLl91dGlsLmxvZygxLCAnKFNjcm9sbE1hZ2ljLlNjZW5lKSAtPiBFUlJPUiBjYWxsaW5nIHJlbW92ZUluZGljYXRvcnMoKSBkdWUgdG8gbWlzc2luZyBQbHVnaW4gXFwnZGVidWcuYWRkSW5kaWNhdG9yc1xcJy4gUGxlYXNlIG1ha2Ugc3VyZSB0byBpbmNsdWRlIHBsdWdpbnMvZGVidWcuYWRkSW5kaWNhdG9ycy5qcycpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdFNjcm9sbE1hZ2ljLlNjZW5lLnByb3RvdHlwZS5zZXRUd2VlbiA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFNjcm9sbE1hZ2ljLl91dGlsLmxvZygxLCAnKFNjcm9sbE1hZ2ljLlNjZW5lKSAtPiBFUlJPUiBjYWxsaW5nIHNldFR3ZWVuKCkgZHVlIHRvIG1pc3NpbmcgUGx1Z2luIFxcJ2FuaW1hdGlvbi5nc2FwXFwnLiBQbGVhc2UgbWFrZSBzdXJlIHRvIGluY2x1ZGUgcGx1Z2lucy9hbmltYXRpb24uZ3NhcC5qcycpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdFNjcm9sbE1hZ2ljLlNjZW5lLnByb3RvdHlwZS5yZW1vdmVUd2VlbiA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFNjcm9sbE1hZ2ljLl91dGlsLmxvZygxLCAnKFNjcm9sbE1hZ2ljLlNjZW5lKSAtPiBFUlJPUiBjYWxsaW5nIHJlbW92ZVR3ZWVuKCkgZHVlIHRvIG1pc3NpbmcgUGx1Z2luIFxcJ2FuaW1hdGlvbi5nc2FwXFwnLiBQbGVhc2UgbWFrZSBzdXJlIHRvIGluY2x1ZGUgcGx1Z2lucy9hbmltYXRpb24uZ3NhcC5qcycpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdFNjcm9sbE1hZ2ljLlNjZW5lLnByb3RvdHlwZS5zZXRWZWxvY2l0eSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFNjcm9sbE1hZ2ljLl91dGlsLmxvZygxLCAnKFNjcm9sbE1hZ2ljLlNjZW5lKSAtPiBFUlJPUiBjYWxsaW5nIHNldFZlbG9jaXR5KCkgZHVlIHRvIG1pc3NpbmcgUGx1Z2luIFxcJ2FuaW1hdGlvbi52ZWxvY2l0eVxcJy4gUGxlYXNlIG1ha2Ugc3VyZSB0byBpbmNsdWRlIHBsdWdpbnMvYW5pbWF0aW9uLnZlbG9jaXR5LmpzJyk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0U2Nyb2xsTWFnaWMuU2NlbmUucHJvdG90eXBlLnJlbW92ZVZlbG9jaXR5ID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0U2Nyb2xsTWFnaWMuX3V0aWwubG9nKDEsICcoU2Nyb2xsTWFnaWMuU2NlbmUpIC0+IEVSUk9SIGNhbGxpbmcgcmVtb3ZlVmVsb2NpdHkoKSBkdWUgdG8gbWlzc2luZyBQbHVnaW4gXFwnYW5pbWF0aW9uLnZlbG9jaXR5XFwnLiBQbGVhc2UgbWFrZSBzdXJlIHRvIGluY2x1ZGUgcGx1Z2lucy9hbmltYXRpb24udmVsb2NpdHkuanMnKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIFNjcm9sbE1hZ2ljO1xyXG59KSk7IiwiLyohXG4gICogQm9vdHN0cmFwIHY0LjMuMSAoaHR0cHM6Ly9nZXRib290c3RyYXAuY29tLylcbiAgKiBDb3B5cmlnaHQgMjAxMS0yMDE5IFRoZSBCb290c3RyYXAgQXV0aG9ycyAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2dyYXBocy9jb250cmlidXRvcnMpXG4gICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAgKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgnanF1ZXJ5JyksIHJlcXVpcmUoJ3BvcHBlci5qcycpKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnLCAnanF1ZXJ5JywgJ3BvcHBlci5qcyddLCBmYWN0b3J5KSA6XG4gIChnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZmFjdG9yeShnbG9iYWwuYm9vdHN0cmFwID0ge30sIGdsb2JhbC5qUXVlcnksIGdsb2JhbC5Qb3BwZXIpKTtcbn0odGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsICQsIFBvcHBlcikgeyAndXNlIHN0cmljdCc7XG5cbiAgJCA9ICQgJiYgJC5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gJFsnZGVmYXVsdCddIDogJDtcbiAgUG9wcGVyID0gUG9wcGVyICYmIFBvcHBlci5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gUG9wcGVyWydkZWZhdWx0J10gOiBQb3BwZXI7XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgICB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG5cbiAgICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7XG4gICAgICAgIH0pKTtcbiAgICAgIH1cblxuICAgICAgb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuMy4xKTogdXRpbC5qc1xuICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBQcml2YXRlIFRyYW5zaXRpb25FbmQgSGVscGVyc1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIFRSQU5TSVRJT05fRU5EID0gJ3RyYW5zaXRpb25lbmQnO1xuICB2YXIgTUFYX1VJRCA9IDEwMDAwMDA7XG4gIHZhciBNSUxMSVNFQ09ORFNfTVVMVElQTElFUiA9IDEwMDA7IC8vIFNob3V0b3V0IEFuZ3VzQ3JvbGwgKGh0dHBzOi8vZ29vLmdsL3B4d1FHcClcblxuICBmdW5jdGlvbiB0b1R5cGUob2JqKSB7XG4gICAgcmV0dXJuIHt9LnRvU3RyaW5nLmNhbGwob2JqKS5tYXRjaCgvXFxzKFthLXpdKykvaSlbMV0udG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNwZWNpYWxUcmFuc2l0aW9uRW5kRXZlbnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJpbmRUeXBlOiBUUkFOU0lUSU9OX0VORCxcbiAgICAgIGRlbGVnYXRlVHlwZTogVFJBTlNJVElPTl9FTkQsXG4gICAgICBoYW5kbGU6IGZ1bmN0aW9uIGhhbmRsZShldmVudCkge1xuICAgICAgICBpZiAoJChldmVudC50YXJnZXQpLmlzKHRoaXMpKSB7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmaW5lZFxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kRW11bGF0b3IoZHVyYXRpb24pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICAgICQodGhpcykub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgICBVdGlsLnRyaWdnZXJUcmFuc2l0aW9uRW5kKF90aGlzKTtcbiAgICAgIH1cbiAgICB9LCBkdXJhdGlvbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uRW5kU3VwcG9ydCgpIHtcbiAgICAkLmZuLmVtdWxhdGVUcmFuc2l0aW9uRW5kID0gdHJhbnNpdGlvbkVuZEVtdWxhdG9yO1xuICAgICQuZXZlbnQuc3BlY2lhbFtVdGlsLlRSQU5TSVRJT05fRU5EXSA9IGdldFNwZWNpYWxUcmFuc2l0aW9uRW5kRXZlbnQoKTtcbiAgfVxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogUHVibGljIFV0aWwgQXBpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgdmFyIFV0aWwgPSB7XG4gICAgVFJBTlNJVElPTl9FTkQ6ICdic1RyYW5zaXRpb25FbmQnLFxuICAgIGdldFVJRDogZnVuY3Rpb24gZ2V0VUlEKHByZWZpeCkge1xuICAgICAgZG8ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgICAgICBwcmVmaXggKz0gfn4oTWF0aC5yYW5kb20oKSAqIE1BWF9VSUQpOyAvLyBcIn5+XCIgYWN0cyBsaWtlIGEgZmFzdGVyIE1hdGguZmxvb3IoKSBoZXJlXG4gICAgICB9IHdoaWxlIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcmVmaXgpKTtcblxuICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICB9LFxuICAgIGdldFNlbGVjdG9yRnJvbUVsZW1lbnQ6IGZ1bmN0aW9uIGdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIHNlbGVjdG9yID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFyZ2V0Jyk7XG5cbiAgICAgIGlmICghc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09ICcjJykge1xuICAgICAgICB2YXIgaHJlZkF0dHIgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuICAgICAgICBzZWxlY3RvciA9IGhyZWZBdHRyICYmIGhyZWZBdHRyICE9PSAnIycgPyBocmVmQXR0ci50cmltKCkgOiAnJztcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpID8gc2VsZWN0b3IgOiBudWxsO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQ6IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0gLy8gR2V0IHRyYW5zaXRpb24tZHVyYXRpb24gb2YgdGhlIGVsZW1lbnRcblxuXG4gICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gJChlbGVtZW50KS5jc3MoJ3RyYW5zaXRpb24tZHVyYXRpb24nKTtcbiAgICAgIHZhciB0cmFuc2l0aW9uRGVsYXkgPSAkKGVsZW1lbnQpLmNzcygndHJhbnNpdGlvbi1kZWxheScpO1xuICAgICAgdmFyIGZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uID0gcGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgdmFyIGZsb2F0VHJhbnNpdGlvbkRlbGF5ID0gcGFyc2VGbG9hdCh0cmFuc2l0aW9uRGVsYXkpOyAvLyBSZXR1cm4gMCBpZiBlbGVtZW50IG9yIHRyYW5zaXRpb24gZHVyYXRpb24gaXMgbm90IGZvdW5kXG5cbiAgICAgIGlmICghZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24gJiYgIWZsb2F0VHJhbnNpdGlvbkRlbGF5KSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfSAvLyBJZiBtdWx0aXBsZSBkdXJhdGlvbnMgYXJlIGRlZmluZWQsIHRha2UgdGhlIGZpcnN0XG5cblxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uLnNwbGl0KCcsJylbMF07XG4gICAgICB0cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXkuc3BsaXQoJywnKVswXTtcbiAgICAgIHJldHVybiAocGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pICsgcGFyc2VGbG9hdCh0cmFuc2l0aW9uRGVsYXkpKSAqIE1JTExJU0VDT05EU19NVUxUSVBMSUVSO1xuICAgIH0sXG4gICAgcmVmbG93OiBmdW5jdGlvbiByZWZsb3coZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgIH0sXG4gICAgdHJpZ2dlclRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIHRyaWdnZXJUcmFuc2l0aW9uRW5kKGVsZW1lbnQpIHtcbiAgICAgICQoZWxlbWVudCkudHJpZ2dlcihUUkFOU0lUSU9OX0VORCk7XG4gICAgfSxcbiAgICAvLyBUT0RPOiBSZW1vdmUgaW4gdjVcbiAgICBzdXBwb3J0c1RyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIHN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKFRSQU5TSVRJT05fRU5EKTtcbiAgICB9LFxuICAgIGlzRWxlbWVudDogZnVuY3Rpb24gaXNFbGVtZW50KG9iaikge1xuICAgICAgcmV0dXJuIChvYmpbMF0gfHwgb2JqKS5ub2RlVHlwZTtcbiAgICB9LFxuICAgIHR5cGVDaGVja0NvbmZpZzogZnVuY3Rpb24gdHlwZUNoZWNrQ29uZmlnKGNvbXBvbmVudE5hbWUsIGNvbmZpZywgY29uZmlnVHlwZXMpIHtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIGNvbmZpZ1R5cGVzKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29uZmlnVHlwZXMsIHByb3BlcnR5KSkge1xuICAgICAgICAgIHZhciBleHBlY3RlZFR5cGVzID0gY29uZmlnVHlwZXNbcHJvcGVydHldO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGNvbmZpZ1twcm9wZXJ0eV07XG4gICAgICAgICAgdmFyIHZhbHVlVHlwZSA9IHZhbHVlICYmIFV0aWwuaXNFbGVtZW50KHZhbHVlKSA/ICdlbGVtZW50JyA6IHRvVHlwZSh2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAoIW5ldyBSZWdFeHAoZXhwZWN0ZWRUeXBlcykudGVzdCh2YWx1ZVR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoY29tcG9uZW50TmFtZS50b1VwcGVyQ2FzZSgpICsgXCI6IFwiICsgKFwiT3B0aW9uIFxcXCJcIiArIHByb3BlcnR5ICsgXCJcXFwiIHByb3ZpZGVkIHR5cGUgXFxcIlwiICsgdmFsdWVUeXBlICsgXCJcXFwiIFwiKSArIChcImJ1dCBleHBlY3RlZCB0eXBlIFxcXCJcIiArIGV4cGVjdGVkVHlwZXMgKyBcIlxcXCIuXCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGZpbmRTaGFkb3dSb290OiBmdW5jdGlvbiBmaW5kU2hhZG93Um9vdChlbGVtZW50KSB7XG4gICAgICBpZiAoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hdHRhY2hTaGFkb3cpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IC8vIENhbiBmaW5kIHRoZSBzaGFkb3cgcm9vdCBvdGhlcndpc2UgaXQnbGwgcmV0dXJuIHRoZSBkb2N1bWVudFxuXG5cbiAgICAgIGlmICh0eXBlb2YgZWxlbWVudC5nZXRSb290Tm9kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgcm9vdCA9IGVsZW1lbnQuZ2V0Um9vdE5vZGUoKTtcbiAgICAgICAgcmV0dXJuIHJvb3QgaW5zdGFuY2VvZiBTaGFkb3dSb290ID8gcm9vdCA6IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgU2hhZG93Um9vdCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH0gLy8gd2hlbiB3ZSBkb24ndCBmaW5kIGEgc2hhZG93IHJvb3RcblxuXG4gICAgICBpZiAoIWVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFV0aWwuZmluZFNoYWRvd1Jvb3QoZWxlbWVudC5wYXJlbnROb2RlKTtcbiAgICB9XG4gIH07XG4gIHNldFRyYW5zaXRpb25FbmRTdXBwb3J0KCk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FID0gJ2FsZXJ0JztcbiAgdmFyIFZFUlNJT04gPSAnNC4zLjEnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMuYWxlcnQnO1xuICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcbiAgdmFyIFNlbGVjdG9yID0ge1xuICAgIERJU01JU1M6ICdbZGF0YS1kaXNtaXNzPVwiYWxlcnRcIl0nXG4gIH07XG4gIHZhciBFdmVudCA9IHtcbiAgICBDTE9TRTogXCJjbG9zZVwiICsgRVZFTlRfS0VZLFxuICAgIENMT1NFRDogXCJjbG9zZWRcIiArIEVWRU5UX0tFWSxcbiAgICBDTElDS19EQVRBX0FQSTogXCJjbGlja1wiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG4gIH07XG4gIHZhciBDbGFzc05hbWUgPSB7XG4gICAgQUxFUlQ6ICdhbGVydCcsXG4gICAgRkFERTogJ2ZhZGUnLFxuICAgIFNIT1c6ICdzaG93J1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBBbGVydCA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFsZXJ0KGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gQWxlcnQucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLmNsb3NlID0gZnVuY3Rpb24gY2xvc2UoZWxlbWVudCkge1xuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gdGhpcy5fZWxlbWVudDtcblxuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgcm9vdEVsZW1lbnQgPSB0aGlzLl9nZXRSb290RWxlbWVudChlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1c3RvbUV2ZW50ID0gdGhpcy5fdHJpZ2dlckNsb3NlRXZlbnQocm9vdEVsZW1lbnQpO1xuXG4gICAgICBpZiAoY3VzdG9tRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZW1vdmVFbGVtZW50KHJvb3RFbGVtZW50KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgIH0gLy8gUHJpdmF0ZVxuICAgIDtcblxuICAgIF9wcm90by5fZ2V0Um9vdEVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0Um9vdEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgdmFyIHBhcmVudCA9IGZhbHNlO1xuXG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB9XG5cbiAgICAgIGlmICghcGFyZW50KSB7XG4gICAgICAgIHBhcmVudCA9ICQoZWxlbWVudCkuY2xvc2VzdChcIi5cIiArIENsYXNzTmFtZS5BTEVSVClbMF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fdHJpZ2dlckNsb3NlRXZlbnQgPSBmdW5jdGlvbiBfdHJpZ2dlckNsb3NlRXZlbnQoZWxlbWVudCkge1xuICAgICAgdmFyIGNsb3NlRXZlbnQgPSAkLkV2ZW50KEV2ZW50LkNMT1NFKTtcbiAgICAgICQoZWxlbWVudCkudHJpZ2dlcihjbG9zZUV2ZW50KTtcbiAgICAgIHJldHVybiBjbG9zZUV2ZW50O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3JlbW92ZUVsZW1lbnQgPSBmdW5jdGlvbiBfcmVtb3ZlRWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAkKGVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgaWYgKCEkKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgICB0aGlzLl9kZXN0cm95RWxlbWVudChlbGVtZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgJChlbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5fZGVzdHJveUVsZW1lbnQoZWxlbWVudCwgZXZlbnQpO1xuICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9kZXN0cm95RWxlbWVudCA9IGZ1bmN0aW9uIF9kZXN0cm95RWxlbWVudChlbGVtZW50KSB7XG4gICAgICAkKGVsZW1lbnQpLmRldGFjaCgpLnRyaWdnZXIoRXZlbnQuQ0xPU0VEKS5yZW1vdmUoKTtcbiAgICB9IC8vIFN0YXRpY1xuICAgIDtcblxuICAgIEFsZXJ0Ll9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkZWxlbWVudCA9ICQodGhpcyk7XG4gICAgICAgIHZhciBkYXRhID0gJGVsZW1lbnQuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBBbGVydCh0aGlzKTtcbiAgICAgICAgICAkZWxlbWVudC5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcgPT09ICdjbG9zZScpIHtcbiAgICAgICAgICBkYXRhW2NvbmZpZ10odGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBBbGVydC5faGFuZGxlRGlzbWlzcyA9IGZ1bmN0aW9uIF9oYW5kbGVEaXNtaXNzKGFsZXJ0SW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFsZXJ0SW5zdGFuY2UuY2xvc2UodGhpcyk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQWxlcnQsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBBbGVydDtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5ESVNNSVNTLCBBbGVydC5faGFuZGxlRGlzbWlzcyhuZXcgQWxlcnQoKSkpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FXSA9IEFsZXJ0Ll9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBBbGVydDtcblxuICAkLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICByZXR1cm4gQWxlcnQuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUkMSA9ICdidXR0b24nO1xuICB2YXIgVkVSU0lPTiQxID0gJzQuMy4xJztcbiAgdmFyIERBVEFfS0VZJDEgPSAnYnMuYnV0dG9uJztcbiAgdmFyIEVWRU5UX0tFWSQxID0gXCIuXCIgKyBEQVRBX0tFWSQxO1xuICB2YXIgREFUQV9BUElfS0VZJDEgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCQxID0gJC5mbltOQU1FJDFdO1xuICB2YXIgQ2xhc3NOYW1lJDEgPSB7XG4gICAgQUNUSVZFOiAnYWN0aXZlJyxcbiAgICBCVVRUT046ICdidG4nLFxuICAgIEZPQ1VTOiAnZm9jdXMnXG4gIH07XG4gIHZhciBTZWxlY3RvciQxID0ge1xuICAgIERBVEFfVE9HR0xFX0NBUlJPVDogJ1tkYXRhLXRvZ2dsZV49XCJidXR0b25cIl0nLFxuICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwiYnV0dG9uc1wiXScsXG4gICAgSU5QVVQ6ICdpbnB1dDpub3QoW3R5cGU9XCJoaWRkZW5cIl0pJyxcbiAgICBBQ1RJVkU6ICcuYWN0aXZlJyxcbiAgICBCVVRUT046ICcuYnRuJ1xuICB9O1xuICB2YXIgRXZlbnQkMSA9IHtcbiAgICBDTElDS19EQVRBX0FQSTogXCJjbGlja1wiICsgRVZFTlRfS0VZJDEgKyBEQVRBX0FQSV9LRVkkMSxcbiAgICBGT0NVU19CTFVSX0RBVEFfQVBJOiBcImZvY3VzXCIgKyBFVkVOVF9LRVkkMSArIERBVEFfQVBJX0tFWSQxICsgXCIgXCIgKyAoXCJibHVyXCIgKyBFVkVOVF9LRVkkMSArIERBVEFfQVBJX0tFWSQxKVxuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBCdXR0b24gPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCdXR0b24oZWxlbWVudCkge1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBCdXR0b24ucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIHZhciB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSB0cnVlO1xuICAgICAgdmFyIGFkZEFyaWFQcmVzc2VkID0gdHJ1ZTtcbiAgICAgIHZhciByb290RWxlbWVudCA9ICQodGhpcy5fZWxlbWVudCkuY2xvc2VzdChTZWxlY3RvciQxLkRBVEFfVE9HR0xFKVswXTtcblxuICAgICAgaWYgKHJvb3RFbGVtZW50KSB7XG4gICAgICAgIHZhciBpbnB1dCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3RvciQxLklOUFVUKTtcblxuICAgICAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ3JhZGlvJykge1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoZWNrZWQgJiYgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lJDEuQUNUSVZFKSkge1xuICAgICAgICAgICAgICB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gcm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3RvciQxLkFDVElWRSk7XG5cbiAgICAgICAgICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAkKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQxLkFDVElWRSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHJpZ2dlckNoYW5nZUV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIHx8IHJvb3RFbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSB8fCBpbnB1dC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykgfHwgcm9vdEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaW5wdXQuY2hlY2tlZCA9ICF0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUkMS5BQ1RJVkUpO1xuICAgICAgICAgICAgJChpbnB1dCkudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICBhZGRBcmlhUHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGRBcmlhUHJlc3NlZCkge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZSQxLkFDVElWRSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHJpZ2dlckNoYW5nZUV2ZW50KSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lJDEuQUNUSVZFKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZJDEpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBCdXR0b24uX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkkMSk7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBCdXR0b24odGhpcyk7XG4gICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZJDEsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZyA9PT0gJ3RvZ2dsZScpIHtcbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhCdXR0b24sIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OJDE7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJ1dHRvbjtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50JDEuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yJDEuREFUQV9UT0dHTEVfQ0FSUk9ULCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBidXR0b24gPSBldmVudC50YXJnZXQ7XG5cbiAgICBpZiAoISQoYnV0dG9uKS5oYXNDbGFzcyhDbGFzc05hbWUkMS5CVVRUT04pKSB7XG4gICAgICBidXR0b24gPSAkKGJ1dHRvbikuY2xvc2VzdChTZWxlY3RvciQxLkJVVFRPTik7XG4gICAgfVxuXG4gICAgQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKGJ1dHRvbiksICd0b2dnbGUnKTtcbiAgfSkub24oRXZlbnQkMS5GT0NVU19CTFVSX0RBVEFfQVBJLCBTZWxlY3RvciQxLkRBVEFfVE9HR0xFX0NBUlJPVCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGJ1dHRvbiA9ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFNlbGVjdG9yJDEuQlVUVE9OKVswXTtcbiAgICAkKGJ1dHRvbikudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lJDEuRk9DVVMsIC9eZm9jdXMoaW4pPyQvLnRlc3QoZXZlbnQudHlwZSkpO1xuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRSQxXSA9IEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUUkMV0uQ29uc3RydWN0b3IgPSBCdXR0b247XG5cbiAgJC5mbltOQU1FJDFdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FJDFdID0gSlFVRVJZX05PX0NPTkZMSUNUJDE7XG4gICAgcmV0dXJuIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSQyID0gJ2Nhcm91c2VsJztcbiAgdmFyIFZFUlNJT04kMiA9ICc0LjMuMSc7XG4gIHZhciBEQVRBX0tFWSQyID0gJ2JzLmNhcm91c2VsJztcbiAgdmFyIEVWRU5UX0tFWSQyID0gXCIuXCIgKyBEQVRBX0tFWSQyO1xuICB2YXIgREFUQV9BUElfS0VZJDIgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCQyID0gJC5mbltOQU1FJDJdO1xuICB2YXIgQVJST1dfTEVGVF9LRVlDT0RFID0gMzc7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIGxlZnQgYXJyb3cga2V5XG5cbiAgdmFyIEFSUk9XX1JJR0hUX0tFWUNPREUgPSAzOTsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgcmlnaHQgYXJyb3cga2V5XG5cbiAgdmFyIFRPVUNIRVZFTlRfQ09NUEFUX1dBSVQgPSA1MDA7IC8vIFRpbWUgZm9yIG1vdXNlIGNvbXBhdCBldmVudHMgdG8gZmlyZSBhZnRlciB0b3VjaFxuXG4gIHZhciBTV0lQRV9USFJFU0hPTEQgPSA0MDtcbiAgdmFyIERlZmF1bHQgPSB7XG4gICAgaW50ZXJ2YWw6IDUwMDAsXG4gICAga2V5Ym9hcmQ6IHRydWUsXG4gICAgc2xpZGU6IGZhbHNlLFxuICAgIHBhdXNlOiAnaG92ZXInLFxuICAgIHdyYXA6IHRydWUsXG4gICAgdG91Y2g6IHRydWVcbiAgfTtcbiAgdmFyIERlZmF1bHRUeXBlID0ge1xuICAgIGludGVydmFsOiAnKG51bWJlcnxib29sZWFuKScsXG4gICAga2V5Ym9hcmQ6ICdib29sZWFuJyxcbiAgICBzbGlkZTogJyhib29sZWFufHN0cmluZyknLFxuICAgIHBhdXNlOiAnKHN0cmluZ3xib29sZWFuKScsXG4gICAgd3JhcDogJ2Jvb2xlYW4nLFxuICAgIHRvdWNoOiAnYm9vbGVhbidcbiAgfTtcbiAgdmFyIERpcmVjdGlvbiA9IHtcbiAgICBORVhUOiAnbmV4dCcsXG4gICAgUFJFVjogJ3ByZXYnLFxuICAgIExFRlQ6ICdsZWZ0JyxcbiAgICBSSUdIVDogJ3JpZ2h0J1xuICB9O1xuICB2YXIgRXZlbnQkMiA9IHtcbiAgICBTTElERTogXCJzbGlkZVwiICsgRVZFTlRfS0VZJDIsXG4gICAgU0xJRDogXCJzbGlkXCIgKyBFVkVOVF9LRVkkMixcbiAgICBLRVlET1dOOiBcImtleWRvd25cIiArIEVWRU5UX0tFWSQyLFxuICAgIE1PVVNFRU5URVI6IFwibW91c2VlbnRlclwiICsgRVZFTlRfS0VZJDIsXG4gICAgTU9VU0VMRUFWRTogXCJtb3VzZWxlYXZlXCIgKyBFVkVOVF9LRVkkMixcbiAgICBUT1VDSFNUQVJUOiBcInRvdWNoc3RhcnRcIiArIEVWRU5UX0tFWSQyLFxuICAgIFRPVUNITU9WRTogXCJ0b3VjaG1vdmVcIiArIEVWRU5UX0tFWSQyLFxuICAgIFRPVUNIRU5EOiBcInRvdWNoZW5kXCIgKyBFVkVOVF9LRVkkMixcbiAgICBQT0lOVEVSRE9XTjogXCJwb2ludGVyZG93blwiICsgRVZFTlRfS0VZJDIsXG4gICAgUE9JTlRFUlVQOiBcInBvaW50ZXJ1cFwiICsgRVZFTlRfS0VZJDIsXG4gICAgRFJBR19TVEFSVDogXCJkcmFnc3RhcnRcIiArIEVWRU5UX0tFWSQyLFxuICAgIExPQURfREFUQV9BUEk6IFwibG9hZFwiICsgRVZFTlRfS0VZJDIgKyBEQVRBX0FQSV9LRVkkMixcbiAgICBDTElDS19EQVRBX0FQSTogXCJjbGlja1wiICsgRVZFTlRfS0VZJDIgKyBEQVRBX0FQSV9LRVkkMlxuICB9O1xuICB2YXIgQ2xhc3NOYW1lJDIgPSB7XG4gICAgQ0FST1VTRUw6ICdjYXJvdXNlbCcsXG4gICAgQUNUSVZFOiAnYWN0aXZlJyxcbiAgICBTTElERTogJ3NsaWRlJyxcbiAgICBSSUdIVDogJ2Nhcm91c2VsLWl0ZW0tcmlnaHQnLFxuICAgIExFRlQ6ICdjYXJvdXNlbC1pdGVtLWxlZnQnLFxuICAgIE5FWFQ6ICdjYXJvdXNlbC1pdGVtLW5leHQnLFxuICAgIFBSRVY6ICdjYXJvdXNlbC1pdGVtLXByZXYnLFxuICAgIElURU06ICdjYXJvdXNlbC1pdGVtJyxcbiAgICBQT0lOVEVSX0VWRU5UOiAncG9pbnRlci1ldmVudCdcbiAgfTtcbiAgdmFyIFNlbGVjdG9yJDIgPSB7XG4gICAgQUNUSVZFOiAnLmFjdGl2ZScsXG4gICAgQUNUSVZFX0lURU06ICcuYWN0aXZlLmNhcm91c2VsLWl0ZW0nLFxuICAgIElURU06ICcuY2Fyb3VzZWwtaXRlbScsXG4gICAgSVRFTV9JTUc6ICcuY2Fyb3VzZWwtaXRlbSBpbWcnLFxuICAgIE5FWFRfUFJFVjogJy5jYXJvdXNlbC1pdGVtLW5leHQsIC5jYXJvdXNlbC1pdGVtLXByZXYnLFxuICAgIElORElDQVRPUlM6ICcuY2Fyb3VzZWwtaW5kaWNhdG9ycycsXG4gICAgREFUQV9TTElERTogJ1tkYXRhLXNsaWRlXSwgW2RhdGEtc2xpZGUtdG9dJyxcbiAgICBEQVRBX1JJREU6ICdbZGF0YS1yaWRlPVwiY2Fyb3VzZWxcIl0nXG4gIH07XG4gIHZhciBQb2ludGVyVHlwZSA9IHtcbiAgICBUT1VDSDogJ3RvdWNoJyxcbiAgICBQRU46ICdwZW4nXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIENhcm91c2VsID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2Fyb3VzZWwoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMudG91Y2hUaW1lb3V0ID0gbnVsbDtcbiAgICAgIHRoaXMudG91Y2hTdGFydFggPSAwO1xuICAgICAgdGhpcy50b3VjaERlbHRhWCA9IDA7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IkMi5JTkRJQ0FUT1JTKTtcbiAgICAgIHRoaXMuX3RvdWNoU3VwcG9ydGVkID0gJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDA7XG4gICAgICB0aGlzLl9wb2ludGVyRXZlbnQgPSBCb29sZWFuKHdpbmRvdy5Qb2ludGVyRXZlbnQgfHwgd2luZG93Lk1TUG9pbnRlckV2ZW50KTtcblxuICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IENhcm91c2VsLnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by5uZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIGlmICghdGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgIHRoaXMuX3NsaWRlKERpcmVjdGlvbi5ORVhUKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLm5leHRXaGVuVmlzaWJsZSA9IGZ1bmN0aW9uIG5leHRXaGVuVmlzaWJsZSgpIHtcbiAgICAgIC8vIERvbid0IGNhbGwgbmV4dCB3aGVuIHRoZSBwYWdlIGlzbid0IHZpc2libGVcbiAgICAgIC8vIG9yIHRoZSBjYXJvdXNlbCBvciBpdHMgcGFyZW50IGlzbid0IHZpc2libGVcbiAgICAgIGlmICghZG9jdW1lbnQuaGlkZGVuICYmICQodGhpcy5fZWxlbWVudCkuaXMoJzp2aXNpYmxlJykgJiYgJCh0aGlzLl9lbGVtZW50KS5jc3MoJ3Zpc2liaWxpdHknKSAhPT0gJ2hpZGRlbicpIHtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5wcmV2ID0gZnVuY3Rpb24gcHJldigpIHtcbiAgICAgIGlmICghdGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgIHRoaXMuX3NsaWRlKERpcmVjdGlvbi5QUkVWKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoZXZlbnQpIHtcbiAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgdGhpcy5faXNQYXVzZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yJDIuTkVYVF9QUkVWKSkge1xuICAgICAgICBVdGlsLnRyaWdnZXJUcmFuc2l0aW9uRW5kKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICB0aGlzLmN5Y2xlKHRydWUpO1xuICAgICAgfVxuXG4gICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKTtcbiAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmN5Y2xlID0gZnVuY3Rpb24gY3ljbGUoZXZlbnQpIHtcbiAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2ludGVydmFsKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO1xuICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuaW50ZXJ2YWwgJiYgIXRoaXMuX2lzUGF1c2VkKSB7XG4gICAgICAgIHRoaXMuX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA/IHRoaXMubmV4dFdoZW5WaXNpYmxlIDogdGhpcy5uZXh0KS5iaW5kKHRoaXMpLCB0aGlzLl9jb25maWcuaW50ZXJ2YWwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8udG8gPSBmdW5jdGlvbiB0byhpbmRleCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3RvciQyLkFDVElWRV9JVEVNKTtcblxuICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KHRoaXMuX2FjdGl2ZUVsZW1lbnQpO1xuXG4gICAgICBpZiAoaW5kZXggPiB0aGlzLl9pdGVtcy5sZW5ndGggLSAxIHx8IGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbmUoRXZlbnQkMi5TTElELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnRvKGluZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZUluZGV4ID09PSBpbmRleCkge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgIHRoaXMuY3ljbGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlyZWN0aW9uID0gaW5kZXggPiBhY3RpdmVJbmRleCA/IERpcmVjdGlvbi5ORVhUIDogRGlyZWN0aW9uLlBSRVY7XG5cbiAgICAgIHRoaXMuX3NsaWRlKGRpcmVjdGlvbiwgdGhpcy5faXRlbXNbaW5kZXhdKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vZmYoRVZFTlRfS0VZJDIpO1xuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZJDIpO1xuICAgICAgdGhpcy5faXRlbXMgPSBudWxsO1xuICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgICAgdGhpcy5faXNQYXVzZWQgPSBudWxsO1xuICAgICAgdGhpcy5faXNTbGlkaW5nID0gbnVsbDtcbiAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgPSBudWxsO1xuICAgIH0gLy8gUHJpdmF0ZVxuICAgIDtcblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQsIGNvbmZpZyk7XG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FJDIsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9oYW5kbGVTd2lwZSA9IGZ1bmN0aW9uIF9oYW5kbGVTd2lwZSgpIHtcbiAgICAgIHZhciBhYnNEZWx0YXggPSBNYXRoLmFicyh0aGlzLnRvdWNoRGVsdGFYKTtcblxuICAgICAgaWYgKGFic0RlbHRheCA8PSBTV0lQRV9USFJFU0hPTEQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlyZWN0aW9uID0gYWJzRGVsdGF4IC8gdGhpcy50b3VjaERlbHRhWDsgLy8gc3dpcGUgbGVmdFxuXG4gICAgICBpZiAoZGlyZWN0aW9uID4gMCkge1xuICAgICAgICB0aGlzLnByZXYoKTtcbiAgICAgIH0gLy8gc3dpcGUgcmlnaHRcblxuXG4gICAgICBpZiAoZGlyZWN0aW9uIDwgMCkge1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmtleWJvYXJkKSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQkMi5LRVlET1dOLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLl9rZXlkb3duKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcucGF1c2UgPT09ICdob3ZlcicpIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudCQyLk1PVVNFRU5URVIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIucGF1c2UoZXZlbnQpO1xuICAgICAgICB9KS5vbihFdmVudCQyLk1PVVNFTEVBVkUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuY3ljbGUoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy50b3VjaCkge1xuICAgICAgICB0aGlzLl9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fYWRkVG91Y2hFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy5fdG91Y2hTdXBwb3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnQgPSBmdW5jdGlvbiBzdGFydChldmVudCkge1xuICAgICAgICBpZiAoX3RoaXMzLl9wb2ludGVyRXZlbnQgJiYgUG9pbnRlclR5cGVbZXZlbnQub3JpZ2luYWxFdmVudC5wb2ludGVyVHlwZS50b1VwcGVyQ2FzZSgpXSkge1xuICAgICAgICAgIF90aGlzMy50b3VjaFN0YXJ0WCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQuY2xpZW50WDtcbiAgICAgICAgfSBlbHNlIGlmICghX3RoaXMzLl9wb2ludGVyRXZlbnQpIHtcbiAgICAgICAgICBfdGhpczMudG91Y2hTdGFydFggPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdmFyIG1vdmUgPSBmdW5jdGlvbiBtb3ZlKGV2ZW50KSB7XG4gICAgICAgIC8vIGVuc3VyZSBzd2lwaW5nIHdpdGggb25lIHRvdWNoIGFuZCBub3QgcGluY2hpbmdcbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAmJiBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIF90aGlzMy50b3VjaERlbHRhWCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMzLnRvdWNoRGVsdGFYID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdLmNsaWVudFggLSBfdGhpczMudG91Y2hTdGFydFg7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBlbmQgPSBmdW5jdGlvbiBlbmQoZXZlbnQpIHtcbiAgICAgICAgaWYgKF90aGlzMy5fcG9pbnRlckV2ZW50ICYmIFBvaW50ZXJUeXBlW2V2ZW50Lm9yaWdpbmFsRXZlbnQucG9pbnRlclR5cGUudG9VcHBlckNhc2UoKV0pIHtcbiAgICAgICAgICBfdGhpczMudG91Y2hEZWx0YVggPSBldmVudC5vcmlnaW5hbEV2ZW50LmNsaWVudFggLSBfdGhpczMudG91Y2hTdGFydFg7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczMuX2hhbmRsZVN3aXBlKCk7XG5cbiAgICAgICAgaWYgKF90aGlzMy5fY29uZmlnLnBhdXNlID09PSAnaG92ZXInKSB7XG4gICAgICAgICAgLy8gSWYgaXQncyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlLCBtb3VzZWVudGVyL2xlYXZlIGFyZSBmaXJlZCBhc1xuICAgICAgICAgIC8vIHBhcnQgb2YgdGhlIG1vdXNlIGNvbXBhdGliaWxpdHkgZXZlbnRzIG9uIGZpcnN0IHRhcCAtIHRoZSBjYXJvdXNlbFxuICAgICAgICAgIC8vIHdvdWxkIHN0b3AgY3ljbGluZyB1bnRpbCB1c2VyIHRhcHBlZCBvdXQgb2YgaXQ7XG4gICAgICAgICAgLy8gaGVyZSwgd2UgbGlzdGVuIGZvciB0b3VjaGVuZCwgZXhwbGljaXRseSBwYXVzZSB0aGUgY2Fyb3VzZWxcbiAgICAgICAgICAvLyAoYXMgaWYgaXQncyB0aGUgc2Vjb25kIHRpbWUgd2UgdGFwIG9uIGl0LCBtb3VzZWVudGVyIGNvbXBhdCBldmVudFxuICAgICAgICAgIC8vIGlzIE5PVCBmaXJlZCkgYW5kIGFmdGVyIGEgdGltZW91dCAodG8gYWxsb3cgZm9yIG1vdXNlIGNvbXBhdGliaWxpdHlcbiAgICAgICAgICAvLyBldmVudHMgdG8gZmlyZSkgd2UgZXhwbGljaXRseSByZXN0YXJ0IGN5Y2xpbmdcbiAgICAgICAgICBfdGhpczMucGF1c2UoKTtcblxuICAgICAgICAgIGlmIChfdGhpczMudG91Y2hUaW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMzLnRvdWNoVGltZW91dCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMzLnRvdWNoVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMzLmN5Y2xlKGV2ZW50KTtcbiAgICAgICAgICB9LCBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUICsgX3RoaXMzLl9jb25maWcuaW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3RvciQyLklURU1fSU1HKSkub24oRXZlbnQkMi5EUkFHX1NUQVJULCBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLl9wb2ludGVyRXZlbnQpIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudCQyLlBPSU5URVJET1dOLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gc3RhcnQoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudCQyLlBPSU5URVJVUCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGVuZChldmVudCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDbGFzc05hbWUkMi5QT0lOVEVSX0VWRU5UKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQkMi5UT1VDSFNUQVJULCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gc3RhcnQoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudCQyLlRPVUNITU9WRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIG1vdmUoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudCQyLlRPVUNIRU5ELCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gZW5kKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fa2V5ZG93biA9IGZ1bmN0aW9uIF9rZXlkb3duKGV2ZW50KSB7XG4gICAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGV2ZW50LndoaWNoKSB7XG4gICAgICAgIGNhc2UgQVJST1dfTEVGVF9LRVlDT0RFOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5wcmV2KCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBBUlJPV19SSUdIVF9LRVlDT0RFOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRJdGVtSW5kZXggPSBmdW5jdGlvbiBfZ2V0SXRlbUluZGV4KGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2l0ZW1zID0gZWxlbWVudCAmJiBlbGVtZW50LnBhcmVudE5vZGUgPyBbXS5zbGljZS5jYWxsKGVsZW1lbnQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yJDIuSVRFTSkpIDogW107XG4gICAgICByZXR1cm4gdGhpcy5faXRlbXMuaW5kZXhPZihlbGVtZW50KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRJdGVtQnlEaXJlY3Rpb24gPSBmdW5jdGlvbiBfZ2V0SXRlbUJ5RGlyZWN0aW9uKGRpcmVjdGlvbiwgYWN0aXZlRWxlbWVudCkge1xuICAgICAgdmFyIGlzTmV4dERpcmVjdGlvbiA9IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLk5FWFQ7XG4gICAgICB2YXIgaXNQcmV2RGlyZWN0aW9uID0gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uUFJFVjtcblxuICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KGFjdGl2ZUVsZW1lbnQpO1xuXG4gICAgICB2YXIgbGFzdEl0ZW1JbmRleCA9IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICB2YXIgaXNHb2luZ1RvV3JhcCA9IGlzUHJldkRpcmVjdGlvbiAmJiBhY3RpdmVJbmRleCA9PT0gMCB8fCBpc05leHREaXJlY3Rpb24gJiYgYWN0aXZlSW5kZXggPT09IGxhc3RJdGVtSW5kZXg7XG5cbiAgICAgIGlmIChpc0dvaW5nVG9XcmFwICYmICF0aGlzLl9jb25maWcud3JhcCkge1xuICAgICAgICByZXR1cm4gYWN0aXZlRWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdmFyIGRlbHRhID0gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uUFJFViA/IC0xIDogMTtcbiAgICAgIHZhciBpdGVtSW5kZXggPSAoYWN0aXZlSW5kZXggKyBkZWx0YSkgJSB0aGlzLl9pdGVtcy5sZW5ndGg7XG4gICAgICByZXR1cm4gaXRlbUluZGV4ID09PSAtMSA/IHRoaXMuX2l0ZW1zW3RoaXMuX2l0ZW1zLmxlbmd0aCAtIDFdIDogdGhpcy5faXRlbXNbaXRlbUluZGV4XTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl90cmlnZ2VyU2xpZGVFdmVudCA9IGZ1bmN0aW9uIF90cmlnZ2VyU2xpZGVFdmVudChyZWxhdGVkVGFyZ2V0LCBldmVudERpcmVjdGlvbk5hbWUpIHtcbiAgICAgIHZhciB0YXJnZXRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChyZWxhdGVkVGFyZ2V0KTtcblxuICAgICAgdmFyIGZyb21JbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IkMi5BQ1RJVkVfSVRFTSkpO1xuXG4gICAgICB2YXIgc2xpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQkMi5TTElERSwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0LFxuICAgICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZSxcbiAgICAgICAgZnJvbTogZnJvbUluZGV4LFxuICAgICAgICB0bzogdGFyZ2V0SW5kZXhcbiAgICAgIH0pO1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNsaWRlRXZlbnQpO1xuICAgICAgcmV0dXJuIHNsaWRlRXZlbnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCA9IGZ1bmN0aW9uIF9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIGlmICh0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCkge1xuICAgICAgICB2YXIgaW5kaWNhdG9ycyA9IFtdLnNsaWNlLmNhbGwodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3RvciQyLkFDVElWRSkpO1xuICAgICAgICAkKGluZGljYXRvcnMpLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQyLkFDVElWRSk7XG5cbiAgICAgICAgdmFyIG5leHRJbmRpY2F0b3IgPSB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudC5jaGlsZHJlblt0aGlzLl9nZXRJdGVtSW5kZXgoZWxlbWVudCldO1xuXG4gICAgICAgIGlmIChuZXh0SW5kaWNhdG9yKSB7XG4gICAgICAgICAgJChuZXh0SW5kaWNhdG9yKS5hZGRDbGFzcyhDbGFzc05hbWUkMi5BQ1RJVkUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fc2xpZGUgPSBmdW5jdGlvbiBfc2xpZGUoZGlyZWN0aW9uLCBlbGVtZW50KSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IkMi5BQ1RJVkVfSVRFTSk7XG5cbiAgICAgIHZhciBhY3RpdmVFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoYWN0aXZlRWxlbWVudCk7XG5cbiAgICAgIHZhciBuZXh0RWxlbWVudCA9IGVsZW1lbnQgfHwgYWN0aXZlRWxlbWVudCAmJiB0aGlzLl9nZXRJdGVtQnlEaXJlY3Rpb24oZGlyZWN0aW9uLCBhY3RpdmVFbGVtZW50KTtcblxuICAgICAgdmFyIG5leHRFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgobmV4dEVsZW1lbnQpO1xuXG4gICAgICB2YXIgaXNDeWNsaW5nID0gQm9vbGVhbih0aGlzLl9pbnRlcnZhbCk7XG4gICAgICB2YXIgZGlyZWN0aW9uYWxDbGFzc05hbWU7XG4gICAgICB2YXIgb3JkZXJDbGFzc05hbWU7XG4gICAgICB2YXIgZXZlbnREaXJlY3Rpb25OYW1lO1xuXG4gICAgICBpZiAoZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uTkVYVCkge1xuICAgICAgICBkaXJlY3Rpb25hbENsYXNzTmFtZSA9IENsYXNzTmFtZSQyLkxFRlQ7XG4gICAgICAgIG9yZGVyQ2xhc3NOYW1lID0gQ2xhc3NOYW1lJDIuTkVYVDtcbiAgICAgICAgZXZlbnREaXJlY3Rpb25OYW1lID0gRGlyZWN0aW9uLkxFRlQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXJlY3Rpb25hbENsYXNzTmFtZSA9IENsYXNzTmFtZSQyLlJJR0hUO1xuICAgICAgICBvcmRlckNsYXNzTmFtZSA9IENsYXNzTmFtZSQyLlBSRVY7XG4gICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5SSUdIVDtcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHRFbGVtZW50ICYmICQobmV4dEVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQyLkFDVElWRSkpIHtcbiAgICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNsaWRlRXZlbnQgPSB0aGlzLl90cmlnZ2VyU2xpZGVFdmVudChuZXh0RWxlbWVudCwgZXZlbnREaXJlY3Rpb25OYW1lKTtcblxuICAgICAgaWYgKHNsaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWFjdGl2ZUVsZW1lbnQgfHwgIW5leHRFbGVtZW50KSB7XG4gICAgICAgIC8vIFNvbWUgd2VpcmRuZXNzIGlzIGhhcHBlbmluZywgc28gd2UgYmFpbFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzU2xpZGluZyA9IHRydWU7XG5cbiAgICAgIGlmIChpc0N5Y2xpbmcpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KG5leHRFbGVtZW50KTtcblxuICAgICAgdmFyIHNsaWRFdmVudCA9ICQuRXZlbnQoRXZlbnQkMi5TTElELCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IG5leHRFbGVtZW50LFxuICAgICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZSxcbiAgICAgICAgZnJvbTogYWN0aXZlRWxlbWVudEluZGV4LFxuICAgICAgICB0bzogbmV4dEVsZW1lbnRJbmRleFxuICAgICAgfSk7XG5cbiAgICAgIGlmICgkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQyLlNMSURFKSkge1xuICAgICAgICAkKG5leHRFbGVtZW50KS5hZGRDbGFzcyhvcmRlckNsYXNzTmFtZSk7XG4gICAgICAgIFV0aWwucmVmbG93KG5leHRFbGVtZW50KTtcbiAgICAgICAgJChhY3RpdmVFbGVtZW50KS5hZGRDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICAgICQobmV4dEVsZW1lbnQpLmFkZENsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcbiAgICAgICAgdmFyIG5leHRFbGVtZW50SW50ZXJ2YWwgPSBwYXJzZUludChuZXh0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW50ZXJ2YWwnKSwgMTApO1xuXG4gICAgICAgIGlmIChuZXh0RWxlbWVudEludGVydmFsKSB7XG4gICAgICAgICAgdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCA9IHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgfHwgdGhpcy5fY29uZmlnLmludGVydmFsO1xuICAgICAgICAgIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCA9IG5leHRFbGVtZW50SW50ZXJ2YWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fY29uZmlnLmludGVydmFsID0gdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCB8fCB0aGlzLl9jb25maWcuaW50ZXJ2YWw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChhY3RpdmVFbGVtZW50KTtcbiAgICAgICAgJChhY3RpdmVFbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICQobmV4dEVsZW1lbnQpLnJlbW92ZUNsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lICsgXCIgXCIgKyBvcmRlckNsYXNzTmFtZSkuYWRkQ2xhc3MoQ2xhc3NOYW1lJDIuQUNUSVZFKTtcbiAgICAgICAgICAkKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQyLkFDVElWRSArIFwiIFwiICsgb3JkZXJDbGFzc05hbWUgKyBcIiBcIiArIGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcbiAgICAgICAgICBfdGhpczQuX2lzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICQoX3RoaXM0Ll9lbGVtZW50KS50cmlnZ2VyKHNsaWRFdmVudCk7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQyLkFDVElWRSk7XG4gICAgICAgICQobmV4dEVsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZSQyLkFDVElWRSk7XG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZEV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzQ3ljbGluZykge1xuICAgICAgICB0aGlzLmN5Y2xlKCk7XG4gICAgICB9XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSQyKTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQsICQodGhpcykuZGF0YSgpKTtcblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBfY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgX2NvbmZpZywgY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhY3Rpb24gPSB0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJyA/IGNvbmZpZyA6IF9jb25maWcuc2xpZGU7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBDYXJvdXNlbCh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVkkMiwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBkYXRhLnRvKGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbYWN0aW9uXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgYWN0aW9uICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbYWN0aW9uXSgpO1xuICAgICAgICB9IGVsc2UgaWYgKF9jb25maWcuaW50ZXJ2YWwgJiYgX2NvbmZpZy5yaWRlKSB7XG4gICAgICAgICAgZGF0YS5wYXVzZSgpO1xuICAgICAgICAgIGRhdGEuY3ljbGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIENhcm91c2VsLl9kYXRhQXBpQ2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gX2RhdGFBcGlDbGlja0hhbmRsZXIoZXZlbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtcblxuICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0YXJnZXQgPSAkKHNlbGVjdG9yKVswXTtcblxuICAgICAgaWYgKCF0YXJnZXQgfHwgISQodGFyZ2V0KS5oYXNDbGFzcyhDbGFzc05hbWUkMi5DQVJPVVNFTCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgJCh0YXJnZXQpLmRhdGEoKSwgJCh0aGlzKS5kYXRhKCkpO1xuXG4gICAgICB2YXIgc2xpZGVJbmRleCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLXNsaWRlLXRvJyk7XG5cbiAgICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICAgIGNvbmZpZy5pbnRlcnZhbCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCh0YXJnZXQpLCBjb25maWcpO1xuXG4gICAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgICAkKHRhcmdldCkuZGF0YShEQVRBX0tFWSQyKS50byhzbGlkZUluZGV4KTtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKENhcm91c2VsLCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTiQyO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENhcm91c2VsO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJChkb2N1bWVudCkub24oRXZlbnQkMi5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IkMi5EQVRBX1NMSURFLCBDYXJvdXNlbC5fZGF0YUFwaUNsaWNrSGFuZGxlcik7XG4gICQod2luZG93KS5vbihFdmVudCQyLkxPQURfREFUQV9BUEksIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2Fyb3VzZWxzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yJDIuREFUQV9SSURFKSk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2Fyb3VzZWxzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgJGNhcm91c2VsID0gJChjYXJvdXNlbHNbaV0pO1xuXG4gICAgICBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJGNhcm91c2VsLCAkY2Fyb3VzZWwuZGF0YSgpKTtcbiAgICB9XG4gIH0pO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FJDJdID0gQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FJDJdLkNvbnN0cnVjdG9yID0gQ2Fyb3VzZWw7XG5cbiAgJC5mbltOQU1FJDJdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FJDJdID0gSlFVRVJZX05PX0NPTkZMSUNUJDI7XG4gICAgcmV0dXJuIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJDMgPSAnY29sbGFwc2UnO1xuICB2YXIgVkVSU0lPTiQzID0gJzQuMy4xJztcbiAgdmFyIERBVEFfS0VZJDMgPSAnYnMuY29sbGFwc2UnO1xuICB2YXIgRVZFTlRfS0VZJDMgPSBcIi5cIiArIERBVEFfS0VZJDM7XG4gIHZhciBEQVRBX0FQSV9LRVkkMyA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJDMgPSAkLmZuW05BTUUkM107XG4gIHZhciBEZWZhdWx0JDEgPSB7XG4gICAgdG9nZ2xlOiB0cnVlLFxuICAgIHBhcmVudDogJydcbiAgfTtcbiAgdmFyIERlZmF1bHRUeXBlJDEgPSB7XG4gICAgdG9nZ2xlOiAnYm9vbGVhbicsXG4gICAgcGFyZW50OiAnKHN0cmluZ3xlbGVtZW50KSdcbiAgfTtcbiAgdmFyIEV2ZW50JDMgPSB7XG4gICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVkkMyxcbiAgICBTSE9XTjogXCJzaG93blwiICsgRVZFTlRfS0VZJDMsXG4gICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVkkMyxcbiAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVkkMyxcbiAgICBDTElDS19EQVRBX0FQSTogXCJjbGlja1wiICsgRVZFTlRfS0VZJDMgKyBEQVRBX0FQSV9LRVkkM1xuICB9O1xuICB2YXIgQ2xhc3NOYW1lJDMgPSB7XG4gICAgU0hPVzogJ3Nob3cnLFxuICAgIENPTExBUFNFOiAnY29sbGFwc2UnLFxuICAgIENPTExBUFNJTkc6ICdjb2xsYXBzaW5nJyxcbiAgICBDT0xMQVBTRUQ6ICdjb2xsYXBzZWQnXG4gIH07XG4gIHZhciBEaW1lbnNpb24gPSB7XG4gICAgV0lEVEg6ICd3aWR0aCcsXG4gICAgSEVJR0hUOiAnaGVpZ2h0J1xuICB9O1xuICB2YXIgU2VsZWN0b3IkMyA9IHtcbiAgICBBQ1RJVkVTOiAnLnNob3csIC5jb2xsYXBzaW5nJyxcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdJ1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBDb2xsYXBzZSA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbGxhcHNlKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy5fdHJpZ2dlckFycmF5ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtdG9nZ2xlPVxcXCJjb2xsYXBzZVxcXCJdW2hyZWY9XFxcIiNcIiArIGVsZW1lbnQuaWQgKyBcIlxcXCJdLFwiICsgKFwiW2RhdGEtdG9nZ2xlPVxcXCJjb2xsYXBzZVxcXCJdW2RhdGEtdGFyZ2V0PVxcXCIjXCIgKyBlbGVtZW50LmlkICsgXCJcXFwiXVwiKSkpO1xuICAgICAgdmFyIHRvZ2dsZUxpc3QgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IkMy5EQVRBX1RPR0dMRSkpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdG9nZ2xlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YXIgZWxlbSA9IHRvZ2dsZUxpc3RbaV07XG4gICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtKTtcbiAgICAgICAgdmFyIGZpbHRlckVsZW1lbnQgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKS5maWx0ZXIoZnVuY3Rpb24gKGZvdW5kRWxlbSkge1xuICAgICAgICAgIHJldHVybiBmb3VuZEVsZW0gPT09IGVsZW1lbnQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCAmJiBmaWx0ZXJFbGVtZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aGlzLl9zZWxlY3RvciA9IHNlbGVjdG9yO1xuXG4gICAgICAgICAgdGhpcy5fdHJpZ2dlckFycmF5LnB1c2goZWxlbSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fcGFyZW50ID0gdGhpcy5fY29uZmlnLnBhcmVudCA/IHRoaXMuX2dldFBhcmVudCgpIDogbnVsbDtcblxuICAgICAgaWYgKCF0aGlzLl9jb25maWcucGFyZW50KSB7XG4gICAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl9lbGVtZW50LCB0aGlzLl90cmlnZ2VyQXJyYXkpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnRvZ2dsZSkge1xuICAgICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgICAgfVxuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gQ29sbGFwc2UucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIGlmICgkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQzLlNIT1cpKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5zaG93ID0gZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUkMy5TSE9XKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBhY3RpdmVzO1xuICAgICAgdmFyIGFjdGl2ZXNEYXRhO1xuXG4gICAgICBpZiAodGhpcy5fcGFyZW50KSB7XG4gICAgICAgIGFjdGl2ZXMgPSBbXS5zbGljZS5jYWxsKHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yJDMuQUNUSVZFUykpLmZpbHRlcihmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgX3RoaXMuX2NvbmZpZy5wYXJlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFyZW50JykgPT09IF90aGlzLl9jb25maWcucGFyZW50O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBlbGVtLmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUkMy5DT0xMQVBTRSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChhY3RpdmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGFjdGl2ZXMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhY3RpdmVzKSB7XG4gICAgICAgIGFjdGl2ZXNEYXRhID0gJChhY3RpdmVzKS5ub3QodGhpcy5fc2VsZWN0b3IpLmRhdGEoREFUQV9LRVkkMyk7XG5cbiAgICAgICAgaWYgKGFjdGl2ZXNEYXRhICYmIGFjdGl2ZXNEYXRhLl9pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0RXZlbnQgPSAkLkV2ZW50KEV2ZW50JDMuU0hPVyk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc3RhcnRFdmVudCk7XG5cbiAgICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZXMpIHtcbiAgICAgICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQoYWN0aXZlcykubm90KHRoaXMuX3NlbGVjdG9yKSwgJ2hpZGUnKTtcblxuICAgICAgICBpZiAoIWFjdGl2ZXNEYXRhKSB7XG4gICAgICAgICAgJChhY3RpdmVzKS5kYXRhKERBVEFfS0VZJDMsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkMy5DT0xMQVBTRSkuYWRkQ2xhc3MoQ2xhc3NOYW1lJDMuQ09MTEFQU0lORyk7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAwO1xuXG4gICAgICBpZiAodGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuICAgICAgICAkKHRoaXMuX3RyaWdnZXJBcnJheSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDMuQ09MTEFQU0VEKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbmluZyh0cnVlKTtcblxuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICQoX3RoaXMuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQzLkNPTExBUFNJTkcpLmFkZENsYXNzKENsYXNzTmFtZSQzLkNPTExBUFNFKS5hZGRDbGFzcyhDbGFzc05hbWUkMy5TSE9XKTtcbiAgICAgICAgX3RoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnO1xuXG4gICAgICAgIF90aGlzLnNldFRyYW5zaXRpb25pbmcoZmFsc2UpO1xuXG4gICAgICAgICQoX3RoaXMuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQkMy5TSE9XTik7XG4gICAgICB9O1xuXG4gICAgICB2YXIgY2FwaXRhbGl6ZWREaW1lbnNpb24gPSBkaW1lbnNpb25bMF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSgxKTtcbiAgICAgIHZhciBzY3JvbGxTaXplID0gXCJzY3JvbGxcIiArIGNhcGl0YWxpemVkRGltZW5zaW9uO1xuICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IHRoaXMuX2VsZW1lbnRbc2Nyb2xsU2l6ZV0gKyBcInB4XCI7XG4gICAgfTtcblxuICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICEkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQzLlNIT1cpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0RXZlbnQgPSAkLkV2ZW50KEV2ZW50JDMuSElERSk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc3RhcnRFdmVudCk7XG5cbiAgICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSB0aGlzLl9lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2RpbWVuc2lvbl0gKyBcInB4XCI7XG4gICAgICBVdGlsLnJlZmxvdyh0aGlzLl9lbGVtZW50KTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lJDMuQ09MTEFQU0lORykucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDMuQ09MTEFQU0UpLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQzLlNIT1cpO1xuICAgICAgdmFyIHRyaWdnZXJBcnJheUxlbmd0aCA9IHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmICh0cmlnZ2VyQXJyYXlMZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJpZ2dlckFycmF5TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgdHJpZ2dlciA9IHRoaXMuX3RyaWdnZXJBcnJheVtpXTtcbiAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodHJpZ2dlcik7XG5cbiAgICAgICAgICBpZiAoc2VsZWN0b3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciAkZWxlbSA9ICQoW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSkpO1xuXG4gICAgICAgICAgICBpZiAoISRlbGVtLmhhc0NsYXNzKENsYXNzTmFtZSQzLlNIT1cpKSB7XG4gICAgICAgICAgICAgICQodHJpZ2dlcikuYWRkQ2xhc3MoQ2xhc3NOYW1lJDMuQ09MTEFQU0VEKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICBfdGhpczIuc2V0VHJhbnNpdGlvbmluZyhmYWxzZSk7XG5cbiAgICAgICAgJChfdGhpczIuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQzLkNPTExBUFNJTkcpLmFkZENsYXNzKENsYXNzTmFtZSQzLkNPTExBUFNFKS50cmlnZ2VyKEV2ZW50JDMuSElEREVOKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnO1xuICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNldFRyYW5zaXRpb25pbmcgPSBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uaW5nKGlzVHJhbnNpdGlvbmluZykge1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gaXNUcmFuc2l0aW9uaW5nO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkkMyk7XG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fcGFyZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fdHJpZ2dlckFycmF5ID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IG51bGw7XG4gICAgfSAvLyBQcml2YXRlXG4gICAgO1xuXG4gICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgRGVmYXVsdCQxLCBjb25maWcpO1xuICAgICAgY29uZmlnLnRvZ2dsZSA9IEJvb2xlYW4oY29uZmlnLnRvZ2dsZSk7IC8vIENvZXJjZSBzdHJpbmcgdmFsdWVzXG5cbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUkMywgY29uZmlnLCBEZWZhdWx0VHlwZSQxKTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0RGltZW5zaW9uID0gZnVuY3Rpb24gX2dldERpbWVuc2lvbigpIHtcbiAgICAgIHZhciBoYXNXaWR0aCA9ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoRGltZW5zaW9uLldJRFRIKTtcbiAgICAgIHJldHVybiBoYXNXaWR0aCA/IERpbWVuc2lvbi5XSURUSCA6IERpbWVuc2lvbi5IRUlHSFQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0UGFyZW50ID0gZnVuY3Rpb24gX2dldFBhcmVudCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgcGFyZW50O1xuXG4gICAgICBpZiAoVXRpbC5pc0VsZW1lbnQodGhpcy5fY29uZmlnLnBhcmVudCkpIHtcbiAgICAgICAgcGFyZW50ID0gdGhpcy5fY29uZmlnLnBhcmVudDsgLy8gSXQncyBhIGpRdWVyeSBvYmplY3RcblxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5wYXJlbnQuanF1ZXJ5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHBhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnRbMF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fY29uZmlnLnBhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWxlY3RvciA9IFwiW2RhdGEtdG9nZ2xlPVxcXCJjb2xsYXBzZVxcXCJdW2RhdGEtcGFyZW50PVxcXCJcIiArIHRoaXMuX2NvbmZpZy5wYXJlbnQgKyBcIlxcXCJdXCI7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBbXS5zbGljZS5jYWxsKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG4gICAgICAkKGNoaWxkcmVuKS5lYWNoKGZ1bmN0aW9uIChpLCBlbGVtZW50KSB7XG4gICAgICAgIF90aGlzMy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKENvbGxhcHNlLl9nZXRUYXJnZXRGcm9tRWxlbWVudChlbGVtZW50KSwgW2VsZW1lbnRdKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MgPSBmdW5jdGlvbiBfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGVsZW1lbnQsIHRyaWdnZXJBcnJheSkge1xuICAgICAgdmFyIGlzT3BlbiA9ICQoZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDMuU0hPVyk7XG5cbiAgICAgIGlmICh0cmlnZ2VyQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICQodHJpZ2dlckFycmF5KS50b2dnbGVDbGFzcyhDbGFzc05hbWUkMy5DT0xMQVBTRUQsICFpc09wZW4pLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pO1xuICAgICAgfVxuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgQ29sbGFwc2UuX2dldFRhcmdldEZyb21FbGVtZW50ID0gZnVuY3Rpb24gX2dldFRhcmdldEZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcbiAgICAgIHJldHVybiBzZWxlY3RvciA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIDogbnVsbDtcbiAgICB9O1xuXG4gICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkdGhpcy5kYXRhKERBVEFfS0VZJDMpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgRGVmYXVsdCQxLCAkdGhpcy5kYXRhKCksIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KTtcblxuICAgICAgICBpZiAoIWRhdGEgJiYgX2NvbmZpZy50b2dnbGUgJiYgL3Nob3d8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgICAgX2NvbmZpZy50b2dnbGUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgQ29sbGFwc2UodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJHRoaXMuZGF0YShEQVRBX0tFWSQzLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ29sbGFwc2UsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OJDM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdCQxO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDb2xsYXBzZTtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50JDMuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yJDMuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIHByZXZlbnREZWZhdWx0IG9ubHkgZm9yIDxhPiBlbGVtZW50cyAod2hpY2ggY2hhbmdlIHRoZSBVUkwpIG5vdCBpbnNpZGUgdGhlIGNvbGxhcHNpYmxlIGVsZW1lbnRcbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC50YWdOYW1lID09PSAnQScpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgdmFyICR0cmlnZ2VyID0gJCh0aGlzKTtcbiAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7XG4gICAgdmFyIHNlbGVjdG9ycyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xuICAgICQoc2VsZWN0b3JzKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGFyZ2V0ID0gJCh0aGlzKTtcbiAgICAgIHZhciBkYXRhID0gJHRhcmdldC5kYXRhKERBVEFfS0VZJDMpO1xuICAgICAgdmFyIGNvbmZpZyA9IGRhdGEgPyAndG9nZ2xlJyA6ICR0cmlnZ2VyLmRhdGEoKTtcblxuICAgICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZS5jYWxsKCR0YXJnZXQsIGNvbmZpZyk7XG4gICAgfSk7XG4gIH0pO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FJDNdID0gQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FJDNdLkNvbnN0cnVjdG9yID0gQ29sbGFwc2U7XG5cbiAgJC5mbltOQU1FJDNdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FJDNdID0gSlFVRVJZX05PX0NPTkZMSUNUJDM7XG4gICAgcmV0dXJuIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJDQgPSAnZHJvcGRvd24nO1xuICB2YXIgVkVSU0lPTiQ0ID0gJzQuMy4xJztcbiAgdmFyIERBVEFfS0VZJDQgPSAnYnMuZHJvcGRvd24nO1xuICB2YXIgRVZFTlRfS0VZJDQgPSBcIi5cIiArIERBVEFfS0VZJDQ7XG4gIHZhciBEQVRBX0FQSV9LRVkkNCA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJDQgPSAkLmZuW05BTUUkNF07XG4gIHZhciBFU0NBUEVfS0VZQ09ERSA9IDI3OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBFc2NhcGUgKEVzYykga2V5XG5cbiAgdmFyIFNQQUNFX0tFWUNPREUgPSAzMjsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3Igc3BhY2Uga2V5XG5cbiAgdmFyIFRBQl9LRVlDT0RFID0gOTsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgdGFiIGtleVxuXG4gIHZhciBBUlJPV19VUF9LRVlDT0RFID0gMzg7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHVwIGFycm93IGtleVxuXG4gIHZhciBBUlJPV19ET1dOX0tFWUNPREUgPSA0MDsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgZG93biBhcnJvdyBrZXlcblxuICB2YXIgUklHSFRfTU9VU0VfQlVUVE9OX1dISUNIID0gMzsgLy8gTW91c2VFdmVudC53aGljaCB2YWx1ZSBmb3IgdGhlIHJpZ2h0IGJ1dHRvbiAoYXNzdW1pbmcgYSByaWdodC1oYW5kZWQgbW91c2UpXG5cbiAgdmFyIFJFR0VYUF9LRVlET1dOID0gbmV3IFJlZ0V4cChBUlJPV19VUF9LRVlDT0RFICsgXCJ8XCIgKyBBUlJPV19ET1dOX0tFWUNPREUgKyBcInxcIiArIEVTQ0FQRV9LRVlDT0RFKTtcbiAgdmFyIEV2ZW50JDQgPSB7XG4gICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVkkNCxcbiAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVkkNCxcbiAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSQ0LFxuICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVkkNCxcbiAgICBDTElDSzogXCJjbGlja1wiICsgRVZFTlRfS0VZJDQsXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSQ0ICsgREFUQV9BUElfS0VZJDQsXG4gICAgS0VZRE9XTl9EQVRBX0FQSTogXCJrZXlkb3duXCIgKyBFVkVOVF9LRVkkNCArIERBVEFfQVBJX0tFWSQ0LFxuICAgIEtFWVVQX0RBVEFfQVBJOiBcImtleXVwXCIgKyBFVkVOVF9LRVkkNCArIERBVEFfQVBJX0tFWSQ0XG4gIH07XG4gIHZhciBDbGFzc05hbWUkNCA9IHtcbiAgICBESVNBQkxFRDogJ2Rpc2FibGVkJyxcbiAgICBTSE9XOiAnc2hvdycsXG4gICAgRFJPUFVQOiAnZHJvcHVwJyxcbiAgICBEUk9QUklHSFQ6ICdkcm9wcmlnaHQnLFxuICAgIERST1BMRUZUOiAnZHJvcGxlZnQnLFxuICAgIE1FTlVSSUdIVDogJ2Ryb3Bkb3duLW1lbnUtcmlnaHQnLFxuICAgIE1FTlVMRUZUOiAnZHJvcGRvd24tbWVudS1sZWZ0JyxcbiAgICBQT1NJVElPTl9TVEFUSUM6ICdwb3NpdGlvbi1zdGF0aWMnXG4gIH07XG4gIHZhciBTZWxlY3RvciQ0ID0ge1xuICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIl0nLFxuICAgIEZPUk1fQ0hJTEQ6ICcuZHJvcGRvd24gZm9ybScsXG4gICAgTUVOVTogJy5kcm9wZG93bi1tZW51JyxcbiAgICBOQVZCQVJfTkFWOiAnLm5hdmJhci1uYXYnLFxuICAgIFZJU0lCTEVfSVRFTVM6ICcuZHJvcGRvd24tbWVudSAuZHJvcGRvd24taXRlbTpub3QoLmRpc2FibGVkKTpub3QoOmRpc2FibGVkKSdcbiAgfTtcbiAgdmFyIEF0dGFjaG1lbnRNYXAgPSB7XG4gICAgVE9QOiAndG9wLXN0YXJ0JyxcbiAgICBUT1BFTkQ6ICd0b3AtZW5kJyxcbiAgICBCT1RUT006ICdib3R0b20tc3RhcnQnLFxuICAgIEJPVFRPTUVORDogJ2JvdHRvbS1lbmQnLFxuICAgIFJJR0hUOiAncmlnaHQtc3RhcnQnLFxuICAgIFJJR0hURU5EOiAncmlnaHQtZW5kJyxcbiAgICBMRUZUOiAnbGVmdC1zdGFydCcsXG4gICAgTEVGVEVORDogJ2xlZnQtZW5kJ1xuICB9O1xuICB2YXIgRGVmYXVsdCQyID0ge1xuICAgIG9mZnNldDogMCxcbiAgICBmbGlwOiB0cnVlLFxuICAgIGJvdW5kYXJ5OiAnc2Nyb2xsUGFyZW50JyxcbiAgICByZWZlcmVuY2U6ICd0b2dnbGUnLFxuICAgIGRpc3BsYXk6ICdkeW5hbWljJ1xuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUkMiA9IHtcbiAgICBvZmZzZXQ6ICcobnVtYmVyfHN0cmluZ3xmdW5jdGlvbiknLFxuICAgIGZsaXA6ICdib29sZWFuJyxcbiAgICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknLFxuICAgIHJlZmVyZW5jZTogJyhzdHJpbmd8ZWxlbWVudCknLFxuICAgIGRpc3BsYXk6ICdzdHJpbmcnXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIERyb3Bkb3duID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRHJvcGRvd24oZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX21lbnUgPSB0aGlzLl9nZXRNZW51RWxlbWVudCgpO1xuICAgICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKTtcblxuICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IERyb3Bkb3duLnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5kaXNhYmxlZCB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQ0LkRJU0FCTEVEKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDQuU0hPVyk7XG5cbiAgICAgIERyb3Bkb3duLl9jbGVhck1lbnVzKCk7XG5cbiAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9O1xuICAgICAgdmFyIHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQkNC5TSE9XLCByZWxhdGVkVGFyZ2V0KTtcbiAgICAgICQocGFyZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG5cbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBEaXNhYmxlIHRvdGFsbHkgUG9wcGVyLmpzIGZvciBEcm9wZG93biBpbiBOYXZiYXJcblxuXG4gICAgICBpZiAoIXRoaXMuX2luTmF2YmFyKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVjayBmb3IgUG9wcGVyIGRlcGVuZGVuY3lcbiAgICAgICAgICogUG9wcGVyIC0gaHR0cHM6Ly9wb3BwZXIuanMub3JnXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodHlwZW9mIFBvcHBlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXBcXCdzIGRyb3Bkb3ducyByZXF1aXJlIFBvcHBlci5qcyAoaHR0cHM6Ly9wb3BwZXIuanMub3JnLyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fZWxlbWVudDtcblxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLnJlZmVyZW5jZSA9PT0gJ3BhcmVudCcpIHtcbiAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gcGFyZW50O1xuICAgICAgICB9IGVsc2UgaWYgKFV0aWwuaXNFbGVtZW50KHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UpKSB7XG4gICAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2NvbmZpZy5yZWZlcmVuY2U7IC8vIENoZWNrIGlmIGl0J3MgalF1ZXJ5IGVsZW1lbnRcblxuICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLnJlZmVyZW5jZS5qcXVlcnkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fY29uZmlnLnJlZmVyZW5jZVswXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gSWYgYm91bmRhcnkgaXMgbm90IGBzY3JvbGxQYXJlbnRgLCB0aGVuIHNldCBwb3NpdGlvbiB0byBgc3RhdGljYFxuICAgICAgICAvLyB0byBhbGxvdyB0aGUgbWVudSB0byBcImVzY2FwZVwiIHRoZSBzY3JvbGwgcGFyZW50J3MgYm91bmRhcmllc1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvaXNzdWVzLzI0MjUxXG5cblxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLmJvdW5kYXJ5ICE9PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgICAgICQocGFyZW50KS5hZGRDbGFzcyhDbGFzc05hbWUkNC5QT1NJVElPTl9TVEFUSUMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcG9wcGVyID0gbmV3IFBvcHBlcihyZWZlcmVuY2VFbGVtZW50LCB0aGlzLl9tZW51LCB0aGlzLl9nZXRQb3BwZXJDb25maWcoKSk7XG4gICAgICB9IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcbiAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XG4gICAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xuICAgICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXG5cblxuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAkKHBhcmVudCkuY2xvc2VzdChTZWxlY3RvciQ0Lk5BVkJBUl9OQVYpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAkKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub24oJ21vdXNlb3ZlcicsIG51bGwsICQubm9vcCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcblxuICAgICAgJCh0aGlzLl9tZW51KS50b2dnbGVDbGFzcyhDbGFzc05hbWUkNC5TSE9XKTtcbiAgICAgICQocGFyZW50KS50b2dnbGVDbGFzcyhDbGFzc05hbWUkNC5TSE9XKS50cmlnZ2VyKCQuRXZlbnQoRXZlbnQkNC5TSE9XTiwgcmVsYXRlZFRhcmdldCkpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5kaXNhYmxlZCB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQ0LkRJU0FCTEVEKSB8fCAkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZSQ0LlNIT1cpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICAgIH07XG4gICAgICB2YXIgc2hvd0V2ZW50ID0gJC5FdmVudChFdmVudCQ0LlNIT1csIHJlbGF0ZWRUYXJnZXQpO1xuXG4gICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICAkKHBhcmVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJCh0aGlzLl9tZW51KS50b2dnbGVDbGFzcyhDbGFzc05hbWUkNC5TSE9XKTtcbiAgICAgICQocGFyZW50KS50b2dnbGVDbGFzcyhDbGFzc05hbWUkNC5TSE9XKS50cmlnZ2VyKCQuRXZlbnQoRXZlbnQkNC5TSE9XTiwgcmVsYXRlZFRhcmdldCkpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uaGlkZSA9IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5kaXNhYmxlZCB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQ0LkRJU0FCTEVEKSB8fCAhJCh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUkNC5TSE9XKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9O1xuICAgICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQkNC5ISURFLCByZWxhdGVkVGFyZ2V0KTtcblxuICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcblxuICAgICAgJChwYXJlbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTtcblxuICAgICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fbWVudSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lJDQuU0hPVyk7XG4gICAgICAkKHBhcmVudCkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lJDQuU0hPVykudHJpZ2dlcigkLkV2ZW50KEV2ZW50JDQuSElEREVOLCByZWxhdGVkVGFyZ2V0KSk7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSQ0KTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEVWRU5UX0tFWSQ0KTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fbWVudSA9IG51bGw7XG5cbiAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKTtcblxuICAgICAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKTtcblxuICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgIH1cbiAgICB9IC8vIFByaXZhdGVcbiAgICA7XG5cbiAgICBfcHJvdG8uX2FkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudCQ0LkNMSUNLLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgX3RoaXMudG9nZ2xlKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LCAkKHRoaXMuX2VsZW1lbnQpLmRhdGEoKSwgY29uZmlnKTtcbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUkNCwgY29uZmlnLCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0TWVudUVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0TWVudUVsZW1lbnQoKSB7XG4gICAgICBpZiAoIXRoaXMuX21lbnUpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcblxuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgdGhpcy5fbWVudSA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yJDQuTUVOVSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX21lbnU7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0UGxhY2VtZW50ID0gZnVuY3Rpb24gX2dldFBsYWNlbWVudCgpIHtcbiAgICAgIHZhciAkcGFyZW50RHJvcGRvd24gPSAkKHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSk7XG4gICAgICB2YXIgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5CT1RUT007IC8vIEhhbmRsZSBkcm9wdXBcblxuICAgICAgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUkNC5EUk9QVVApKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuVE9QO1xuXG4gICAgICAgIGlmICgkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZSQ0Lk1FTlVSSUdIVCkpIHtcbiAgICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlRPUEVORDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ2xhc3NOYW1lJDQuRFJPUFJJR0hUKSkge1xuICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlJJR0hUO1xuICAgICAgfSBlbHNlIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ2xhc3NOYW1lJDQuRFJPUExFRlQpKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuTEVGVDtcbiAgICAgIH0gZWxzZSBpZiAoJCh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUkNC5NRU5VUklHSFQpKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuQk9UVE9NRU5EO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGxhY2VtZW50O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2RldGVjdE5hdmJhciA9IGZ1bmN0aW9uIF9kZXRlY3ROYXZiYXIoKSB7XG4gICAgICByZXR1cm4gJCh0aGlzLl9lbGVtZW50KS5jbG9zZXN0KCcubmF2YmFyJykubGVuZ3RoID4gMDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRPZmZzZXQgPSBmdW5jdGlvbiBfZ2V0T2Zmc2V0KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBvZmZzZXQgPSB7fTtcblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcub2Zmc2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9mZnNldC5mbiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgZGF0YS5vZmZzZXRzID0gX29iamVjdFNwcmVhZCh7fSwgZGF0YS5vZmZzZXRzLCBfdGhpczIuX2NvbmZpZy5vZmZzZXQoZGF0YS5vZmZzZXRzLCBfdGhpczIuX2VsZW1lbnQpIHx8IHt9KTtcbiAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9mZnNldC5vZmZzZXQgPSB0aGlzLl9jb25maWcub2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFBvcHBlckNvbmZpZyA9IGZ1bmN0aW9uIF9nZXRQb3BwZXJDb25maWcoKSB7XG4gICAgICB2YXIgcG9wcGVyQ29uZmlnID0ge1xuICAgICAgICBwbGFjZW1lbnQ6IHRoaXMuX2dldFBsYWNlbWVudCgpLFxuICAgICAgICBtb2RpZmllcnM6IHtcbiAgICAgICAgICBvZmZzZXQ6IHRoaXMuX2dldE9mZnNldCgpLFxuICAgICAgICAgIGZsaXA6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRoaXMuX2NvbmZpZy5mbGlwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiB0aGlzLl9jb25maWcuYm91bmRhcnlcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gRGlzYWJsZSBQb3BwZXIuanMgaWYgd2UgaGF2ZSBhIHN0YXRpYyBkaXNwbGF5XG5cbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuZGlzcGxheSA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgcG9wcGVyQ29uZmlnLm1vZGlmaWVycy5hcHBseVN0eWxlID0ge1xuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwb3BwZXJDb25maWc7XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSQ0KTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDogbnVsbDtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IERyb3Bkb3duKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSQ0LCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBEcm9wZG93bi5fY2xlYXJNZW51cyA9IGZ1bmN0aW9uIF9jbGVhck1lbnVzKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQgJiYgKGV2ZW50LndoaWNoID09PSBSSUdIVF9NT1VTRV9CVVRUT05fV0hJQ0ggfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC53aGljaCAhPT0gVEFCX0tFWUNPREUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRvZ2dsZXMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IkNC5EQVRBX1RPR0dMRSkpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdG9nZ2xlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRvZ2dsZXNbaV0pO1xuXG4gICAgICAgIHZhciBjb250ZXh0ID0gJCh0b2dnbGVzW2ldKS5kYXRhKERBVEFfS0VZJDQpO1xuICAgICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiB0b2dnbGVzW2ldXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LnR5cGUgPT09ICdjbGljaycpIHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0LmNsaWNrRXZlbnQgPSBldmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRyb3Bkb3duTWVudSA9IGNvbnRleHQuX21lbnU7XG5cbiAgICAgICAgaWYgKCEkKHBhcmVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDQuU0hPVykpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2NsaWNrJyAmJiAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSB8fCBldmVudC50eXBlID09PSAna2V5dXAnICYmIGV2ZW50LndoaWNoID09PSBUQUJfS0VZQ09ERSkgJiYgJC5jb250YWlucyhwYXJlbnQsIGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBoaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50JDQuSElERSwgcmVsYXRlZFRhcmdldCk7XG4gICAgICAgICQocGFyZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG5cbiAgICAgICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSByZW1vdmUgdGhlIGV4dHJhXG4gICAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG5cblxuICAgICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgJChkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9mZignbW91c2VvdmVyJywgbnVsbCwgJC5ub29wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvZ2dsZXNbaV0uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgICQoZHJvcGRvd25NZW51KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkNC5TSE9XKTtcbiAgICAgICAgJChwYXJlbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQ0LlNIT1cpLnRyaWdnZXIoJC5FdmVudChFdmVudCQ0LkhJRERFTiwgcmVsYXRlZFRhcmdldCkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0UGFyZW50RnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIHBhcmVudDtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcblxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyZW50IHx8IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gICAgO1xuXG4gICAgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlciA9IGZ1bmN0aW9uIF9kYXRhQXBpS2V5ZG93bkhhbmRsZXIoZXZlbnQpIHtcbiAgICAgIC8vIElmIG5vdCBpbnB1dC90ZXh0YXJlYTpcbiAgICAgIC8vICAtIEFuZCBub3QgYSBrZXkgaW4gUkVHRVhQX0tFWURPV04gPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgICAgLy8gSWYgaW5wdXQvdGV4dGFyZWE6XG4gICAgICAvLyAgLSBJZiBzcGFjZSBrZXkgPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgICAgLy8gIC0gSWYga2V5IGlzIG90aGVyIHRoYW4gZXNjYXBlXG4gICAgICAvLyAgICAtIElmIGtleSBpcyBub3QgdXAgb3IgZG93biA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICAvLyAgICAtIElmIHRyaWdnZXIgaW5zaWRlIHRoZSBtZW51ID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSA/IGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoICE9PSBFU0NBUEVfS0VZQ09ERSAmJiAoZXZlbnQud2hpY2ggIT09IEFSUk9XX0RPV05fS0VZQ09ERSAmJiBldmVudC53aGljaCAhPT0gQVJST1dfVVBfS0VZQ09ERSB8fCAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdChTZWxlY3RvciQ0Lk1FTlUpLmxlbmd0aCkgOiAhUkVHRVhQX0tFWURPV04udGVzdChldmVudC53aGljaCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8ICQodGhpcykuaGFzQ2xhc3MoQ2xhc3NOYW1lJDQuRElTQUJMRUQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzKTtcblxuICAgICAgdmFyIGlzQWN0aXZlID0gJChwYXJlbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQ0LlNIT1cpO1xuXG4gICAgICBpZiAoIWlzQWN0aXZlIHx8IGlzQWN0aXZlICYmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUgfHwgZXZlbnQud2hpY2ggPT09IFNQQUNFX0tFWUNPREUpKSB7XG4gICAgICAgIGlmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUpIHtcbiAgICAgICAgICB2YXIgdG9nZ2xlID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IkNC5EQVRBX1RPR0dMRSk7XG4gICAgICAgICAgJCh0b2dnbGUpLnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMpLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGl0ZW1zID0gW10uc2xpY2UuY2FsbChwYXJlbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3RvciQ0LlZJU0lCTEVfSVRFTVMpKTtcblxuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpbmRleCA9IGl0ZW1zLmluZGV4T2YoZXZlbnQudGFyZ2V0KTtcblxuICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBBUlJPV19VUF9LRVlDT0RFICYmIGluZGV4ID4gMCkge1xuICAgICAgICAvLyBVcFxuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEFSUk9XX0RPV05fS0VZQ09ERSAmJiBpbmRleCA8IGl0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgLy8gRG93blxuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gMDtcbiAgICAgIH1cblxuICAgICAgaXRlbXNbaW5kZXhdLmZvY3VzKCk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhEcm9wZG93biwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kNDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDI7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlJDI7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIERyb3Bkb3duO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJChkb2N1bWVudCkub24oRXZlbnQkNC5LRVlET1dOX0RBVEFfQVBJLCBTZWxlY3RvciQ0LkRBVEFfVE9HR0xFLCBEcm9wZG93bi5fZGF0YUFwaUtleWRvd25IYW5kbGVyKS5vbihFdmVudCQ0LktFWURPV05fREFUQV9BUEksIFNlbGVjdG9yJDQuTUVOVSwgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlcikub24oRXZlbnQkNC5DTElDS19EQVRBX0FQSSArIFwiIFwiICsgRXZlbnQkNC5LRVlVUF9EQVRBX0FQSSwgRHJvcGRvd24uX2NsZWFyTWVudXMpLm9uKEV2ZW50JDQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yJDQuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCh0aGlzKSwgJ3RvZ2dsZScpO1xuICB9KS5vbihFdmVudCQ0LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3RvciQ0LkZPUk1fQ0hJTEQsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfSk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUUkNF0gPSBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUUkNF0uQ29uc3RydWN0b3IgPSBEcm9wZG93bjtcblxuICAkLmZuW05BTUUkNF0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUUkNF0gPSBKUVVFUllfTk9fQ09ORkxJQ1QkNDtcbiAgICByZXR1cm4gRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUkNSA9ICdtb2RhbCc7XG4gIHZhciBWRVJTSU9OJDUgPSAnNC4zLjEnO1xuICB2YXIgREFUQV9LRVkkNSA9ICdicy5tb2RhbCc7XG4gIHZhciBFVkVOVF9LRVkkNSA9IFwiLlwiICsgREFUQV9LRVkkNTtcbiAgdmFyIERBVEFfQVBJX0tFWSQ1ID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkNSA9ICQuZm5bTkFNRSQ1XTtcbiAgdmFyIEVTQ0FQRV9LRVlDT0RFJDEgPSAyNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgRXNjYXBlIChFc2MpIGtleVxuXG4gIHZhciBEZWZhdWx0JDMgPSB7XG4gICAgYmFja2Ryb3A6IHRydWUsXG4gICAga2V5Ym9hcmQ6IHRydWUsXG4gICAgZm9jdXM6IHRydWUsXG4gICAgc2hvdzogdHJ1ZVxuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUkMyA9IHtcbiAgICBiYWNrZHJvcDogJyhib29sZWFufHN0cmluZyknLFxuICAgIGtleWJvYXJkOiAnYm9vbGVhbicsXG4gICAgZm9jdXM6ICdib29sZWFuJyxcbiAgICBzaG93OiAnYm9vbGVhbidcbiAgfTtcbiAgdmFyIEV2ZW50JDUgPSB7XG4gICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVkkNSxcbiAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVkkNSxcbiAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSQ1LFxuICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVkkNSxcbiAgICBGT0NVU0lOOiBcImZvY3VzaW5cIiArIEVWRU5UX0tFWSQ1LFxuICAgIFJFU0laRTogXCJyZXNpemVcIiArIEVWRU5UX0tFWSQ1LFxuICAgIENMSUNLX0RJU01JU1M6IFwiY2xpY2suZGlzbWlzc1wiICsgRVZFTlRfS0VZJDUsXG4gICAgS0VZRE9XTl9ESVNNSVNTOiBcImtleWRvd24uZGlzbWlzc1wiICsgRVZFTlRfS0VZJDUsXG4gICAgTU9VU0VVUF9ESVNNSVNTOiBcIm1vdXNldXAuZGlzbWlzc1wiICsgRVZFTlRfS0VZJDUsXG4gICAgTU9VU0VET1dOX0RJU01JU1M6IFwibW91c2Vkb3duLmRpc21pc3NcIiArIEVWRU5UX0tFWSQ1LFxuICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkkNSArIERBVEFfQVBJX0tFWSQ1XG4gIH07XG4gIHZhciBDbGFzc05hbWUkNSA9IHtcbiAgICBTQ1JPTExBQkxFOiAnbW9kYWwtZGlhbG9nLXNjcm9sbGFibGUnLFxuICAgIFNDUk9MTEJBUl9NRUFTVVJFUjogJ21vZGFsLXNjcm9sbGJhci1tZWFzdXJlJyxcbiAgICBCQUNLRFJPUDogJ21vZGFsLWJhY2tkcm9wJyxcbiAgICBPUEVOOiAnbW9kYWwtb3BlbicsXG4gICAgRkFERTogJ2ZhZGUnLFxuICAgIFNIT1c6ICdzaG93J1xuICB9O1xuICB2YXIgU2VsZWN0b3IkNSA9IHtcbiAgICBESUFMT0c6ICcubW9kYWwtZGlhbG9nJyxcbiAgICBNT0RBTF9CT0RZOiAnLm1vZGFsLWJvZHknLFxuICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwibW9kYWxcIl0nLFxuICAgIERBVEFfRElTTUlTUzogJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScsXG4gICAgRklYRURfQ09OVEVOVDogJy5maXhlZC10b3AsIC5maXhlZC1ib3R0b20sIC5pcy1maXhlZCwgLnN0aWNreS10b3AnLFxuICAgIFNUSUNLWV9DT05URU5UOiAnLnN0aWNreS10b3AnXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIE1vZGFsID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kYWwoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fZGlhbG9nID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yJDUuRElBTE9HKTtcbiAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTtcbiAgICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nID0gZmFsc2U7XG4gICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gMDtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IE1vZGFsLnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUocmVsYXRlZFRhcmdldCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzU2hvd24gPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdyhyZWxhdGVkVGFyZ2V0KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc1Nob3duIHx8IHRoaXMuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICgkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQ1LkZBREUpKSB7XG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBzaG93RXZlbnQgPSAkLkV2ZW50KEV2ZW50JDUuU0hPVywge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0XG4gICAgICB9KTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93biB8fCBzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1Nob3duID0gdHJ1ZTtcblxuICAgICAgdGhpcy5fY2hlY2tTY3JvbGxiYXIoKTtcblxuICAgICAgdGhpcy5fc2V0U2Nyb2xsYmFyKCk7XG5cbiAgICAgIHRoaXMuX2FkanVzdERpYWxvZygpO1xuXG4gICAgICB0aGlzLl9zZXRFc2NhcGVFdmVudCgpO1xuXG4gICAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpO1xuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50JDUuQ0xJQ0tfRElTTUlTUywgU2VsZWN0b3IkNS5EQVRBX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaGlkZShldmVudCk7XG4gICAgICB9KTtcbiAgICAgICQodGhpcy5fZGlhbG9nKS5vbihFdmVudCQ1Lk1PVVNFRE9XTl9ESVNNSVNTLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoX3RoaXMuX2VsZW1lbnQpLm9uZShFdmVudCQ1Lk1PVVNFVVBfRElTTUlTUywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKCQoZXZlbnQudGFyZ2V0KS5pcyhfdGhpcy5fZWxlbWVudCkpIHtcbiAgICAgICAgICAgIF90aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX3Nob3dCYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5fc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5faXNTaG93biB8fCB0aGlzLl9pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaGlkZUV2ZW50ID0gJC5FdmVudChFdmVudCQ1LkhJREUpO1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG5cbiAgICAgIGlmICghdGhpcy5faXNTaG93biB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1Nob3duID0gZmFsc2U7XG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDUuRkFERSk7XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NldEVzY2FwZUV2ZW50KCk7XG5cbiAgICAgIHRoaXMuX3NldFJlc2l6ZUV2ZW50KCk7XG5cbiAgICAgICQoZG9jdW1lbnQpLm9mZihFdmVudCQ1LkZPQ1VTSU4pO1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkNS5TSE9XKTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEV2ZW50JDUuQ0xJQ0tfRElTTUlTUyk7XG4gICAgICAkKHRoaXMuX2RpYWxvZykub2ZmKEV2ZW50JDUuTU9VU0VET1dOX0RJU01JU1MpO1xuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5faGlkZU1vZGFsKGV2ZW50KTtcbiAgICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2hpZGVNb2RhbCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICBbd2luZG93LCB0aGlzLl9lbGVtZW50LCB0aGlzLl9kaWFsb2ddLmZvckVhY2goZnVuY3Rpb24gKGh0bWxFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiAkKGh0bWxFbGVtZW50KS5vZmYoRVZFTlRfS0VZJDUpO1xuICAgICAgfSk7XG4gICAgICAvKipcbiAgICAgICAqIGBkb2N1bWVudGAgaGFzIDIgZXZlbnRzIGBFdmVudC5GT0NVU0lOYCBhbmQgYEV2ZW50LkNMSUNLX0RBVEFfQVBJYFxuICAgICAgICogRG8gbm90IG1vdmUgYGRvY3VtZW50YCBpbiBgaHRtbEVsZW1lbnRzYCBhcnJheVxuICAgICAgICogSXQgd2lsbCByZW1vdmUgYEV2ZW50LkNMSUNLX0RBVEFfQVBJYCBldmVudCB0aGF0IHNob3VsZCByZW1haW5cbiAgICAgICAqL1xuXG4gICAgICAkKGRvY3VtZW50KS5vZmYoRXZlbnQkNS5GT0NVU0lOKTtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSQ1KTtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2RpYWxvZyA9IG51bGw7XG4gICAgICB0aGlzLl9iYWNrZHJvcCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1Nob3duID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nID0gbnVsbDtcbiAgICAgIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBudWxsO1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gbnVsbDtcbiAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmhhbmRsZVVwZGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuX2FkanVzdERpYWxvZygpO1xuICAgIH0gLy8gUHJpdmF0ZVxuICAgIDtcblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQkMywgY29uZmlnKTtcbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUkNSwgY29uZmlnLCBEZWZhdWx0VHlwZSQzKTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fc2hvd0VsZW1lbnQgPSBmdW5jdGlvbiBfc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciB0cmFuc2l0aW9uID0gJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUkNS5GQURFKTtcblxuICAgICAgaWYgKCF0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUgfHwgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAvLyBEb24ndCBtb3ZlIG1vZGFsJ3MgRE9NIHBvc2l0aW9uXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcsIHRydWUpO1xuXG4gICAgICBpZiAoJCh0aGlzLl9kaWFsb2cpLmhhc0NsYXNzKENsYXNzTmFtZSQ1LlNDUk9MTEFCTEUpKSB7XG4gICAgICAgIHRoaXMuX2RpYWxvZy5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yJDUuTU9EQUxfQk9EWSkuc2Nyb2xsVG9wID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc2Nyb2xsVG9wID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgVXRpbC5yZWZsb3codGhpcy5fZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lJDUuU0hPVyk7XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuZm9jdXMpIHtcbiAgICAgICAgdGhpcy5fZW5mb3JjZUZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzaG93bkV2ZW50ID0gJC5FdmVudChFdmVudCQ1LlNIT1dOLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXRcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgdHJhbnNpdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24gdHJhbnNpdGlvbkNvbXBsZXRlKCkge1xuICAgICAgICBpZiAoX3RoaXMzLl9jb25maWcuZm9jdXMpIHtcbiAgICAgICAgICBfdGhpczMuX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICAgICQoX3RoaXMzLl9lbGVtZW50KS50cmlnZ2VyKHNob3duRXZlbnQpO1xuICAgICAgfTtcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZGlhbG9nKTtcbiAgICAgICAgJCh0aGlzLl9kaWFsb2cpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCB0cmFuc2l0aW9uQ29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2l0aW9uQ29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9lbmZvcmNlRm9jdXMgPSBmdW5jdGlvbiBfZW5mb3JjZUZvY3VzKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICQoZG9jdW1lbnQpLm9mZihFdmVudCQ1LkZPQ1VTSU4pIC8vIEd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vcFxuICAgICAgLm9uKEV2ZW50JDUuRk9DVVNJTiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChkb2N1bWVudCAhPT0gZXZlbnQudGFyZ2V0ICYmIF90aGlzNC5fZWxlbWVudCAhPT0gZXZlbnQudGFyZ2V0ICYmICQoX3RoaXM0Ll9lbGVtZW50KS5oYXMoZXZlbnQudGFyZ2V0KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBfdGhpczQuX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5fc2V0RXNjYXBlRXZlbnQgPSBmdW5jdGlvbiBfc2V0RXNjYXBlRXZlbnQoKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzU2hvd24gJiYgdGhpcy5fY29uZmlnLmtleWJvYXJkKSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQkNS5LRVlET1dOX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUkMSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgX3RoaXM1LmhpZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5faXNTaG93bikge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9mZihFdmVudCQ1LktFWURPV05fRElTTUlTUyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fc2V0UmVzaXplRXZlbnQgPSBmdW5jdGlvbiBfc2V0UmVzaXplRXZlbnQoKSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzU2hvd24pIHtcbiAgICAgICAgJCh3aW5kb3cpLm9uKEV2ZW50JDUuUkVTSVpFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM2LmhhbmRsZVVwZGF0ZShldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJCh3aW5kb3cpLm9mZihFdmVudCQ1LlJFU0laRSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5faGlkZU1vZGFsID0gZnVuY3Rpb24gX2hpZGVNb2RhbCgpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcpO1xuXG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcblxuICAgICAgdGhpcy5fc2hvd0JhY2tkcm9wKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJChkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkNS5PUEVOKTtcblxuICAgICAgICBfdGhpczcuX3Jlc2V0QWRqdXN0bWVudHMoKTtcblxuICAgICAgICBfdGhpczcuX3Jlc2V0U2Nyb2xsYmFyKCk7XG5cbiAgICAgICAgJChfdGhpczcuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQkNS5ISURERU4pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5fcmVtb3ZlQmFja2Ryb3AgPSBmdW5jdGlvbiBfcmVtb3ZlQmFja2Ryb3AoKSB7XG4gICAgICBpZiAodGhpcy5fYmFja2Ryb3ApIHtcbiAgICAgICAgJCh0aGlzLl9iYWNrZHJvcCkucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zaG93QmFja2Ryb3AgPSBmdW5jdGlvbiBfc2hvd0JhY2tkcm9wKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgICAgdmFyIGFuaW1hdGUgPSAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQ1LkZBREUpID8gQ2xhc3NOYW1lJDUuRkFERSA6ICcnO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93biAmJiB0aGlzLl9jb25maWcuYmFja2Ryb3ApIHtcbiAgICAgICAgdGhpcy5fYmFja2Ryb3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fYmFja2Ryb3AuY2xhc3NOYW1lID0gQ2xhc3NOYW1lJDUuQkFDS0RST1A7XG5cbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICB0aGlzLl9iYWNrZHJvcC5jbGFzc0xpc3QuYWRkKGFuaW1hdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh0aGlzLl9iYWNrZHJvcCkuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSk7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQkNS5DTElDS19ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoX3RoaXM4Ll9pZ25vcmVCYWNrZHJvcENsaWNrKSB7XG4gICAgICAgICAgICBfdGhpczguX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF90aGlzOC5fY29uZmlnLmJhY2tkcm9wID09PSAnc3RhdGljJykge1xuICAgICAgICAgICAgX3RoaXM4Ll9lbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzOC5oaWRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgIFV0aWwucmVmbG93KHRoaXMuX2JhY2tkcm9wKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQodGhpcy5fYmFja2Ryb3ApLmFkZENsYXNzKENsYXNzTmFtZSQ1LlNIT1cpO1xuXG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWFuaW1hdGUpIHtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBiYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fYmFja2Ryb3ApO1xuICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY2FsbGJhY2spLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGJhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzU2hvd24gJiYgdGhpcy5fYmFja2Ryb3ApIHtcbiAgICAgICAgJCh0aGlzLl9iYWNrZHJvcCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDUuU0hPVyk7XG5cbiAgICAgICAgdmFyIGNhbGxiYWNrUmVtb3ZlID0gZnVuY3Rpb24gY2FsbGJhY2tSZW1vdmUoKSB7XG4gICAgICAgICAgX3RoaXM4Ll9yZW1vdmVCYWNrZHJvcCgpO1xuXG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUkNS5GQURFKSkge1xuICAgICAgICAgIHZhciBfYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2JhY2tkcm9wKTtcblxuICAgICAgICAgICQodGhpcy5fYmFja2Ryb3ApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjYWxsYmFja1JlbW92ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoX2JhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFja1JlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gdGhlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcbiAgICAvLyB0b2RvIChmYXQpOiB0aGVzZSBzaG91bGQgcHJvYmFibHkgYmUgcmVmYWN0b3JlZCBvdXQgb2YgbW9kYWwuanNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgO1xuXG4gICAgX3Byb3RvLl9hZGp1c3REaWFsb2cgPSBmdW5jdGlvbiBfYWRqdXN0RGlhbG9nKCkge1xuICAgICAgdmFyIGlzTW9kYWxPdmVyZmxvd2luZyA9IHRoaXMuX2VsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcblxuICAgICAgaWYgKCF0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyAmJiBpc01vZGFsT3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdCA9IHRoaXMuX3Njcm9sbGJhcldpZHRoICsgXCJweFwiO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgJiYgIWlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IHRoaXMuX3Njcm9sbGJhcldpZHRoICsgXCJweFwiO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX3Jlc2V0QWRqdXN0bWVudHMgPSBmdW5jdGlvbiBfcmVzZXRBZGp1c3RtZW50cygpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSAnJztcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gJyc7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2hlY2tTY3JvbGxiYXIgPSBmdW5jdGlvbiBfY2hlY2tTY3JvbGxiYXIoKSB7XG4gICAgICB2YXIgcmVjdCA9IGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyA9IHJlY3QubGVmdCArIHJlY3QucmlnaHQgPCB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gdGhpcy5fZ2V0U2Nyb2xsYmFyV2lkdGgoKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiBfc2V0U2Nyb2xsYmFyKCkge1xuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc0JvZHlPdmVyZmxvd2luZykge1xuICAgICAgICAvLyBOb3RlOiBET01Ob2RlLnN0eWxlLnBhZGRpbmdSaWdodCByZXR1cm5zIHRoZSBhY3R1YWwgdmFsdWUgb3IgJycgaWYgbm90IHNldFxuICAgICAgICAvLyAgIHdoaWxlICQoRE9NTm9kZSkuY3NzKCdwYWRkaW5nLXJpZ2h0JykgcmV0dXJucyB0aGUgY2FsY3VsYXRlZCB2YWx1ZSBvciAwIGlmIG5vdCBzZXRcbiAgICAgICAgdmFyIGZpeGVkQ29udGVudCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3RvciQ1LkZJWEVEX0NPTlRFTlQpKTtcbiAgICAgICAgdmFyIHN0aWNreUNvbnRlbnQgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IkNS5TVElDS1lfQ09OVEVOVCkpOyAvLyBBZGp1c3QgZml4ZWQgY29udGVudCBwYWRkaW5nXG5cbiAgICAgICAgJChmaXhlZENvbnRlbnQpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGFjdHVhbFBhZGRpbmcgPSBlbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodDtcbiAgICAgICAgICB2YXIgY2FsY3VsYXRlZFBhZGRpbmcgPSAkKGVsZW1lbnQpLmNzcygncGFkZGluZy1yaWdodCcpO1xuICAgICAgICAgICQoZWxlbWVudCkuZGF0YSgncGFkZGluZy1yaWdodCcsIGFjdHVhbFBhZGRpbmcpLmNzcygncGFkZGluZy1yaWdodCcsIHBhcnNlRmxvYXQoY2FsY3VsYXRlZFBhZGRpbmcpICsgX3RoaXM5Ll9zY3JvbGxiYXJXaWR0aCArIFwicHhcIik7XG4gICAgICAgIH0pOyAvLyBBZGp1c3Qgc3RpY2t5IGNvbnRlbnQgbWFyZ2luXG5cbiAgICAgICAgJChzdGlja3lDb250ZW50KS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgIHZhciBhY3R1YWxNYXJnaW4gPSBlbGVtZW50LnN0eWxlLm1hcmdpblJpZ2h0O1xuICAgICAgICAgIHZhciBjYWxjdWxhdGVkTWFyZ2luID0gJChlbGVtZW50KS5jc3MoJ21hcmdpbi1yaWdodCcpO1xuICAgICAgICAgICQoZWxlbWVudCkuZGF0YSgnbWFyZ2luLXJpZ2h0JywgYWN0dWFsTWFyZ2luKS5jc3MoJ21hcmdpbi1yaWdodCcsIHBhcnNlRmxvYXQoY2FsY3VsYXRlZE1hcmdpbikgLSBfdGhpczkuX3Njcm9sbGJhcldpZHRoICsgXCJweFwiKTtcbiAgICAgICAgfSk7IC8vIEFkanVzdCBib2R5IHBhZGRpbmdcblxuICAgICAgICB2YXIgYWN0dWFsUGFkZGluZyA9IGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0O1xuICAgICAgICB2YXIgY2FsY3VsYXRlZFBhZGRpbmcgPSAkKGRvY3VtZW50LmJvZHkpLmNzcygncGFkZGluZy1yaWdodCcpO1xuICAgICAgICAkKGRvY3VtZW50LmJvZHkpLmRhdGEoJ3BhZGRpbmctcmlnaHQnLCBhY3R1YWxQYWRkaW5nKS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRQYWRkaW5nKSArIHRoaXMuX3Njcm9sbGJhcldpZHRoICsgXCJweFwiKTtcbiAgICAgIH1cblxuICAgICAgJChkb2N1bWVudC5ib2R5KS5hZGRDbGFzcyhDbGFzc05hbWUkNS5PUEVOKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9yZXNldFNjcm9sbGJhciA9IGZ1bmN0aW9uIF9yZXNldFNjcm9sbGJhcigpIHtcbiAgICAgIC8vIFJlc3RvcmUgZml4ZWQgY29udGVudCBwYWRkaW5nXG4gICAgICB2YXIgZml4ZWRDb250ZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yJDUuRklYRURfQ09OVEVOVCkpO1xuICAgICAgJChmaXhlZENvbnRlbnQpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgIHZhciBwYWRkaW5nID0gJChlbGVtZW50KS5kYXRhKCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgICQoZWxlbWVudCkucmVtb3ZlRGF0YSgncGFkZGluZy1yaWdodCcpO1xuICAgICAgICBlbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IHBhZGRpbmcgPyBwYWRkaW5nIDogJyc7XG4gICAgICB9KTsgLy8gUmVzdG9yZSBzdGlja3kgY29udGVudFxuXG4gICAgICB2YXIgZWxlbWVudHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJcIiArIFNlbGVjdG9yJDUuU1RJQ0tZX0NPTlRFTlQpKTtcbiAgICAgICQoZWxlbWVudHMpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgIHZhciBtYXJnaW4gPSAkKGVsZW1lbnQpLmRhdGEoJ21hcmdpbi1yaWdodCcpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgbWFyZ2luICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICQoZWxlbWVudCkuY3NzKCdtYXJnaW4tcmlnaHQnLCBtYXJnaW4pLnJlbW92ZURhdGEoJ21hcmdpbi1yaWdodCcpO1xuICAgICAgICB9XG4gICAgICB9KTsgLy8gUmVzdG9yZSBib2R5IHBhZGRpbmdcblxuICAgICAgdmFyIHBhZGRpbmcgPSAkKGRvY3VtZW50LmJvZHkpLmRhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICQoZG9jdW1lbnQuYm9keSkucmVtb3ZlRGF0YSgncGFkZGluZy1yaWdodCcpO1xuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBwYWRkaW5nID8gcGFkZGluZyA6ICcnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFNjcm9sbGJhcldpZHRoID0gZnVuY3Rpb24gX2dldFNjcm9sbGJhcldpZHRoKCkge1xuICAgICAgLy8gdGh4IGQud2Fsc2hcbiAgICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSBDbGFzc05hbWUkNS5TQ1JPTExCQVJfTUVBU1VSRVI7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG4gICAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSBzY3JvbGxEaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG4gICAgICByZXR1cm4gc2Nyb2xsYmFyV2lkdGg7XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcsIHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSQ1KTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQkMywgJCh0aGlzKS5kYXRhKCksIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KTtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IE1vZGFsKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSQ1LCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgICB9IGVsc2UgaWYgKF9jb25maWcuc2hvdykge1xuICAgICAgICAgIGRhdGEuc2hvdyhyZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhNb2RhbCwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kNTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDM7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIE1vZGFsO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJChkb2N1bWVudCkub24oRXZlbnQkNS5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IkNS5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgdmFyIHRhcmdldDtcbiAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7XG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIH1cblxuICAgIHZhciBjb25maWcgPSAkKHRhcmdldCkuZGF0YShEQVRBX0tFWSQ1KSA/ICd0b2dnbGUnIDogX29iamVjdFNwcmVhZCh7fSwgJCh0YXJnZXQpLmRhdGEoKSwgJCh0aGlzKS5kYXRhKCkpO1xuXG4gICAgaWYgKHRoaXMudGFnTmFtZSA9PT0gJ0EnIHx8IHRoaXMudGFnTmFtZSA9PT0gJ0FSRUEnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHZhciAkdGFyZ2V0ID0gJCh0YXJnZXQpLm9uZShFdmVudCQ1LlNIT1csIGZ1bmN0aW9uIChzaG93RXZlbnQpIHtcbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgLy8gT25seSByZWdpc3RlciBmb2N1cyByZXN0b3JlciBpZiBtb2RhbCB3aWxsIGFjdHVhbGx5IGdldCBzaG93blxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICR0YXJnZXQub25lKEV2ZW50JDUuSElEREVOLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICgkKF90aGlzMTApLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgX3RoaXMxMC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIE1vZGFsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKHRhcmdldCksIGNvbmZpZywgdGhpcyk7XG4gIH0pO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FJDVdID0gTW9kYWwuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FJDVdLkNvbnN0cnVjdG9yID0gTW9kYWw7XG5cbiAgJC5mbltOQU1FJDVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FJDVdID0gSlFVRVJZX05PX0NPTkZMSUNUJDU7XG4gICAgcmV0dXJuIE1vZGFsLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuMy4xKTogdG9vbHMvc2FuaXRpemVyLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuICB2YXIgdXJpQXR0cnMgPSBbJ2JhY2tncm91bmQnLCAnY2l0ZScsICdocmVmJywgJ2l0ZW10eXBlJywgJ2xvbmdkZXNjJywgJ3Bvc3RlcicsICdzcmMnLCAneGxpbms6aHJlZiddO1xuICB2YXIgQVJJQV9BVFRSSUJVVEVfUEFUVEVSTiA9IC9eYXJpYS1bXFx3LV0qJC9pO1xuICB2YXIgRGVmYXVsdFdoaXRlbGlzdCA9IHtcbiAgICAvLyBHbG9iYWwgYXR0cmlidXRlcyBhbGxvd2VkIG9uIGFueSBzdXBwbGllZCBlbGVtZW50IGJlbG93LlxuICAgICcqJzogWydjbGFzcycsICdkaXInLCAnaWQnLCAnbGFuZycsICdyb2xlJywgQVJJQV9BVFRSSUJVVEVfUEFUVEVSTl0sXG4gICAgYTogWyd0YXJnZXQnLCAnaHJlZicsICd0aXRsZScsICdyZWwnXSxcbiAgICBhcmVhOiBbXSxcbiAgICBiOiBbXSxcbiAgICBicjogW10sXG4gICAgY29sOiBbXSxcbiAgICBjb2RlOiBbXSxcbiAgICBkaXY6IFtdLFxuICAgIGVtOiBbXSxcbiAgICBocjogW10sXG4gICAgaDE6IFtdLFxuICAgIGgyOiBbXSxcbiAgICBoMzogW10sXG4gICAgaDQ6IFtdLFxuICAgIGg1OiBbXSxcbiAgICBoNjogW10sXG4gICAgaTogW10sXG4gICAgaW1nOiBbJ3NyYycsICdhbHQnLCAndGl0bGUnLCAnd2lkdGgnLCAnaGVpZ2h0J10sXG4gICAgbGk6IFtdLFxuICAgIG9sOiBbXSxcbiAgICBwOiBbXSxcbiAgICBwcmU6IFtdLFxuICAgIHM6IFtdLFxuICAgIHNtYWxsOiBbXSxcbiAgICBzcGFuOiBbXSxcbiAgICBzdWI6IFtdLFxuICAgIHN1cDogW10sXG4gICAgc3Ryb25nOiBbXSxcbiAgICB1OiBbXSxcbiAgICB1bDogW11cbiAgICAvKipcbiAgICAgKiBBIHBhdHRlcm4gdGhhdCByZWNvZ25pemVzIGEgY29tbW9ubHkgdXNlZnVsIHN1YnNldCBvZiBVUkxzIHRoYXQgYXJlIHNhZmUuXG4gICAgICpcbiAgICAgKiBTaG91dG91dCB0byBBbmd1bGFyIDcgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzcuMi40L3BhY2thZ2VzL2NvcmUvc3JjL3Nhbml0aXphdGlvbi91cmxfc2FuaXRpemVyLnRzXG4gICAgICovXG5cbiAgfTtcbiAgdmFyIFNBRkVfVVJMX1BBVFRFUk4gPSAvXig/Oig/Omh0dHBzP3xtYWlsdG98ZnRwfHRlbHxmaWxlKTp8W14mOi8/I10qKD86Wy8/I118JCkpL2dpO1xuICAvKipcbiAgICogQSBwYXR0ZXJuIHRoYXQgbWF0Y2hlcyBzYWZlIGRhdGEgVVJMcy4gT25seSBtYXRjaGVzIGltYWdlLCB2aWRlbyBhbmQgYXVkaW8gdHlwZXMuXG4gICAqXG4gICAqIFNob3V0b3V0IHRvIEFuZ3VsYXIgNyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvNy4yLjQvcGFja2FnZXMvY29yZS9zcmMvc2FuaXRpemF0aW9uL3VybF9zYW5pdGl6ZXIudHNcbiAgICovXG5cbiAgdmFyIERBVEFfVVJMX1BBVFRFUk4gPSAvXmRhdGE6KD86aW1hZ2VcXC8oPzpibXB8Z2lmfGpwZWd8anBnfHBuZ3x0aWZmfHdlYnApfHZpZGVvXFwvKD86bXBlZ3xtcDR8b2dnfHdlYm0pfGF1ZGlvXFwvKD86bXAzfG9nYXxvZ2d8b3B1cykpO2Jhc2U2NCxbYS16MC05Ky9dKz0qJC9pO1xuXG4gIGZ1bmN0aW9uIGFsbG93ZWRBdHRyaWJ1dGUoYXR0ciwgYWxsb3dlZEF0dHJpYnV0ZUxpc3QpIHtcbiAgICB2YXIgYXR0ck5hbWUgPSBhdHRyLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBpZiAoYWxsb3dlZEF0dHJpYnV0ZUxpc3QuaW5kZXhPZihhdHRyTmFtZSkgIT09IC0xKSB7XG4gICAgICBpZiAodXJpQXR0cnMuaW5kZXhPZihhdHRyTmFtZSkgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKGF0dHIubm9kZVZhbHVlLm1hdGNoKFNBRkVfVVJMX1BBVFRFUk4pIHx8IGF0dHIubm9kZVZhbHVlLm1hdGNoKERBVEFfVVJMX1BBVFRFUk4pKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHJlZ0V4cCA9IGFsbG93ZWRBdHRyaWJ1dGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoYXR0clJlZ2V4KSB7XG4gICAgICByZXR1cm4gYXR0clJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwO1xuICAgIH0pOyAvLyBDaGVjayBpZiBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB2YWxpZGF0ZXMgdGhlIGF0dHJpYnV0ZS5cblxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gcmVnRXhwLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGF0dHJOYW1lLm1hdGNoKHJlZ0V4cFtpXSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2FuaXRpemVIdG1sKHVuc2FmZUh0bWwsIHdoaXRlTGlzdCwgc2FuaXRpemVGbikge1xuICAgIGlmICh1bnNhZmVIdG1sLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHVuc2FmZUh0bWw7XG4gICAgfVxuXG4gICAgaWYgKHNhbml0aXplRm4gJiYgdHlwZW9mIHNhbml0aXplRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBzYW5pdGl6ZUZuKHVuc2FmZUh0bWwpO1xuICAgIH1cblxuICAgIHZhciBkb21QYXJzZXIgPSBuZXcgd2luZG93LkRPTVBhcnNlcigpO1xuICAgIHZhciBjcmVhdGVkRG9jdW1lbnQgPSBkb21QYXJzZXIucGFyc2VGcm9tU3RyaW5nKHVuc2FmZUh0bWwsICd0ZXh0L2h0bWwnKTtcbiAgICB2YXIgd2hpdGVsaXN0S2V5cyA9IE9iamVjdC5rZXlzKHdoaXRlTGlzdCk7XG4gICAgdmFyIGVsZW1lbnRzID0gW10uc2xpY2UuY2FsbChjcmVhdGVkRG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKCcqJykpO1xuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaSwgbGVuKSB7XG4gICAgICB2YXIgZWwgPSBlbGVtZW50c1tpXTtcbiAgICAgIHZhciBlbE5hbWUgPSBlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBpZiAod2hpdGVsaXN0S2V5cy5pbmRleE9mKGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpID09PSAtMSkge1xuICAgICAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICAgIH1cblxuICAgICAgdmFyIGF0dHJpYnV0ZUxpc3QgPSBbXS5zbGljZS5jYWxsKGVsLmF0dHJpYnV0ZXMpO1xuICAgICAgdmFyIHdoaXRlbGlzdGVkQXR0cmlidXRlcyA9IFtdLmNvbmNhdCh3aGl0ZUxpc3RbJyonXSB8fCBbXSwgd2hpdGVMaXN0W2VsTmFtZV0gfHwgW10pO1xuICAgICAgYXR0cmlidXRlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICAgIGlmICghYWxsb3dlZEF0dHJpYnV0ZShhdHRyLCB3aGl0ZWxpc3RlZEF0dHJpYnV0ZXMpKSB7XG4gICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGF0dHIubm9kZU5hbWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgX3JldCA9IF9sb29wKGksIGxlbik7XG5cbiAgICAgIGlmIChfcmV0ID09PSBcImNvbnRpbnVlXCIpIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVkRG9jdW1lbnQuYm9keS5pbm5lckhUTUw7XG4gIH1cblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUkNiA9ICd0b29sdGlwJztcbiAgdmFyIFZFUlNJT04kNiA9ICc0LjMuMSc7XG4gIHZhciBEQVRBX0tFWSQ2ID0gJ2JzLnRvb2x0aXAnO1xuICB2YXIgRVZFTlRfS0VZJDYgPSBcIi5cIiArIERBVEFfS0VZJDY7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkNiA9ICQuZm5bTkFNRSQ2XTtcbiAgdmFyIENMQVNTX1BSRUZJWCA9ICdicy10b29sdGlwJztcbiAgdmFyIEJTQ0xTX1BSRUZJWF9SRUdFWCA9IG5ldyBSZWdFeHAoXCIoXnxcXFxccylcIiArIENMQVNTX1BSRUZJWCArIFwiXFxcXFMrXCIsICdnJyk7XG4gIHZhciBESVNBTExPV0VEX0FUVFJJQlVURVMgPSBbJ3Nhbml0aXplJywgJ3doaXRlTGlzdCcsICdzYW5pdGl6ZUZuJ107XG4gIHZhciBEZWZhdWx0VHlwZSQ0ID0ge1xuICAgIGFuaW1hdGlvbjogJ2Jvb2xlYW4nLFxuICAgIHRlbXBsYXRlOiAnc3RyaW5nJyxcbiAgICB0aXRsZTogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknLFxuICAgIHRyaWdnZXI6ICdzdHJpbmcnLFxuICAgIGRlbGF5OiAnKG51bWJlcnxvYmplY3QpJyxcbiAgICBodG1sOiAnYm9vbGVhbicsXG4gICAgc2VsZWN0b3I6ICcoc3RyaW5nfGJvb2xlYW4pJyxcbiAgICBwbGFjZW1lbnQ6ICcoc3RyaW5nfGZ1bmN0aW9uKScsXG4gICAgb2Zmc2V0OiAnKG51bWJlcnxzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgICBjb250YWluZXI6ICcoc3RyaW5nfGVsZW1lbnR8Ym9vbGVhbiknLFxuICAgIGZhbGxiYWNrUGxhY2VtZW50OiAnKHN0cmluZ3xhcnJheSknLFxuICAgIGJvdW5kYXJ5OiAnKHN0cmluZ3xlbGVtZW50KScsXG4gICAgc2FuaXRpemU6ICdib29sZWFuJyxcbiAgICBzYW5pdGl6ZUZuOiAnKG51bGx8ZnVuY3Rpb24pJyxcbiAgICB3aGl0ZUxpc3Q6ICdvYmplY3QnXG4gIH07XG4gIHZhciBBdHRhY2htZW50TWFwJDEgPSB7XG4gICAgQVVUTzogJ2F1dG8nLFxuICAgIFRPUDogJ3RvcCcsXG4gICAgUklHSFQ6ICdyaWdodCcsXG4gICAgQk9UVE9NOiAnYm90dG9tJyxcbiAgICBMRUZUOiAnbGVmdCdcbiAgfTtcbiAgdmFyIERlZmF1bHQkNCA9IHtcbiAgICBhbmltYXRpb246IHRydWUsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidG9vbHRpcFwiIHJvbGU9XCJ0b29sdGlwXCI+JyArICc8ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj4nICsgJzxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+JyxcbiAgICB0cmlnZ2VyOiAnaG92ZXIgZm9jdXMnLFxuICAgIHRpdGxlOiAnJyxcbiAgICBkZWxheTogMCxcbiAgICBodG1sOiBmYWxzZSxcbiAgICBzZWxlY3RvcjogZmFsc2UsXG4gICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICBvZmZzZXQ6IDAsXG4gICAgY29udGFpbmVyOiBmYWxzZSxcbiAgICBmYWxsYmFja1BsYWNlbWVudDogJ2ZsaXAnLFxuICAgIGJvdW5kYXJ5OiAnc2Nyb2xsUGFyZW50JyxcbiAgICBzYW5pdGl6ZTogdHJ1ZSxcbiAgICBzYW5pdGl6ZUZuOiBudWxsLFxuICAgIHdoaXRlTGlzdDogRGVmYXVsdFdoaXRlbGlzdFxuICB9O1xuICB2YXIgSG92ZXJTdGF0ZSA9IHtcbiAgICBTSE9XOiAnc2hvdycsXG4gICAgT1VUOiAnb3V0J1xuICB9O1xuICB2YXIgRXZlbnQkNiA9IHtcbiAgICBISURFOiBcImhpZGVcIiArIEVWRU5UX0tFWSQ2LFxuICAgIEhJRERFTjogXCJoaWRkZW5cIiArIEVWRU5UX0tFWSQ2LFxuICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZJDYsXG4gICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSQ2LFxuICAgIElOU0VSVEVEOiBcImluc2VydGVkXCIgKyBFVkVOVF9LRVkkNixcbiAgICBDTElDSzogXCJjbGlja1wiICsgRVZFTlRfS0VZJDYsXG4gICAgRk9DVVNJTjogXCJmb2N1c2luXCIgKyBFVkVOVF9LRVkkNixcbiAgICBGT0NVU09VVDogXCJmb2N1c291dFwiICsgRVZFTlRfS0VZJDYsXG4gICAgTU9VU0VFTlRFUjogXCJtb3VzZWVudGVyXCIgKyBFVkVOVF9LRVkkNixcbiAgICBNT1VTRUxFQVZFOiBcIm1vdXNlbGVhdmVcIiArIEVWRU5UX0tFWSQ2XG4gIH07XG4gIHZhciBDbGFzc05hbWUkNiA9IHtcbiAgICBGQURFOiAnZmFkZScsXG4gICAgU0hPVzogJ3Nob3cnXG4gIH07XG4gIHZhciBTZWxlY3RvciQ2ID0ge1xuICAgIFRPT0xUSVA6ICcudG9vbHRpcCcsXG4gICAgVE9PTFRJUF9JTk5FUjogJy50b29sdGlwLWlubmVyJyxcbiAgICBBUlJPVzogJy5hcnJvdydcbiAgfTtcbiAgdmFyIFRyaWdnZXIgPSB7XG4gICAgSE9WRVI6ICdob3ZlcicsXG4gICAgRk9DVVM6ICdmb2N1cycsXG4gICAgQ0xJQ0s6ICdjbGljaycsXG4gICAgTUFOVUFMOiAnbWFudWFsJ1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBUb29sdGlwID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVG9vbHRpcChlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2sgZm9yIFBvcHBlciBkZXBlbmRlbmN5XG4gICAgICAgKiBQb3BwZXIgLSBodHRwczovL3BvcHBlci5qcy5vcmdcbiAgICAgICAqL1xuICAgICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgdG9vbHRpcHMgcmVxdWlyZSBQb3BwZXIuanMgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy8pJyk7XG4gICAgICB9IC8vIHByaXZhdGVcblxuXG4gICAgICB0aGlzLl9pc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgdGhpcy5fdGltZW91dCA9IDA7XG4gICAgICB0aGlzLl9ob3ZlclN0YXRlID0gJyc7XG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyID0ge307XG4gICAgICB0aGlzLl9wb3BwZXIgPSBudWxsOyAvLyBQcm90ZWN0ZWRcblxuICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLnRpcCA9IG51bGw7XG5cbiAgICAgIHRoaXMuX3NldExpc3RlbmVycygpO1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gVG9vbHRpcC5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8uZW5hYmxlID0gZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc2FibGUgPSBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgICAgdGhpcy5faXNFbmFibGVkID0gZmFsc2U7XG4gICAgfTtcblxuICAgIF9wcm90by50b2dnbGVFbmFibGVkID0gZnVuY3Rpb24gdG9nZ2xlRW5hYmxlZCgpIHtcbiAgICAgIHRoaXMuX2lzRW5hYmxlZCA9ICF0aGlzLl9pc0VuYWJsZWQ7XG4gICAgfTtcblxuICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoZXZlbnQpIHtcbiAgICAgIGlmICghdGhpcy5faXNFbmFibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgIHZhciBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTtcbiAgICAgICAgdmFyIGNvbnRleHQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSk7XG5cbiAgICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGV2ZW50LmN1cnJlbnRUYXJnZXQsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpO1xuICAgICAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXIuY2xpY2sgPSAhY29udGV4dC5fYWN0aXZlVHJpZ2dlci5jbGljaztcblxuICAgICAgICBpZiAoY29udGV4dC5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7XG4gICAgICAgICAgY29udGV4dC5fZW50ZXIobnVsbCwgY29udGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29udGV4dC5fbGVhdmUobnVsbCwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5oYXNDbGFzcyhDbGFzc05hbWUkNi5TSE9XKSkge1xuICAgICAgICAgIHRoaXMuX2xlYXZlKG51bGwsIHRoaXMpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZW50ZXIobnVsbCwgdGhpcyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLmVsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVkpO1xuICAgICAgJCh0aGlzLmVsZW1lbnQpLm9mZih0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0tFWSk7XG4gICAgICAkKHRoaXMuZWxlbWVudCkuY2xvc2VzdCgnLm1vZGFsJykub2ZmKCdoaWRlLmJzLm1vZGFsJyk7XG5cbiAgICAgIGlmICh0aGlzLnRpcCkge1xuICAgICAgICAkKHRoaXMudGlwKS5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNFbmFibGVkID0gbnVsbDtcbiAgICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsO1xuICAgICAgdGhpcy5faG92ZXJTdGF0ZSA9IG51bGw7XG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyID0gbnVsbDtcblxuICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuICAgICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuY29uZmlnID0gbnVsbDtcbiAgICAgIHRoaXMudGlwID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCQodGhpcy5lbGVtZW50KS5jc3MoJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHVzZSBzaG93IG9uIHZpc2libGUgZWxlbWVudHMnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNob3dFdmVudCA9ICQuRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XKTtcblxuICAgICAgaWYgKHRoaXMuaXNXaXRoQ29udGVudCgpICYmIHRoaXMuX2lzRW5hYmxlZCkge1xuICAgICAgICAkKHRoaXMuZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuICAgICAgICB2YXIgc2hhZG93Um9vdCA9IFV0aWwuZmluZFNoYWRvd1Jvb3QodGhpcy5lbGVtZW50KTtcbiAgICAgICAgdmFyIGlzSW5UaGVEb20gPSAkLmNvbnRhaW5zKHNoYWRvd1Jvb3QgIT09IG51bGwgPyBzaGFkb3dSb290IDogdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLmVsZW1lbnQpO1xuXG4gICAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgIWlzSW5UaGVEb20pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgICAgIHZhciB0aXBJZCA9IFV0aWwuZ2V0VUlEKHRoaXMuY29uc3RydWN0b3IuTkFNRSk7XG4gICAgICAgIHRpcC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGlwSWQpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JywgdGlwSWQpO1xuICAgICAgICB0aGlzLnNldENvbnRlbnQoKTtcblxuICAgICAgICBpZiAodGhpcy5jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgJCh0aXApLmFkZENsYXNzKENsYXNzTmFtZSQ2LkZBREUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBsYWNlbWVudCA9IHR5cGVvZiB0aGlzLmNvbmZpZy5wbGFjZW1lbnQgPT09ICdmdW5jdGlvbicgPyB0aGlzLmNvbmZpZy5wbGFjZW1lbnQuY2FsbCh0aGlzLCB0aXAsIHRoaXMuZWxlbWVudCkgOiB0aGlzLmNvbmZpZy5wbGFjZW1lbnQ7XG5cbiAgICAgICAgdmFyIGF0dGFjaG1lbnQgPSB0aGlzLl9nZXRBdHRhY2htZW50KHBsYWNlbWVudCk7XG5cbiAgICAgICAgdGhpcy5hZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCk7XG5cbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuX2dldENvbnRhaW5lcigpO1xuXG4gICAgICAgICQodGlwKS5kYXRhKHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVksIHRoaXMpO1xuXG4gICAgICAgIGlmICghJC5jb250YWlucyh0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMudGlwKSkge1xuICAgICAgICAgICQodGlwKS5hcHBlbmRUbyhjb250YWluZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLnRyaWdnZXIodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5JTlNFUlRFRCk7XG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXIodGhpcy5lbGVtZW50LCB0aXAsIHtcbiAgICAgICAgICBwbGFjZW1lbnQ6IGF0dGFjaG1lbnQsXG4gICAgICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgICAgICBvZmZzZXQ6IHRoaXMuX2dldE9mZnNldCgpLFxuICAgICAgICAgICAgZmxpcDoge1xuICAgICAgICAgICAgICBiZWhhdmlvcjogdGhpcy5jb25maWcuZmFsbGJhY2tQbGFjZW1lbnRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhcnJvdzoge1xuICAgICAgICAgICAgICBlbGVtZW50OiBTZWxlY3RvciQ2LkFSUk9XXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiB0aGlzLmNvbmZpZy5ib3VuZGFyeVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgb25DcmVhdGU6IGZ1bmN0aW9uIG9uQ3JlYXRlKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLm9yaWdpbmFsUGxhY2VtZW50ICE9PSBkYXRhLnBsYWNlbWVudCkge1xuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgICQodGlwKS5hZGRDbGFzcyhDbGFzc05hbWUkNi5TSE9XKTsgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHRvIHRoZSBib2R5J3MgaW1tZWRpYXRlIGNoaWxkcmVuO1xuICAgICAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xuICAgICAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcblxuICAgICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgJChkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9uKCdtb3VzZW92ZXInLCBudWxsLCAkLm5vb3ApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgaWYgKF90aGlzLmNvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzLl9maXhUcmFuc2l0aW9uKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHByZXZIb3ZlclN0YXRlID0gX3RoaXMuX2hvdmVyU3RhdGU7XG4gICAgICAgICAgX3RoaXMuX2hvdmVyU3RhdGUgPSBudWxsO1xuICAgICAgICAgICQoX3RoaXMuZWxlbWVudCkudHJpZ2dlcihfdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XTik7XG5cbiAgICAgICAgICBpZiAocHJldkhvdmVyU3RhdGUgPT09IEhvdmVyU3RhdGUuT1VUKSB7XG4gICAgICAgICAgICBfdGhpcy5fbGVhdmUobnVsbCwgX3RoaXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoJCh0aGlzLnRpcCkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDYuRkFERSkpIHtcbiAgICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLnRpcCk7XG4gICAgICAgICAgJCh0aGlzLnRpcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5ISURFKTtcblxuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIGlmIChfdGhpczIuX2hvdmVyU3RhdGUgIT09IEhvdmVyU3RhdGUuU0hPVyAmJiB0aXAucGFyZW50Tm9kZSkge1xuICAgICAgICAgIHRpcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRpcCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIuX2NsZWFuVGlwQ2xhc3MoKTtcblxuICAgICAgICBfdGhpczIuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKTtcblxuICAgICAgICAkKF90aGlzMi5lbGVtZW50KS50cmlnZ2VyKF90aGlzMi5jb25zdHJ1Y3Rvci5FdmVudC5ISURERU4pO1xuXG4gICAgICAgIGlmIChfdGhpczIuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICAgIF90aGlzMi5fcG9wcGVyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgICQodGhpcy5lbGVtZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG5cbiAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkKHRpcCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDYuU0hPVyk7IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSByZW1vdmUgdGhlIGV4dHJhXG4gICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxuXG4gICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICQoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vZmYoJ21vdXNlb3ZlcicsIG51bGwsICQubm9vcCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVHJpZ2dlci5DTElDS10gPSBmYWxzZTtcbiAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVHJpZ2dlci5GT0NVU10gPSBmYWxzZTtcbiAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVHJpZ2dlci5IT1ZFUl0gPSBmYWxzZTtcblxuICAgICAgaWYgKCQodGhpcy50aXApLmhhc0NsYXNzKENsYXNzTmFtZSQ2LkZBREUpKSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRpcCk7XG4gICAgICAgICQodGlwKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9ob3ZlclN0YXRlID0gJyc7XG4gICAgfTtcblxuICAgIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3BvcHBlci5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0gLy8gUHJvdGVjdGVkXG4gICAgO1xuXG4gICAgX3Byb3RvLmlzV2l0aENvbnRlbnQgPSBmdW5jdGlvbiBpc1dpdGhDb250ZW50KCkge1xuICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5nZXRUaXRsZSgpKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmFkZEF0dGFjaG1lbnRDbGFzcyA9IGZ1bmN0aW9uIGFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KSB7XG4gICAgICAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5hZGRDbGFzcyhDTEFTU19QUkVGSVggKyBcIi1cIiArIGF0dGFjaG1lbnQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZ2V0VGlwRWxlbWVudCA9IGZ1bmN0aW9uIGdldFRpcEVsZW1lbnQoKSB7XG4gICAgICB0aGlzLnRpcCA9IHRoaXMudGlwIHx8ICQodGhpcy5jb25maWcudGVtcGxhdGUpWzBdO1xuICAgICAgcmV0dXJuIHRoaXMudGlwO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2V0Q29udGVudCA9IGZ1bmN0aW9uIHNldENvbnRlbnQoKSB7XG4gICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KCQodGlwLnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IkNi5UT09MVElQX0lOTkVSKSksIHRoaXMuZ2V0VGl0bGUoKSk7XG4gICAgICAkKHRpcCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDYuRkFERSArIFwiIFwiICsgQ2xhc3NOYW1lJDYuU0hPVyk7XG4gICAgfTtcblxuICAgIF9wcm90by5zZXRFbGVtZW50Q29udGVudCA9IGZ1bmN0aW9uIHNldEVsZW1lbnRDb250ZW50KCRlbGVtZW50LCBjb250ZW50KSB7XG4gICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdvYmplY3QnICYmIChjb250ZW50Lm5vZGVUeXBlIHx8IGNvbnRlbnQuanF1ZXJ5KSkge1xuICAgICAgICAvLyBDb250ZW50IGlzIGEgRE9NIG5vZGUgb3IgYSBqUXVlcnlcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmh0bWwpIHtcbiAgICAgICAgICBpZiAoISQoY29udGVudCkucGFyZW50KCkuaXMoJGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAkZWxlbWVudC5lbXB0eSgpLmFwcGVuZChjb250ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGVsZW1lbnQudGV4dCgkKGNvbnRlbnQpLnRleHQoKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmNvbmZpZy5odG1sKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5zYW5pdGl6ZSkge1xuICAgICAgICAgIGNvbnRlbnQgPSBzYW5pdGl6ZUh0bWwoY29udGVudCwgdGhpcy5jb25maWcud2hpdGVMaXN0LCB0aGlzLmNvbmZpZy5zYW5pdGl6ZUZuKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRlbGVtZW50Lmh0bWwoY29udGVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZWxlbWVudC50ZXh0KGNvbnRlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uZ2V0VGl0bGUgPSBmdW5jdGlvbiBnZXRUaXRsZSgpIHtcbiAgICAgIHZhciB0aXRsZSA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKTtcblxuICAgICAgaWYgKCF0aXRsZSkge1xuICAgICAgICB0aXRsZSA9IHR5cGVvZiB0aGlzLmNvbmZpZy50aXRsZSA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuY29uZmlnLnRpdGxlLmNhbGwodGhpcy5lbGVtZW50KSA6IHRoaXMuY29uZmlnLnRpdGxlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGl0bGU7XG4gICAgfSAvLyBQcml2YXRlXG4gICAgO1xuXG4gICAgX3Byb3RvLl9nZXRPZmZzZXQgPSBmdW5jdGlvbiBfZ2V0T2Zmc2V0KCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBvZmZzZXQgPSB7fTtcblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbmZpZy5vZmZzZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb2Zmc2V0LmZuID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICBkYXRhLm9mZnNldHMgPSBfb2JqZWN0U3ByZWFkKHt9LCBkYXRhLm9mZnNldHMsIF90aGlzMy5jb25maWcub2Zmc2V0KGRhdGEub2Zmc2V0cywgX3RoaXMzLmVsZW1lbnQpIHx8IHt9KTtcbiAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9mZnNldC5vZmZzZXQgPSB0aGlzLmNvbmZpZy5vZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0Q29udGFpbmVyID0gZnVuY3Rpb24gX2dldENvbnRhaW5lcigpIHtcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5jb250YWluZXIgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICAgICAgfVxuXG4gICAgICBpZiAoVXRpbC5pc0VsZW1lbnQodGhpcy5jb25maWcuY29udGFpbmVyKSkge1xuICAgICAgICByZXR1cm4gJCh0aGlzLmNvbmZpZy5jb250YWluZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJChkb2N1bWVudCkuZmluZCh0aGlzLmNvbmZpZy5jb250YWluZXIpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldEF0dGFjaG1lbnQgPSBmdW5jdGlvbiBfZ2V0QXR0YWNobWVudChwbGFjZW1lbnQpIHtcbiAgICAgIHJldHVybiBBdHRhY2htZW50TWFwJDFbcGxhY2VtZW50LnRvVXBwZXJDYXNlKCldO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3NldExpc3RlbmVycyA9IGZ1bmN0aW9uIF9zZXRMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIHRyaWdnZXJzID0gdGhpcy5jb25maWcudHJpZ2dlci5zcGxpdCgnICcpO1xuICAgICAgdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikge1xuICAgICAgICBpZiAodHJpZ2dlciA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgICQoX3RoaXM0LmVsZW1lbnQpLm9uKF90aGlzNC5jb25zdHJ1Y3Rvci5FdmVudC5DTElDSywgX3RoaXM0LmNvbmZpZy5zZWxlY3RvciwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM0LnRvZ2dsZShldmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAhPT0gVHJpZ2dlci5NQU5VQUwpIHtcbiAgICAgICAgICB2YXIgZXZlbnRJbiA9IHRyaWdnZXIgPT09IFRyaWdnZXIuSE9WRVIgPyBfdGhpczQuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VFTlRFUiA6IF90aGlzNC5jb25zdHJ1Y3Rvci5FdmVudC5GT0NVU0lOO1xuICAgICAgICAgIHZhciBldmVudE91dCA9IHRyaWdnZXIgPT09IFRyaWdnZXIuSE9WRVIgPyBfdGhpczQuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VMRUFWRSA6IF90aGlzNC5jb25zdHJ1Y3Rvci5FdmVudC5GT0NVU09VVDtcbiAgICAgICAgICAkKF90aGlzNC5lbGVtZW50KS5vbihldmVudEluLCBfdGhpczQuY29uZmlnLnNlbGVjdG9yLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczQuX2VudGVyKGV2ZW50KTtcbiAgICAgICAgICB9KS5vbihldmVudE91dCwgX3RoaXM0LmNvbmZpZy5zZWxlY3RvciwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM0Ll9sZWF2ZShldmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgJCh0aGlzLmVsZW1lbnQpLmNsb3Nlc3QoJy5tb2RhbCcpLm9uKCdoaWRlLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoX3RoaXM0LmVsZW1lbnQpIHtcbiAgICAgICAgICBfdGhpczQuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMuY29uZmlnLnNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgdGhpcy5jb25maWcsIHtcbiAgICAgICAgICB0cmlnZ2VyOiAnbWFudWFsJyxcbiAgICAgICAgICBzZWxlY3RvcjogJydcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9maXhUaXRsZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2ZpeFRpdGxlID0gZnVuY3Rpb24gX2ZpeFRpdGxlKCkge1xuICAgICAgdmFyIHRpdGxlVHlwZSA9IHR5cGVvZiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJyk7XG5cbiAgICAgIGlmICh0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8IHRpdGxlVHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScsIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgfHwgJycpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCd0aXRsZScsICcnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9lbnRlciA9IGZ1bmN0aW9uIF9lbnRlcihldmVudCwgY29udGV4dCkge1xuICAgICAgdmFyIGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZO1xuICAgICAgY29udGV4dCA9IGNvbnRleHQgfHwgJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpO1xuXG4gICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGV2ZW50LmN1cnJlbnRUYXJnZXQsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpO1xuICAgICAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSwgY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW2V2ZW50LnR5cGUgPT09ICdmb2N1c2luJyA/IFRyaWdnZXIuRk9DVVMgOiBUcmlnZ2VyLkhPVkVSXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICgkKGNvbnRleHQuZ2V0VGlwRWxlbWVudCgpKS5oYXNDbGFzcyhDbGFzc05hbWUkNi5TSE9XKSB8fCBjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLlNIT1cpIHtcbiAgICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhvdmVyU3RhdGUuU0hPVztcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjbGVhclRpbWVvdXQoY29udGV4dC5fdGltZW91dCk7XG4gICAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSG92ZXJTdGF0ZS5TSE9XO1xuXG4gICAgICBpZiAoIWNvbnRleHQuY29uZmlnLmRlbGF5IHx8ICFjb250ZXh0LmNvbmZpZy5kZWxheS5zaG93KSB7XG4gICAgICAgIGNvbnRleHQuc2hvdygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNvbnRleHQuX2hvdmVyU3RhdGUgPT09IEhvdmVyU3RhdGUuU0hPVykge1xuICAgICAgICAgIGNvbnRleHQuc2hvdygpO1xuICAgICAgICB9XG4gICAgICB9LCBjb250ZXh0LmNvbmZpZy5kZWxheS5zaG93KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9sZWF2ZSA9IGZ1bmN0aW9uIF9sZWF2ZShldmVudCwgY29udGV4dCkge1xuICAgICAgdmFyIGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZO1xuICAgICAgY29udGV4dCA9IGNvbnRleHQgfHwgJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpO1xuXG4gICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGV2ZW50LmN1cnJlbnRUYXJnZXQsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpO1xuICAgICAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSwgY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW2V2ZW50LnR5cGUgPT09ICdmb2N1c291dCcgPyBUcmlnZ2VyLkZPQ1VTIDogVHJpZ2dlci5IT1ZFUl0gPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbnRleHQuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNsZWFyVGltZW91dChjb250ZXh0Ll90aW1lb3V0KTtcbiAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIb3ZlclN0YXRlLk9VVDtcblxuICAgICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSkge1xuICAgICAgICBjb250ZXh0LmhpZGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Ll90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLk9VVCkge1xuICAgICAgICAgIGNvbnRleHQuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9LCBjb250ZXh0LmNvbmZpZy5kZWxheS5oaWRlKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9pc1dpdGhBY3RpdmVUcmlnZ2VyID0gZnVuY3Rpb24gX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSB7XG4gICAgICBmb3IgKHZhciB0cmlnZ2VyIGluIHRoaXMuX2FjdGl2ZVRyaWdnZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRyaWdnZXJbdHJpZ2dlcl0pIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIHZhciBkYXRhQXR0cmlidXRlcyA9ICQodGhpcy5lbGVtZW50KS5kYXRhKCk7XG4gICAgICBPYmplY3Qua2V5cyhkYXRhQXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoZGF0YUF0dHIpIHtcbiAgICAgICAgaWYgKERJU0FMTE9XRURfQVRUUklCVVRFUy5pbmRleE9mKGRhdGFBdHRyKSAhPT0gLTEpIHtcbiAgICAgICAgICBkZWxldGUgZGF0YUF0dHJpYnV0ZXNbZGF0YUF0dHJdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCwgZGF0YUF0dHJpYnV0ZXMsIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KTtcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcuZGVsYXkgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmZpZy5kZWxheSA9IHtcbiAgICAgICAgICBzaG93OiBjb25maWcuZGVsYXksXG4gICAgICAgICAgaGlkZTogY29uZmlnLmRlbGF5XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnLnRpdGxlID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25maWcudGl0bGUgPSBjb25maWcudGl0bGUudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcuY29udGVudCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uZmlnLmNvbnRlbnQgPSBjb25maWcuY29udGVudC50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FJDYsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSk7XG5cbiAgICAgIGlmIChjb25maWcuc2FuaXRpemUpIHtcbiAgICAgICAgY29uZmlnLnRlbXBsYXRlID0gc2FuaXRpemVIdG1sKGNvbmZpZy50ZW1wbGF0ZSwgY29uZmlnLndoaXRlTGlzdCwgY29uZmlnLnNhbml0aXplRm4pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldERlbGVnYXRlQ29uZmlnID0gZnVuY3Rpb24gX2dldERlbGVnYXRlQ29uZmlnKCkge1xuICAgICAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gICAgICBpZiAodGhpcy5jb25maWcpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuY29uZmlnKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtrZXldICE9PSB0aGlzLmNvbmZpZ1trZXldKSB7XG4gICAgICAgICAgICBjb25maWdba2V5XSA9IHRoaXMuY29uZmlnW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2xlYW5UaXBDbGFzcyA9IGZ1bmN0aW9uIF9jbGVhblRpcENsYXNzKCkge1xuICAgICAgdmFyICR0aXAgPSAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcbiAgICAgIHZhciB0YWJDbGFzcyA9ICR0aXAuYXR0cignY2xhc3MnKS5tYXRjaChCU0NMU19QUkVGSVhfUkVHRVgpO1xuXG4gICAgICBpZiAodGFiQ2xhc3MgIT09IG51bGwgJiYgdGFiQ2xhc3MubGVuZ3RoKSB7XG4gICAgICAgICR0aXAucmVtb3ZlQ2xhc3ModGFiQ2xhc3Muam9pbignJykpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSA9IGZ1bmN0aW9uIF9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UocG9wcGVyRGF0YSkge1xuICAgICAgdmFyIHBvcHBlckluc3RhbmNlID0gcG9wcGVyRGF0YS5pbnN0YW5jZTtcbiAgICAgIHRoaXMudGlwID0gcG9wcGVySW5zdGFuY2UucG9wcGVyO1xuXG4gICAgICB0aGlzLl9jbGVhblRpcENsYXNzKCk7XG5cbiAgICAgIHRoaXMuYWRkQXR0YWNobWVudENsYXNzKHRoaXMuX2dldEF0dGFjaG1lbnQocG9wcGVyRGF0YS5wbGFjZW1lbnQpKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9maXhUcmFuc2l0aW9uID0gZnVuY3Rpb24gX2ZpeFRyYW5zaXRpb24oKSB7XG4gICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgICB2YXIgaW5pdENvbmZpZ0FuaW1hdGlvbiA9IHRoaXMuY29uZmlnLmFuaW1hdGlvbjtcblxuICAgICAgaWYgKHRpcC5nZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JykgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkKHRpcCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDYuRkFERSk7XG4gICAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBmYWxzZTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBpbml0Q29uZmlnQW5pbWF0aW9uO1xuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSQ2KTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZztcblxuICAgICAgICBpZiAoIWRhdGEgJiYgL2Rpc3Bvc2V8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBUb29sdGlwKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSQ2LCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoVG9vbHRpcCwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kNjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIk5BTUVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gTkFNRSQ2O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEQVRBX0tFWVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEQVRBX0tFWSQ2O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJFdmVudFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBFdmVudCQ2O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJFVkVOVF9LRVlcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRVZFTlRfS0VZJDY7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlJDQ7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFRvb2x0aXA7XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJC5mbltOQU1FJDZdID0gVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUUkNl0uQ29uc3RydWN0b3IgPSBUb29sdGlwO1xuXG4gICQuZm5bTkFNRSQ2XS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRSQ2XSA9IEpRVUVSWV9OT19DT05GTElDVCQ2O1xuICAgIHJldHVybiBUb29sdGlwLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJDcgPSAncG9wb3Zlcic7XG4gIHZhciBWRVJTSU9OJDcgPSAnNC4zLjEnO1xuICB2YXIgREFUQV9LRVkkNyA9ICdicy5wb3BvdmVyJztcbiAgdmFyIEVWRU5UX0tFWSQ3ID0gXCIuXCIgKyBEQVRBX0tFWSQ3O1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJDcgPSAkLmZuW05BTUUkN107XG4gIHZhciBDTEFTU19QUkVGSVgkMSA9ICdicy1wb3BvdmVyJztcbiAgdmFyIEJTQ0xTX1BSRUZJWF9SRUdFWCQxID0gbmV3IFJlZ0V4cChcIihefFxcXFxzKVwiICsgQ0xBU1NfUFJFRklYJDEgKyBcIlxcXFxTK1wiLCAnZycpO1xuXG4gIHZhciBEZWZhdWx0JDUgPSBfb2JqZWN0U3ByZWFkKHt9LCBUb29sdGlwLkRlZmF1bHQsIHtcbiAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXG4gICAgdHJpZ2dlcjogJ2NsaWNrJyxcbiAgICBjb250ZW50OiAnJyxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj4nICsgJzxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PicgKyAnPGgzIGNsYXNzPVwicG9wb3Zlci1oZWFkZXJcIj48L2gzPicgKyAnPGRpdiBjbGFzcz1cInBvcG92ZXItYm9keVwiPjwvZGl2PjwvZGl2PidcbiAgfSk7XG5cbiAgdmFyIERlZmF1bHRUeXBlJDUgPSBfb2JqZWN0U3ByZWFkKHt9LCBUb29sdGlwLkRlZmF1bHRUeXBlLCB7XG4gICAgY29udGVudDogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknXG4gIH0pO1xuXG4gIHZhciBDbGFzc05hbWUkNyA9IHtcbiAgICBGQURFOiAnZmFkZScsXG4gICAgU0hPVzogJ3Nob3cnXG4gIH07XG4gIHZhciBTZWxlY3RvciQ3ID0ge1xuICAgIFRJVExFOiAnLnBvcG92ZXItaGVhZGVyJyxcbiAgICBDT05URU5UOiAnLnBvcG92ZXItYm9keSdcbiAgfTtcbiAgdmFyIEV2ZW50JDcgPSB7XG4gICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVkkNyxcbiAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVkkNyxcbiAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSQ3LFxuICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVkkNyxcbiAgICBJTlNFUlRFRDogXCJpbnNlcnRlZFwiICsgRVZFTlRfS0VZJDcsXG4gICAgQ0xJQ0s6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSQ3LFxuICAgIEZPQ1VTSU46IFwiZm9jdXNpblwiICsgRVZFTlRfS0VZJDcsXG4gICAgRk9DVVNPVVQ6IFwiZm9jdXNvdXRcIiArIEVWRU5UX0tFWSQ3LFxuICAgIE1PVVNFRU5URVI6IFwibW91c2VlbnRlclwiICsgRVZFTlRfS0VZJDcsXG4gICAgTU9VU0VMRUFWRTogXCJtb3VzZWxlYXZlXCIgKyBFVkVOVF9LRVkkN1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBQb3BvdmVyID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX1Rvb2x0aXApIHtcbiAgICBfaW5oZXJpdHNMb29zZShQb3BvdmVyLCBfVG9vbHRpcCk7XG5cbiAgICBmdW5jdGlvbiBQb3BvdmVyKCkge1xuICAgICAgcmV0dXJuIF9Ub29sdGlwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUG9wb3Zlci5wcm90b3R5cGU7XG5cbiAgICAvLyBPdmVycmlkZXNcbiAgICBfcHJvdG8uaXNXaXRoQ29udGVudCA9IGZ1bmN0aW9uIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRUaXRsZSgpIHx8IHRoaXMuX2dldENvbnRlbnQoKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmFkZEF0dGFjaG1lbnRDbGFzcyA9IGZ1bmN0aW9uIGFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KSB7XG4gICAgICAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5hZGRDbGFzcyhDTEFTU19QUkVGSVgkMSArIFwiLVwiICsgYXR0YWNobWVudCk7XG4gICAgfTtcblxuICAgIF9wcm90by5nZXRUaXBFbGVtZW50ID0gZnVuY3Rpb24gZ2V0VGlwRWxlbWVudCgpIHtcbiAgICAgIHRoaXMudGlwID0gdGhpcy50aXAgfHwgJCh0aGlzLmNvbmZpZy50ZW1wbGF0ZSlbMF07XG4gICAgICByZXR1cm4gdGhpcy50aXA7XG4gICAgfTtcblxuICAgIF9wcm90by5zZXRDb250ZW50ID0gZnVuY3Rpb24gc2V0Q29udGVudCgpIHtcbiAgICAgIHZhciAkdGlwID0gJCh0aGlzLmdldFRpcEVsZW1lbnQoKSk7IC8vIFdlIHVzZSBhcHBlbmQgZm9yIGh0bWwgb2JqZWN0cyB0byBtYWludGFpbiBqcyBldmVudHNcblxuICAgICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCgkdGlwLmZpbmQoU2VsZWN0b3IkNy5USVRMRSksIHRoaXMuZ2V0VGl0bGUoKSk7XG5cbiAgICAgIHZhciBjb250ZW50ID0gdGhpcy5fZ2V0Q29udGVudCgpO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQuY2FsbCh0aGlzLmVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KCR0aXAuZmluZChTZWxlY3RvciQ3LkNPTlRFTlQpLCBjb250ZW50KTtcbiAgICAgICR0aXAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDcuRkFERSArIFwiIFwiICsgQ2xhc3NOYW1lJDcuU0hPVyk7XG4gICAgfSAvLyBQcml2YXRlXG4gICAgO1xuXG4gICAgX3Byb3RvLl9nZXRDb250ZW50ID0gZnVuY3Rpb24gX2dldENvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1jb250ZW50JykgfHwgdGhpcy5jb25maWcuY29udGVudDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9jbGVhblRpcENsYXNzID0gZnVuY3Rpb24gX2NsZWFuVGlwQ2xhc3MoKSB7XG4gICAgICB2YXIgJHRpcCA9ICQodGhpcy5nZXRUaXBFbGVtZW50KCkpO1xuICAgICAgdmFyIHRhYkNsYXNzID0gJHRpcC5hdHRyKCdjbGFzcycpLm1hdGNoKEJTQ0xTX1BSRUZJWF9SRUdFWCQxKTtcblxuICAgICAgaWYgKHRhYkNsYXNzICE9PSBudWxsICYmIHRhYkNsYXNzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgJHRpcC5yZW1vdmVDbGFzcyh0YWJDbGFzcy5qb2luKCcnKSk7XG4gICAgICB9XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZJDcpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiBudWxsO1xuXG4gICAgICAgIGlmICghZGF0YSAmJiAvZGlzcG9zZXxoaWRlLy50ZXN0KGNvbmZpZykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IFBvcG92ZXIodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZJDcsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhQb3BvdmVyLCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIC8vIEdldHRlcnNcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTiQ3O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQkNTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiTkFNRVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBOQU1FJDc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRBVEFfS0VZXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERBVEFfS0VZJDc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkV2ZW50XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIEV2ZW50JDc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkVWRU5UX0tFWVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBFVkVOVF9LRVkkNztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFR5cGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdFR5cGUkNTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUG9wb3ZlcjtcbiAgfShUb29sdGlwKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJC5mbltOQU1FJDddID0gUG9wb3Zlci5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUUkN10uQ29uc3RydWN0b3IgPSBQb3BvdmVyO1xuXG4gICQuZm5bTkFNRSQ3XS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRSQ3XSA9IEpRVUVSWV9OT19DT05GTElDVCQ3O1xuICAgIHJldHVybiBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJDggPSAnc2Nyb2xsc3B5JztcbiAgdmFyIFZFUlNJT04kOCA9ICc0LjMuMSc7XG4gIHZhciBEQVRBX0tFWSQ4ID0gJ2JzLnNjcm9sbHNweSc7XG4gIHZhciBFVkVOVF9LRVkkOCA9IFwiLlwiICsgREFUQV9LRVkkODtcbiAgdmFyIERBVEFfQVBJX0tFWSQ2ID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkOCA9ICQuZm5bTkFNRSQ4XTtcbiAgdmFyIERlZmF1bHQkNiA9IHtcbiAgICBvZmZzZXQ6IDEwLFxuICAgIG1ldGhvZDogJ2F1dG8nLFxuICAgIHRhcmdldDogJydcbiAgfTtcbiAgdmFyIERlZmF1bHRUeXBlJDYgPSB7XG4gICAgb2Zmc2V0OiAnbnVtYmVyJyxcbiAgICBtZXRob2Q6ICdzdHJpbmcnLFxuICAgIHRhcmdldDogJyhzdHJpbmd8ZWxlbWVudCknXG4gIH07XG4gIHZhciBFdmVudCQ4ID0ge1xuICAgIEFDVElWQVRFOiBcImFjdGl2YXRlXCIgKyBFVkVOVF9LRVkkOCxcbiAgICBTQ1JPTEw6IFwic2Nyb2xsXCIgKyBFVkVOVF9LRVkkOCxcbiAgICBMT0FEX0RBVEFfQVBJOiBcImxvYWRcIiArIEVWRU5UX0tFWSQ4ICsgREFUQV9BUElfS0VZJDZcbiAgfTtcbiAgdmFyIENsYXNzTmFtZSQ4ID0ge1xuICAgIERST1BET1dOX0lURU06ICdkcm9wZG93bi1pdGVtJyxcbiAgICBEUk9QRE9XTl9NRU5VOiAnZHJvcGRvd24tbWVudScsXG4gICAgQUNUSVZFOiAnYWN0aXZlJ1xuICB9O1xuICB2YXIgU2VsZWN0b3IkOCA9IHtcbiAgICBEQVRBX1NQWTogJ1tkYXRhLXNweT1cInNjcm9sbFwiXScsXG4gICAgQUNUSVZFOiAnLmFjdGl2ZScsXG4gICAgTkFWX0xJU1RfR1JPVVA6ICcubmF2LCAubGlzdC1ncm91cCcsXG4gICAgTkFWX0xJTktTOiAnLm5hdi1saW5rJyxcbiAgICBOQVZfSVRFTVM6ICcubmF2LWl0ZW0nLFxuICAgIExJU1RfSVRFTVM6ICcubGlzdC1ncm91cC1pdGVtJyxcbiAgICBEUk9QRE9XTjogJy5kcm9wZG93bicsXG4gICAgRFJPUERPV05fSVRFTVM6ICcuZHJvcGRvd24taXRlbScsXG4gICAgRFJPUERPV05fVE9HR0xFOiAnLmRyb3Bkb3duLXRvZ2dsZSdcbiAgfTtcbiAgdmFyIE9mZnNldE1ldGhvZCA9IHtcbiAgICBPRkZTRVQ6ICdvZmZzZXQnLFxuICAgIFBPU0lUSU9OOiAncG9zaXRpb24nXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIFNjcm9sbFNweSA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjcm9sbFNweShlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IGVsZW1lbnQudGFnTmFtZSA9PT0gJ0JPRFknID8gd2luZG93IDogZWxlbWVudDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy5fc2VsZWN0b3IgPSB0aGlzLl9jb25maWcudGFyZ2V0ICsgXCIgXCIgKyBTZWxlY3RvciQ4Lk5BVl9MSU5LUyArIFwiLFwiICsgKHRoaXMuX2NvbmZpZy50YXJnZXQgKyBcIiBcIiArIFNlbGVjdG9yJDguTElTVF9JVEVNUyArIFwiLFwiKSArICh0aGlzLl9jb25maWcudGFyZ2V0ICsgXCIgXCIgKyBTZWxlY3RvciQ4LkRST1BET1dOX0lURU1TKTtcbiAgICAgIHRoaXMuX29mZnNldHMgPSBbXTtcbiAgICAgIHRoaXMuX3RhcmdldHMgPSBbXTtcbiAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG4gICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSAwO1xuICAgICAgJCh0aGlzLl9zY3JvbGxFbGVtZW50KS5vbihFdmVudCQ4LlNDUk9MTCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5fcHJvY2VzcyhldmVudCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMucmVmcmVzaCgpO1xuXG4gICAgICB0aGlzLl9wcm9jZXNzKCk7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBTY3JvbGxTcHkucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLnJlZnJlc2ggPSBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBhdXRvTWV0aG9kID0gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gdGhpcy5fc2Nyb2xsRWxlbWVudC53aW5kb3cgPyBPZmZzZXRNZXRob2QuT0ZGU0VUIDogT2Zmc2V0TWV0aG9kLlBPU0lUSU9OO1xuICAgICAgdmFyIG9mZnNldE1ldGhvZCA9IHRoaXMuX2NvbmZpZy5tZXRob2QgPT09ICdhdXRvJyA/IGF1dG9NZXRob2QgOiB0aGlzLl9jb25maWcubWV0aG9kO1xuICAgICAgdmFyIG9mZnNldEJhc2UgPSBvZmZzZXRNZXRob2QgPT09IE9mZnNldE1ldGhvZC5QT1NJVElPTiA/IHRoaXMuX2dldFNjcm9sbFRvcCgpIDogMDtcbiAgICAgIHRoaXMuX29mZnNldHMgPSBbXTtcbiAgICAgIHRoaXMuX3RhcmdldHMgPSBbXTtcbiAgICAgIHRoaXMuX3Njcm9sbEhlaWdodCA9IHRoaXMuX2dldFNjcm9sbEhlaWdodCgpO1xuICAgICAgdmFyIHRhcmdldHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fc2VsZWN0b3IpKTtcbiAgICAgIHRhcmdldHMubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHZhciB0YXJnZXQ7XG4gICAgICAgIHZhciB0YXJnZXRTZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcblxuICAgICAgICBpZiAodGFyZ2V0U2VsZWN0b3IpIHtcbiAgICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldFNlbGVjdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICB2YXIgdGFyZ2V0QkNSID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgaWYgKHRhcmdldEJDUi53aWR0aCB8fCB0YXJnZXRCQ1IuaGVpZ2h0KSB7XG4gICAgICAgICAgICAvLyBUT0RPIChmYXQpOiByZW1vdmUgc2tldGNoIHJlbGlhbmNlIG9uIGpRdWVyeSBwb3NpdGlvbi9vZmZzZXRcbiAgICAgICAgICAgIHJldHVybiBbJCh0YXJnZXQpW29mZnNldE1ldGhvZF0oKS50b3AgKyBvZmZzZXRCYXNlLCB0YXJnZXRTZWxlY3Rvcl07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhWzBdIC0gYlswXTtcbiAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgX3RoaXMyLl9vZmZzZXRzLnB1c2goaXRlbVswXSk7XG5cbiAgICAgICAgX3RoaXMyLl90YXJnZXRzLnB1c2goaXRlbVsxXSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZJDgpO1xuICAgICAgJCh0aGlzLl9zY3JvbGxFbGVtZW50KS5vZmYoRVZFTlRfS0VZJDgpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9zY3JvbGxFbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgICB0aGlzLl9zZWxlY3RvciA9IG51bGw7XG4gICAgICB0aGlzLl9vZmZzZXRzID0gbnVsbDtcbiAgICAgIHRoaXMuX3RhcmdldHMgPSBudWxsO1xuICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIHRoaXMuX3Njcm9sbEhlaWdodCA9IG51bGw7XG4gICAgfSAvLyBQcml2YXRlXG4gICAgO1xuXG4gICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgRGVmYXVsdCQ2LCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fSk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnLnRhcmdldCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIGlkID0gJChjb25maWcudGFyZ2V0KS5hdHRyKCdpZCcpO1xuXG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICBpZCA9IFV0aWwuZ2V0VUlEKE5BTUUkOCk7XG4gICAgICAgICAgJChjb25maWcudGFyZ2V0KS5hdHRyKCdpZCcsIGlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZy50YXJnZXQgPSBcIiNcIiArIGlkO1xuICAgICAgfVxuXG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FJDgsIGNvbmZpZywgRGVmYXVsdFR5cGUkNik7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFNjcm9sbFRvcCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxUb3AoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID8gdGhpcy5fc2Nyb2xsRWxlbWVudC5wYWdlWU9mZnNldCA6IHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxIZWlnaHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgoZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldE9mZnNldEhlaWdodCA9IGZ1bmN0aW9uIF9nZXRPZmZzZXRIZWlnaHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID8gd2luZG93LmlubmVySGVpZ2h0IDogdGhpcy5fc2Nyb2xsRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fcHJvY2VzcyA9IGZ1bmN0aW9uIF9wcm9jZXNzKCkge1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuX2dldFNjcm9sbFRvcCgpICsgdGhpcy5fY29uZmlnLm9mZnNldDtcblxuICAgICAgdmFyIHNjcm9sbEhlaWdodCA9IHRoaXMuX2dldFNjcm9sbEhlaWdodCgpO1xuXG4gICAgICB2YXIgbWF4U2Nyb2xsID0gdGhpcy5fY29uZmlnLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuX2dldE9mZnNldEhlaWdodCgpO1xuXG4gICAgICBpZiAodGhpcy5fc2Nyb2xsSGVpZ2h0ICE9PSBzY3JvbGxIZWlnaHQpIHtcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzY3JvbGxUb3AgPj0gbWF4U2Nyb2xsKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLl90YXJnZXRzW3RoaXMuX3RhcmdldHMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgdGhpcy5fYWN0aXZhdGUodGFyZ2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAmJiBzY3JvbGxUb3AgPCB0aGlzLl9vZmZzZXRzWzBdICYmIHRoaXMuX29mZnNldHNbMF0gPiAwKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5fY2xlYXIoKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBvZmZzZXRMZW5ndGggPSB0aGlzLl9vZmZzZXRzLmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIgaSA9IG9mZnNldExlbmd0aDsgaS0tOykge1xuICAgICAgICB2YXIgaXNBY3RpdmVUYXJnZXQgPSB0aGlzLl9hY3RpdmVUYXJnZXQgIT09IHRoaXMuX3RhcmdldHNbaV0gJiYgc2Nyb2xsVG9wID49IHRoaXMuX29mZnNldHNbaV0gJiYgKHR5cGVvZiB0aGlzLl9vZmZzZXRzW2kgKyAxXSA9PT0gJ3VuZGVmaW5lZCcgfHwgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1tpICsgMV0pO1xuXG4gICAgICAgIGlmIChpc0FjdGl2ZVRhcmdldCkge1xuICAgICAgICAgIHRoaXMuX2FjdGl2YXRlKHRoaXMuX3RhcmdldHNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fYWN0aXZhdGUgPSBmdW5jdGlvbiBfYWN0aXZhdGUodGFyZ2V0KSB7XG4gICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSB0YXJnZXQ7XG5cbiAgICAgIHRoaXMuX2NsZWFyKCk7XG5cbiAgICAgIHZhciBxdWVyaWVzID0gdGhpcy5fc2VsZWN0b3Iuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RvciArIFwiW2RhdGEtdGFyZ2V0PVxcXCJcIiArIHRhcmdldCArIFwiXFxcIl0sXCIgKyBzZWxlY3RvciArIFwiW2hyZWY9XFxcIlwiICsgdGFyZ2V0ICsgXCJcXFwiXVwiO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciAkbGluayA9ICQoW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJpZXMuam9pbignLCcpKSkpO1xuXG4gICAgICBpZiAoJGxpbmsuaGFzQ2xhc3MoQ2xhc3NOYW1lJDguRFJPUERPV05fSVRFTSkpIHtcbiAgICAgICAgJGxpbmsuY2xvc2VzdChTZWxlY3RvciQ4LkRST1BET1dOKS5maW5kKFNlbGVjdG9yJDguRFJPUERPV05fVE9HR0xFKS5hZGRDbGFzcyhDbGFzc05hbWUkOC5BQ1RJVkUpO1xuICAgICAgICAkbGluay5hZGRDbGFzcyhDbGFzc05hbWUkOC5BQ1RJVkUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2V0IHRyaWdnZXJlZCBsaW5rIGFzIGFjdGl2ZVxuICAgICAgICAkbGluay5hZGRDbGFzcyhDbGFzc05hbWUkOC5BQ1RJVkUpOyAvLyBTZXQgdHJpZ2dlcmVkIGxpbmtzIHBhcmVudHMgYXMgYWN0aXZlXG4gICAgICAgIC8vIFdpdGggYm90aCA8dWw+IGFuZCA8bmF2PiBtYXJrdXAgYSBwYXJlbnQgaXMgdGhlIHByZXZpb3VzIHNpYmxpbmcgb2YgYW55IG5hdiBhbmNlc3RvclxuXG4gICAgICAgICRsaW5rLnBhcmVudHMoU2VsZWN0b3IkOC5OQVZfTElTVF9HUk9VUCkucHJldihTZWxlY3RvciQ4Lk5BVl9MSU5LUyArIFwiLCBcIiArIFNlbGVjdG9yJDguTElTVF9JVEVNUykuYWRkQ2xhc3MoQ2xhc3NOYW1lJDguQUNUSVZFKTsgLy8gSGFuZGxlIHNwZWNpYWwgY2FzZSB3aGVuIC5uYXYtbGluayBpcyBpbnNpZGUgLm5hdi1pdGVtXG5cbiAgICAgICAgJGxpbmsucGFyZW50cyhTZWxlY3RvciQ4Lk5BVl9MSVNUX0dST1VQKS5wcmV2KFNlbGVjdG9yJDguTkFWX0lURU1TKS5jaGlsZHJlbihTZWxlY3RvciQ4Lk5BVl9MSU5LUykuYWRkQ2xhc3MoQ2xhc3NOYW1lJDguQUNUSVZFKTtcbiAgICAgIH1cblxuICAgICAgJCh0aGlzLl9zY3JvbGxFbGVtZW50KS50cmlnZ2VyKEV2ZW50JDguQUNUSVZBVEUsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogdGFyZ2V0XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9jbGVhciA9IGZ1bmN0aW9uIF9jbGVhcigpIHtcbiAgICAgIFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9zZWxlY3RvcikpLmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lJDguQUNUSVZFKTtcbiAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0LnJlbW92ZShDbGFzc05hbWUkOC5BQ1RJVkUpO1xuICAgICAgfSk7XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkkOCk7XG5cbiAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWc7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBTY3JvbGxTcHkodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZJDgsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhTY3JvbGxTcHksIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OJDg7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdCQ2O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBTY3JvbGxTcHk7XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkKHdpbmRvdykub24oRXZlbnQkOC5MT0FEX0RBVEFfQVBJLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjcm9sbFNweXMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IkOC5EQVRBX1NQWSkpO1xuICAgIHZhciBzY3JvbGxTcHlzTGVuZ3RoID0gc2Nyb2xsU3B5cy5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gc2Nyb2xsU3B5c0xlbmd0aDsgaS0tOykge1xuICAgICAgdmFyICRzcHkgPSAkKHNjcm9sbFNweXNbaV0pO1xuXG4gICAgICBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRzcHksICRzcHkuZGF0YSgpKTtcbiAgICB9XG4gIH0pO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FJDhdID0gU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRSQ4XS5Db25zdHJ1Y3RvciA9IFNjcm9sbFNweTtcblxuICAkLmZuW05BTUUkOF0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUUkOF0gPSBKUVVFUllfTk9fQ09ORkxJQ1QkODtcbiAgICByZXR1cm4gU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJDkgPSAndGFiJztcbiAgdmFyIFZFUlNJT04kOSA9ICc0LjMuMSc7XG4gIHZhciBEQVRBX0tFWSQ5ID0gJ2JzLnRhYic7XG4gIHZhciBFVkVOVF9LRVkkOSA9IFwiLlwiICsgREFUQV9LRVkkOTtcbiAgdmFyIERBVEFfQVBJX0tFWSQ3ID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkOSA9ICQuZm5bTkFNRSQ5XTtcbiAgdmFyIEV2ZW50JDkgPSB7XG4gICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVkkOSxcbiAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVkkOSxcbiAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSQ5LFxuICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVkkOSxcbiAgICBDTElDS19EQVRBX0FQSTogXCJjbGlja1wiICsgRVZFTlRfS0VZJDkgKyBEQVRBX0FQSV9LRVkkN1xuICB9O1xuICB2YXIgQ2xhc3NOYW1lJDkgPSB7XG4gICAgRFJPUERPV05fTUVOVTogJ2Ryb3Bkb3duLW1lbnUnLFxuICAgIEFDVElWRTogJ2FjdGl2ZScsXG4gICAgRElTQUJMRUQ6ICdkaXNhYmxlZCcsXG4gICAgRkFERTogJ2ZhZGUnLFxuICAgIFNIT1c6ICdzaG93J1xuICB9O1xuICB2YXIgU2VsZWN0b3IkOSA9IHtcbiAgICBEUk9QRE9XTjogJy5kcm9wZG93bicsXG4gICAgTkFWX0xJU1RfR1JPVVA6ICcubmF2LCAubGlzdC1ncm91cCcsXG4gICAgQUNUSVZFOiAnLmFjdGl2ZScsXG4gICAgQUNUSVZFX1VMOiAnPiBsaSA+IC5hY3RpdmUnLFxuICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwidGFiXCJdLCBbZGF0YS10b2dnbGU9XCJwaWxsXCJdLCBbZGF0YS10b2dnbGU9XCJsaXN0XCJdJyxcbiAgICBEUk9QRE9XTl9UT0dHTEU6ICcuZHJvcGRvd24tdG9nZ2xlJyxcbiAgICBEUk9QRE9XTl9BQ1RJVkVfQ0hJTEQ6ICc+IC5kcm9wZG93bi1tZW51IC5hY3RpdmUnXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIFRhYiA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRhYihlbGVtZW50KSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IFRhYi5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlICYmIHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUkOS5BQ1RJVkUpIHx8ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDkuRElTQUJMRUQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRhcmdldDtcbiAgICAgIHZhciBwcmV2aW91cztcbiAgICAgIHZhciBsaXN0RWxlbWVudCA9ICQodGhpcy5fZWxlbWVudCkuY2xvc2VzdChTZWxlY3RvciQ5Lk5BVl9MSVNUX0dST1VQKVswXTtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcblxuICAgICAgaWYgKGxpc3RFbGVtZW50KSB7XG4gICAgICAgIHZhciBpdGVtU2VsZWN0b3IgPSBsaXN0RWxlbWVudC5ub2RlTmFtZSA9PT0gJ1VMJyB8fCBsaXN0RWxlbWVudC5ub2RlTmFtZSA9PT0gJ09MJyA/IFNlbGVjdG9yJDkuQUNUSVZFX1VMIDogU2VsZWN0b3IkOS5BQ1RJVkU7XG4gICAgICAgIHByZXZpb3VzID0gJC5tYWtlQXJyYXkoJChsaXN0RWxlbWVudCkuZmluZChpdGVtU2VsZWN0b3IpKTtcbiAgICAgICAgcHJldmlvdXMgPSBwcmV2aW91c1twcmV2aW91cy5sZW5ndGggLSAxXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQkOS5ISURFLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICAgIH0pO1xuICAgICAgdmFyIHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQkOS5TSE9XLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHByZXZpb3VzXG4gICAgICB9KTtcblxuICAgICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICAgICQocHJldmlvdXMpLnRyaWdnZXIoaGlkZUV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG5cbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9hY3RpdmF0ZSh0aGlzLl9lbGVtZW50LCBsaXN0RWxlbWVudCk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICB2YXIgaGlkZGVuRXZlbnQgPSAkLkV2ZW50KEV2ZW50JDkuSElEREVOLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogX3RoaXMuX2VsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBzaG93bkV2ZW50ID0gJC5FdmVudChFdmVudCQ5LlNIT1dOLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogcHJldmlvdXNcbiAgICAgICAgfSk7XG4gICAgICAgICQocHJldmlvdXMpLnRyaWdnZXIoaGlkZGVuRXZlbnQpO1xuICAgICAgICAkKF90aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNob3duRXZlbnQpO1xuICAgICAgfTtcblxuICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0YXJnZXQsIHRhcmdldC5wYXJlbnROb2RlLCBjb21wbGV0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkkOSk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICB9IC8vIFByaXZhdGVcbiAgICA7XG5cbiAgICBfcHJvdG8uX2FjdGl2YXRlID0gZnVuY3Rpb24gX2FjdGl2YXRlKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgYWN0aXZlRWxlbWVudHMgPSBjb250YWluZXIgJiYgKGNvbnRhaW5lci5ub2RlTmFtZSA9PT0gJ1VMJyB8fCBjb250YWluZXIubm9kZU5hbWUgPT09ICdPTCcpID8gJChjb250YWluZXIpLmZpbmQoU2VsZWN0b3IkOS5BQ1RJVkVfVUwpIDogJChjb250YWluZXIpLmNoaWxkcmVuKFNlbGVjdG9yJDkuQUNUSVZFKTtcbiAgICAgIHZhciBhY3RpdmUgPSBhY3RpdmVFbGVtZW50c1swXTtcbiAgICAgIHZhciBpc1RyYW5zaXRpb25pbmcgPSBjYWxsYmFjayAmJiBhY3RpdmUgJiYgJChhY3RpdmUpLmhhc0NsYXNzKENsYXNzTmFtZSQ5LkZBREUpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5fdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgY2FsbGJhY2spO1xuICAgICAgfTtcblxuICAgICAgaWYgKGFjdGl2ZSAmJiBpc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQoYWN0aXZlKTtcbiAgICAgICAgJChhY3RpdmUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQ5LlNIT1cpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fdHJhbnNpdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24gX3RyYW5zaXRpb25Db21wbGV0ZShlbGVtZW50LCBhY3RpdmUsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgICQoYWN0aXZlKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkOS5BQ1RJVkUpO1xuICAgICAgICB2YXIgZHJvcGRvd25DaGlsZCA9ICQoYWN0aXZlLnBhcmVudE5vZGUpLmZpbmQoU2VsZWN0b3IkOS5EUk9QRE9XTl9BQ1RJVkVfQ0hJTEQpWzBdO1xuXG4gICAgICAgIGlmIChkcm9wZG93bkNoaWxkKSB7XG4gICAgICAgICAgJChkcm9wZG93bkNoaWxkKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkOS5BQ1RJVkUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGl2ZS5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSA9PT0gJ3RhYicpIHtcbiAgICAgICAgICBhY3RpdmUuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICQoZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lJDkuQUNUSVZFKTtcblxuICAgICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyb2xlJykgPT09ICd0YWInKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIFV0aWwucmVmbG93KGVsZW1lbnQpO1xuXG4gICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lJDkuRkFERSkpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKENsYXNzTmFtZSQ5LlNIT1cpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWxlbWVudC5wYXJlbnROb2RlICYmICQoZWxlbWVudC5wYXJlbnROb2RlKS5oYXNDbGFzcyhDbGFzc05hbWUkOS5EUk9QRE9XTl9NRU5VKSkge1xuICAgICAgICB2YXIgZHJvcGRvd25FbGVtZW50ID0gJChlbGVtZW50KS5jbG9zZXN0KFNlbGVjdG9yJDkuRFJPUERPV04pWzBdO1xuXG4gICAgICAgIGlmIChkcm9wZG93bkVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgZHJvcGRvd25Ub2dnbGVMaXN0ID0gW10uc2xpY2UuY2FsbChkcm9wZG93bkVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3RvciQ5LkRST1BET1dOX1RPR0dMRSkpO1xuICAgICAgICAgICQoZHJvcGRvd25Ub2dnbGVMaXN0KS5hZGRDbGFzcyhDbGFzc05hbWUkOS5BQ1RJVkUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBUYWIuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkdGhpcy5kYXRhKERBVEFfS0VZJDkpO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgVGFiKHRoaXMpO1xuICAgICAgICAgICR0aGlzLmRhdGEoREFUQV9LRVkkOSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKFRhYiwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kOTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVGFiO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJChkb2N1bWVudCkub24oRXZlbnQkOS5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IkOS5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIFRhYi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCh0aGlzKSwgJ3Nob3cnKTtcbiAgfSk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUUkOV0gPSBUYWIuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FJDldLkNvbnN0cnVjdG9yID0gVGFiO1xuXG4gICQuZm5bTkFNRSQ5XS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRSQ5XSA9IEpRVUVSWV9OT19DT05GTElDVCQ5O1xuICAgIHJldHVybiBUYWIuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUkYSA9ICd0b2FzdCc7XG4gIHZhciBWRVJTSU9OJGEgPSAnNC4zLjEnO1xuICB2YXIgREFUQV9LRVkkYSA9ICdicy50b2FzdCc7XG4gIHZhciBFVkVOVF9LRVkkYSA9IFwiLlwiICsgREFUQV9LRVkkYTtcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCRhID0gJC5mbltOQU1FJGFdO1xuICB2YXIgRXZlbnQkYSA9IHtcbiAgICBDTElDS19ESVNNSVNTOiBcImNsaWNrLmRpc21pc3NcIiArIEVWRU5UX0tFWSRhLFxuICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZJGEsXG4gICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZJGEsXG4gICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVkkYSxcbiAgICBTSE9XTjogXCJzaG93blwiICsgRVZFTlRfS0VZJGFcbiAgfTtcbiAgdmFyIENsYXNzTmFtZSRhID0ge1xuICAgIEZBREU6ICdmYWRlJyxcbiAgICBISURFOiAnaGlkZScsXG4gICAgU0hPVzogJ3Nob3cnLFxuICAgIFNIT1dJTkc6ICdzaG93aW5nJ1xuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUkNyA9IHtcbiAgICBhbmltYXRpb246ICdib29sZWFuJyxcbiAgICBhdXRvaGlkZTogJ2Jvb2xlYW4nLFxuICAgIGRlbGF5OiAnbnVtYmVyJ1xuICB9O1xuICB2YXIgRGVmYXVsdCQ3ID0ge1xuICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICBhdXRvaGlkZTogdHJ1ZSxcbiAgICBkZWxheTogNTAwXG4gIH07XG4gIHZhciBTZWxlY3RvciRhID0ge1xuICAgIERBVEFfRElTTUlTUzogJ1tkYXRhLWRpc21pc3M9XCJ0b2FzdFwiXSdcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcblxuICB2YXIgVG9hc3QgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUb2FzdChlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl90aW1lb3V0ID0gbnVsbDtcblxuICAgICAgdGhpcy5fc2V0TGlzdGVuZXJzKCk7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBUb2FzdC5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQkYS5TSE9XKTtcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENsYXNzTmFtZSRhLkZBREUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgX3RoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDbGFzc05hbWUkYS5TSE9XSU5HKTtcblxuICAgICAgICBfdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENsYXNzTmFtZSRhLlNIT1cpO1xuXG4gICAgICAgICQoX3RoaXMuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQkYS5TSE9XTik7XG5cbiAgICAgICAgaWYgKF90aGlzLl9jb25maWcuYXV0b2hpZGUpIHtcbiAgICAgICAgICBfdGhpcy5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDbGFzc05hbWUkYS5ISURFKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENsYXNzTmFtZSRhLlNIT1dJTkcpO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uaGlkZSA9IGZ1bmN0aW9uIGhpZGUod2l0aG91dFRpbWVvdXQpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZSRhLlNIT1cpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKEV2ZW50JGEuSElERSk7XG5cbiAgICAgIGlmICh3aXRob3V0VGltZW91dCkge1xuICAgICAgICB0aGlzLl9jbG9zZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5fY2xvc2UoKTtcbiAgICAgICAgfSwgdGhpcy5fY29uZmlnLmRlbGF5KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xuICAgICAgdGhpcy5fdGltZW91dCA9IG51bGw7XG5cbiAgICAgIGlmICh0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUkYS5TSE9XKSkge1xuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ2xhc3NOYW1lJGEuU0hPVyk7XG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEV2ZW50JGEuQ0xJQ0tfRElTTUlTUyk7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkkYSk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgfSAvLyBQcml2YXRlXG4gICAgO1xuXG4gICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgRGVmYXVsdCQ3LCAkKHRoaXMuX2VsZW1lbnQpLmRhdGEoKSwgdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pO1xuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSRhLCBjb25maWcsIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfc2V0TGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQkYS5DTElDS19ESVNNSVNTLCBTZWxlY3RvciRhLkRBVEFfRElTTUlTUywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMzLmhpZGUodHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9jbG9zZSA9IGZ1bmN0aW9uIF9jbG9zZSgpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgX3RoaXM0Ll9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ2xhc3NOYW1lJGEuSElERSk7XG5cbiAgICAgICAgJChfdGhpczQuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQkYS5ISURERU4pO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENsYXNzTmFtZSRhLlNIT1cpO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgVG9hc3QuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkZWxlbWVudC5kYXRhKERBVEFfS0VZJGEpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgVG9hc3QodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJGVsZW1lbnQuZGF0YShEQVRBX0tFWSRhLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKFRvYXN0LCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTiRhO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0VHlwZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0VHlwZSQ3O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQkNztcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVG9hc3Q7XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJC5mbltOQU1FJGFdID0gVG9hc3QuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FJGFdLkNvbnN0cnVjdG9yID0gVG9hc3Q7XG5cbiAgJC5mbltOQU1FJGFdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FJGFdID0gSlFVRVJZX05PX0NPTkZMSUNUJGE7XG4gICAgcmV0dXJuIFRvYXN0Ll9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuMy4xKTogaW5kZXguanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mICQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXBcXCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgalF1ZXJ5LiBqUXVlcnkgbXVzdCBiZSBpbmNsdWRlZCBiZWZvcmUgQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0LicpO1xuICAgIH1cblxuICAgIHZhciB2ZXJzaW9uID0gJC5mbi5qcXVlcnkuc3BsaXQoJyAnKVswXS5zcGxpdCgnLicpO1xuICAgIHZhciBtaW5NYWpvciA9IDE7XG4gICAgdmFyIGx0TWFqb3IgPSAyO1xuICAgIHZhciBtaW5NaW5vciA9IDk7XG4gICAgdmFyIG1pblBhdGNoID0gMTtcbiAgICB2YXIgbWF4TWFqb3IgPSA0O1xuXG4gICAgaWYgKHZlcnNpb25bMF0gPCBsdE1ham9yICYmIHZlcnNpb25bMV0gPCBtaW5NaW5vciB8fCB2ZXJzaW9uWzBdID09PSBtaW5NYWpvciAmJiB2ZXJzaW9uWzFdID09PSBtaW5NaW5vciAmJiB2ZXJzaW9uWzJdIDwgbWluUGF0Y2ggfHwgdmVyc2lvblswXSA+PSBtYXhNYWpvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdCb290c3RyYXBcXCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgYXQgbGVhc3QgalF1ZXJ5IHYxLjkuMSBidXQgbGVzcyB0aGFuIHY0LjAuMCcpO1xuICAgIH1cbiAgfSkoKTtcblxuICBleHBvcnRzLlV0aWwgPSBVdGlsO1xuICBleHBvcnRzLkFsZXJ0ID0gQWxlcnQ7XG4gIGV4cG9ydHMuQnV0dG9uID0gQnV0dG9uO1xuICBleHBvcnRzLkNhcm91c2VsID0gQ2Fyb3VzZWw7XG4gIGV4cG9ydHMuQ29sbGFwc2UgPSBDb2xsYXBzZTtcbiAgZXhwb3J0cy5Ecm9wZG93biA9IERyb3Bkb3duO1xuICBleHBvcnRzLk1vZGFsID0gTW9kYWw7XG4gIGV4cG9ydHMuUG9wb3ZlciA9IFBvcG92ZXI7XG4gIGV4cG9ydHMuU2Nyb2xsc3B5ID0gU2Nyb2xsU3B5O1xuICBleHBvcnRzLlRhYiA9IFRhYjtcbiAgZXhwb3J0cy5Ub2FzdCA9IFRvYXN0O1xuICBleHBvcnRzLlRvb2x0aXAgPSBUb29sdGlwO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJvb3RzdHJhcC5qcy5tYXBcbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My40LjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE5LTA1LTAxVDIxOjA0WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9uY2U6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBub2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksIHZhbCxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNjQrLCBFZGdlIDE4K1xuXHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIFwibm9uY2VcIiBwcm9wZXJ0eSBvbiBzY3JpcHRzLlxuXHRcdFx0XHQvLyBPbiB0aGUgb3RoZXIgaGFuZCwganVzdCB1c2luZyBgZ2V0QXR0cmlidXRlYCBpcyBub3QgZW5vdWdoIGFzXG5cdFx0XHRcdC8vIHRoZSBgbm9uY2VgIGF0dHJpYnV0ZSBpcyByZXNldCB0byBhbiBlbXB0eSBzdHJpbmcgd2hlbmV2ZXIgaXRcblx0XHRcdFx0Ly8gYmVjb21lcyBicm93c2luZy1jb250ZXh0IGNvbm5lY3RlZC5cblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9pc3N1ZXMvMjM2OVxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jbm9uY2UtYXR0cmlidXRlc1xuXHRcdFx0XHQvLyBUaGUgYG5vZGUuZ2V0QXR0cmlidXRlYCBjaGVjayB3YXMgYWRkZWQgZm9yIHRoZSBzYWtlIG9mXG5cdFx0XHRcdC8vIGBqUXVlcnkuZ2xvYmFsRXZhbGAgc28gdGhhdCBpdCBjYW4gZmFrZSBhIG5vbmNlLWNvbnRhaW5pbmcgbm9kZVxuXHRcdFx0XHQvLyB2aWEgYW4gb2JqZWN0LlxuXHRcdFx0XHR2YWwgPSBub2RlWyBpIF0gfHwgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoIGkgKTtcblx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZSggaSwgdmFsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjQuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUsIG9wdGlvbnMgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0gKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuNFxuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pzLmZvdW5kYXRpb24vXG4gKlxuICogRGF0ZTogMjAxOS0wNC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmRlc2NlbmQgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCJ8PlwiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmh0bWwgPSAvSFRNTCQvaSxcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZpZWxkc2V0XCI7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOCBvbmx5XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdChub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIpICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiYgcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSApIHtcblxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRkb2NFbGVtID0gKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdGlmICggcHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJlxuXHRcdChzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbXNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID9cblx0XHRcdFx0YXJndW1lbnQgKyBsZW5ndGggOlxuXHRcdFx0XHRhcmd1bWVudCA+IGxlbmd0aCA/XG5cdFx0XHRcdFx0bGVuZ3RoIDpcblx0XHRcdFx0XHRhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggdHlwZW9mIGVsZW0uY29udGVudERvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIGFsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcbi8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzLCBleGNlcHQgd2hlbiB0aGV5IGFyZSBuby1vcC5cbi8vIFNvIGV4cGVjdCBmb2N1cyB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLFxuLy8gYW5kIGJsdXIgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBub3QgYWxyZWFkeSBhY3RpdmUuXG4vLyAoZm9jdXMgYW5kIGJsdXIgYXJlIGFsd2F5cyBzeW5jaHJvbm91cyBpbiBvdGhlciBzdXBwb3J0ZWQgYnJvd3NlcnMsXG4vLyB0aGlzIGp1c3QgZGVmaW5lcyB3aGVuIHdlIGNhbiBjb3VudCBvbiBpdCkuXG5mdW5jdGlvbiBleHBlY3RTeW5jKCBlbGVtLCB0eXBlICkge1xuXHRyZXR1cm4gKCBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICkgPT09ICggdHlwZSA9PT0gXCJmb2N1c1wiICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBkYXRhUHJpdi5zZXQoIGVsLCBcImNsaWNrXCIsIC4uLiApXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIsIHJldHVyblRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyaW5nIGEgY2xpY2tcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgc3VwcHJlc3MgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHQvLyBBbHNvIHByZXZlbnQgaXQgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZSBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHJldHVybiByY2hlY2thYmxlVHlwZS50ZXN0KCB0YXJnZXQudHlwZSApICYmXG5cdFx0XHRcdFx0dGFyZ2V0LmNsaWNrICYmIG5vZGVOYW1lKCB0YXJnZXQsIFwiaW5wdXRcIiApICYmXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0YXJnZXQsIFwiY2xpY2tcIiApIHx8XG5cdFx0XHRcdFx0bm9kZU5hbWUoIHRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBFbnN1cmUgdGhlIHByZXNlbmNlIG9mIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaGFuZGxlcyBtYW51YWxseS10cmlnZ2VyZWRcbi8vIHN5bnRoZXRpYyBldmVudHMgYnkgaW50ZXJydXB0aW5nIHByb2dyZXNzIHVudGlsIHJlaW52b2tlZCBpbiByZXNwb25zZSB0b1xuLy8gKm5hdGl2ZSogZXZlbnRzIHRoYXQgaXQgZmlyZXMgZGlyZWN0bHksIGVuc3VyaW5nIHRoYXQgc3RhdGUgY2hhbmdlcyBoYXZlXG4vLyBhbHJlYWR5IG9jY3VycmVkIGJlZm9yZSBvdGhlciBsaXN0ZW5lcnMgYXJlIGludm9rZWQuXG5mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZSggZWwsIHR5cGUsIGV4cGVjdFN5bmMgKSB7XG5cblx0Ly8gTWlzc2luZyBleHBlY3RTeW5jIGluZGljYXRlcyBhIHRyaWdnZXIgY2FsbCwgd2hpY2ggbXVzdCBmb3JjZSBzZXR1cCB0aHJvdWdoIGpRdWVyeS5ldmVudC5hZGRcblx0aWYgKCAhZXhwZWN0U3luYyApIHtcblx0XHRpZiAoIGRhdGFQcml2LmdldCggZWwsIHR5cGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHJldHVyblRydWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIG5vdEFzeW5jLCByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdC8vIFNhdmVkIGRhdGEgc2hvdWxkIGJlIGZhbHNlIGluIHN1Y2ggY2FzZXMsIGJ1dCBtaWdodCBiZSBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0XG5cdFx0XHRcdC8vIGZyb20gYW4gYXN5bmMgbmF0aXZlIGhhbmRsZXIgKGdoLTQzNTApXG5cdFx0XHRcdGlmICggIXNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFyZ3VtZW50cyBmb3IgdXNlIHdoZW4gaGFuZGxpbmcgdGhlIGlubmVyIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRcdC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBhcmd1bWVudCAoYW4gZXZlbnQgb2JqZWN0KSwgc28gdGhpcyBhcnJheVxuXHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGNvbmZ1c2VkIHdpdGggYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdC5cblx0XHRcdFx0XHRzYXZlZCA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgc2F2ZWQgKTtcblxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgdGhlIG5hdGl2ZSBldmVudCBhbmQgY2FwdHVyZSBpdHMgcmVzdWx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0Ly8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXNcblx0XHRcdFx0XHRub3RBc3luYyA9IGV4cGVjdFN5bmMoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgfHwgbm90QXN5bmMgKSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0LnZhbHVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCBmb3IgYW4gZXZlbnQgd2l0aCBhIGJ1YmJsaW5nIHN1cnJvZ2F0ZVxuXHRcdFx0XHQvLyAoZm9jdXMgb3IgYmx1ciksIGFzc3VtZSB0aGF0IHRoZSBzdXJyb2dhdGUgYWxyZWFkeSBwcm9wYWdhdGVkIGZyb20gdHJpZ2dlcmluZyB0aGVcblx0XHRcdFx0Ly8gbmF0aXZlIGV2ZW50IGFuZCBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcgYWdhaW4gaGVyZS5cblx0XHRcdFx0Ly8gVGhpcyB0ZWNobmljYWxseSBnZXRzIHRoZSBvcmRlcmluZyB3cm9uZyB3LnIudC4gdG8gYC50cmlnZ2VyKClgIChpbiB3aGljaCB0aGVcblx0XHRcdFx0Ly8gYnViYmxpbmcgc3Vycm9nYXRlIHByb3BhZ2F0ZXMgKmFmdGVyKiB0aGUgbm9uLWJ1YmJsaW5nIGJhc2UpLCBidXQgdGhhdCBzZWVtc1xuXHRcdFx0XHQvLyBsZXNzIGJhZCB0aGFuIGR1cGxpY2F0aW9uLlxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge30gKS5kZWxlZ2F0ZVR5cGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIG5hdGl2ZSBldmVudCB0cmlnZ2VyZWQgYWJvdmUsIGV2ZXJ5dGhpbmcgaXMgbm93IGluIG9yZGVyXG5cdFx0XHQvLyBGaXJlIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCB3aXRoIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyAuLi5hbmQgY2FwdHVyZSB0aGUgcmVzdWx0XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwge1xuXHRcdFx0XHRcdHZhbHVlOiBqUXVlcnkuZXZlbnQudHJpZ2dlcihcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0XHQvLyBFeHRlbmQgd2l0aCB0aGUgcHJvdG90eXBlIHRvIHJlc2V0IHRoZSBhYm92ZSBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggc2F2ZWRbIDAgXSwgalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSApLFxuXHRcdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHRcdHRoaXNcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNvZGU6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxualF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIHR5cGUsIGRlbGVnYXRlVHlwZSApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSA9IHtcblxuXHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJmb2N1c1wiLCAuLi4gKVxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImJsdXJcIiwgLi4uIClcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlLCBleHBlY3RTeW5jICk7XG5cblx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRkZWxlZ2F0ZVR5cGU6IGRlbGVnYXRlVHlwZVxuXHR9O1xufSApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzMyMjlcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksXG5cblx0LyogZXNsaW50LWVuYWJsZSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzIG9ubHlcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIGVsZW0gKS5jaGlsZHJlbiggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdGlmICggKCBlbGVtLnR5cGUgfHwgXCJcIiApLnNsaWNlKCAwLCA1ICkgPT09IFwidHJ1ZS9cIiApIHtcblx0XHRlbGVtLnR5cGUgPSBlbGVtLnR5cGUuc2xpY2UoIDUgKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCAmJiAhbm9kZS5ub01vZHVsZSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRub25jZTogbm9kZS5ub25jZSB8fCBub2RlLmdldEF0dHJpYnV0ZSggXCJub25jZVwiIClcblx0XHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIG5vZGUsIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgaXNBdHRhY2hlZCggbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTY0XG5cdFx0Ly8gRG9uJ3QgZ2V0IHRyaWNrZWQgd2hlbiB6b29tIGFmZmVjdHMgb2Zmc2V0V2lkdGggKGdoLTQwMjkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdi5vZmZzZXRXaWR0aCAvIDMgKSA9PT0gMTI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblxuXHRcdC8vIElmIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyB1bmtub3duLCB0aGVuIHdlIGNhbid0IGRldGVybWluZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyXG5cdFx0Ly8gVXNlIGFuIGV4cGxpY2l0IHplcm8gdG8gYXZvaWQgTmFOIChnaC0zOTY0KVxuXHRcdCkgKSB8fCAwO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtNDMyMikuXG5cdFx0Ly8gRmFrZSBjb250ZW50LWJveCB1bnRpbCB3ZSBrbm93IGl0J3MgbmVlZGVkIHRvIGtub3cgdGhlIHRydWUgdmFsdWUuXG5cdFx0Ym94U2l6aW5nTmVlZGVkID0gIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBleHRyYSxcblx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3gsXG5cblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0b2Zmc2V0UHJvcCA9IFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICk7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblxuXHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0Ly8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG5cdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGVcblx0Ly8gV2UgdXNlIGdldENsaWVudFJlY3RzKCkgdG8gY2hlY2sgZm9yIGhpZGRlbi9kaXNjb25uZWN0ZWQuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveFxuXHRpZiAoICggIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpc0JvcmRlckJveCB8fFxuXHRcdHZhbCA9PT0gXCJhdXRvXCIgfHxcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cdFx0ZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdC8vIFdoZXJlIGF2YWlsYWJsZSwgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGFwcHJveGltYXRlIGJvcmRlciBib3ggZGltZW5zaW9ucy5cblx0XHQvLyBXaGVyZSBub3QgYXZhaWxhYmxlIChlLmcuLCBTVkcpLCBhc3N1bWUgdW5yZWxpYWJsZSBib3gtc2l6aW5nIGFuZCBpbnRlcnByZXQgdGhlXG5cdFx0Ly8gcmV0cmlldmVkIHZhbHVlIGFzIGEgY29udGVudCBib3ggZGltZW5zaW9uLlxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBvZmZzZXRQcm9wIGluIGVsZW07XG5cdFx0aWYgKCB2YWx1ZUlzQm9yZGVyQm94ICkge1xuXHRcdFx0dmFsID0gZWxlbVsgb2Zmc2V0UHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJncmlkQXJlYVwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtbkVuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblN0YXJ0XCI6IHRydWUsXG5cdFx0XCJncmlkUm93XCI6IHRydWUsXG5cdFx0XCJncmlkUm93RW5kXCI6IHRydWUsXG5cdFx0XCJncmlkUm93U3RhcnRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdC8vIFRoZSBpc0N1c3RvbVByb3AgY2hlY2sgY2FuIGJlIHJlbW92ZWQgaW4galF1ZXJ5IDQuMCB3aGVuIHdlIG9ubHkgYXV0by1hcHBlbmRcblx0XHRcdC8vIFwicHhcIiB0byBhIGZldyBoYXJkY29kZWQgdmFsdWVzLlxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gfHxcblx0XHRcdFx0XHR0d2Vlbi5lbGVtLnN0eWxlWyBmaW5hbFByb3BOYW1lKCB0d2Vlbi5wcm9wICkgXSAhPSBudWxsICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBEYXRlLm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdID1cblx0XHRcdFx0XHRcdFx0XHRcdCggcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdIHx8IFtdIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmNvbmNhdCggbWF0Y2hbIDIgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaC5qb2luKCBcIiwgXCIgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXG5cdFx0Ly8gT25seSBldmFsdWF0ZSB0aGUgcmVzcG9uc2UgaWYgaXQgaXMgc3VjY2Vzc2Z1bCAoZ2gtNDEyNilcblx0XHQvLyBkYXRhRmlsdGVyIGlzIG5vdCBpbnZva2VkIGZvciBmYWlsdXJlIHJlc3BvbnNlcywgc28gdXNpbmcgaXQgaW5zdGVhZFxuXHRcdC8vIG9mIHRoZSBkZWZhdWx0IGNvbnZlcnRlciBpcyBrbHVkZ3kgYnV0IGl0IHdvcmtzLlxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oKSB7fVxuXHRcdH0sXG5cdFx0ZGF0YUZpbHRlcjogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHJlc3BvbnNlLCBvcHRpb25zICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIG9yIGZvcmNlZC1ieS1hdHRycyByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gfHwgcy5zY3JpcHRBdHRycyApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIHMuc2NyaXB0QXR0cnMgfHwge30gKVxuXHRcdFx0XHRcdC5wcm9wKCB7IGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCwgc3JjOiBzLnVybCB9IClcblx0XHRcdFx0XHQub24oIFwibG9hZCBlcnJvclwiLCBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fVxufSApO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCAhbm9HbG9iYWwgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIi8qKiFcbiAqIEBmaWxlT3ZlcnZpZXcgS2lja2FzcyBsaWJyYXJ5IHRvIGNyZWF0ZSBhbmQgcGxhY2UgcG9wcGVycyBuZWFyIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50cy5cbiAqIEB2ZXJzaW9uIDEuMTYuMFxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBGZWRlcmljbyBaaXZvbG8gYW5kIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKi9cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnO1xuXG52YXIgdGltZW91dER1cmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbG9uZ2VyVGltZW91dEJyb3dzZXJzID0gWydFZGdlJywgJ1RyaWRlbnQnLCAnRmlyZWZveCddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxvbmdlclRpbWVvdXRCcm93c2Vycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChpc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKGxvbmdlclRpbWVvdXRCcm93c2Vyc1tpXSkgPj0gMCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufSgpO1xuXG5mdW5jdGlvbiBtaWNyb3Rhc2tEZWJvdW5jZShmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5Qcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxlZCA9IGZhbHNlO1xuICAgICAgZm4oKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0sIHRpbWVvdXREdXJhdGlvbik7XG4gICAgfVxuICB9O1xufVxuXG52YXIgc3VwcG9ydHNNaWNyb1Rhc2tzID0gaXNCcm93c2VyICYmIHdpbmRvdy5Qcm9taXNlO1xuXG4vKipcbiogQ3JlYXRlIGEgZGVib3VuY2VkIHZlcnNpb24gb2YgYSBtZXRob2QsIHRoYXQncyBhc3luY2hyb25vdXNseSBkZWZlcnJlZFxuKiBidXQgY2FsbGVkIGluIHRoZSBtaW5pbXVtIHRpbWUgcG9zc2libGUuXG4qXG4qIEBtZXRob2RcbiogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuKiBAYXJndW1lbnQge0Z1bmN0aW9ufSBmblxuKiBAcmV0dXJucyB7RnVuY3Rpb259XG4qL1xudmFyIGRlYm91bmNlID0gc3VwcG9ydHNNaWNyb1Rhc2tzID8gbWljcm90YXNrRGVib3VuY2UgOiB0YXNrRGVib3VuY2U7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhcmlhYmxlIGlzIGEgZnVuY3Rpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QW55fSBmdW5jdGlvblRvQ2hlY2sgLSB2YXJpYWJsZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0bzogaXMgYSBmdW5jdGlvbj9cbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jdGlvblRvQ2hlY2spIHtcbiAgdmFyIGdldFR5cGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uVG9DaGVjayAmJiBnZXRUeXBlLnRvU3RyaW5nLmNhbGwoZnVuY3Rpb25Ub0NoZWNrKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBHZXQgQ1NTIGNvbXB1dGVkIHByb3BlcnR5IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICB2YXIgY3NzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG4gIHJldHVybiBwcm9wZXJ0eSA/IGNzc1twcm9wZXJ0eV0gOiBjc3M7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGFyZW50Tm9kZSBvciB0aGUgaG9zdCBvZiB0aGUgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSB8fCBlbGVtZW50Lmhvc3Q7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2Nyb2xsaW5nIHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gc2Nyb2xsIHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBSZXR1cm4gYm9keSwgYGdldFNjcm9sbGAgd2lsbCB0YWtlIGNhcmUgdG8gZ2V0IHRoZSBjb3JyZWN0IGBzY3JvbGxUb3BgIGZyb20gaXRcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBzd2l0Y2ggKGVsZW1lbnQubm9kZU5hbWUpIHtcbiAgICBjYXNlICdIVE1MJzpcbiAgICBjYXNlICdCT0RZJzpcbiAgICAgIHJldHVybiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keTtcbiAgICBjYXNlICcjZG9jdW1lbnQnOlxuICAgICAgcmV0dXJuIGVsZW1lbnQuYm9keTtcbiAgfVxuXG4gIC8vIEZpcmVmb3ggd2FudCB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuXG4gIHZhciBfZ2V0U3R5bGVDb21wdXRlZFByb3AgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCksXG4gICAgICBvdmVyZmxvdyA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dZO1xuXG4gIGlmICgvKGF1dG98c2Nyb2xsfG92ZXJsYXkpLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSByZWZlcmVuY2Ugbm9kZSBvZiB0aGUgcmVmZXJlbmNlIG9iamVjdCwgb3IgdGhlIHJlZmVyZW5jZSBvYmplY3QgaXRzZWxmLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0UmVmZXJlbmNlTm9kZShyZWZlcmVuY2UpIHtcbiAgcmV0dXJuIHJlZmVyZW5jZSAmJiByZWZlcmVuY2UucmVmZXJlbmNlTm9kZSA/IHJlZmVyZW5jZS5yZWZlcmVuY2VOb2RlIDogcmVmZXJlbmNlO1xufVxuXG52YXIgaXNJRTExID0gaXNCcm93c2VyICYmICEhKHdpbmRvdy5NU0lucHV0TWV0aG9kQ29udGV4dCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGlzSUUxMCA9IGlzQnJvd3NlciAmJiAvTVNJRSAxMC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBicm93c2VyIGlzIEludGVybmV0IEV4cGxvcmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvbiB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGlzSUVcbiAqL1xuZnVuY3Rpb24gaXNJRSh2ZXJzaW9uKSB7XG4gIGlmICh2ZXJzaW9uID09PSAxMSkge1xuICAgIHJldHVybiBpc0lFMTE7XG4gIH1cbiAgaWYgKHZlcnNpb24gPT09IDEwKSB7XG4gICAgcmV0dXJuIGlzSUUxMDtcbiAgfVxuICByZXR1cm4gaXNJRTExIHx8IGlzSUUxMDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvZmZzZXQgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICB2YXIgbm9PZmZzZXRQYXJlbnQgPSBpc0lFKDEwKSA/IGRvY3VtZW50LmJvZHkgOiBudWxsO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudCB8fCBudWxsO1xuICAvLyBTa2lwIGhpZGRlbiBlbGVtZW50cyB3aGljaCBkb24ndCBoYXZlIGFuIG9mZnNldFBhcmVudFxuICB3aGlsZSAob2Zmc2V0UGFyZW50ID09PSBub09mZnNldFBhcmVudCAmJiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykge1xuICAgIG9mZnNldFBhcmVudCA9IChlbGVtZW50ID0gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpLm9mZnNldFBhcmVudDtcbiAgfVxuXG4gIHZhciBub2RlTmFtZSA9IG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQubm9kZU5hbWU7XG5cbiAgaWYgKCFub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudCA/IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyAub2Zmc2V0UGFyZW50IHdpbGwgcmV0dXJuIHRoZSBjbG9zZXN0IFRILCBURCBvciBUQUJMRSBpbiBjYXNlXG4gIC8vIG5vIG9mZnNldFBhcmVudCBpcyBwcmVzZW50LCBJIGhhdGUgdGhpcyBqb2IuLi5cbiAgaWYgKFsnVEgnLCAnVEQnLCAnVEFCTEUnXS5pbmRleE9mKG9mZnNldFBhcmVudC5ub2RlTmFtZSkgIT09IC0xICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShvZmZzZXRQYXJlbnQsICdwb3NpdGlvbicpID09PSAnc3RhdGljJykge1xuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQ7XG59XG5cbmZ1bmN0aW9uIGlzT2Zmc2V0Q29udGFpbmVyKGVsZW1lbnQpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gbm9kZU5hbWUgPT09ICdIVE1MJyB8fCBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCkgPT09IGVsZW1lbnQ7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIHJvb3Qgbm9kZSAoZG9jdW1lbnQsIHNoYWRvd0RPTSByb290KSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcm9vdCBub2RlXG4gKi9cbmZ1bmN0aW9uIGdldFJvb3Qobm9kZSkge1xuICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGdldFJvb3Qobm9kZS5wYXJlbnROb2RlKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBvZmZzZXQgcGFyZW50IGNvbW1vbiB0byB0aGUgdHdvIHByb3ZpZGVkIG5vZGVzXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQxXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQyXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gY29tbW9uIG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZWxlbWVudDIpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudDEgfHwgIWVsZW1lbnQxLm5vZGVUeXBlIHx8ICFlbGVtZW50MiB8fCAhZWxlbWVudDIubm9kZVR5cGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gSGVyZSB3ZSBtYWtlIHN1cmUgdG8gZ2l2ZSBhcyBcInN0YXJ0XCIgdGhlIGVsZW1lbnQgdGhhdCBjb21lcyBmaXJzdCBpbiB0aGUgRE9NXG4gIHZhciBvcmRlciA9IGVsZW1lbnQxLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGVsZW1lbnQyKSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HO1xuICB2YXIgc3RhcnQgPSBvcmRlciA/IGVsZW1lbnQxIDogZWxlbWVudDI7XG4gIHZhciBlbmQgPSBvcmRlciA/IGVsZW1lbnQyIDogZWxlbWVudDE7XG5cbiAgLy8gR2V0IGNvbW1vbiBhbmNlc3RvciBjb250YWluZXJcbiAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnQsIDApO1xuICByYW5nZS5zZXRFbmQoZW5kLCAwKTtcbiAgdmFyIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG5cbiAgLy8gQm90aCBub2RlcyBhcmUgaW5zaWRlICNkb2N1bWVudFxuXG4gIGlmIChlbGVtZW50MSAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgJiYgZWxlbWVudDIgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIHx8IHN0YXJ0LmNvbnRhaW5zKGVuZCkpIHtcbiAgICBpZiAoaXNPZmZzZXRDb250YWluZXIoY29tbW9uQW5jZXN0b3JDb250YWluZXIpKSB7XG4gICAgICByZXR1cm4gY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChjb21tb25BbmNlc3RvckNvbnRhaW5lcik7XG4gIH1cblxuICAvLyBvbmUgb2YgdGhlIG5vZGVzIGlzIGluc2lkZSBzaGFkb3dET00sIGZpbmQgd2hpY2ggb25lXG4gIHZhciBlbGVtZW50MXJvb3QgPSBnZXRSb290KGVsZW1lbnQxKTtcbiAgaWYgKGVsZW1lbnQxcm9vdC5ob3N0KSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDFyb290Lmhvc3QsIGVsZW1lbnQyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZ2V0Um9vdChlbGVtZW50MikuaG9zdCk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzY3JvbGwgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQgaW4gdGhlIGdpdmVuIHNpZGUgKHRvcCBhbmQgbGVmdClcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHNpZGUgYHRvcGAgb3IgYGxlZnRgXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhbW91bnQgb2Ygc2Nyb2xsZWQgcGl4ZWxzXG4gKi9cbmZ1bmN0aW9uIGdldFNjcm9sbChlbGVtZW50KSB7XG4gIHZhciBzaWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAndG9wJztcblxuICB2YXIgdXBwZXJTaWRlID0gc2lkZSA9PT0gJ3RvcCcgPyAnc2Nyb2xsVG9wJyA6ICdzY3JvbGxMZWZ0JztcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHZhciBzY3JvbGxpbmdFbGVtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgaHRtbDtcbiAgICByZXR1cm4gc2Nyb2xsaW5nRWxlbWVudFt1cHBlclNpZGVdO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRbdXBwZXJTaWRlXTtcbn1cblxuLypcbiAqIFN1bSBvciBzdWJ0cmFjdCB0aGUgZWxlbWVudCBzY3JvbGwgdmFsdWVzIChsZWZ0IGFuZCB0b3ApIGZyb20gYSBnaXZlbiByZWN0IG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHJlY3QgLSBSZWN0IG9iamVjdCB5b3Ugd2FudCB0byBjaGFuZ2VcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCBmcm9tIHRoZSBmdW5jdGlvbiByZWFkcyB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHBhcmFtIHtCb29sZWFufSBzdWJ0cmFjdCAtIHNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIHN1YnRyYWN0IHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY3QgLSBUaGUgbW9kaWZpZXIgcmVjdCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gaW5jbHVkZVNjcm9sbChyZWN0LCBlbGVtZW50KSB7XG4gIHZhciBzdWJ0cmFjdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gIHZhciBtb2RpZmllciA9IHN1YnRyYWN0ID8gLTEgOiAxO1xuICByZWN0LnRvcCArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZXR1cm4gcmVjdDtcbn1cblxuLypcbiAqIEhlbHBlciB0byBkZXRlY3QgYm9yZGVycyBvZiBhIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXG4gKiBSZXN1bHQgb2YgYGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eWAgb24gdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBheGlzIC0gYHhgIG9yIGB5YFxuICogQHJldHVybiB7bnVtYmVyfSBib3JkZXJzIC0gVGhlIGJvcmRlcnMgc2l6ZSBvZiB0aGUgZ2l2ZW4gYXhpc1xuICovXG5cbmZ1bmN0aW9uIGdldEJvcmRlcnNTaXplKHN0eWxlcywgYXhpcykge1xuICB2YXIgc2lkZUEgPSBheGlzID09PSAneCcgPyAnTGVmdCcgOiAnVG9wJztcbiAgdmFyIHNpZGVCID0gc2lkZUEgPT09ICdMZWZ0JyA/ICdSaWdodCcgOiAnQm90dG9tJztcblxuICByZXR1cm4gcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQSArICdXaWR0aCddLCAxMCkgKyBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVCICsgJ1dpZHRoJ10sIDEwKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2l6ZShheGlzLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSB7XG4gIHJldHVybiBNYXRoLm1heChib2R5WydvZmZzZXQnICsgYXhpc10sIGJvZHlbJ3Njcm9sbCcgKyBheGlzXSwgaHRtbFsnY2xpZW50JyArIGF4aXNdLCBodG1sWydvZmZzZXQnICsgYXhpc10sIGh0bWxbJ3Njcm9sbCcgKyBheGlzXSwgaXNJRSgxMCkgPyBwYXJzZUludChodG1sWydvZmZzZXQnICsgYXhpc10pICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdUb3AnIDogJ0xlZnQnKV0pICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdCb3R0b20nIDogJ1JpZ2h0JyldKSA6IDApO1xufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3dTaXplcyhkb2N1bWVudCkge1xuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgY29tcHV0ZWRTdHlsZSA9IGlzSUUoMTApICYmIGdldENvbXB1dGVkU3R5bGUoaHRtbCk7XG5cbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IGdldFNpemUoJ0hlaWdodCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpLFxuICAgIHdpZHRoOiBnZXRTaXplKCdXaWR0aCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpXG4gIH07XG59XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cblxuXG5cblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBHaXZlbiBlbGVtZW50IG9mZnNldHMsIGdlbmVyYXRlIGFuIG91dHB1dCBzaW1pbGFyIHRvIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IG9mZnNldHNcbiAqIEByZXR1cm5zIHtPYmplY3R9IENsaWVudFJlY3QgbGlrZSBvdXRwdXRcbiAqL1xuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdChvZmZzZXRzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb2Zmc2V0cywge1xuICAgIHJpZ2h0OiBvZmZzZXRzLmxlZnQgKyBvZmZzZXRzLndpZHRoLFxuICAgIGJvdHRvbTogb2Zmc2V0cy50b3AgKyBvZmZzZXRzLmhlaWdodFxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgYm91bmRpbmcgY2xpZW50IHJlY3Qgb2YgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7T2JqZWN0fSBjbGllbnQgcmVjdFxuICovXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IHt9O1xuXG4gIC8vIElFMTAgMTAgRklYOiBQbGVhc2UsIGRvbid0IGFzaywgdGhlIGVsZW1lbnQgaXNuJ3RcbiAgLy8gY29uc2lkZXJlZCBpbiBET00gaW4gc29tZSBjaXJjdW1zdGFuY2VzLi4uXG4gIC8vIFRoaXMgaXNuJ3QgcmVwcm9kdWNpYmxlIGluIElFMTAgY29tcGF0aWJpbGl0eSBtb2RlIG9mIElFMTFcbiAgdHJ5IHtcbiAgICBpZiAoaXNJRSgxMCkpIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICAgICAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQ7XG4gICAgICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0ge1xuICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICB0b3A6IHJlY3QudG9wLFxuICAgIHdpZHRoOiByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0LFxuICAgIGhlaWdodDogcmVjdC5ib3R0b20gLSByZWN0LnRvcFxuICB9O1xuXG4gIC8vIHN1YnRyYWN0IHNjcm9sbGJhciBzaXplIGZyb20gc2l6ZXNcbiAgdmFyIHNpemVzID0gZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnID8gZ2V0V2luZG93U2l6ZXMoZWxlbWVudC5vd25lckRvY3VtZW50KSA6IHt9O1xuICB2YXIgd2lkdGggPSBzaXplcy53aWR0aCB8fCBlbGVtZW50LmNsaWVudFdpZHRoIHx8IHJlc3VsdC53aWR0aDtcbiAgdmFyIGhlaWdodCA9IHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuaGVpZ2h0O1xuXG4gIHZhciBob3JpelNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB3aWR0aDtcbiAgdmFyIHZlcnRTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldEhlaWdodCAtIGhlaWdodDtcblxuICAvLyBpZiBhbiBoeXBvdGhldGljYWwgc2Nyb2xsYmFyIGlzIGRldGVjdGVkLCB3ZSBtdXN0IGJlIHN1cmUgaXQncyBub3QgYSBgYm9yZGVyYFxuICAvLyB3ZSBtYWtlIHRoaXMgY2hlY2sgY29uZGl0aW9uYWwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgaWYgKGhvcml6U2Nyb2xsYmFyIHx8IHZlcnRTY3JvbGxiYXIpIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpO1xuICAgIGhvcml6U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3gnKTtcbiAgICB2ZXJ0U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3knKTtcblxuICAgIHJlc3VsdC53aWR0aCAtPSBob3JpelNjcm9sbGJhcjtcbiAgICByZXN1bHQuaGVpZ2h0IC09IHZlcnRTY3JvbGxiYXI7XG4gIH1cblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoY2hpbGRyZW4sIHBhcmVudCkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgdmFyIGlzSUUxMCA9IGlzSUUoMTApO1xuICB2YXIgaXNIVE1MID0gcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCc7XG4gIHZhciBjaGlsZHJlblJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoY2hpbGRyZW4pO1xuICB2YXIgcGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChwYXJlbnQpO1xuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGNoaWxkcmVuKTtcblxuICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KHBhcmVudCk7XG4gIHZhciBib3JkZXJUb3BXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlclRvcFdpZHRoLCAxMCk7XG4gIHZhciBib3JkZXJMZWZ0V2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJMZWZ0V2lkdGgsIDEwKTtcblxuICAvLyBJbiBjYXNlcyB3aGVyZSB0aGUgcGFyZW50IGlzIGZpeGVkLCB3ZSBtdXN0IGlnbm9yZSBuZWdhdGl2ZSBzY3JvbGwgaW4gb2Zmc2V0IGNhbGNcbiAgaWYgKGZpeGVkUG9zaXRpb24gJiYgaXNIVE1MKSB7XG4gICAgcGFyZW50UmVjdC50b3AgPSBNYXRoLm1heChwYXJlbnRSZWN0LnRvcCwgMCk7XG4gICAgcGFyZW50UmVjdC5sZWZ0ID0gTWF0aC5tYXgocGFyZW50UmVjdC5sZWZ0LCAwKTtcbiAgfVxuICB2YXIgb2Zmc2V0cyA9IGdldENsaWVudFJlY3Qoe1xuICAgIHRvcDogY2hpbGRyZW5SZWN0LnRvcCAtIHBhcmVudFJlY3QudG9wIC0gYm9yZGVyVG9wV2lkdGgsXG4gICAgbGVmdDogY2hpbGRyZW5SZWN0LmxlZnQgLSBwYXJlbnRSZWN0LmxlZnQgLSBib3JkZXJMZWZ0V2lkdGgsXG4gICAgd2lkdGg6IGNoaWxkcmVuUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IGNoaWxkcmVuUmVjdC5oZWlnaHRcbiAgfSk7XG4gIG9mZnNldHMubWFyZ2luVG9wID0gMDtcbiAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gMDtcblxuICAvLyBTdWJ0cmFjdCBtYXJnaW5zIG9mIGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGl0J3MgYmVpbmcgdXNlZCBhcyBwYXJlbnRcbiAgLy8gd2UgZG8gdGhpcyBvbmx5IG9uIEhUTUwgYmVjYXVzZSBpdCdzIHRoZSBvbmx5IGVsZW1lbnQgdGhhdCBiZWhhdmVzXG4gIC8vIGRpZmZlcmVudGx5IHdoZW4gbWFyZ2lucyBhcmUgYXBwbGllZCB0byBpdC4gVGhlIG1hcmdpbnMgYXJlIGluY2x1ZGVkIGluXG4gIC8vIHRoZSBib3ggb2YgdGhlIGRvY3VtZW50RWxlbWVudCwgaW4gdGhlIG90aGVyIGNhc2VzIG5vdC5cbiAgaWYgKCFpc0lFMTAgJiYgaXNIVE1MKSB7XG4gICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCwgMTApO1xuICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCwgMTApO1xuXG4gICAgb2Zmc2V0cy50b3AgLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5ib3R0b20gLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5sZWZ0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG4gICAgb2Zmc2V0cy5yaWdodCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuXG4gICAgLy8gQXR0YWNoIG1hcmdpblRvcCBhbmQgbWFyZ2luTGVmdCBiZWNhdXNlIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyB3ZSBtYXkgbmVlZCB0aGVtXG4gICAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gbWFyZ2luTGVmdDtcbiAgfVxuXG4gIGlmIChpc0lFMTAgJiYgIWZpeGVkUG9zaXRpb24gPyBwYXJlbnQuY29udGFpbnMoc2Nyb2xsUGFyZW50KSA6IHBhcmVudCA9PT0gc2Nyb2xsUGFyZW50ICYmIHNjcm9sbFBhcmVudC5ub2RlTmFtZSAhPT0gJ0JPRFknKSB7XG4gICAgb2Zmc2V0cyA9IGluY2x1ZGVTY3JvbGwob2Zmc2V0cywgcGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG5mdW5jdGlvbiBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUoZWxlbWVudCkge1xuICB2YXIgZXhjbHVkZVNjcm9sbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgcmVsYXRpdmVPZmZzZXQgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoZWxlbWVudCwgaHRtbCk7XG4gIHZhciB3aWR0aCA9IE1hdGgubWF4KGh0bWwuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICB2YXIgaGVpZ2h0ID0gTWF0aC5tYXgoaHRtbC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcblxuICB2YXIgc2Nyb2xsVG9wID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCkgOiAwO1xuICB2YXIgc2Nyb2xsTGVmdCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwsICdsZWZ0JykgOiAwO1xuXG4gIHZhciBvZmZzZXQgPSB7XG4gICAgdG9wOiBzY3JvbGxUb3AgLSByZWxhdGl2ZU9mZnNldC50b3AgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5Ub3AsXG4gICAgbGVmdDogc2Nyb2xsTGVmdCAtIHJlbGF0aXZlT2Zmc2V0LmxlZnQgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5MZWZ0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KG9mZnNldCk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgZml4ZWQgb3IgaXMgaW5zaWRlIGEgZml4ZWQgcGFyZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gY3VzdG9tQ29udGFpbmVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvIFwiaXNGaXhlZD9cIlxuICovXG5mdW5jdGlvbiBpc0ZpeGVkKGVsZW1lbnQpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIHBhcmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xuICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGlzRml4ZWQocGFyZW50Tm9kZSk7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGZpcnN0IHBhcmVudCBvZiBhbiBlbGVtZW50IHRoYXQgaGFzIGEgdHJhbnNmb3JtZWQgcHJvcGVydHkgZGVmaW5lZFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gZmlyc3QgdHJhbnNmb3JtZWQgcGFyZW50IG9yIGRvY3VtZW50RWxlbWVudFxuICovXG5cbmZ1bmN0aW9uIGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50LnBhcmVudEVsZW1lbnQgfHwgaXNJRSgpKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuICB2YXIgZWwgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIHdoaWxlIChlbCAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWwsICd0cmFuc2Zvcm0nKSA9PT0gJ25vbmUnKSB7XG4gICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBlbCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG59XG5cbi8qKlxuICogQ29tcHV0ZWQgdGhlIGJvdW5kYXJpZXMgbGltaXRzIGFuZCByZXR1cm4gdGhlbVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYWRkaW5nXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudCAtIEVsZW1lbnQgdXNlZCB0byBkZWZpbmUgdGhlIGJvdW5kYXJpZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZml4ZWRQb3NpdGlvbiAtIElzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IENvb3JkaW5hdGVzIG9mIHRoZSBib3VuZGFyaWVzXG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTtcblxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuXG4gIHZhciBib3VuZGFyaWVzID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGZpeGVkUG9zaXRpb24gPyBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KHBvcHBlcikgOiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgZ2V0UmVmZXJlbmNlTm9kZShyZWZlcmVuY2UpKTtcblxuICAvLyBIYW5kbGUgdmlld3BvcnQgY2FzZVxuICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd2aWV3cG9ydCcpIHtcbiAgICBib3VuZGFyaWVzID0gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gSGFuZGxlIG90aGVyIGNhc2VzIGJhc2VkIG9uIERPTSBlbGVtZW50IHVzZWQgYXMgYm91bmRhcmllc1xuICAgIHZhciBib3VuZGFyaWVzTm9kZSA9IHZvaWQgMDtcbiAgICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICdzY3JvbGxQYXJlbnQnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKHJlZmVyZW5jZSkpO1xuICAgICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3dpbmRvdycpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGJvdW5kYXJpZXNFbGVtZW50O1xuICAgIH1cblxuICAgIHZhciBvZmZzZXRzID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGJvdW5kYXJpZXNOb2RlLCBvZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xuXG4gICAgLy8gSW4gY2FzZSBvZiBIVE1MLCB3ZSBuZWVkIGEgZGlmZmVyZW50IGNvbXB1dGF0aW9uXG4gICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnSFRNTCcgJiYgIWlzRml4ZWQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgdmFyIF9nZXRXaW5kb3dTaXplcyA9IGdldFdpbmRvd1NpemVzKHBvcHBlci5vd25lckRvY3VtZW50KSxcbiAgICAgICAgICBoZWlnaHQgPSBfZ2V0V2luZG93U2l6ZXMuaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoID0gX2dldFdpbmRvd1NpemVzLndpZHRoO1xuXG4gICAgICBib3VuZGFyaWVzLnRvcCArPSBvZmZzZXRzLnRvcCAtIG9mZnNldHMubWFyZ2luVG9wO1xuICAgICAgYm91bmRhcmllcy5ib3R0b20gPSBoZWlnaHQgKyBvZmZzZXRzLnRvcDtcbiAgICAgIGJvdW5kYXJpZXMubGVmdCArPSBvZmZzZXRzLmxlZnQgLSBvZmZzZXRzLm1hcmdpbkxlZnQ7XG4gICAgICBib3VuZGFyaWVzLnJpZ2h0ID0gd2lkdGggKyBvZmZzZXRzLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBhbGwgdGhlIG90aGVyIERPTSBlbGVtZW50cywgdGhpcyBvbmUgaXMgZ29vZFxuICAgICAgYm91bmRhcmllcyA9IG9mZnNldHM7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHBhZGRpbmdzXG4gIHBhZGRpbmcgPSBwYWRkaW5nIHx8IDA7XG4gIHZhciBpc1BhZGRpbmdOdW1iZXIgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ251bWJlcic7XG4gIGJvdW5kYXJpZXMubGVmdCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5sZWZ0IHx8IDA7XG4gIGJvdW5kYXJpZXMudG9wICs9IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLnRvcCB8fCAwO1xuICBib3VuZGFyaWVzLnJpZ2h0IC09IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLnJpZ2h0IHx8IDA7XG4gIGJvdW5kYXJpZXMuYm90dG9tIC09IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmJvdHRvbSB8fCAwO1xuXG4gIHJldHVybiBib3VuZGFyaWVzO1xufVxuXG5mdW5jdGlvbiBnZXRBcmVhKF9yZWYpIHtcbiAgdmFyIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0O1xuXG4gIHJldHVybiB3aWR0aCAqIGhlaWdodDtcbn1cblxuLyoqXG4gKiBVdGlsaXR5IHVzZWQgdG8gdHJhbnNmb3JtIHRoZSBgYXV0b2AgcGxhY2VtZW50IHRvIHRoZSBwbGFjZW1lbnQgd2l0aCBtb3JlXG4gKiBhdmFpbGFibGUgc3BhY2UuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChwbGFjZW1lbnQsIHJlZlJlY3QsIHBvcHBlciwgcmVmZXJlbmNlLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICB2YXIgcGFkZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMDtcblxuICBpZiAocGxhY2VtZW50LmluZGV4T2YoJ2F1dG8nKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gcGxhY2VtZW50O1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCk7XG5cbiAgdmFyIHJlY3RzID0ge1xuICAgIHRvcDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHJlZlJlY3QudG9wIC0gYm91bmRhcmllcy50b3BcbiAgICB9LFxuICAgIHJpZ2h0OiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy5yaWdodCAtIHJlZlJlY3QucmlnaHQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfSxcbiAgICBib3R0b206IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmJvdHRvbSAtIHJlZlJlY3QuYm90dG9tXG4gICAgfSxcbiAgICBsZWZ0OiB7XG4gICAgICB3aWR0aDogcmVmUmVjdC5sZWZ0IC0gYm91bmRhcmllcy5sZWZ0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH1cbiAgfTtcblxuICB2YXIgc29ydGVkQXJlYXMgPSBPYmplY3Qua2V5cyhyZWN0cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAga2V5OiBrZXlcbiAgICB9LCByZWN0c1trZXldLCB7XG4gICAgICBhcmVhOiBnZXRBcmVhKHJlY3RzW2tleV0pXG4gICAgfSk7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYi5hcmVhIC0gYS5hcmVhO1xuICB9KTtcblxuICB2YXIgZmlsdGVyZWRBcmVhcyA9IHNvcnRlZEFyZWFzLmZpbHRlcihmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgd2lkdGggPSBfcmVmMi53aWR0aCxcbiAgICAgICAgaGVpZ2h0ID0gX3JlZjIuaGVpZ2h0O1xuICAgIHJldHVybiB3aWR0aCA+PSBwb3BwZXIuY2xpZW50V2lkdGggJiYgaGVpZ2h0ID49IHBvcHBlci5jbGllbnRIZWlnaHQ7XG4gIH0pO1xuXG4gIHZhciBjb21wdXRlZFBsYWNlbWVudCA9IGZpbHRlcmVkQXJlYXMubGVuZ3RoID4gMCA/IGZpbHRlcmVkQXJlYXNbMF0ua2V5IDogc29ydGVkQXJlYXNbMF0ua2V5O1xuXG4gIHZhciB2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICByZXR1cm4gY29tcHV0ZWRQbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHN0YXRlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSByZWZlcmVuY2UgLSB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtFbGVtZW50fSBmaXhlZFBvc2l0aW9uIC0gaXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG51bGw7XG5cbiAgdmFyIGNvbW1vbk9mZnNldFBhcmVudCA9IGZpeGVkUG9zaXRpb24gPyBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KHBvcHBlcikgOiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgZ2V0UmVmZXJlbmNlTm9kZShyZWZlcmVuY2UpKTtcbiAgcmV0dXJuIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShyZWZlcmVuY2UsIGNvbW1vbk9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvdXRlciBzaXplcyBvZiB0aGUgZ2l2ZW4gZWxlbWVudCAob2Zmc2V0IHNpemUgKyBtYXJnaW5zKVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBvYmplY3QgY29udGFpbmluZyB3aWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0T3V0ZXJTaXplcyhlbGVtZW50KSB7XG4gIHZhciB3aW5kb3cgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgdmFyIHggPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3AgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Cb3R0b20gfHwgMCk7XG4gIHZhciB5ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCB8fCAwKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblJpZ2h0IHx8IDApO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoICsgeSxcbiAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgeFxuICB9O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50XG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICB2YXIgaGFzaCA9IHsgbGVmdDogJ3JpZ2h0JywgcmlnaHQ6ICdsZWZ0JywgYm90dG9tOiAndG9wJywgdG9wOiAnYm90dG9tJyB9O1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcG9zaXRpb24gLSBDU1MgcG9zaXRpb24gdGhlIFBvcHBlciB3aWxsIGdldCBhcHBsaWVkXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzIC0gdGhlIHJlZmVyZW5jZSBvZmZzZXRzICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7U3RyaW5nfSBwbGFjZW1lbnQgLSBvbmUgb2YgdGhlIHZhbGlkIHBsYWNlbWVudCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UG9wcGVyT2Zmc2V0cyhwb3BwZXIsIHJlZmVyZW5jZU9mZnNldHMsIHBsYWNlbWVudCkge1xuICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICAvLyBHZXQgcG9wcGVyIG5vZGUgc2l6ZXNcbiAgdmFyIHBvcHBlclJlY3QgPSBnZXRPdXRlclNpemVzKHBvcHBlcik7XG5cbiAgLy8gQWRkIHBvc2l0aW9uLCB3aWR0aCBhbmQgaGVpZ2h0IHRvIG91ciBvZmZzZXRzIG9iamVjdFxuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHtcbiAgICB3aWR0aDogcG9wcGVyUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHBvcHBlclJlY3QuaGVpZ2h0XG4gIH07XG5cbiAgLy8gZGVwZW5kaW5nIGJ5IHRoZSBwb3BwZXIgcGxhY2VtZW50IHdlIGhhdmUgdG8gY29tcHV0ZSBpdHMgb2Zmc2V0cyBzbGlnaHRseSBkaWZmZXJlbnRseVxuICB2YXIgaXNIb3JpeiA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBtYWluU2lkZSA9IGlzSG9yaXogPyAndG9wJyA6ICdsZWZ0JztcbiAgdmFyIHNlY29uZGFyeVNpZGUgPSBpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBtZWFzdXJlbWVudCA9IGlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIHZhciBzZWNvbmRhcnlNZWFzdXJlbWVudCA9ICFpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gIHBvcHBlck9mZnNldHNbbWFpblNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1ttYWluU2lkZV0gKyByZWZlcmVuY2VPZmZzZXRzW21lYXN1cmVtZW50XSAvIDIgLSBwb3BwZXJSZWN0W21lYXN1cmVtZW50XSAvIDI7XG4gIGlmIChwbGFjZW1lbnQgPT09IHNlY29uZGFyeVNpZGUpIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSAtIHBvcHBlclJlY3Rbc2Vjb25kYXJ5TWVhc3VyZW1lbnRdO1xuICB9IGVsc2Uge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW2dldE9wcG9zaXRlUGxhY2VtZW50KHNlY29uZGFyeVNpZGUpXTtcbiAgfVxuXG4gIHJldHVybiBwb3BwZXJPZmZzZXRzO1xufVxuXG4vKipcbiAqIE1pbWljcyB0aGUgYGZpbmRgIG1ldGhvZCBvZiBBcnJheVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kKGFyciwgY2hlY2spIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kIGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgICByZXR1cm4gYXJyLmZpbmQoY2hlY2spO1xuICB9XG5cbiAgLy8gdXNlIGBmaWx0ZXJgIHRvIG9idGFpbiB0aGUgc2FtZSBiZWhhdmlvciBvZiBgZmluZGBcbiAgcmV0dXJuIGFyci5maWx0ZXIoY2hlY2spWzBdO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW5kZXggb2YgdGhlIG1hdGNoaW5nIG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBwcm9wLCB2YWx1ZSkge1xuICAvLyB1c2UgbmF0aXZlIGZpbmRJbmRleCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgpIHtcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChmdW5jdGlvbiAoY3VyKSB7XG4gICAgICByZXR1cm4gY3VyW3Byb3BdID09PSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHVzZSBgZmluZGAgKyBgaW5kZXhPZmAgaWYgYGZpbmRJbmRleGAgaXNuJ3Qgc3VwcG9ydGVkXG4gIHZhciBtYXRjaCA9IGZpbmQoYXJyLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9ialtwcm9wXSA9PT0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gYXJyLmluZGV4T2YobWF0Y2gpO1xufVxuXG4vKipcbiAqIExvb3AgdHJvdWdoIHRoZSBsaXN0IG9mIG1vZGlmaWVycyBhbmQgcnVuIHRoZW0gaW4gb3JkZXIsXG4gKiBlYWNoIG9mIHRoZW0gd2lsbCB0aGVuIGVkaXQgdGhlIGRhdGEgb2JqZWN0LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmRzIC0gT3B0aW9uYWwgbW9kaWZpZXIgbmFtZSB1c2VkIGFzIHN0b3BwZXJcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fVxuICovXG5mdW5jdGlvbiBydW5Nb2RpZmllcnMobW9kaWZpZXJzLCBkYXRhLCBlbmRzKSB7XG4gIHZhciBtb2RpZmllcnNUb1J1biA9IGVuZHMgPT09IHVuZGVmaW5lZCA/IG1vZGlmaWVycyA6IG1vZGlmaWVycy5zbGljZSgwLCBmaW5kSW5kZXgobW9kaWZpZXJzLCAnbmFtZScsIGVuZHMpKTtcblxuICBtb2RpZmllcnNUb1J1bi5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIGlmIChtb2RpZmllclsnZnVuY3Rpb24nXSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICAgIGNvbnNvbGUud2FybignYG1vZGlmaWVyLmZ1bmN0aW9uYCBpcyBkZXByZWNhdGVkLCB1c2UgYG1vZGlmaWVyLmZuYCEnKTtcbiAgICB9XG4gICAgdmFyIGZuID0gbW9kaWZpZXJbJ2Z1bmN0aW9uJ10gfHwgbW9kaWZpZXIuZm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgaWYgKG1vZGlmaWVyLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihmbikpIHtcbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIHRvIG9mZnNldHMgdG8gbWFrZSB0aGVtIGEgY29tcGxldGUgY2xpZW50UmVjdCBvYmplY3RcbiAgICAgIC8vIHdlIGRvIHRoaXMgYmVmb3JlIGVhY2ggbW9kaWZpZXIgdG8gbWFrZSBzdXJlIHRoZSBwcmV2aW91cyBvbmUgZG9lc24ndFxuICAgICAgLy8gbWVzcyB3aXRoIHRoZXNlIHZhbHVlc1xuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG4gICAgICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucmVmZXJlbmNlKTtcblxuICAgICAgZGF0YSA9IGZuKGRhdGEsIG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIsIGNvbXB1dGluZyB0aGUgbmV3IG9mZnNldHMgYW5kIGFwcGx5aW5nXG4gKiB0aGUgbmV3IHN0eWxlLjxiciAvPlxuICogUHJlZmVyIGBzY2hlZHVsZVVwZGF0ZWAgb3ZlciBgdXBkYXRlYCBiZWNhdXNlIG9mIHBlcmZvcm1hbmNlIHJlYXNvbnMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgLy8gaWYgcG9wcGVyIGlzIGRlc3Ryb3llZCwgZG9uJ3QgcGVyZm9ybSBhbnkgZnVydGhlciB1cGRhdGVcbiAgaWYgKHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZGF0YSA9IHtcbiAgICBpbnN0YW5jZTogdGhpcyxcbiAgICBzdHlsZXM6IHt9LFxuICAgIGFycm93U3R5bGVzOiB7fSxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICBmbGlwcGVkOiBmYWxzZSxcbiAgICBvZmZzZXRzOiB7fVxuICB9O1xuXG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyh0aGlzLnN0YXRlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgZGF0YS5wbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudCh0aGlzLm9wdGlvbnMucGxhY2VtZW50LCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIC8vIHN0b3JlIHRoZSBjb21wdXRlZCBwbGFjZW1lbnQgaW5zaWRlIGBvcmlnaW5hbFBsYWNlbWVudGBcbiAgZGF0YS5vcmlnaW5hbFBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuXG4gIGRhdGEucG9zaXRpb25GaXhlZCA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkO1xuXG4gIC8vIGNvbXB1dGUgdGhlIHBvcHBlciBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRQb3BwZXJPZmZzZXRzKHRoaXMucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvbiA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZSc7XG5cbiAgLy8gcnVuIHRoZSBtb2RpZmllcnNcbiAgZGF0YSA9IHJ1bk1vZGlmaWVycyh0aGlzLm1vZGlmaWVycywgZGF0YSk7XG5cbiAgLy8gdGhlIGZpcnN0IGB1cGRhdGVgIHdpbGwgY2FsbCBgb25DcmVhdGVgIGNhbGxiYWNrXG4gIC8vIHRoZSBvdGhlciBvbmVzIHdpbGwgY2FsbCBgb25VcGRhdGVgIGNhbGxiYWNrXG4gIGlmICghdGhpcy5zdGF0ZS5pc0NyZWF0ZWQpIHtcbiAgICB0aGlzLnN0YXRlLmlzQ3JlYXRlZCA9IHRydWU7XG4gICAgdGhpcy5vcHRpb25zLm9uQ3JlYXRlKGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3B0aW9ucy5vblVwZGF0ZShkYXRhKTtcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGlzIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllckVuYWJsZWQobW9kaWZpZXJzLCBtb2RpZmllck5hbWUpIHtcbiAgcmV0dXJuIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICAgIGVuYWJsZWQgPSBfcmVmLmVuYWJsZWQ7XG4gICAgcmV0dXJuIGVuYWJsZWQgJiYgbmFtZSA9PT0gbW9kaWZpZXJOYW1lO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHByZWZpeGVkIHN1cHBvcnRlZCBwcm9wZXJ0eSBuYW1lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHkgKGNhbWVsQ2FzZSlcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHByZWZpeGVkIHByb3BlcnR5IChjYW1lbENhc2Ugb3IgUGFzY2FsQ2FzZSwgZGVwZW5kaW5nIG9uIHRoZSB2ZW5kb3IgcHJlZml4KVxuICovXG5mdW5jdGlvbiBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUocHJvcGVydHkpIHtcbiAgdmFyIHByZWZpeGVzID0gW2ZhbHNlLCAnbXMnLCAnV2Via2l0JywgJ01veicsICdPJ107XG4gIHZhciB1cHBlclByb3AgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV07XG4gICAgdmFyIHRvQ2hlY2sgPSBwcmVmaXggPyAnJyArIHByZWZpeCArIHVwcGVyUHJvcCA6IHByb3BlcnR5O1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuYm9keS5zdHlsZVt0b0NoZWNrXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0b0NoZWNrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBEZXN0cm95cyB0aGUgcG9wcGVyLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkZXN0cm95KCkge1xuICB0aGlzLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTtcblxuICAvLyB0b3VjaCBET00gb25seSBpZiBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgaXMgZW5hYmxlZFxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQodGhpcy5tb2RpZmllcnMsICdhcHBseVN0eWxlJykpIHtcbiAgICB0aGlzLnBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50Jyk7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucG9zaXRpb24gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS50b3AgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucmlnaHQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5ib3R0b20gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS53aWxsQ2hhbmdlID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGVbZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKV0gPSAnJztcbiAgfVxuXG4gIHRoaXMuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgLy8gcmVtb3ZlIHRoZSBwb3BwZXIgaWYgdXNlciBleHBsaWNpdGx5IGFza2VkIGZvciB0aGUgZGVsZXRpb24gb24gZGVzdHJveVxuICAvLyBkbyBub3QgdXNlIGByZW1vdmVgIGJlY2F1c2UgSUUxMSBkb2Vzbid0IHN1cHBvcnQgaXRcbiAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdmVPbkRlc3Ryb3kpIHtcbiAgICB0aGlzLnBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucG9wcGVyKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHdpbmRvdyBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge1dpbmRvd31cbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KGVsZW1lbnQpIHtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHdpbmRvdztcbn1cblxuZnVuY3Rpb24gYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbFBhcmVudCwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKSB7XG4gIHZhciBpc0JvZHkgPSBzY3JvbGxQYXJlbnQubm9kZU5hbWUgPT09ICdCT0RZJztcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IHNjcm9sbFBhcmVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogc2Nyb2xsUGFyZW50O1xuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICBpZiAoIWlzQm9keSkge1xuICAgIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhnZXRTY3JvbGxQYXJlbnQodGFyZ2V0LnBhcmVudE5vZGUpLCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpO1xuICB9XG4gIHNjcm9sbFBhcmVudHMucHVzaCh0YXJnZXQpO1xufVxuXG4vKipcbiAqIFNldHVwIG5lZWRlZCBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2V0dXBFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIG9wdGlvbnMsIHN0YXRlLCB1cGRhdGVCb3VuZCkge1xuICAvLyBSZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gdXBkYXRlQm91bmQ7XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgLy8gU2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHZhciBzY3JvbGxFbGVtZW50ID0gZ2V0U2Nyb2xsUGFyZW50KHJlZmVyZW5jZSk7XG4gIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxFbGVtZW50LCAnc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQsIHN0YXRlLnNjcm9sbFBhcmVudHMpO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gc2Nyb2xsRWxlbWVudDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IHRydWU7XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgYWRkIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCBzdGFydCByZWNhbGN1bGF0aW5nXG4gKiBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAoIXRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIHRoaXMuc3RhdGUgPSBzZXR1cEV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMsIHRoaXMuc3RhdGUsIHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIHN0YXRlKSB7XG4gIC8vIFJlbW92ZSByZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcblxuICAvLyBSZW1vdmUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHN0YXRlLnNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcbiAgfSk7XG5cbiAgLy8gUmVzZXQgc3RhdGVcbiAgc3RhdGUudXBkYXRlQm91bmQgPSBudWxsO1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0gW107XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBudWxsO1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gZmFsc2U7XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIHJlbW92ZSByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgd29uJ3QgcmVjYWxjdWxhdGUgcG9wcGVyIHBvc2l0aW9uXG4gKiB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC4gSXQgYWxzbyB3b24ndCB0cmlnZ2VyIGBvblVwZGF0ZWAgY2FsbGJhY2sgYW55bW9yZSxcbiAqIHVubGVzcyB5b3UgY2FsbCBgdXBkYXRlYCBtZXRob2QgbWFudWFsbHkuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICAgIHRoaXMuc3RhdGUgPSByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUZWxscyBpZiBhIGdpdmVuIGlucHV0IGlzIGEgbnVtYmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0geyp9IGlucHV0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc051bWVyaWMobikge1xuICByZXR1cm4gbiAhPT0gJycgJiYgIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgc3R5bGUgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgc3R5bGUgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHVuaXQgPSAnJztcbiAgICAvLyBhZGQgdW5pdCBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpYyBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICBpZiAoWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uaW5kZXhPZihwcm9wKSAhPT0gLTEgJiYgaXNOdW1lcmljKHN0eWxlc1twcm9wXSkpIHtcbiAgICAgIHVuaXQgPSAncHgnO1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdICsgdW5pdDtcbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBhdHRyaWJ1dGVzIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIGF0dHJpYnV0ZXMgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1twcm9wXTtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShwcm9wLCBhdHRyaWJ1dGVzW3Byb3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLnN0eWxlcyAtIExpc3Qgb2Ygc3R5bGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuYXR0cmlidXRlcyAtIExpc3Qgb2YgYXR0cmlidXRlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzYW1lIGRhdGEgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkge1xuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5zdHlsZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyBpbiB0aGlzIHdheSB3ZSBjYW4gbWFrZSB0aGUgM3JkIHBhcnR5IG1vZGlmaWVycyBhZGQgY3VzdG9tIHN0eWxlcyB0byBpdFxuICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzXG4gIC8vIGxpbmVzIG9mIHRoaXMgbW9kaWZpZXIhXG4gIHNldFN0eWxlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5zdHlsZXMpO1xuXG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLmF0dHJpYnV0ZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyB0aGV5IHdpbGwgYmUgc2V0IGFzIEhUTUwgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudFxuICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpO1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBkZWZpbmVkIGFuZCBhcnJvd1N0eWxlcyBoYXMgc29tZSBwcm9wZXJ0aWVzXG4gIGlmIChkYXRhLmFycm93RWxlbWVudCAmJiBPYmplY3Qua2V5cyhkYXRhLmFycm93U3R5bGVzKS5sZW5ndGgpIHtcbiAgICBzZXRTdHlsZXMoZGF0YS5hcnJvd0VsZW1lbnQsIGRhdGEuYXJyb3dTdHlsZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogU2V0IHRoZSB4LXBsYWNlbWVudCBhdHRyaWJ1dGUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSBiZWNhdXNlIGl0IGNvdWxkIGJlIHVzZWRcbiAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGVcbiAqIGNvcnJlY3QgcG9wcGVyIG9mZnNldHMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlT25Mb2FkKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIHN0YXRlKSB7XG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICB2YXIgcmVmZXJlbmNlT2Zmc2V0cyA9IGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICB2YXIgcGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQob3B0aW9ucy5wbGFjZW1lbnQsIHJlZmVyZW5jZU9mZnNldHMsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JywgcGxhY2VtZW50KTtcblxuICAvLyBBcHBseSBgcG9zaXRpb25gIHRvIHBvcHBlciBiZWZvcmUgYW55dGhpbmcgZWxzZSBiZWNhdXNlXG4gIC8vIHdpdGhvdXQgdGhlIHBvc2l0aW9uIGFwcGxpZWQgd2UgY2FuJ3QgZ3VhcmFudGVlIGNvcnJlY3QgY29tcHV0YXRpb25zXG4gIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246IG9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnIH0pO1xuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtCb29sZWFufSBzaG91bGRSb3VuZCAtIElmIHRoZSBvZmZzZXRzIHNob3VsZCBiZSByb3VuZGVkIGF0IGFsbFxuICogQHJldHVybnMge09iamVjdH0gVGhlIHBvcHBlcidzIHBvc2l0aW9uIG9mZnNldHMgcm91bmRlZFxuICpcbiAqIFRoZSB0YWxlIG9mIHBpeGVsLXBlcmZlY3QgcG9zaXRpb25pbmcuIEl0J3Mgc3RpbGwgbm90IDEwMCUgcGVyZmVjdCwgYnV0IGFzXG4gKiBnb29kIGFzIGl0IGNhbiBiZSB3aXRoaW4gcmVhc29uLlxuICogRGlzY3Vzc2lvbiBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9wdWxsLzcxNVxuICpcbiAqIExvdyBEUEkgc2NyZWVucyBjYXVzZSBhIHBvcHBlciB0byBiZSBibHVycnkgaWYgbm90IHVzaW5nIGZ1bGwgcGl4ZWxzIChTYWZhcmlcbiAqIGFzIHdlbGwgb24gSGlnaCBEUEkgc2NyZWVucykuXG4gKlxuICogRmlyZWZveCBwcmVmZXJzIG5vIHJvdW5kaW5nIGZvciBwb3NpdGlvbmluZyBhbmQgZG9lcyBub3QgaGF2ZSBibHVycmluZXNzIG9uXG4gKiBoaWdoIERQSSBzY3JlZW5zLlxuICpcbiAqIE9ubHkgaG9yaXpvbnRhbCBwbGFjZW1lbnQgYW5kIGxlZnQvcmlnaHQgdmFsdWVzIG5lZWQgdG8gYmUgY29uc2lkZXJlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgc2hvdWxkUm91bmQpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kLFxuICAgICAgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4gIHZhciBub1JvdW5kID0gZnVuY3Rpb24gbm9Sb3VuZCh2KSB7XG4gICAgcmV0dXJuIHY7XG4gIH07XG5cbiAgdmFyIHJlZmVyZW5jZVdpZHRoID0gcm91bmQocmVmZXJlbmNlLndpZHRoKTtcbiAgdmFyIHBvcHBlcldpZHRoID0gcm91bmQocG9wcGVyLndpZHRoKTtcblxuICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoZGF0YS5wbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIGlzVmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuaW5kZXhPZignLScpICE9PSAtMTtcbiAgdmFyIHNhbWVXaWR0aFBhcml0eSA9IHJlZmVyZW5jZVdpZHRoICUgMiA9PT0gcG9wcGVyV2lkdGggJSAyO1xuICB2YXIgYm90aE9kZFdpZHRoID0gcmVmZXJlbmNlV2lkdGggJSAyID09PSAxICYmIHBvcHBlcldpZHRoICUgMiA9PT0gMTtcblxuICB2YXIgaG9yaXpvbnRhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiBpc1ZlcnRpY2FsIHx8IGlzVmFyaWF0aW9uIHx8IHNhbWVXaWR0aFBhcml0eSA/IHJvdW5kIDogZmxvb3I7XG4gIHZhciB2ZXJ0aWNhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiByb3VuZDtcblxuICByZXR1cm4ge1xuICAgIGxlZnQ6IGhvcml6b250YWxUb0ludGVnZXIoYm90aE9kZFdpZHRoICYmICFpc1ZhcmlhdGlvbiAmJiBzaG91bGRSb3VuZCA/IHBvcHBlci5sZWZ0IC0gMSA6IHBvcHBlci5sZWZ0KSxcbiAgICB0b3A6IHZlcnRpY2FsVG9JbnRlZ2VyKHBvcHBlci50b3ApLFxuICAgIGJvdHRvbTogdmVydGljYWxUb0ludGVnZXIocG9wcGVyLmJvdHRvbSksXG4gICAgcmlnaHQ6IGhvcml6b250YWxUb0ludGVnZXIocG9wcGVyLnJpZ2h0KVxuICB9O1xufVxuXG52YXIgaXNGaXJlZm94ID0gaXNCcm93c2VyICYmIC9GaXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZVN0eWxlKGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIHggPSBvcHRpb25zLngsXG4gICAgICB5ID0gb3B0aW9ucy55O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICAvLyBSZW1vdmUgdGhpcyBsZWdhY3kgc3VwcG9ydCBpbiBQb3BwZXIuanMgdjJcblxuICB2YXIgbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdhcHBseVN0eWxlJztcbiAgfSkuZ3B1QWNjZWxlcmF0aW9uO1xuICBpZiAobGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBncHVBY2NlbGVyYXRpb25gIG9wdGlvbiBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllciBhbmQgd2lsbCBub3QgYmUgc3VwcG9ydGVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBQb3BwZXIuanMhJyk7XG4gIH1cbiAgdmFyIGdwdUFjY2VsZXJhdGlvbiA9IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkID8gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIDogb3B0aW9ucy5ncHVBY2NlbGVyYXRpb247XG5cbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBvZmZzZXRQYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG5cbiAgLy8gU3R5bGVzXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcG9zaXRpb246IHBvcHBlci5wb3NpdGlvblxuICB9O1xuXG4gIHZhciBvZmZzZXRzID0gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgd2luZG93LmRldmljZVBpeGVsUmF0aW8gPCAyIHx8ICFpc0ZpcmVmb3gpO1xuXG4gIHZhciBzaWRlQSA9IHggPT09ICdib3R0b20nID8gJ3RvcCcgOiAnYm90dG9tJztcbiAgdmFyIHNpZGVCID0geSA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cbiAgLy8gaWYgZ3B1QWNjZWxlcmF0aW9uIGlzIHNldCB0byBgdHJ1ZWAgYW5kIHRyYW5zZm9ybSBpcyBzdXBwb3J0ZWQsXG4gIC8vICB3ZSB1c2UgYHRyYW5zbGF0ZTNkYCB0byBhcHBseSB0aGUgcG9zaXRpb24gdG8gdGhlIHBvcHBlciB3ZVxuICAvLyBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgc3VwcG9ydGVkIHByZWZpeGVkIHZlcnNpb24gaWYgbmVlZGVkXG4gIHZhciBwcmVmaXhlZFByb3BlcnR5ID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcblxuICAvLyBub3csIGxldCdzIG1ha2UgYSBzdGVwIGJhY2sgYW5kIGxvb2sgYXQgdGhpcyBjb2RlIGNsb3NlbHkgKHd0Zj8pXG4gIC8vIElmIHRoZSBjb250ZW50IG9mIHRoZSBwb3BwZXIgZ3Jvd3Mgb25jZSBpdCdzIGJlZW4gcG9zaXRpb25lZCwgaXRcbiAgLy8gbWF5IGhhcHBlbiB0aGF0IHRoZSBwb3BwZXIgZ2V0cyBtaXNwbGFjZWQgYmVjYXVzZSBvZiB0aGUgbmV3IGNvbnRlbnRcbiAgLy8gb3ZlcmZsb3dpbmcgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRvIGF2b2lkIHRoaXMgcHJvYmxlbSwgd2UgcHJvdmlkZSB0d28gb3B0aW9ucyAoeCBhbmQgeSksIHdoaWNoIGFsbG93XG4gIC8vIHRoZSBjb25zdW1lciB0byBkZWZpbmUgdGhlIG9mZnNldCBvcmlnaW4uXG4gIC8vIElmIHdlIHBvc2l0aW9uIGEgcG9wcGVyIG9uIHRvcCBvZiBhIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSBjYW4gc2V0XG4gIC8vIGB4YCB0byBgdG9wYCB0byBtYWtlIHRoZSBwb3BwZXIgZ3JvdyB0b3dhcmRzIGl0cyB0b3AgaW5zdGVhZCBvZlxuICAvLyBpdHMgYm90dG9tLlxuICB2YXIgbGVmdCA9IHZvaWQgMCxcbiAgICAgIHRvcCA9IHZvaWQgMDtcbiAgaWYgKHNpZGVBID09PSAnYm90dG9tJykge1xuICAgIC8vIHdoZW4gb2Zmc2V0UGFyZW50IGlzIDxodG1sPiB0aGUgcG9zaXRpb25pbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuIChleGNsdWRpbmcgdGhlIHNjcm9sbGJhcilcbiAgICAvLyBhbmQgbm90IHRoZSBib3R0b20gb2YgdGhlIGh0bWwgZWxlbWVudFxuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudFJlY3QuaGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRvcCA9IG9mZnNldHMudG9wO1xuICB9XG4gIGlmIChzaWRlQiA9PT0gJ3JpZ2h0Jykge1xuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudFJlY3Qud2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZWZ0ID0gb2Zmc2V0cy5sZWZ0O1xuICB9XG4gIGlmIChncHVBY2NlbGVyYXRpb24gJiYgcHJlZml4ZWRQcm9wZXJ0eSkge1xuICAgIHN0eWxlc1twcmVmaXhlZFByb3BlcnR5XSA9ICd0cmFuc2xhdGUzZCgnICsgbGVmdCArICdweCwgJyArIHRvcCArICdweCwgMCknO1xuICAgIHN0eWxlc1tzaWRlQV0gPSAwO1xuICAgIHN0eWxlc1tzaWRlQl0gPSAwO1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gJ3RyYW5zZm9ybSc7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3Rod2VyaXNlLCB3ZSB1c2UgdGhlIHN0YW5kYXJkIGB0b3BgLCBgbGVmdGAsIGBib3R0b21gIGFuZCBgcmlnaHRgIHByb3BlcnRpZXNcbiAgICB2YXIgaW52ZXJ0VG9wID0gc2lkZUEgPT09ICdib3R0b20nID8gLTEgOiAxO1xuICAgIHZhciBpbnZlcnRMZWZ0ID0gc2lkZUIgPT09ICdyaWdodCcgPyAtMSA6IDE7XG4gICAgc3R5bGVzW3NpZGVBXSA9IHRvcCAqIGludmVydFRvcDtcbiAgICBzdHlsZXNbc2lkZUJdID0gbGVmdCAqIGludmVydExlZnQ7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSBzaWRlQSArICcsICcgKyBzaWRlQjtcbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZXNcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7XG4gICAgJ3gtcGxhY2VtZW50JzogZGF0YS5wbGFjZW1lbnRcbiAgfTtcblxuICAvLyBVcGRhdGUgYGRhdGFgIGF0dHJpYnV0ZXMsIHN0eWxlcyBhbmQgYXJyb3dTdHlsZXNcbiAgZGF0YS5hdHRyaWJ1dGVzID0gX2V4dGVuZHMoe30sIGF0dHJpYnV0ZXMsIGRhdGEuYXR0cmlidXRlcyk7XG4gIGRhdGEuc3R5bGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcywgZGF0YS5zdHlsZXMpO1xuICBkYXRhLmFycm93U3R5bGVzID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5hcnJvdywgZGF0YS5hcnJvd1N0eWxlcyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgZGVwZW5kcyBmcm9tIGFub3RoZXIgb25lLjxiciAvPlxuICogSXQgY2hlY2tzIGlmIHRoZSBuZWVkZWQgbW9kaWZpZXIgaXMgbGlzdGVkIGFuZCBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzIC0gbGlzdCBvZiBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0aW5nTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGluZyBtb2RpZmllclxuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RlZE5hbWUgLSBuYW1lIG9mIHJlcXVlc3RlZCBtb2RpZmllclxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJSZXF1aXJlZChtb2RpZmllcnMsIHJlcXVlc3RpbmdOYW1lLCByZXF1ZXN0ZWROYW1lKSB7XG4gIHZhciByZXF1ZXN0aW5nID0gZmluZChtb2RpZmllcnMsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgcmV0dXJuIG5hbWUgPT09IHJlcXVlc3RpbmdOYW1lO1xuICB9KTtcblxuICB2YXIgaXNSZXF1aXJlZCA9ICEhcmVxdWVzdGluZyAmJiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gcmVxdWVzdGVkTmFtZSAmJiBtb2RpZmllci5lbmFibGVkICYmIG1vZGlmaWVyLm9yZGVyIDwgcmVxdWVzdGluZy5vcmRlcjtcbiAgfSk7XG5cbiAgaWYgKCFpc1JlcXVpcmVkKSB7XG4gICAgdmFyIF9yZXF1ZXN0aW5nID0gJ2AnICsgcmVxdWVzdGluZ05hbWUgKyAnYCc7XG4gICAgdmFyIHJlcXVlc3RlZCA9ICdgJyArIHJlcXVlc3RlZE5hbWUgKyAnYCc7XG4gICAgY29uc29sZS53YXJuKHJlcXVlc3RlZCArICcgbW9kaWZpZXIgaXMgcmVxdWlyZWQgYnkgJyArIF9yZXF1ZXN0aW5nICsgJyBtb2RpZmllciBpbiBvcmRlciB0byB3b3JrLCBiZSBzdXJlIHRvIGluY2x1ZGUgaXQgYmVmb3JlICcgKyBfcmVxdWVzdGluZyArICchJyk7XG4gIH1cbiAgcmV0dXJuIGlzUmVxdWlyZWQ7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBhcnJvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzJGFycm93O1xuXG4gIC8vIGFycm93IGRlcGVuZHMgb24ga2VlcFRvZ2V0aGVyIGluIG9yZGVyIHRvIHdvcmtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdhcnJvdycsICdrZWVwVG9nZXRoZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGFycm93RWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudDtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgYSBzdHJpbmcsIHN1cHBvc2UgaXQncyBhIENTUyBzZWxlY3RvclxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgbm90IGZvdW5kLCBkb24ndCBydW4gdGhlIG1vZGlmaWVyXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpZiB0aGUgYXJyb3dFbGVtZW50IGlzbid0IGEgcXVlcnkgc2VsZWN0b3Igd2UgbXVzdCBjaGVjayB0aGF0IHRoZVxuICAgIC8vIHByb3ZpZGVkIERPTSBub2RlIGlzIGNoaWxkIG9mIGl0cyBwb3BwZXIgbm9kZVxuICAgIGlmICghZGF0YS5pbnN0YW5jZS5wb3BwZXIuY29udGFpbnMoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgYXJyb3cuZWxlbWVudGAgbXVzdCBiZSBjaGlsZCBvZiBpdHMgcG9wcGVyIGVsZW1lbnQhJyk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNpZGVDYXBpdGFsaXplZCA9IGlzVmVydGljYWwgPyAnVG9wJyA6ICdMZWZ0JztcbiAgdmFyIHNpZGUgPSBzaWRlQ2FwaXRhbGl6ZWQudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGFsdFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2JvdHRvbScgOiAncmlnaHQnO1xuICB2YXIgYXJyb3dFbGVtZW50U2l6ZSA9IGdldE91dGVyU2l6ZXMoYXJyb3dFbGVtZW50KVtsZW5dO1xuXG4gIC8vXG4gIC8vIGV4dGVuZHMga2VlcFRvZ2V0aGVyIGJlaGF2aW9yIG1ha2luZyBzdXJlIHRoZSBwb3BwZXIgYW5kIGl0c1xuICAvLyByZWZlcmVuY2UgaGF2ZSBlbm91Z2ggcGl4ZWxzIGluIGNvbmp1bmN0aW9uXG4gIC8vXG5cbiAgLy8gdG9wL2xlZnQgc2lkZVxuICBpZiAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplIDwgcG9wcGVyW3NpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtPSBwb3BwZXJbc2lkZV0gLSAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplKTtcbiAgfVxuICAvLyBib3R0b20vcmlnaHQgc2lkZVxuICBpZiAocmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSA+IHBvcHBlcltvcFNpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSArPSByZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplIC0gcG9wcGVyW29wU2lkZV07XG4gIH1cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG5cbiAgLy8gY29tcHV0ZSBjZW50ZXIgb2YgdGhlIHBvcHBlclxuICB2YXIgY2VudGVyID0gcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW2xlbl0gLyAyIC0gYXJyb3dFbGVtZW50U2l6ZSAvIDI7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgc2lkZVZhbHVlIHVzaW5nIHRoZSB1cGRhdGVkIHBvcHBlciBvZmZzZXRzXG4gIC8vIHRha2UgcG9wcGVyIG1hcmdpbiBpbiBhY2NvdW50IGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSB0aGlzIGluZm8gYXZhaWxhYmxlXG4gIHZhciBjc3MgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgcG9wcGVyTWFyZ2luU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydtYXJnaW4nICsgc2lkZUNhcGl0YWxpemVkXSwgMTApO1xuICB2YXIgcG9wcGVyQm9yZGVyU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydib3JkZXInICsgc2lkZUNhcGl0YWxpemVkICsgJ1dpZHRoJ10sIDEwKTtcbiAgdmFyIHNpZGVWYWx1ZSA9IGNlbnRlciAtIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLSBwb3BwZXJNYXJnaW5TaWRlIC0gcG9wcGVyQm9yZGVyU2lkZTtcblxuICAvLyBwcmV2ZW50IGFycm93RWxlbWVudCBmcm9tIGJlaW5nIHBsYWNlZCBub3QgY29udGlndW91c2x5IHRvIGl0cyBwb3BwZXJcbiAgc2lkZVZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4ocG9wcGVyW2xlbl0gLSBhcnJvd0VsZW1lbnRTaXplLCBzaWRlVmFsdWUpLCAwKTtcblxuICBkYXRhLmFycm93RWxlbWVudCA9IGFycm93RWxlbWVudDtcbiAgZGF0YS5vZmZzZXRzLmFycm93ID0gKF9kYXRhJG9mZnNldHMkYXJyb3cgPSB7fSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgc2lkZSwgTWF0aC5yb3VuZChzaWRlVmFsdWUpKSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgYWx0U2lkZSwgJycpLCBfZGF0YSRvZmZzZXRzJGFycm93KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCB2YXJpYXRpb24gb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCB2YXJpYXRpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50IHZhcmlhdGlvblxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pIHtcbiAgaWYgKHZhcmlhdGlvbiA9PT0gJ2VuZCcpIHtcbiAgICByZXR1cm4gJ3N0YXJ0JztcbiAgfSBlbHNlIGlmICh2YXJpYXRpb24gPT09ICdzdGFydCcpIHtcbiAgICByZXR1cm4gJ2VuZCc7XG4gIH1cbiAgcmV0dXJuIHZhcmlhdGlvbjtcbn1cblxuLyoqXG4gKiBMaXN0IG9mIGFjY2VwdGVkIHBsYWNlbWVudHMgdG8gdXNlIGFzIHZhbHVlcyBvZiB0aGUgYHBsYWNlbWVudGAgb3B0aW9uLjxiciAvPlxuICogVmFsaWQgcGxhY2VtZW50cyBhcmU6XG4gKiAtIGBhdXRvYFxuICogLSBgdG9wYFxuICogLSBgcmlnaHRgXG4gKiAtIGBib3R0b21gXG4gKiAtIGBsZWZ0YFxuICpcbiAqIEVhY2ggcGxhY2VtZW50IGNhbiBoYXZlIGEgdmFyaWF0aW9uIGZyb20gdGhpcyBsaXN0OlxuICogLSBgLXN0YXJ0YFxuICogLSBgLWVuZGBcbiAqXG4gKiBWYXJpYXRpb25zIGFyZSBpbnRlcnByZXRlZCBlYXNpbHkgaWYgeW91IHRoaW5rIG9mIHRoZW0gYXMgdGhlIGxlZnQgdG8gcmlnaHRcbiAqIHdyaXR0ZW4gbGFuZ3VhZ2VzLiBIb3Jpem9udGFsbHkgKGB0b3BgIGFuZCBgYm90dG9tYCksIGBzdGFydGAgaXMgbGVmdCBhbmQgYGVuZGBcbiAqIGlzIHJpZ2h0LjxiciAvPlxuICogVmVydGljYWxseSAoYGxlZnRgIGFuZCBgcmlnaHRgKSwgYHN0YXJ0YCBpcyB0b3AgYW5kIGBlbmRgIGlzIGJvdHRvbS5cbiAqXG4gKiBTb21lIHZhbGlkIGV4YW1wbGVzIGFyZTpcbiAqIC0gYHRvcC1lbmRgIChvbiB0b3Agb2YgcmVmZXJlbmNlLCByaWdodCBhbGlnbmVkKVxuICogLSBgcmlnaHQtc3RhcnRgIChvbiByaWdodCBvZiByZWZlcmVuY2UsIHRvcCBhbGlnbmVkKVxuICogLSBgYm90dG9tYCAob24gYm90dG9tLCBjZW50ZXJlZClcbiAqIC0gYGF1dG8tZW5kYCAob24gdGhlIHNpZGUgd2l0aCBtb3JlIHNwYWNlIGF2YWlsYWJsZSwgYWxpZ25tZW50IGRlcGVuZHMgYnkgcGxhY2VtZW50KVxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBlbnVtIHtTdHJpbmd9XG4gKiBAcmVhZG9ubHlcbiAqIEBtZXRob2QgcGxhY2VtZW50c1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgcGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddO1xuXG4vLyBHZXQgcmlkIG9mIGBhdXRvYCBgYXV0by1zdGFydGAgYW5kIGBhdXRvLWVuZGBcbnZhciB2YWxpZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLnNsaWNlKDMpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGluaXRpYWwgcGxhY2VtZW50LCByZXR1cm5zIGFsbCB0aGUgc3Vic2VxdWVudCBwbGFjZW1lbnRzXG4gKiBjbG9ja3dpc2UgKG9yIGNvdW50ZXItY2xvY2t3aXNlKS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucylcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gY291bnRlciAtIFNldCB0byB0cnVlIHRvIHdhbGsgdGhlIHBsYWNlbWVudHMgY291bnRlcmNsb2Nrd2lzZVxuICogQHJldHVybnMge0FycmF5fSBwbGFjZW1lbnRzIGluY2x1ZGluZyB0aGVpciB2YXJpYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNsb2Nrd2lzZShwbGFjZW1lbnQpIHtcbiAgdmFyIGNvdW50ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBpbmRleCA9IHZhbGlkUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCk7XG4gIHZhciBhcnIgPSB2YWxpZFBsYWNlbWVudHMuc2xpY2UoaW5kZXggKyAxKS5jb25jYXQodmFsaWRQbGFjZW1lbnRzLnNsaWNlKDAsIGluZGV4KSk7XG4gIHJldHVybiBjb3VudGVyID8gYXJyLnJldmVyc2UoKSA6IGFycjtcbn1cblxudmFyIEJFSEFWSU9SUyA9IHtcbiAgRkxJUDogJ2ZsaXAnLFxuICBDTE9DS1dJU0U6ICdjbG9ja3dpc2UnLFxuICBDT1VOVEVSQ0xPQ0tXSVNFOiAnY291bnRlcmNsb2Nrd2lzZSdcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBmbGlwKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7XG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMV0gfHwgJyc7XG5cbiAgdmFyIGZsaXBPcmRlciA9IFtdO1xuXG4gIHN3aXRjaCAob3B0aW9ucy5iZWhhdmlvcikge1xuICAgIGNhc2UgQkVIQVZJT1JTLkZMSVA6XG4gICAgICBmbGlwT3JkZXIgPSBbcGxhY2VtZW50LCBwbGFjZW1lbnRPcHBvc2l0ZV07XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNPVU5URVJDTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50LCB0cnVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmbGlwT3JkZXIgPSBvcHRpb25zLmJlaGF2aW9yO1xuICB9XG5cbiAgZmxpcE9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7XG4gICAgaWYgKHBsYWNlbWVudCAhPT0gc3RlcCB8fCBmbGlwT3JkZXIubGVuZ3RoID09PSBpbmRleCArIDEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gICAgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIHBvcHBlck9mZnNldHMgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuICAgIHZhciByZWZPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcblxuICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZVxuICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgdmFyIG92ZXJsYXBzUmVmID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpO1xuICAgIHZhciBvdmVyZmxvd3NSaWdodCA9IGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IoYm91bmRhcmllcy5yaWdodCk7XG4gICAgdmFyIG92ZXJmbG93c1RvcCA9IGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKGJvdW5kYXJpZXMudG9wKTtcbiAgICB2YXIgb3ZlcmZsb3dzQm90dG9tID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0JvdW5kYXJpZXMgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIG92ZXJmbG93c1RvcCB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIG92ZXJmbG93c0JvdHRvbTtcblxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxuICAgIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICAgIC8vIGZsaXBzIHZhcmlhdGlvbiBpZiByZWZlcmVuY2UgZWxlbWVudCBvdmVyZmxvd3MgYm91bmRhcmllc1xuICAgIHZhciBmbGlwcGVkVmFyaWF0aW9uQnlSZWYgPSAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnMgJiYgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0xlZnQgfHwgaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1JpZ2h0IHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NUb3AgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NCb3R0b20pO1xuXG4gICAgLy8gZmxpcHMgdmFyaWF0aW9uIGlmIHBvcHBlciBjb250ZW50IG92ZXJmbG93cyBib3VuZGFyaWVzXG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb25CeUNvbnRlbnQgPSAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnNCeUNvbnRlbnQgJiYgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1JpZ2h0IHx8IGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NMZWZ0IHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NCb3R0b20gfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NUb3ApO1xuXG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb24gPSBmbGlwcGVkVmFyaWF0aW9uQnlSZWYgfHwgZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudDtcblxuICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzIHx8IGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgIC8vIHRoaXMgYm9vbGVhbiB0byBkZXRlY3QgYW55IGZsaXAgbG9vcFxuICAgICAgZGF0YS5mbGlwcGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gZmxpcE9yZGVyW2luZGV4ICsgMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAgIHZhcmlhdGlvbiA9IGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGRhdGEucGxhY2VtZW50ID0gcGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcblxuICAgICAgLy8gdGhpcyBvYmplY3QgY29udGFpbnMgYHBvc2l0aW9uYCwgd2Ugd2FudCB0byBwcmVzZXJ2ZSBpdCBhbG9uZyB3aXRoXG4gICAgICAvLyBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0eSB3ZSBtYXkgYWRkIGluIHRoZSBmdXR1cmVcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLnBvcHBlciwgZ2V0UG9wcGVyT2Zmc2V0cyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpKTtcblxuICAgICAgZGF0YSA9IHJ1bk1vZGlmaWVycyhkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZGF0YSwgJ2ZsaXAnKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGtlZXBUb2dldGhlcihkYXRhKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAncmlnaHQnIDogJ2JvdHRvbSc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgaWYgKHBvcHBlcltzaWRlXSA8IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSAtIHBvcHBlclttZWFzdXJlbWVudF07XG4gIH1cbiAgaWYgKHBvcHBlcltvcFNpZGVdID4gZmxvb3IocmVmZXJlbmNlW3NpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtzaWRlXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBjb250YWluaW5nIHZhbHVlICsgdW5pdCBpbnRvIGEgcHggdmFsdWUgbnVtYmVyXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gc3RyIC0gVmFsdWUgKyB1bml0IHN0cmluZ1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IG1lYXN1cmVtZW50IC0gYGhlaWdodGAgb3IgYHdpZHRoYFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAcmV0dXJucyB7TnVtYmVyfFN0cmluZ31cbiAqIFZhbHVlIGluIHBpeGVscywgb3Igb3JpZ2luYWwgc3RyaW5nIGlmIG5vIHZhbHVlcyB3ZXJlIGV4dHJhY3RlZFxuICovXG5mdW5jdGlvbiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpIHtcbiAgLy8gc2VwYXJhdGUgdmFsdWUgZnJvbSB1bml0XG4gIHZhciBzcGxpdCA9IHN0ci5tYXRjaCgvKCg/OlxcLXxcXCspP1xcZCpcXC4/XFxkKikoLiopLyk7XG4gIHZhciB2YWx1ZSA9ICtzcGxpdFsxXTtcbiAgdmFyIHVuaXQgPSBzcGxpdFsyXTtcblxuICAvLyBJZiBpdCdzIG5vdCBhIG51bWJlciBpdCdzIGFuIG9wZXJhdG9yLCBJIGd1ZXNzXG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgaWYgKHVuaXQuaW5kZXhPZignJScpID09PSAwKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB2b2lkIDA7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICBjYXNlICclcCc6XG4gICAgICAgIGVsZW1lbnQgPSBwb3BwZXJPZmZzZXRzO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyUnOlxuICAgICAgY2FzZSAnJXInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZWxlbWVudCA9IHJlZmVyZW5jZU9mZnNldHM7XG4gICAgfVxuXG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0KGVsZW1lbnQpO1xuICAgIHJldHVybiByZWN0W21lYXN1cmVtZW50XSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2UgaWYgKHVuaXQgPT09ICd2aCcgfHwgdW5pdCA9PT0gJ3Z3Jykge1xuICAgIC8vIGlmIGlzIGEgdmggb3IgdncsIHdlIGNhbGN1bGF0ZSB0aGUgc2l6ZSBiYXNlZCBvbiB0aGUgdmlld3BvcnRcbiAgICB2YXIgc2l6ZSA9IHZvaWQgMDtcbiAgICBpZiAodW5pdCA9PT0gJ3ZoJykge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gICAgfVxuICAgIHJldHVybiBzaXplIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgaXMgYW4gZXhwbGljaXQgcGl4ZWwgdW5pdCwgd2UgZ2V0IHJpZCBvZiB0aGUgdW5pdCBhbmQga2VlcCB0aGUgdmFsdWVcbiAgICAvLyBpZiBpcyBhbiBpbXBsaWNpdCB1bml0LCBpdCdzIHB4LCBhbmQgd2UgcmV0dXJuIGp1c3QgdGhlIHZhbHVlXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbi8qKlxuICogUGFyc2UgYW4gYG9mZnNldGAgc3RyaW5nIHRvIGV4dHJhcG9sYXRlIGB4YCBhbmQgYHlgIG51bWVyaWMgb2Zmc2V0cy5cbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBvZmZzZXRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IGJhc2VQbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtBcnJheX0gYSB0d28gY2VsbHMgYXJyYXkgd2l0aCB4IGFuZCB5IG9mZnNldHMgaW4gbnVtYmVyc1xuICovXG5mdW5jdGlvbiBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMsIGJhc2VQbGFjZW1lbnQpIHtcbiAgdmFyIG9mZnNldHMgPSBbMCwgMF07XG5cbiAgLy8gVXNlIGhlaWdodCBpZiBwbGFjZW1lbnQgaXMgbGVmdCBvciByaWdodCBhbmQgaW5kZXggaXMgMCBvdGhlcndpc2UgdXNlIHdpZHRoXG4gIC8vIGluIHRoaXMgd2F5IHRoZSBmaXJzdCBvZmZzZXQgd2lsbCB1c2UgYW4gYXhpcyBhbmQgdGhlIHNlY29uZCBvbmVcbiAgLy8gd2lsbCB1c2UgdGhlIG90aGVyIG9uZVxuICB2YXIgdXNlSGVpZ2h0ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgLy8gU3BsaXQgdGhlIG9mZnNldCBzdHJpbmcgdG8gb2J0YWluIGEgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzXG4gIC8vIFRoZSByZWdleCBhZGRyZXNzZXMgdmFsdWVzIHdpdGggdGhlIHBsdXMgb3IgbWludXMgc2lnbiBpbiBmcm9udCAoKzEwLCAtMjAsIGV0YylcbiAgdmFyIGZyYWdtZW50cyA9IG9mZnNldC5zcGxpdCgvKFxcK3xcXC0pLykubWFwKGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcudHJpbSgpO1xuICB9KTtcblxuICAvLyBEZXRlY3QgaWYgdGhlIG9mZnNldCBzdHJpbmcgY29udGFpbnMgYSBwYWlyIG9mIHZhbHVlcyBvciBhIHNpbmdsZSBvbmVcbiAgLy8gdGhleSBjb3VsZCBiZSBzZXBhcmF0ZWQgYnkgY29tbWEgb3Igc3BhY2VcbiAgdmFyIGRpdmlkZXIgPSBmcmFnbWVudHMuaW5kZXhPZihmaW5kKGZyYWdtZW50cywgZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy5zZWFyY2goLyx8XFxzLykgIT09IC0xO1xuICB9KSk7XG5cbiAgaWYgKGZyYWdtZW50c1tkaXZpZGVyXSAmJiBmcmFnbWVudHNbZGl2aWRlcl0uaW5kZXhPZignLCcpID09PSAtMSkge1xuICAgIGNvbnNvbGUud2FybignT2Zmc2V0cyBzZXBhcmF0ZWQgYnkgd2hpdGUgc3BhY2UocykgYXJlIGRlcHJlY2F0ZWQsIHVzZSBhIGNvbW1hICgsKSBpbnN0ZWFkLicpO1xuICB9XG5cbiAgLy8gSWYgZGl2aWRlciBpcyBmb3VuZCwgd2UgZGl2aWRlIHRoZSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHMgdG8gZGl2aWRlXG4gIC8vIHRoZW0gYnkgb2ZzZXQgWCBhbmQgWS5cbiAgdmFyIHNwbGl0UmVnZXggPSAvXFxzKixcXHMqfFxccysvO1xuICB2YXIgb3BzID0gZGl2aWRlciAhPT0gLTEgPyBbZnJhZ21lbnRzLnNsaWNlKDAsIGRpdmlkZXIpLmNvbmNhdChbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzBdXSksIFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMV1dLmNvbmNhdChmcmFnbWVudHMuc2xpY2UoZGl2aWRlciArIDEpKV0gOiBbZnJhZ21lbnRzXTtcblxuICAvLyBDb252ZXJ0IHRoZSB2YWx1ZXMgd2l0aCB1bml0cyB0byBhYnNvbHV0ZSBwaXhlbHMgdG8gYWxsb3cgb3VyIGNvbXB1dGF0aW9uc1xuICBvcHMgPSBvcHMubWFwKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICAvLyBNb3N0IG9mIHRoZSB1bml0cyByZWx5IG9uIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgcG9wcGVyXG4gICAgdmFyIG1lYXN1cmVtZW50ID0gKGluZGV4ID09PSAxID8gIXVzZUhlaWdodCA6IHVzZUhlaWdodCkgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgcmV0dXJuIG9wXG4gICAgLy8gVGhpcyBhZ2dyZWdhdGVzIGFueSBgK2Agb3IgYC1gIHNpZ24gdGhhdCBhcmVuJ3QgY29uc2lkZXJlZCBvcGVyYXRvcnNcbiAgICAvLyBlLmcuOiAxMCArICs1ID0+IFsxMCwgKywgKzVdXG4gICAgLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgaWYgKGFbYS5sZW5ndGggLSAxXSA9PT0gJycgJiYgWycrJywgJy0nXS5pbmRleE9mKGIpICE9PSAtMSkge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IHRydWU7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIGlmIChtZXJnZVdpdGhQcmV2aW91cykge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gKz0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYS5jb25jYXQoYik7XG4gICAgICB9XG4gICAgfSwgW10pXG4gICAgLy8gSGVyZSB3ZSBjb252ZXJ0IHRoZSBzdHJpbmcgdmFsdWVzIGludG8gbnVtYmVyIHZhbHVlcyAoaW4gcHgpXG4gICAgLm1hcChmdW5jdGlvbiAoc3RyKSB7XG4gICAgICByZXR1cm4gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gTG9vcCB0cm91Z2ggdGhlIG9mZnNldHMgYXJyYXlzIGFuZCBleGVjdXRlIHRoZSBvcGVyYXRpb25zXG4gIG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICBvcC5mb3JFYWNoKGZ1bmN0aW9uIChmcmFnLCBpbmRleDIpIHtcbiAgICAgIGlmIChpc051bWVyaWMoZnJhZykpIHtcbiAgICAgICAgb2Zmc2V0c1tpbmRleF0gKz0gZnJhZyAqIChvcFtpbmRleDIgLSAxXSA9PT0gJy0nID8gLTEgOiAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEBhcmd1bWVudCB7TnVtYmVyfFN0cmluZ30gb3B0aW9ucy5vZmZzZXQ9MFxuICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIG9mZnNldChkYXRhLCBfcmVmKSB7XG4gIHZhciBvZmZzZXQgPSBfcmVmLm9mZnNldDtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LFxuICAgICAgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICB2YXIgb2Zmc2V0cyA9IHZvaWQgMDtcbiAgaWYgKGlzTnVtZXJpYygrb2Zmc2V0KSkge1xuICAgIG9mZnNldHMgPSBbK29mZnNldCwgMF07XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0cyA9IHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyLCByZWZlcmVuY2UsIGJhc2VQbGFjZW1lbnQpO1xuICB9XG5cbiAgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdsZWZ0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdyaWdodCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAndG9wJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMV07XG4gIH1cblxuICBkYXRhLnBvcHBlciA9IHBvcHBlcjtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBib3VuZGFyaWVzRWxlbWVudCA9IG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQgfHwgZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcblxuICAvLyBJZiBvZmZzZXRQYXJlbnQgaXMgdGhlIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSByZWFsbHkgd2FudCB0b1xuICAvLyBnbyBvbmUgc3RlcCB1cCBhbmQgdXNlIHRoZSBuZXh0IG9mZnNldFBhcmVudCBhcyByZWZlcmVuY2UgdG9cbiAgLy8gYXZvaWQgdG8gbWFrZSB0aGlzIG1vZGlmaWVyIGNvbXBsZXRlbHkgdXNlbGVzcyBhbmQgbG9vayBsaWtlIGJyb2tlblxuICBpZiAoZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UgPT09IGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gICAgYm91bmRhcmllc0VsZW1lbnQgPSBnZXRPZmZzZXRQYXJlbnQoYm91bmRhcmllc0VsZW1lbnQpO1xuICB9XG5cbiAgLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlXG4gIC8vIHJlc2V0cyB0aGUgcG9wcGVyJ3MgcG9zaXRpb24gc28gdGhhdCB0aGUgZG9jdW1lbnQgc2l6ZSBjYW4gYmUgY2FsY3VsYXRlZCBleGNsdWRpbmdcbiAgLy8gdGhlIHNpemUgb2YgdGhlIHBvcHBlciBlbGVtZW50IGl0c2VsZlxuICB2YXIgdHJhbnNmb3JtUHJvcCA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7XG4gIHZhciBwb3BwZXJTdHlsZXMgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5zdHlsZTsgLy8gYXNzaWdubWVudCB0byBoZWxwIG1pbmlmaWNhdGlvblxuICB2YXIgdG9wID0gcG9wcGVyU3R5bGVzLnRvcCxcbiAgICAgIGxlZnQgPSBwb3BwZXJTdHlsZXMubGVmdCxcbiAgICAgIHRyYW5zZm9ybSA9IHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXTtcblxuICBwb3BwZXJTdHlsZXMudG9wID0gJyc7XG4gIHBvcHBlclN0eWxlcy5sZWZ0ID0gJyc7XG4gIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9ICcnO1xuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQsIGRhdGEucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlXG4gIC8vIHJlc3RvcmVzIHRoZSBvcmlnaW5hbCBzdHlsZSBwcm9wZXJ0aWVzIGFmdGVyIHRoZSBvZmZzZXRzIGhhdmUgYmVlbiBjb21wdXRlZFxuICBwb3BwZXJTdHlsZXMudG9wID0gdG9wO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9IGxlZnQ7XG4gIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybTtcblxuICBvcHRpb25zLmJvdW5kYXJpZXMgPSBib3VuZGFyaWVzO1xuXG4gIHZhciBvcmRlciA9IG9wdGlvbnMucHJpb3JpdHk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIHZhciBjaGVjayA9IHtcbiAgICBwcmltYXJ5OiBmdW5jdGlvbiBwcmltYXJ5KHBsYWNlbWVudCkge1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW3BsYWNlbWVudF07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPCBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWF4KHBvcHBlcltwbGFjZW1lbnRdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBwbGFjZW1lbnQsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNlY29uZGFyeTogZnVuY3Rpb24gc2Vjb25kYXJ5KHBsYWNlbWVudCkge1xuICAgICAgdmFyIG1haW5TaWRlID0gcGxhY2VtZW50ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbbWFpblNpZGVdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdID4gYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1pbihwb3BwZXJbbWFpblNpZGVdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0gLSAocGxhY2VtZW50ID09PSAncmlnaHQnID8gcG9wcGVyLndpZHRoIDogcG9wcGVyLmhlaWdodCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBtYWluU2lkZSwgdmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICBvcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICB2YXIgc2lkZSA9IFsnbGVmdCcsICd0b3AnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xID8gJ3ByaW1hcnknIDogJ3NlY29uZGFyeSc7XG4gICAgcG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgY2hlY2tbc2lkZV0ocGxhY2VtZW50KSk7XG4gIH0pO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBwb3BwZXI7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHNoaWZ0KGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgc2hpZnR2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICAvLyBpZiBzaGlmdCBzaGlmdHZhcmlhdGlvbiBpcyBzcGVjaWZpZWQsIHJ1biB0aGUgbW9kaWZpZXJcbiAgaWYgKHNoaWZ0dmFyaWF0aW9uKSB7XG4gICAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcjtcblxuICAgIHZhciBpc1ZlcnRpY2FsID0gWydib3R0b20nLCAndG9wJ10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG4gICAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICAgIHZhciBzaGlmdE9mZnNldHMgPSB7XG4gICAgICBzdGFydDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSksXG4gICAgICBlbmQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbWVhc3VyZW1lbnRdIC0gcG9wcGVyW21lYXN1cmVtZW50XSlcbiAgICB9O1xuXG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIHNoaWZ0T2Zmc2V0c1tzaGlmdHZhcmlhdGlvbl0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBoaWRlKGRhdGEpIHtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdoaWRlJywgJ3ByZXZlbnRPdmVyZmxvdycpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgcmVmUmVjdCA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG4gIHZhciBib3VuZCA9IGZpbmQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAncHJldmVudE92ZXJmbG93JztcbiAgfSkuYm91bmRhcmllcztcblxuICBpZiAocmVmUmVjdC5ib3R0b20gPCBib3VuZC50b3AgfHwgcmVmUmVjdC5sZWZ0ID4gYm91bmQucmlnaHQgfHwgcmVmUmVjdC50b3AgPiBib3VuZC5ib3R0b20gfHwgcmVmUmVjdC5yaWdodCA8IGJvdW5kLmxlZnQpIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSB0cnVlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IGZhbHNlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaW5uZXIoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgaXNIb3JpeiA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBzdWJ0cmFjdExlbmd0aCA9IFsndG9wJywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID09PSAtMTtcblxuICBwb3BwZXJbaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnXSA9IHJlZmVyZW5jZVtiYXNlUGxhY2VtZW50XSAtIChzdWJ0cmFjdExlbmd0aCA/IHBvcHBlcltpc0hvcml6ID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA6IDApO1xuXG4gIGRhdGEucGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QocG9wcGVyKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBNb2RpZmllciBmdW5jdGlvbiwgZWFjaCBtb2RpZmllciBjYW4gaGF2ZSBhIGZ1bmN0aW9uIG9mIHRoaXMgdHlwZSBhc3NpZ25lZFxuICogdG8gaXRzIGBmbmAgcHJvcGVydHkuPGJyIC8+XG4gKiBUaGVzZSBmdW5jdGlvbnMgd2lsbCBiZSBjYWxsZWQgb24gZWFjaCB1cGRhdGUsIHRoaXMgbWVhbnMgdGhhdCB5b3UgbXVzdFxuICogbWFrZSBzdXJlIHRoZXkgYXJlIHBlcmZvcm1hbnQgZW5vdWdoIHRvIGF2b2lkIHBlcmZvcm1hbmNlIGJvdHRsZW5lY2tzLlxuICpcbiAqIEBmdW5jdGlvbiBNb2RpZmllckZuXG4gKiBAYXJndW1lbnQge2RhdGFPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge2RhdGFPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuXG4vKipcbiAqIE1vZGlmaWVycyBhcmUgcGx1Z2lucyB1c2VkIHRvIGFsdGVyIHRoZSBiZWhhdmlvciBvZiB5b3VyIHBvcHBlcnMuPGJyIC8+XG4gKiBQb3BwZXIuanMgdXNlcyBhIHNldCBvZiA5IG1vZGlmaWVycyB0byBwcm92aWRlIGFsbCB0aGUgYmFzaWMgZnVuY3Rpb25hbGl0aWVzXG4gKiBuZWVkZWQgYnkgdGhlIGxpYnJhcnkuXG4gKlxuICogVXN1YWxseSB5b3UgZG9uJ3Qgd2FudCB0byBvdmVycmlkZSB0aGUgYG9yZGVyYCwgYGZuYCBhbmQgYG9uTG9hZGAgcHJvcHMuXG4gKiBBbGwgdGhlIG90aGVyIHByb3BlcnRpZXMgYXJlIGNvbmZpZ3VyYXRpb25zIHRoYXQgY291bGQgYmUgdHdlYWtlZC5cbiAqIEBuYW1lc3BhY2UgbW9kaWZpZXJzXG4gKi9cbnZhciBtb2RpZmllcnMgPSB7XG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHNoaWZ0IHRoZSBwb3BwZXIgb24gdGhlIHN0YXJ0IG9yIGVuZCBvZiBpdHMgcmVmZXJlbmNlXG4gICAqIGVsZW1lbnQuPGJyIC8+XG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgdmFyaWF0aW9uIG9mIHRoZSBgcGxhY2VtZW50YCBwcm9wZXJ0eS48YnIgLz5cbiAgICogSXQgY2FuIGJlIG9uZSBlaXRoZXIgYC1lbmRgIG9yIGAtc3RhcnRgLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgc2hpZnQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAxMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBzaGlmdFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgYG9mZnNldGAgbW9kaWZpZXIgY2FuIHNoaWZ0IHlvdXIgcG9wcGVyIG9uIGJvdGggaXRzIGF4aXMuXG4gICAqXG4gICAqIEl0IGFjY2VwdHMgdGhlIGZvbGxvd2luZyB1bml0czpcbiAgICogLSBgcHhgIG9yIHVuaXQtbGVzcywgaW50ZXJwcmV0ZWQgYXMgcGl4ZWxzXG4gICAqIC0gYCVgIG9yIGAlcmAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAgICogLSBgJXBgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIC0gYHZ3YCwgQ1NTIHZpZXdwb3J0IHdpZHRoIHVuaXRcbiAgICogLSBgdmhgLCBDU1Mgdmlld3BvcnQgaGVpZ2h0IHVuaXRcbiAgICpcbiAgICogRm9yIGxlbmd0aCBpcyBpbnRlbmRlZCB0aGUgbWFpbiBheGlzIHJlbGF0aXZlIHRvIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHBvcHBlci48YnIgLz5cbiAgICogVGhpcyBtZWFucyB0aGF0IGlmIHRoZSBwbGFjZW1lbnQgaXMgYHRvcGAgb3IgYGJvdHRvbWAsIHRoZSBsZW5ndGggd2lsbCBiZSB0aGVcbiAgICogYHdpZHRoYC4gSW4gY2FzZSBvZiBgbGVmdGAgb3IgYHJpZ2h0YCwgaXQgd2lsbCBiZSB0aGUgYGhlaWdodGAuXG4gICAqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSBhIHNpbmdsZSB2YWx1ZSAoYXMgYE51bWJlcmAgb3IgYFN0cmluZ2ApLCBvciBhIHBhaXIgb2YgdmFsdWVzXG4gICAqIGFzIGBTdHJpbmdgIGRpdmlkZWQgYnkgYSBjb21tYSBvciBvbmUgKG9yIG1vcmUpIHdoaXRlIHNwYWNlcy48YnIgLz5cbiAgICogVGhlIGxhdHRlciBpcyBhIGRlcHJlY2F0ZWQgbWV0aG9kIGJlY2F1c2UgaXQgbGVhZHMgdG8gY29uZnVzaW9uIGFuZCB3aWxsIGJlXG4gICAqIHJlbW92ZWQgaW4gdjIuPGJyIC8+XG4gICAqIEFkZGl0aW9uYWxseSwgaXQgYWNjZXB0cyBhZGRpdGlvbnMgYW5kIHN1YnRyYWN0aW9ucyBiZXR3ZWVuIGRpZmZlcmVudCB1bml0cy5cbiAgICogTm90ZSB0aGF0IG11bHRpcGxpY2F0aW9ucyBhbmQgZGl2aXNpb25zIGFyZW4ndCBzdXBwb3J0ZWQuXG4gICAqXG4gICAqIFZhbGlkIGV4YW1wbGVzIGFyZTpcbiAgICogYGBgXG4gICAqIDEwXG4gICAqICcxMCUnXG4gICAqICcxMCwgMTAnXG4gICAqICcxMCUsIDEwJ1xuICAgKiAnMTAgKyAxMCUnXG4gICAqICcxMCAtIDV2aCArIDMlJ1xuICAgKiAnLTEwcHggKyA1dmgsIDVweCAtIDYlJ1xuICAgKiBgYGBcbiAgICogPiAqKk5CKio6IElmIHlvdSBkZXNpcmUgdG8gYXBwbHkgb2Zmc2V0cyB0byB5b3VyIHBvcHBlcnMgaW4gYSB3YXkgdGhhdCBtYXkgbWFrZSB0aGVtIG92ZXJsYXBcbiAgICogPiB3aXRoIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50LCB1bmZvcnR1bmF0ZWx5LCB5b3Ugd2lsbCBoYXZlIHRvIGRpc2FibGUgdGhlIGBmbGlwYCBtb2RpZmllci5cbiAgICogPiBZb3UgY2FuIHJlYWQgbW9yZSBvbiB0aGlzIGF0IHRoaXMgW2lzc3VlXShodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9pc3N1ZXMvMzczKS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIG9mZnNldDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0yMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDIwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IG9mZnNldCxcbiAgICAvKiogQHByb3Age051bWJlcnxTdHJpbmd9IG9mZnNldD0wXG4gICAgICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gICAgICovXG4gICAgb2Zmc2V0OiAwXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gcHJldmVudCB0aGUgcG9wcGVyIGZyb20gYmVpbmcgcG9zaXRpb25lZCBvdXRzaWRlIHRoZSBib3VuZGFyeS5cbiAgICpcbiAgICogQSBzY2VuYXJpbyBleGlzdHMgd2hlcmUgdGhlIHJlZmVyZW5jZSBpdHNlbGYgaXMgbm90IHdpdGhpbiB0aGUgYm91bmRhcmllcy48YnIgLz5cbiAgICogV2UgY2FuIHNheSBpdCBoYXMgXCJlc2NhcGVkIHRoZSBib3VuZGFyaWVzXCIg4oCUIG9yIGp1c3QgXCJlc2NhcGVkXCIuPGJyIC8+XG4gICAqIEluIHRoaXMgY2FzZSB3ZSBuZWVkIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSBwb3BwZXIgc2hvdWxkIGVpdGhlcjpcbiAgICpcbiAgICogLSBkZXRhY2ggZnJvbSB0aGUgcmVmZXJlbmNlIGFuZCByZW1haW4gXCJ0cmFwcGVkXCIgaW4gdGhlIGJvdW5kYXJpZXMsIG9yXG4gICAqIC0gaWYgaXQgc2hvdWxkIGlnbm9yZSB0aGUgYm91bmRhcnkgYW5kIFwiZXNjYXBlIHdpdGggaXRzIHJlZmVyZW5jZVwiXG4gICAqXG4gICAqIFdoZW4gYGVzY2FwZVdpdGhSZWZlcmVuY2VgIGlzIHNldCB0b2B0cnVlYCBhbmQgcmVmZXJlbmNlIGlzIGNvbXBsZXRlbHlcbiAgICogb3V0c2lkZSBpdHMgYm91bmRhcmllcywgdGhlIHBvcHBlciB3aWxsIG92ZXJmbG93IChvciBjb21wbGV0ZWx5IGxlYXZlKVxuICAgKiB0aGUgYm91bmRhcmllcyBpbiBvcmRlciB0byByZW1haW4gYXR0YWNoZWQgdG8gdGhlIGVkZ2Ugb2YgdGhlIHJlZmVyZW5jZS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHByZXZlbnRPdmVyZmxvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0zMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDMwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7QXJyYXl9IFtwcmlvcml0eT1bJ2xlZnQnLCdyaWdodCcsJ3RvcCcsJ2JvdHRvbSddXVxuICAgICAqIFBvcHBlciB3aWxsIHRyeSB0byBwcmV2ZW50IG92ZXJmbG93IGZvbGxvd2luZyB0aGVzZSBwcmlvcml0aWVzIGJ5IGRlZmF1bHQsXG4gICAgICogdGhlbiwgaXQgY291bGQgb3ZlcmZsb3cgb24gdGhlIGxlZnQgYW5kIG9uIHRvcCBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHByaW9yaXR5OiBbJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbSddLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIEFtb3VudCBvZiBwaXhlbCB1c2VkIHRvIGRlZmluZSBhIG1pbmltdW0gZGlzdGFuY2UgYmV0d2VlbiB0aGUgYm91bmRhcmllc1xuICAgICAqIGFuZCB0aGUgcG9wcGVyLiBUaGlzIG1ha2VzIHN1cmUgdGhlIHBvcHBlciBhbHdheXMgaGFzIGEgbGl0dGxlIHBhZGRpbmdcbiAgICAgKiBiZXR3ZWVuIHRoZSBlZGdlcyBvZiBpdHMgY29udGFpbmVyXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0nc2Nyb2xsUGFyZW50J1xuICAgICAqIEJvdW5kYXJpZXMgdXNlZCBieSB0aGUgbW9kaWZpZXIuIENhbiBiZSBgc2Nyb2xsUGFyZW50YCwgYHdpbmRvd2AsXG4gICAgICogYHZpZXdwb3J0YCBvciBhbnkgRE9NIGVsZW1lbnQuXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICdzY3JvbGxQYXJlbnQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSBzdXJlIHRoZSByZWZlcmVuY2UgYW5kIGl0cyBwb3BwZXIgc3RheSBuZWFyIGVhY2ggb3RoZXJcbiAgICogd2l0aG91dCBsZWF2aW5nIGFueSBnYXAgYmV0d2VlbiB0aGUgdHdvLiBFc3BlY2lhbGx5IHVzZWZ1bCB3aGVuIHRoZSBhcnJvdyBpc1xuICAgKiBlbmFibGVkIGFuZCB5b3Ugd2FudCB0byBlbnN1cmUgdGhhdCBpdCBwb2ludHMgdG8gaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBJdCBjYXJlcyBvbmx5IGFib3V0IHRoZSBmaXJzdCBheGlzLiBZb3UgY2FuIHN0aWxsIGhhdmUgcG9wcGVycyB3aXRoIG1hcmdpblxuICAgKiBiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGtlZXBUb2dldGhlcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj00MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDQwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGtlZXBUb2dldGhlclxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGlzIG1vZGlmaWVyIGlzIHVzZWQgdG8gbW92ZSB0aGUgYGFycm93RWxlbWVudGAgb2YgdGhlIHBvcHBlciB0byBtYWtlXG4gICAqIHN1cmUgaXQgaXMgcG9zaXRpb25lZCBiZXR3ZWVuIHRoZSByZWZlcmVuY2UgZWxlbWVudCBhbmQgaXRzIHBvcHBlciBlbGVtZW50LlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIG91dGVyIHNpemUgb2YgdGhlIGBhcnJvd0VsZW1lbnRgIG5vZGUgdG8gZGV0ZWN0IGhvdyBtYW55XG4gICAqIHBpeGVscyBvZiBjb25qdW5jdGlvbiBhcmUgbmVlZGVkLlxuICAgKlxuICAgKiBJdCBoYXMgbm8gZWZmZWN0IGlmIG5vIGBhcnJvd0VsZW1lbnRgIGlzIHByb3ZpZGVkLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXJyb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA1MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcnJvdyxcbiAgICAvKiogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gZWxlbWVudD0nW3gtYXJyb3ddJyAtIFNlbGVjdG9yIG9yIG5vZGUgdXNlZCBhcyBhcnJvdyAqL1xuICAgIGVsZW1lbnQ6ICdbeC1hcnJvd10nXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gZmxpcCB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50IHdoZW4gaXQgc3RhcnRzIHRvIG92ZXJsYXAgaXRzXG4gICAqIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqXG4gICAqICoqTk9URToqKiB0aGlzIG1vZGlmaWVyIHdpbGwgaW50ZXJydXB0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZSBhbmQgd2lsbFxuICAgKiByZXN0YXJ0IGl0IGlmIGl0IGRldGVjdHMgdGhlIG5lZWQgdG8gZmxpcCB0aGUgcGxhY2VtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgZmxpcDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj02MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDYwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGZsaXAsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xBcnJheX0gYmVoYXZpb3I9J2ZsaXAnXG4gICAgICogVGhlIGJlaGF2aW9yIHVzZWQgdG8gY2hhbmdlIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQuIEl0IGNhbiBiZSBvbmUgb2ZcbiAgICAgKiBgZmxpcGAsIGBjbG9ja3dpc2VgLCBgY291bnRlcmNsb2Nrd2lzZWAgb3IgYW4gYXJyYXkgd2l0aCBhIGxpc3Qgb2YgdmFsaWRcbiAgICAgKiBwbGFjZW1lbnRzICh3aXRoIG9wdGlvbmFsIHZhcmlhdGlvbnMpXG4gICAgICovXG4gICAgYmVoYXZpb3I6ICdmbGlwJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgZmxpcCBpZiBpdCBoaXRzIHRoZSBlZGdlcyBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3ZpZXdwb3J0J1xuICAgICAqIFRoZSBlbGVtZW50IHdoaWNoIHdpbGwgZGVmaW5lIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBwb3BwZXIgcG9zaXRpb24uXG4gICAgICogVGhlIHBvcHBlciB3aWxsIG5ldmVyIGJlIHBsYWNlZCBvdXRzaWRlIG9mIHRoZSBkZWZpbmVkIGJvdW5kYXJpZXNcbiAgICAgKiAoZXhjZXB0IGlmIGBrZWVwVG9nZXRoZXJgIGlzIGVuYWJsZWQpXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICd2aWV3cG9ydCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGZsaXBWYXJpYXRpb25zPWZhbHNlXG4gICAgICogVGhlIHBvcHBlciB3aWxsIHN3aXRjaCBwbGFjZW1lbnQgdmFyaWF0aW9uIGJldHdlZW4gYC1zdGFydGAgYW5kIGAtZW5kYCB3aGVuXG4gICAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50IG92ZXJsYXBzIGl0cyBib3VuZGFyaWVzLlxuICAgICAqXG4gICAgICogVGhlIG9yaWdpbmFsIHBsYWNlbWVudCBzaG91bGQgaGF2ZSBhIHNldCB2YXJpYXRpb24uXG4gICAgICovXG4gICAgZmxpcFZhcmlhdGlvbnM6IGZhbHNlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBmbGlwVmFyaWF0aW9uc0J5Q29udGVudD1mYWxzZVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBzd2l0Y2ggcGxhY2VtZW50IHZhcmlhdGlvbiBiZXR3ZWVuIGAtc3RhcnRgIGFuZCBgLWVuZGAgd2hlblxuICAgICAqIHRoZSBwb3BwZXIgZWxlbWVudCBvdmVybGFwcyBpdHMgcmVmZXJlbmNlIGJvdW5kYXJpZXMuXG4gICAgICpcbiAgICAgKiBUaGUgb3JpZ2luYWwgcGxhY2VtZW50IHNob3VsZCBoYXZlIGEgc2V0IHZhcmlhdGlvbi5cbiAgICAgKi9cbiAgICBmbGlwVmFyaWF0aW9uc0J5Q29udGVudDogZmFsc2VcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHRoZSBwb3BwZXIgZmxvdyB0b3dhcmQgdGhlIGlubmVyIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQnkgZGVmYXVsdCwgd2hlbiB0aGlzIG1vZGlmaWVyIGlzIGRpc2FibGVkLCB0aGUgcG9wcGVyIHdpbGwgYmUgcGxhY2VkIG91dHNpZGVcbiAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaW5uZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA3MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPWZhbHNlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGlubmVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gaGlkZSB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dHNpZGUgb2YgdGhlXG4gICAqIHBvcHBlciBib3VuZGFyaWVzLiBJdCB3aWxsIHNldCBhIGB4LW91dC1vZi1ib3VuZGFyaWVzYCBhdHRyaWJ1dGUgd2hpY2ggY2FuXG4gICAqIGJlIHVzZWQgdG8gaGlkZSB3aXRoIGEgQ1NTIHNlbGVjdG9yIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGlzXG4gICAqIG91dCBvZiBib3VuZGFyaWVzLlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBoaWRlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTgwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaGlkZVxuICB9LFxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgc3R5bGUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBlbGVtZW50IHRvIGdldHNcbiAgICogcHJvcGVybHkgcG9zaXRpb25lZC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgbW9kaWZpZXIgd2lsbCBub3QgdG91Y2ggdGhlIERPTSwgaXQganVzdCBwcmVwYXJlcyB0aGUgc3R5bGVzXG4gICAqIHNvIHRoYXQgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGNhbiBhcHBseSBpdC4gVGhpcyBzZXBhcmF0aW9uIGlzIHVzZWZ1bFxuICAgKiBpbiBjYXNlIHlvdSBuZWVkIHRvIHJlcGxhY2UgYGFwcGx5U3R5bGVgIHdpdGggYSBjdXN0b20gaW1wbGVtZW50YXRpb24uXG4gICAqXG4gICAqIFRoaXMgbW9kaWZpZXIgaGFzIGA4NTBgIGFzIGBvcmRlcmAgdmFsdWUgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgKiB3aXRoIHByZXZpb3VzIHZlcnNpb25zIG9mIFBvcHBlci5qcy4gRXhwZWN0IHRoZSBtb2RpZmllcnMgb3JkZXJpbmcgbWV0aG9kXG4gICAqIHRvIGNoYW5nZSBpbiBmdXR1cmUgbWFqb3IgdmVyc2lvbnMgb2YgdGhlIGxpYnJhcnkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBjb21wdXRlU3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODUwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4NTAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBjb21wdXRlU3R5bGUsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdib3R0b20nXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWCBheGlzIChgYm90dG9tYCBvciBgdG9wYCkuIEFLQSBYIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYGJvdHRvbWBcbiAgICAgKi9cbiAgICB4OiAnYm90dG9tJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nbGVmdCddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBZIGF4aXMgKGBsZWZ0YCBvciBgcmlnaHRgKS4gQUtBIFkgb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgcmlnaHRgXG4gICAgICovXG4gICAgeTogJ3JpZ2h0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSBjb21wdXRlZCBzdHlsZXMgdG8gdGhlIHBvcHBlciBlbGVtZW50LlxuICAgKlxuICAgKiBBbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIGFyZSBsaW1pdGVkIHRvIHRoaXMgbW9kaWZpZXIuIFRoaXMgaXMgdXNlZnVsIGluIGNhc2VcbiAgICogeW91IHdhbnQgdG8gaW50ZWdyYXRlIFBvcHBlci5qcyBpbnNpZGUgYSBmcmFtZXdvcmsgb3IgdmlldyBsaWJyYXJ5IGFuZCB5b3VcbiAgICogd2FudCB0byBkZWxlZ2F0ZSBhbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIHRvIGl0LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgaWYgeW91IGRpc2FibGUgdGhpcyBtb2RpZmllciwgeW91IG11c3QgbWFrZSBzdXJlIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiBoYXMgaXRzIHBvc2l0aW9uIHNldCB0byBgYWJzb2x1dGVgIGJlZm9yZSBQb3BwZXIuanMgY2FuIGRvIGl0cyB3b3JrIVxuICAgKlxuICAgKiBKdXN0IGRpc2FibGUgdGhpcyBtb2RpZmllciBhbmQgZGVmaW5lIHlvdXIgb3duIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXBwbHlTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj05MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDkwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFwcGx5U3R5bGUsXG4gICAgLyoqIEBwcm9wIHtGdW5jdGlvbn0gKi9cbiAgICBvbkxvYWQ6IGFwcGx5U3R5bGVPbkxvYWQsXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjEwLjAsIHRoZSBwcm9wZXJ0eSBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllclxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzRCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdW5kZWZpbmVkXG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGBkYXRhT2JqZWN0YCBpcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGluZm9ybWF0aW9uIHVzZWQgYnkgUG9wcGVyLmpzLlxuICogVGhpcyBvYmplY3QgaXMgcGFzc2VkIHRvIG1vZGlmaWVycyBhbmQgdG8gdGhlIGBvbkNyZWF0ZWAgYW5kIGBvblVwZGF0ZWAgY2FsbGJhY2tzLlxuICogQG5hbWUgZGF0YU9iamVjdFxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuaW5zdGFuY2UgVGhlIFBvcHBlci5qcyBpbnN0YW5jZVxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEucGxhY2VtZW50IFBsYWNlbWVudCBhcHBsaWVkIHRvIHBvcHBlclxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgUGxhY2VtZW50IG9yaWdpbmFsbHkgZGVmaW5lZCBvbiBpbml0XG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuZmxpcHBlZCBUcnVlIGlmIHBvcHBlciBoYXMgYmVlbiBmbGlwcGVkIGJ5IGZsaXAgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5oaWRlIFRydWUgaWYgdGhlIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dCBvZiBib3VuZGFyaWVzLCB1c2VmdWwgdG8ga25vdyB3aGVuIHRvIGhpZGUgdGhlIHBvcHBlclxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gZGF0YS5hcnJvd0VsZW1lbnQgTm9kZSB1c2VkIGFzIGFycm93IGJ5IGFycm93IG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5zdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5hcnJvd1N0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBhcnJvdy4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmJvdW5kYXJpZXMgT2Zmc2V0cyBvZiB0aGUgcG9wcGVyIGJvdW5kYXJpZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMgVGhlIG1lYXN1cmVtZW50cyBvZiBwb3BwZXIsIHJlZmVyZW5jZSBhbmQgYXJyb3cgZWxlbWVudHNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucG9wcGVyIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLmFycm93XSBgdG9wYCBhbmQgYGxlZnRgIG9mZnNldHMsIG9ubHkgb25lIG9mIHRoZW0gd2lsbCBiZSBkaWZmZXJlbnQgZnJvbSAwXG4gKi9cblxuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgcHJvdmlkZWQgdG8gUG9wcGVyLmpzIGNvbnN0cnVjdG9yLjxiciAvPlxuICogVGhlc2UgY2FuIGJlIG92ZXJyaWRkZW4gdXNpbmcgdGhlIGBvcHRpb25zYCBhcmd1bWVudCBvZiBQb3BwZXIuanMuPGJyIC8+XG4gKiBUbyBvdmVycmlkZSBhbiBvcHRpb24sIHNpbXBseSBwYXNzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lXG4gKiBzdHJ1Y3R1cmUgb2YgdGhlIGBvcHRpb25zYCBvYmplY3QsIGFzIHRoZSAzcmQgYXJndW1lbnQuIEZvciBleGFtcGxlOlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZiwgcG9wLCB7XG4gKiAgIG1vZGlmaWVyczoge1xuICogICAgIHByZXZlbnRPdmVyZmxvdzogeyBlbmFibGVkOiBmYWxzZSB9XG4gKiAgIH1cbiAqIH0pXG4gKiBgYGBcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBEZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFBvcHBlcidzIHBsYWNlbWVudC5cbiAgICogQHByb3Age1BvcHBlci5wbGFjZW1lbnRzfSBwbGFjZW1lbnQ9J2JvdHRvbSdcbiAgICovXG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG5cbiAgLyoqXG4gICAqIFNldCB0aGlzIHRvIHRydWUgaWYgeW91IHdhbnQgcG9wcGVyIHRvIHBvc2l0aW9uIGl0IHNlbGYgaW4gJ2ZpeGVkJyBtb2RlXG4gICAqIEBwcm9wIHtCb29sZWFufSBwb3NpdGlvbkZpeGVkPWZhbHNlXG4gICAqL1xuICBwb3NpdGlvbkZpeGVkOiBmYWxzZSxcblxuICAvKipcbiAgICogV2hldGhlciBldmVudHMgKHJlc2l6ZSwgc2Nyb2xsKSBhcmUgaW5pdGlhbGx5IGVuYWJsZWQuXG4gICAqIEBwcm9wIHtCb29sZWFufSBldmVudHNFbmFibGVkPXRydWVcbiAgICovXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBwb3BwZXIgd2hlblxuICAgKiB5b3UgY2FsbCB0aGUgYGRlc3Ryb3lgIG1ldGhvZC5cbiAgICogQHByb3Age0Jvb2xlYW59IHJlbW92ZU9uRGVzdHJveT1mYWxzZVxuICAgKi9cbiAgcmVtb3ZlT25EZXN0cm95OiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyBjcmVhdGVkLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvbkNyZWF0ZX1cbiAgICovXG4gIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIHVwZGF0ZWQuIFRoaXMgY2FsbGJhY2sgaXMgbm90IGNhbGxlZFxuICAgKiBvbiB0aGUgaW5pdGlhbGl6YXRpb24vY3JlYXRpb24gb2YgdGhlIHBvcHBlciwgYnV0IG9ubHkgb24gc3Vic2VxdWVudFxuICAgKiB1cGRhdGVzLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvblVwZGF0ZX1cbiAgICovXG4gIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG1vZGlmaWVycyB1c2VkIHRvIG1vZGlmeSB0aGUgb2Zmc2V0cyBiZWZvcmUgdGhleSBhcmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLlxuICAgKiBUaGV5IHByb3ZpZGUgbW9zdCBvZiB0aGUgZnVuY3Rpb25hbGl0aWVzIG9mIFBvcHBlci5qcy5cbiAgICogQHByb3Age21vZGlmaWVyc31cbiAgICovXG4gIG1vZGlmaWVyczogbW9kaWZpZXJzXG59O1xuXG4vKipcbiAqIEBjYWxsYmFjayBvbkNyZWF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgb25VcGRhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8vIFV0aWxzXG4vLyBNZXRob2RzXG52YXIgUG9wcGVyID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBQb3BwZXIuanMgaW5zdGFuY2UuXG4gICAqIEBjbGFzcyBQb3BwZXJcbiAgICogQHBhcmFtIHtFbGVtZW50fHJlZmVyZW5jZU9iamVjdH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIC8gWE1MIGVsZW1lbnQgdXNlZCBhcyB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gWW91ciBjdXN0b20gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgb25lcyBkZWZpbmVkIGluIFtEZWZhdWx0c10oI2RlZmF1bHRzKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlIC0gVGhlIGdlbmVyYXRlZCBQb3BwZXIuanMgaW5zdGFuY2VcbiAgICovXG4gIGZ1bmN0aW9uIFBvcHBlcihyZWZlcmVuY2UsIHBvcHBlcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9wcGVyKTtcblxuICAgIHRoaXMuc2NoZWR1bGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF90aGlzLnVwZGF0ZSk7XG4gICAgfTtcblxuICAgIC8vIG1ha2UgdXBkYXRlKCkgZGVib3VuY2VkLCBzbyB0aGF0IGl0IG9ubHkgcnVucyBhdCBtb3N0IG9uY2UtcGVyLXRpY2tcbiAgICB0aGlzLnVwZGF0ZSA9IGRlYm91bmNlKHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xuXG4gICAgLy8gd2l0aCB7fSB3ZSBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggdGhlIG9wdGlvbnMgaW5zaWRlIGl0XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAvLyBpbml0IHN0YXRlXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAgIGlzQ3JlYXRlZDogZmFsc2UsXG4gICAgICBzY3JvbGxQYXJlbnRzOiBbXVxuICAgIH07XG5cbiAgICAvLyBnZXQgcmVmZXJlbmNlIGFuZCBwb3BwZXIgZWxlbWVudHMgKGFsbG93IGpRdWVyeSB3cmFwcGVycylcbiAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZSAmJiByZWZlcmVuY2UuanF1ZXJ5ID8gcmVmZXJlbmNlWzBdIDogcmVmZXJlbmNlO1xuICAgIHRoaXMucG9wcGVyID0gcG9wcGVyICYmIHBvcHBlci5qcXVlcnkgPyBwb3BwZXJbMF0gOiBwb3BwZXI7XG5cbiAgICAvLyBEZWVwIG1lcmdlIG1vZGlmaWVycyBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzLCBvcHRpb25zLm1vZGlmaWVycykpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnNbbmFtZV0gfHwge30sIG9wdGlvbnMubW9kaWZpZXJzID8gb3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gOiB7fSk7XG4gICAgfSk7XG5cbiAgICAvLyBSZWZhY3RvcmluZyBtb2RpZmllcnMnIGxpc3QgKE9iamVjdCA9PiBBcnJheSlcbiAgICB0aGlzLm1vZGlmaWVycyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tb2RpZmllcnMpLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgbmFtZTogbmFtZVxuICAgICAgfSwgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0pO1xuICAgIH0pXG4gICAgLy8gc29ydCB0aGUgbW9kaWZpZXJzIGJ5IG9yZGVyXG4gICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcbiAgICB9KTtcblxuICAgIC8vIG1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgd2hlbiBQb3BwZXIuanMgZ2V0IGluaXRlZFxuICAgIC8vIHN1Y2ggY29kZSBpcyBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBvZiBpdHMgbW9kaWZpZXJcbiAgICAvLyB0aGV5IGNvdWxkIGFkZCBuZXcgcHJvcGVydGllcyB0byB0aGVpciBvcHRpb25zIGNvbmZpZ3VyYXRpb25cbiAgICAvLyBCRSBBV0FSRTogZG9uJ3QgYWRkIG9wdGlvbnMgdG8gYG9wdGlvbnMubW9kaWZpZXJzLm5hbWVgIGJ1dCB0byBgbW9kaWZpZXJPcHRpb25zYCFcbiAgICB0aGlzLm1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllck9wdGlvbnMpIHtcbiAgICAgIGlmIChtb2RpZmllck9wdGlvbnMuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQpKSB7XG4gICAgICAgIG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQoX3RoaXMucmVmZXJlbmNlLCBfdGhpcy5wb3BwZXIsIF90aGlzLm9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgX3RoaXMuc3RhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZmlyZSB0aGUgZmlyc3QgdXBkYXRlIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIgaW4gdGhlIHJpZ2h0IHBsYWNlXG4gICAgdGhpcy51cGRhdGUoKTtcblxuICAgIHZhciBldmVudHNFbmFibGVkID0gdGhpcy5vcHRpb25zLmV2ZW50c0VuYWJsZWQ7XG4gICAgaWYgKGV2ZW50c0VuYWJsZWQpIHtcbiAgICAgIC8vIHNldHVwIGV2ZW50IGxpc3RlbmVycywgdGhleSB3aWxsIHRha2UgY2FyZSBvZiB1cGRhdGUgdGhlIHBvc2l0aW9uIGluIHNwZWNpZmljIHNpdHVhdGlvbnNcbiAgICAgIHRoaXMuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQgPSBldmVudHNFbmFibGVkO1xuICB9XG5cbiAgLy8gV2UgY2FuJ3QgdXNlIGNsYXNzIHByb3BlcnRpZXMgYmVjYXVzZSB0aGV5IGRvbid0IGdldCBsaXN0ZWQgaW4gdGhlXG4gIC8vIGNsYXNzIHByb3RvdHlwZSBhbmQgYnJlYWsgc3R1ZmYgbGlrZSBTaW5vbiBzdHVic1xuXG5cbiAgY3JlYXRlQ2xhc3MoUG9wcGVyLCBbe1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSQkMSgpIHtcbiAgICAgIHJldHVybiB1cGRhdGUuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSQkMSgpIHtcbiAgICAgIHJldHVybiBkZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5hYmxlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBlbmFibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rpc2FibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZXMgYW4gdXBkYXRlLiBJdCB3aWxsIHJ1biBvbiB0aGUgbmV4dCBVSSB1cGRhdGUgYXZhaWxhYmxlLlxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIENvbGxlY3Rpb24gb2YgdXRpbGl0aWVzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY3VzdG9tIG1vZGlmaWVycy5cbiAgICAgKiBTdGFydGluZyBmcm9tIHZlcnNpb24gMS43LCB0aGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSBpZiB5b3VcbiAgICAgKiBpbmNsdWRlIGBwb3BwZXItdXRpbHMuanNgIGJlZm9yZSBgcG9wcGVyLmpzYC5cbiAgICAgKlxuICAgICAqICoqREVQUkVDQVRJT04qKjogVGhpcyB3YXkgdG8gYWNjZXNzIFBvcHBlclV0aWxzIGlzIGRlcHJlY2F0ZWRcbiAgICAgKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYyISBVc2UgdGhlIFBvcHBlclV0aWxzIG1vZHVsZSBkaXJlY3RseSBpbnN0ZWFkLlxuICAgICAqIER1ZSB0byB0aGUgaGlnaCBpbnN0YWJpbGl0eSBvZiB0aGUgbWV0aG9kcyBjb250YWluZWQgaW4gVXRpbHMsIHdlIGNhbid0XG4gICAgICogZ3VhcmFudGVlIHRoZW0gdG8gZm9sbG93IHNlbXZlci4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzayFcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS44XG4gICAgICogQG1lbWJlciBVdGlsc1xuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuICB9XSk7XG4gIHJldHVybiBQb3BwZXI7XG59KCk7XG5cbi8qKlxuICogVGhlIGByZWZlcmVuY2VPYmplY3RgIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBjb21wYXRpYmxlIHdpdGggUG9wcGVyLmpzXG4gKiBhbmQgbGV0cyB5b3UgdXNlIGl0IGFzIHJlcGxhY2VtZW50IG9mIGEgcmVhbCBET00gbm9kZS48YnIgLz5cbiAqIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIHBvc2l0aW9uIGEgcG9wcGVyIHJlbGF0aXZlbHkgdG8gYSBzZXQgb2YgY29vcmRpbmF0ZXNcbiAqIGluIGNhc2UgeW91IGRvbid0IGhhdmUgYSBET00gbm9kZSB0byB1c2UgYXMgcmVmZXJlbmNlLlxuICpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWZlcmVuY2VPYmplY3QsIHBvcHBlck5vZGUpO1xuICogYGBgXG4gKlxuICogTkI6IFRoaXMgZmVhdHVyZSBpc24ndCBzdXBwb3J0ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAuXG4gKiBAbmFtZSByZWZlcmVuY2VPYmplY3RcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRhdGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHNldCBvZiBjb29yZGluYXRlcyBjb21wYXRpYmxlIHdpdGggdGhlIG5hdGl2ZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBtZXRob2QuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRXaWR0aFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudEhlaWdodFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKi9cblxuXG5Qb3BwZXIuVXRpbHMgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpLlBvcHBlclV0aWxzO1xuUG9wcGVyLnBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuUG9wcGVyLkRlZmF1bHRzID0gRGVmYXVsdHM7XG5cbmV4cG9ydCBkZWZhdWx0IFBvcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcHBlci5qcy5tYXBcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoY29tcGFyZS5sZW5ndGggPT09IDEpIGNvbXBhcmUgPSBhc2NlbmRpbmdDb21wYXJhdG9yKGNvbXBhcmUpO1xuICByZXR1cm4ge1xuICAgIGxlZnQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7XG4gICAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfSxcbiAgICByaWdodDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA+IDApIGhpID0gbWlkO1xuICAgICAgICBlbHNlIGxvID0gbWlkICsgMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsbztcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZ0NvbXBhcmF0b3IoZikge1xuICByZXR1cm4gZnVuY3Rpb24oZCwgeCkge1xuICAgIHJldHVybiBhc2NlbmRpbmcoZihkKSwgeCk7XG4gIH07XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IGJpc2VjdG9yIGZyb20gXCIuL2Jpc2VjdG9yXCI7XG5cbnZhciBhc2NlbmRpbmdCaXNlY3QgPSBiaXNlY3Rvcihhc2NlbmRpbmcpO1xuZXhwb3J0IHZhciBiaXNlY3RSaWdodCA9IGFzY2VuZGluZ0Jpc2VjdC5yaWdodDtcbmV4cG9ydCB2YXIgYmlzZWN0TGVmdCA9IGFzY2VuZGluZ0Jpc2VjdC5sZWZ0O1xuZXhwb3J0IGRlZmF1bHQgYmlzZWN0UmlnaHQ7XG4iLCJpbXBvcnQge3BhaXJ9IGZyb20gXCIuL3BhaXJzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlczAsIHZhbHVlczEsIHJlZHVjZSkge1xuICB2YXIgbjAgPSB2YWx1ZXMwLmxlbmd0aCxcbiAgICAgIG4xID0gdmFsdWVzMS5sZW5ndGgsXG4gICAgICB2YWx1ZXMgPSBuZXcgQXJyYXkobjAgKiBuMSksXG4gICAgICBpMCxcbiAgICAgIGkxLFxuICAgICAgaSxcbiAgICAgIHZhbHVlMDtcblxuICBpZiAocmVkdWNlID09IG51bGwpIHJlZHVjZSA9IHBhaXI7XG5cbiAgZm9yIChpMCA9IGkgPSAwOyBpMCA8IG4wOyArK2kwKSB7XG4gICAgZm9yICh2YWx1ZTAgPSB2YWx1ZXMwW2kwXSwgaTEgPSAwOyBpMSA8IG4xOyArK2kxLCArK2kpIHtcbiAgICAgIHZhbHVlc1tpXSA9IHJlZHVjZSh2YWx1ZTAsIHZhbHVlczFbaTFdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsdWVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWluLFxuICAgICAgbWF4O1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKG1pbiA+IHZhbHVlKSBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChtYXggPCB2YWx1ZSkgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFttaW4sIG1heF07XG59XG4iLCJ2YXIgYXJyYXkgPSBBcnJheS5wcm90b3R5cGU7XG5cbmV4cG9ydCB2YXIgc2xpY2UgPSBhcnJheS5zbGljZTtcbmV4cG9ydCB2YXIgbWFwID0gYXJyYXkubWFwO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgc3RhcnQgPSArc3RhcnQsIHN0b3AgPSArc3RvcCwgc3RlcCA9IChuID0gYXJndW1lbnRzLmxlbmd0aCkgPCAyID8gKHN0b3AgPSBzdGFydCwgc3RhcnQgPSAwLCAxKSA6IG4gPCAzID8gMSA6ICtzdGVwO1xuXG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCkpIHwgMCxcbiAgICAgIHJhbmdlID0gbmV3IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgcmFuZ2VbaV0gPSBzdGFydCArIGkgKiBzdGVwO1xuICB9XG5cbiAgcmV0dXJuIHJhbmdlO1xufVxuIiwidmFyIGUxMCA9IE1hdGguc3FydCg1MCksXG4gICAgZTUgPSBNYXRoLnNxcnQoMTApLFxuICAgIGUyID0gTWF0aC5zcXJ0KDIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHJldmVyc2UsXG4gICAgICBpID0gLTEsXG4gICAgICBuLFxuICAgICAgdGlja3MsXG4gICAgICBzdGVwO1xuXG4gIHN0b3AgPSArc3RvcCwgc3RhcnQgPSArc3RhcnQsIGNvdW50ID0gK2NvdW50O1xuICBpZiAoc3RhcnQgPT09IHN0b3AgJiYgY291bnQgPiAwKSByZXR1cm4gW3N0YXJ0XTtcbiAgaWYgKHJldmVyc2UgPSBzdG9wIDwgc3RhcnQpIG4gPSBzdGFydCwgc3RhcnQgPSBzdG9wLCBzdG9wID0gbjtcbiAgaWYgKChzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpKSA9PT0gMCB8fCAhaXNGaW5pdGUoc3RlcCkpIHJldHVybiBbXTtcblxuICBpZiAoc3RlcCA+IDApIHtcbiAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAvIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgLyBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0b3AgLSBzdGFydCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgKyBpKSAqIHN0ZXA7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0ICogc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguY2VpbChzdG9wICogc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdGFydCAtIHN0b3AgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0IC0gaSkgLyBzdGVwO1xuICB9XG5cbiAgaWYgKHJldmVyc2UpIHRpY2tzLnJldmVyc2UoKTtcblxuICByZXR1cm4gdGlja3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgcG93ZXIgPSBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXApIC8gTWF0aC5MTjEwKSxcbiAgICAgIGVycm9yID0gc3RlcCAvIE1hdGgucG93KDEwLCBwb3dlcik7XG4gIHJldHVybiBwb3dlciA+PSAwXG4gICAgICA/IChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpICogTWF0aC5wb3coMTAsIHBvd2VyKVxuICAgICAgOiAtTWF0aC5wb3coMTAsIC1wb3dlcikgLyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcDAgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgc3RlcDEgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwMCkgLyBNYXRoLkxOMTApKSxcbiAgICAgIGVycm9yID0gc3RlcDAgLyBzdGVwMTtcbiAgaWYgKGVycm9yID49IGUxMCkgc3RlcDEgKj0gMTA7XG4gIGVsc2UgaWYgKGVycm9yID49IGU1KSBzdGVwMSAqPSA1O1xuICBlbHNlIGlmIChlcnJvciA+PSBlMikgc3RlcDEgKj0gMjtcbiAgcmV0dXJuIHN0b3AgPCBzdGFydCA/IC1zdGVwMSA6IHN0ZXAxO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHJldHVybiBNYXRoLmNlaWwoTWF0aC5sb2codmFsdWVzLmxlbmd0aCkgLyBNYXRoLkxOMikgKyAxO1xufVxuIiwiaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBiaXNlY3QgZnJvbSBcIi4vYmlzZWN0XCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBleHRlbnQgZnJvbSBcIi4vZXh0ZW50XCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcbmltcG9ydCByYW5nZSBmcm9tIFwiLi9yYW5nZVwiO1xuaW1wb3J0IHt0aWNrU3RlcH0gZnJvbSBcIi4vdGlja3NcIjtcbmltcG9ydCBzdHVyZ2VzIGZyb20gXCIuL3RocmVzaG9sZC9zdHVyZ2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgdmFsdWUgPSBpZGVudGl0eSxcbiAgICAgIGRvbWFpbiA9IGV4dGVudCxcbiAgICAgIHRocmVzaG9sZCA9IHN0dXJnZXM7XG5cbiAgZnVuY3Rpb24gaGlzdG9ncmFtKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICB4LFxuICAgICAgICB2YWx1ZXMgPSBuZXcgQXJyYXkobik7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YWx1ZXNbaV0gPSB2YWx1ZShkYXRhW2ldLCBpLCBkYXRhKTtcbiAgICB9XG5cbiAgICB2YXIgeHogPSBkb21haW4odmFsdWVzKSxcbiAgICAgICAgeDAgPSB4elswXSxcbiAgICAgICAgeDEgPSB4elsxXSxcbiAgICAgICAgdHogPSB0aHJlc2hvbGQodmFsdWVzLCB4MCwgeDEpO1xuXG4gICAgLy8gQ29udmVydCBudW1iZXIgb2YgdGhyZXNob2xkcyBpbnRvIHVuaWZvcm0gdGhyZXNob2xkcy5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHopKSB7XG4gICAgICB0eiA9IHRpY2tTdGVwKHgwLCB4MSwgdHopO1xuICAgICAgdHogPSByYW5nZShNYXRoLmNlaWwoeDAgLyB0eikgKiB0eiwgeDEsIHR6KTsgLy8gZXhjbHVzaXZlXG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGFueSB0aHJlc2hvbGRzIG91dHNpZGUgdGhlIGRvbWFpbi5cbiAgICB2YXIgbSA9IHR6Lmxlbmd0aDtcbiAgICB3aGlsZSAodHpbMF0gPD0geDApIHR6LnNoaWZ0KCksIC0tbTtcbiAgICB3aGlsZSAodHpbbSAtIDFdID4geDEpIHR6LnBvcCgpLCAtLW07XG5cbiAgICB2YXIgYmlucyA9IG5ldyBBcnJheShtICsgMSksXG4gICAgICAgIGJpbjtcblxuICAgIC8vIEluaXRpYWxpemUgYmlucy5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IG07ICsraSkge1xuICAgICAgYmluID0gYmluc1tpXSA9IFtdO1xuICAgICAgYmluLngwID0gaSA+IDAgPyB0eltpIC0gMV0gOiB4MDtcbiAgICAgIGJpbi54MSA9IGkgPCBtID8gdHpbaV0gOiB4MTtcbiAgICB9XG5cbiAgICAvLyBBc3NpZ24gZGF0YSB0byBiaW5zIGJ5IHZhbHVlLCBpZ25vcmluZyBhbnkgb3V0c2lkZSB0aGUgZG9tYWluLlxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHggPSB2YWx1ZXNbaV07XG4gICAgICBpZiAoeDAgPD0geCAmJiB4IDw9IHgxKSB7XG4gICAgICAgIGJpbnNbYmlzZWN0KHR6LCB4LCAwLCBtKV0ucHVzaChkYXRhW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYmlucztcbiAgfVxuXG4gIGhpc3RvZ3JhbS52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2YWx1ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIGhpc3RvZ3JhbSkgOiB2YWx1ZTtcbiAgfTtcblxuICBoaXN0b2dyYW0uZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoW19bMF0sIF9bMV1dKSwgaGlzdG9ncmFtKSA6IGRvbWFpbjtcbiAgfTtcblxuICBoaXN0b2dyYW0udGhyZXNob2xkcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aHJlc2hvbGQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IEFycmF5LmlzQXJyYXkoXykgPyBjb25zdGFudChzbGljZS5jYWxsKF8pKSA6IGNvbnN0YW50KF8pLCBoaXN0b2dyYW0pIDogdGhyZXNob2xkO1xuICB9O1xuXG4gIHJldHVybiBoaXN0b2dyYW07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBtYXg7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF4O1xufVxuIiwiaW1wb3J0IHRyYW5zcG9zZSBmcm9tIFwiLi90cmFuc3Bvc2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0cmFuc3Bvc2UoYXJndW1lbnRzKTtcbn1cbiIsImV4cG9ydCB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eVwiO1xuXG52YXIgdG9wID0gMSxcbiAgICByaWdodCA9IDIsXG4gICAgYm90dG9tID0gMyxcbiAgICBsZWZ0ID0gNCxcbiAgICBlcHNpbG9uID0gMWUtNjtcblxuZnVuY3Rpb24gdHJhbnNsYXRlWCh4KSB7XG4gIHJldHVybiBcInRyYW5zbGF0ZShcIiArICh4ICsgMC41KSArIFwiLDApXCI7XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVkoeSkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoMCxcIiArICh5ICsgMC41KSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiBudW1iZXIoc2NhbGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gK3NjYWxlKGQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjZW50ZXIoc2NhbGUpIHtcbiAgdmFyIG9mZnNldCA9IE1hdGgubWF4KDAsIHNjYWxlLmJhbmR3aWR0aCgpIC0gMSkgLyAyOyAvLyBBZGp1c3QgZm9yIDAuNXB4IG9mZnNldC5cbiAgaWYgKHNjYWxlLnJvdW5kKCkpIG9mZnNldCA9IE1hdGgucm91bmQob2Zmc2V0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gK3NjYWxlKGQpICsgb2Zmc2V0O1xuICB9O1xufVxuXG5mdW5jdGlvbiBlbnRlcmluZygpIHtcbiAgcmV0dXJuICF0aGlzLl9fYXhpcztcbn1cblxuZnVuY3Rpb24gYXhpcyhvcmllbnQsIHNjYWxlKSB7XG4gIHZhciB0aWNrQXJndW1lbnRzID0gW10sXG4gICAgICB0aWNrVmFsdWVzID0gbnVsbCxcbiAgICAgIHRpY2tGb3JtYXQgPSBudWxsLFxuICAgICAgdGlja1NpemVJbm5lciA9IDYsXG4gICAgICB0aWNrU2l6ZU91dGVyID0gNixcbiAgICAgIHRpY2tQYWRkaW5nID0gMyxcbiAgICAgIGsgPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGxlZnQgPyAtMSA6IDEsXG4gICAgICB4ID0gb3JpZW50ID09PSBsZWZ0IHx8IG9yaWVudCA9PT0gcmlnaHQgPyBcInhcIiA6IFwieVwiLFxuICAgICAgdHJhbnNmb3JtID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBib3R0b20gPyB0cmFuc2xhdGVYIDogdHJhbnNsYXRlWTtcblxuICBmdW5jdGlvbiBheGlzKGNvbnRleHQpIHtcbiAgICB2YXIgdmFsdWVzID0gdGlja1ZhbHVlcyA9PSBudWxsID8gKHNjYWxlLnRpY2tzID8gc2NhbGUudGlja3MuYXBwbHkoc2NhbGUsIHRpY2tBcmd1bWVudHMpIDogc2NhbGUuZG9tYWluKCkpIDogdGlja1ZhbHVlcyxcbiAgICAgICAgZm9ybWF0ID0gdGlja0Zvcm1hdCA9PSBudWxsID8gKHNjYWxlLnRpY2tGb3JtYXQgPyBzY2FsZS50aWNrRm9ybWF0LmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IGlkZW50aXR5KSA6IHRpY2tGb3JtYXQsXG4gICAgICAgIHNwYWNpbmcgPSBNYXRoLm1heCh0aWNrU2l6ZUlubmVyLCAwKSArIHRpY2tQYWRkaW5nLFxuICAgICAgICByYW5nZSA9IHNjYWxlLnJhbmdlKCksXG4gICAgICAgIHJhbmdlMCA9ICtyYW5nZVswXSArIDAuNSxcbiAgICAgICAgcmFuZ2UxID0gK3JhbmdlW3JhbmdlLmxlbmd0aCAtIDFdICsgMC41LFxuICAgICAgICBwb3NpdGlvbiA9IChzY2FsZS5iYW5kd2lkdGggPyBjZW50ZXIgOiBudW1iZXIpKHNjYWxlLmNvcHkoKSksXG4gICAgICAgIHNlbGVjdGlvbiA9IGNvbnRleHQuc2VsZWN0aW9uID8gY29udGV4dC5zZWxlY3Rpb24oKSA6IGNvbnRleHQsXG4gICAgICAgIHBhdGggPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLmRvbWFpblwiKS5kYXRhKFtudWxsXSksXG4gICAgICAgIHRpY2sgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLnRpY2tcIikuZGF0YSh2YWx1ZXMsIHNjYWxlKS5vcmRlcigpLFxuICAgICAgICB0aWNrRXhpdCA9IHRpY2suZXhpdCgpLFxuICAgICAgICB0aWNrRW50ZXIgPSB0aWNrLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJ0aWNrXCIpLFxuICAgICAgICBsaW5lID0gdGljay5zZWxlY3QoXCJsaW5lXCIpLFxuICAgICAgICB0ZXh0ID0gdGljay5zZWxlY3QoXCJ0ZXh0XCIpO1xuXG4gICAgcGF0aCA9IHBhdGgubWVyZ2UocGF0aC5lbnRlcigpLmluc2VydChcInBhdGhcIiwgXCIudGlja1wiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZG9tYWluXCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiY3VycmVudENvbG9yXCIpKTtcblxuICAgIHRpY2sgPSB0aWNrLm1lcmdlKHRpY2tFbnRlcik7XG5cbiAgICBsaW5lID0gbGluZS5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKVxuICAgICAgICAuYXR0cih4ICsgXCIyXCIsIGsgKiB0aWNrU2l6ZUlubmVyKSk7XG5cbiAgICB0ZXh0ID0gdGV4dC5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJjdXJyZW50Q29sb3JcIilcbiAgICAgICAgLmF0dHIoeCwgayAqIHNwYWNpbmcpXG4gICAgICAgIC5hdHRyKFwiZHlcIiwgb3JpZW50ID09PSB0b3AgPyBcIjBlbVwiIDogb3JpZW50ID09PSBib3R0b20gPyBcIjAuNzFlbVwiIDogXCIwLjMyZW1cIikpO1xuXG4gICAgaWYgKGNvbnRleHQgIT09IHNlbGVjdGlvbikge1xuICAgICAgcGF0aCA9IHBhdGgudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRpY2sgPSB0aWNrLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICBsaW5lID0gbGluZS50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgdGV4dCA9IHRleHQudHJhbnNpdGlvbihjb250ZXh0KTtcblxuICAgICAgdGlja0V4aXQgPSB0aWNrRXhpdC50cmFuc2l0aW9uKGNvbnRleHQpXG4gICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24pXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gaXNGaW5pdGUoZCA9IHBvc2l0aW9uKGQpKSA/IHRyYW5zZm9ybShkKSA6IHRoaXMuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpOyB9KTtcblxuICAgICAgdGlja0VudGVyXG4gICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24pXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyB2YXIgcCA9IHRoaXMucGFyZW50Tm9kZS5fX2F4aXM7IHJldHVybiB0cmFuc2Zvcm0ocCAmJiBpc0Zpbml0ZShwID0gcChkKSkgPyBwIDogcG9zaXRpb24oZCkpOyB9KTtcbiAgICB9XG5cbiAgICB0aWNrRXhpdC5yZW1vdmUoKTtcblxuICAgIHBhdGhcbiAgICAgICAgLmF0dHIoXCJkXCIsIG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT0gcmlnaHRcbiAgICAgICAgICAgID8gKHRpY2tTaXplT3V0ZXIgPyBcIk1cIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCIsXCIgKyByYW5nZTAgKyBcIkgwLjVWXCIgKyByYW5nZTEgKyBcIkhcIiArIGsgKiB0aWNrU2l6ZU91dGVyIDogXCJNMC41LFwiICsgcmFuZ2UwICsgXCJWXCIgKyByYW5nZTEpXG4gICAgICAgICAgICA6ICh0aWNrU2l6ZU91dGVyID8gXCJNXCIgKyByYW5nZTAgKyBcIixcIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCJWMC41SFwiICsgcmFuZ2UxICsgXCJWXCIgKyBrICogdGlja1NpemVPdXRlciA6IFwiTVwiICsgcmFuZ2UwICsgXCIsMC41SFwiICsgcmFuZ2UxKSk7XG5cbiAgICB0aWNrXG4gICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCAxKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB0cmFuc2Zvcm0ocG9zaXRpb24oZCkpOyB9KTtcblxuICAgIGxpbmVcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcik7XG5cbiAgICB0ZXh0XG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAudGV4dChmb3JtYXQpO1xuXG4gICAgc2VsZWN0aW9uLmZpbHRlcihlbnRlcmluZylcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcImZvbnQtc2l6ZVwiLCAxMClcbiAgICAgICAgLmF0dHIoXCJmb250LWZhbWlseVwiLCBcInNhbnMtc2VyaWZcIilcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBvcmllbnQgPT09IHJpZ2h0ID8gXCJzdGFydFwiIDogb3JpZW50ID09PSBsZWZ0ID8gXCJlbmRcIiA6IFwibWlkZGxlXCIpO1xuXG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkgeyB0aGlzLl9fYXhpcyA9IHBvc2l0aW9uOyB9KTtcbiAgfVxuXG4gIGF4aXMuc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGUgPSBfLCBheGlzKSA6IHNjYWxlO1xuICB9O1xuXG4gIGF4aXMudGlja3MgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGlja0FyZ3VtZW50cyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKSwgYXhpcztcbiAgfTtcblxuICBheGlzLnRpY2tBcmd1bWVudHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0FyZ3VtZW50cyA9IF8gPT0gbnVsbCA/IFtdIDogc2xpY2UuY2FsbChfKSwgYXhpcykgOiB0aWNrQXJndW1lbnRzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrVmFsdWVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tWYWx1ZXMgPSBfID09IG51bGwgPyBudWxsIDogc2xpY2UuY2FsbChfKSwgYXhpcykgOiB0aWNrVmFsdWVzICYmIHRpY2tWYWx1ZXMuc2xpY2UoKTtcbiAgfTtcblxuICBheGlzLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0Zvcm1hdCA9IF8sIGF4aXMpIDogdGlja0Zvcm1hdDtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSB0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVJbm5lcjtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVJbm5lciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZU91dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZU91dGVyO1xuICB9O1xuXG4gIGF4aXMudGlja1BhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1BhZGRpbmcgPSArXywgYXhpcykgOiB0aWNrUGFkZGluZztcbiAgfTtcblxuICByZXR1cm4gYXhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNUb3Aoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXModG9wLCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzUmlnaHQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMocmlnaHQsIHNjYWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNCb3R0b20oc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMoYm90dG9tLCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzTGVmdChzY2FsZSkge1xuICByZXR1cm4gYXhpcyhsZWZ0LCBzY2FsZSk7XG59XG4iLCJ2YXIgbm9vcCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7fX07XG5cbmZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSB7fSwgdDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKHQgPSBhcmd1bWVudHNbaV0gKyBcIlwiKSB8fCAodCBpbiBfKSkgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHQpO1xuICAgIF9bdF0gPSBbXTtcbiAgfVxuICByZXR1cm4gbmV3IERpc3BhdGNoKF8pO1xufVxuXG5mdW5jdGlvbiBEaXNwYXRjaChfKSB7XG4gIHRoaXMuXyA9IF87XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcywgdHlwZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIGlmICh0ICYmICF0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHQpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5EaXNwYXRjaC5wcm90b3R5cGUgPSBkaXNwYXRjaC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBEaXNwYXRjaCxcbiAgb246IGZ1bmN0aW9uKHR5cGVuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBfID0gdGhpcy5fLFxuICAgICAgICBUID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiLCBfKSxcbiAgICAgICAgdCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gVC5sZW5ndGg7XG5cbiAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIC8vIE90aGVyd2lzZSwgaWYgYSBudWxsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJlbW92ZSBjYWxsYmFja3Mgb2YgdGhlIGdpdmVuIG5hbWUuXG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgY2FsbGJhY2spO1xuICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgZm9yICh2YXIgdCBpbiBfKSBjb3B5W3RdID0gX1t0XS5zbGljZSgpO1xuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goY29weSk7XG4gIH0sXG4gIGNhbGw6IGZ1bmN0aW9uKHR5cGUsIHRoYXQpIHtcbiAgICBpZiAoKG4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMikgPiAwKSBmb3IgKHZhciBhcmdzID0gbmV3IEFycmF5KG4pLCBpID0gMCwgbiwgdDsgaSA8IG47ICsraSkgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHZhciB0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXQodHlwZSwgbmFtZSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKChjID0gdHlwZVtpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgcmV0dXJuIGMudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldCh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgdHlwZVtpXSA9IG5vb3AsIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpLmNvbmNhdCh0eXBlLnNsaWNlKGkgKyAxKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XG4gIHJldHVybiB0eXBlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkaXNwYXRjaDtcbiIsImV4cG9ydCB2YXIgeGh0bWwgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzdmc6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgeGh0bWw6IHhodG1sLFxuICB4bGluazogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gIHhtbDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIlxufTtcbiIsImltcG9ydCBuYW1lc3BhY2VzIGZyb20gXCIuL25hbWVzcGFjZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgcHJlZml4ID0gbmFtZSArPSBcIlwiLCBpID0gcHJlZml4LmluZGV4T2YoXCI6XCIpO1xuICBpZiAoaSA+PSAwICYmIChwcmVmaXggPSBuYW1lLnNsaWNlKDAsIGkpKSAhPT0gXCJ4bWxuc1wiKSBuYW1lID0gbmFtZS5zbGljZShpICsgMSk7XG4gIHJldHVybiBuYW1lc3BhY2VzLmhhc093blByb3BlcnR5KHByZWZpeCkgPyB7c3BhY2U6IG5hbWVzcGFjZXNbcHJlZml4XSwgbG9jYWw6IG5hbWV9IDogbmFtZTtcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4vbmFtZXNwYWNlXCI7XG5pbXBvcnQge3hodG1sfSBmcm9tIFwiLi9uYW1lc3BhY2VzXCI7XG5cbmZ1bmN0aW9uIGNyZWF0b3JJbmhlcml0KG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBkb2N1bWVudCA9IHRoaXMub3duZXJEb2N1bWVudCxcbiAgICAgICAgdXJpID0gdGhpcy5uYW1lc3BhY2VVUkk7XG4gICAgcmV0dXJuIHVyaSA9PT0geGh0bWwgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm5hbWVzcGFjZVVSSSA9PT0geGh0bWxcbiAgICAgICAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpXG4gICAgICAgIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHVyaSwgbmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0b3JGaXhlZChmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiAoZnVsbG5hbWUubG9jYWxcbiAgICAgID8gY3JlYXRvckZpeGVkXG4gICAgICA6IGNyZWF0b3JJbmhlcml0KShmdWxsbmFtZSk7XG59XG4iLCJmdW5jdGlvbiBub25lKCkge31cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBub25lIDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJmdW5jdGlvbiBlbXB0eSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IGVtcHR5IDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih1cGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBBcnJheSh1cGRhdGUubGVuZ3RoKTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2VudGVyIHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBFbnRlck5vZGUocGFyZW50LCBkYXR1bSkge1xuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBwYXJlbnQub3duZXJEb2N1bWVudDtcbiAgdGhpcy5uYW1lc3BhY2VVUkkgPSBwYXJlbnQubmFtZXNwYWNlVVJJO1xuICB0aGlzLl9uZXh0ID0gbnVsbDtcbiAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9fZGF0YV9fID0gZGF0dW07XG59XG5cbkVudGVyTm9kZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBFbnRlck5vZGUsXG4gIGFwcGVuZENoaWxkOiBmdW5jdGlvbihjaGlsZCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgdGhpcy5fbmV4dCk7IH0sXG4gIGluc2VydEJlZm9yZTogZnVuY3Rpb24oY2hpbGQsIG5leHQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIG5leHQpOyB9LFxuICBxdWVyeVNlbGVjdG9yOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOyB9LFxuICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpOyB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7RW50ZXJOb2RlfSBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudFwiO1xuXG52YXIga2V5UHJlZml4ID0gXCIkXCI7IC8vIFByb3RlY3QgYWdhaW5zdCBrZXlzIGxpa2Ug4oCcX19wcm90b19f4oCdLlxuXG5mdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICB2YXIgaSA9IDAsXG4gICAgICBub2RlLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXG4gIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICB2YXIgaSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlQnlLZXlWYWx1ZSA9IHt9LFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAga2V5VmFsdWU7XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICAgIGlmIChrZXlWYWx1ZSBpbiBub2RlQnlLZXlWYWx1ZSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0pIHtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBhbnkgcmVtYWluaW5nIG5vZGVzIHRoYXQgd2VyZSBub3QgYm91bmQgdG8gZGF0YSB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAobm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVzW2ldXSA9PT0gbm9kZSkpIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICBkYXRhID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaiA9IC0xO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbihkKSB7IGRhdGFbKytqXSA9IGQ7IH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50KHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gdmFsdWUuY2FsbChwYXJlbnQsIHBhcmVudCAmJiBwYXJlbnQuX19kYXRhX18sIGosIHBhcmVudHMpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZztcblxuICBmdW5jdGlvbiBjb21wYXJlTm9kZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc29ydGdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc29ydGdyb3VwW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGdyb3VwLnNvcnQoY29tcGFyZU5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi4vbmFtZXNwYWNlXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdik7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuICAgIHJldHVybiBmdWxsbmFtZS5sb2NhbFxuICAgICAgICA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKVxuICAgICAgICA6IG5vZGUuZ2V0QXR0cmlidXRlKGZ1bGxuYW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KSkpKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICByZXR1cm4gKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgICB8fCAobm9kZS5kb2N1bWVudCAmJiBub2RlKSAvLyBub2RlIGlzIGEgV2luZG93XG4gICAgICB8fCBub2RlLmRlZmF1bHRWaWV3OyAvLyBub2RlIGlzIGEgRG9jdW1lbnRcbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgICAgPyBzdHlsZVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb25cbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCkobmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKVxuICAgICAgOiBzdHlsZVZhbHVlKHRoaXMubm9kZSgpLCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlVmFsdWUobm9kZSwgbmFtZSkge1xuICByZXR1cm4gbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpXG4gICAgICB8fCBkZWZhdWx0Vmlldyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG59XG4iLCJmdW5jdGlvbiBwcm9wZXJ0eVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgZWxzZSB0aGlzW25hbWVdID0gdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gcHJvcGVydHlSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gcHJvcGVydHlGdW5jdGlvblxuICAgICAgICAgIDogcHJvcGVydHlDb25zdGFudCkobmFtZSwgdmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKVtuYW1lXTtcbn1cbiIsImZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudHJpbSgpLnNwbGl0KC9efFxccysvKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0IHx8IG5ldyBDbGFzc0xpc3Qobm9kZSk7XG59XG5cbmZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gIHRoaXMuX25vZGUgPSBub2RlO1xuICB0aGlzLl9uYW1lcyA9IGNsYXNzQXJyYXkobm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKTtcbn1cblxuQ2xhc3NMaXN0LnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgdGhpcy5fbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnNwbGljZShpLCAxKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgY29udGFpbnM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjbGFzc2VkQWRkKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LmFkZChuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QucmVtb3ZlKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFRydWUobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRBZGQodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRSZW1vdmUodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24obmFtZXMsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBuYW1lcyA9IGNsYXNzQXJyYXkobmFtZSArIFwiXCIpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KHRoaXMubm9kZSgpKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWxpc3QuY29udGFpbnMobmFtZXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBjbGFzc2VkRnVuY3Rpb24gOiB2YWx1ZVxuICAgICAgPyBjbGFzc2VkVHJ1ZVxuICAgICAgOiBjbGFzc2VkRmFsc2UpKG5hbWVzLCB2YWx1ZSkpO1xufVxuIiwiZnVuY3Rpb24gdGV4dFJlbW92ZSgpIHtcbiAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyB0ZXh0RnVuY3Rpb25cbiAgICAgICAgICA6IHRleHRDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcbn1cbiIsImZ1bmN0aW9uIGh0bWxSZW1vdmUoKSB7XG4gIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gaHRtbENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gaHRtbFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gaHRtbEZ1bmN0aW9uXG4gICAgICAgICAgOiBodG1sQ29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xufVxuIiwiZnVuY3Rpb24gcmFpc2UoKSB7XG4gIGlmICh0aGlzLm5leHRTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJhaXNlKTtcbn1cbiIsImZ1bmN0aW9uIGxvd2VyKCkge1xuICBpZiAodGhpcy5wcmV2aW91c1NpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgdGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChsb3dlcik7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvclwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5mdW5jdGlvbiBjb25zdGFudE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKSxcbiAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluc2VydEJlZm9yZShjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlKCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJlbW92ZSk7XG59XG4iLCJmdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmNsb25lTm9kZShmYWxzZSksIHRoaXMubmV4dFNpYmxpbmcpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVEZWVwKCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmNsb25lTm9kZSh0cnVlKSwgdGhpcy5uZXh0U2libGluZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlZXApIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGRlZXAgPyBzZWxlY3Rpb25fY2xvbmVEZWVwIDogc2VsZWN0aW9uX2Nsb25lU2hhbGxvdyk7XG59XG4iLCJ2YXIgZmlsdGVyRXZlbnRzID0ge307XG5cbmV4cG9ydCB2YXIgZXZlbnQgPSBudWxsO1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBpZiAoIShcIm9ubW91c2VlbnRlclwiIGluIGVsZW1lbnQpKSB7XG4gICAgZmlsdGVyRXZlbnRzID0ge21vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsIG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIn07XG4gIH1cbn1cblxuZnVuY3Rpb24gZmlsdGVyQ29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgbGlzdGVuZXIgPSBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCk7XG4gIHJldHVybiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICBpZiAoIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRoaXMgJiYgIShyZWxhdGVkLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHRoaXMpICYgOCkpKSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gIHJldHVybiBmdW5jdGlvbihldmVudDEpIHtcbiAgICB2YXIgZXZlbnQwID0gZXZlbnQ7IC8vIEV2ZW50cyBjYW4gYmUgcmVlbnRyYW50IChlLmcuLCBmb2N1cykuXG4gICAgZXZlbnQgPSBldmVudDE7XG4gICAgdHJ5IHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgdGhpcy5fX2RhdGFfXywgaW5kZXgsIGdyb3VwKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZXZlbnQgPSBldmVudDA7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvblJlbW92ZSh0eXBlbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uO1xuICAgIGlmICghb24pIHJldHVybjtcbiAgICBmb3IgKHZhciBqID0gMCwgaSA9IC0xLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAobyA9IG9uW2pdLCAoIXR5cGVuYW1lLnR5cGUgfHwgby50eXBlID09PSB0eXBlbmFtZS50eXBlKSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uWysraV0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKytpKSBvbi5sZW5ndGggPSBpO1xuICAgIGVsc2UgZGVsZXRlIHRoaXMuX19vbjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25BZGQodHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gIHZhciB3cmFwID0gZmlsdGVyRXZlbnRzLmhhc093blByb3BlcnR5KHR5cGVuYW1lLnR5cGUpID8gZmlsdGVyQ29udGV4dExpc3RlbmVyIDogY29udGV4dExpc3RlbmVyO1xuICByZXR1cm4gZnVuY3Rpb24oZCwgaSwgZ3JvdXApIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb24sIG8sIGxpc3RlbmVyID0gd3JhcCh2YWx1ZSwgaSwgZ3JvdXApO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGlmICgobyA9IG9uW2pdKS50eXBlID09PSB0eXBlbmFtZS50eXBlICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyID0gbGlzdGVuZXIsIG8uY2FwdHVyZSA9IGNhcHR1cmUpO1xuICAgICAgICBvLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGVuYW1lLnR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICBvID0ge3R5cGU6IHR5cGVuYW1lLnR5cGUsIG5hbWU6IHR5cGVuYW1lLm5hbWUsIHZhbHVlOiB2YWx1ZSwgbGlzdGVuZXI6IGxpc3RlbmVyLCBjYXB0dXJlOiBjYXB0dXJlfTtcbiAgICBpZiAoIW9uKSB0aGlzLl9fb24gPSBbb107XG4gICAgZWxzZSBvbi5wdXNoKG8pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHR5cGVuYW1lcyA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiksIGksIG4gPSB0eXBlbmFtZXMubGVuZ3RoLCB0O1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBvbiA9IHRoaXMubm9kZSgpLl9fb247XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgZm9yIChpID0gMCwgbyA9IG9uW2pdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgodCA9IHR5cGVuYW1lc1tpXSkudHlwZSA9PT0gby50eXBlICYmIHQubmFtZSA9PT0gby5uYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIG8udmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb24gPSB2YWx1ZSA/IG9uQWRkIDogb25SZW1vdmU7XG4gIGlmIChjYXB0dXJlID09IG51bGwpIGNhcHR1cmUgPSBmYWxzZTtcbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgdGhpcy5lYWNoKG9uKHR5cGVuYW1lc1tpXSwgdmFsdWUsIGNhcHR1cmUpKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdXN0b21FdmVudChldmVudDEsIGxpc3RlbmVyLCB0aGF0LCBhcmdzKSB7XG4gIHZhciBldmVudDAgPSBldmVudDtcbiAgZXZlbnQxLnNvdXJjZUV2ZW50ID0gZXZlbnQ7XG4gIGV2ZW50ID0gZXZlbnQxO1xuICB0cnkge1xuICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBldmVudCA9IGV2ZW50MDtcbiAgfVxufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3dcIjtcblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChub2RlLCB0eXBlLCBwYXJhbXMpIHtcbiAgdmFyIHdpbmRvdyA9IGRlZmF1bHRWaWV3KG5vZGUpLFxuICAgICAgZXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG5cbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZXZlbnQgPSBuZXcgZXZlbnQodHlwZSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBldmVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgIGlmIChwYXJhbXMpIGV2ZW50LmluaXRFdmVudCh0eXBlLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUpLCBldmVudC5kZXRhaWwgPSBwYXJhbXMuZGV0YWlsO1xuICAgIGVsc2UgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gIH1cblxuICBub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaENvbnN0YW50KHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hGdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBkaXNwYXRjaEZ1bmN0aW9uXG4gICAgICA6IGRpc3BhdGNoQ29uc3RhbnQpKHR5cGUsIHBhcmFtcykpO1xufVxuIiwiaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdEFsbCBmcm9tIFwiLi9zZWxlY3RBbGxcIjtcbmltcG9ydCBzZWxlY3Rpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXRhIGZyb20gXCIuL2RhdGFcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW50ZXIgZnJvbSBcIi4vZW50ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fZXhpdCBmcm9tIFwiLi9leGl0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2pvaW4gZnJvbSBcIi4vam9pblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9vcmRlciBmcm9tIFwiLi9vcmRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zb3J0IGZyb20gXCIuL3NvcnRcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2FsbCBmcm9tIFwiLi9jYWxsXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGVzIGZyb20gXCIuL25vZGVzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGUgZnJvbSBcIi4vbm9kZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zaXplIGZyb20gXCIuL3NpemVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW1wdHkgZnJvbSBcIi4vZW1wdHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fZWFjaCBmcm9tIFwiLi9lYWNoXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2F0dHIgZnJvbSBcIi4vYXR0clwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9wcm9wZXJ0eSBmcm9tIFwiLi9wcm9wZXJ0eVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbGFzc2VkIGZyb20gXCIuL2NsYXNzZWRcIjtcbmltcG9ydCBzZWxlY3Rpb25fdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2h0bWwgZnJvbSBcIi4vaHRtbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9yYWlzZSBmcm9tIFwiLi9yYWlzZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9sb3dlciBmcm9tIFwiLi9sb3dlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hcHBlbmQgZnJvbSBcIi4vYXBwZW5kXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2luc2VydCBmcm9tIFwiLi9pbnNlcnRcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbG9uZSBmcm9tIFwiLi9jbG9uZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXR1bSBmcm9tIFwiLi9kYXR1bVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9vbiBmcm9tIFwiLi9vblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kaXNwYXRjaCBmcm9tIFwiLi9kaXNwYXRjaFwiO1xuXG5leHBvcnQgdmFyIHJvb3QgPSBbbnVsbF07XG5cbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3Rpb24oZ3JvdXBzLCBwYXJlbnRzKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdXSwgcm9vdCk7XG59XG5cblNlbGVjdGlvbi5wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2VsZWN0aW9uLFxuICBzZWxlY3Q6IHNlbGVjdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogc2VsZWN0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiBzZWxlY3Rpb25fZmlsdGVyLFxuICBkYXRhOiBzZWxlY3Rpb25fZGF0YSxcbiAgZW50ZXI6IHNlbGVjdGlvbl9lbnRlcixcbiAgZXhpdDogc2VsZWN0aW9uX2V4aXQsXG4gIGpvaW46IHNlbGVjdGlvbl9qb2luLFxuICBtZXJnZTogc2VsZWN0aW9uX21lcmdlLFxuICBvcmRlcjogc2VsZWN0aW9uX29yZGVyLFxuICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgY2FsbDogc2VsZWN0aW9uX2NhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fbm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gIGF0dHI6IHNlbGVjdGlvbl9hdHRyLFxuICBzdHlsZTogc2VsZWN0aW9uX3N0eWxlLFxuICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICBjbGFzc2VkOiBzZWxlY3Rpb25fY2xhc3NlZCxcbiAgdGV4dDogc2VsZWN0aW9uX3RleHQsXG4gIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICByYWlzZTogc2VsZWN0aW9uX3JhaXNlLFxuICBsb3dlcjogc2VsZWN0aW9uX2xvd2VyLFxuICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gIGluc2VydDogc2VsZWN0aW9uX2luc2VydCxcbiAgcmVtb3ZlOiBzZWxlY3Rpb25fcmVtb3ZlLFxuICBjbG9uZTogc2VsZWN0aW9uX2Nsb25lLFxuICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICBvbjogc2VsZWN0aW9uX29uLFxuICBkaXNwYXRjaDogc2VsZWN0aW9uX2Rpc3BhdGNoXG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Rpb247XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzZWxlY3RvckFsbCBmcm9tIFwiLi4vc2VsZWN0b3JBbGxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBtYXRjaGVyIGZyb20gXCIuLi9tYXRjaGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZXhpdCB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob25lbnRlciwgb251cGRhdGUsIG9uZXhpdCkge1xuICB2YXIgZW50ZXIgPSB0aGlzLmVudGVyKCksIHVwZGF0ZSA9IHRoaXMsIGV4aXQgPSB0aGlzLmV4aXQoKTtcbiAgZW50ZXIgPSB0eXBlb2Ygb25lbnRlciA9PT0gXCJmdW5jdGlvblwiID8gb25lbnRlcihlbnRlcikgOiBlbnRlci5hcHBlbmQob25lbnRlciArIFwiXCIpO1xuICBpZiAob251cGRhdGUgIT0gbnVsbCkgdXBkYXRlID0gb251cGRhdGUodXBkYXRlKTtcbiAgaWYgKG9uZXhpdCA9PSBudWxsKSBleGl0LnJlbW92ZSgpOyBlbHNlIG9uZXhpdChleGl0KTtcbiAgcmV0dXJuIGVudGVyICYmIHVwZGF0ZSA/IGVudGVyLm1lcmdlKHVwZGF0ZSkub3JkZXIoKSA6IHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rpb24pIHtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gc2VsZWN0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAtMSwgbSA9IGdyb3Vwcy5sZW5ndGg7ICsraiA8IG07KSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOykge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBpZiAobmV4dCAmJiBub2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5leHQpIF4gNCkgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgbmV4dCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzBdO1xuICBhcmd1bWVudHNbMF0gPSB0aGlzO1xuICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMgPSBuZXcgQXJyYXkodGhpcy5zaXplKCkpLCBpID0gLTE7XG4gIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgbm9kZXNbKytpXSA9IHRoaXM7IH0pO1xuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChub2RlKSByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IDA7XG4gIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgKytzaXplOyB9KTtcbiAgcmV0dXJuIHNpemU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLm5vZGUoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgIDogdGhpcy5ub2RlKCkuX19kYXRhX187XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbiwgcm9vdH0gZnJvbSBcIi4vc2VsZWN0aW9uL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgOiBuZXcgU2VsZWN0aW9uKFtbc2VsZWN0b3JdXSwgcm9vdCk7XG59XG4iLCJ2YXIgbmV4dElkID0gMDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9jYWwoKSB7XG4gIHJldHVybiBuZXcgTG9jYWw7XG59XG5cbmZ1bmN0aW9uIExvY2FsKCkge1xuICB0aGlzLl8gPSBcIkBcIiArICgrK25leHRJZCkudG9TdHJpbmcoMzYpO1xufVxuXG5Mb2NhbC5wcm90b3R5cGUgPSBsb2NhbC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBMb2NhbCxcbiAgZ2V0OiBmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIGlkID0gdGhpcy5fO1xuICAgIHdoaWxlICghKGlkIGluIG5vZGUpKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICAgIHJldHVybiBub2RlW2lkXTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihub2RlLCB2YWx1ZSkge1xuICAgIHJldHVybiBub2RlW3RoaXMuX10gPSB2YWx1ZTtcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIHRoaXMuXyBpbiBub2RlICYmIGRlbGV0ZSBub2RlW3RoaXMuX107XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuIiwiaW1wb3J0IHtldmVudH0gZnJvbSBcIi4vc2VsZWN0aW9uL29uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY3VycmVudCA9IGV2ZW50LCBzb3VyY2U7XG4gIHdoaWxlIChzb3VyY2UgPSBjdXJyZW50LnNvdXJjZUV2ZW50KSBjdXJyZW50ID0gc291cmNlO1xuICByZXR1cm4gY3VycmVudDtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgOiBuZXcgU2VsZWN0aW9uKFtzZWxlY3RvciA9PSBudWxsID8gW10gOiBzZWxlY3Rvcl0sIHJvb3QpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRHJhZ0V2ZW50KHRhcmdldCwgdHlwZSwgc3ViamVjdCwgaWQsIGFjdGl2ZSwgeCwgeSwgZHgsIGR5LCBkaXNwYXRjaCkge1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5zdWJqZWN0ID0gc3ViamVjdDtcbiAgdGhpcy5pZGVudGlmaWVyID0gaWQ7XG4gIHRoaXMuYWN0aXZlID0gYWN0aXZlO1xuICB0aGlzLnggPSB4O1xuICB0aGlzLnkgPSB5O1xuICB0aGlzLmR4ID0gZHg7XG4gIHRoaXMuZHkgPSBkeTtcbiAgdGhpcy5fID0gZGlzcGF0Y2g7XG59XG5cbkRyYWdFdmVudC5wcm90b3R5cGUub24gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHZhbHVlID0gdGhpcy5fLm9uLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHZhbHVlID09PSB0aGlzLl8gPyB0aGlzIDogdmFsdWU7XG59O1xuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge2V2ZW50LCBjdXN0b21FdmVudCwgc2VsZWN0LCBtb3VzZSwgdG91Y2h9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBub2RyYWcsIHt5ZXNkcmFnfSBmcm9tIFwiLi9ub2RyYWcuanNcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgRHJhZ0V2ZW50IGZyb20gXCIuL2V2ZW50LmpzXCI7XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcigpIHtcbiAgcmV0dXJuICFldmVudC5jdHJsS2V5ICYmICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb250YWluZXIoKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGU7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRTdWJqZWN0KGQpIHtcbiAgcmV0dXJuIGQgPT0gbnVsbCA/IHt4OiBldmVudC54LCB5OiBldmVudC55fSA6IGQ7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgZmlsdGVyID0gZGVmYXVsdEZpbHRlcixcbiAgICAgIGNvbnRhaW5lciA9IGRlZmF1bHRDb250YWluZXIsXG4gICAgICBzdWJqZWN0ID0gZGVmYXVsdFN1YmplY3QsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlLFxuICAgICAgZ2VzdHVyZXMgPSB7fSxcbiAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJkcmFnXCIsIFwiZW5kXCIpLFxuICAgICAgYWN0aXZlID0gMCxcbiAgICAgIG1vdXNlZG93bngsXG4gICAgICBtb3VzZWRvd255LFxuICAgICAgbW91c2Vtb3ZpbmcsXG4gICAgICB0b3VjaGVuZGluZyxcbiAgICAgIGNsaWNrRGlzdGFuY2UyID0gMDtcblxuICBmdW5jdGlvbiBkcmFnKHNlbGVjdGlvbikge1xuICAgIHNlbGVjdGlvblxuICAgICAgICAub24oXCJtb3VzZWRvd24uZHJhZ1wiLCBtb3VzZWRvd25lZClcbiAgICAgIC5maWx0ZXIodG91Y2hhYmxlKVxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmRyYWdcIiwgdG91Y2hzdGFydGVkKVxuICAgICAgICAub24oXCJ0b3VjaG1vdmUuZHJhZ1wiLCB0b3VjaG1vdmVkKVxuICAgICAgICAub24oXCJ0b3VjaGVuZC5kcmFnIHRvdWNoY2FuY2VsLmRyYWdcIiwgdG91Y2hlbmRlZClcbiAgICAgICAgLnN0eWxlKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91c2Vkb3duZWQoKSB7XG4gICAgaWYgKHRvdWNoZW5kaW5nIHx8ICFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciBnZXN0dXJlID0gYmVmb3Jlc3RhcnQoXCJtb3VzZVwiLCBjb250YWluZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgbW91c2UsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKCFnZXN0dXJlKSByZXR1cm47XG4gICAgc2VsZWN0KGV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLmRyYWdcIiwgbW91c2Vtb3ZlZCwgdHJ1ZSkub24oXCJtb3VzZXVwLmRyYWdcIiwgbW91c2V1cHBlZCwgdHJ1ZSk7XG4gICAgbm9kcmFnKGV2ZW50LnZpZXcpO1xuICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICBtb3VzZW1vdmluZyA9IGZhbHNlO1xuICAgIG1vdXNlZG93bnggPSBldmVudC5jbGllbnRYO1xuICAgIG1vdXNlZG93bnkgPSBldmVudC5jbGllbnRZO1xuICAgIGdlc3R1cmUoXCJzdGFydFwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlbW92ZWQoKSB7XG4gICAgbm9ldmVudCgpO1xuICAgIGlmICghbW91c2Vtb3ZpbmcpIHtcbiAgICAgIHZhciBkeCA9IGV2ZW50LmNsaWVudFggLSBtb3VzZWRvd254LCBkeSA9IGV2ZW50LmNsaWVudFkgLSBtb3VzZWRvd255O1xuICAgICAgbW91c2Vtb3ZpbmcgPSBkeCAqIGR4ICsgZHkgKiBkeSA+IGNsaWNrRGlzdGFuY2UyO1xuICAgIH1cbiAgICBnZXN0dXJlcy5tb3VzZShcImRyYWdcIik7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZXVwcGVkKCkge1xuICAgIHNlbGVjdChldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS5kcmFnIG1vdXNldXAuZHJhZ1wiLCBudWxsKTtcbiAgICB5ZXNkcmFnKGV2ZW50LnZpZXcsIG1vdXNlbW92aW5nKTtcbiAgICBub2V2ZW50KCk7XG4gICAgZ2VzdHVyZXMubW91c2UoXCJlbmRcIik7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIGMgPSBjb250YWluZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBiZWZvcmVzdGFydCh0b3VjaGVzW2ldLmlkZW50aWZpZXIsIGMsIHRvdWNoLCB0aGlzLCBhcmd1bWVudHMpKSB7XG4gICAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgICAgZ2VzdHVyZShcInN0YXJ0XCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNobW92ZWQoKSB7XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBnZXN0dXJlc1t0b3VjaGVzW2ldLmlkZW50aWZpZXJdKSB7XG4gICAgICAgIG5vZXZlbnQoKTtcbiAgICAgICAgZ2VzdHVyZShcImRyYWdcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZCgpIHtcbiAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIDUwMCk7IC8vIEdob3N0IGNsaWNrcyBhcmUgZGVsYXllZCFcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoZ2VzdHVyZSA9IGdlc3R1cmVzW3RvdWNoZXNbaV0uaWRlbnRpZmllcl0pIHtcbiAgICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgICBnZXN0dXJlKFwiZW5kXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGJlZm9yZXN0YXJ0KGlkLCBjb250YWluZXIsIHBvaW50LCB0aGF0LCBhcmdzKSB7XG4gICAgdmFyIHAgPSBwb2ludChjb250YWluZXIsIGlkKSwgcywgZHgsIGR5LFxuICAgICAgICBzdWJsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuY29weSgpO1xuXG4gICAgaWYgKCFjdXN0b21FdmVudChuZXcgRHJhZ0V2ZW50KGRyYWcsIFwiYmVmb3Jlc3RhcnRcIiwgcywgaWQsIGFjdGl2ZSwgcFswXSwgcFsxXSwgMCwgMCwgc3VibGlzdGVuZXJzKSwgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKGV2ZW50LnN1YmplY3QgPSBzID0gc3ViamVjdC5hcHBseSh0aGF0LCBhcmdzKSkgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgZHggPSBzLnggLSBwWzBdIHx8IDA7XG4gICAgICBkeSA9IHMueSAtIHBbMV0gfHwgMDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pKSByZXR1cm47XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gZ2VzdHVyZSh0eXBlKSB7XG4gICAgICB2YXIgcDAgPSBwLCBuO1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJzdGFydFwiOiBnZXN0dXJlc1tpZF0gPSBnZXN0dXJlLCBuID0gYWN0aXZlKys7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiZW5kXCI6IGRlbGV0ZSBnZXN0dXJlc1tpZF0sIC0tYWN0aXZlOyAvLyBub2JyZWFrXG4gICAgICAgIGNhc2UgXCJkcmFnXCI6IHAgPSBwb2ludChjb250YWluZXIsIGlkKSwgbiA9IGFjdGl2ZTsgYnJlYWs7XG4gICAgICB9XG4gICAgICBjdXN0b21FdmVudChuZXcgRHJhZ0V2ZW50KGRyYWcsIHR5cGUsIHMsIGlkLCBuLCBwWzBdICsgZHgsIHBbMV0gKyBkeSwgcFswXSAtIHAwWzBdLCBwWzFdIC0gcDBbMV0sIHN1Ymxpc3RlbmVycyksIHN1Ymxpc3RlbmVycy5hcHBseSwgc3VibGlzdGVuZXJzLCBbdHlwZSwgdGhhdCwgYXJnc10pO1xuICAgIH07XG4gIH1cblxuICBkcmFnLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGRyYWcpIDogZmlsdGVyO1xuICB9O1xuXG4gIGRyYWcuY29udGFpbmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnRhaW5lciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIGRyYWcpIDogY29udGFpbmVyO1xuICB9O1xuXG4gIGRyYWcuc3ViamVjdCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdWJqZWN0ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgZHJhZykgOiBzdWJqZWN0O1xuICB9O1xuXG4gIGRyYWcudG91Y2hhYmxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRvdWNoYWJsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgZHJhZykgOiB0b3VjaGFibGU7XG4gIH07XG5cbiAgZHJhZy5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBkcmFnIDogdmFsdWU7XG4gIH07XG5cbiAgZHJhZy5jbGlja0Rpc3RhbmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsaWNrRGlzdGFuY2UyID0gKF8gPSArXykgKiBfLCBkcmFnKSA6IE1hdGguc3FydChjbGlja0Rpc3RhbmNlMik7XG4gIH07XG5cbiAgcmV0dXJuIGRyYWc7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25zdHJ1Y3RvciwgZmFjdG9yeSwgcHJvdG90eXBlKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGZhY3RvcnkucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Rvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChwYXJlbnQsIGRlZmluaXRpb24pIHtcbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyZW50LnByb3RvdHlwZSk7XG4gIGZvciAodmFyIGtleSBpbiBkZWZpbml0aW9uKSBwcm90b3R5cGVba2V5XSA9IGRlZmluaXRpb25ba2V5XTtcbiAgcmV0dXJuIHByb3RvdHlwZTtcbn1cbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29sb3IoKSB7fVxuXG5leHBvcnQgdmFyIGRhcmtlciA9IDAuNztcbmV4cG9ydCB2YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG52YXIgcmVJID0gXCJcXFxccyooWystXT9cXFxcZCspXFxcXHMqXCIsXG4gICAgcmVOID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIixcbiAgICByZVAgPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KSVcXFxccypcIixcbiAgICByZUhleCA9IC9eIyhbMC05YS1mXXszLDh9KSQvLFxuICAgIHJlUmdiSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZUksIHJlSSwgcmVJXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYUludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlSSwgcmVJLCByZUksIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xcXFxcKFwiICsgW3JlTiwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsYVxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpO1xuXG52YXIgbmFtZWQgPSB7XG4gIGFsaWNlYmx1ZTogMHhmMGY4ZmYsXG4gIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXG4gIGFxdWE6IDB4MDBmZmZmLFxuICBhcXVhbWFyaW5lOiAweDdmZmZkNCxcbiAgYXp1cmU6IDB4ZjBmZmZmLFxuICBiZWlnZTogMHhmNWY1ZGMsXG4gIGJpc3F1ZTogMHhmZmU0YzQsXG4gIGJsYWNrOiAweDAwMDAwMCxcbiAgYmxhbmNoZWRhbG1vbmQ6IDB4ZmZlYmNkLFxuICBibHVlOiAweDAwMDBmZixcbiAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXG4gIGJyb3duOiAweGE1MmEyYSxcbiAgYnVybHl3b29kOiAweGRlYjg4NyxcbiAgY2FkZXRibHVlOiAweDVmOWVhMCxcbiAgY2hhcnRyZXVzZTogMHg3ZmZmMDAsXG4gIGNob2NvbGF0ZTogMHhkMjY5MWUsXG4gIGNvcmFsOiAweGZmN2Y1MCxcbiAgY29ybmZsb3dlcmJsdWU6IDB4NjQ5NWVkLFxuICBjb3Juc2lsazogMHhmZmY4ZGMsXG4gIGNyaW1zb246IDB4ZGMxNDNjLFxuICBjeWFuOiAweDAwZmZmZixcbiAgZGFya2JsdWU6IDB4MDAwMDhiLFxuICBkYXJrY3lhbjogMHgwMDhiOGIsXG4gIGRhcmtnb2xkZW5yb2Q6IDB4Yjg4NjBiLFxuICBkYXJrZ3JheTogMHhhOWE5YTksXG4gIGRhcmtncmVlbjogMHgwMDY0MDAsXG4gIGRhcmtncmV5OiAweGE5YTlhOSxcbiAgZGFya2toYWtpOiAweGJkYjc2YixcbiAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxuICBkYXJrb2xpdmVncmVlbjogMHg1NTZiMmYsXG4gIGRhcmtvcmFuZ2U6IDB4ZmY4YzAwLFxuICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcbiAgZGFya3JlZDogMHg4YjAwMDAsXG4gIGRhcmtzYWxtb246IDB4ZTk5NjdhLFxuICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxuICBkYXJrc2xhdGVibHVlOiAweDQ4M2Q4YixcbiAgZGFya3NsYXRlZ3JheTogMHgyZjRmNGYsXG4gIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxuICBkYXJrdHVycXVvaXNlOiAweDAwY2VkMSxcbiAgZGFya3Zpb2xldDogMHg5NDAwZDMsXG4gIGRlZXBwaW5rOiAweGZmMTQ5MyxcbiAgZGVlcHNreWJsdWU6IDB4MDBiZmZmLFxuICBkaW1ncmF5OiAweDY5Njk2OSxcbiAgZGltZ3JleTogMHg2OTY5NjksXG4gIGRvZGdlcmJsdWU6IDB4MWU5MGZmLFxuICBmaXJlYnJpY2s6IDB4YjIyMjIyLFxuICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXG4gIGZvcmVzdGdyZWVuOiAweDIyOGIyMixcbiAgZnVjaHNpYTogMHhmZjAwZmYsXG4gIGdhaW5zYm9ybzogMHhkY2RjZGMsXG4gIGdob3N0d2hpdGU6IDB4ZjhmOGZmLFxuICBnb2xkOiAweGZmZDcwMCxcbiAgZ29sZGVucm9kOiAweGRhYTUyMCxcbiAgZ3JheTogMHg4MDgwODAsXG4gIGdyZWVuOiAweDAwODAwMCxcbiAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxuICBncmV5OiAweDgwODA4MCxcbiAgaG9uZXlkZXc6IDB4ZjBmZmYwLFxuICBob3RwaW5rOiAweGZmNjliNCxcbiAgaW5kaWFucmVkOiAweGNkNWM1YyxcbiAgaW5kaWdvOiAweDRiMDA4MixcbiAgaXZvcnk6IDB4ZmZmZmYwLFxuICBraGFraTogMHhmMGU2OGMsXG4gIGxhdmVuZGVyOiAweGU2ZTZmYSxcbiAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXG4gIGxhd25ncmVlbjogMHg3Y2ZjMDAsXG4gIGxlbW9uY2hpZmZvbjogMHhmZmZhY2QsXG4gIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXG4gIGxpZ2h0Y29yYWw6IDB4ZjA4MDgwLFxuICBsaWdodGN5YW46IDB4ZTBmZmZmLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXG4gIGxpZ2h0Z3JheTogMHhkM2QzZDMsXG4gIGxpZ2h0Z3JlZW46IDB4OTBlZTkwLFxuICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxuICBsaWdodHBpbms6IDB4ZmZiNmMxLFxuICBsaWdodHNhbG1vbjogMHhmZmEwN2EsXG4gIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxuICBsaWdodHNreWJsdWU6IDB4ODdjZWZhLFxuICBsaWdodHNsYXRlZ3JheTogMHg3Nzg4OTksXG4gIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcbiAgbGlnaHRzdGVlbGJsdWU6IDB4YjBjNGRlLFxuICBsaWdodHllbGxvdzogMHhmZmZmZTAsXG4gIGxpbWU6IDB4MDBmZjAwLFxuICBsaW1lZ3JlZW46IDB4MzJjZDMyLFxuICBsaW5lbjogMHhmYWYwZTYsXG4gIG1hZ2VudGE6IDB4ZmYwMGZmLFxuICBtYXJvb246IDB4ODAwMDAwLFxuICBtZWRpdW1hcXVhbWFyaW5lOiAweDY2Y2RhYSxcbiAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXG4gIG1lZGl1bW9yY2hpZDogMHhiYTU1ZDMsXG4gIG1lZGl1bXB1cnBsZTogMHg5MzcwZGIsXG4gIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcbiAgbWVkaXVtc2xhdGVibHVlOiAweDdiNjhlZSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46IDB4MDBmYTlhLFxuICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxuICBtZWRpdW12aW9sZXRyZWQ6IDB4YzcxNTg1LFxuICBtaWRuaWdodGJsdWU6IDB4MTkxOTcwLFxuICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxuICBtaXN0eXJvc2U6IDB4ZmZlNGUxLFxuICBtb2NjYXNpbjogMHhmZmU0YjUsXG4gIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcbiAgbmF2eTogMHgwMDAwODAsXG4gIG9sZGxhY2U6IDB4ZmRmNWU2LFxuICBvbGl2ZTogMHg4MDgwMDAsXG4gIG9saXZlZHJhYjogMHg2YjhlMjMsXG4gIG9yYW5nZTogMHhmZmE1MDAsXG4gIG9yYW5nZXJlZDogMHhmZjQ1MDAsXG4gIG9yY2hpZDogMHhkYTcwZDYsXG4gIHBhbGVnb2xkZW5yb2Q6IDB4ZWVlOGFhLFxuICBwYWxlZ3JlZW46IDB4OThmYjk4LFxuICBwYWxldHVycXVvaXNlOiAweGFmZWVlZSxcbiAgcGFsZXZpb2xldHJlZDogMHhkYjcwOTMsXG4gIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxuICBwZWFjaHB1ZmY6IDB4ZmZkYWI5LFxuICBwZXJ1OiAweGNkODUzZixcbiAgcGluazogMHhmZmMwY2IsXG4gIHBsdW06IDB4ZGRhMGRkLFxuICBwb3dkZXJibHVlOiAweGIwZTBlNixcbiAgcHVycGxlOiAweDgwMDA4MCxcbiAgcmViZWNjYXB1cnBsZTogMHg2NjMzOTksXG4gIHJlZDogMHhmZjAwMDAsXG4gIHJvc3licm93bjogMHhiYzhmOGYsXG4gIHJveWFsYmx1ZTogMHg0MTY5ZTEsXG4gIHNhZGRsZWJyb3duOiAweDhiNDUxMyxcbiAgc2FsbW9uOiAweGZhODA3MixcbiAgc2FuZHlicm93bjogMHhmNGE0NjAsXG4gIHNlYWdyZWVuOiAweDJlOGI1NyxcbiAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxuICBzaWVubmE6IDB4YTA1MjJkLFxuICBzaWx2ZXI6IDB4YzBjMGMwLFxuICBza3libHVlOiAweDg3Y2VlYixcbiAgc2xhdGVibHVlOiAweDZhNWFjZCxcbiAgc2xhdGVncmF5OiAweDcwODA5MCxcbiAgc2xhdGVncmV5OiAweDcwODA5MCxcbiAgc25vdzogMHhmZmZhZmEsXG4gIHNwcmluZ2dyZWVuOiAweDAwZmY3ZixcbiAgc3RlZWxibHVlOiAweDQ2ODJiNCxcbiAgdGFuOiAweGQyYjQ4YyxcbiAgdGVhbDogMHgwMDgwODAsXG4gIHRoaXN0bGU6IDB4ZDhiZmQ4LFxuICB0b21hdG86IDB4ZmY2MzQ3LFxuICB0dXJxdW9pc2U6IDB4NDBlMGQwLFxuICB2aW9sZXQ6IDB4ZWU4MmVlLFxuICB3aGVhdDogMHhmNWRlYjMsXG4gIHdoaXRlOiAweGZmZmZmZixcbiAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXG4gIHllbGxvdzogMHhmZmZmMDAsXG4gIHllbGxvd2dyZWVuOiAweDlhY2QzMlxufTtcblxuZGVmaW5lKENvbG9yLCBjb2xvciwge1xuICBjb3B5OiBmdW5jdGlvbihjaGFubmVscykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyB0aGlzLmNvbnN0cnVjdG9yLCB0aGlzLCBjaGFubmVscyk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICBoZXg6IGNvbG9yX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiBjb2xvcl9mb3JtYXRIZXgsXG4gIGZvcm1hdEhzbDogY29sb3JfZm9ybWF0SHNsLFxuICBmb3JtYXRSZ2I6IGNvbG9yX2Zvcm1hdFJnYixcbiAgdG9TdHJpbmc6IGNvbG9yX2Zvcm1hdFJnYlxufSk7XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhleCgpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0SGV4KCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhzbCgpIHtcbiAgcmV0dXJuIGhzbENvbnZlcnQodGhpcykuZm9ybWF0SHNsKCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdFJnYigpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0UmdiKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9yKGZvcm1hdCkge1xuICB2YXIgbSwgbDtcbiAgZm9ybWF0ID0gKGZvcm1hdCArIFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKG0gPSByZUhleC5leGVjKGZvcm1hdCkpID8gKGwgPSBtWzFdLmxlbmd0aCwgbSA9IHBhcnNlSW50KG1bMV0sIDE2KSwgbCA9PT0gNiA/IHJnYm4obSkgLy8gI2ZmMDAwMFxuICAgICAgOiBsID09PSAzID8gbmV3IFJnYigobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpLCAxKSAvLyAjZjAwXG4gICAgICA6IGwgPT09IDggPyBuZXcgUmdiKG0gPj4gMjQgJiAweGZmLCBtID4+IDE2ICYgMHhmZiwgbSA+PiA4ICYgMHhmZiwgKG0gJiAweGZmKSAvIDB4ZmYpIC8vICNmZjAwMDAwMFxuICAgICAgOiBsID09PSA0ID8gbmV3IFJnYigobSA+PiAxMiAmIDB4ZikgfCAobSA+PiA4ICYgMHhmMCksIChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4ZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpKSAvIDB4ZmYpIC8vICNmMDAwXG4gICAgICA6IG51bGwpIC8vIGludmFsaWQgaGV4XG4gICAgICA6IChtID0gcmVSZ2JJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0sIG1bMl0sIG1bM10sIDEpIC8vIHJnYigyNTUsIDAsIDApXG4gICAgICA6IChtID0gcmVSZ2JQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIDEpIC8vIHJnYigxMDAlLCAwJSwgMCUpXG4gICAgICA6IChtID0gcmVSZ2JhSW50ZWdlci5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdLCBtWzJdLCBtWzNdLCBtWzRdKSAvLyByZ2JhKDI1NSwgMCwgMCwgMSlcbiAgICAgIDogKG0gPSByZVJnYmFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIG1bNF0pIC8vIHJnYigxMDAlLCAwJSwgMCUsIDEpXG4gICAgICA6IChtID0gcmVIc2xQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIDEpIC8vIGhzbCgxMjAsIDUwJSwgNTAlKVxuICAgICAgOiAobSA9IHJlSHNsYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgbVs0XSkgLy8gaHNsYSgxMjAsIDUwJSwgNTAlLCAxKVxuICAgICAgOiBuYW1lZC5oYXNPd25Qcm9wZXJ0eShmb3JtYXQpID8gcmdibihuYW1lZFtmb3JtYXRdKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgOiBmb3JtYXQgPT09IFwidHJhbnNwYXJlbnRcIiA/IG5ldyBSZ2IoTmFOLCBOYU4sIE5hTiwgMClcbiAgICAgIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gcmdibihuKSB7XG4gIHJldHVybiBuZXcgUmdiKG4gPj4gMTYgJiAweGZmLCBuID4+IDggJiAweGZmLCBuICYgMHhmZiwgMSk7XG59XG5cbmZ1bmN0aW9uIHJnYmEociwgZywgYiwgYSkge1xuICBpZiAoYSA8PSAwKSByID0gZyA9IGIgPSBOYU47XG4gIHJldHVybiBuZXcgUmdiKHIsIGcsIGIsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiQ29udmVydChvKSB7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IFJnYjtcbiAgbyA9IG8ucmdiKCk7XG4gIHJldHVybiBuZXcgUmdiKG8uciwgby5nLCBvLmIsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHJnYkNvbnZlcnQocikgOiBuZXcgUmdiKHIsIGcsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMuciA9ICtyO1xuICB0aGlzLmcgPSArZztcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoUmdiLCByZ2IsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgtMC41IDw9IHRoaXMuciAmJiB0aGlzLnIgPCAyNTUuNSlcbiAgICAgICAgJiYgKC0wLjUgPD0gdGhpcy5nICYmIHRoaXMuZyA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmIgJiYgdGhpcy5iIDwgMjU1LjUpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGhleDogcmdiX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiByZ2JfZm9ybWF0SGV4LFxuICBmb3JtYXRSZ2I6IHJnYl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiByZ2JfZm9ybWF0UmdiXG59KSk7XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiBcIiNcIiArIGhleCh0aGlzLnIpICsgaGV4KHRoaXMuZykgKyBoZXgodGhpcy5iKTtcbn1cblxuZnVuY3Rpb24gcmdiX2Zvcm1hdFJnYigpIHtcbiAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gIHJldHVybiAoYSA9PT0gMSA/IFwicmdiKFwiIDogXCJyZ2JhKFwiKVxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5yKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuZykgfHwgMCkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmIpIHx8IDApKVxuICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbn1cblxuZnVuY3Rpb24gaGV4KHZhbHVlKSB7XG4gIHZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHZhbHVlKSB8fCAwKSk7XG4gIHJldHVybiAodmFsdWUgPCAxNiA/IFwiMFwiIDogXCJcIikgKyB2YWx1ZS50b1N0cmluZygxNik7XG59XG5cbmZ1bmN0aW9uIGhzbGEoaCwgcywgbCwgYSkge1xuICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47XG4gIGVsc2UgaWYgKGwgPD0gMCB8fCBsID49IDEpIGggPSBzID0gTmFOO1xuICBlbHNlIGlmIChzIDw9IDApIGggPSBOYU47XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbmV3IEhzbChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBIc2w7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbztcbiAgbyA9IG8ucmdiKCk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcbiAgICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLFxuICAgICAgaCA9IE5hTixcbiAgICAgIHMgPSBtYXggLSBtaW4sXG4gICAgICBsID0gKG1heCArIG1pbikgLyAyO1xuICBpZiAocykge1xuICAgIGlmIChyID09PSBtYXgpIGggPSAoZyAtIGIpIC8gcyArIChnIDwgYikgKiA2O1xuICAgIGVsc2UgaWYgKGcgPT09IG1heCkgaCA9IChiIC0gcikgLyBzICsgMjtcbiAgICBlbHNlIGggPSAociAtIGcpIC8gcyArIDQ7XG4gICAgcyAvPSBsIDwgMC41ID8gbWF4ICsgbWluIDogMiAtIG1heCAtIG1pbjtcbiAgICBoICo9IDYwO1xuICB9IGVsc2Uge1xuICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICB9XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhzbENvbnZlcnQoaCkgOiBuZXcgSHNsKGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gSHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShIc2wsIGhzbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IHRoaXMuaCAlIDM2MCArICh0aGlzLmggPCAwKSAqIDM2MCxcbiAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxuICAgICAgICBsID0gdGhpcy5sLFxuICAgICAgICBtMiA9IGwgKyAobCA8IDAuNSA/IGwgOiAxIC0gbCkgKiBzLFxuICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBoc2wycmdiKGggPj0gMjQwID8gaCAtIDI0MCA6IGggKyAxMjAsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGgsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGggPCAxMjAgPyBoICsgMjQwIDogaCAtIDEyMCwgbTEsIG0yKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKDAgPD0gdGhpcy5zICYmIHRoaXMucyA8PSAxIHx8IGlzTmFOKHRoaXMucykpXG4gICAgICAgICYmICgwIDw9IHRoaXMubCAmJiB0aGlzLmwgPD0gMSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgZm9ybWF0SHNsOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcbiAgICByZXR1cm4gKGEgPT09IDEgPyBcImhzbChcIiA6IFwiaHNsYShcIilcbiAgICAgICAgKyAodGhpcy5oIHx8IDApICsgXCIsIFwiXG4gICAgICAgICsgKHRoaXMucyB8fCAwKSAqIDEwMCArIFwiJSwgXCJcbiAgICAgICAgKyAodGhpcy5sIHx8IDApICogMTAwICsgXCIlXCJcbiAgICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbiAgfVxufSkpO1xuXG4vKiBGcm9tIEZ2RCAxMy4zNywgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCAzICovXG5mdW5jdGlvbiBoc2wycmdiKGgsIG0xLCBtMikge1xuICByZXR1cm4gKGggPCA2MCA/IG0xICsgKG0yIC0gbTEpICogaCAvIDYwXG4gICAgICA6IGggPCAxODAgPyBtMlxuICAgICAgOiBoIDwgMjQwID8gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MFxuICAgICAgOiBtMSkgKiAyNTU7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYmFzaXModDEsIHYwLCB2MSwgdjIsIHYzKSB7XG4gIHZhciB0MiA9IHQxICogdDEsIHQzID0gdDIgKiB0MTtcbiAgcmV0dXJuICgoMSAtIDMgKiB0MSArIDMgKiB0MiAtIHQzKSAqIHYwXG4gICAgICArICg0IC0gNiAqIHQyICsgMyAqIHQzKSAqIHYxXG4gICAgICArICgxICsgMyAqIHQxICsgMyAqIHQyIC0gMyAqIHQzKSAqIHYyXG4gICAgICArIHQzICogdjMpIC8gNjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCAtIDE7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0IDw9IDAgPyAodCA9IDApIDogdCA+PSAxID8gKHQgPSAxLCBuIC0gMSkgOiBNYXRoLmZsb29yKHQgKiBuKSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaV0sXG4gICAgICAgIHYyID0gdmFsdWVzW2kgKyAxXSxcbiAgICAgICAgdjAgPSBpID4gMCA/IHZhbHVlc1tpIC0gMV0gOiAyICogdjEgLSB2MixcbiAgICAgICAgdjMgPSBpIDwgbiAtIDEgPyB2YWx1ZXNbaSArIDJdIDogMiAqIHYyIC0gdjE7XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcblxuZnVuY3Rpb24gbGluZWFyKGEsIGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIHQgKiBkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHBvbmVudGlhbChhLCBiLCB5KSB7XG4gIHJldHVybiBhID0gTWF0aC5wb3coYSwgeSksIGIgPSBNYXRoLnBvdyhiLCB5KSAtIGEsIHkgPSAxIC8geSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhhICsgdCAqIGIsIHkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHVlKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCA+IDE4MCB8fCBkIDwgLTE4MCA/IGQgLSAzNjAgKiBNYXRoLnJvdW5kKGQgLyAzNjApIDogZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdhbW1hKHkpIHtcbiAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2dhbW1hKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cbiIsImltcG9ydCB7cmdiIGFzIGNvbG9yUmdifSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBiYXNpcyBmcm9tIFwiLi9iYXNpc1wiO1xuaW1wb3J0IGJhc2lzQ2xvc2VkIGZyb20gXCIuL2Jhc2lzQ2xvc2VkXCI7XG5pbXBvcnQgbm9nYW1tYSwge2dhbW1hfSBmcm9tIFwiLi9jb2xvclwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gcmdiR2FtbWEoeSkge1xuICB2YXIgY29sb3IgPSBnYW1tYSh5KTtcblxuICBmdW5jdGlvbiByZ2Ioc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gY29sb3IoKHN0YXJ0ID0gY29sb3JSZ2Ioc3RhcnQpKS5yLCAoZW5kID0gY29sb3JSZ2IoZW5kKSkuciksXG4gICAgICAgIGcgPSBjb2xvcihzdGFydC5nLCBlbmQuZyksXG4gICAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuciA9IHIodCk7XG4gICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cblxuICByZ2IuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICByZXR1cm4gcmdiO1xufSkoMSk7XG5cbmZ1bmN0aW9uIHJnYlNwbGluZShzcGxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbG9ycykge1xuICAgIHZhciBuID0gY29sb3JzLmxlbmd0aCxcbiAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgZyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgaSwgY29sb3I7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgY29sb3IgPSBjb2xvclJnYihjb2xvcnNbaV0pO1xuICAgICAgcltpXSA9IGNvbG9yLnIgfHwgMDtcbiAgICAgIGdbaV0gPSBjb2xvci5nIHx8IDA7XG4gICAgICBiW2ldID0gY29sb3IuYiB8fCAwO1xuICAgIH1cbiAgICByID0gc3BsaW5lKHIpO1xuICAgIGcgPSBzcGxpbmUoZyk7XG4gICAgYiA9IHNwbGluZShiKTtcbiAgICBjb2xvci5vcGFjaXR5ID0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgY29sb3IuciA9IHIodCk7XG4gICAgICBjb2xvci5nID0gZyh0KTtcbiAgICAgIGNvbG9yLmIgPSBiKHQpO1xuICAgICAgcmV0dXJuIGNvbG9yICsgXCJcIjtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIHJnYkJhc2lzID0gcmdiU3BsaW5lKGJhc2lzKTtcbmV4cG9ydCB2YXIgcmdiQmFzaXNDbG9zZWQgPSByZ2JTcGxpbmUoYmFzaXNDbG9zZWQpO1xuIiwiaW1wb3J0IHtiYXNpc30gZnJvbSBcIi4vYmFzaXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoKCh0ICU9IDEpIDwgMCA/ICsrdCA6IHQpICogbiksXG4gICAgICAgIHYwID0gdmFsdWVzWyhpICsgbiAtIDEpICUgbl0sXG4gICAgICAgIHYxID0gdmFsdWVzW2kgJSBuXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbKGkgKyAxKSAlIG5dLFxuICAgICAgICB2MyA9IHZhbHVlc1soaSArIDIpICUgbl07XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIG5iID0gYiA/IGIubGVuZ3RoIDogMCxcbiAgICAgIG5hID0gYSA/IE1hdGgubWluKG5iLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgeCA9IG5ldyBBcnJheShuYSksXG4gICAgICBjID0gbmV3IEFycmF5KG5iKSxcbiAgICAgIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIHhbaV0gPSB2YWx1ZShhW2ldLCBiW2ldKTtcbiAgZm9yICg7IGkgPCBuYjsgKytpKSBjW2ldID0gYltpXTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSBjW2ldID0geFtpXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZTtcbiAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGQuc2V0VGltZShhICsgYiAqIHQpLCBkO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIGIgKiB0O1xuICB9O1xufVxuIiwiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGkgPSB7fSxcbiAgICAgIGMgPSB7fSxcbiAgICAgIGs7XG5cbiAgaWYgKGEgPT09IG51bGwgfHwgdHlwZW9mIGEgIT09IFwib2JqZWN0XCIpIGEgPSB7fTtcbiAgaWYgKGIgPT09IG51bGwgfHwgdHlwZW9mIGIgIT09IFwib2JqZWN0XCIpIGIgPSB7fTtcblxuICBmb3IgKGsgaW4gYikge1xuICAgIGlmIChrIGluIGEpIHtcbiAgICAgIGlba10gPSB2YWx1ZShhW2tdLCBiW2tdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY1trXSA9IGJba107XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGsgaW4gaSkgY1trXSA9IGlba10odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG52YXIgcmVBID0gL1stK10/KD86XFxkK1xcLj9cXGQqfFxcLj9cXGQrKSg/OltlRV1bLStdP1xcZCspPy9nLFxuICAgIHJlQiA9IG5ldyBSZWdFeHAocmVBLnNvdXJjZSwgXCJnXCIpO1xuXG5mdW5jdGlvbiB6ZXJvKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbmUoYikge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBiKHQpICsgXCJcIjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYmkgPSByZUEubGFzdEluZGV4ID0gcmVCLmxhc3RJbmRleCA9IDAsIC8vIHNjYW4gaW5kZXggZm9yIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGFtLCAvLyBjdXJyZW50IG1hdGNoIGluIGFcbiAgICAgIGJtLCAvLyBjdXJyZW50IG1hdGNoIGluIGJcbiAgICAgIGJzLCAvLyBzdHJpbmcgcHJlY2VkaW5nIGN1cnJlbnQgbnVtYmVyIGluIGIsIGlmIGFueVxuICAgICAgaSA9IC0xLCAvLyBpbmRleCBpbiBzXG4gICAgICBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuXG4gIC8vIENvZXJjZSBpbnB1dHMgdG8gc3RyaW5ncy5cbiAgYSA9IGEgKyBcIlwiLCBiID0gYiArIFwiXCI7XG5cbiAgLy8gSW50ZXJwb2xhdGUgcGFpcnMgb2YgbnVtYmVycyBpbiBhICYgYi5cbiAgd2hpbGUgKChhbSA9IHJlQS5leGVjKGEpKVxuICAgICAgJiYgKGJtID0gcmVCLmV4ZWMoYikpKSB7XG4gICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7IC8vIGEgc3RyaW5nIHByZWNlZGVzIHRoZSBuZXh0IG51bWJlciBpbiBiXG4gICAgICBicyA9IGIuc2xpY2UoYmksIGJzKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICB9XG4gICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7IC8vIG51bWJlcnMgaW4gYSAmIGIgbWF0Y2hcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBibTtcbiAgICB9IGVsc2UgeyAvLyBpbnRlcnBvbGF0ZSBub24tbWF0Y2hpbmcgbnVtYmVyc1xuICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgIHEucHVzaCh7aTogaSwgeDogbnVtYmVyKGFtLCBibSl9KTtcbiAgICB9XG4gICAgYmkgPSByZUIubGFzdEluZGV4O1xuICB9XG5cbiAgLy8gQWRkIHJlbWFpbnMgb2YgYi5cbiAgaWYgKGJpIDwgYi5sZW5ndGgpIHtcbiAgICBicyA9IGIuc2xpY2UoYmkpO1xuICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gIH1cblxuICAvLyBTcGVjaWFsIG9wdGltaXphdGlvbiBmb3Igb25seSBhIHNpbmdsZSBtYXRjaC5cbiAgLy8gT3RoZXJ3aXNlLCBpbnRlcnBvbGF0ZSBlYWNoIG9mIHRoZSBudW1iZXJzIGFuZCByZWpvaW4gdGhlIHN0cmluZy5cbiAgcmV0dXJuIHMubGVuZ3RoIDwgMiA/IChxWzBdXG4gICAgICA/IG9uZShxWzBdLngpXG4gICAgICA6IHplcm8oYikpXG4gICAgICA6IChiID0gcS5sZW5ndGgsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgICAgIH0pO1xufVxuIiwiaW1wb3J0IGRlY29tcG9zZSwge2lkZW50aXR5fSBmcm9tIFwiLi9kZWNvbXBvc2VcIjtcblxudmFyIGNzc05vZGUsXG4gICAgY3NzUm9vdCxcbiAgICBjc3NWaWV3LFxuICAgIHN2Z05vZGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNzcyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IFwibm9uZVwiKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghY3NzTm9kZSkgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIiksIGNzc1Jvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGNzc1ZpZXcgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcbiAgY3NzTm9kZS5zdHlsZS50cmFuc2Zvcm0gPSB2YWx1ZTtcbiAgdmFsdWUgPSBjc3NWaWV3LmdldENvbXB1dGVkU3R5bGUoY3NzUm9vdC5hcHBlbmRDaGlsZChjc3NOb2RlKSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKTtcbiAgY3NzUm9vdC5yZW1vdmVDaGlsZChjc3NOb2RlKTtcbiAgdmFsdWUgPSB2YWx1ZS5zbGljZSg3LCAtMSkuc3BsaXQoXCIsXCIpO1xuICByZXR1cm4gZGVjb21wb3NlKCt2YWx1ZVswXSwgK3ZhbHVlWzFdLCArdmFsdWVbMl0sICt2YWx1ZVszXSwgK3ZhbHVlWzRdLCArdmFsdWVbNV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdmcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFzdmdOb2RlKSBzdmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJnXCIpO1xuICBzdmdOb2RlLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB2YWx1ZSk7XG4gIGlmICghKHZhbHVlID0gc3ZnTm9kZS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpKSkgcmV0dXJuIGlkZW50aXR5O1xuICB2YWx1ZSA9IHZhbHVlLm1hdHJpeDtcbiAgcmV0dXJuIGRlY29tcG9zZSh2YWx1ZS5hLCB2YWx1ZS5iLCB2YWx1ZS5jLCB2YWx1ZS5kLCB2YWx1ZS5lLCB2YWx1ZS5mKTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHJnYiBmcm9tIFwiLi9yZ2JcIjtcbmltcG9ydCBhcnJheSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGRhdGUgZnJvbSBcIi4vZGF0ZVwiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcbmltcG9ydCBvYmplY3QgZnJvbSBcIi4vb2JqZWN0XCI7XG5pbXBvcnQgc3RyaW5nIGZyb20gXCIuL3N0cmluZ1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHQgPSB0eXBlb2YgYiwgYztcbiAgcmV0dXJuIGIgPT0gbnVsbCB8fCB0ID09PSBcImJvb2xlYW5cIiA/IGNvbnN0YW50KGIpXG4gICAgICA6ICh0ID09PSBcIm51bWJlclwiID8gbnVtYmVyXG4gICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIHJnYikgOiBzdHJpbmcpXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IHJnYlxuICAgICAgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVcbiAgICAgIDogQXJyYXkuaXNBcnJheShiKSA/IGFycmF5XG4gICAgICA6IHR5cGVvZiBiLnZhbHVlT2YgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYi50b1N0cmluZyAhPT0gXCJmdW5jdGlvblwiIHx8IGlzTmFOKGIpID8gb2JqZWN0XG4gICAgICA6IG51bWJlcikoYSwgYik7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKGEgKyBiICogdCk7XG4gIH07XG59XG4iLCJ2YXIgZGVncmVlcyA9IDE4MCAvIE1hdGguUEk7XG5cbmV4cG9ydCB2YXIgaWRlbnRpdHkgPSB7XG4gIHRyYW5zbGF0ZVg6IDAsXG4gIHRyYW5zbGF0ZVk6IDAsXG4gIHJvdGF0ZTogMCxcbiAgc2tld1g6IDAsXG4gIHNjYWxlWDogMSxcbiAgc2NhbGVZOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhciBzY2FsZVgsIHNjYWxlWSwgc2tld1g7XG4gIGlmIChzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYikpIGEgLz0gc2NhbGVYLCBiIC89IHNjYWxlWDtcbiAgaWYgKHNrZXdYID0gYSAqIGMgKyBiICogZCkgYyAtPSBhICogc2tld1gsIGQgLT0gYiAqIHNrZXdYO1xuICBpZiAoc2NhbGVZID0gTWF0aC5zcXJ0KGMgKiBjICsgZCAqIGQpKSBjIC89IHNjYWxlWSwgZCAvPSBzY2FsZVksIHNrZXdYIC89IHNjYWxlWTtcbiAgaWYgKGEgKiBkIDwgYiAqIGMpIGEgPSAtYSwgYiA9IC1iLCBza2V3WCA9IC1za2V3WCwgc2NhbGVYID0gLXNjYWxlWDtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2xhdGVYOiBlLFxuICAgIHRyYW5zbGF0ZVk6IGYsXG4gICAgcm90YXRlOiBNYXRoLmF0YW4yKGIsIGEpICogZGVncmVlcyxcbiAgICBza2V3WDogTWF0aC5hdGFuKHNrZXdYKSAqIGRlZ3JlZXMsXG4gICAgc2NhbGVYOiBzY2FsZVgsXG4gICAgc2NhbGVZOiBzY2FsZVlcbiAgfTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4uL251bWJlclwiO1xuaW1wb3J0IHtwYXJzZUNzcywgcGFyc2VTdmd9IGZyb20gXCIuL3BhcnNlXCI7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlLCBweENvbW1hLCBweFBhcmVuLCBkZWdQYXJlbikge1xuXG4gIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB4YiArIHB4Q29tbWEgKyB5YiArIHB4UGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZShhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBza2V3WChhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiArIHhiICsgXCIsXCIgKyB5YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgYSA9IHBhcnNlKGEpLCBiID0gcGFyc2UoYik7XG4gICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgc2tld1goYS5za2V3WCwgYi5za2V3WCwgcywgcSk7XG4gICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlU3ZnLCBcIiwgXCIsIFwiKVwiLCBcIilcIik7XG4iLCJ2YXIgcmhvID0gTWF0aC5TUVJUMixcbiAgICByaG8yID0gMixcbiAgICByaG80ID0gNCxcbiAgICBlcHNpbG9uMiA9IDFlLTEyO1xuXG5mdW5jdGlvbiBjb3NoKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSArIDEgLyB4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHNpbmgoeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpIC0gMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gdGFuaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCgyICogeCkpIC0gMSkgLyAoeCArIDEpO1xufVxuXG4vLyBwMCA9IFt1eDAsIHV5MCwgdzBdXG4vLyBwMSA9IFt1eDEsIHV5MSwgdzFdXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwMCwgcDEpIHtcbiAgdmFyIHV4MCA9IHAwWzBdLCB1eTAgPSBwMFsxXSwgdzAgPSBwMFsyXSxcbiAgICAgIHV4MSA9IHAxWzBdLCB1eTEgPSBwMVsxXSwgdzEgPSBwMVsyXSxcbiAgICAgIGR4ID0gdXgxIC0gdXgwLFxuICAgICAgZHkgPSB1eTEgLSB1eTAsXG4gICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgaSxcbiAgICAgIFM7XG5cbiAgLy8gU3BlY2lhbCBjYXNlIGZvciB1MCDiiYUgdTEuXG4gIGlmIChkMiA8IGVwc2lsb24yKSB7XG4gICAgUyA9IE1hdGgubG9nKHcxIC8gdzApIC8gcmhvO1xuICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB1eDAgKyB0ICogZHgsXG4gICAgICAgIHV5MCArIHQgKiBkeSxcbiAgICAgICAgdzAgKiBNYXRoLmV4cChyaG8gKiB0ICogUylcbiAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgLy8gR2VuZXJhbCBjYXNlLlxuICBlbHNlIHtcbiAgICB2YXIgZDEgPSBNYXRoLnNxcnQoZDIpLFxuICAgICAgICBiMCA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIHJobzQgKiBkMikgLyAoMiAqIHcwICogcmhvMiAqIGQxKSxcbiAgICAgICAgYjEgPSAodzEgKiB3MSAtIHcwICogdzAgLSByaG80ICogZDIpIC8gKDIgKiB3MSAqIHJobzIgKiBkMSksXG4gICAgICAgIHIwID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIwICogYjAgKyAxKSAtIGIwKSxcbiAgICAgICAgcjEgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjEgKiBiMSArIDEpIC0gYjEpO1xuICAgIFMgPSAocjEgLSByMCkgLyByaG87XG4gICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBzID0gdCAqIFMsXG4gICAgICAgICAgY29zaHIwID0gY29zaChyMCksXG4gICAgICAgICAgdSA9IHcwIC8gKHJobzIgKiBkMSkgKiAoY29zaHIwICogdGFuaChyaG8gKiBzICsgcjApIC0gc2luaChyMCkpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdXgwICsgdSAqIGR4LFxuICAgICAgICB1eTAgKyB1ICogZHksXG4gICAgICAgIHcwICogY29zaHIwIC8gY29zaChyaG8gKiBzICsgcjApXG4gICAgICBdO1xuICAgIH1cbiAgfVxuXG4gIGkuZHVyYXRpb24gPSBTICogMTAwMDtcblxuICByZXR1cm4gaTtcbn1cbiIsImltcG9ydCB7aHNsIGFzIGNvbG9ySHNsfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3JcIjtcblxuZnVuY3Rpb24gaHNsKGh1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHZhciBoID0gaHVlKChzdGFydCA9IGNvbG9ySHNsKHN0YXJ0KSkuaCwgKGVuZCA9IGNvbG9ySHNsKGVuZCkpLmgpLFxuICAgICAgICBzID0gY29sb3Ioc3RhcnQucywgZW5kLnMpLFxuICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgIHN0YXJ0LnMgPSBzKHQpO1xuICAgICAgc3RhcnQubCA9IGwodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBoc2woaHVlKTtcbmV4cG9ydCB2YXIgaHNsTG9uZyA9IGhzbChjb2xvcik7XG4iLCJleHBvcnQgdmFyIGRlZzJyYWQgPSBNYXRoLlBJIC8gMTgwO1xuZXhwb3J0IHZhciByYWQyZGVnID0gMTgwIC8gTWF0aC5QSTtcbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuaW1wb3J0IHtDb2xvciwgcmdiQ29udmVydCwgUmdifSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuaW1wb3J0IHtkZWcycmFkLCByYWQyZGVnfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbi8vIGh0dHBzOi8vb2JzZXJ2YWJsZWhxLmNvbS9AbWJvc3RvY2svbGFiLWFuZC1yZ2JcbnZhciBLID0gMTgsXG4gICAgWG4gPSAwLjk2NDIyLFxuICAgIFluID0gMSxcbiAgICBabiA9IDAuODI1MjEsXG4gICAgdDAgPSA0IC8gMjksXG4gICAgdDEgPSA2IC8gMjksXG4gICAgdDIgPSAzICogdDEgKiB0MSxcbiAgICB0MyA9IHQxICogdDEgKiB0MTtcblxuZnVuY3Rpb24gbGFiQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgTGFiKSByZXR1cm4gbmV3IExhYihvLmwsIG8uYSwgby5iLCBvLm9wYWNpdHkpO1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIGhjbDJsYWIobyk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSByZ2IybHJnYihvLnIpLFxuICAgICAgZyA9IHJnYjJscmdiKG8uZyksXG4gICAgICBiID0gcmdiMmxyZ2Ioby5iKSxcbiAgICAgIHkgPSB4eXoybGFiKCgwLjIyMjUwNDUgKiByICsgMC43MTY4Nzg2ICogZyArIDAuMDYwNjE2OSAqIGIpIC8gWW4pLCB4LCB6O1xuICBpZiAociA9PT0gZyAmJiBnID09PSBiKSB4ID0geiA9IHk7IGVsc2Uge1xuICAgIHggPSB4eXoybGFiKCgwLjQzNjA3NDcgKiByICsgMC4zODUwNjQ5ICogZyArIDAuMTQzMDgwNCAqIGIpIC8gWG4pO1xuICAgIHogPSB4eXoybGFiKCgwLjAxMzkzMjIgKiByICsgMC4wOTcxMDQ1ICogZyArIDAuNzE0MTczMyAqIGIpIC8gWm4pO1xuICB9XG4gIHJldHVybiBuZXcgTGFiKDExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KSwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXkobCwgb3BhY2l0eSkge1xuICByZXR1cm4gbmV3IExhYihsLCAwLCAwLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gbGFiQ29udmVydChsKSA6IG5ldyBMYWIobCwgYSwgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMuYSA9ICthO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShMYWIsIGxhYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHkgPSAodGhpcy5sICsgMTYpIC8gMTE2LFxuICAgICAgICB4ID0gaXNOYU4odGhpcy5hKSA/IHkgOiB5ICsgdGhpcy5hIC8gNTAwLFxuICAgICAgICB6ID0gaXNOYU4odGhpcy5iKSA/IHkgOiB5IC0gdGhpcy5iIC8gMjAwO1xuICAgIHggPSBYbiAqIGxhYjJ4eXooeCk7XG4gICAgeSA9IFluICogbGFiMnh5eih5KTtcbiAgICB6ID0gWm4gKiBsYWIyeHl6KHopO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgbHJnYjJyZ2IoIDMuMTMzODU2MSAqIHggLSAxLjYxNjg2NjcgKiB5IC0gMC40OTA2MTQ2ICogeiksXG4gICAgICBscmdiMnJnYigtMC45Nzg3Njg0ICogeCArIDEuOTE2MTQxNSAqIHkgKyAwLjAzMzQ1NDAgKiB6KSxcbiAgICAgIGxyZ2IycmdiKCAwLjA3MTk0NTMgKiB4IC0gMC4yMjg5OTE0ICogeSArIDEuNDA1MjQyNyAqIHopLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiB4eXoybGFiKHQpIHtcbiAgcmV0dXJuIHQgPiB0MyA/IE1hdGgucG93KHQsIDEgLyAzKSA6IHQgLyB0MiArIHQwO1xufVxuXG5mdW5jdGlvbiBsYWIyeHl6KHQpIHtcbiAgcmV0dXJuIHQgPiB0MSA/IHQgKiB0ICogdCA6IHQyICogKHQgLSB0MCk7XG59XG5cbmZ1bmN0aW9uIGxyZ2IycmdiKHgpIHtcbiAgcmV0dXJuIDI1NSAqICh4IDw9IDAuMDAzMTMwOCA/IDEyLjkyICogeCA6IDEuMDU1ICogTWF0aC5wb3coeCwgMSAvIDIuNCkgLSAwLjA1NSk7XG59XG5cbmZ1bmN0aW9uIHJnYjJscmdiKHgpIHtcbiAgcmV0dXJuICh4IC89IDI1NSkgPD0gMC4wNDA0NSA/IHggLyAxMi45MiA6IE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG59XG5cbmZ1bmN0aW9uIGhjbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIG5ldyBIY2woby5oLCBvLmMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIExhYikpIG8gPSBsYWJDb252ZXJ0KG8pO1xuICBpZiAoby5hID09PSAwICYmIG8uYiA9PT0gMCkgcmV0dXJuIG5ldyBIY2woTmFOLCAwIDwgby5sICYmIG8ubCA8IDEwMCA/IDAgOiBOYU4sIG8ubCwgby5vcGFjaXR5KTtcbiAgdmFyIGggPSBNYXRoLmF0YW4yKG8uYiwgby5hKSAqIHJhZDJkZWc7XG4gIHJldHVybiBuZXcgSGNsKGggPCAwID8gaCArIDM2MCA6IGgsIE1hdGguc3FydChvLmEgKiBvLmEgKyBvLmIgKiBvLmIpLCBvLmwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsY2gobCwgYywgaCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQobCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaGNsQ29udmVydChoKSA6IG5ldyBIY2woaCwgYywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMuYyA9ICtjO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmZ1bmN0aW9uIGhjbDJsYWIobykge1xuICBpZiAoaXNOYU4oby5oKSkgcmV0dXJuIG5ldyBMYWIoby5sLCAwLCAwLCBvLm9wYWNpdHkpO1xuICB2YXIgaCA9IG8uaCAqIGRlZzJyYWQ7XG4gIHJldHVybiBuZXcgTGFiKG8ubCwgTWF0aC5jb3MoaCkgKiBvLmMsIE1hdGguc2luKGgpICogby5jLCBvLm9wYWNpdHkpO1xufVxuXG5kZWZpbmUoSGNsLCBoY2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgKyBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCAtIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoY2wybGFiKHRoaXMpLnJnYigpO1xuICB9XG59KSk7XG4iLCJpbXBvcnQge2hjbCBhcyBjb2xvckhjbH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgY29sb3IsIHtodWV9IGZyb20gXCIuL2NvbG9yXCI7XG5cbmZ1bmN0aW9uIGhjbChodWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckhjbChzdGFydCkpLmgsIChlbmQgPSBjb2xvckhjbChlbmQpKS5oKSxcbiAgICAgICAgYyA9IGNvbG9yKHN0YXJ0LmMsIGVuZC5jKSxcbiAgICAgICAgbCA9IGNvbG9yKHN0YXJ0LmwsIGVuZC5sKSxcbiAgICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICBzdGFydC5jID0gYyh0KTtcbiAgICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgaGNsKGh1ZSk7XG5leHBvcnQgdmFyIGhjbExvbmcgPSBoY2woY29sb3IpO1xuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lLmpzXCI7XG5pbXBvcnQge0NvbG9yLCByZ2JDb252ZXJ0LCBSZ2IsIGRhcmtlciwgYnJpZ2h0ZXJ9IGZyb20gXCIuL2NvbG9yLmpzXCI7XG5pbXBvcnQge2RlZzJyYWQsIHJhZDJkZWd9IGZyb20gXCIuL21hdGguanNcIjtcblxudmFyIEEgPSAtMC4xNDg2MSxcbiAgICBCID0gKzEuNzgyNzcsXG4gICAgQyA9IC0wLjI5MjI3LFxuICAgIEQgPSAtMC45MDY0OSxcbiAgICBFID0gKzEuOTcyOTQsXG4gICAgRUQgPSBFICogRCxcbiAgICBFQiA9IEUgKiBCLFxuICAgIEJDX0RBID0gQiAqIEMgLSBEICogQTtcblxuZnVuY3Rpb24gY3ViZWhlbGl4Q29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgQ3ViZWhlbGl4KSByZXR1cm4gbmV3IEN1YmVoZWxpeChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBsID0gKEJDX0RBICogYiArIEVEICogciAtIEVCICogZykgLyAoQkNfREEgKyBFRCAtIEVCKSxcbiAgICAgIGJsID0gYiAtIGwsXG4gICAgICBrID0gKEUgKiAoZyAtIGwpIC0gQyAqIGJsKSAvIEQsXG4gICAgICBzID0gTWF0aC5zcXJ0KGsgKiBrICsgYmwgKiBibCkgLyAoRSAqIGwgKiAoMSAtIGwpKSwgLy8gTmFOIGlmIGw9MCBvciBsPTFcbiAgICAgIGggPSBzID8gTWF0aC5hdGFuMihrLCBibCkgKiByYWQyZGVnIC0gMTIwIDogTmFOO1xuICByZXR1cm4gbmV3IEN1YmVoZWxpeChoIDwgMCA/IGggKyAzNjAgOiBoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGN1YmVoZWxpeENvbnZlcnQoaCkgOiBuZXcgQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoQ3ViZWhlbGl4LCBjdWJlaGVsaXgsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSBpc05hTih0aGlzLmgpID8gMCA6ICh0aGlzLmggKyAxMjApICogZGVnMnJhZCxcbiAgICAgICAgbCA9ICt0aGlzLmwsXG4gICAgICAgIGEgPSBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyAqIGwgKiAoMSAtIGwpLFxuICAgICAgICBjb3NoID0gTWF0aC5jb3MoaCksXG4gICAgICAgIHNpbmggPSBNYXRoLnNpbihoKTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIDI1NSAqIChsICsgYSAqIChBICogY29zaCArIEIgKiBzaW5oKSksXG4gICAgICAyNTUgKiAobCArIGEgKiAoQyAqIGNvc2ggKyBEICogc2luaCkpLFxuICAgICAgMjU1ICogKGwgKyBhICogKEUgKiBjb3NoKSksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9XG59KSk7XG4iLCJpbXBvcnQge2N1YmVoZWxpeCBhcyBjb2xvckN1YmVoZWxpeH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgY29sb3IsIHtodWV9IGZyb20gXCIuL2NvbG9yXCI7XG5cbmZ1bmN0aW9uIGN1YmVoZWxpeChodWUpIHtcbiAgcmV0dXJuIChmdW5jdGlvbiBjdWJlaGVsaXhHYW1tYSh5KSB7XG4gICAgeSA9ICt5O1xuXG4gICAgZnVuY3Rpb24gY3ViZWhlbGl4KHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBoID0gaHVlKChzdGFydCA9IGNvbG9yQ3ViZWhlbGl4KHN0YXJ0KSkuaCwgKGVuZCA9IGNvbG9yQ3ViZWhlbGl4KGVuZCkpLmgpLFxuICAgICAgICAgIHMgPSBjb2xvcihzdGFydC5zLCBlbmQucyksXG4gICAgICAgICAgbCA9IGNvbG9yKHN0YXJ0LmwsIGVuZC5sKSxcbiAgICAgICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICAgIHN0YXJ0LnMgPSBzKHQpO1xuICAgICAgICBzdGFydC5sID0gbChNYXRoLnBvdyh0LCB5KSk7XG4gICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBjdWJlaGVsaXguZ2FtbWEgPSBjdWJlaGVsaXhHYW1tYTtcblxuICAgIHJldHVybiBjdWJlaGVsaXg7XG4gIH0pKDEpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjdWJlaGVsaXgoaHVlKTtcbmV4cG9ydCB2YXIgY3ViZWhlbGl4TG9uZyA9IGN1YmVoZWxpeChjb2xvcik7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnRlcnBvbGF0b3IsIG4pIHtcbiAgdmFyIHNhbXBsZXMgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSBzYW1wbGVzW2ldID0gaW50ZXJwb2xhdG9yKGkgLyAobiAtIDEpKTtcbiAgcmV0dXJuIHNhbXBsZXM7XG59XG4iLCJ2YXIgZnJhbWUgPSAwLCAvLyBpcyBhbiBhbmltYXRpb24gZnJhbWUgcGVuZGluZz9cbiAgICB0aW1lb3V0ID0gMCwgLy8gaXMgYSB0aW1lb3V0IHBlbmRpbmc/XG4gICAgaW50ZXJ2YWwgPSAwLCAvLyBhcmUgYW55IHRpbWVycyBhY3RpdmU/XG4gICAgcG9rZURlbGF5ID0gMTAwMCwgLy8gaG93IGZyZXF1ZW50bHkgd2UgY2hlY2sgZm9yIGNsb2NrIHNrZXdcbiAgICB0YXNrSGVhZCxcbiAgICB0YXNrVGFpbCxcbiAgICBjbG9ja0xhc3QgPSAwLFxuICAgIGNsb2NrTm93ID0gMCxcbiAgICBjbG9ja1NrZXcgPSAwLFxuICAgIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZSxcbiAgICBzZXRGcmFtZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xufVxuXG5mdW5jdGlvbiBjbGVhck5vdygpIHtcbiAgY2xvY2tOb3cgPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGltZXIoKSB7XG4gIHRoaXMuX2NhbGwgPVxuICB0aGlzLl90aW1lID1cbiAgdGhpcy5fbmV4dCA9IG51bGw7XG59XG5cblRpbWVyLnByb3RvdHlwZSA9IHRpbWVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRpbWVyLFxuICByZXN0YXJ0OiBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICB0aW1lID0gKHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWUpICsgKGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5KTtcbiAgICBpZiAoIXRoaXMuX25leHQgJiYgdGFza1RhaWwgIT09IHRoaXMpIHtcbiAgICAgIGlmICh0YXNrVGFpbCkgdGFza1RhaWwuX25leHQgPSB0aGlzO1xuICAgICAgZWxzZSB0YXNrSGVhZCA9IHRoaXM7XG4gICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgfVxuICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICBzbGVlcCgpO1xuICB9LFxuICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2FsbCkge1xuICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICB0aGlzLl90aW1lID0gSW5maW5pdHk7XG4gICAgICBzbGVlcCgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxuICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICB3aGlsZSAodCkge1xuICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKG51bGwsIGUpO1xuICAgIHQgPSB0Ll9uZXh0O1xuICB9XG4gIC0tZnJhbWU7XG59XG5cbmZ1bmN0aW9uIHdha2UoKSB7XG4gIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgdHJ5IHtcbiAgICB0aW1lckZsdXNoKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZnJhbWUgPSAwO1xuICAgIG5hcCgpO1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2tlKCkge1xuICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xufVxuXG5mdW5jdGlvbiBuYXAoKSB7XG4gIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgd2hpbGUgKHQxKSB7XG4gICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XG4gICAgfVxuICB9XG4gIHRhc2tUYWlsID0gdDA7XG4gIHNsZWVwKHRpbWUpO1xufVxuXG5mdW5jdGlvbiBzbGVlcCh0aW1lKSB7XG4gIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgdmFyIGRlbGF5ID0gdGltZSAtIGNsb2NrTm93OyAvLyBTdHJpY3RseSBsZXNzIHRoYW4gaWYgd2UgcmVjb21wdXRlZCBjbG9ja05vdy5cbiAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICBpZiAodGltZSA8IEluZmluaXR5KSB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWtlLCB0aW1lIC0gY2xvY2subm93KCkgLSBjbG9ja1NrZXcpO1xuICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWludGVydmFsKSBjbG9ja0xhc3QgPSBjbG9jay5ub3coKSwgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlLCBwb2tlRGVsYXkpO1xuICAgIGZyYW1lID0gMSwgc2V0RnJhbWUod2FrZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VGltZXJ9IGZyb20gXCIuL3RpbWVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgZGVsYXkgPSBkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheTtcbiAgdC5yZXN0YXJ0KGZ1bmN0aW9uKGVsYXBzZWQpIHtcbiAgICB0LnN0b3AoKTtcbiAgICBjYWxsYmFjayhlbGFwc2VkICsgZGVsYXkpO1xuICB9LCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge3RpbWVyLCB0aW1lb3V0fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGVtcHR5T24gPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiY2FuY2VsXCIsIFwiaW50ZXJydXB0XCIpO1xudmFyIGVtcHR5VHdlZW4gPSBbXTtcblxuZXhwb3J0IHZhciBDUkVBVEVEID0gMDtcbmV4cG9ydCB2YXIgU0NIRURVTEVEID0gMTtcbmV4cG9ydCB2YXIgU1RBUlRJTkcgPSAyO1xuZXhwb3J0IHZhciBTVEFSVEVEID0gMztcbmV4cG9ydCB2YXIgUlVOTklORyA9IDQ7XG5leHBvcnQgdmFyIEVORElORyA9IDU7XG5leHBvcnQgdmFyIEVOREVEID0gNjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSwgaWQsIGluZGV4LCBncm91cCwgdGltaW5nKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZXMpIG5vZGUuX190cmFuc2l0aW9uID0ge307XG4gIGVsc2UgaWYgKGlkIGluIHNjaGVkdWxlcykgcmV0dXJuO1xuICBjcmVhdGUobm9kZSwgaWQsIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIGluZGV4OiBpbmRleCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIGdyb3VwOiBncm91cCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIG9uOiBlbXB0eU9uLFxuICAgIHR3ZWVuOiBlbXB0eVR3ZWVuLFxuICAgIHRpbWU6IHRpbWluZy50aW1lLFxuICAgIGRlbGF5OiB0aW1pbmcuZGVsYXksXG4gICAgZHVyYXRpb246IHRpbWluZy5kdXJhdGlvbixcbiAgICBlYXNlOiB0aW1pbmcuZWFzZSxcbiAgICB0aW1lcjogbnVsbCxcbiAgICBzdGF0ZTogQ1JFQVRFRFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gQ1JFQVRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgc2NoZWR1bGVkXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gU1RBUlRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgcnVubmluZ1wiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlIHx8ICEoc2NoZWR1bGUgPSBzY2hlZHVsZVtpZF0pKSB0aHJvdyBuZXcgRXJyb3IoXCJ0cmFuc2l0aW9uIG5vdCBmb3VuZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGUobm9kZSwgaWQsIHNlbGYpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgdHdlZW47XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgc2VsZiB0aW1lciB3aGVuIHRoZSB0cmFuc2l0aW9uIGlzIGNyZWF0ZWQuXG4gIC8vIE5vdGUgdGhlIGFjdHVhbCBkZWxheSBpcyBub3Qga25vd24gdW50aWwgdGhlIGZpcnN0IGNhbGxiYWNrIVxuICBzY2hlZHVsZXNbaWRdID0gc2VsZjtcbiAgc2VsZi50aW1lciA9IHRpbWVyKHNjaGVkdWxlLCAwLCBzZWxmLnRpbWUpO1xuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlKGVsYXBzZWQpIHtcbiAgICBzZWxmLnN0YXRlID0gU0NIRURVTEVEO1xuICAgIHNlbGYudGltZXIucmVzdGFydChzdGFydCwgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcblxuICAgIC8vIElmIHRoZSBlbGFwc2VkIGRlbGF5IGlzIGxlc3MgdGhhbiBvdXIgZmlyc3Qgc2xlZXAsIHN0YXJ0IGltbWVkaWF0ZWx5LlxuICAgIGlmIChzZWxmLmRlbGF5IDw9IGVsYXBzZWQpIHN0YXJ0KGVsYXBzZWQgLSBzZWxmLmRlbGF5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGVsYXBzZWQpIHtcbiAgICB2YXIgaSwgaiwgbiwgbztcblxuICAgIC8vIElmIHRoZSBzdGF0ZSBpcyBub3QgU0NIRURVTEVELCB0aGVuIHdlIHByZXZpb3VzbHkgZXJyb3JlZCBvbiBzdGFydC5cbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU0NIRURVTEVEKSByZXR1cm4gc3RvcCgpO1xuXG4gICAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgICAgbyA9IHNjaGVkdWxlc1tpXTtcbiAgICAgIGlmIChvLm5hbWUgIT09IHNlbGYubmFtZSkgY29udGludWU7XG5cbiAgICAgIC8vIFdoaWxlIHRoaXMgZWxlbWVudCBhbHJlYWR5IGhhcyBhIHN0YXJ0aW5nIHRyYW5zaXRpb24gZHVyaW5nIHRoaXMgZnJhbWUsXG4gICAgICAvLyBkZWZlciBzdGFydGluZyBhbiBpbnRlcnJ1cHRpbmcgdHJhbnNpdGlvbiB1bnRpbCB0aGF0IHRyYW5zaXRpb24gaGFzIGFcbiAgICAgIC8vIGNoYW5jZSB0byB0aWNrIChhbmQgcG9zc2libHkgZW5kKTsgc2VlIGQzL2QzLXRyYW5zaXRpb24jNTQhXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gU1RBUlRFRCkgcmV0dXJuIHRpbWVvdXQoc3RhcnQpO1xuXG4gICAgICAvLyBJbnRlcnJ1cHQgdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBpZiBhbnkuXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gUlVOTklORykge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG5cbiAgICAgIC8vIENhbmNlbCBhbnkgcHJlLWVtcHRlZCB0cmFuc2l0aW9ucy5cbiAgICAgIGVsc2UgaWYgKCtpIDwgaWQpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlZmVyIHRoZSBmaXJzdCB0aWNrIHRvIGVuZCBvZiB0aGUgY3VycmVudCBmcmFtZTsgc2VlIGQzL2QzIzE1NzYuXG4gICAgLy8gTm90ZSB0aGUgdHJhbnNpdGlvbiBtYXkgYmUgY2FuY2VsZWQgYWZ0ZXIgc3RhcnQgYW5kIGJlZm9yZSB0aGUgZmlyc3QgdGljayFcbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBzY2hlZHVsZWQgYmVmb3JlIHRoZSBzdGFydCBldmVudDsgc2VlIGQzL2QzLXRyYW5zaXRpb24jMTYhXG4gICAgLy8gQXNzdW1pbmcgdGhpcyBpcyBzdWNjZXNzZnVsLCBzdWJzZXF1ZW50IGNhbGxiYWNrcyBnbyBzdHJhaWdodCB0byB0aWNrLlxuICAgIHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gU1RBUlRFRCkge1xuICAgICAgICBzZWxmLnN0YXRlID0gUlVOTklORztcbiAgICAgICAgc2VsZi50aW1lci5yZXN0YXJ0KHRpY2ssIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG4gICAgICAgIHRpY2soZWxhcHNlZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgc3RhcnQgZXZlbnQuXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgdGhlIHR3ZWVuIGFyZSBpbml0aWFsaXplZC5cbiAgICBzZWxmLnN0YXRlID0gU1RBUlRJTkc7XG4gICAgc2VsZi5vbi5jYWxsKFwic3RhcnRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNUQVJUSU5HKSByZXR1cm47IC8vIGludGVycnVwdGVkXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJURUQ7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSB0d2VlbiwgZGVsZXRpbmcgbnVsbCB0d2Vlbi5cbiAgICB0d2VlbiA9IG5ldyBBcnJheShuID0gc2VsZi50d2Vlbi5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGogPSAtMTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG8gPSBzZWxmLnR3ZWVuW2ldLnZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCkpIHtcbiAgICAgICAgdHdlZW5bKytqXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIHR3ZWVuLmxlbmd0aCA9IGogKyAxO1xuICB9XG5cbiAgZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgdmFyIHQgPSBlbGFwc2VkIDwgc2VsZi5kdXJhdGlvbiA/IHNlbGYuZWFzZS5jYWxsKG51bGwsIGVsYXBzZWQgLyBzZWxmLmR1cmF0aW9uKSA6IChzZWxmLnRpbWVyLnJlc3RhcnQoc3RvcCksIHNlbGYuc3RhdGUgPSBFTkRJTkcsIDEpLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSB0d2Vlbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgdHdlZW5baV0uY2FsbChub2RlLCB0KTtcbiAgICB9XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgZW5kIGV2ZW50LlxuICAgIGlmIChzZWxmLnN0YXRlID09PSBFTkRJTkcpIHtcbiAgICAgIHNlbGYub24uY2FsbChcImVuZFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIHNlbGYuc3RhdGUgPSBFTkRFRDtcbiAgICBzZWxmLnRpbWVyLnN0b3AoKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2lkXTtcbiAgICBmb3IgKHZhciBpIGluIHNjaGVkdWxlcykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xuICB9XG59XG4iLCJpbXBvcnQge1NUQVJUSU5HLCBFTkRJTkcsIEVOREVEfSBmcm9tIFwiLi90cmFuc2l0aW9uL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgc2NoZWR1bGUsXG4gICAgICBhY3RpdmUsXG4gICAgICBlbXB0eSA9IHRydWUsXG4gICAgICBpO1xuXG4gIGlmICghc2NoZWR1bGVzKSByZXR1cm47XG5cbiAgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcblxuICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgaWYgKChzY2hlZHVsZSA9IHNjaGVkdWxlc1tpXSkubmFtZSAhPT0gbmFtZSkgeyBlbXB0eSA9IGZhbHNlOyBjb250aW51ZTsgfVxuICAgIGFjdGl2ZSA9IHNjaGVkdWxlLnN0YXRlID4gU1RBUlRJTkcgJiYgc2NoZWR1bGUuc3RhdGUgPCBFTkRJTkc7XG4gICAgc2NoZWR1bGUuc3RhdGUgPSBFTkRFRDtcbiAgICBzY2hlZHVsZS50aW1lci5zdG9wKCk7XG4gICAgc2NoZWR1bGUub24uY2FsbChhY3RpdmUgPyBcImludGVycnVwdFwiIDogXCJjYW5jZWxcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2NoZWR1bGUuaW5kZXgsIHNjaGVkdWxlLmdyb3VwKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICB9XG5cbiAgaWYgKGVtcHR5KSBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiB0d2VlblJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gdHdlZW4wID0gdHdlZW47XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xID0gdHdlZW4xLnNsaWNlKCk7XG4gICAgICAgICAgdHdlZW4xLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0d2VlbkZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9ICh0d2VlbjAgPSB0d2Vlbikuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIHQgPSB7bmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfSwgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMVtpXSA9IHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpID09PSBuKSB0d2VlbjEucHVzaCh0KTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgbmFtZSArPSBcIlwiO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciB0d2VlbiA9IGdldCh0aGlzLm5vZGUoKSwgaWQpLnR3ZWVuO1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4ubGVuZ3RoLCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHQgPSB0d2VlbltpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gdC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsID8gdHdlZW5SZW1vdmUgOiB0d2VlbkZ1bmN0aW9uKShpZCwgbmFtZSwgdmFsdWUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR3ZWVuVmFsdWUodHJhbnNpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdHJhbnNpdGlvbi5faWQ7XG5cbiAgdHJhbnNpdGlvbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCk7XG4gICAgKHNjaGVkdWxlLnZhbHVlIHx8IChzY2hlZHVsZS52YWx1ZSA9IHt9KSlbbmFtZV0gPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBnZXQobm9kZSwgaWQpLnZhbHVlW25hbWVdO1xuICB9O1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJnYiwgaW50ZXJwb2xhdGVTdHJpbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBjO1xuICByZXR1cm4gKHR5cGVvZiBiID09PSBcIm51bWJlclwiID8gaW50ZXJwb2xhdGVOdW1iZXJcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gaW50ZXJwb2xhdGVSZ2JcbiAgICAgIDogKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKVxuICAgICAgOiBpbnRlcnBvbGF0ZVN0cmluZykoYSwgYik7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtU3ZnIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGVcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCwgdmFsdWUxID0gdmFsdWUodGhpcyksIHN0cmluZzE7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKSwgaSA9IGZ1bGxuYW1lID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHRoaXMuYXR0clR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKShmdWxsbmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcImF0dHIuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHZhbHVlID09IG51bGwgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKShmdWxsbmFtZSlcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKGZ1bGxuYW1lLCBpLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZnVuY3Rpb24gYXR0ckludGVycG9sYXRlKG5hbWUsIGkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBpKHQpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckludGVycG9sYXRlTlMoZnVsbG5hbWUsIGkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgaSh0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlKG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgKGZ1bGxuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOiBhdHRyVHdlZW4pKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtnZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxheUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGR1cmF0aW9uRnVuY3Rpb25cbiAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG9uMCwgb24xLCBzaXQgPSBzdGFydChuYW1lKSA/IGluaXQgOiBzZXQ7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKG5hbWUsIGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgID8gZ2V0KHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSlcbiAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpZCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuX190cmFuc2l0aW9uKSBpZiAoK2kgIT09IGlkKSByZXR1cm47XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMub24oXCJlbmQucmVtb3ZlXCIsIHJlbW92ZUZ1bmN0aW9uKHRoaXMuX2lkKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtQ3NzIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c3R5bGV9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2VlblwiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlXCI7XG5cbmZ1bmN0aW9uIHN0eWxlTnVsbChuYW1lLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHN0cmluZzEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCBzdHJpbmcxMCA9IHN0cmluZzEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpLFxuICAgICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHN0cmluZzEgPSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVNYXliZVJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgb24wLCBvbjEsIGxpc3RlbmVyMCwga2V5ID0gXCJzdHlsZS5cIiArIG5hbWUsIGV2ZW50ID0gXCJlbmQuXCIgKyBrZXksIHJlbW92ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub24sXG4gICAgICAgIGxpc3RlbmVyID0gc2NoZWR1bGUudmFsdWVba2V5XSA9PSBudWxsID8gcmVtb3ZlIHx8IChyZW1vdmUgPSBzdHlsZVJlbW92ZShuYW1lKSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjAgfHwgbGlzdGVuZXIwICE9PSBsaXN0ZW5lcikgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihldmVudCwgbGlzdGVuZXIwID0gbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZU51bGwobmFtZSwgaSkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZShuYW1lKSlcbiAgICA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpKVxuICAgICAgLmVhY2goc3R5bGVNYXliZVJlbW92ZSh0aGlzLl9pZCwgbmFtZSkpXG4gICAgOiB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBudWxsKTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkodCksIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIHQsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0ID0gKGkwID0gaSkgJiYgc3R5bGVJbnRlcnBvbGF0ZShuYW1lLCBpLCBwcmlvcml0eSk7XG4gICAgcmV0dXJuIHQ7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciBrZXkgPSBcInN0eWxlLlwiICsgKG5hbWUgKz0gXCJcIik7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSk7XG59XG4iLCJpbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuXCI7XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWUxID09IG51bGwgPyBcIlwiIDogdmFsdWUxO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy50d2VlbihcInRleHRcIiwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gdGV4dEZ1bmN0aW9uKHR3ZWVuVmFsdWUodGhpcywgXCJ0ZXh0XCIsIHZhbHVlKSlcbiAgICAgIDogdGV4dENvbnN0YW50KHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0ciBmcm9tIFwiLi9hdHRyXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyVHdlZW4gZnJvbSBcIi4vYXR0clR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kZWxheSBmcm9tIFwiLi9kZWxheVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZHVyYXRpb24gZnJvbSBcIi4vZHVyYXRpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2Vhc2UgZnJvbSBcIi4vZWFzZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlclwiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHRcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW5cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2VuZCBmcm9tIFwiLi9lbmRcIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHRyYW5zaXRpb25fZmlsdGVyLFxuICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiB0cmFuc2l0aW9uX3NlbGVjdGlvbixcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbl90cmFuc2l0aW9uLFxuICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9wcm90b3R5cGUuZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9wcm90b3R5cGUuZWFjaCxcbiAgb246IHRyYW5zaXRpb25fb24sXG4gIGF0dHI6IHRyYW5zaXRpb25fYXR0cixcbiAgYXR0clR3ZWVuOiB0cmFuc2l0aW9uX2F0dHJUd2VlbixcbiAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gIHN0eWxlVHdlZW46IHRyYW5zaXRpb25fc3R5bGVUd2VlbixcbiAgdGV4dDogdHJhbnNpdGlvbl90ZXh0LFxuICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICB0d2VlbjogdHJhbnNpdGlvbl90d2VlbixcbiAgZGVsYXk6IHRyYW5zaXRpb25fZGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICBlYXNlOiB0cmFuc2l0aW9uX2Vhc2UsXG4gIGVuZDogdHJhbnNpdGlvbl9lbmRcbn07XG4iLCJpbXBvcnQge3NlbGVjdG9yfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgICBzY2hlZHVsZShzdWJncm91cFtpXSwgbmFtZSwgaWQsIGksIHN1Ymdyb3VwLCBnZXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdG9yQWxsfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkKSwgayA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGsgPCBsOyArK2spIHtcbiAgICAgICAgICBpZiAoY2hpbGQgPSBjaGlsZHJlbltrXSkge1xuICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7bWF0Y2hlcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0cmFuc2l0aW9uKSB7XG4gIGlmICh0cmFuc2l0aW9uLl9pZCAhPT0gdGhpcy5faWQpIHRocm93IG5ldyBFcnJvcjtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gdHJhbnNpdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQwID0gdGhpcy5faWQsXG4gICAgICBpZDEgPSBuZXdJZCgpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHZhciBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkMCk7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkMSwgaSwgZ3JvdXAsIHtcbiAgICAgICAgICB0aW1lOiBpbmhlcml0LnRpbWUgKyBpbmhlcml0LmRlbGF5ICsgaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBlYXNlOiBpbmhlcml0LmVhc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQxKTtcbn1cbiIsImltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG9uMCwgb24xLCB0aGF0ID0gdGhpcywgaWQgPSB0aGF0Ll9pZCwgc2l6ZSA9IHRoYXQuc2l6ZSgpO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIGNhbmNlbCA9IHt2YWx1ZTogcmVqZWN0fSxcbiAgICAgICAgZW5kID0ge3ZhbHVlOiBmdW5jdGlvbigpIHsgaWYgKC0tc2l6ZSA9PT0gMCkgcmVzb2x2ZSgpOyB9fTtcblxuICAgIHRoYXQuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgICAgb24gPSBzY2hlZHVsZS5vbjtcblxuICAgICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICAgIGlmIChvbiAhPT0gb24wKSB7XG4gICAgICAgIG9uMSA9IChvbjAgPSBvbikuY29weSgpO1xuICAgICAgICBvbjEuXy5jYW5jZWwucHVzaChjYW5jZWwpO1xuICAgICAgICBvbjEuXy5pbnRlcnJ1cHQucHVzaChjYW5jZWwpO1xuICAgICAgICBvbjEuXy5lbmQucHVzaChlbmQpO1xuICAgICAgfVxuXG4gICAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCJ2YXIgZXhwb25lbnQgPSAzO1xuXG5leHBvcnQgdmFyIHBvbHlJbiA9IChmdW5jdGlvbiBjdXN0b20oZSkge1xuICBlID0gK2U7XG5cbiAgZnVuY3Rpb24gcG9seUluKHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3codCwgZSk7XG4gIH1cblxuICBwb2x5SW4uZXhwb25lbnQgPSBjdXN0b207XG5cbiAgcmV0dXJuIHBvbHlJbjtcbn0pKGV4cG9uZW50KTtcblxuZXhwb3J0IHZhciBwb2x5T3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShlKSB7XG4gIGUgPSArZTtcblxuICBmdW5jdGlvbiBwb2x5T3V0KHQpIHtcbiAgICByZXR1cm4gMSAtIE1hdGgucG93KDEgLSB0LCBlKTtcbiAgfVxuXG4gIHBvbHlPdXQuZXhwb25lbnQgPSBjdXN0b207XG5cbiAgcmV0dXJuIHBvbHlPdXQ7XG59KShleHBvbmVudCk7XG5cbmV4cG9ydCB2YXIgcG9seUluT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShlKSB7XG4gIGUgPSArZTtcblxuICBmdW5jdGlvbiBwb2x5SW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IE1hdGgucG93KHQsIGUpIDogMiAtIE1hdGgucG93KDIgLSB0LCBlKSkgLyAyO1xuICB9XG5cbiAgcG9seUluT3V0LmV4cG9uZW50ID0gY3VzdG9tO1xuXG4gIHJldHVybiBwb2x5SW5PdXQ7XG59KShleHBvbmVudCk7XG4iLCJ2YXIgcGkgPSBNYXRoLlBJLFxuICAgIGhhbGZQaSA9IHBpIC8gMjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNpbkluKHQpIHtcbiAgcmV0dXJuIDEgLSBNYXRoLmNvcyh0ICogaGFsZlBpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpbk91dCh0KSB7XG4gIHJldHVybiBNYXRoLnNpbih0ICogaGFsZlBpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpbkluT3V0KHQpIHtcbiAgcmV0dXJuICgxIC0gTWF0aC5jb3MocGkgKiB0KSkgLyAyO1xufVxuIiwidmFyIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG5cbmV4cG9ydCB2YXIgYmFja0luID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gIHMgPSArcztcblxuICBmdW5jdGlvbiBiYWNrSW4odCkge1xuICAgIHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xuICB9XG5cbiAgYmFja0luLm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICByZXR1cm4gYmFja0luO1xufSkob3ZlcnNob290KTtcblxuZXhwb3J0IHZhciBiYWNrT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gIHMgPSArcztcblxuICBmdW5jdGlvbiBiYWNrT3V0KHQpIHtcbiAgICByZXR1cm4gLS10ICogdCAqICgocyArIDEpICogdCArIHMpICsgMTtcbiAgfVxuXG4gIGJhY2tPdXQub3ZlcnNob290ID0gY3VzdG9tO1xuXG4gIHJldHVybiBiYWNrT3V0O1xufSkob3ZlcnNob290KTtcblxuZXhwb3J0IHZhciBiYWNrSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKHMpIHtcbiAgcyA9ICtzO1xuXG4gIGZ1bmN0aW9uIGJhY2tJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8IDEgPyB0ICogdCAqICgocyArIDEpICogdCAtIHMpIDogKHQgLT0gMikgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAyKSAvIDI7XG4gIH1cblxuICBiYWNrSW5PdXQub3ZlcnNob290ID0gY3VzdG9tO1xuXG4gIHJldHVybiBiYWNrSW5PdXQ7XG59KShvdmVyc2hvb3QpO1xuIiwidmFyIHRhdSA9IDIgKiBNYXRoLlBJLFxuICAgIGFtcGxpdHVkZSA9IDEsXG4gICAgcGVyaW9kID0gMC4zO1xuXG5leHBvcnQgdmFyIGVsYXN0aWNJbiA9IChmdW5jdGlvbiBjdXN0b20oYSwgcCkge1xuICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICBmdW5jdGlvbiBlbGFzdGljSW4odCkge1xuICAgIHJldHVybiBhICogTWF0aC5wb3coMiwgMTAgKiAtLXQpICogTWF0aC5zaW4oKHMgLSB0KSAvIHApO1xuICB9XG5cbiAgZWxhc3RpY0luLmFtcGxpdHVkZSA9IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGN1c3RvbShhLCBwICogdGF1KTsgfTtcbiAgZWxhc3RpY0luLnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY0luO1xufSkoYW1wbGl0dWRlLCBwZXJpb2QpO1xuXG5leHBvcnQgdmFyIGVsYXN0aWNPdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY091dCh0KSB7XG4gICAgcmV0dXJuIDEgLSBhICogTWF0aC5wb3coMiwgLTEwICogKHQgPSArdCkpICogTWF0aC5zaW4oKHQgKyBzKSAvIHApO1xuICB9XG5cbiAgZWxhc3RpY091dC5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNPdXQucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xuXG4gIHJldHVybiBlbGFzdGljT3V0O1xufSkoYW1wbGl0dWRlLCBwZXJpb2QpO1xuXG5leHBvcnQgdmFyIGVsYXN0aWNJbk91dCA9IChmdW5jdGlvbiBjdXN0b20oYSwgcCkge1xuICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICBmdW5jdGlvbiBlbGFzdGljSW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgPSB0ICogMiAtIDEpIDwgMFxuICAgICAgICA/IGEgKiBNYXRoLnBvdygyLCAxMCAqIHQpICogTWF0aC5zaW4oKHMgLSB0KSAvIHApXG4gICAgICAgIDogMiAtIGEgKiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKChzICsgdCkgLyBwKSkgLyAyO1xuICB9XG5cbiAgZWxhc3RpY0luT3V0LmFtcGxpdHVkZSA9IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGN1c3RvbShhLCBwICogdGF1KTsgfTtcbiAgZWxhc3RpY0luT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY0luT3V0O1xufSkoYW1wbGl0dWRlLCBwZXJpb2QpO1xuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4uL3RyYW5zaXRpb24vaW5kZXhcIjtcbmltcG9ydCBzY2hlZHVsZSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9zY2hlZHVsZVwiO1xuaW1wb3J0IHtlYXNlQ3ViaWNJbk91dH0gZnJvbSBcImQzLWVhc2VcIjtcbmltcG9ydCB7bm93fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGRlZmF1bHRUaW1pbmcgPSB7XG4gIHRpbWU6IG51bGwsIC8vIFNldCBvbiB1c2UuXG4gIGRlbGF5OiAwLFxuICBkdXJhdGlvbjogMjUwLFxuICBlYXNlOiBlYXNlQ3ViaWNJbk91dFxufTtcblxuZnVuY3Rpb24gaW5oZXJpdChub2RlLCBpZCkge1xuICB2YXIgdGltaW5nO1xuICB3aGlsZSAoISh0aW1pbmcgPSBub2RlLl9fdHJhbnNpdGlvbikgfHwgISh0aW1pbmcgPSB0aW1pbmdbaWRdKSkge1xuICAgIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdFRpbWluZy50aW1lID0gbm93KCksIGRlZmF1bHRUaW1pbmc7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aW1pbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGlkLFxuICAgICAgdGltaW5nO1xuXG4gIGlmIChuYW1lIGluc3RhbmNlb2YgVHJhbnNpdGlvbikge1xuICAgIGlkID0gbmFtZS5faWQsIG5hbWUgPSBuYW1lLl9uYW1lO1xuICB9IGVsc2Uge1xuICAgIGlkID0gbmV3SWQoKSwgKHRpbWluZyA9IGRlZmF1bHRUaW1pbmcpLnRpbWUgPSBub3coKSwgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkLCBpLCBncm91cCwgdGltaW5nIHx8IGluaGVyaXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY3ViaWNJbih0KSB7XG4gIHJldHVybiB0ICogdCAqIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY091dCh0KSB7XG4gIHJldHVybiAtLXQgKiB0ICogdCArIDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY0luT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgKiB0IDogKHQgLT0gMikgKiB0ICogdCArIDIpIC8gMjtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ludGVycnVwdCBmcm9tIFwiLi9pbnRlcnJ1cHRcIjtcbmltcG9ydCBzZWxlY3Rpb25fdHJhbnNpdGlvbiBmcm9tIFwiLi90cmFuc2l0aW9uXCI7XG5cbnNlbGVjdGlvbi5wcm90b3R5cGUuaW50ZXJydXB0ID0gc2VsZWN0aW9uX2ludGVycnVwdDtcbnNlbGVjdGlvbi5wcm90b3R5cGUudHJhbnNpdGlvbiA9IHNlbGVjdGlvbl90cmFuc2l0aW9uO1xuIiwiaW1wb3J0IGludGVycnVwdCBmcm9tIFwiLi4vaW50ZXJydXB0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICBpbnRlcnJ1cHQodGhpcywgbmFtZSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge2RyYWdEaXNhYmxlLCBkcmFnRW5hYmxlfSBmcm9tIFwiZDMtZHJhZ1wiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge2N1c3RvbUV2ZW50LCBldmVudCwgdG91Y2gsIG1vdXNlLCBzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7aW50ZXJydXB0fSBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgQnJ1c2hFdmVudCBmcm9tIFwiLi9ldmVudC5qc1wiO1xuaW1wb3J0IG5vZXZlbnQsIHtub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5cbnZhciBNT0RFX0RSQUcgPSB7bmFtZTogXCJkcmFnXCJ9LFxuICAgIE1PREVfU1BBQ0UgPSB7bmFtZTogXCJzcGFjZVwifSxcbiAgICBNT0RFX0hBTkRMRSA9IHtuYW1lOiBcImhhbmRsZVwifSxcbiAgICBNT0RFX0NFTlRFUiA9IHtuYW1lOiBcImNlbnRlclwifTtcblxuZnVuY3Rpb24gbnVtYmVyMShlKSB7XG4gIHJldHVybiBbK2VbMF0sICtlWzFdXTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyMihlKSB7XG4gIHJldHVybiBbbnVtYmVyMShlWzBdKSwgbnVtYmVyMShlWzFdKV07XG59XG5cbmZ1bmN0aW9uIHRvdWNoZXIoaWRlbnRpZmllcikge1xuICByZXR1cm4gZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRvdWNoKHRhcmdldCwgZXZlbnQudG91Y2hlcywgaWRlbnRpZmllcik7XG4gIH07XG59XG5cbnZhciBYID0ge1xuICBuYW1lOiBcInhcIixcbiAgaGFuZGxlczogW1wid1wiLCBcImVcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeCwgZSkgeyByZXR1cm4geCA9PSBudWxsID8gbnVsbCA6IFtbK3hbMF0sIGVbMF1bMV1dLCBbK3hbMV0sIGVbMV1bMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzBdLCB4eVsxXVswXV07IH1cbn07XG5cbnZhciBZID0ge1xuICBuYW1lOiBcInlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcInNcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeSwgZSkgeyByZXR1cm4geSA9PSBudWxsID8gbnVsbCA6IFtbZVswXVswXSwgK3lbMF1dLCBbZVsxXVswXSwgK3lbMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzFdLCB4eVsxXVsxXV07IH1cbn07XG5cbnZhciBYWSA9IHtcbiAgbmFtZTogXCJ4eVwiLFxuICBoYW5kbGVzOiBbXCJuXCIsIFwid1wiLCBcImVcIiwgXCJzXCIsIFwibndcIiwgXCJuZVwiLCBcInN3XCIsIFwic2VcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ID09IG51bGwgPyBudWxsIDogbnVtYmVyMih4eSk7IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5OyB9XG59O1xuXG52YXIgY3Vyc29ycyA9IHtcbiAgb3ZlcmxheTogXCJjcm9zc2hhaXJcIixcbiAgc2VsZWN0aW9uOiBcIm1vdmVcIixcbiAgbjogXCJucy1yZXNpemVcIixcbiAgZTogXCJldy1yZXNpemVcIixcbiAgczogXCJucy1yZXNpemVcIixcbiAgdzogXCJldy1yZXNpemVcIixcbiAgbnc6IFwibndzZS1yZXNpemVcIixcbiAgbmU6IFwibmVzdy1yZXNpemVcIixcbiAgc2U6IFwibndzZS1yZXNpemVcIixcbiAgc3c6IFwibmVzdy1yZXNpemVcIlxufTtcblxudmFyIGZsaXBYID0ge1xuICBlOiBcIndcIixcbiAgdzogXCJlXCIsXG4gIG53OiBcIm5lXCIsXG4gIG5lOiBcIm53XCIsXG4gIHNlOiBcInN3XCIsXG4gIHN3OiBcInNlXCJcbn07XG5cbnZhciBmbGlwWSA9IHtcbiAgbjogXCJzXCIsXG4gIHM6IFwiblwiLFxuICBudzogXCJzd1wiLFxuICBuZTogXCJzZVwiLFxuICBzZTogXCJuZVwiLFxuICBzdzogXCJud1wiXG59O1xuXG52YXIgc2lnbnNYID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogbnVsbCxcbiAgZTogKzEsXG4gIHM6IG51bGwsXG4gIHc6IC0xLFxuICBudzogLTEsXG4gIG5lOiArMSxcbiAgc2U6ICsxLFxuICBzdzogLTFcbn07XG5cbnZhciBzaWduc1kgPSB7XG4gIG92ZXJsYXk6ICsxLFxuICBzZWxlY3Rpb246ICsxLFxuICBuOiAtMSxcbiAgZTogbnVsbCxcbiAgczogKzEsXG4gIHc6IG51bGwsXG4gIG53OiAtMSxcbiAgbmU6IC0xLFxuICBzZTogKzEsXG4gIHN3OiArMVxufTtcblxuZnVuY3Rpb24gdHlwZSh0KSB7XG4gIHJldHVybiB7dHlwZTogdH07XG59XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcigpIHtcbiAgcmV0dXJuICFldmVudC5jdHJsS2V5ICYmICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFeHRlbnQoKSB7XG4gIHZhciBzdmcgPSB0aGlzLm93bmVyU1ZHRWxlbWVudCB8fCB0aGlzO1xuICBpZiAoc3ZnLmhhc0F0dHJpYnV0ZShcInZpZXdCb3hcIikpIHtcbiAgICBzdmcgPSBzdmcudmlld0JveC5iYXNlVmFsO1xuICAgIHJldHVybiBbW3N2Zy54LCBzdmcueV0sIFtzdmcueCArIHN2Zy53aWR0aCwgc3ZnLnkgKyBzdmcuaGVpZ2h0XV07XG4gIH1cbiAgcmV0dXJuIFtbMCwgMF0sIFtzdmcud2lkdGguYmFzZVZhbC52YWx1ZSwgc3ZnLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcyk7XG59XG5cbi8vIExpa2UgZDMubG9jYWwsIGJ1dCB3aXRoIHRoZSBuYW1lIOKAnF9fYnJ1c2jigJ0gcmF0aGVyIHRoYW4gYXV0by1nZW5lcmF0ZWQuXG5mdW5jdGlvbiBsb2NhbChub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX2JydXNoKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICByZXR1cm4gbm9kZS5fX2JydXNoO1xufVxuXG5mdW5jdGlvbiBlbXB0eShleHRlbnQpIHtcbiAgcmV0dXJuIGV4dGVudFswXVswXSA9PT0gZXh0ZW50WzFdWzBdXG4gICAgICB8fCBleHRlbnRbMF1bMV0gPT09IGV4dGVudFsxXVsxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoU2VsZWN0aW9uKG5vZGUpIHtcbiAgdmFyIHN0YXRlID0gbm9kZS5fX2JydXNoO1xuICByZXR1cm4gc3RhdGUgPyBzdGF0ZS5kaW0ub3V0cHV0KHN0YXRlLnNlbGVjdGlvbikgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hYKCkge1xuICByZXR1cm4gYnJ1c2goWCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFkoKSB7XG4gIHJldHVybiBicnVzaChZKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBicnVzaChYWSk7XG59XG5cbmZ1bmN0aW9uIGJydXNoKGRpbSkge1xuICB2YXIgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCxcbiAgICAgIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlLFxuICAgICAga2V5cyA9IHRydWUsXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChicnVzaCwgXCJzdGFydFwiLCBcImJydXNoXCIsIFwiZW5kXCIpLFxuICAgICAgaGFuZGxlU2l6ZSA9IDYsXG4gICAgICB0b3VjaGVuZGluZztcblxuICBmdW5jdGlvbiBicnVzaChncm91cCkge1xuICAgIHZhciBvdmVybGF5ID0gZ3JvdXBcbiAgICAgICAgLnByb3BlcnR5KFwiX19icnVzaFwiLCBpbml0aWFsaXplKVxuICAgICAgLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAuZGF0YShbdHlwZShcIm92ZXJsYXlcIildKTtcblxuICAgIG92ZXJsYXkuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJvdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5vdmVybGF5KVxuICAgICAgLm1lcmdlKG92ZXJsYXkpXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBleHRlbnQgPSBsb2NhbCh0aGlzKS5leHRlbnQ7XG4gICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgIC5hdHRyKFwieFwiLCBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBleHRlbnRbMF1bMV0pXG4gICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV0pO1xuICAgICAgICB9KTtcblxuICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgIC5kYXRhKFt0eXBlKFwic2VsZWN0aW9uXCIpXSlcbiAgICAgIC5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInNlbGVjdGlvblwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzc3N1wiKVxuICAgICAgICAuYXR0cihcImZpbGwtb3BhY2l0eVwiLCAwLjMpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiI2ZmZlwiKVxuICAgICAgICAuYXR0cihcInNoYXBlLXJlbmRlcmluZ1wiLCBcImNyaXNwRWRnZXNcIik7XG5cbiAgICB2YXIgaGFuZGxlID0gZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgLmRhdGEoZGltLmhhbmRsZXMsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZTsgfSk7XG5cbiAgICBoYW5kbGUuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgaGFuZGxlLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwiaGFuZGxlIGhhbmRsZS0tXCIgKyBkLnR5cGU7IH0pXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGN1cnNvcnNbZC50eXBlXTsgfSk7XG5cbiAgICBncm91cFxuICAgICAgICAuZWFjaChyZWRyYXcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAub24oXCJtb3VzZWRvd24uYnJ1c2hcIiwgc3RhcnRlZClcbiAgICAgIC5maWx0ZXIodG91Y2hhYmxlKVxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmJydXNoXCIsIHN0YXJ0ZWQpXG4gICAgICAgIC5vbihcInRvdWNobW92ZS5icnVzaFwiLCB0b3VjaG1vdmVkKVxuICAgICAgICAub24oXCJ0b3VjaGVuZC5icnVzaCB0b3VjaGNhbmNlbC5icnVzaFwiLCB0b3VjaGVuZGVkKVxuICAgICAgICAuc3R5bGUoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIik7XG4gIH1cblxuICBicnVzaC5tb3ZlID0gZnVuY3Rpb24oZ3JvdXAsIHNlbGVjdGlvbikge1xuICAgIGlmIChncm91cC5zZWxlY3Rpb24pIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLm9uKFwic3RhcnQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5iZWZvcmVzdGFydCgpLnN0YXJ0KCk7IH0pXG4gICAgICAgICAgLm9uKFwiaW50ZXJydXB0LmJydXNoIGVuZC5icnVzaFwiLCBmdW5jdGlvbigpIHsgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmVuZCgpOyB9KVxuICAgICAgICAgIC50d2VlbihcImJydXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMCA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogc2VsZWN0aW9uLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZShzZWxlY3Rpb24wLCBzZWxlY3Rpb24xKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gdHdlZW4odCkge1xuICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSB0ID09PSAxICYmIHNlbGVjdGlvbjEgPT09IG51bGwgPyBudWxsIDogaSh0KTtcbiAgICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbjAgIT09IG51bGwgJiYgc2VsZWN0aW9uMSAhPT0gbnVsbCA/IHR3ZWVuIDogdHdlZW4oMSk7XG4gICAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGF0LCBhcmdzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmdzKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgICAgICAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24xID09PSBudWxsID8gbnVsbCA6IHNlbGVjdGlvbjE7XG4gICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgIGVtaXQuc3RhcnQoKS5icnVzaCgpLmVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBicnVzaC5jbGVhciA9IGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgYnJ1c2gubW92ZShncm91cCwgbnVsbCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVkcmF3KCkge1xuICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGlzKSxcbiAgICAgICAgc2VsZWN0aW9uID0gbG9jYWwodGhpcykuc2VsZWN0aW9uO1xuXG4gICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBzZWxlY3Rpb25bMF1bMV0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdKTtcblxuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlW2QudHlwZS5sZW5ndGggLSAxXSA9PT0gXCJlXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVswXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbMF0gPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMV0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJuXCIgfHwgZC50eXBlID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJlXCIgfHwgZC50eXBlID09PSBcIndcIiA/IHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb24sLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXR0ZXIodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICByZXR1cm4gKCFjbGVhbiAmJiB0aGF0Ll9fYnJ1c2guZW1pdHRlcikgfHwgbmV3IEVtaXR0ZXIodGhhdCwgYXJncyk7XG4gIH1cblxuICBmdW5jdGlvbiBFbWl0dGVyKHRoYXQsIGFyZ3MpIHtcbiAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5zdGF0ZSA9IHRoYXQuX19icnVzaDtcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gIH1cblxuICBFbWl0dGVyLnByb3RvdHlwZSA9IHtcbiAgICBiZWZvcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkgdGhpcy5zdGF0ZS5lbWl0dGVyID0gdGhpcywgdGhpcy5zdGFydGluZyA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnN0YXJ0aW5nKSB0aGlzLnN0YXJ0aW5nID0gZmFsc2UsIHRoaXMuZW1pdChcInN0YXJ0XCIpO1xuICAgICAgZWxzZSB0aGlzLmVtaXQoXCJicnVzaFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYnJ1c2g6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5lbWl0KFwiYnJ1c2hcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkgZGVsZXRlIHRoaXMuc3RhdGUuZW1pdHRlciwgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbWl0OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICBjdXN0b21FdmVudChuZXcgQnJ1c2hFdmVudChicnVzaCwgdHlwZSwgZGltLm91dHB1dCh0aGlzLnN0YXRlLnNlbGVjdGlvbikpLCBsaXN0ZW5lcnMuYXBwbHksIGxpc3RlbmVycywgW3R5cGUsIHRoaXMudGhhdCwgdGhpcy5hcmdzXSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHN0YXJ0ZWQoKSB7XG4gICAgaWYgKHRvdWNoZW5kaW5nICYmICFldmVudC50b3VjaGVzKSByZXR1cm47XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICB0eXBlID0gZXZlbnQudGFyZ2V0Ll9fZGF0YV9fLnR5cGUsXG4gICAgICAgIG1vZGUgPSAoa2V5cyAmJiBldmVudC5tZXRhS2V5ID8gdHlwZSA9IFwib3ZlcmxheVwiIDogdHlwZSkgPT09IFwic2VsZWN0aW9uXCIgPyBNT0RFX0RSQUcgOiAoa2V5cyAmJiBldmVudC5hbHRLZXkgPyBNT0RFX0NFTlRFUiA6IE1PREVfSEFORExFKSxcbiAgICAgICAgc2lnblggPSBkaW0gPT09IFkgPyBudWxsIDogc2lnbnNYW3R5cGVdLFxuICAgICAgICBzaWduWSA9IGRpbSA9PT0gWCA/IG51bGwgOiBzaWduc1lbdHlwZV0sXG4gICAgICAgIHN0YXRlID0gbG9jYWwodGhhdCksXG4gICAgICAgIGV4dGVudCA9IHN0YXRlLmV4dGVudCxcbiAgICAgICAgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uLFxuICAgICAgICBXID0gZXh0ZW50WzBdWzBdLCB3MCwgdzEsXG4gICAgICAgIE4gPSBleHRlbnRbMF1bMV0sIG4wLCBuMSxcbiAgICAgICAgRSA9IGV4dGVudFsxXVswXSwgZTAsIGUxLFxuICAgICAgICBTID0gZXh0ZW50WzFdWzFdLCBzMCwgczEsXG4gICAgICAgIGR4ID0gMCxcbiAgICAgICAgZHkgPSAwLFxuICAgICAgICBtb3ZpbmcsXG4gICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblkgJiYga2V5cyAmJiBldmVudC5zaGlmdEtleSxcbiAgICAgICAgbG9ja1gsXG4gICAgICAgIGxvY2tZLFxuICAgICAgICBwb2ludGVyID0gZXZlbnQudG91Y2hlcyA/IHRvdWNoZXIoZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uaWRlbnRpZmllcikgOiBtb3VzZSxcbiAgICAgICAgcG9pbnQwID0gcG9pbnRlcih0aGF0KSxcbiAgICAgICAgcG9pbnQgPSBwb2ludDAsXG4gICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cywgdHJ1ZSkuYmVmb3Jlc3RhcnQoKTtcblxuICAgIGlmICh0eXBlID09PSBcIm92ZXJsYXlcIikge1xuICAgICAgaWYgKHNlbGVjdGlvbikgbW92aW5nID0gdHJ1ZTtcbiAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbiA9IFtcbiAgICAgICAgW3cwID0gZGltID09PSBZID8gVyA6IHBvaW50MFswXSwgbjAgPSBkaW0gPT09IFggPyBOIDogcG9pbnQwWzFdXSxcbiAgICAgICAgW2UwID0gZGltID09PSBZID8gRSA6IHcwLCBzMCA9IGRpbSA9PT0gWCA/IFMgOiBuMF1cbiAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHcwID0gc2VsZWN0aW9uWzBdWzBdO1xuICAgICAgbjAgPSBzZWxlY3Rpb25bMF1bMV07XG4gICAgICBlMCA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgIHMwID0gc2VsZWN0aW9uWzFdWzFdO1xuICAgIH1cblxuICAgIHcxID0gdzA7XG4gICAgbjEgPSBuMDtcbiAgICBlMSA9IGUwO1xuICAgIHMxID0gczA7XG5cbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhhdClcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIik7XG5cbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuXG4gICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIGVtaXQubW92ZWQgPSBtb3ZlZDtcbiAgICAgIGVtaXQuZW5kZWQgPSBlbmRlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBzZWxlY3QoZXZlbnQudmlldylcbiAgICAgICAgICAub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgbW92ZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwibW91c2V1cC5icnVzaFwiLCBlbmRlZCwgdHJ1ZSk7XG4gICAgICBpZiAoa2V5cykgdmlld1xuICAgICAgICAgIC5vbihcImtleWRvd24uYnJ1c2hcIiwga2V5ZG93bmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcImtleXVwLmJydXNoXCIsIGtleXVwcGVkLCB0cnVlKVxuXG4gICAgICBkcmFnRGlzYWJsZShldmVudC52aWV3KTtcbiAgICB9XG5cbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgaW50ZXJydXB0KHRoYXQpO1xuICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgIGVtaXQuc3RhcnQoKTtcblxuICAgIGZ1bmN0aW9uIG1vdmVkKCkge1xuICAgICAgdmFyIHBvaW50MSA9IHBvaW50ZXIodGhhdCk7XG4gICAgICBpZiAoc2hpZnRpbmcgJiYgIWxvY2tYICYmICFsb2NrWSkge1xuICAgICAgICBpZiAoTWF0aC5hYnMocG9pbnQxWzBdIC0gcG9pbnRbMF0pID4gTWF0aC5hYnMocG9pbnQxWzFdIC0gcG9pbnRbMV0pKSBsb2NrWSA9IHRydWU7XG4gICAgICAgIGVsc2UgbG9ja1ggPSB0cnVlO1xuICAgICAgfVxuICAgICAgcG9pbnQgPSBwb2ludDE7XG4gICAgICBtb3ZpbmcgPSB0cnVlO1xuICAgICAgbm9ldmVudCgpO1xuICAgICAgbW92ZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdmUoKSB7XG4gICAgICB2YXIgdDtcblxuICAgICAgZHggPSBwb2ludFswXSAtIHBvaW50MFswXTtcbiAgICAgIGR5ID0gcG9pbnRbMV0gLSBwb2ludDBbMV07XG5cbiAgICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgICBjYXNlIE1PREVfU1BBQ0U6XG4gICAgICAgIGNhc2UgTU9ERV9EUkFHOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSBkeCA9IE1hdGgubWF4KFcgLSB3MCwgTWF0aC5taW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICBpZiAoc2lnblkpIGR5ID0gTWF0aC5tYXgoTiAtIG4wLCBNYXRoLm1pbihTIC0gczAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTU9ERV9IQU5ETEU6IHtcbiAgICAgICAgICBpZiAoc2lnblggPCAwKSBkeCA9IE1hdGgubWF4KFcgLSB3MCwgTWF0aC5taW4oRSAtIHcwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTA7XG4gICAgICAgICAgZWxzZSBpZiAoc2lnblggPiAwKSBkeCA9IE1hdGgubWF4KFcgLSBlMCwgTWF0aC5taW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwLCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgZHkgPSBNYXRoLm1heChOIC0gbjAsIE1hdGgubWluKFMgLSBuMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwO1xuICAgICAgICAgIGVsc2UgaWYgKHNpZ25ZID4gMCkgZHkgPSBNYXRoLm1heChOIC0gczAsIE1hdGgubWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTU9ERV9DRU5URVI6IHtcbiAgICAgICAgICBpZiAoc2lnblgpIHcxID0gTWF0aC5tYXgoVywgTWF0aC5taW4oRSwgdzAgLSBkeCAqIHNpZ25YKSksIGUxID0gTWF0aC5tYXgoVywgTWF0aC5taW4oRSwgZTAgKyBkeCAqIHNpZ25YKSk7XG4gICAgICAgICAgaWYgKHNpZ25ZKSBuMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIG4wIC0gZHkgKiBzaWduWSkpLCBzMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIHMwICsgZHkgKiBzaWduWSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlMSA8IHcxKSB7XG4gICAgICAgIHNpZ25YICo9IC0xO1xuICAgICAgICB0ID0gdzAsIHcwID0gZTAsIGUwID0gdDtcbiAgICAgICAgdCA9IHcxLCB3MSA9IGUxLCBlMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBYKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFhbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHMxIDwgbjEpIHtcbiAgICAgICAgc2lnblkgKj0gLTE7XG4gICAgICAgIHQgPSBuMCwgbjAgPSBzMCwgczAgPSB0O1xuICAgICAgICB0ID0gbjEsIG4xID0gczEsIHMxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFkpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWVt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSFcbiAgICAgIGlmIChsb2NrWCkgdzEgPSBzZWxlY3Rpb25bMF1bMF0sIGUxID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgaWYgKGxvY2tZKSBuMSA9IHNlbGVjdGlvblswXVsxXSwgczEgPSBzZWxlY3Rpb25bMV1bMV07XG5cbiAgICAgIGlmIChzZWxlY3Rpb25bMF1bMF0gIT09IHcxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzBdWzFdICE9PSBuMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVswXSAhPT0gZTFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMV0gIT09IHMxKSB7XG4gICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IFtbdzEsIG4xXSwgW2UxLCBzMV1dO1xuICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgZW1pdC5icnVzaCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgaWYgKGV2ZW50LnRvdWNoZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICAgICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIDUwMCk7IC8vIEdob3N0IGNsaWNrcyBhcmUgZGVsYXllZCFcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYWdFbmFibGUoZXZlbnQudmlldywgbW92aW5nKTtcbiAgICAgICAgdmlldy5vbihcImtleWRvd24uYnJ1c2gga2V5dXAuYnJ1c2ggbW91c2Vtb3ZlLmJydXNoIG1vdXNldXAuYnJ1c2hcIiwgbnVsbCk7XG4gICAgICB9XG4gICAgICBncm91cC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIik7XG4gICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5vdmVybGF5KTtcbiAgICAgIGlmIChzdGF0ZS5zZWxlY3Rpb24pIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbjsgLy8gTWF5IGJlIHNldCBieSBicnVzaC5tb3ZlIChvbiBzdGFydCkhXG4gICAgICBpZiAoZW1wdHkoc2VsZWN0aW9uKSkgc3RhdGUuc2VsZWN0aW9uID0gbnVsbCwgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICBlbWl0LmVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleWRvd25lZCgpIHtcbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDE2OiB7IC8vIFNISUZUXG4gICAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0hBTkRMRSkge1xuICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRTsgdGFrZXMgcHJpb3JpdHkgb3ZlciBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUgfHwgbW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTEgLSBkeDsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxIC0gZHg7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxIC0gZHk7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMSAtIGR5O1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfU1BBQ0U7XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga2V5dXBwZWQoKSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIGlmIChzaGlmdGluZykge1xuICAgICAgICAgICAgbG9ja1ggPSBsb2NrWSA9IHNoaWZ0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0VcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9TUEFDRSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmFsdEtleSkge1xuICAgICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKCkge1xuICAgIGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5tb3ZlZCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZCgpIHtcbiAgICBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kZWQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fX2JydXNoIHx8IHtzZWxlY3Rpb246IG51bGx9O1xuICAgIHN0YXRlLmV4dGVudCA9IG51bWJlcjIoZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIHN0YXRlLmRpbSA9IGRpbTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBicnVzaC5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChudW1iZXIyKF8pKSwgYnJ1c2gpIDogZXh0ZW50O1xuICB9O1xuXG4gIGJydXNoLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGJydXNoKSA6IGZpbHRlcjtcbiAgfTtcblxuICBicnVzaC5oYW5kbGVTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGhhbmRsZVNpemUgPSArXywgYnJ1c2gpIDogaGFuZGxlU2l6ZTtcbiAgfTtcblxuICBicnVzaC5rZXlNb2RpZmllcnMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoa2V5cyA9ICEhXywgYnJ1c2gpIDoga2V5cztcbiAgfTtcblxuICBicnVzaC5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBicnVzaCA6IHZhbHVlO1xuICB9O1xuXG4gIHJldHVybiBicnVzaDtcbn1cbiIsImV4cG9ydCB2YXIgY29zID0gTWF0aC5jb3M7XG5leHBvcnQgdmFyIHNpbiA9IE1hdGguc2luO1xuZXhwb3J0IHZhciBwaSA9IE1hdGguUEk7XG5leHBvcnQgdmFyIGhhbGZQaSA9IHBpIC8gMjtcbmV4cG9ydCB2YXIgdGF1ID0gcGkgKiAyO1xuZXhwb3J0IHZhciBtYXggPSBNYXRoLm1heDtcbiIsImV4cG9ydCB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG4iLCJpbXBvcnQge3JhbmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7bWF4LCB0YXV9IGZyb20gXCIuL21hdGhcIjtcblxuZnVuY3Rpb24gY29tcGFyZVZhbHVlKGNvbXBhcmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gY29tcGFyZShcbiAgICAgIGEuc291cmNlLnZhbHVlICsgYS50YXJnZXQudmFsdWUsXG4gICAgICBiLnNvdXJjZS52YWx1ZSArIGIudGFyZ2V0LnZhbHVlXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBwYWRBbmdsZSA9IDAsXG4gICAgICBzb3J0R3JvdXBzID0gbnVsbCxcbiAgICAgIHNvcnRTdWJncm91cHMgPSBudWxsLFxuICAgICAgc29ydENob3JkcyA9IG51bGw7XG5cbiAgZnVuY3Rpb24gY2hvcmQobWF0cml4KSB7XG4gICAgdmFyIG4gPSBtYXRyaXgubGVuZ3RoLFxuICAgICAgICBncm91cFN1bXMgPSBbXSxcbiAgICAgICAgZ3JvdXBJbmRleCA9IHJhbmdlKG4pLFxuICAgICAgICBzdWJncm91cEluZGV4ID0gW10sXG4gICAgICAgIGNob3JkcyA9IFtdLFxuICAgICAgICBncm91cHMgPSBjaG9yZHMuZ3JvdXBzID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBzdWJncm91cHMgPSBuZXcgQXJyYXkobiAqIG4pLFxuICAgICAgICBrLFxuICAgICAgICB4LFxuICAgICAgICB4MCxcbiAgICAgICAgZHgsXG4gICAgICAgIGksXG4gICAgICAgIGo7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBzdW0uXG4gICAgayA9IDAsIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHggPSAwLCBqID0gLTE7IHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgIHggKz0gbWF0cml4W2ldW2pdO1xuICAgICAgfVxuICAgICAgZ3JvdXBTdW1zLnB1c2goeCk7XG4gICAgICBzdWJncm91cEluZGV4LnB1c2gocmFuZ2UobikpO1xuICAgICAgayArPSB4O1xuICAgIH1cblxuICAgIC8vIFNvcnQgZ3JvdXBz4oCmXG4gICAgaWYgKHNvcnRHcm91cHMpIGdyb3VwSW5kZXguc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICByZXR1cm4gc29ydEdyb3Vwcyhncm91cFN1bXNbYV0sIGdyb3VwU3Vtc1tiXSk7XG4gICAgfSk7XG5cbiAgICAvLyBTb3J0IHN1Ymdyb3Vwc+KAplxuICAgIGlmIChzb3J0U3ViZ3JvdXBzKSBzdWJncm91cEluZGV4LmZvckVhY2goZnVuY3Rpb24oZCwgaSkge1xuICAgICAgZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHNvcnRTdWJncm91cHMobWF0cml4W2ldW2FdLCBtYXRyaXhbaV1bYl0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBDb252ZXJ0IHRoZSBzdW0gdG8gc2NhbGluZyBmYWN0b3IgZm9yIFswLCAycGldLlxuICAgIC8vIFRPRE8gQWxsb3cgc3RhcnQgYW5kIGVuZCBhbmdsZSB0byBiZSBzcGVjaWZpZWQ/XG4gICAgLy8gVE9ETyBBbGxvdyBwYWRkaW5nIHRvIGJlIHNwZWNpZmllZCBhcyBwZXJjZW50YWdlP1xuICAgIGsgPSBtYXgoMCwgdGF1IC0gcGFkQW5nbGUgKiBuKSAvIGs7XG4gICAgZHggPSBrID8gcGFkQW5nbGUgOiB0YXUgLyBuO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgc3RhcnQgYW5kIGVuZCBhbmdsZSBmb3IgZWFjaCBncm91cCBhbmQgc3ViZ3JvdXAuXG4gICAgLy8gTm90ZTogT3BlcmEgaGFzIGEgYnVnIHJlb3JkZXJpbmcgb2JqZWN0IGxpdGVyYWwgcHJvcGVydGllcyFcbiAgICB4ID0gMCwgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikge1xuICAgICAgeDAgPSB4LCBqID0gLTE7IHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgIHZhciBkaSA9IGdyb3VwSW5kZXhbaV0sXG4gICAgICAgICAgICBkaiA9IHN1Ymdyb3VwSW5kZXhbZGldW2pdLFxuICAgICAgICAgICAgdiA9IG1hdHJpeFtkaV1bZGpdLFxuICAgICAgICAgICAgYTAgPSB4LFxuICAgICAgICAgICAgYTEgPSB4ICs9IHYgKiBrO1xuICAgICAgICBzdWJncm91cHNbZGogKiBuICsgZGldID0ge1xuICAgICAgICAgIGluZGV4OiBkaSxcbiAgICAgICAgICBzdWJpbmRleDogZGosXG4gICAgICAgICAgc3RhcnRBbmdsZTogYTAsXG4gICAgICAgICAgZW5kQW5nbGU6IGExLFxuICAgICAgICAgIHZhbHVlOiB2XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBncm91cHNbZGldID0ge1xuICAgICAgICBpbmRleDogZGksXG4gICAgICAgIHN0YXJ0QW5nbGU6IHgwLFxuICAgICAgICBlbmRBbmdsZTogeCxcbiAgICAgICAgdmFsdWU6IGdyb3VwU3Vtc1tkaV1cbiAgICAgIH07XG4gICAgICB4ICs9IGR4O1xuICAgIH1cblxuICAgIC8vIEdlbmVyYXRlIGNob3JkcyBmb3IgZWFjaCAobm9uLWVtcHR5KSBzdWJncm91cC1zdWJncm91cCBsaW5rLlxuICAgIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGogPSBpIC0gMTsgd2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHN1Ymdyb3Vwc1tqICogbiArIGldLFxuICAgICAgICAgICAgdGFyZ2V0ID0gc3ViZ3JvdXBzW2kgKiBuICsgal07XG4gICAgICAgIGlmIChzb3VyY2UudmFsdWUgfHwgdGFyZ2V0LnZhbHVlKSB7XG4gICAgICAgICAgY2hvcmRzLnB1c2goc291cmNlLnZhbHVlIDwgdGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgID8ge3NvdXJjZTogdGFyZ2V0LCB0YXJnZXQ6IHNvdXJjZX1cbiAgICAgICAgICAgICAgOiB7c291cmNlOiBzb3VyY2UsIHRhcmdldDogdGFyZ2V0fSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc29ydENob3JkcyA/IGNob3Jkcy5zb3J0KHNvcnRDaG9yZHMpIDogY2hvcmRzO1xuICB9XG5cbiAgY2hvcmQucGFkQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSBtYXgoMCwgXyksIGNob3JkKSA6IHBhZEFuZ2xlO1xuICB9O1xuXG4gIGNob3JkLnNvcnRHcm91cHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydEdyb3VwcyA9IF8sIGNob3JkKSA6IHNvcnRHcm91cHM7XG4gIH07XG5cbiAgY2hvcmQuc29ydFN1Ymdyb3VwcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0U3ViZ3JvdXBzID0gXywgY2hvcmQpIDogc29ydFN1Ymdyb3VwcztcbiAgfTtcblxuICBjaG9yZC5zb3J0Q2hvcmRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IHNvcnRDaG9yZHMgPSBudWxsIDogKHNvcnRDaG9yZHMgPSBjb21wYXJlVmFsdWUoXykpLl8gPSBfLCBjaG9yZCkgOiBzb3J0Q2hvcmRzICYmIHNvcnRDaG9yZHMuXztcbiAgfTtcblxuICByZXR1cm4gY2hvcmQ7XG59XG4iLCJ2YXIgcGkgPSBNYXRoLlBJLFxuICAgIHRhdSA9IDIgKiBwaSxcbiAgICBlcHNpbG9uID0gMWUtNixcbiAgICB0YXVFcHNpbG9uID0gdGF1IC0gZXBzaWxvbjtcblxuZnVuY3Rpb24gUGF0aCgpIHtcbiAgdGhpcy5feDAgPSB0aGlzLl95MCA9IC8vIHN0YXJ0IG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl94MSA9IHRoaXMuX3kxID0gbnVsbDsgLy8gZW5kIG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl8gPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gbmV3IFBhdGg7XG59XG5cblBhdGgucHJvdG90eXBlID0gcGF0aC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQYXRoLFxuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3gxICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl94MSA9IHRoaXMuX3gwLCB0aGlzLl95MSA9IHRoaXMuX3kwO1xuICAgICAgdGhpcy5fICs9IFwiWlwiO1xuICAgIH1cbiAgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIlFcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiQ1wiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAoK3gyKSArIFwiLFwiICsgKCt5MikgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBhcmNUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHIpIHtcbiAgICB4MSA9ICt4MSwgeTEgPSAreTEsIHgyID0gK3gyLCB5MiA9ICt5MiwgciA9ICtyO1xuICAgIHZhciB4MCA9IHRoaXMuX3gxLFxuICAgICAgICB5MCA9IHRoaXMuX3kxLFxuICAgICAgICB4MjEgPSB4MiAtIHgxLFxuICAgICAgICB5MjEgPSB5MiAtIHkxLFxuICAgICAgICB4MDEgPSB4MCAtIHgxLFxuICAgICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgICBsMDFfMiA9IHgwMSAqIHgwMSArIHkwMSAqIHkwMTtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MSx5MSkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgwLHkwKT8gRG8gbm90aGluZy5cbiAgICBlbHNlIGlmICghKGwwMV8yID4gZXBzaWxvbikpO1xuXG4gICAgLy8gT3IsIGFyZSAoeDAseTApLCAoeDEseTEpIGFuZCAoeDIseTIpIGNvbGxpbmVhcj9cbiAgICAvLyBFcXVpdmFsZW50bHksIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4Mix5Mik/XG4gICAgLy8gT3IsIGlzIHRoZSByYWRpdXMgemVybz8gTGluZSB0byAoeDEseTEpLlxuICAgIGVsc2UgaWYgKCEoTWF0aC5hYnMoeTAxICogeDIxIC0geTIxICogeDAxKSA+IGVwc2lsb24pIHx8ICFyKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIGRyYXcgYW4gYXJjIVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHgyMCA9IHgyIC0geDAsXG4gICAgICAgICAgeTIwID0geTIgLSB5MCxcbiAgICAgICAgICBsMjFfMiA9IHgyMSAqIHgyMSArIHkyMSAqIHkyMSxcbiAgICAgICAgICBsMjBfMiA9IHgyMCAqIHgyMCArIHkyMCAqIHkyMCxcbiAgICAgICAgICBsMjEgPSBNYXRoLnNxcnQobDIxXzIpLFxuICAgICAgICAgIGwwMSA9IE1hdGguc3FydChsMDFfMiksXG4gICAgICAgICAgbCA9IHIgKiBNYXRoLnRhbigocGkgLSBNYXRoLmFjb3MoKGwyMV8yICsgbDAxXzIgLSBsMjBfMikgLyAoMiAqIGwyMSAqIGwwMSkpKSAvIDIpLFxuICAgICAgICAgIHQwMSA9IGwgLyBsMDEsXG4gICAgICAgICAgdDIxID0gbCAvIGwyMTtcblxuICAgICAgLy8gSWYgdGhlIHN0YXJ0IHRhbmdlbnQgaXMgbm90IGNvaW5jaWRlbnQgd2l0aCAoeDAseTApLCBsaW5lIHRvLlxuICAgICAgaWYgKE1hdGguYWJzKHQwMSAtIDEpID4gZXBzaWxvbikge1xuICAgICAgICB0aGlzLl8gKz0gXCJMXCIgKyAoeDEgKyB0MDEgKiB4MDEpICsgXCIsXCIgKyAoeTEgKyB0MDEgKiB5MDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwwLFwiICsgKCsoeTAxICogeDIwID4geDAxICogeTIwKSkgKyBcIixcIiArICh0aGlzLl94MSA9IHgxICsgdDIxICogeDIxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEgKyB0MjEgKiB5MjEpO1xuICAgIH1cbiAgfSxcbiAgYXJjOiBmdW5jdGlvbih4LCB5LCByLCBhMCwgYTEsIGNjdykge1xuICAgIHggPSAreCwgeSA9ICt5LCByID0gK3IsIGNjdyA9ICEhY2N3O1xuICAgIHZhciBkeCA9IHIgKiBNYXRoLmNvcyhhMCksXG4gICAgICAgIGR5ID0gciAqIE1hdGguc2luKGEwKSxcbiAgICAgICAgeDAgPSB4ICsgZHgsXG4gICAgICAgIHkwID0geSArIGR5LFxuICAgICAgICBjdyA9IDEgXiBjY3csXG4gICAgICAgIGRhID0gY2N3ID8gYTAgLSBhMSA6IGExIC0gYTA7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDAseTApLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDAseTApIG5vdCBjb2luY2lkZW50IHdpdGggdGhlIHByZXZpb3VzIHBvaW50PyBMaW5lIHRvICh4MCx5MCkuXG4gICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5feDEgLSB4MCkgPiBlcHNpbG9uIHx8IE1hdGguYWJzKHRoaXMuX3kxIC0geTApID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIGVtcHR5PyBXZeKAmXJlIGRvbmUuXG4gICAgaWYgKCFyKSByZXR1cm47XG5cbiAgICAvLyBEb2VzIHRoZSBhbmdsZSBnbyB0aGUgd3Jvbmcgd2F5PyBGbGlwIHRoZSBkaXJlY3Rpb24uXG4gICAgaWYgKGRhIDwgMCkgZGEgPSBkYSAlIHRhdSArIHRhdTtcblxuICAgIC8vIElzIHRoaXMgYSBjb21wbGV0ZSBjaXJjbGU/IERyYXcgdHdvIGFyY3MgdG8gY29tcGxldGUgdGhlIGNpcmNsZS5cbiAgICBpZiAoZGEgPiB0YXVFcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh4IC0gZHgpICsgXCIsXCIgKyAoeSAtIGR5KSArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MCkgKyBcIixcIiArICh0aGlzLl95MSA9IHkwKTtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBub24tZW1wdHk/IERyYXcgYW4gYXJjIVxuICAgIGVsc2UgaWYgKGRhID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsXCIgKyAoKyhkYSA+PSBwaSkpICsgXCIsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geCArIHIgKiBNYXRoLmNvcyhhMSkpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5ICsgciAqIE1hdGguc2luKGExKSk7XG4gICAgfVxuICB9LFxuICByZWN0OiBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpICsgXCJoXCIgKyAoK3cpICsgXCJ2XCIgKyAoK2gpICsgXCJoXCIgKyAoLXcpICsgXCJaXCI7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXRoO1xuIiwiZXhwb3J0IHZhciBwcmVmaXggPSBcIiRcIjtcblxuZnVuY3Rpb24gTWFwKCkge31cblxuTWFwLnByb3RvdHlwZSA9IG1hcC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBNYXAsXG4gIGhhczogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIChwcmVmaXggKyBrZXkpIGluIHRoaXM7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIHRoaXNbcHJlZml4ICsga2V5XTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdGhpc1twcmVmaXggKyBrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHByb3BlcnR5ID0gcHJlZml4ICsga2V5O1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0aGlzICYmIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGtleXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGtleXMucHVzaChwcm9wZXJ0eS5zbGljZSgxKSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH0sXG4gIHZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSB2YWx1ZXMucHVzaCh0aGlzW3Byb3BlcnR5XSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSxcbiAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVudHJpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZW50cmllcy5wdXNoKHtrZXk6IHByb3BlcnR5LnNsaWNlKDEpLCB2YWx1ZTogdGhpc1twcm9wZXJ0eV19KTtcbiAgICByZXR1cm4gZW50cmllcztcbiAgfSxcbiAgc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNpemUgPSAwO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSArK3NpemU7XG4gICAgcmV0dXJuIHNpemU7XG4gIH0sXG4gIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBlYWNoOiBmdW5jdGlvbihmKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGYodGhpc1twcm9wZXJ0eV0sIHByb3BlcnR5LnNsaWNlKDEpLCB0aGlzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbWFwKG9iamVjdCwgZikge1xuICB2YXIgbWFwID0gbmV3IE1hcDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgTWFwKSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7IG1hcC5zZXQoa2V5LCB2YWx1ZSk7IH0pO1xuXG4gIC8vIEluZGV4IGFycmF5IGJ5IG51bWVyaWMgaW5kZXggb3Igc3BlY2lmaWVkIGtleSBmdW5jdGlvbi5cbiAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IG9iamVjdC5sZW5ndGgsXG4gICAgICAgIG87XG5cbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChpLCBvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoZihvID0gb2JqZWN0W2ldLCBpLCBvYmplY3QpLCBvKTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgb2JqZWN0IHRvIG1hcC5cbiAgZWxzZSBpZiAob2JqZWN0KSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBtYXAuc2V0KGtleSwgb2JqZWN0W2tleV0pO1xuXG4gIHJldHVybiBtYXA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcDtcbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBtYXAsIHByZWZpeH0gZnJvbSBcIi4vbWFwXCI7XG5cbmZ1bmN0aW9uIFNldCgpIHt9XG5cbnZhciBwcm90byA9IG1hcC5wcm90b3R5cGU7XG5cblNldC5wcm90b3R5cGUgPSBzZXQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2V0LFxuICBoYXM6IHByb3RvLmhhcyxcbiAgYWRkOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhbHVlICs9IFwiXCI7XG4gICAgdGhpc1twcmVmaXggKyB2YWx1ZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBwcm90by5yZW1vdmUsXG4gIGNsZWFyOiBwcm90by5jbGVhcixcbiAgdmFsdWVzOiBwcm90by5rZXlzLFxuICBzaXplOiBwcm90by5zaXplLFxuICBlbXB0eTogcHJvdG8uZW1wdHksXG4gIGVhY2g6IHByb3RvLmVhY2hcbn07XG5cbmZ1bmN0aW9uIHNldChvYmplY3QsIGYpIHtcbiAgdmFyIHNldCA9IG5ldyBTZXQ7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFNldCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUpIHsgc2V0LmFkZCh2YWx1ZSk7IH0pO1xuXG4gIC8vIE90aGVyd2lzZSwgYXNzdW1lIGl04oCZcyBhbiBhcnJheS5cbiAgZWxzZSBpZiAob2JqZWN0KSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IG9iamVjdC5sZW5ndGg7XG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIHNldC5hZGQob2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKGYob2JqZWN0W2ldLCBpLCBvYmplY3QpKTtcbiAgfVxuXG4gIHJldHVybiBzZXQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNldDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hcCkge1xuICB2YXIgZW50cmllcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gbWFwKSBlbnRyaWVzLnB1c2goe2tleToga2V5LCB2YWx1ZTogbWFwW2tleV19KTtcbiAgcmV0dXJuIGVudHJpZXM7XG59XG4iLCJ2YXIgYXJyYXkgPSBBcnJheS5wcm90b3R5cGU7XG5cbmV4cG9ydCB2YXIgc2xpY2UgPSBhcnJheS5zbGljZTtcbiIsImltcG9ydCB7bWF4LCByYW5nZSwgdGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCB7Ymx1clgsIGJsdXJZfSBmcm9tIFwiLi9ibHVyXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBjb250b3VycyBmcm9tIFwiLi9jb250b3Vyc1wiO1xuXG5mdW5jdGlvbiBkZWZhdWx0WChkKSB7XG4gIHJldHVybiBkWzBdO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0WShkKSB7XG4gIHJldHVybiBkWzFdO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0V2VpZ2h0KCkge1xuICByZXR1cm4gMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gZGVmYXVsdFgsXG4gICAgICB5ID0gZGVmYXVsdFksXG4gICAgICB3ZWlnaHQgPSBkZWZhdWx0V2VpZ2h0LFxuICAgICAgZHggPSA5NjAsXG4gICAgICBkeSA9IDUwMCxcbiAgICAgIHIgPSAyMCwgLy8gYmx1ciByYWRpdXNcbiAgICAgIGsgPSAyLCAvLyBsb2cyKGdyaWQgY2VsbCBzaXplKVxuICAgICAgbyA9IHIgKiAzLCAvLyBncmlkIG9mZnNldCwgdG8gcGFkIGZvciBibHVyXG4gICAgICBuID0gKGR4ICsgbyAqIDIpID4+IGssIC8vIGdyaWQgd2lkdGhcbiAgICAgIG0gPSAoZHkgKyBvICogMikgPj4gaywgLy8gZ3JpZCBoZWlnaHRcbiAgICAgIHRocmVzaG9sZCA9IGNvbnN0YW50KDIwKTtcblxuICBmdW5jdGlvbiBkZW5zaXR5KGRhdGEpIHtcbiAgICB2YXIgdmFsdWVzMCA9IG5ldyBGbG9hdDMyQXJyYXkobiAqIG0pLFxuICAgICAgICB2YWx1ZXMxID0gbmV3IEZsb2F0MzJBcnJheShuICogbSk7XG5cbiAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24oZCwgaSwgZGF0YSkge1xuICAgICAgdmFyIHhpID0gKCt4KGQsIGksIGRhdGEpICsgbykgPj4gayxcbiAgICAgICAgICB5aSA9ICgreShkLCBpLCBkYXRhKSArIG8pID4+IGssXG4gICAgICAgICAgd2kgPSArd2VpZ2h0KGQsIGksIGRhdGEpO1xuICAgICAgaWYgKHhpID49IDAgJiYgeGkgPCBuICYmIHlpID49IDAgJiYgeWkgPCBtKSB7XG4gICAgICAgIHZhbHVlczBbeGkgKyB5aSAqIG5dICs9IHdpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVE9ETyBPcHRpbWl6ZS5cbiAgICBibHVyWCh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwgciA+PiBrKTtcbiAgICBibHVyWSh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwgciA+PiBrKTtcbiAgICBibHVyWCh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwgciA+PiBrKTtcbiAgICBibHVyWSh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwgciA+PiBrKTtcbiAgICBibHVyWCh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwgciA+PiBrKTtcbiAgICBibHVyWSh7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwgciA+PiBrKTtcblxuICAgIHZhciB0eiA9IHRocmVzaG9sZCh2YWx1ZXMwKTtcblxuICAgIC8vIENvbnZlcnQgbnVtYmVyIG9mIHRocmVzaG9sZHMgaW50byB1bmlmb3JtIHRocmVzaG9sZHMuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR6KSkge1xuICAgICAgdmFyIHN0b3AgPSBtYXgodmFsdWVzMCk7XG4gICAgICB0eiA9IHRpY2tTdGVwKDAsIHN0b3AsIHR6KTtcbiAgICAgIHR6ID0gcmFuZ2UoMCwgTWF0aC5mbG9vcihzdG9wIC8gdHopICogdHosIHR6KTtcbiAgICAgIHR6LnNoaWZ0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRvdXJzKClcbiAgICAgICAgLnRocmVzaG9sZHModHopXG4gICAgICAgIC5zaXplKFtuLCBtXSlcbiAgICAgICh2YWx1ZXMwKVxuICAgICAgICAubWFwKHRyYW5zZm9ybSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2Zvcm0oZ2VvbWV0cnkpIHtcbiAgICBnZW9tZXRyeS52YWx1ZSAqPSBNYXRoLnBvdygyLCAtMiAqIGspOyAvLyBEZW5zaXR5IGluIHBvaW50cyBwZXIgc3F1YXJlIHBpeGVsLlxuICAgIGdlb21ldHJ5LmNvb3JkaW5hdGVzLmZvckVhY2godHJhbnNmb3JtUG9seWdvbik7XG4gICAgcmV0dXJuIGdlb21ldHJ5O1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtUG9seWdvbihjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzLmZvckVhY2godHJhbnNmb3JtUmluZyk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2Zvcm1SaW5nKGNvb3JkaW5hdGVzKSB7XG4gICAgY29vcmRpbmF0ZXMuZm9yRWFjaCh0cmFuc2Zvcm1Qb2ludCk7XG4gIH1cblxuICAvLyBUT0RPIE9wdGltaXplLlxuICBmdW5jdGlvbiB0cmFuc2Zvcm1Qb2ludChjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzWzBdID0gY29vcmRpbmF0ZXNbMF0gKiBNYXRoLnBvdygyLCBrKSAtIG87XG4gICAgY29vcmRpbmF0ZXNbMV0gPSBjb29yZGluYXRlc1sxXSAqIE1hdGgucG93KDIsIGspIC0gbztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICBvID0gciAqIDM7XG4gICAgbiA9IChkeCArIG8gKiAyKSA+PiBrO1xuICAgIG0gPSAoZHkgKyBvICogMikgPj4gaztcbiAgICByZXR1cm4gZGVuc2l0eTtcbiAgfVxuXG4gIGRlbnNpdHkueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGRlbnNpdHkpIDogeDtcbiAgfTtcblxuICBkZW5zaXR5LnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBkZW5zaXR5KSA6IHk7XG4gIH07XG5cbiAgZGVuc2l0eS53ZWlnaHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAod2VpZ2h0ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGRlbnNpdHkpIDogd2VpZ2h0O1xuICB9O1xuXG4gIGRlbnNpdHkuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbZHgsIGR5XTtcbiAgICB2YXIgXzAgPSBNYXRoLmNlaWwoX1swXSksIF8xID0gTWF0aC5jZWlsKF9bMV0pO1xuICAgIGlmICghKF8wID49IDApICYmICEoXzAgPj0gMCkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgc2l6ZVwiKTtcbiAgICByZXR1cm4gZHggPSBfMCwgZHkgPSBfMSwgcmVzaXplKCk7XG4gIH07XG5cbiAgZGVuc2l0eS5jZWxsU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiAxIDw8IGs7XG4gICAgaWYgKCEoKF8gPSArXykgPj0gMSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2VsbCBzaXplXCIpO1xuICAgIHJldHVybiBrID0gTWF0aC5mbG9vcihNYXRoLmxvZyhfKSAvIE1hdGguTE4yKSwgcmVzaXplKCk7XG4gIH07XG5cbiAgZGVuc2l0eS50aHJlc2hvbGRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRocmVzaG9sZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogQXJyYXkuaXNBcnJheShfKSA/IGNvbnN0YW50KHNsaWNlLmNhbGwoXykpIDogY29uc3RhbnQoXyksIGRlbnNpdHkpIDogdGhyZXNob2xkO1xuICB9O1xuXG4gIGRlbnNpdHkuYmFuZHdpZHRoID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIE1hdGguc3FydChyICogKHIgKyAxKSk7XG4gICAgaWYgKCEoKF8gPSArXykgPj0gMCkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgYmFuZHdpZHRoXCIpO1xuICAgIHJldHVybiByID0gTWF0aC5yb3VuZCgoTWF0aC5zcXJ0KDQgKiBfICogXyArIDEpIC0gMSkgLyAyKSwgcmVzaXplKCk7XG4gIH07XG5cbiAgcmV0dXJuIGRlbnNpdHk7XG59XG4iLCJ2YXIgRU9MID0ge30sXG4gICAgRU9GID0ge30sXG4gICAgUVVPVEUgPSAzNCxcbiAgICBORVdMSU5FID0gMTAsXG4gICAgUkVUVVJOID0gMTM7XG5cbmZ1bmN0aW9uIG9iamVjdENvbnZlcnRlcihjb2x1bW5zKSB7XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oXCJkXCIsIFwicmV0dXJuIHtcIiArIGNvbHVtbnMubWFwKGZ1bmN0aW9uKG5hbWUsIGkpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobmFtZSkgKyBcIjogZFtcIiArIGkgKyBcIl1cIjtcbiAgfSkuam9pbihcIixcIikgKyBcIn1cIik7XG59XG5cbmZ1bmN0aW9uIGN1c3RvbUNvbnZlcnRlcihjb2x1bW5zLCBmKSB7XG4gIHZhciBvYmplY3QgPSBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucyk7XG4gIHJldHVybiBmdW5jdGlvbihyb3csIGkpIHtcbiAgICByZXR1cm4gZihvYmplY3Qocm93KSwgaSwgY29sdW1ucyk7XG4gIH07XG59XG5cbi8vIENvbXB1dGUgdW5pcXVlIGNvbHVtbnMgaW4gb3JkZXIgb2YgZGlzY292ZXJ5LlxuZnVuY3Rpb24gaW5mZXJDb2x1bW5zKHJvd3MpIHtcbiAgdmFyIGNvbHVtblNldCA9IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBjb2x1bW5zID0gW107XG5cbiAgcm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xuICAgIGZvciAodmFyIGNvbHVtbiBpbiByb3cpIHtcbiAgICAgIGlmICghKGNvbHVtbiBpbiBjb2x1bW5TZXQpKSB7XG4gICAgICAgIGNvbHVtbnMucHVzaChjb2x1bW5TZXRbY29sdW1uXSA9IGNvbHVtbik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29sdW1ucztcbn1cblxuZnVuY3Rpb24gcGFkKHZhbHVlLCB3aWR0aCkge1xuICB2YXIgcyA9IHZhbHVlICsgXCJcIiwgbGVuZ3RoID0gcy5sZW5ndGg7XG4gIHJldHVybiBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oMCkgKyBzIDogcztcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcih5ZWFyKSB7XG4gIHJldHVybiB5ZWFyIDwgMCA/IFwiLVwiICsgcGFkKC15ZWFyLCA2KVxuICAgIDogeWVhciA+IDk5OTkgPyBcIitcIiArIHBhZCh5ZWFyLCA2KVxuICAgIDogcGFkKHllYXIsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUpIHtcbiAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpLFxuICAgICAgbWludXRlcyA9IGRhdGUuZ2V0VVRDTWludXRlcygpLFxuICAgICAgc2Vjb25kcyA9IGRhdGUuZ2V0VVRDU2Vjb25kcygpLFxuICAgICAgbWlsbGlzZWNvbmRzID0gZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgcmV0dXJuIGlzTmFOKGRhdGUpID8gXCJJbnZhbGlkIERhdGVcIlxuICAgICAgOiBmb3JtYXRZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSwgNCkgKyBcIi1cIiArIHBhZChkYXRlLmdldFVUQ01vbnRoKCkgKyAxLCAyKSArIFwiLVwiICsgcGFkKGRhdGUuZ2V0VVRDRGF0ZSgpLCAyKVxuICAgICAgKyAobWlsbGlzZWNvbmRzID8gXCJUXCIgKyBwYWQoaG91cnMsIDIpICsgXCI6XCIgKyBwYWQobWludXRlcywgMikgKyBcIjpcIiArIHBhZChzZWNvbmRzLCAyKSArIFwiLlwiICsgcGFkKG1pbGxpc2Vjb25kcywgMykgKyBcIlpcIlxuICAgICAgOiBzZWNvbmRzID8gXCJUXCIgKyBwYWQoaG91cnMsIDIpICsgXCI6XCIgKyBwYWQobWludXRlcywgMikgKyBcIjpcIiArIHBhZChzZWNvbmRzLCAyKSArIFwiWlwiXG4gICAgICA6IG1pbnV0ZXMgfHwgaG91cnMgPyBcIlRcIiArIHBhZChob3VycywgMikgKyBcIjpcIiArIHBhZChtaW51dGVzLCAyKSArIFwiWlwiXG4gICAgICA6IFwiXCIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWxpbWl0ZXIpIHtcbiAgdmFyIHJlRm9ybWF0ID0gbmV3IFJlZ0V4cChcIltcXFwiXCIgKyBkZWxpbWl0ZXIgKyBcIlxcblxccl1cIiksXG4gICAgICBERUxJTUlURVIgPSBkZWxpbWl0ZXIuY2hhckNvZGVBdCgwKTtcblxuICBmdW5jdGlvbiBwYXJzZSh0ZXh0LCBmKSB7XG4gICAgdmFyIGNvbnZlcnQsIGNvbHVtbnMsIHJvd3MgPSBwYXJzZVJvd3ModGV4dCwgZnVuY3Rpb24ocm93LCBpKSB7XG4gICAgICBpZiAoY29udmVydCkgcmV0dXJuIGNvbnZlcnQocm93LCBpIC0gMSk7XG4gICAgICBjb2x1bW5zID0gcm93LCBjb252ZXJ0ID0gZiA/IGN1c3RvbUNvbnZlcnRlcihyb3csIGYpIDogb2JqZWN0Q29udmVydGVyKHJvdyk7XG4gICAgfSk7XG4gICAgcm93cy5jb2x1bW5zID0gY29sdW1ucyB8fCBbXTtcbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUm93cyh0ZXh0LCBmKSB7XG4gICAgdmFyIHJvd3MgPSBbXSwgLy8gb3V0cHV0IHJvd3NcbiAgICAgICAgTiA9IHRleHQubGVuZ3RoLFxuICAgICAgICBJID0gMCwgLy8gY3VycmVudCBjaGFyYWN0ZXIgaW5kZXhcbiAgICAgICAgbiA9IDAsIC8vIGN1cnJlbnQgbGluZSBudW1iZXJcbiAgICAgICAgdCwgLy8gY3VycmVudCB0b2tlblxuICAgICAgICBlb2YgPSBOIDw9IDAsIC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9GP1xuICAgICAgICBlb2wgPSBmYWxzZTsgLy8gY3VycmVudCB0b2tlbiBmb2xsb3dlZCBieSBFT0w/XG5cbiAgICAvLyBTdHJpcCB0aGUgdHJhaWxpbmcgbmV3bGluZS5cbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gTkVXTElORSkgLS1OO1xuICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoTiAtIDEpID09PSBSRVRVUk4pIC0tTjtcblxuICAgIGZ1bmN0aW9uIHRva2VuKCkge1xuICAgICAgaWYgKGVvZikgcmV0dXJuIEVPRjtcbiAgICAgIGlmIChlb2wpIHJldHVybiBlb2wgPSBmYWxzZSwgRU9MO1xuXG4gICAgICAvLyBVbmVzY2FwZSBxdW90ZXMuXG4gICAgICB2YXIgaSwgaiA9IEksIGM7XG4gICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGopID09PSBRVU9URSkge1xuICAgICAgICB3aGlsZSAoSSsrIDwgTiAmJiB0ZXh0LmNoYXJDb2RlQXQoSSkgIT09IFFVT1RFIHx8IHRleHQuY2hhckNvZGVBdCgrK0kpID09PSBRVU9URSk7XG4gICAgICAgIGlmICgoaSA9IEkpID49IE4pIGVvZiA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KEkrKykpID09PSBORVdMSU5FKSBlb2wgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjID09PSBSRVRVUk4pIHsgZW9sID0gdHJ1ZTsgaWYgKHRleHQuY2hhckNvZGVBdChJKSA9PT0gTkVXTElORSkgKytJOyB9XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGogKyAxLCBpIC0gMSkucmVwbGFjZSgvXCJcIi9nLCBcIlxcXCJcIik7XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmQgbmV4dCBkZWxpbWl0ZXIgb3IgbmV3bGluZS5cbiAgICAgIHdoaWxlIChJIDwgTikge1xuICAgICAgICBpZiAoKGMgPSB0ZXh0LmNoYXJDb2RlQXQoaSA9IEkrKykpID09PSBORVdMSU5FKSBlb2wgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjID09PSBSRVRVUk4pIHsgZW9sID0gdHJ1ZTsgaWYgKHRleHQuY2hhckNvZGVBdChJKSA9PT0gTkVXTElORSkgKytJOyB9XG4gICAgICAgIGVsc2UgaWYgKGMgIT09IERFTElNSVRFUikgY29udGludWU7XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGosIGkpO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm4gbGFzdCB0b2tlbiBiZWZvcmUgRU9GLlxuICAgICAgcmV0dXJuIGVvZiA9IHRydWUsIHRleHQuc2xpY2UoaiwgTik7XG4gICAgfVxuXG4gICAgd2hpbGUgKCh0ID0gdG9rZW4oKSkgIT09IEVPRikge1xuICAgICAgdmFyIHJvdyA9IFtdO1xuICAgICAgd2hpbGUgKHQgIT09IEVPTCAmJiB0ICE9PSBFT0YpIHJvdy5wdXNoKHQpLCB0ID0gdG9rZW4oKTtcbiAgICAgIGlmIChmICYmIChyb3cgPSBmKHJvdywgbisrKSkgPT0gbnVsbCkgY29udGludWU7XG4gICAgICByb3dzLnB1c2gocm93KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHByZWZvcm1hdEJvZHkocm93cywgY29sdW1ucykge1xuICAgIHJldHVybiByb3dzLm1hcChmdW5jdGlvbihyb3cpIHtcbiAgICAgIHJldHVybiBjb2x1bW5zLm1hcChmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdFZhbHVlKHJvd1tjb2x1bW5dKTtcbiAgICAgIH0pLmpvaW4oZGVsaW1pdGVyKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdChyb3dzLCBjb2x1bW5zKSB7XG4gICAgaWYgKGNvbHVtbnMgPT0gbnVsbCkgY29sdW1ucyA9IGluZmVyQ29sdW1ucyhyb3dzKTtcbiAgICByZXR1cm4gW2NvbHVtbnMubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcildLmNvbmNhdChwcmVmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Qm9keShyb3dzLCBjb2x1bW5zKSB7XG4gICAgaWYgKGNvbHVtbnMgPT0gbnVsbCkgY29sdW1ucyA9IGluZmVyQ29sdW1ucyhyb3dzKTtcbiAgICByZXR1cm4gcHJlZm9ybWF0Qm9keShyb3dzLCBjb2x1bW5zKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Um93cyhyb3dzKSB7XG4gICAgcmV0dXJuIHJvd3MubWFwKGZvcm1hdFJvdykuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFJvdyhyb3cpIHtcbiAgICByZXR1cm4gcm93Lm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCJcbiAgICAgICAgOiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgPyBmb3JtYXREYXRlKHZhbHVlKVxuICAgICAgICA6IHJlRm9ybWF0LnRlc3QodmFsdWUgKz0gXCJcIikgPyBcIlxcXCJcIiArIHZhbHVlLnJlcGxhY2UoL1wiL2csIFwiXFxcIlxcXCJcIikgKyBcIlxcXCJcIlxuICAgICAgICA6IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXJzZTogcGFyc2UsXG4gICAgcGFyc2VSb3dzOiBwYXJzZVJvd3MsXG4gICAgZm9ybWF0OiBmb3JtYXQsXG4gICAgZm9ybWF0Qm9keTogZm9ybWF0Qm9keSxcbiAgICBmb3JtYXRSb3dzOiBmb3JtYXRSb3dzXG4gIH07XG59XG4iLCJpbXBvcnQgZHN2IGZyb20gXCIuL2RzdlwiO1xuXG52YXIgY3N2ID0gZHN2KFwiLFwiKTtcblxuZXhwb3J0IHZhciBjc3ZQYXJzZSA9IGNzdi5wYXJzZTtcbmV4cG9ydCB2YXIgY3N2UGFyc2VSb3dzID0gY3N2LnBhcnNlUm93cztcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0ID0gY3N2LmZvcm1hdDtcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0Qm9keSA9IGNzdi5mb3JtYXRCb2R5O1xuZXhwb3J0IHZhciBjc3ZGb3JtYXRSb3dzID0gY3N2LmZvcm1hdFJvd3M7XG4iLCJpbXBvcnQgZHN2IGZyb20gXCIuL2RzdlwiO1xuXG52YXIgdHN2ID0gZHN2KFwiXFx0XCIpO1xuXG5leHBvcnQgdmFyIHRzdlBhcnNlID0gdHN2LnBhcnNlO1xuZXhwb3J0IHZhciB0c3ZQYXJzZVJvd3MgPSB0c3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciB0c3ZGb3JtYXQgPSB0c3YuZm9ybWF0O1xuZXhwb3J0IHZhciB0c3ZGb3JtYXRCb2R5ID0gdHN2LmZvcm1hdEJvZHk7XG5leHBvcnQgdmFyIHRzdkZvcm1hdFJvd3MgPSB0c3YuZm9ybWF0Um93cztcbiIsImZ1bmN0aW9uIHJlc3BvbnNlVGV4dChyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlVGV4dCk7XG59XG4iLCJpbXBvcnQge2NzdlBhcnNlLCBkc3ZGb3JtYXQsIHRzdlBhcnNlfSBmcm9tIFwiZDMtZHN2XCI7XG5pbXBvcnQgdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5cbmZ1bmN0aW9uIGRzdlBhcnNlKHBhcnNlKSB7XG4gIHJldHVybiBmdW5jdGlvbihpbnB1dCwgaW5pdCwgcm93KSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIGluaXQgPT09IFwiZnVuY3Rpb25cIikgcm93ID0gaW5pdCwgaW5pdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gdGV4dChpbnB1dCwgaW5pdCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHBhcnNlKHJlc3BvbnNlLCByb3cpO1xuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkc3YoZGVsaW1pdGVyLCBpbnB1dCwgaW5pdCwgcm93KSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBpbml0ID09PSBcImZ1bmN0aW9uXCIpIHJvdyA9IGluaXQsIGluaXQgPSB1bmRlZmluZWQ7XG4gIHZhciBmb3JtYXQgPSBkc3ZGb3JtYXQoZGVsaW1pdGVyKTtcbiAgcmV0dXJuIHRleHQoaW5wdXQsIGluaXQpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gZm9ybWF0LnBhcnNlKHJlc3BvbnNlLCByb3cpO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciBjc3YgPSBkc3ZQYXJzZShjc3ZQYXJzZSk7XG5leHBvcnQgdmFyIHRzdiA9IGRzdlBhcnNlKHRzdlBhcnNlKTtcbiIsImZ1bmN0aW9uIHJlc3BvbnNlSnNvbihyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlSnNvbik7XG59XG4iLCJpbXBvcnQgdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5cbmZ1bmN0aW9uIHBhcnNlcih0eXBlKSB7XG4gIHJldHVybiBmdW5jdGlvbihpbnB1dCwgaW5pdCkgIHtcbiAgICByZXR1cm4gdGV4dChpbnB1dCwgaW5pdCkudGhlbihmdW5jdGlvbih0ZXh0KSB7XG4gICAgICByZXR1cm4gKG5ldyBET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyh0ZXh0LCB0eXBlKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VyKFwiYXBwbGljYXRpb24veG1sXCIpO1xuXG5leHBvcnQgdmFyIGh0bWwgPSBwYXJzZXIoXCJ0ZXh0L2h0bWxcIik7XG5cbmV4cG9ydCB2YXIgc3ZnID0gcGFyc2VyKFwiaW1hZ2Uvc3ZnK3htbFwiKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGQpIHtcbiAgdmFyIHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQpLFxuICAgICAgeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCk7XG4gIHJldHVybiBhZGQodGhpcy5jb3Zlcih4LCB5KSwgeCwgeSwgZCk7XG59XG5cbmZ1bmN0aW9uIGFkZCh0cmVlLCB4LCB5LCBkKSB7XG4gIGlmIChpc05hTih4KSB8fCBpc05hTih5KSkgcmV0dXJuIHRyZWU7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gIHZhciBwYXJlbnQsXG4gICAgICBub2RlID0gdHJlZS5fcm9vdCxcbiAgICAgIGxlYWYgPSB7ZGF0YTogZH0sXG4gICAgICB4MCA9IHRyZWUuX3gwLFxuICAgICAgeTAgPSB0cmVlLl95MCxcbiAgICAgIHgxID0gdHJlZS5feDEsXG4gICAgICB5MSA9IHRyZWUuX3kxLFxuICAgICAgeG0sXG4gICAgICB5bSxcbiAgICAgIHhwLFxuICAgICAgeXAsXG4gICAgICByaWdodCxcbiAgICAgIGJvdHRvbSxcbiAgICAgIGksXG4gICAgICBqO1xuXG4gIC8vIElmIHRoZSB0cmVlIGlzIGVtcHR5LCBpbml0aWFsaXplIHRoZSByb290IGFzIGEgbGVhZi5cbiAgaWYgKCFub2RlKSByZXR1cm4gdHJlZS5fcm9vdCA9IGxlYWYsIHRyZWU7XG5cbiAgLy8gRmluZCB0aGUgZXhpc3RpbmcgbGVhZiBmb3IgdGhlIG5ldyBwb2ludCwgb3IgYWRkIGl0LlxuICB3aGlsZSAobm9kZS5sZW5ndGgpIHtcbiAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtOyBlbHNlIHgxID0geG07XG4gICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgICBpZiAocGFyZW50ID0gbm9kZSwgIShub2RlID0gbm9kZVtpID0gYm90dG9tIDw8IDEgfCByaWdodF0pKSByZXR1cm4gcGFyZW50W2ldID0gbGVhZiwgdHJlZTtcbiAgfVxuXG4gIC8vIElzIHRoZSBuZXcgcG9pbnQgaXMgZXhhY3RseSBjb2luY2lkZW50IHdpdGggdGhlIGV4aXN0aW5nIHBvaW50P1xuICB4cCA9ICt0cmVlLl94LmNhbGwobnVsbCwgbm9kZS5kYXRhKTtcbiAgeXAgPSArdHJlZS5feS5jYWxsKG51bGwsIG5vZGUuZGF0YSk7XG4gIGlmICh4ID09PSB4cCAmJiB5ID09PSB5cCkgcmV0dXJuIGxlYWYubmV4dCA9IG5vZGUsIHBhcmVudCA/IHBhcmVudFtpXSA9IGxlYWYgOiB0cmVlLl9yb290ID0gbGVhZiwgdHJlZTtcblxuICAvLyBPdGhlcndpc2UsIHNwbGl0IHRoZSBsZWFmIG5vZGUgdW50aWwgdGhlIG9sZCBhbmQgbmV3IHBvaW50IGFyZSBzZXBhcmF0ZWQuXG4gIGRvIHtcbiAgICBwYXJlbnQgPSBwYXJlbnQgPyBwYXJlbnRbaV0gPSBuZXcgQXJyYXkoNCkgOiB0cmVlLl9yb290ID0gbmV3IEFycmF5KDQpO1xuICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xuICB9IHdoaWxlICgoaSA9IGJvdHRvbSA8PCAxIHwgcmlnaHQpID09PSAoaiA9ICh5cCA+PSB5bSkgPDwgMSB8ICh4cCA+PSB4bSkpKTtcbiAgcmV0dXJuIHBhcmVudFtqXSA9IG5vZGUsIHBhcmVudFtpXSA9IGxlYWYsIHRyZWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRBbGwoZGF0YSkge1xuICB2YXIgZCwgaSwgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB4eiA9IG5ldyBBcnJheShuKSxcbiAgICAgIHl6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgeDAgPSBJbmZpbml0eSxcbiAgICAgIHkwID0gSW5maW5pdHksXG4gICAgICB4MSA9IC1JbmZpbml0eSxcbiAgICAgIHkxID0gLUluZmluaXR5O1xuXG4gIC8vIENvbXB1dGUgdGhlIHBvaW50cyBhbmQgdGhlaXIgZXh0ZW50LlxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKGlzTmFOKHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQgPSBkYXRhW2ldKSkgfHwgaXNOYU4oeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCkpKSBjb250aW51ZTtcbiAgICB4eltpXSA9IHg7XG4gICAgeXpbaV0gPSB5O1xuICAgIGlmICh4IDwgeDApIHgwID0geDtcbiAgICBpZiAoeCA+IHgxKSB4MSA9IHg7XG4gICAgaWYgKHkgPCB5MCkgeTAgPSB5O1xuICAgIGlmICh5ID4geTEpIHkxID0geTtcbiAgfVxuXG4gIC8vIElmIHRoZXJlIHdlcmUgbm8gKHZhbGlkKSBwb2ludHMsIGFib3J0LlxuICBpZiAoeDAgPiB4MSB8fCB5MCA+IHkxKSByZXR1cm4gdGhpcztcblxuICAvLyBFeHBhbmQgdGhlIHRyZWUgdG8gY292ZXIgdGhlIG5ldyBwb2ludHMuXG4gIHRoaXMuY292ZXIoeDAsIHkwKS5jb3Zlcih4MSwgeTEpO1xuXG4gIC8vIEFkZCB0aGUgbmV3IHBvaW50cy5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgIGFkZCh0aGlzLCB4eltpXSwgeXpbaV0sIGRhdGFbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5KSB7XG4gIGlmIChpc05hTih4ID0gK3gpIHx8IGlzTmFOKHkgPSAreSkpIHJldHVybiB0aGlzOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICB2YXIgeDAgPSB0aGlzLl94MCxcbiAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICB4MSA9IHRoaXMuX3gxLFxuICAgICAgeTEgPSB0aGlzLl95MTtcblxuICAvLyBJZiB0aGUgcXVhZHRyZWUgaGFzIG5vIGV4dGVudCwgaW5pdGlhbGl6ZSB0aGVtLlxuICAvLyBJbnRlZ2VyIGV4dGVudCBhcmUgbmVjZXNzYXJ5IHNvIHRoYXQgaWYgd2UgbGF0ZXIgZG91YmxlIHRoZSBleHRlbnQsXG4gIC8vIHRoZSBleGlzdGluZyBxdWFkcmFudCBib3VuZGFyaWVzIGRvbuKAmXQgY2hhbmdlIGR1ZSB0byBmbG9hdGluZyBwb2ludCBlcnJvciFcbiAgaWYgKGlzTmFOKHgwKSkge1xuICAgIHgxID0gKHgwID0gTWF0aC5mbG9vcih4KSkgKyAxO1xuICAgIHkxID0gKHkwID0gTWF0aC5mbG9vcih5KSkgKyAxO1xuICB9XG5cbiAgLy8gT3RoZXJ3aXNlLCBkb3VibGUgcmVwZWF0ZWRseSB0byBjb3Zlci5cbiAgZWxzZSB7XG4gICAgdmFyIHogPSB4MSAtIHgwLFxuICAgICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBpO1xuXG4gICAgd2hpbGUgKHgwID4geCB8fCB4ID49IHgxIHx8IHkwID4geSB8fCB5ID49IHkxKSB7XG4gICAgICBpID0gKHkgPCB5MCkgPDwgMSB8ICh4IDwgeDApO1xuICAgICAgcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50LCB6ICo9IDI7XG4gICAgICBzd2l0Y2ggKGkpIHtcbiAgICAgICAgY2FzZSAwOiB4MSA9IHgwICsgeiwgeTEgPSB5MCArIHo7IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHgwID0geDEgLSB6LCB5MSA9IHkwICsgejsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogeDEgPSB4MCArIHosIHkwID0geTEgLSB6OyBicmVhaztcbiAgICAgICAgY2FzZSAzOiB4MCA9IHgxIC0geiwgeTAgPSB5MSAtIHo7IGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9yb290ICYmIHRoaXMuX3Jvb3QubGVuZ3RoKSB0aGlzLl9yb290ID0gbm9kZTtcbiAgfVxuXG4gIHRoaXMuX3gwID0geDA7XG4gIHRoaXMuX3kwID0geTA7XG4gIHRoaXMuX3gxID0geDE7XG4gIHRoaXMuX3kxID0geTE7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdGhpcy5ub2RlID0gbm9kZTtcbiAgdGhpcy54MCA9IHgwO1xuICB0aGlzLnkwID0geTA7XG4gIHRoaXMueDEgPSB4MTtcbiAgdGhpcy55MSA9IHkxO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRYKGQpIHtcbiAgcmV0dXJuIGRbMF07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKF8pIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhpcy5feCA9IF8sIHRoaXMpIDogdGhpcy5feDtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0WShkKSB7XG4gIHJldHVybiBkWzFdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihfKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoaXMuX3kgPSBfLCB0aGlzKSA6IHRoaXMuX3k7XG59XG4iLCJpbXBvcnQgdHJlZV9hZGQsIHthZGRBbGwgYXMgdHJlZV9hZGRBbGx9IGZyb20gXCIuL2FkZFwiO1xuaW1wb3J0IHRyZWVfY292ZXIgZnJvbSBcIi4vY292ZXJcIjtcbmltcG9ydCB0cmVlX2RhdGEgZnJvbSBcIi4vZGF0YVwiO1xuaW1wb3J0IHRyZWVfZXh0ZW50IGZyb20gXCIuL2V4dGVudFwiO1xuaW1wb3J0IHRyZWVfZmluZCBmcm9tIFwiLi9maW5kXCI7XG5pbXBvcnQgdHJlZV9yZW1vdmUsIHtyZW1vdmVBbGwgYXMgdHJlZV9yZW1vdmVBbGx9IGZyb20gXCIuL3JlbW92ZVwiO1xuaW1wb3J0IHRyZWVfcm9vdCBmcm9tIFwiLi9yb290XCI7XG5pbXBvcnQgdHJlZV9zaXplIGZyb20gXCIuL3NpemVcIjtcbmltcG9ydCB0cmVlX3Zpc2l0IGZyb20gXCIuL3Zpc2l0XCI7XG5pbXBvcnQgdHJlZV92aXNpdEFmdGVyIGZyb20gXCIuL3Zpc2l0QWZ0ZXJcIjtcbmltcG9ydCB0cmVlX3gsIHtkZWZhdWx0WH0gZnJvbSBcIi4veFwiO1xuaW1wb3J0IHRyZWVfeSwge2RlZmF1bHRZfSBmcm9tIFwiLi95XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHF1YWR0cmVlKG5vZGVzLCB4LCB5KSB7XG4gIHZhciB0cmVlID0gbmV3IFF1YWR0cmVlKHggPT0gbnVsbCA/IGRlZmF1bHRYIDogeCwgeSA9PSBudWxsID8gZGVmYXVsdFkgOiB5LCBOYU4sIE5hTiwgTmFOLCBOYU4pO1xuICByZXR1cm4gbm9kZXMgPT0gbnVsbCA/IHRyZWUgOiB0cmVlLmFkZEFsbChub2Rlcyk7XG59XG5cbmZ1bmN0aW9uIFF1YWR0cmVlKHgsIHksIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHRoaXMuX3ggPSB4O1xuICB0aGlzLl95ID0geTtcbiAgdGhpcy5feDAgPSB4MDtcbiAgdGhpcy5feTAgPSB5MDtcbiAgdGhpcy5feDEgPSB4MTtcbiAgdGhpcy5feTEgPSB5MTtcbiAgdGhpcy5fcm9vdCA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gbGVhZl9jb3B5KGxlYWYpIHtcbiAgdmFyIGNvcHkgPSB7ZGF0YTogbGVhZi5kYXRhfSwgbmV4dCA9IGNvcHk7XG4gIHdoaWxlIChsZWFmID0gbGVhZi5uZXh0KSBuZXh0ID0gbmV4dC5uZXh0ID0ge2RhdGE6IGxlYWYuZGF0YX07XG4gIHJldHVybiBjb3B5O1xufVxuXG52YXIgdHJlZVByb3RvID0gcXVhZHRyZWUucHJvdG90eXBlID0gUXVhZHRyZWUucHJvdG90eXBlO1xuXG50cmVlUHJvdG8uY29weSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY29weSA9IG5ldyBRdWFkdHJlZSh0aGlzLl94LCB0aGlzLl95LCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSksXG4gICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgIG5vZGVzLFxuICAgICAgY2hpbGQ7XG5cbiAgaWYgKCFub2RlKSByZXR1cm4gY29weTtcblxuICBpZiAoIW5vZGUubGVuZ3RoKSByZXR1cm4gY29weS5fcm9vdCA9IGxlYWZfY29weShub2RlKSwgY29weTtcblxuICBub2RlcyA9IFt7c291cmNlOiBub2RlLCB0YXJnZXQ6IGNvcHkuX3Jvb3QgPSBuZXcgQXJyYXkoNCl9XTtcbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlLnNvdXJjZVtpXSkge1xuICAgICAgICBpZiAoY2hpbGQubGVuZ3RoKSBub2Rlcy5wdXNoKHtzb3VyY2U6IGNoaWxkLCB0YXJnZXQ6IG5vZGUudGFyZ2V0W2ldID0gbmV3IEFycmF5KDQpfSk7XG4gICAgICAgIGVsc2Ugbm9kZS50YXJnZXRbaV0gPSBsZWFmX2NvcHkoY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufTtcblxudHJlZVByb3RvLmFkZCA9IHRyZWVfYWRkO1xudHJlZVByb3RvLmFkZEFsbCA9IHRyZWVfYWRkQWxsO1xudHJlZVByb3RvLmNvdmVyID0gdHJlZV9jb3ZlcjtcbnRyZWVQcm90by5kYXRhID0gdHJlZV9kYXRhO1xudHJlZVByb3RvLmV4dGVudCA9IHRyZWVfZXh0ZW50O1xudHJlZVByb3RvLmZpbmQgPSB0cmVlX2ZpbmQ7XG50cmVlUHJvdG8ucmVtb3ZlID0gdHJlZV9yZW1vdmU7XG50cmVlUHJvdG8ucmVtb3ZlQWxsID0gdHJlZV9yZW1vdmVBbGw7XG50cmVlUHJvdG8ucm9vdCA9IHRyZWVfcm9vdDtcbnRyZWVQcm90by5zaXplID0gdHJlZV9zaXplO1xudHJlZVByb3RvLnZpc2l0ID0gdHJlZV92aXNpdDtcbnRyZWVQcm90by52aXNpdEFmdGVyID0gdHJlZV92aXNpdEFmdGVyO1xudHJlZVByb3RvLnggPSB0cmVlX3g7XG50cmVlUHJvdG8ueSA9IHRyZWVfeTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgZGF0YSA9IFtdO1xuICB0aGlzLnZpc2l0KGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUubGVuZ3RoKSBkbyBkYXRhLnB1c2gobm9kZS5kYXRhKTsgd2hpbGUgKG5vZGUgPSBub2RlLm5leHQpXG4gIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKF8pIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5jb3ZlcigrX1swXVswXSwgK19bMF1bMV0pLmNvdmVyKCtfWzFdWzBdLCArX1sxXVsxXSlcbiAgICAgIDogaXNOYU4odGhpcy5feDApID8gdW5kZWZpbmVkIDogW1t0aGlzLl94MCwgdGhpcy5feTBdLCBbdGhpcy5feDEsIHRoaXMuX3kxXV07XG59XG4iLCJpbXBvcnQgUXVhZCBmcm9tIFwiLi9xdWFkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHksIHJhZGl1cykge1xuICB2YXIgZGF0YSxcbiAgICAgIHgwID0gdGhpcy5feDAsXG4gICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgeDEsXG4gICAgICB5MSxcbiAgICAgIHgyLFxuICAgICAgeTIsXG4gICAgICB4MyA9IHRoaXMuX3gxLFxuICAgICAgeTMgPSB0aGlzLl95MSxcbiAgICAgIHF1YWRzID0gW10sXG4gICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgIHEsXG4gICAgICBpO1xuXG4gIGlmIChub2RlKSBxdWFkcy5wdXNoKG5ldyBRdWFkKG5vZGUsIHgwLCB5MCwgeDMsIHkzKSk7XG4gIGlmIChyYWRpdXMgPT0gbnVsbCkgcmFkaXVzID0gSW5maW5pdHk7XG4gIGVsc2Uge1xuICAgIHgwID0geCAtIHJhZGl1cywgeTAgPSB5IC0gcmFkaXVzO1xuICAgIHgzID0geCArIHJhZGl1cywgeTMgPSB5ICsgcmFkaXVzO1xuICAgIHJhZGl1cyAqPSByYWRpdXM7XG4gIH1cblxuICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG5cbiAgICAvLyBTdG9wIHNlYXJjaGluZyBpZiB0aGlzIHF1YWRyYW50IGNhbuKAmXQgY29udGFpbiBhIGNsb3NlciBub2RlLlxuICAgIGlmICghKG5vZGUgPSBxLm5vZGUpXG4gICAgICAgIHx8ICh4MSA9IHEueDApID4geDNcbiAgICAgICAgfHwgKHkxID0gcS55MCkgPiB5M1xuICAgICAgICB8fCAoeDIgPSBxLngxKSA8IHgwXG4gICAgICAgIHx8ICh5MiA9IHEueTEpIDwgeTApIGNvbnRpbnVlO1xuXG4gICAgLy8gQmlzZWN0IHRoZSBjdXJyZW50IHF1YWRyYW50LlxuICAgIGlmIChub2RlLmxlbmd0aCkge1xuICAgICAgdmFyIHhtID0gKHgxICsgeDIpIC8gMixcbiAgICAgICAgICB5bSA9ICh5MSArIHkyKSAvIDI7XG5cbiAgICAgIHF1YWRzLnB1c2goXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbM10sIHhtLCB5bSwgeDIsIHkyKSxcbiAgICAgICAgbmV3IFF1YWQobm9kZVsyXSwgeDEsIHltLCB4bSwgeTIpLFxuICAgICAgICBuZXcgUXVhZChub2RlWzFdLCB4bSwgeTEsIHgyLCB5bSksXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbMF0sIHgxLCB5MSwgeG0sIHltKVxuICAgICAgKTtcblxuICAgICAgLy8gVmlzaXQgdGhlIGNsb3Nlc3QgcXVhZHJhbnQgZmlyc3QuXG4gICAgICBpZiAoaSA9ICh5ID49IHltKSA8PCAxIHwgKHggPj0geG0pKSB7XG4gICAgICAgIHEgPSBxdWFkc1txdWFkcy5sZW5ndGggLSAxXTtcbiAgICAgICAgcXVhZHNbcXVhZHMubGVuZ3RoIC0gMV0gPSBxdWFkc1txdWFkcy5sZW5ndGggLSAxIC0gaV07XG4gICAgICAgIHF1YWRzW3F1YWRzLmxlbmd0aCAtIDEgLSBpXSA9IHE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVmlzaXQgdGhpcyBwb2ludC4gKFZpc2l0aW5nIGNvaW5jaWRlbnQgcG9pbnRzIGlzbuKAmXQgbmVjZXNzYXJ5ISlcbiAgICBlbHNlIHtcbiAgICAgIHZhciBkeCA9IHggLSArdGhpcy5feC5jYWxsKG51bGwsIG5vZGUuZGF0YSksXG4gICAgICAgICAgZHkgPSB5IC0gK3RoaXMuX3kuY2FsbChudWxsLCBub2RlLmRhdGEpLFxuICAgICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICBpZiAoZDIgPCByYWRpdXMpIHtcbiAgICAgICAgdmFyIGQgPSBNYXRoLnNxcnQocmFkaXVzID0gZDIpO1xuICAgICAgICB4MCA9IHggLSBkLCB5MCA9IHkgLSBkO1xuICAgICAgICB4MyA9IHggKyBkLCB5MyA9IHkgKyBkO1xuICAgICAgICBkYXRhID0gbm9kZS5kYXRhO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZCkge1xuICBpZiAoaXNOYU4oeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCkpIHx8IGlzTmFOKHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpKSkgcmV0dXJuIHRoaXM7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gIHZhciBwYXJlbnQsXG4gICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgIHJldGFpbmVyLFxuICAgICAgcHJldmlvdXMsXG4gICAgICBuZXh0LFxuICAgICAgeDAgPSB0aGlzLl94MCxcbiAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICB4MSA9IHRoaXMuX3gxLFxuICAgICAgeTEgPSB0aGlzLl95MSxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgeG0sXG4gICAgICB5bSxcbiAgICAgIHJpZ2h0LFxuICAgICAgYm90dG9tLFxuICAgICAgaSxcbiAgICAgIGo7XG5cbiAgLy8gSWYgdGhlIHRyZWUgaXMgZW1wdHksIGluaXRpYWxpemUgdGhlIHJvb3QgYXMgYSBsZWFmLlxuICBpZiAoIW5vZGUpIHJldHVybiB0aGlzO1xuXG4gIC8vIEZpbmQgdGhlIGxlYWYgbm9kZSBmb3IgdGhlIHBvaW50LlxuICAvLyBXaGlsZSBkZXNjZW5kaW5nLCBhbHNvIHJldGFpbiB0aGUgZGVlcGVzdCBwYXJlbnQgd2l0aCBhIG5vbi1yZW1vdmVkIHNpYmxpbmcuXG4gIGlmIChub2RlLmxlbmd0aCkgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtOyBlbHNlIHgxID0geG07XG4gICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgICBpZiAoIShwYXJlbnQgPSBub2RlLCBub2RlID0gbm9kZVtpID0gYm90dG9tIDw8IDEgfCByaWdodF0pKSByZXR1cm4gdGhpcztcbiAgICBpZiAoIW5vZGUubGVuZ3RoKSBicmVhaztcbiAgICBpZiAocGFyZW50WyhpICsgMSkgJiAzXSB8fCBwYXJlbnRbKGkgKyAyKSAmIDNdIHx8IHBhcmVudFsoaSArIDMpICYgM10pIHJldGFpbmVyID0gcGFyZW50LCBqID0gaTtcbiAgfVxuXG4gIC8vIEZpbmQgdGhlIHBvaW50IHRvIHJlbW92ZS5cbiAgd2hpbGUgKG5vZGUuZGF0YSAhPT0gZCkgaWYgKCEocHJldmlvdXMgPSBub2RlLCBub2RlID0gbm9kZS5uZXh0KSkgcmV0dXJuIHRoaXM7XG4gIGlmIChuZXh0ID0gbm9kZS5uZXh0KSBkZWxldGUgbm9kZS5uZXh0O1xuXG4gIC8vIElmIHRoZXJlIGFyZSBtdWx0aXBsZSBjb2luY2lkZW50IHBvaW50cywgcmVtb3ZlIGp1c3QgdGhlIHBvaW50LlxuICBpZiAocHJldmlvdXMpIHJldHVybiAobmV4dCA/IHByZXZpb3VzLm5leHQgPSBuZXh0IDogZGVsZXRlIHByZXZpb3VzLm5leHQpLCB0aGlzO1xuXG4gIC8vIElmIHRoaXMgaXMgdGhlIHJvb3QgcG9pbnQsIHJlbW92ZSBpdC5cbiAgaWYgKCFwYXJlbnQpIHJldHVybiB0aGlzLl9yb290ID0gbmV4dCwgdGhpcztcblxuICAvLyBSZW1vdmUgdGhpcyBsZWFmLlxuICBuZXh0ID8gcGFyZW50W2ldID0gbmV4dCA6IGRlbGV0ZSBwYXJlbnRbaV07XG5cbiAgLy8gSWYgdGhlIHBhcmVudCBub3cgY29udGFpbnMgZXhhY3RseSBvbmUgbGVhZiwgY29sbGFwc2Ugc3VwZXJmbHVvdXMgcGFyZW50cy5cbiAgaWYgKChub2RlID0gcGFyZW50WzBdIHx8IHBhcmVudFsxXSB8fCBwYXJlbnRbMl0gfHwgcGFyZW50WzNdKVxuICAgICAgJiYgbm9kZSA9PT0gKHBhcmVudFszXSB8fCBwYXJlbnRbMl0gfHwgcGFyZW50WzFdIHx8IHBhcmVudFswXSlcbiAgICAgICYmICFub2RlLmxlbmd0aCkge1xuICAgIGlmIChyZXRhaW5lcikgcmV0YWluZXJbal0gPSBub2RlO1xuICAgIGVsc2UgdGhpcy5fcm9vdCA9IG5vZGU7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUFsbChkYXRhKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gZGF0YS5sZW5ndGg7IGkgPCBuOyArK2kpIHRoaXMucmVtb3ZlKGRhdGFbaV0pO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fcm9vdDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IDA7XG4gIHRoaXMudmlzaXQoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5sZW5ndGgpIGRvICsrc2l6ZTsgd2hpbGUgKG5vZGUgPSBub2RlLm5leHQpXG4gIH0pO1xuICByZXR1cm4gc2l6ZTtcbn1cbiIsImltcG9ydCBRdWFkIGZyb20gXCIuL3F1YWRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIHF1YWRzID0gW10sIHEsIG5vZGUgPSB0aGlzLl9yb290LCBjaGlsZCwgeDAsIHkwLCB4MSwgeTE7XG4gIGlmIChub2RlKSBxdWFkcy5wdXNoKG5ldyBRdWFkKG5vZGUsIHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5feDEsIHRoaXMuX3kxKSk7XG4gIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcbiAgICBpZiAoIWNhbGxiYWNrKG5vZGUgPSBxLm5vZGUsIHgwID0gcS54MCwgeTAgPSBxLnkwLCB4MSA9IHEueDEsIHkxID0gcS55MSkgJiYgbm9kZS5sZW5ndGgpIHtcbiAgICAgIHZhciB4bSA9ICh4MCArIHgxKSAvIDIsIHltID0gKHkwICsgeTEpIC8gMjtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbM10pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5bSwgeDEsIHkxKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsxXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHkwLCB4MSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMF0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5MCwgeG0sIHltKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IFF1YWQgZnJvbSBcIi4vcXVhZFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgcXVhZHMgPSBbXSwgbmV4dCA9IFtdLCBxO1xuICBpZiAodGhpcy5fcm9vdCkgcXVhZHMucHVzaChuZXcgUXVhZCh0aGlzLl9yb290LCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSkpO1xuICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG4gICAgdmFyIG5vZGUgPSBxLm5vZGU7XG4gICAgaWYgKG5vZGUubGVuZ3RoKSB7XG4gICAgICB2YXIgY2hpbGQsIHgwID0gcS54MCwgeTAgPSBxLnkwLCB4MSA9IHEueDEsIHkxID0gcS55MSwgeG0gPSAoeDAgKyB4MSkgLyAyLCB5bSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzBdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeTAsIHhtLCB5bSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsxXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHkwLCB4MSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMl0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5bSwgeG0sIHkxKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzNdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeW0sIHgxLCB5MSkpO1xuICAgIH1cbiAgICBuZXh0LnB1c2gocSk7XG4gIH1cbiAgd2hpbGUgKHEgPSBuZXh0LnBvcCgpKSB7XG4gICAgY2FsbGJhY2socS5ub2RlLCBxLngwLCBxLnkwLCBxLngxLCBxLnkxKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHttYXB9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge3RpbWVyfSBmcm9tIFwiZDMtdGltZXJcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHgoZCkge1xuICByZXR1cm4gZC54O1xufVxuXG5leHBvcnQgZnVuY3Rpb24geShkKSB7XG4gIHJldHVybiBkLnk7XG59XG5cbnZhciBpbml0aWFsUmFkaXVzID0gMTAsXG4gICAgaW5pdGlhbEFuZ2xlID0gTWF0aC5QSSAqICgzIC0gTWF0aC5zcXJ0KDUpKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZXMpIHtcbiAgdmFyIHNpbXVsYXRpb24sXG4gICAgICBhbHBoYSA9IDEsXG4gICAgICBhbHBoYU1pbiA9IDAuMDAxLFxuICAgICAgYWxwaGFEZWNheSA9IDEgLSBNYXRoLnBvdyhhbHBoYU1pbiwgMSAvIDMwMCksXG4gICAgICBhbHBoYVRhcmdldCA9IDAsXG4gICAgICB2ZWxvY2l0eURlY2F5ID0gMC42LFxuICAgICAgZm9yY2VzID0gbWFwKCksXG4gICAgICBzdGVwcGVyID0gdGltZXIoc3RlcCksXG4gICAgICBldmVudCA9IGRpc3BhdGNoKFwidGlja1wiLCBcImVuZFwiKTtcblxuICBpZiAobm9kZXMgPT0gbnVsbCkgbm9kZXMgPSBbXTtcblxuICBmdW5jdGlvbiBzdGVwKCkge1xuICAgIHRpY2soKTtcbiAgICBldmVudC5jYWxsKFwidGlja1wiLCBzaW11bGF0aW9uKTtcbiAgICBpZiAoYWxwaGEgPCBhbHBoYU1pbikge1xuICAgICAgc3RlcHBlci5zdG9wKCk7XG4gICAgICBldmVudC5jYWxsKFwiZW5kXCIsIHNpbXVsYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soaXRlcmF0aW9ucykge1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlO1xuXG4gICAgaWYgKGl0ZXJhdGlvbnMgPT09IHVuZGVmaW5lZCkgaXRlcmF0aW9ucyA9IDE7XG5cbiAgICBmb3IgKHZhciBrID0gMDsgayA8IGl0ZXJhdGlvbnM7ICsraykge1xuICAgICAgYWxwaGEgKz0gKGFscGhhVGFyZ2V0IC0gYWxwaGEpICogYWxwaGFEZWNheTtcblxuICAgICAgZm9yY2VzLmVhY2goZnVuY3Rpb24gKGZvcmNlKSB7XG4gICAgICAgIGZvcmNlKGFscGhhKTtcbiAgICAgIH0pO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKG5vZGUuZnggPT0gbnVsbCkgbm9kZS54ICs9IG5vZGUudnggKj0gdmVsb2NpdHlEZWNheTtcbiAgICAgICAgZWxzZSBub2RlLnggPSBub2RlLmZ4LCBub2RlLnZ4ID0gMDtcbiAgICAgICAgaWYgKG5vZGUuZnkgPT0gbnVsbCkgbm9kZS55ICs9IG5vZGUudnkgKj0gdmVsb2NpdHlEZWNheTtcbiAgICAgICAgZWxzZSBub2RlLnkgPSBub2RlLmZ5LCBub2RlLnZ5ID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2ltdWxhdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVOb2RlcygpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLmluZGV4ID0gaTtcbiAgICAgIGlmIChub2RlLmZ4ICE9IG51bGwpIG5vZGUueCA9IG5vZGUuZng7XG4gICAgICBpZiAobm9kZS5meSAhPSBudWxsKSBub2RlLnkgPSBub2RlLmZ5O1xuICAgICAgaWYgKGlzTmFOKG5vZGUueCkgfHwgaXNOYU4obm9kZS55KSkge1xuICAgICAgICB2YXIgcmFkaXVzID0gaW5pdGlhbFJhZGl1cyAqIE1hdGguc3FydChpKSwgYW5nbGUgPSBpICogaW5pdGlhbEFuZ2xlO1xuICAgICAgICBub2RlLnggPSByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIG5vZGUueSA9IHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc05hTihub2RlLnZ4KSB8fCBpc05hTihub2RlLnZ5KSkge1xuICAgICAgICBub2RlLnZ4ID0gbm9kZS52eSA9IDA7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZUZvcmNlKGZvcmNlKSB7XG4gICAgaWYgKGZvcmNlLmluaXRpYWxpemUpIGZvcmNlLmluaXRpYWxpemUobm9kZXMpO1xuICAgIHJldHVybiBmb3JjZTtcbiAgfVxuXG4gIGluaXRpYWxpemVOb2RlcygpO1xuXG4gIHJldHVybiBzaW11bGF0aW9uID0ge1xuICAgIHRpY2s6IHRpY2ssXG5cbiAgICByZXN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdGVwcGVyLnJlc3RhcnQoc3RlcCksIHNpbXVsYXRpb247XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHN0ZXBwZXIuc3RvcCgpLCBzaW11bGF0aW9uO1xuICAgIH0sXG5cbiAgICBub2RlczogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZXMgPSBfLCBpbml0aWFsaXplTm9kZXMoKSwgZm9yY2VzLmVhY2goaW5pdGlhbGl6ZUZvcmNlKSwgc2ltdWxhdGlvbikgOiBub2RlcztcbiAgICB9LFxuXG4gICAgYWxwaGE6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhID0gK18sIHNpbXVsYXRpb24pIDogYWxwaGE7XG4gICAgfSxcblxuICAgIGFscGhhTWluOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYU1pbiA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhTWluO1xuICAgIH0sXG5cbiAgICBhbHBoYURlY2F5OiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYURlY2F5ID0gK18sIHNpbXVsYXRpb24pIDogK2FscGhhRGVjYXk7XG4gICAgfSxcblxuICAgIGFscGhhVGFyZ2V0OiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYVRhcmdldCA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhVGFyZ2V0O1xuICAgIH0sXG5cbiAgICB2ZWxvY2l0eURlY2F5OiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2ZWxvY2l0eURlY2F5ID0gMSAtIF8sIHNpbXVsYXRpb24pIDogMSAtIHZlbG9jaXR5RGVjYXk7XG4gICAgfSxcblxuICAgIGZvcmNlOiBmdW5jdGlvbihuYW1lLCBfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAoKF8gPT0gbnVsbCA/IGZvcmNlcy5yZW1vdmUobmFtZSkgOiBmb3JjZXMuc2V0KG5hbWUsIGluaXRpYWxpemVGb3JjZShfKSkpLCBzaW11bGF0aW9uKSA6IGZvcmNlcy5nZXQobmFtZSk7XG4gICAgfSxcblxuICAgIGZpbmQ6IGZ1bmN0aW9uKHgsIHksIHJhZGl1cykge1xuICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgICAgZHgsXG4gICAgICAgICAgZHksXG4gICAgICAgICAgZDIsXG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICBjbG9zZXN0O1xuXG4gICAgICBpZiAocmFkaXVzID09IG51bGwpIHJhZGl1cyA9IEluZmluaXR5O1xuICAgICAgZWxzZSByYWRpdXMgKj0gcmFkaXVzO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgZHggPSB4IC0gbm9kZS54O1xuICAgICAgICBkeSA9IHkgLSBub2RlLnk7XG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIGlmIChkMiA8IHJhZGl1cykgY2xvc2VzdCA9IG5vZGUsIHJhZGl1cyA9IGQyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2xvc2VzdDtcbiAgICB9LFxuXG4gICAgb246IGZ1bmN0aW9uKG5hbWUsIF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA/IChldmVudC5vbihuYW1lLCBfKSwgc2ltdWxhdGlvbikgOiBldmVudC5vbihuYW1lKTtcbiAgICB9XG4gIH07XG59XG4iLCIvLyBDb21wdXRlcyB0aGUgZGVjaW1hbCBjb2VmZmljaWVudCBhbmQgZXhwb25lbnQgb2YgdGhlIHNwZWNpZmllZCBudW1iZXIgeCB3aXRoXG4vLyBzaWduaWZpY2FudCBkaWdpdHMgcCwgd2hlcmUgeCBpcyBwb3NpdGl2ZSBhbmQgcCBpcyBpbiBbMSwgMjFdIG9yIHVuZGVmaW5lZC5cbi8vIEZvciBleGFtcGxlLCBmb3JtYXREZWNpbWFsKDEuMjMpIHJldHVybnMgW1wiMTIzXCIsIDBdLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIMKxSW5maW5pdHlcbiAgdmFyIGksIGNvZWZmaWNpZW50ID0geC5zbGljZSgwLCBpKTtcblxuICAvLyBUaGUgc3RyaW5nIHJldHVybmVkIGJ5IHRvRXhwb25lbnRpYWwgZWl0aGVyIGhhcyB0aGUgZm9ybSBcXGRcXC5cXGQrZVstK11cXGQrXG4gIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gIHJldHVybiBbXG4gICAgY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCxcbiAgICAreC5zbGljZShpICsgMSlcbiAgXTtcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWwuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geCA9IGZvcm1hdERlY2ltYWwoTWF0aC5hYnMoeCkpLCB4ID8geFsxXSA6IE5hTjtcbn1cbiIsIi8vIFtbZmlsbF1hbGlnbl1bc2lnbl1bc3ltYm9sXVswXVt3aWR0aF1bLF1bLnByZWNpc2lvbl1bfl1bdHlwZV1cbnZhciByZSA9IC9eKD86KC4pPyhbPD49Xl0pKT8oWytcXC0oIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuXFxkKyk/KH4pPyhbYS16JV0pPyQvaTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICBpZiAoIShtYXRjaCA9IHJlLmV4ZWMoc3BlY2lmaWVyKSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZm9ybWF0OiBcIiArIHNwZWNpZmllcik7XG4gIHZhciBtYXRjaDtcbiAgcmV0dXJuIG5ldyBGb3JtYXRTcGVjaWZpZXIoe1xuICAgIGZpbGw6IG1hdGNoWzFdLFxuICAgIGFsaWduOiBtYXRjaFsyXSxcbiAgICBzaWduOiBtYXRjaFszXSxcbiAgICBzeW1ib2w6IG1hdGNoWzRdLFxuICAgIHplcm86IG1hdGNoWzVdLFxuICAgIHdpZHRoOiBtYXRjaFs2XSxcbiAgICBjb21tYTogbWF0Y2hbN10sXG4gICAgcHJlY2lzaW9uOiBtYXRjaFs4XSAmJiBtYXRjaFs4XS5zbGljZSgxKSxcbiAgICB0cmltOiBtYXRjaFs5XSxcbiAgICB0eXBlOiBtYXRjaFsxMF1cbiAgfSk7XG59XG5cbmZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUgPSBGb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlOyAvLyBpbnN0YW5jZW9mXG5cbmV4cG9ydCBmdW5jdGlvbiBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIHRoaXMuZmlsbCA9IHNwZWNpZmllci5maWxsID09PSB1bmRlZmluZWQgPyBcIiBcIiA6IHNwZWNpZmllci5maWxsICsgXCJcIjtcbiAgdGhpcy5hbGlnbiA9IHNwZWNpZmllci5hbGlnbiA9PT0gdW5kZWZpbmVkID8gXCI+XCIgOiBzcGVjaWZpZXIuYWxpZ24gKyBcIlwiO1xuICB0aGlzLnNpZ24gPSBzcGVjaWZpZXIuc2lnbiA9PT0gdW5kZWZpbmVkID8gXCItXCIgOiBzcGVjaWZpZXIuc2lnbiArIFwiXCI7XG4gIHRoaXMuc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHNwZWNpZmllci5zeW1ib2wgKyBcIlwiO1xuICB0aGlzLnplcm8gPSAhIXNwZWNpZmllci56ZXJvO1xuICB0aGlzLndpZHRoID0gc3BlY2lmaWVyLndpZHRoID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiArc3BlY2lmaWVyLndpZHRoO1xuICB0aGlzLmNvbW1hID0gISFzcGVjaWZpZXIuY29tbWE7XG4gIHRoaXMucHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogK3NwZWNpZmllci5wcmVjaXNpb247XG4gIHRoaXMudHJpbSA9ICEhc3BlY2lmaWVyLnRyaW07XG4gIHRoaXMudHlwZSA9IHNwZWNpZmllci50eXBlID09PSB1bmRlZmluZWQgPyBcIlwiIDogc3BlY2lmaWVyLnR5cGUgKyBcIlwiO1xufVxuXG5Gb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmZpbGxcbiAgICAgICsgdGhpcy5hbGlnblxuICAgICAgKyB0aGlzLnNpZ25cbiAgICAgICsgdGhpcy5zeW1ib2xcbiAgICAgICsgKHRoaXMuemVybyA/IFwiMFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMud2lkdGggPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBNYXRoLm1heCgxLCB0aGlzLndpZHRoIHwgMCkpXG4gICAgICArICh0aGlzLmNvbW1hID8gXCIsXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy5wcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBcIi5cIiArIE1hdGgubWF4KDAsIHRoaXMucHJlY2lzaW9uIHwgMCkpXG4gICAgICArICh0aGlzLnRyaW0gPyBcIn5cIiA6IFwiXCIpXG4gICAgICArIHRoaXMudHlwZTtcbn07XG4iLCIvLyBUcmltcyBpbnNpZ25pZmljYW50IHplcm9zLCBlLmcuLCByZXBsYWNlcyAxLjIwMDBrIHdpdGggMS4yay5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHMpIHtcbiAgb3V0OiBmb3IgKHZhciBuID0gcy5sZW5ndGgsIGkgPSAxLCBpMCA9IC0xLCBpMTsgaSA8IG47ICsraSkge1xuICAgIHN3aXRjaCAoc1tpXSkge1xuICAgICAgY2FzZSBcIi5cIjogaTAgPSBpMSA9IGk7IGJyZWFrO1xuICAgICAgY2FzZSBcIjBcIjogaWYgKGkwID09PSAwKSBpMCA9IGk7IGkxID0gaTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBpZiAoaTAgPiAwKSB7IGlmICghK3NbaV0pIGJyZWFrIG91dDsgaTAgPSAwOyB9IGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTAgPiAwID8gcy5zbGljZSgwLCBpMCkgKyBzLnNsaWNlKGkxICsgMSkgOiBzO1xufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgdmFyIHByZWZpeEV4cG9uZW50O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV0sXG4gICAgICBpID0gZXhwb25lbnQgLSAocHJlZml4RXhwb25lbnQgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCAvIDMpKSkgKiAzKSArIDEsXG4gICAgICBuID0gY29lZmZpY2llbnQubGVuZ3RoO1xuICByZXR1cm4gaSA9PT0gbiA/IGNvZWZmaWNpZW50XG4gICAgICA6IGkgPiBuID8gY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoaSAtIG4gKyAxKS5qb2luKFwiMFwiKVxuICAgICAgOiBpID4gMCA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGkpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShpKVxuICAgICAgOiBcIjAuXCIgKyBuZXcgQXJyYXkoMSAtIGkpLmpvaW4oXCIwXCIpICsgZm9ybWF0RGVjaW1hbCh4LCBNYXRoLm1heCgwLCBwICsgaSAtIDEpKVswXTsgLy8gbGVzcyB0aGFuIDF5IVxufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGUuanNcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgZm9ybWF0O1xuZXhwb3J0IHZhciBmb3JtYXRQcmVmaXg7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICBkZWNpbWFsOiBcIi5cIixcbiAgdGhvdXNhbmRzOiBcIixcIixcbiAgZ3JvdXBpbmc6IFszXSxcbiAgY3VycmVuY3k6IFtcIiRcIiwgXCJcIl0sXG4gIG1pbnVzOiBcIi1cIlxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICBsb2NhbGUgPSBmb3JtYXRMb2NhbGUoZGVmaW5pdGlvbik7XG4gIGZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIGZvcm1hdFByZWZpeCA9IGxvY2FsZS5mb3JtYXRQcmVmaXg7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXTtcbiAgcmV0dXJuIGV4cG9uZW50IDwgMCA/IFwiMC5cIiArIG5ldyBBcnJheSgtZXhwb25lbnQpLmpvaW4oXCIwXCIpICsgY29lZmZpY2llbnRcbiAgICAgIDogY29lZmZpY2llbnQubGVuZ3RoID4gZXhwb25lbnQgKyAxID8gY29lZmZpY2llbnQuc2xpY2UoMCwgZXhwb25lbnQgKyAxKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoZXhwb25lbnQgKyAxKVxuICAgICAgOiBjb2VmZmljaWVudCArIG5ldyBBcnJheShleHBvbmVudCAtIGNvZWZmaWNpZW50Lmxlbmd0aCArIDIpLmpvaW4oXCIwXCIpO1xufVxuIiwiaW1wb3J0IGZvcm1hdFByZWZpeEF1dG8gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGZvcm1hdFJvdW5kZWQgZnJvbSBcIi4vZm9ybWF0Um91bmRlZC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFwiJVwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiAoeCAqIDEwMCkudG9GaXhlZChwKTsgfSxcbiAgXCJiXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMik7IH0sXG4gIFwiY1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiB4ICsgXCJcIjsgfSxcbiAgXCJkXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTApOyB9LFxuICBcImVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0V4cG9uZW50aWFsKHApOyB9LFxuICBcImZcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0ZpeGVkKHApOyB9LFxuICBcImdcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b1ByZWNpc2lvbihwKTsgfSxcbiAgXCJvXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoOCk7IH0sXG4gIFwicFwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApOyB9LFxuICBcInJcIjogZm9ybWF0Um91bmRlZCxcbiAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXG4gIFwiWFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOyB9LFxuICBcInhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNik7IH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5pbXBvcnQgZm9ybWF0R3JvdXAgZnJvbSBcIi4vZm9ybWF0R3JvdXAuanNcIjtcbmltcG9ydCBmb3JtYXROdW1lcmFscyBmcm9tIFwiLi9mb3JtYXROdW1lcmFscy5qc1wiO1xuaW1wb3J0IGZvcm1hdFNwZWNpZmllciBmcm9tIFwiLi9mb3JtYXRTcGVjaWZpZXIuanNcIjtcbmltcG9ydCBmb3JtYXRUcmltIGZyb20gXCIuL2Zvcm1hdFRyaW0uanNcIjtcbmltcG9ydCBmb3JtYXRUeXBlcyBmcm9tIFwiLi9mb3JtYXRUeXBlcy5qc1wiO1xuaW1wb3J0IHtwcmVmaXhFeHBvbmVudH0gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbnZhciBtYXAgPSBBcnJheS5wcm90b3R5cGUubWFwLFxuICAgIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiwrVcIixcIm1cIixcIlwiLFwia1wiLFwiTVwiLFwiR1wiLFwiVFwiLFwiUFwiLFwiRVwiLFwiWlwiLFwiWVwiXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obG9jYWxlKSB7XG4gIHZhciBncm91cCA9IGxvY2FsZS5ncm91cGluZyA9PT0gdW5kZWZpbmVkIHx8IGxvY2FsZS50aG91c2FuZHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0R3JvdXAobWFwLmNhbGwobG9jYWxlLmdyb3VwaW5nLCBOdW1iZXIpLCBsb2NhbGUudGhvdXNhbmRzICsgXCJcIiksXG4gICAgICBjdXJyZW5jeVByZWZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVswXSArIFwiXCIsXG4gICAgICBjdXJyZW5jeVN1ZmZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVsxXSArIFwiXCIsXG4gICAgICBkZWNpbWFsID0gbG9jYWxlLmRlY2ltYWwgPT09IHVuZGVmaW5lZCA/IFwiLlwiIDogbG9jYWxlLmRlY2ltYWwgKyBcIlwiLFxuICAgICAgbnVtZXJhbHMgPSBsb2NhbGUubnVtZXJhbHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0TnVtZXJhbHMobWFwLmNhbGwobG9jYWxlLm51bWVyYWxzLCBTdHJpbmcpKSxcbiAgICAgIHBlcmNlbnQgPSBsb2NhbGUucGVyY2VudCA9PT0gdW5kZWZpbmVkID8gXCIlXCIgOiBsb2NhbGUucGVyY2VudCArIFwiXCIsXG4gICAgICBtaW51cyA9IGxvY2FsZS5taW51cyA9PT0gdW5kZWZpbmVkID8gXCItXCIgOiBsb2NhbGUubWludXMgKyBcIlwiLFxuICAgICAgbmFuID0gbG9jYWxlLm5hbiA9PT0gdW5kZWZpbmVkID8gXCJOYU5cIiA6IGxvY2FsZS5uYW4gKyBcIlwiO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIpIHtcbiAgICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcblxuICAgIHZhciBmaWxsID0gc3BlY2lmaWVyLmZpbGwsXG4gICAgICAgIGFsaWduID0gc3BlY2lmaWVyLmFsaWduLFxuICAgICAgICBzaWduID0gc3BlY2lmaWVyLnNpZ24sXG4gICAgICAgIHN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wsXG4gICAgICAgIHplcm8gPSBzcGVjaWZpZXIuemVybyxcbiAgICAgICAgd2lkdGggPSBzcGVjaWZpZXIud2lkdGgsXG4gICAgICAgIGNvbW1hID0gc3BlY2lmaWVyLmNvbW1hLFxuICAgICAgICBwcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uLFxuICAgICAgICB0cmltID0gc3BlY2lmaWVyLnRyaW0sXG4gICAgICAgIHR5cGUgPSBzcGVjaWZpZXIudHlwZTtcblxuICAgIC8vIFRoZSBcIm5cIiB0eXBlIGlzIGFuIGFsaWFzIGZvciBcIixnXCIuXG4gICAgaWYgKHR5cGUgPT09IFwiblwiKSBjb21tYSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIFRoZSBcIlwiIHR5cGUsIGFuZCBhbnkgaW52YWxpZCB0eXBlLCBpcyBhbiBhbGlhcyBmb3IgXCIuMTJ+Z1wiLlxuICAgIGVsc2UgaWYgKCFmb3JtYXRUeXBlc1t0eXBlXSkgcHJlY2lzaW9uID09PSB1bmRlZmluZWQgJiYgKHByZWNpc2lvbiA9IDEyKSwgdHJpbSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIElmIHplcm8gZmlsbCBpcyBzcGVjaWZpZWQsIHBhZGRpbmcgZ29lcyBhZnRlciBzaWduIGFuZCBiZWZvcmUgZGlnaXRzLlxuICAgIGlmICh6ZXJvIHx8IChmaWxsID09PSBcIjBcIiAmJiBhbGlnbiA9PT0gXCI9XCIpKSB6ZXJvID0gdHJ1ZSwgZmlsbCA9IFwiMFwiLCBhbGlnbiA9IFwiPVwiO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgLy8gRm9yIFNJLXByZWZpeCwgdGhlIHN1ZmZpeCBpcyBsYXppbHkgY29tcHV0ZWQuXG4gICAgdmFyIHByZWZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVByZWZpeCA6IHN5bWJvbCA9PT0gXCIjXCIgJiYgL1tib3hYXS8udGVzdCh0eXBlKSA/IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpIDogXCJcIixcbiAgICAgICAgc3VmZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5U3VmZml4IDogL1slcF0vLnRlc3QodHlwZSkgPyBwZXJjZW50IDogXCJcIjtcblxuICAgIC8vIFdoYXQgZm9ybWF0IGZ1bmN0aW9uIHNob3VsZCB3ZSB1c2U/XG4gICAgLy8gSXMgdGhpcyBhbiBpbnRlZ2VyIHR5cGU/XG4gICAgLy8gQ2FuIHRoaXMgdHlwZSBnZW5lcmF0ZSBleHBvbmVudGlhbCBub3RhdGlvbj9cbiAgICB2YXIgZm9ybWF0VHlwZSA9IGZvcm1hdFR5cGVzW3R5cGVdLFxuICAgICAgICBtYXliZVN1ZmZpeCA9IC9bZGVmZ3BycyVdLy50ZXN0KHR5cGUpO1xuXG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0IHByZWNpc2lvbiBpZiBub3Qgc3BlY2lmaWVkLFxuICAgIC8vIG9yIGNsYW1wIHRoZSBzcGVjaWZpZWQgcHJlY2lzaW9uIHRvIHRoZSBzdXBwb3J0ZWQgcmFuZ2UuXG4gICAgLy8gRm9yIHNpZ25pZmljYW50IHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMSwgMjFdLlxuICAgIC8vIEZvciBmaXhlZCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzAsIDIwXS5cbiAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IDZcbiAgICAgICAgOiAvW2dwcnNdLy50ZXN0KHR5cGUpID8gTWF0aC5tYXgoMSwgTWF0aC5taW4oMjEsIHByZWNpc2lvbikpXG4gICAgICAgIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMjAsIHByZWNpc2lvbikpO1xuXG4gICAgZnVuY3Rpb24gZm9ybWF0KHZhbHVlKSB7XG4gICAgICB2YXIgdmFsdWVQcmVmaXggPSBwcmVmaXgsXG4gICAgICAgICAgdmFsdWVTdWZmaXggPSBzdWZmaXgsXG4gICAgICAgICAgaSwgbiwgYztcblxuICAgICAgaWYgKHR5cGUgPT09IFwiY1wiKSB7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gZm9ybWF0VHlwZSh2YWx1ZSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSArdmFsdWU7XG5cbiAgICAgICAgLy8gUGVyZm9ybSB0aGUgaW5pdGlhbCBmb3JtYXR0aW5nLlxuICAgICAgICB2YXIgdmFsdWVOZWdhdGl2ZSA9IHZhbHVlIDwgMDtcbiAgICAgICAgdmFsdWUgPSBpc05hTih2YWx1ZSkgPyBuYW4gOiBmb3JtYXRUeXBlKE1hdGguYWJzKHZhbHVlKSwgcHJlY2lzaW9uKTtcblxuICAgICAgICAvLyBUcmltIGluc2lnbmlmaWNhbnQgemVyb3MuXG4gICAgICAgIGlmICh0cmltKSB2YWx1ZSA9IGZvcm1hdFRyaW0odmFsdWUpO1xuXG4gICAgICAgIC8vIElmIGEgbmVnYXRpdmUgdmFsdWUgcm91bmRzIHRvIHplcm8gZHVyaW5nIGZvcm1hdHRpbmcsIHRyZWF0IGFzIHBvc2l0aXZlLlxuICAgICAgICBpZiAodmFsdWVOZWdhdGl2ZSAmJiArdmFsdWUgPT09IDApIHZhbHVlTmVnYXRpdmUgPSBmYWxzZTtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgICAgdmFsdWVQcmVmaXggPSAodmFsdWVOZWdhdGl2ZSA/IChzaWduID09PSBcIihcIiA/IHNpZ24gOiBtaW51cykgOiBzaWduID09PSBcIi1cIiB8fCBzaWduID09PSBcIihcIiA/IFwiXCIgOiBzaWduKSArIHZhbHVlUHJlZml4O1xuXG4gICAgICAgIHZhbHVlU3VmZml4ID0gKHR5cGUgPT09IFwic1wiID8gcHJlZml4ZXNbOCArIHByZWZpeEV4cG9uZW50IC8gM10gOiBcIlwiKSArIHZhbHVlU3VmZml4ICsgKHZhbHVlTmVnYXRpdmUgJiYgc2lnbiA9PT0gXCIoXCIgPyBcIilcIiA6IFwiXCIpO1xuXG4gICAgICAgIC8vIEJyZWFrIHRoZSBmb3JtYXR0ZWQgdmFsdWUgaW50byB0aGUgaW50ZWdlciDigJx2YWx1ZeKAnSBwYXJ0IHRoYXQgY2FuIGJlXG4gICAgICAgIC8vIGdyb3VwZWQsIGFuZCBmcmFjdGlvbmFsIG9yIGV4cG9uZW50aWFsIOKAnHN1ZmZpeOKAnSBwYXJ0IHRoYXQgaXMgbm90LlxuICAgICAgICBpZiAobWF5YmVTdWZmaXgpIHtcbiAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgIGlmIChjID0gdmFsdWUuY2hhckNvZGVBdChpKSwgNDggPiBjIHx8IGMgPiA1Nykge1xuICAgICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IChjID09PSA0NiA/IGRlY2ltYWwgKyB2YWx1ZS5zbGljZShpICsgMSkgOiB2YWx1ZS5zbGljZShpKSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBub3QgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYmVmb3JlIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgIXplcm8pIHZhbHVlID0gZ3JvdXAodmFsdWUsIEluZmluaXR5KTtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgcGFkZGluZy5cbiAgICAgIHZhciBsZW5ndGggPSB2YWx1ZVByZWZpeC5sZW5ndGggKyB2YWx1ZS5sZW5ndGggKyB2YWx1ZVN1ZmZpeC5sZW5ndGgsXG4gICAgICAgICAgcGFkZGluZyA9IGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSA6IFwiXCI7XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBhZnRlciBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmIHplcm8pIHZhbHVlID0gZ3JvdXAocGFkZGluZyArIHZhbHVlLCBwYWRkaW5nLmxlbmd0aCA/IHdpZHRoIC0gdmFsdWVTdWZmaXgubGVuZ3RoIDogSW5maW5pdHkpLCBwYWRkaW5nID0gXCJcIjtcblxuICAgICAgLy8gUmVjb25zdHJ1Y3QgdGhlIGZpbmFsIG91dHB1dCBiYXNlZCBvbiB0aGUgZGVzaXJlZCBhbGlnbm1lbnQuXG4gICAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICAgIGNhc2UgXCI8XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCI9XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyBwYWRkaW5nICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJeXCI6IHZhbHVlID0gcGFkZGluZy5zbGljZSgwLCBsZW5ndGggPSBwYWRkaW5nLmxlbmd0aCA+PiAxKSArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmcuc2xpY2UobGVuZ3RoKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHZhbHVlID0gcGFkZGluZyArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudW1lcmFscyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZm9ybWF0LnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3BlY2lmaWVyICsgXCJcIjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKSB7XG4gICAgdmFyIGYgPSBuZXdGb3JtYXQoKHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpLCBzcGVjaWZpZXIudHlwZSA9IFwiZlwiLCBzcGVjaWZpZXIpKSxcbiAgICAgICAgZSA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzLFxuICAgICAgICBrID0gTWF0aC5wb3coMTAsIC1lKSxcbiAgICAgICAgcHJlZml4ID0gcHJlZml4ZXNbOCArIGUgLyAzXTtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmKGsgKiB2YWx1ZSkgKyBwcmVmaXg7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBuZXdGb3JtYXQsXG4gICAgZm9ybWF0UHJlZml4OiBmb3JtYXRQcmVmaXhcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGdyb3VwaW5nLCB0aG91c2FuZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICB0ID0gW10sXG4gICAgICAgIGogPSAwLFxuICAgICAgICBnID0gZ3JvdXBpbmdbMF0sXG4gICAgICAgIGxlbmd0aCA9IDA7XG5cbiAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgdC5wdXNoKHZhbHVlLnN1YnN0cmluZyhpIC09IGcsIGkgKyBnKSk7XG4gICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICBnID0gZ3JvdXBpbmdbaiA9IChqICsgMSkgJSBncm91cGluZy5sZW5ndGhdO1xuICAgIH1cblxuICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKHRob3VzYW5kcyk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihudW1lcmFscykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWzAtOV0vZywgZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIG51bWVyYWxzWytpXTtcbiAgICB9KTtcbiAgfTtcbn1cbiIsImZ1bmN0aW9uIGNvdW50KG5vZGUpIHtcbiAgdmFyIHN1bSA9IDAsXG4gICAgICBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sXG4gICAgICBpID0gY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoO1xuICBpZiAoIWkpIHN1bSA9IDE7XG4gIGVsc2Ugd2hpbGUgKC0taSA+PSAwKSBzdW0gKz0gY2hpbGRyZW5baV0udmFsdWU7XG4gIG5vZGUudmFsdWUgPSBzdW07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoQWZ0ZXIoY291bnQpO1xufVxuIiwiaW1wb3J0IG5vZGVfY291bnQgZnJvbSBcIi4vY291bnRcIjtcbmltcG9ydCBub2RlX2VhY2ggZnJvbSBcIi4vZWFjaFwiO1xuaW1wb3J0IG5vZGVfZWFjaEJlZm9yZSBmcm9tIFwiLi9lYWNoQmVmb3JlXCI7XG5pbXBvcnQgbm9kZV9lYWNoQWZ0ZXIgZnJvbSBcIi4vZWFjaEFmdGVyXCI7XG5pbXBvcnQgbm9kZV9zdW0gZnJvbSBcIi4vc3VtXCI7XG5pbXBvcnQgbm9kZV9zb3J0IGZyb20gXCIuL3NvcnRcIjtcbmltcG9ydCBub2RlX3BhdGggZnJvbSBcIi4vcGF0aFwiO1xuaW1wb3J0IG5vZGVfYW5jZXN0b3JzIGZyb20gXCIuL2FuY2VzdG9yc1wiO1xuaW1wb3J0IG5vZGVfZGVzY2VuZGFudHMgZnJvbSBcIi4vZGVzY2VuZGFudHNcIjtcbmltcG9ydCBub2RlX2xlYXZlcyBmcm9tIFwiLi9sZWF2ZXNcIjtcbmltcG9ydCBub2RlX2xpbmtzIGZyb20gXCIuL2xpbmtzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhpZXJhcmNoeShkYXRhLCBjaGlsZHJlbikge1xuICB2YXIgcm9vdCA9IG5ldyBOb2RlKGRhdGEpLFxuICAgICAgdmFsdWVkID0gK2RhdGEudmFsdWUgJiYgKHJvb3QudmFsdWUgPSBkYXRhLnZhbHVlKSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlcyA9IFtyb290XSxcbiAgICAgIGNoaWxkLFxuICAgICAgY2hpbGRzLFxuICAgICAgaSxcbiAgICAgIG47XG5cbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIGNoaWxkcmVuID0gZGVmYXVsdENoaWxkcmVuO1xuXG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBpZiAodmFsdWVkKSBub2RlLnZhbHVlID0gK25vZGUuZGF0YS52YWx1ZTtcbiAgICBpZiAoKGNoaWxkcyA9IGNoaWxkcmVuKG5vZGUuZGF0YSkpICYmIChuID0gY2hpbGRzLmxlbmd0aCkpIHtcbiAgICAgIG5vZGUuY2hpbGRyZW4gPSBuZXcgQXJyYXkobik7XG4gICAgICBmb3IgKGkgPSBuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgbm9kZXMucHVzaChjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV0gPSBuZXcgTm9kZShjaGlsZHNbaV0pKTtcbiAgICAgICAgY2hpbGQucGFyZW50ID0gbm9kZTtcbiAgICAgICAgY2hpbGQuZGVwdGggPSBub2RlLmRlcHRoICsgMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcm9vdC5lYWNoQmVmb3JlKGNvbXB1dGVIZWlnaHQpO1xufVxuXG5mdW5jdGlvbiBub2RlX2NvcHkoKSB7XG4gIHJldHVybiBoaWVyYXJjaHkodGhpcykuZWFjaEJlZm9yZShjb3B5RGF0YSk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDaGlsZHJlbihkKSB7XG4gIHJldHVybiBkLmNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjb3B5RGF0YShub2RlKSB7XG4gIG5vZGUuZGF0YSA9IG5vZGUuZGF0YS5kYXRhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUhlaWdodChub2RlKSB7XG4gIHZhciBoZWlnaHQgPSAwO1xuICBkbyBub2RlLmhlaWdodCA9IGhlaWdodDtcbiAgd2hpbGUgKChub2RlID0gbm9kZS5wYXJlbnQpICYmIChub2RlLmhlaWdodCA8ICsraGVpZ2h0KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBOb2RlKGRhdGEpIHtcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5kZXB0aCA9XG4gIHRoaXMuaGVpZ2h0ID0gMDtcbiAgdGhpcy5wYXJlbnQgPSBudWxsO1xufVxuXG5Ob2RlLnByb3RvdHlwZSA9IGhpZXJhcmNoeS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBOb2RlLFxuICBjb3VudDogbm9kZV9jb3VudCxcbiAgZWFjaDogbm9kZV9lYWNoLFxuICBlYWNoQWZ0ZXI6IG5vZGVfZWFjaEFmdGVyLFxuICBlYWNoQmVmb3JlOiBub2RlX2VhY2hCZWZvcmUsXG4gIHN1bTogbm9kZV9zdW0sXG4gIHNvcnQ6IG5vZGVfc29ydCxcbiAgcGF0aDogbm9kZV9wYXRoLFxuICBhbmNlc3RvcnM6IG5vZGVfYW5jZXN0b3JzLFxuICBkZXNjZW5kYW50czogbm9kZV9kZXNjZW5kYW50cyxcbiAgbGVhdmVzOiBub2RlX2xlYXZlcyxcbiAgbGlua3M6IG5vZGVfbGlua3MsXG4gIGNvcHk6IG5vZGVfY29weVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBub2RlID0gdGhpcywgY3VycmVudCwgbmV4dCA9IFtub2RlXSwgY2hpbGRyZW4sIGksIG47XG4gIGRvIHtcbiAgICBjdXJyZW50ID0gbmV4dC5yZXZlcnNlKCksIG5leHQgPSBbXTtcbiAgICB3aGlsZSAobm9kZSA9IGN1cnJlbnQucG9wKCkpIHtcbiAgICAgIGNhbGxiYWNrKG5vZGUpLCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IDAsIG4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbmV4dC5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gd2hpbGUgKG5leHQubGVuZ3RoKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdLCBuZXh0ID0gW10sIGNoaWxkcmVuLCBpLCBuO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgbmV4dC5wdXNoKG5vZGUpLCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSAwLCBuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKG5vZGUgPSBuZXh0LnBvcCgpKSB7XG4gICAgY2FsbGJhY2sobm9kZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdLCBjaGlsZHJlbiwgaTtcbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGNhbGxiYWNrKG5vZGUpLCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSBjaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgbm9kZXMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEFmdGVyKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgc3VtID0gK3ZhbHVlKG5vZGUuZGF0YSkgfHwgMCxcbiAgICAgICAgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLFxuICAgICAgICBpID0gY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoO1xuICAgIHdoaWxlICgtLWkgPj0gMCkgc3VtICs9IGNoaWxkcmVuW2ldLnZhbHVlO1xuICAgIG5vZGUudmFsdWUgPSBzdW07XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICByZXR1cm4gdGhpcy5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgbm9kZS5jaGlsZHJlbi5zb3J0KGNvbXBhcmUpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlbmQpIHtcbiAgdmFyIHN0YXJ0ID0gdGhpcyxcbiAgICAgIGFuY2VzdG9yID0gbGVhc3RDb21tb25BbmNlc3RvcihzdGFydCwgZW5kKSxcbiAgICAgIG5vZGVzID0gW3N0YXJ0XTtcbiAgd2hpbGUgKHN0YXJ0ICE9PSBhbmNlc3Rvcikge1xuICAgIHN0YXJ0ID0gc3RhcnQucGFyZW50O1xuICAgIG5vZGVzLnB1c2goc3RhcnQpO1xuICB9XG4gIHZhciBrID0gbm9kZXMubGVuZ3RoO1xuICB3aGlsZSAoZW5kICE9PSBhbmNlc3Rvcikge1xuICAgIG5vZGVzLnNwbGljZShrLCAwLCBlbmQpO1xuICAgIGVuZCA9IGVuZC5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIG5vZGVzO1xufVxuXG5mdW5jdGlvbiBsZWFzdENvbW1vbkFuY2VzdG9yKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiBhO1xuICB2YXIgYU5vZGVzID0gYS5hbmNlc3RvcnMoKSxcbiAgICAgIGJOb2RlcyA9IGIuYW5jZXN0b3JzKCksXG4gICAgICBjID0gbnVsbDtcbiAgYSA9IGFOb2Rlcy5wb3AoKTtcbiAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgd2hpbGUgKGEgPT09IGIpIHtcbiAgICBjID0gYTtcbiAgICBhID0gYU5vZGVzLnBvcCgpO1xuICAgIGIgPSBiTm9kZXMucG9wKCk7XG4gIH1cbiAgcmV0dXJuIGM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXTtcbiAgd2hpbGUgKG5vZGUgPSBub2RlLnBhcmVudCkge1xuICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gIH1cbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlcyA9IFtdO1xuICB0aGlzLmVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gIH0pO1xuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGxlYXZlcyA9IFtdO1xuICB0aGlzLmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5jaGlsZHJlbikge1xuICAgICAgbGVhdmVzLnB1c2gobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxlYXZlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgcm9vdCA9IHRoaXMsIGxpbmtzID0gW107XG4gIHJvb3QuZWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUgIT09IHJvb3QpIHsgLy8gRG9u4oCZdCBpbmNsdWRlIHRoZSByb2904oCZcyBwYXJlbnQsIGlmIGFueS5cbiAgICAgIGxpbmtzLnB1c2goe3NvdXJjZTogbm9kZS5wYXJlbnQsIHRhcmdldDogbm9kZX0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsaW5rcztcbn1cbiIsImV4cG9ydCB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaHVmZmxlKGFycmF5KSB7XG4gIHZhciBtID0gYXJyYXkubGVuZ3RoLFxuICAgICAgdCxcbiAgICAgIGk7XG5cbiAgd2hpbGUgKG0pIHtcbiAgICBpID0gTWF0aC5yYW5kb20oKSAqIG0tLSB8IDA7XG4gICAgdCA9IGFycmF5W21dO1xuICAgIGFycmF5W21dID0gYXJyYXlbaV07XG4gICAgYXJyYXlbaV0gPSB0O1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuIiwiaW1wb3J0IHtzaHVmZmxlLCBzbGljZX0gZnJvbSBcIi4uL2FycmF5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNpcmNsZXMpIHtcbiAgdmFyIGkgPSAwLCBuID0gKGNpcmNsZXMgPSBzaHVmZmxlKHNsaWNlLmNhbGwoY2lyY2xlcykpKS5sZW5ndGgsIEIgPSBbXSwgcCwgZTtcblxuICB3aGlsZSAoaSA8IG4pIHtcbiAgICBwID0gY2lyY2xlc1tpXTtcbiAgICBpZiAoZSAmJiBlbmNsb3Nlc1dlYWsoZSwgcCkpICsraTtcbiAgICBlbHNlIGUgPSBlbmNsb3NlQmFzaXMoQiA9IGV4dGVuZEJhc2lzKEIsIHApKSwgaSA9IDA7XG4gIH1cblxuICByZXR1cm4gZTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kQmFzaXMoQiwgcCkge1xuICB2YXIgaSwgajtcblxuICBpZiAoZW5jbG9zZXNXZWFrQWxsKHAsIEIpKSByZXR1cm4gW3BdO1xuXG4gIC8vIElmIHdlIGdldCBoZXJlIHRoZW4gQiBtdXN0IGhhdmUgYXQgbGVhc3Qgb25lIGVsZW1lbnQuXG4gIGZvciAoaSA9IDA7IGkgPCBCLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGVuY2xvc2VzTm90KHAsIEJbaV0pXG4gICAgICAgICYmIGVuY2xvc2VzV2Vha0FsbChlbmNsb3NlQmFzaXMyKEJbaV0sIHApLCBCKSkge1xuICAgICAgcmV0dXJuIFtCW2ldLCBwXTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB3ZSBnZXQgaGVyZSB0aGVuIEIgbXVzdCBoYXZlIGF0IGxlYXN0IHR3byBlbGVtZW50cy5cbiAgZm9yIChpID0gMDsgaSA8IEIubGVuZ3RoIC0gMTsgKytpKSB7XG4gICAgZm9yIChqID0gaSArIDE7IGogPCBCLmxlbmd0aDsgKytqKSB7XG4gICAgICBpZiAoZW5jbG9zZXNOb3QoZW5jbG9zZUJhc2lzMihCW2ldLCBCW2pdKSwgcClcbiAgICAgICAgICAmJiBlbmNsb3Nlc05vdChlbmNsb3NlQmFzaXMyKEJbaV0sIHApLCBCW2pdKVxuICAgICAgICAgICYmIGVuY2xvc2VzTm90KGVuY2xvc2VCYXNpczIoQltqXSwgcCksIEJbaV0pXG4gICAgICAgICAgJiYgZW5jbG9zZXNXZWFrQWxsKGVuY2xvc2VCYXNpczMoQltpXSwgQltqXSwgcCksIEIpKSB7XG4gICAgICAgIHJldHVybiBbQltpXSwgQltqXSwgcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgdGhlbiBzb21ldGhpbmcgaXMgdmVyeSB3cm9uZy5cbiAgdGhyb3cgbmV3IEVycm9yO1xufVxuXG5mdW5jdGlvbiBlbmNsb3Nlc05vdChhLCBiKSB7XG4gIHZhciBkciA9IGEuciAtIGIuciwgZHggPSBiLnggLSBhLngsIGR5ID0gYi55IC0gYS55O1xuICByZXR1cm4gZHIgPCAwIHx8IGRyICogZHIgPCBkeCAqIGR4ICsgZHkgKiBkeTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZXNXZWFrKGEsIGIpIHtcbiAgdmFyIGRyID0gYS5yIC0gYi5yICsgMWUtNiwgZHggPSBiLnggLSBhLngsIGR5ID0gYi55IC0gYS55O1xuICByZXR1cm4gZHIgPiAwICYmIGRyICogZHIgPiBkeCAqIGR4ICsgZHkgKiBkeTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZXNXZWFrQWxsKGEsIEIpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBCLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCFlbmNsb3Nlc1dlYWsoYSwgQltpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VCYXNpcyhCKSB7XG4gIHN3aXRjaCAoQi5sZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBlbmNsb3NlQmFzaXMxKEJbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIGVuY2xvc2VCYXNpczIoQlswXSwgQlsxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZW5jbG9zZUJhc2lzMyhCWzBdLCBCWzFdLCBCWzJdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmNsb3NlQmFzaXMxKGEpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBhLngsXG4gICAgeTogYS55LFxuICAgIHI6IGEuclxuICB9O1xufVxuXG5mdW5jdGlvbiBlbmNsb3NlQmFzaXMyKGEsIGIpIHtcbiAgdmFyIHgxID0gYS54LCB5MSA9IGEueSwgcjEgPSBhLnIsXG4gICAgICB4MiA9IGIueCwgeTIgPSBiLnksIHIyID0gYi5yLFxuICAgICAgeDIxID0geDIgLSB4MSwgeTIxID0geTIgLSB5MSwgcjIxID0gcjIgLSByMSxcbiAgICAgIGwgPSBNYXRoLnNxcnQoeDIxICogeDIxICsgeTIxICogeTIxKTtcbiAgcmV0dXJuIHtcbiAgICB4OiAoeDEgKyB4MiArIHgyMSAvIGwgKiByMjEpIC8gMixcbiAgICB5OiAoeTEgKyB5MiArIHkyMSAvIGwgKiByMjEpIC8gMixcbiAgICByOiAobCArIHIxICsgcjIpIC8gMlxuICB9O1xufVxuXG5mdW5jdGlvbiBlbmNsb3NlQmFzaXMzKGEsIGIsIGMpIHtcbiAgdmFyIHgxID0gYS54LCB5MSA9IGEueSwgcjEgPSBhLnIsXG4gICAgICB4MiA9IGIueCwgeTIgPSBiLnksIHIyID0gYi5yLFxuICAgICAgeDMgPSBjLngsIHkzID0gYy55LCByMyA9IGMucixcbiAgICAgIGEyID0geDEgLSB4MixcbiAgICAgIGEzID0geDEgLSB4MyxcbiAgICAgIGIyID0geTEgLSB5MixcbiAgICAgIGIzID0geTEgLSB5MyxcbiAgICAgIGMyID0gcjIgLSByMSxcbiAgICAgIGMzID0gcjMgLSByMSxcbiAgICAgIGQxID0geDEgKiB4MSArIHkxICogeTEgLSByMSAqIHIxLFxuICAgICAgZDIgPSBkMSAtIHgyICogeDIgLSB5MiAqIHkyICsgcjIgKiByMixcbiAgICAgIGQzID0gZDEgLSB4MyAqIHgzIC0geTMgKiB5MyArIHIzICogcjMsXG4gICAgICBhYiA9IGEzICogYjIgLSBhMiAqIGIzLFxuICAgICAgeGEgPSAoYjIgKiBkMyAtIGIzICogZDIpIC8gKGFiICogMikgLSB4MSxcbiAgICAgIHhiID0gKGIzICogYzIgLSBiMiAqIGMzKSAvIGFiLFxuICAgICAgeWEgPSAoYTMgKiBkMiAtIGEyICogZDMpIC8gKGFiICogMikgLSB5MSxcbiAgICAgIHliID0gKGEyICogYzMgLSBhMyAqIGMyKSAvIGFiLFxuICAgICAgQSA9IHhiICogeGIgKyB5YiAqIHliIC0gMSxcbiAgICAgIEIgPSAyICogKHIxICsgeGEgKiB4YiArIHlhICogeWIpLFxuICAgICAgQyA9IHhhICogeGEgKyB5YSAqIHlhIC0gcjEgKiByMSxcbiAgICAgIHIgPSAtKEEgPyAoQiArIE1hdGguc3FydChCICogQiAtIDQgKiBBICogQykpIC8gKDIgKiBBKSA6IEMgLyBCKTtcbiAgcmV0dXJuIHtcbiAgICB4OiB4MSArIHhhICsgeGIgKiByLFxuICAgIHk6IHkxICsgeWEgKyB5YiAqIHIsXG4gICAgcjogclxuICB9O1xufVxuIiwiaW1wb3J0IGVuY2xvc2UgZnJvbSBcIi4vZW5jbG9zZVwiO1xuXG5mdW5jdGlvbiBwbGFjZShiLCBhLCBjKSB7XG4gIHZhciBkeCA9IGIueCAtIGEueCwgeCwgYTIsXG4gICAgICBkeSA9IGIueSAtIGEueSwgeSwgYjIsXG4gICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICBpZiAoZDIpIHtcbiAgICBhMiA9IGEuciArIGMuciwgYTIgKj0gYTI7XG4gICAgYjIgPSBiLnIgKyBjLnIsIGIyICo9IGIyO1xuICAgIGlmIChhMiA+IGIyKSB7XG4gICAgICB4ID0gKGQyICsgYjIgLSBhMikgLyAoMiAqIGQyKTtcbiAgICAgIHkgPSBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgYjIgLyBkMiAtIHggKiB4KSk7XG4gICAgICBjLnggPSBiLnggLSB4ICogZHggLSB5ICogZHk7XG4gICAgICBjLnkgPSBiLnkgLSB4ICogZHkgKyB5ICogZHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSAoZDIgKyBhMiAtIGIyKSAvICgyICogZDIpO1xuICAgICAgeSA9IE1hdGguc3FydChNYXRoLm1heCgwLCBhMiAvIGQyIC0geCAqIHgpKTtcbiAgICAgIGMueCA9IGEueCArIHggKiBkeCAtIHkgKiBkeTtcbiAgICAgIGMueSA9IGEueSArIHggKiBkeSArIHkgKiBkeDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYy54ID0gYS54ICsgYy5yO1xuICAgIGMueSA9IGEueTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3RzKGEsIGIpIHtcbiAgdmFyIGRyID0gYS5yICsgYi5yIC0gMWUtNiwgZHggPSBiLnggLSBhLngsIGR5ID0gYi55IC0gYS55O1xuICByZXR1cm4gZHIgPiAwICYmIGRyICogZHIgPiBkeCAqIGR4ICsgZHkgKiBkeTtcbn1cblxuZnVuY3Rpb24gc2NvcmUobm9kZSkge1xuICB2YXIgYSA9IG5vZGUuXyxcbiAgICAgIGIgPSBub2RlLm5leHQuXyxcbiAgICAgIGFiID0gYS5yICsgYi5yLFxuICAgICAgZHggPSAoYS54ICogYi5yICsgYi54ICogYS5yKSAvIGFiLFxuICAgICAgZHkgPSAoYS55ICogYi5yICsgYi55ICogYS5yKSAvIGFiO1xuICByZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XG59XG5cbmZ1bmN0aW9uIE5vZGUoY2lyY2xlKSB7XG4gIHRoaXMuXyA9IGNpcmNsZTtcbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5wcmV2aW91cyA9IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWNrRW5jbG9zZShjaXJjbGVzKSB7XG4gIGlmICghKG4gPSBjaXJjbGVzLmxlbmd0aCkpIHJldHVybiAwO1xuXG4gIHZhciBhLCBiLCBjLCBuLCBhYSwgY2EsIGksIGosIGssIHNqLCBzaztcblxuICAvLyBQbGFjZSB0aGUgZmlyc3QgY2lyY2xlLlxuICBhID0gY2lyY2xlc1swXSwgYS54ID0gMCwgYS55ID0gMDtcbiAgaWYgKCEobiA+IDEpKSByZXR1cm4gYS5yO1xuXG4gIC8vIFBsYWNlIHRoZSBzZWNvbmQgY2lyY2xlLlxuICBiID0gY2lyY2xlc1sxXSwgYS54ID0gLWIuciwgYi54ID0gYS5yLCBiLnkgPSAwO1xuICBpZiAoIShuID4gMikpIHJldHVybiBhLnIgKyBiLnI7XG5cbiAgLy8gUGxhY2UgdGhlIHRoaXJkIGNpcmNsZS5cbiAgcGxhY2UoYiwgYSwgYyA9IGNpcmNsZXNbMl0pO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIGZyb250LWNoYWluIHVzaW5nIHRoZSBmaXJzdCB0aHJlZSBjaXJjbGVzIGEsIGIgYW5kIGMuXG4gIGEgPSBuZXcgTm9kZShhKSwgYiA9IG5ldyBOb2RlKGIpLCBjID0gbmV3IE5vZGUoYyk7XG4gIGEubmV4dCA9IGMucHJldmlvdXMgPSBiO1xuICBiLm5leHQgPSBhLnByZXZpb3VzID0gYztcbiAgYy5uZXh0ID0gYi5wcmV2aW91cyA9IGE7XG5cbiAgLy8gQXR0ZW1wdCB0byBwbGFjZSBlYWNoIHJlbWFpbmluZyBjaXJjbGXigKZcbiAgcGFjazogZm9yIChpID0gMzsgaSA8IG47ICsraSkge1xuICAgIHBsYWNlKGEuXywgYi5fLCBjID0gY2lyY2xlc1tpXSksIGMgPSBuZXcgTm9kZShjKTtcblxuICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3QgaW50ZXJzZWN0aW5nIGNpcmNsZSBvbiB0aGUgZnJvbnQtY2hhaW4sIGlmIGFueS5cbiAgICAvLyDigJxDbG9zZW5lc3PigJ0gaXMgZGV0ZXJtaW5lZCBieSBsaW5lYXIgZGlzdGFuY2UgYWxvbmcgdGhlIGZyb250LWNoYWluLlxuICAgIC8vIOKAnEFoZWFk4oCdIG9yIOKAnGJlaGluZOKAnSBpcyBsaWtld2lzZSBkZXRlcm1pbmVkIGJ5IGxpbmVhciBkaXN0YW5jZS5cbiAgICBqID0gYi5uZXh0LCBrID0gYS5wcmV2aW91cywgc2ogPSBiLl8uciwgc2sgPSBhLl8ucjtcbiAgICBkbyB7XG4gICAgICBpZiAoc2ogPD0gc2spIHtcbiAgICAgICAgaWYgKGludGVyc2VjdHMoai5fLCBjLl8pKSB7XG4gICAgICAgICAgYiA9IGosIGEubmV4dCA9IGIsIGIucHJldmlvdXMgPSBhLCAtLWk7XG4gICAgICAgICAgY29udGludWUgcGFjaztcbiAgICAgICAgfVxuICAgICAgICBzaiArPSBqLl8uciwgaiA9IGoubmV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpbnRlcnNlY3RzKGsuXywgYy5fKSkge1xuICAgICAgICAgIGEgPSBrLCBhLm5leHQgPSBiLCBiLnByZXZpb3VzID0gYSwgLS1pO1xuICAgICAgICAgIGNvbnRpbnVlIHBhY2s7XG4gICAgICAgIH1cbiAgICAgICAgc2sgKz0gay5fLnIsIGsgPSBrLnByZXZpb3VzO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKGogIT09IGsubmV4dCk7XG5cbiAgICAvLyBTdWNjZXNzISBJbnNlcnQgdGhlIG5ldyBjaXJjbGUgYyBiZXR3ZWVuIGEgYW5kIGIuXG4gICAgYy5wcmV2aW91cyA9IGEsIGMubmV4dCA9IGIsIGEubmV4dCA9IGIucHJldmlvdXMgPSBiID0gYztcblxuICAgIC8vIENvbXB1dGUgdGhlIG5ldyBjbG9zZXN0IGNpcmNsZSBwYWlyIHRvIHRoZSBjZW50cm9pZC5cbiAgICBhYSA9IHNjb3JlKGEpO1xuICAgIHdoaWxlICgoYyA9IGMubmV4dCkgIT09IGIpIHtcbiAgICAgIGlmICgoY2EgPSBzY29yZShjKSkgPCBhYSkge1xuICAgICAgICBhID0gYywgYWEgPSBjYTtcbiAgICAgIH1cbiAgICB9XG4gICAgYiA9IGEubmV4dDtcbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIGVuY2xvc2luZyBjaXJjbGUgb2YgdGhlIGZyb250IGNoYWluLlxuICBhID0gW2IuX10sIGMgPSBiOyB3aGlsZSAoKGMgPSBjLm5leHQpICE9PSBiKSBhLnB1c2goYy5fKTsgYyA9IGVuY2xvc2UoYSk7XG5cbiAgLy8gVHJhbnNsYXRlIHRoZSBjaXJjbGVzIHRvIHB1dCB0aGUgZW5jbG9zaW5nIGNpcmNsZSBhcm91bmQgdGhlIG9yaWdpbi5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgYSA9IGNpcmNsZXNbaV0sIGEueCAtPSBjLngsIGEueSAtPSBjLnk7XG5cbiAgcmV0dXJuIGMucjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2lyY2xlcykge1xuICBwYWNrRW5jbG9zZShjaXJjbGVzKTtcbiAgcmV0dXJuIGNpcmNsZXM7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gb3B0aW9uYWwoZikge1xuICByZXR1cm4gZiA9PSBudWxsID8gbnVsbCA6IHJlcXVpcmVkKGYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVxdWlyZWQoZikge1xuICBpZiAodHlwZW9mIGYgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZjtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBjb25zdGFudFplcm8oKSB7XG4gIHJldHVybiAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCB7cGFja0VuY2xvc2V9IGZyb20gXCIuL3NpYmxpbmdzXCI7XG5pbXBvcnQge29wdGlvbmFsfSBmcm9tIFwiLi4vYWNjZXNzb3JzXCI7XG5pbXBvcnQgY29uc3RhbnQsIHtjb25zdGFudFplcm99IGZyb20gXCIuLi9jb25zdGFudFwiO1xuXG5mdW5jdGlvbiBkZWZhdWx0UmFkaXVzKGQpIHtcbiAgcmV0dXJuIE1hdGguc3FydChkLnZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciByYWRpdXMgPSBudWxsLFxuICAgICAgZHggPSAxLFxuICAgICAgZHkgPSAxLFxuICAgICAgcGFkZGluZyA9IGNvbnN0YW50WmVybztcblxuICBmdW5jdGlvbiBwYWNrKHJvb3QpIHtcbiAgICByb290LnggPSBkeCAvIDIsIHJvb3QueSA9IGR5IC8gMjtcbiAgICBpZiAocmFkaXVzKSB7XG4gICAgICByb290LmVhY2hCZWZvcmUocmFkaXVzTGVhZihyYWRpdXMpKVxuICAgICAgICAgIC5lYWNoQWZ0ZXIocGFja0NoaWxkcmVuKHBhZGRpbmcsIDAuNSkpXG4gICAgICAgICAgLmVhY2hCZWZvcmUodHJhbnNsYXRlQ2hpbGQoMSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290LmVhY2hCZWZvcmUocmFkaXVzTGVhZihkZWZhdWx0UmFkaXVzKSlcbiAgICAgICAgICAuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihjb25zdGFudFplcm8sIDEpKVxuICAgICAgICAgIC5lYWNoQWZ0ZXIocGFja0NoaWxkcmVuKHBhZGRpbmcsIHJvb3QuciAvIE1hdGgubWluKGR4LCBkeSkpKVxuICAgICAgICAgIC5lYWNoQmVmb3JlKHRyYW5zbGF0ZUNoaWxkKE1hdGgubWluKGR4LCBkeSkgLyAoMiAqIHJvb3QucikpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICBwYWNrLnJhZGl1cyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSBvcHRpb25hbCh4KSwgcGFjaykgOiByYWRpdXM7XG4gIH07XG5cbiAgcGFjay5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHBhY2spIDogW2R4LCBkeV07XG4gIH07XG5cbiAgcGFjay5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmcgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50KCt4KSwgcGFjaykgOiBwYWRkaW5nO1xuICB9O1xuXG4gIHJldHVybiBwYWNrO1xufVxuXG5mdW5jdGlvbiByYWRpdXNMZWFmKHJhZGl1cykge1xuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5jaGlsZHJlbikge1xuICAgICAgbm9kZS5yID0gTWF0aC5tYXgoMCwgK3JhZGl1cyhub2RlKSB8fCAwKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhY2tDaGlsZHJlbihwYWRkaW5nLCBrKSB7XG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikge1xuICAgICAgdmFyIGNoaWxkcmVuLFxuICAgICAgICAgIGksXG4gICAgICAgICAgbiA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgICByID0gcGFkZGluZyhub2RlKSAqIGsgfHwgMCxcbiAgICAgICAgICBlO1xuXG4gICAgICBpZiAocikgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY2hpbGRyZW5baV0uciArPSByO1xuICAgICAgZSA9IHBhY2tFbmNsb3NlKGNoaWxkcmVuKTtcbiAgICAgIGlmIChyKSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjaGlsZHJlbltpXS5yIC09IHI7XG4gICAgICBub2RlLnIgPSBlICsgcjtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZUNoaWxkKGspIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnQ7XG4gICAgbm9kZS5yICo9IGs7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgbm9kZS54ID0gcGFyZW50LnggKyBrICogbm9kZS54O1xuICAgICAgbm9kZS55ID0gcGFyZW50LnkgKyBrICogbm9kZS55O1xuICAgIH1cbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgbm9kZS54MCA9IE1hdGgucm91bmQobm9kZS54MCk7XG4gIG5vZGUueTAgPSBNYXRoLnJvdW5kKG5vZGUueTApO1xuICBub2RlLngxID0gTWF0aC5yb3VuZChub2RlLngxKTtcbiAgbm9kZS55MSA9IE1hdGgucm91bmQobm9kZS55MSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIG5vZGUsXG4gICAgICBpID0gLTEsXG4gICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgayA9IHBhcmVudC52YWx1ZSAmJiAoeDEgLSB4MCkgLyBwYXJlbnQudmFsdWU7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueTAgPSB5MCwgbm9kZS55MSA9IHkxO1xuICAgIG5vZGUueDAgPSB4MCwgbm9kZS54MSA9IHgwICs9IG5vZGUudmFsdWUgKiBrO1xuICB9XG59XG4iLCJpbXBvcnQge3JlcXVpcmVkfSBmcm9tIFwiLi9hY2Nlc3NvcnNcIjtcbmltcG9ydCB7Tm9kZSwgY29tcHV0ZUhlaWdodH0gZnJvbSBcIi4vaGllcmFyY2h5L2luZGV4XCI7XG5cbnZhciBrZXlQcmVmaXggPSBcIiRcIiwgLy8gUHJvdGVjdCBhZ2FpbnN0IGtleXMgbGlrZSDigJxfX3Byb3RvX1/igJ0uXG4gICAgcHJlcm9vdCA9IHtkZXB0aDogLTF9LFxuICAgIGFtYmlndW91cyA9IHt9O1xuXG5mdW5jdGlvbiBkZWZhdWx0SWQoZCkge1xuICByZXR1cm4gZC5pZDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFBhcmVudElkKGQpIHtcbiAgcmV0dXJuIGQucGFyZW50SWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgaWQgPSBkZWZhdWx0SWQsXG4gICAgICBwYXJlbnRJZCA9IGRlZmF1bHRQYXJlbnRJZDtcblxuICBmdW5jdGlvbiBzdHJhdGlmeShkYXRhKSB7XG4gICAgdmFyIGQsXG4gICAgICAgIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgcm9vdCxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBub2RlLFxuICAgICAgICBub2RlcyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgbm9kZUlkLFxuICAgICAgICBub2RlS2V5LFxuICAgICAgICBub2RlQnlLZXkgPSB7fTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGQgPSBkYXRhW2ldLCBub2RlID0gbm9kZXNbaV0gPSBuZXcgTm9kZShkKTtcbiAgICAgIGlmICgobm9kZUlkID0gaWQoZCwgaSwgZGF0YSkpICE9IG51bGwgJiYgKG5vZGVJZCArPSBcIlwiKSkge1xuICAgICAgICBub2RlS2V5ID0ga2V5UHJlZml4ICsgKG5vZGUuaWQgPSBub2RlSWQpO1xuICAgICAgICBub2RlQnlLZXlbbm9kZUtleV0gPSBub2RlS2V5IGluIG5vZGVCeUtleSA/IGFtYmlndW91cyA6IG5vZGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlSWQgPSBwYXJlbnRJZChkYXRhW2ldLCBpLCBkYXRhKTtcbiAgICAgIGlmIChub2RlSWQgPT0gbnVsbCB8fCAhKG5vZGVJZCArPSBcIlwiKSkge1xuICAgICAgICBpZiAocm9vdCkgdGhyb3cgbmV3IEVycm9yKFwibXVsdGlwbGUgcm9vdHNcIik7XG4gICAgICAgIHJvb3QgPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50ID0gbm9kZUJ5S2V5W2tleVByZWZpeCArIG5vZGVJZF07XG4gICAgICAgIGlmICghcGFyZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJtaXNzaW5nOiBcIiArIG5vZGVJZCk7XG4gICAgICAgIGlmIChwYXJlbnQgPT09IGFtYmlndW91cykgdGhyb3cgbmV3IEVycm9yKFwiYW1iaWd1b3VzOiBcIiArIG5vZGVJZCk7XG4gICAgICAgIGlmIChwYXJlbnQuY2hpbGRyZW4pIHBhcmVudC5jaGlsZHJlbi5wdXNoKG5vZGUpO1xuICAgICAgICBlbHNlIHBhcmVudC5jaGlsZHJlbiA9IFtub2RlXTtcbiAgICAgICAgbm9kZS5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFyb290KSB0aHJvdyBuZXcgRXJyb3IoXCJubyByb290XCIpO1xuICAgIHJvb3QucGFyZW50ID0gcHJlcm9vdDtcbiAgICByb290LmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkgeyBub2RlLmRlcHRoID0gbm9kZS5wYXJlbnQuZGVwdGggKyAxOyAtLW47IH0pLmVhY2hCZWZvcmUoY29tcHV0ZUhlaWdodCk7XG4gICAgcm9vdC5wYXJlbnQgPSBudWxsO1xuICAgIGlmIChuID4gMCkgdGhyb3cgbmV3IEVycm9yKFwiY3ljbGVcIik7XG5cbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIHN0cmF0aWZ5LmlkID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGlkID0gcmVxdWlyZWQoeCksIHN0cmF0aWZ5KSA6IGlkO1xuICB9O1xuXG4gIHN0cmF0aWZ5LnBhcmVudElkID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhcmVudElkID0gcmVxdWlyZWQoeCksIHN0cmF0aWZ5KSA6IHBhcmVudElkO1xuICB9O1xuXG4gIHJldHVybiBzdHJhdGlmeTtcbn1cbiIsImltcG9ydCB7Tm9kZX0gZnJvbSBcIi4vaGllcmFyY2h5L2luZGV4XCI7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXBhcmF0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEucGFyZW50ID09PSBiLnBhcmVudCA/IDEgOiAyO1xufVxuXG4vLyBmdW5jdGlvbiByYWRpYWxTZXBhcmF0aW9uKGEsIGIpIHtcbi8vICAgcmV0dXJuIChhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMikgLyBhLmRlcHRoO1xuLy8gfVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gdHJhdmVyc2UgdGhlIGxlZnQgY29udG91ciBvZiBhIHN1YnRyZWUgKG9yXG4vLyBzdWJmb3Jlc3QpLiBJdCByZXR1cm5zIHRoZSBzdWNjZXNzb3Igb2YgdiBvbiB0aGlzIGNvbnRvdXIuIFRoaXMgc3VjY2Vzc29yIGlzXG4vLyBlaXRoZXIgZ2l2ZW4gYnkgdGhlIGxlZnRtb3N0IGNoaWxkIG9mIHYgb3IgYnkgdGhlIHRocmVhZCBvZiB2LiBUaGUgZnVuY3Rpb25cbi8vIHJldHVybnMgbnVsbCBpZiBhbmQgb25seSBpZiB2IGlzIG9uIHRoZSBoaWdoZXN0IGxldmVsIG9mIGl0cyBzdWJ0cmVlLlxuZnVuY3Rpb24gbmV4dExlZnQodikge1xuICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xuICByZXR1cm4gY2hpbGRyZW4gPyBjaGlsZHJlblswXSA6IHYudDtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiB3b3JrcyBhbmFsb2dvdXNseSB0byBuZXh0TGVmdC5cbmZ1bmN0aW9uIG5leHRSaWdodCh2KSB7XG4gIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW47XG4gIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdIDogdi50O1xufVxuXG4vLyBTaGlmdHMgdGhlIGN1cnJlbnQgc3VidHJlZSByb290ZWQgYXQgdysuIFRoaXMgaXMgZG9uZSBieSBpbmNyZWFzaW5nXG4vLyBwcmVsaW0odyspIGFuZCBtb2QodyspIGJ5IHNoaWZ0LlxuZnVuY3Rpb24gbW92ZVN1YnRyZWUod20sIHdwLCBzaGlmdCkge1xuICB2YXIgY2hhbmdlID0gc2hpZnQgLyAod3AuaSAtIHdtLmkpO1xuICB3cC5jIC09IGNoYW5nZTtcbiAgd3AucyArPSBzaGlmdDtcbiAgd20uYyArPSBjaGFuZ2U7XG4gIHdwLnogKz0gc2hpZnQ7XG4gIHdwLm0gKz0gc2hpZnQ7XG59XG5cbi8vIEFsbCBvdGhlciBzaGlmdHMsIGFwcGxpZWQgdG8gdGhlIHNtYWxsZXIgc3VidHJlZXMgYmV0d2VlbiB3LSBhbmQgdyssIGFyZVxuLy8gcGVyZm9ybWVkIGJ5IHRoaXMgZnVuY3Rpb24uIFRvIHByZXBhcmUgdGhlIHNoaWZ0cywgd2UgaGF2ZSB0byBhZGp1c3Rcbi8vIGNoYW5nZSh3KyksIHNoaWZ0KHcrKSwgYW5kIGNoYW5nZSh3LSkuXG5mdW5jdGlvbiBleGVjdXRlU2hpZnRzKHYpIHtcbiAgdmFyIHNoaWZ0ID0gMCxcbiAgICAgIGNoYW5nZSA9IDAsXG4gICAgICBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sXG4gICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgdztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgdyA9IGNoaWxkcmVuW2ldO1xuICAgIHcueiArPSBzaGlmdDtcbiAgICB3Lm0gKz0gc2hpZnQ7XG4gICAgc2hpZnQgKz0gdy5zICsgKGNoYW5nZSArPSB3LmMpO1xuICB9XG59XG5cbi8vIElmIHZpLeKAmXMgYW5jZXN0b3IgaXMgYSBzaWJsaW5nIG9mIHYsIHJldHVybnMgdmkt4oCZcyBhbmNlc3Rvci4gT3RoZXJ3aXNlLFxuLy8gcmV0dXJucyB0aGUgc3BlY2lmaWVkIChkZWZhdWx0KSBhbmNlc3Rvci5cbmZ1bmN0aW9uIG5leHRBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSB7XG4gIHJldHVybiB2aW0uYS5wYXJlbnQgPT09IHYucGFyZW50ID8gdmltLmEgOiBhbmNlc3Rvcjtcbn1cblxuZnVuY3Rpb24gVHJlZU5vZGUobm9kZSwgaSkge1xuICB0aGlzLl8gPSBub2RlO1xuICB0aGlzLnBhcmVudCA9IG51bGw7XG4gIHRoaXMuY2hpbGRyZW4gPSBudWxsO1xuICB0aGlzLkEgPSBudWxsOyAvLyBkZWZhdWx0IGFuY2VzdG9yXG4gIHRoaXMuYSA9IHRoaXM7IC8vIGFuY2VzdG9yXG4gIHRoaXMueiA9IDA7IC8vIHByZWxpbVxuICB0aGlzLm0gPSAwOyAvLyBtb2RcbiAgdGhpcy5jID0gMDsgLy8gY2hhbmdlXG4gIHRoaXMucyA9IDA7IC8vIHNoaWZ0XG4gIHRoaXMudCA9IG51bGw7IC8vIHRocmVhZFxuICB0aGlzLmkgPSBpOyAvLyBudW1iZXJcbn1cblxuVHJlZU5vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShOb2RlLnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIHRyZWVSb290KHJvb3QpIHtcbiAgdmFyIHRyZWUgPSBuZXcgVHJlZU5vZGUocm9vdCwgMCksXG4gICAgICBub2RlLFxuICAgICAgbm9kZXMgPSBbdHJlZV0sXG4gICAgICBjaGlsZCxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgaSxcbiAgICAgIG47XG5cbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGlmIChjaGlsZHJlbiA9IG5vZGUuXy5jaGlsZHJlbikge1xuICAgICAgbm9kZS5jaGlsZHJlbiA9IG5ldyBBcnJheShuID0gY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXSA9IG5ldyBUcmVlTm9kZShjaGlsZHJlbltpXSwgaSkpO1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICh0cmVlLnBhcmVudCA9IG5ldyBUcmVlTm9kZShudWxsLCAwKSkuY2hpbGRyZW4gPSBbdHJlZV07XG4gIHJldHVybiB0cmVlO1xufVxuXG4vLyBOb2RlLWxpbmsgdHJlZSBkaWFncmFtIHVzaW5nIHRoZSBSZWluZ29sZC1UaWxmb3JkIFwidGlkeVwiIGFsZ29yaXRobVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzZXBhcmF0aW9uID0gZGVmYXVsdFNlcGFyYXRpb24sXG4gICAgICBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICBub2RlU2l6ZSA9IG51bGw7XG5cbiAgZnVuY3Rpb24gdHJlZShyb290KSB7XG4gICAgdmFyIHQgPSB0cmVlUm9vdChyb290KTtcblxuICAgIC8vIENvbXB1dGUgdGhlIGxheW91dCB1c2luZyBCdWNoaGVpbSBldCBhbC7igJlzIGFsZ29yaXRobS5cbiAgICB0LmVhY2hBZnRlcihmaXJzdFdhbGspLCB0LnBhcmVudC5tID0gLXQuejtcbiAgICB0LmVhY2hCZWZvcmUoc2Vjb25kV2Fsayk7XG5cbiAgICAvLyBJZiBhIGZpeGVkIG5vZGUgc2l6ZSBpcyBzcGVjaWZpZWQsIHNjYWxlIHggYW5kIHkuXG4gICAgaWYgKG5vZGVTaXplKSByb290LmVhY2hCZWZvcmUoc2l6ZU5vZGUpO1xuXG4gICAgLy8gSWYgYSBmaXhlZCB0cmVlIHNpemUgaXMgc3BlY2lmaWVkLCBzY2FsZSB4IGFuZCB5IGJhc2VkIG9uIHRoZSBleHRlbnQuXG4gICAgLy8gQ29tcHV0ZSB0aGUgbGVmdC1tb3N0LCByaWdodC1tb3N0LCBhbmQgZGVwdGgtbW9zdCBub2RlcyBmb3IgZXh0ZW50cy5cbiAgICBlbHNlIHtcbiAgICAgIHZhciBsZWZ0ID0gcm9vdCxcbiAgICAgICAgICByaWdodCA9IHJvb3QsXG4gICAgICAgICAgYm90dG9tID0gcm9vdDtcbiAgICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIGlmIChub2RlLnggPCBsZWZ0LngpIGxlZnQgPSBub2RlO1xuICAgICAgICBpZiAobm9kZS54ID4gcmlnaHQueCkgcmlnaHQgPSBub2RlO1xuICAgICAgICBpZiAobm9kZS5kZXB0aCA+IGJvdHRvbS5kZXB0aCkgYm90dG9tID0gbm9kZTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHMgPSBsZWZ0ID09PSByaWdodCA/IDEgOiBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsXG4gICAgICAgICAgdHggPSBzIC0gbGVmdC54LFxuICAgICAgICAgIGt4ID0gZHggLyAocmlnaHQueCArIHMgKyB0eCksXG4gICAgICAgICAga3kgPSBkeSAvIChib3R0b20uZGVwdGggfHwgMSk7XG4gICAgICByb290LmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBub2RlLnggPSAobm9kZS54ICsgdHgpICoga3g7XG4gICAgICAgIG5vZGUueSA9IG5vZGUuZGVwdGggKiBreTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByb290O1xuICB9XG5cbiAgLy8gQ29tcHV0ZXMgYSBwcmVsaW1pbmFyeSB4LWNvb3JkaW5hdGUgZm9yIHYuIEJlZm9yZSB0aGF0LCBGSVJTVCBXQUxLIGlzXG4gIC8vIGFwcGxpZWQgcmVjdXJzaXZlbHkgdG8gdGhlIGNoaWxkcmVuIG9mIHYsIGFzIHdlbGwgYXMgdGhlIGZ1bmN0aW9uXG4gIC8vIEFQUE9SVElPTi4gQWZ0ZXIgc3BhY2luZyBvdXQgdGhlIGNoaWxkcmVuIGJ5IGNhbGxpbmcgRVhFQ1VURSBTSElGVFMsIHRoZVxuICAvLyBub2RlIHYgaXMgcGxhY2VkIHRvIHRoZSBtaWRwb2ludCBvZiBpdHMgb3V0ZXJtb3N0IGNoaWxkcmVuLlxuICBmdW5jdGlvbiBmaXJzdFdhbGsodikge1xuICAgIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sXG4gICAgICAgIHNpYmxpbmdzID0gdi5wYXJlbnQuY2hpbGRyZW4sXG4gICAgICAgIHcgPSB2LmkgPyBzaWJsaW5nc1t2LmkgLSAxXSA6IG51bGw7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBleGVjdXRlU2hpZnRzKHYpO1xuICAgICAgdmFyIG1pZHBvaW50ID0gKGNoaWxkcmVuWzBdLnogKyBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS56KSAvIDI7XG4gICAgICBpZiAodykge1xuICAgICAgICB2LnogPSB3LnogKyBzZXBhcmF0aW9uKHYuXywgdy5fKTtcbiAgICAgICAgdi5tID0gdi56IC0gbWlkcG9pbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2LnogPSBtaWRwb2ludDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHcpIHtcbiAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuICAgIH1cbiAgICB2LnBhcmVudC5BID0gYXBwb3J0aW9uKHYsIHcsIHYucGFyZW50LkEgfHwgc2libGluZ3NbMF0pO1xuICB9XG5cbiAgLy8gQ29tcHV0ZXMgYWxsIHJlYWwgeC1jb29yZGluYXRlcyBieSBzdW1taW5nIHVwIHRoZSBtb2RpZmllcnMgcmVjdXJzaXZlbHkuXG4gIGZ1bmN0aW9uIHNlY29uZFdhbGsodikge1xuICAgIHYuXy54ID0gdi56ICsgdi5wYXJlbnQubTtcbiAgICB2Lm0gKz0gdi5wYXJlbnQubTtcbiAgfVxuXG4gIC8vIFRoZSBjb3JlIG9mIHRoZSBhbGdvcml0aG0uIEhlcmUsIGEgbmV3IHN1YnRyZWUgaXMgY29tYmluZWQgd2l0aCB0aGVcbiAgLy8gcHJldmlvdXMgc3VidHJlZXMuIFRocmVhZHMgYXJlIHVzZWQgdG8gdHJhdmVyc2UgdGhlIGluc2lkZSBhbmQgb3V0c2lkZVxuICAvLyBjb250b3VycyBvZiB0aGUgbGVmdCBhbmQgcmlnaHQgc3VidHJlZSB1cCB0byB0aGUgaGlnaGVzdCBjb21tb24gbGV2ZWwuIFRoZVxuICAvLyB2ZXJ0aWNlcyB1c2VkIGZvciB0aGUgdHJhdmVyc2FscyBhcmUgdmkrLCB2aS0sIHZvLSwgYW5kIHZvKywgd2hlcmUgdGhlXG4gIC8vIHN1cGVyc2NyaXB0IG8gbWVhbnMgb3V0c2lkZSBhbmQgaSBtZWFucyBpbnNpZGUsIHRoZSBzdWJzY3JpcHQgLSBtZWFucyBsZWZ0XG4gIC8vIHN1YnRyZWUgYW5kICsgbWVhbnMgcmlnaHQgc3VidHJlZS4gRm9yIHN1bW1pbmcgdXAgdGhlIG1vZGlmaWVycyBhbG9uZyB0aGVcbiAgLy8gY29udG91ciwgd2UgdXNlIHJlc3BlY3RpdmUgdmFyaWFibGVzIHNpKywgc2ktLCBzby0sIGFuZCBzbysuIFdoZW5ldmVyIHR3b1xuICAvLyBub2RlcyBvZiB0aGUgaW5zaWRlIGNvbnRvdXJzIGNvbmZsaWN0LCB3ZSBjb21wdXRlIHRoZSBsZWZ0IG9uZSBvZiB0aGVcbiAgLy8gZ3JlYXRlc3QgdW5jb21tb24gYW5jZXN0b3JzIHVzaW5nIHRoZSBmdW5jdGlvbiBBTkNFU1RPUiBhbmQgY2FsbCBNT1ZFXG4gIC8vIFNVQlRSRUUgdG8gc2hpZnQgdGhlIHN1YnRyZWUgYW5kIHByZXBhcmUgdGhlIHNoaWZ0cyBvZiBzbWFsbGVyIHN1YnRyZWVzLlxuICAvLyBGaW5hbGx5LCB3ZSBhZGQgYSBuZXcgdGhyZWFkIChpZiBuZWNlc3NhcnkpLlxuICBmdW5jdGlvbiBhcHBvcnRpb24odiwgdywgYW5jZXN0b3IpIHtcbiAgICBpZiAodykge1xuICAgICAgdmFyIHZpcCA9IHYsXG4gICAgICAgICAgdm9wID0gdixcbiAgICAgICAgICB2aW0gPSB3LFxuICAgICAgICAgIHZvbSA9IHZpcC5wYXJlbnQuY2hpbGRyZW5bMF0sXG4gICAgICAgICAgc2lwID0gdmlwLm0sXG4gICAgICAgICAgc29wID0gdm9wLm0sXG4gICAgICAgICAgc2ltID0gdmltLm0sXG4gICAgICAgICAgc29tID0gdm9tLm0sXG4gICAgICAgICAgc2hpZnQ7XG4gICAgICB3aGlsZSAodmltID0gbmV4dFJpZ2h0KHZpbSksIHZpcCA9IG5leHRMZWZ0KHZpcCksIHZpbSAmJiB2aXApIHtcbiAgICAgICAgdm9tID0gbmV4dExlZnQodm9tKTtcbiAgICAgICAgdm9wID0gbmV4dFJpZ2h0KHZvcCk7XG4gICAgICAgIHZvcC5hID0gdjtcbiAgICAgICAgc2hpZnQgPSB2aW0ueiArIHNpbSAtIHZpcC56IC0gc2lwICsgc2VwYXJhdGlvbih2aW0uXywgdmlwLl8pO1xuICAgICAgICBpZiAoc2hpZnQgPiAwKSB7XG4gICAgICAgICAgbW92ZVN1YnRyZWUobmV4dEFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpLCB2LCBzaGlmdCk7XG4gICAgICAgICAgc2lwICs9IHNoaWZ0O1xuICAgICAgICAgIHNvcCArPSBzaGlmdDtcbiAgICAgICAgfVxuICAgICAgICBzaW0gKz0gdmltLm07XG4gICAgICAgIHNpcCArPSB2aXAubTtcbiAgICAgICAgc29tICs9IHZvbS5tO1xuICAgICAgICBzb3AgKz0gdm9wLm07XG4gICAgICB9XG4gICAgICBpZiAodmltICYmICFuZXh0UmlnaHQodm9wKSkge1xuICAgICAgICB2b3AudCA9IHZpbTtcbiAgICAgICAgdm9wLm0gKz0gc2ltIC0gc29wO1xuICAgICAgfVxuICAgICAgaWYgKHZpcCAmJiAhbmV4dExlZnQodm9tKSkge1xuICAgICAgICB2b20udCA9IHZpcDtcbiAgICAgICAgdm9tLm0gKz0gc2lwIC0gc29tO1xuICAgICAgICBhbmNlc3RvciA9IHY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhbmNlc3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpemVOb2RlKG5vZGUpIHtcbiAgICBub2RlLnggKj0gZHg7XG4gICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGR5O1xuICB9XG5cbiAgdHJlZS5zZXBhcmF0aW9uID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNlcGFyYXRpb24gPSB4LCB0cmVlKSA6IHNlcGFyYXRpb247XG4gIH07XG5cbiAgdHJlZS5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gZmFsc2UsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHRyZWUpIDogKG5vZGVTaXplID8gbnVsbCA6IFtkeCwgZHldKTtcbiAgfTtcblxuICB0cmVlLm5vZGVTaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gdHJ1ZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZSkgOiAobm9kZVNpemUgPyBbZHgsIGR5XSA6IG51bGwpO1xuICB9O1xuXG4gIHJldHVybiB0cmVlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICBub2RlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgIGsgPSBwYXJlbnQudmFsdWUgJiYgKHkxIC0geTApIC8gcGFyZW50LnZhbHVlO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLngwID0geDAsIG5vZGUueDEgPSB4MTtcbiAgICBub2RlLnkwID0geTAsIG5vZGUueTEgPSB5MCArPSBub2RlLnZhbHVlICogaztcbiAgfVxufVxuIiwiaW1wb3J0IHRyZWVtYXBEaWNlIGZyb20gXCIuL2RpY2VcIjtcbmltcG9ydCB0cmVlbWFwU2xpY2UgZnJvbSBcIi4vc2xpY2VcIjtcblxuZXhwb3J0IHZhciBwaGkgPSAoMSArIE1hdGguc3FydCg1KSkgLyAyO1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJpZnlSYXRpbyhyYXRpbywgcGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgcm93cyA9IFtdLFxuICAgICAgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICByb3csXG4gICAgICBub2RlVmFsdWUsXG4gICAgICBpMCA9IDAsXG4gICAgICBpMSA9IDAsXG4gICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgZHgsIGR5LFxuICAgICAgdmFsdWUgPSBwYXJlbnQudmFsdWUsXG4gICAgICBzdW1WYWx1ZSxcbiAgICAgIG1pblZhbHVlLFxuICAgICAgbWF4VmFsdWUsXG4gICAgICBuZXdSYXRpbyxcbiAgICAgIG1pblJhdGlvLFxuICAgICAgYWxwaGEsXG4gICAgICBiZXRhO1xuXG4gIHdoaWxlIChpMCA8IG4pIHtcbiAgICBkeCA9IHgxIC0geDAsIGR5ID0geTEgLSB5MDtcblxuICAgIC8vIEZpbmQgdGhlIG5leHQgbm9uLWVtcHR5IG5vZGUuXG4gICAgZG8gc3VtVmFsdWUgPSBub2Rlc1tpMSsrXS52YWx1ZTsgd2hpbGUgKCFzdW1WYWx1ZSAmJiBpMSA8IG4pO1xuICAgIG1pblZhbHVlID0gbWF4VmFsdWUgPSBzdW1WYWx1ZTtcbiAgICBhbHBoYSA9IE1hdGgubWF4KGR5IC8gZHgsIGR4IC8gZHkpIC8gKHZhbHVlICogcmF0aW8pO1xuICAgIGJldGEgPSBzdW1WYWx1ZSAqIHN1bVZhbHVlICogYWxwaGE7XG4gICAgbWluUmF0aW8gPSBNYXRoLm1heChtYXhWYWx1ZSAvIGJldGEsIGJldGEgLyBtaW5WYWx1ZSk7XG5cbiAgICAvLyBLZWVwIGFkZGluZyBub2RlcyB3aGlsZSB0aGUgYXNwZWN0IHJhdGlvIG1haW50YWlucyBvciBpbXByb3Zlcy5cbiAgICBmb3IgKDsgaTEgPCBuOyArK2kxKSB7XG4gICAgICBzdW1WYWx1ZSArPSBub2RlVmFsdWUgPSBub2Rlc1tpMV0udmFsdWU7XG4gICAgICBpZiAobm9kZVZhbHVlIDwgbWluVmFsdWUpIG1pblZhbHVlID0gbm9kZVZhbHVlO1xuICAgICAgaWYgKG5vZGVWYWx1ZSA+IG1heFZhbHVlKSBtYXhWYWx1ZSA9IG5vZGVWYWx1ZTtcbiAgICAgIGJldGEgPSBzdW1WYWx1ZSAqIHN1bVZhbHVlICogYWxwaGE7XG4gICAgICBuZXdSYXRpbyA9IE1hdGgubWF4KG1heFZhbHVlIC8gYmV0YSwgYmV0YSAvIG1pblZhbHVlKTtcbiAgICAgIGlmIChuZXdSYXRpbyA+IG1pblJhdGlvKSB7IHN1bVZhbHVlIC09IG5vZGVWYWx1ZTsgYnJlYWs7IH1cbiAgICAgIG1pblJhdGlvID0gbmV3UmF0aW87XG4gICAgfVxuXG4gICAgLy8gUG9zaXRpb24gYW5kIHJlY29yZCB0aGUgcm93IG9yaWVudGF0aW9uLlxuICAgIHJvd3MucHVzaChyb3cgPSB7dmFsdWU6IHN1bVZhbHVlLCBkaWNlOiBkeCA8IGR5LCBjaGlsZHJlbjogbm9kZXMuc2xpY2UoaTAsIGkxKX0pO1xuICAgIGlmIChyb3cuZGljZSkgdHJlZW1hcERpY2Uocm93LCB4MCwgeTAsIHgxLCB2YWx1ZSA/IHkwICs9IGR5ICogc3VtVmFsdWUgLyB2YWx1ZSA6IHkxKTtcbiAgICBlbHNlIHRyZWVtYXBTbGljZShyb3csIHgwLCB5MCwgdmFsdWUgPyB4MCArPSBkeCAqIHN1bVZhbHVlIC8gdmFsdWUgOiB4MSwgeTEpO1xuICAgIHZhbHVlIC09IHN1bVZhbHVlLCBpMCA9IGkxO1xuICB9XG5cbiAgcmV0dXJuIHJvd3M7XG59XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20ocmF0aW8pIHtcblxuICBmdW5jdGlvbiBzcXVhcmlmeShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgc3F1YXJpZnlSYXRpbyhyYXRpbywgcGFyZW50LCB4MCwgeTAsIHgxLCB5MSk7XG4gIH1cblxuICBzcXVhcmlmeS5yYXRpbyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gY3VzdG9tKCh4ID0gK3gpID4gMSA/IHggOiAxKTtcbiAgfTtcblxuICByZXR1cm4gc3F1YXJpZnk7XG59KShwaGkpO1xuIiwiaW1wb3J0IHJvdW5kTm9kZSBmcm9tIFwiLi9yb3VuZFwiO1xuaW1wb3J0IHNxdWFyaWZ5IGZyb20gXCIuL3NxdWFyaWZ5XCI7XG5pbXBvcnQge3JlcXVpcmVkfSBmcm9tIFwiLi4vYWNjZXNzb3JzXCI7XG5pbXBvcnQgY29uc3RhbnQsIHtjb25zdGFudFplcm99IGZyb20gXCIuLi9jb25zdGFudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHRpbGUgPSBzcXVhcmlmeSxcbiAgICAgIHJvdW5kID0gZmFsc2UsXG4gICAgICBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICBwYWRkaW5nU3RhY2sgPSBbMF0sXG4gICAgICBwYWRkaW5nSW5uZXIgPSBjb25zdGFudFplcm8sXG4gICAgICBwYWRkaW5nVG9wID0gY29uc3RhbnRaZXJvLFxuICAgICAgcGFkZGluZ1JpZ2h0ID0gY29uc3RhbnRaZXJvLFxuICAgICAgcGFkZGluZ0JvdHRvbSA9IGNvbnN0YW50WmVybyxcbiAgICAgIHBhZGRpbmdMZWZ0ID0gY29uc3RhbnRaZXJvO1xuXG4gIGZ1bmN0aW9uIHRyZWVtYXAocm9vdCkge1xuICAgIHJvb3QueDAgPVxuICAgIHJvb3QueTAgPSAwO1xuICAgIHJvb3QueDEgPSBkeDtcbiAgICByb290LnkxID0gZHk7XG4gICAgcm9vdC5lYWNoQmVmb3JlKHBvc2l0aW9uTm9kZSk7XG4gICAgcGFkZGluZ1N0YWNrID0gWzBdO1xuICAgIGlmIChyb3VuZCkgcm9vdC5lYWNoQmVmb3JlKHJvdW5kTm9kZSk7XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICBmdW5jdGlvbiBwb3NpdGlvbk5vZGUobm9kZSkge1xuICAgIHZhciBwID0gcGFkZGluZ1N0YWNrW25vZGUuZGVwdGhdLFxuICAgICAgICB4MCA9IG5vZGUueDAgKyBwLFxuICAgICAgICB5MCA9IG5vZGUueTAgKyBwLFxuICAgICAgICB4MSA9IG5vZGUueDEgLSBwLFxuICAgICAgICB5MSA9IG5vZGUueTEgLSBwO1xuICAgIGlmICh4MSA8IHgwKSB4MCA9IHgxID0gKHgwICsgeDEpIC8gMjtcbiAgICBpZiAoeTEgPCB5MCkgeTAgPSB5MSA9ICh5MCArIHkxKSAvIDI7XG4gICAgbm9kZS54MCA9IHgwO1xuICAgIG5vZGUueTAgPSB5MDtcbiAgICBub2RlLngxID0geDE7XG4gICAgbm9kZS55MSA9IHkxO1xuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBwID0gcGFkZGluZ1N0YWNrW25vZGUuZGVwdGggKyAxXSA9IHBhZGRpbmdJbm5lcihub2RlKSAvIDI7XG4gICAgICB4MCArPSBwYWRkaW5nTGVmdChub2RlKSAtIHA7XG4gICAgICB5MCArPSBwYWRkaW5nVG9wKG5vZGUpIC0gcDtcbiAgICAgIHgxIC09IHBhZGRpbmdSaWdodChub2RlKSAtIHA7XG4gICAgICB5MSAtPSBwYWRkaW5nQm90dG9tKG5vZGUpIC0gcDtcbiAgICAgIGlmICh4MSA8IHgwKSB4MCA9IHgxID0gKHgwICsgeDEpIC8gMjtcbiAgICAgIGlmICh5MSA8IHkwKSB5MCA9IHkxID0gKHkwICsgeTEpIC8gMjtcbiAgICAgIHRpbGUobm9kZSwgeDAsIHkwLCB4MSwgeTEpO1xuICAgIH1cbiAgfVxuXG4gIHRyZWVtYXAucm91bmQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIXgsIHRyZWVtYXApIDogcm91bmQ7XG4gIH07XG5cbiAgdHJlZW1hcC5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHRyZWVtYXApIDogW2R4LCBkeV07XG4gIH07XG5cbiAgdHJlZW1hcC50aWxlID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpbGUgPSByZXF1aXJlZCh4KSwgdHJlZW1hcCkgOiB0aWxlO1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRyZWVtYXAucGFkZGluZ0lubmVyKHgpLnBhZGRpbmdPdXRlcih4KSA6IHRyZWVtYXAucGFkZGluZ0lubmVyKCk7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nSW5uZXIgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHRyZWVtYXApIDogcGFkZGluZ0lubmVyO1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ091dGVyID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdHJlZW1hcC5wYWRkaW5nVG9wKHgpLnBhZGRpbmdSaWdodCh4KS5wYWRkaW5nQm90dG9tKHgpLnBhZGRpbmdMZWZ0KHgpIDogdHJlZW1hcC5wYWRkaW5nVG9wKCk7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nVG9wID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdUb3AgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nVG9wO1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ1JpZ2h0ID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdSaWdodCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdSaWdodDtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdCb3R0b20gPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0JvdHRvbSA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdCb3R0b207XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nTGVmdCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nTGVmdCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdMZWZ0O1xuICB9O1xuXG4gIHJldHVybiB0cmVlbWFwO1xufVxuIiwiaW1wb3J0IHRyZWVtYXBEaWNlIGZyb20gXCIuL2RpY2VcIjtcbmltcG9ydCB0cmVlbWFwU2xpY2UgZnJvbSBcIi4vc2xpY2VcIjtcbmltcG9ydCB7cGhpLCBzcXVhcmlmeVJhdGlvfSBmcm9tIFwiLi9zcXVhcmlmeVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKHJhdGlvKSB7XG5cbiAgZnVuY3Rpb24gcmVzcXVhcmlmeShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgaWYgKChyb3dzID0gcGFyZW50Ll9zcXVhcmlmeSkgJiYgKHJvd3MucmF0aW8gPT09IHJhdGlvKSkge1xuICAgICAgdmFyIHJvd3MsXG4gICAgICAgICAgcm93LFxuICAgICAgICAgIG5vZGVzLFxuICAgICAgICAgIGksXG4gICAgICAgICAgaiA9IC0xLFxuICAgICAgICAgIG4sXG4gICAgICAgICAgbSA9IHJvd3MubGVuZ3RoLFxuICAgICAgICAgIHZhbHVlID0gcGFyZW50LnZhbHVlO1xuXG4gICAgICB3aGlsZSAoKytqIDwgbSkge1xuICAgICAgICByb3cgPSByb3dzW2pdLCBub2RlcyA9IHJvdy5jaGlsZHJlbjtcbiAgICAgICAgZm9yIChpID0gcm93LnZhbHVlID0gMCwgbiA9IG5vZGVzLmxlbmd0aDsgaSA8IG47ICsraSkgcm93LnZhbHVlICs9IG5vZGVzW2ldLnZhbHVlO1xuICAgICAgICBpZiAocm93LmRpY2UpIHRyZWVtYXBEaWNlKHJvdywgeDAsIHkwLCB4MSwgeTAgKz0gKHkxIC0geTApICogcm93LnZhbHVlIC8gdmFsdWUpO1xuICAgICAgICBlbHNlIHRyZWVtYXBTbGljZShyb3csIHgwLCB5MCwgeDAgKz0gKHgxIC0geDApICogcm93LnZhbHVlIC8gdmFsdWUsIHkxKTtcbiAgICAgICAgdmFsdWUgLT0gcm93LnZhbHVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnQuX3NxdWFyaWZ5ID0gcm93cyA9IHNxdWFyaWZ5UmF0aW8ocmF0aW8sIHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpO1xuICAgICAgcm93cy5yYXRpbyA9IHJhdGlvO1xuICAgIH1cbiAgfVxuXG4gIHJlc3F1YXJpZnkucmF0aW8gPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGN1c3RvbSgoeCA9ICt4KSA+IDEgPyB4IDogMSk7XG4gIH07XG5cbiAgcmV0dXJuIHJlc3F1YXJpZnk7XG59KShwaGkpO1xuIiwiaW1wb3J0IGNyb3NzIGZyb20gXCIuL2Nyb3NzXCI7XG5cbmZ1bmN0aW9uIGxleGljb2dyYXBoaWNPcmRlcihhLCBiKSB7XG4gIHJldHVybiBhWzBdIC0gYlswXSB8fCBhWzFdIC0gYlsxXTtcbn1cblxuLy8gQ29tcHV0ZXMgdGhlIHVwcGVyIGNvbnZleCBodWxsIHBlciB0aGUgbW9ub3RvbmUgY2hhaW4gYWxnb3JpdGhtLlxuLy8gQXNzdW1lcyBwb2ludHMubGVuZ3RoID49IDMsIGlzIHNvcnRlZCBieSB4LCB1bmlxdWUgaW4geS5cbi8vIFJldHVybnMgYW4gYXJyYXkgb2YgaW5kaWNlcyBpbnRvIHBvaW50cyBpbiBsZWZ0LXRvLXJpZ2h0IG9yZGVyLlxuZnVuY3Rpb24gY29tcHV0ZVVwcGVySHVsbEluZGV4ZXMocG9pbnRzKSB7XG4gIHZhciBuID0gcG9pbnRzLmxlbmd0aCxcbiAgICAgIGluZGV4ZXMgPSBbMCwgMV0sXG4gICAgICBzaXplID0gMjtcblxuICBmb3IgKHZhciBpID0gMjsgaSA8IG47ICsraSkge1xuICAgIHdoaWxlIChzaXplID4gMSAmJiBjcm9zcyhwb2ludHNbaW5kZXhlc1tzaXplIC0gMl1dLCBwb2ludHNbaW5kZXhlc1tzaXplIC0gMV1dLCBwb2ludHNbaV0pIDw9IDApIC0tc2l6ZTtcbiAgICBpbmRleGVzW3NpemUrK10gPSBpO1xuICB9XG5cbiAgcmV0dXJuIGluZGV4ZXMuc2xpY2UoMCwgc2l6ZSk7IC8vIHJlbW92ZSBwb3BwZWQgcG9pbnRzXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBvaW50cykge1xuICBpZiAoKG4gPSBwb2ludHMubGVuZ3RoKSA8IDMpIHJldHVybiBudWxsO1xuXG4gIHZhciBpLFxuICAgICAgbixcbiAgICAgIHNvcnRlZFBvaW50cyA9IG5ldyBBcnJheShuKSxcbiAgICAgIGZsaXBwZWRQb2ludHMgPSBuZXcgQXJyYXkobik7XG5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgc29ydGVkUG9pbnRzW2ldID0gWytwb2ludHNbaV1bMF0sICtwb2ludHNbaV1bMV0sIGldO1xuICBzb3J0ZWRQb2ludHMuc29ydChsZXhpY29ncmFwaGljT3JkZXIpO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBmbGlwcGVkUG9pbnRzW2ldID0gW3NvcnRlZFBvaW50c1tpXVswXSwgLXNvcnRlZFBvaW50c1tpXVsxXV07XG5cbiAgdmFyIHVwcGVySW5kZXhlcyA9IGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKHNvcnRlZFBvaW50cyksXG4gICAgICBsb3dlckluZGV4ZXMgPSBjb21wdXRlVXBwZXJIdWxsSW5kZXhlcyhmbGlwcGVkUG9pbnRzKTtcblxuICAvLyBDb25zdHJ1Y3QgdGhlIGh1bGwgcG9seWdvbiwgcmVtb3ZpbmcgcG9zc2libGUgZHVwbGljYXRlIGVuZHBvaW50cy5cbiAgdmFyIHNraXBMZWZ0ID0gbG93ZXJJbmRleGVzWzBdID09PSB1cHBlckluZGV4ZXNbMF0sXG4gICAgICBza2lwUmlnaHQgPSBsb3dlckluZGV4ZXNbbG93ZXJJbmRleGVzLmxlbmd0aCAtIDFdID09PSB1cHBlckluZGV4ZXNbdXBwZXJJbmRleGVzLmxlbmd0aCAtIDFdLFxuICAgICAgaHVsbCA9IFtdO1xuXG4gIC8vIEFkZCB1cHBlciBodWxsIGluIHJpZ2h0LXRvLWwgb3JkZXIuXG4gIC8vIFRoZW4gYWRkIGxvd2VyIGh1bGwgaW4gbGVmdC10by1yaWdodCBvcmRlci5cbiAgZm9yIChpID0gdXBwZXJJbmRleGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSBodWxsLnB1c2gocG9pbnRzW3NvcnRlZFBvaW50c1t1cHBlckluZGV4ZXNbaV1dWzJdXSk7XG4gIGZvciAoaSA9ICtza2lwTGVmdDsgaSA8IGxvd2VySW5kZXhlcy5sZW5ndGggLSBza2lwUmlnaHQ7ICsraSkgaHVsbC5wdXNoKHBvaW50c1tzb3J0ZWRQb2ludHNbbG93ZXJJbmRleGVzW2ldXVsyXV0pO1xuXG4gIHJldHVybiBodWxsO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpO1xufVxuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tTm9ybWFsKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21Ob3JtYWwobXUsIHNpZ21hKSB7XG4gICAgdmFyIHgsIHI7XG4gICAgbXUgPSBtdSA9PSBudWxsID8gMCA6ICttdTtcbiAgICBzaWdtYSA9IHNpZ21hID09IG51bGwgPyAxIDogK3NpZ21hO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB5O1xuXG4gICAgICAvLyBJZiBhdmFpbGFibGUsIHVzZSB0aGUgc2Vjb25kIHByZXZpb3VzbHktZ2VuZXJhdGVkIHVuaWZvcm0gcmFuZG9tLlxuICAgICAgaWYgKHggIT0gbnVsbCkgeSA9IHgsIHggPSBudWxsO1xuXG4gICAgICAvLyBPdGhlcndpc2UsIGdlbmVyYXRlIGEgbmV3IHggYW5kIHkuXG4gICAgICBlbHNlIGRvIHtcbiAgICAgICAgeCA9IHNvdXJjZSgpICogMiAtIDE7XG4gICAgICAgIHkgPSBzb3VyY2UoKSAqIDIgLSAxO1xuICAgICAgICByID0geCAqIHggKyB5ICogeTtcbiAgICAgIH0gd2hpbGUgKCFyIHx8IHIgPiAxKTtcblxuICAgICAgcmV0dXJuIG11ICsgc2lnbWEgKiB5ICogTWF0aC5zcXJ0KC0yICogTWF0aC5sb2cocikgLyByKTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tTm9ybWFsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbU5vcm1hbDtcblxuICByZXR1cm4gcmFuZG9tTm9ybWFsO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21Vbmlmb3JtKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21Vbmlmb3JtKG1pbiwgbWF4KSB7XG4gICAgbWluID0gbWluID09IG51bGwgPyAwIDogK21pbjtcbiAgICBtYXggPSBtYXggPT0gbnVsbCA/IDEgOiArbWF4O1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSBtYXggPSBtaW4sIG1pbiA9IDA7XG4gICAgZWxzZSBtYXggLT0gbWluO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzb3VyY2UoKSAqIG1heCArIG1pbjtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tVW5pZm9ybS5zb3VyY2UgPSBzb3VyY2VSYW5kb21Vbmlmb3JtO1xuXG4gIHJldHVybiByYW5kb21Vbmlmb3JtO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21JcndpbkhhbGwoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbUlyd2luSGFsbChuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgc3VtID0gMCwgaSA9IDA7IGkgPCBuOyArK2kpIHN1bSArPSBzb3VyY2UoKTtcbiAgICAgIHJldHVybiBzdW07XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbUlyd2luSGFsbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21JcndpbkhhbGw7XG5cbiAgcmV0dXJuIHJhbmRvbUlyd2luSGFsbDtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuaW1wb3J0IG5vcm1hbCBmcm9tIFwiLi9ub3JtYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUxvZ05vcm1hbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tTG9nTm9ybWFsKCkge1xuICAgIHZhciByYW5kb21Ob3JtYWwgPSBub3JtYWwuc291cmNlKHNvdXJjZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gTWF0aC5leHAocmFuZG9tTm9ybWFsKCkpO1xuICAgIH07XG4gIH1cblxuICByYW5kb21Mb2dOb3JtYWwuc291cmNlID0gc291cmNlUmFuZG9tTG9nTm9ybWFsO1xuXG4gIHJldHVybiByYW5kb21Mb2dOb3JtYWw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcbmltcG9ydCBpcndpbkhhbGwgZnJvbSBcIi4vaXJ3aW5IYWxsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21CYXRlcyhzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tQmF0ZXMobikge1xuICAgIHZhciByYW5kb21JcndpbkhhbGwgPSBpcndpbkhhbGwuc291cmNlKHNvdXJjZSkobik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJhbmRvbUlyd2luSGFsbCgpIC8gbjtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tQmF0ZXMuc291cmNlID0gc291cmNlUmFuZG9tQmF0ZXM7XG5cbiAgcmV0dXJuIHJhbmRvbUJhdGVzO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21FeHBvbmVudGlhbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tRXhwb25lbnRpYWwobGFtYmRhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIC1NYXRoLmxvZygxIC0gc291cmNlKCkpIC8gbGFtYmRhO1xuICAgIH07XG4gIH1cblxuICByYW5kb21FeHBvbmVudGlhbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21FeHBvbmVudGlhbDtcblxuICByZXR1cm4gcmFuZG9tRXhwb25lbnRpYWw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImV4cG9ydCBmdW5jdGlvbiBpbml0UmFuZ2UoZG9tYWluLCByYW5nZSkge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IGJyZWFrO1xuICAgIGNhc2UgMTogdGhpcy5yYW5nZShkb21haW4pOyBicmVhaztcbiAgICBkZWZhdWx0OiB0aGlzLnJhbmdlKHJhbmdlKS5kb21haW4oZG9tYWluKTsgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0SW50ZXJwb2xhdG9yKGRvbWFpbiwgaW50ZXJwb2xhdG9yKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogYnJlYWs7XG4gICAgY2FzZSAxOiB0aGlzLmludGVycG9sYXRvcihkb21haW4pOyBicmVhaztcbiAgICBkZWZhdWx0OiB0aGlzLmludGVycG9sYXRvcihpbnRlcnBvbGF0b3IpLmRvbWFpbihkb21haW4pOyBicmVhaztcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsInZhciBhcnJheSA9IEFycmF5LnByb3RvdHlwZTtcblxuZXhwb3J0IHZhciBtYXAgPSBhcnJheS5tYXA7XG5leHBvcnQgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG4iLCJpbXBvcnQge21hcH0gZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdFwiO1xuXG5leHBvcnQgdmFyIGltcGxpY2l0ID0ge25hbWU6IFwiaW1wbGljaXRcIn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9yZGluYWwoKSB7XG4gIHZhciBpbmRleCA9IG1hcCgpLFxuICAgICAgZG9tYWluID0gW10sXG4gICAgICByYW5nZSA9IFtdLFxuICAgICAgdW5rbm93biA9IGltcGxpY2l0O1xuXG4gIGZ1bmN0aW9uIHNjYWxlKGQpIHtcbiAgICB2YXIga2V5ID0gZCArIFwiXCIsIGkgPSBpbmRleC5nZXQoa2V5KTtcbiAgICBpZiAoIWkpIHtcbiAgICAgIGlmICh1bmtub3duICE9PSBpbXBsaWNpdCkgcmV0dXJuIHVua25vd247XG4gICAgICBpbmRleC5zZXQoa2V5LCBpID0gZG9tYWluLnB1c2goZCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmFuZ2VbKGkgLSAxKSAlIHJhbmdlLmxlbmd0aF07XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgZG9tYWluID0gW10sIGluZGV4ID0gbWFwKCk7XG4gICAgdmFyIGkgPSAtMSwgbiA9IF8ubGVuZ3RoLCBkLCBrZXk7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghaW5kZXguaGFzKGtleSA9IChkID0gX1tpXSkgKyBcIlwiKSkgaW5kZXguc2V0KGtleSwgZG9tYWluLnB1c2goZCkpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHNjYWxlKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG9yZGluYWwoZG9tYWluLCByYW5nZSkudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiAreDtcbn1cbiIsImltcG9ydCB7YmlzZWN0fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGUgYXMgaW50ZXJwb2xhdGVWYWx1ZSwgaW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUm91bmR9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHttYXAsIHNsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG52YXIgdW5pdCA9IFswLCAxXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgcmV0dXJuIHg7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZShhLCBiKSB7XG4gIHJldHVybiAoYiAtPSAoYSA9ICthKSlcbiAgICAgID8gZnVuY3Rpb24oeCkgeyByZXR1cm4gKHggLSBhKSAvIGI7IH1cbiAgICAgIDogY29uc3RhbnQoaXNOYU4oYikgPyBOYU4gOiAwLjUpO1xufVxuXG5mdW5jdGlvbiBjbGFtcGVyKGRvbWFpbikge1xuICB2YXIgYSA9IGRvbWFpblswXSwgYiA9IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV0sIHQ7XG4gIGlmIChhID4gYikgdCA9IGEsIGEgPSBiLCBiID0gdDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubWF4KGEsIE1hdGgubWluKGIsIHgpKTsgfTtcbn1cblxuLy8gbm9ybWFsaXplKGEsIGIpKHgpIHRha2VzIGEgZG9tYWluIHZhbHVlIHggaW4gW2EsYl0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcGFyYW1ldGVyIHQgaW4gWzAsMV0uXG4vLyBpbnRlcnBvbGF0ZShhLCBiKSh0KSB0YWtlcyBhIHBhcmFtZXRlciB0IGluIFswLDFdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJhbmdlIHZhbHVlIHggaW4gW2EsYl0uXG5mdW5jdGlvbiBiaW1hcChkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgZDAgPSBkb21haW5bMF0sIGQxID0gZG9tYWluWzFdLCByMCA9IHJhbmdlWzBdLCByMSA9IHJhbmdlWzFdO1xuICBpZiAoZDEgPCBkMCkgZDAgPSBub3JtYWxpemUoZDEsIGQwKSwgcjAgPSBpbnRlcnBvbGF0ZShyMSwgcjApO1xuICBlbHNlIGQwID0gbm9ybWFsaXplKGQwLCBkMSksIHIwID0gaW50ZXJwb2xhdGUocjAsIHIxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHIwKGQwKHgpKTsgfTtcbn1cblxuZnVuY3Rpb24gcG9seW1hcChkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgaiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxLFxuICAgICAgZCA9IG5ldyBBcnJheShqKSxcbiAgICAgIHIgPSBuZXcgQXJyYXkoaiksXG4gICAgICBpID0gLTE7XG5cbiAgLy8gUmV2ZXJzZSBkZXNjZW5kaW5nIGRvbWFpbnMuXG4gIGlmIChkb21haW5bal0gPCBkb21haW5bMF0pIHtcbiAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcbiAgfVxuXG4gIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgZFtpXSA9IG5vcm1hbGl6ZShkb21haW5baV0sIGRvbWFpbltpICsgMV0pO1xuICAgIHJbaV0gPSBpbnRlcnBvbGF0ZShyYW5nZVtpXSwgcmFuZ2VbaSArIDFdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgdmFyIGkgPSBiaXNlY3QoZG9tYWluLCB4LCAxLCBqKSAtIDE7XG4gICAgcmV0dXJuIHJbaV0oZFtpXSh4KSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KHNvdXJjZSwgdGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXRcbiAgICAgIC5kb21haW4oc291cmNlLmRvbWFpbigpKVxuICAgICAgLnJhbmdlKHNvdXJjZS5yYW5nZSgpKVxuICAgICAgLmludGVycG9sYXRlKHNvdXJjZS5pbnRlcnBvbGF0ZSgpKVxuICAgICAgLmNsYW1wKHNvdXJjZS5jbGFtcCgpKVxuICAgICAgLnVua25vd24oc291cmNlLnVua25vd24oKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1lcigpIHtcbiAgdmFyIGRvbWFpbiA9IHVuaXQsXG4gICAgICByYW5nZSA9IHVuaXQsXG4gICAgICBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlVmFsdWUsXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICB1bnRyYW5zZm9ybSxcbiAgICAgIHVua25vd24sXG4gICAgICBjbGFtcCA9IGlkZW50aXR5LFxuICAgICAgcGllY2V3aXNlLFxuICAgICAgb3V0cHV0LFxuICAgICAgaW5wdXQ7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICBwaWVjZXdpc2UgPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpID4gMiA/IHBvbHltYXAgOiBiaW1hcDtcbiAgICBvdXRwdXQgPSBpbnB1dCA9IG51bGw7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IChvdXRwdXQgfHwgKG91dHB1dCA9IHBpZWNld2lzZShkb21haW4ubWFwKHRyYW5zZm9ybSksIHJhbmdlLCBpbnRlcnBvbGF0ZSkpKSh0cmFuc2Zvcm0oY2xhbXAoeCkpKTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gY2xhbXAodW50cmFuc2Zvcm0oKGlucHV0IHx8IChpbnB1dCA9IHBpZWNld2lzZShyYW5nZSwgZG9tYWluLm1hcCh0cmFuc2Zvcm0pLCBpbnRlcnBvbGF0ZU51bWJlcikpKSh5KSkpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAuY2FsbChfLCBudW1iZXIpLCBjbGFtcCA9PT0gaWRlbnRpdHkgfHwgKGNsYW1wID0gY2xhbXBlcihkb21haW4pKSwgcmVzY2FsZSgpKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UuY2FsbChfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBzbGljZS5jYWxsKF8pLCBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlUm91bmQsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9IF8gPyBjbGFtcGVyKGRvbWFpbikgOiBpZGVudGl0eSwgc2NhbGUpIDogY2xhbXAgIT09IGlkZW50aXR5O1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRlID0gXywgcmVzY2FsZSgpKSA6IGludGVycG9sYXRlO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQsIHUpIHtcbiAgICB0cmFuc2Zvcm0gPSB0LCB1bnRyYW5zZm9ybSA9IHU7XG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGludW91cyh0cmFuc2Zvcm0sIHVudHJhbnNmb3JtKSB7XG4gIHJldHVybiB0cmFuc2Zvcm1lcigpKHRyYW5zZm9ybSwgdW50cmFuc2Zvcm0pO1xufVxuIiwiaW1wb3J0IHt0aWNrU3RlcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2Zvcm1hdCwgZm9ybWF0UHJlZml4LCBmb3JtYXRTcGVjaWZpZXIsIHByZWNpc2lvbkZpeGVkLCBwcmVjaXNpb25QcmVmaXgsIHByZWNpc2lvblJvdW5kfSBmcm9tIFwiZDMtZm9ybWF0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBjb3VudCwgc3BlY2lmaWVyKSB7XG4gIHZhciBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSxcbiAgICAgIHByZWNpc2lvbjtcbiAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcbiAgc3dpdGNoIChzcGVjaWZpZXIudHlwZSkge1xuICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgICByZXR1cm4gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpO1xuICAgIH1cbiAgICBjYXNlIFwiXCI6XG4gICAgY2FzZSBcImVcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcInJcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUm91bmQoc3RlcCwgTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSkpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCJlXCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJmXCI6XG4gICAgY2FzZSBcIiVcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXQoc3BlY2lmaWVyKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCB2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIG1heCkge1xuICBzdGVwID0gTWF0aC5hYnMoc3RlcCksIG1heCA9IE1hdGguYWJzKG1heCkgLSBzdGVwO1xuICByZXR1cm4gTWF0aC5tYXgoMCwgZXhwb25lbnQobWF4KSAtIGV4cG9uZW50KHN0ZXApKSArIDE7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJpbXBvcnQge3RpY2tzLCB0aWNrSW5jcmVtZW50fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCBjb250aW51b3VzLCB7Y29weSwgaWRlbnRpdHl9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5pbXBvcnQgdGlja0Zvcm1hdCBmcm9tIFwiLi90aWNrRm9ybWF0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lYXJpc2goc2NhbGUpIHtcbiAgdmFyIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja3MoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCk7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiB0aWNrRm9ybWF0KGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQsIHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG5cbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICBpMCA9IDAsXG4gICAgICAgIGkxID0gZC5sZW5ndGggLSAxLFxuICAgICAgICBzdGFydCA9IGRbaTBdLFxuICAgICAgICBzdG9wID0gZFtpMV0sXG4gICAgICAgIHN0ZXA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG5cbiAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBkW2kxXSA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIGRbaTBdID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBkb21haW4oZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGluZWFyKCkge1xuICB2YXIgc2NhbGUgPSBjb250aW51b3VzKGlkZW50aXR5LCBpZGVudGl0eSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBsaW5lYXIoKSk7XG4gIH07XG5cbiAgaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZG9tYWluLCBpbnRlcnZhbCkge1xuICBkb21haW4gPSBkb21haW4uc2xpY2UoKTtcblxuICB2YXIgaTAgPSAwLFxuICAgICAgaTEgPSBkb21haW4ubGVuZ3RoIC0gMSxcbiAgICAgIHgwID0gZG9tYWluW2kwXSxcbiAgICAgIHgxID0gZG9tYWluW2kxXSxcbiAgICAgIHQ7XG5cbiAgaWYgKHgxIDwgeDApIHtcbiAgICB0ID0gaTAsIGkwID0gaTEsIGkxID0gdDtcbiAgICB0ID0geDAsIHgwID0geDEsIHgxID0gdDtcbiAgfVxuXG4gIGRvbWFpbltpMF0gPSBpbnRlcnZhbC5mbG9vcih4MCk7XG4gIGRvbWFpbltpMV0gPSBpbnRlcnZhbC5jZWlsKHgxKTtcbiAgcmV0dXJuIGRvbWFpbjtcbn1cbiIsInZhciB0MCA9IG5ldyBEYXRlLFxuICAgIHQxID0gbmV3IERhdGU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5ld0ludGVydmFsKGZsb29yaSwgb2Zmc2V0aSwgY291bnQsIGZpZWxkKSB7XG5cbiAgZnVuY3Rpb24gaW50ZXJ2YWwoZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDAgPyBuZXcgRGF0ZSA6IG5ldyBEYXRlKCtkYXRlKSksIGRhdGU7XG4gIH1cblxuICBpbnRlcnZhbC5mbG9vciA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLmNlaWwgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoZGF0ZSAtIDEpKSwgb2Zmc2V0aShkYXRlLCAxKSwgZmxvb3JpKGRhdGUpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJvdW5kID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciBkMCA9IGludGVydmFsKGRhdGUpLFxuICAgICAgICBkMSA9IGludGVydmFsLmNlaWwoZGF0ZSk7XG4gICAgcmV0dXJuIGRhdGUgLSBkMCA8IGQxIC0gZGF0ZSA/IGQwIDogZDE7XG4gIH07XG5cbiAgaW50ZXJ2YWwub2Zmc2V0ID0gZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIHJldHVybiBvZmZzZXRpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSksIHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgdmFyIHJhbmdlID0gW10sIHByZXZpb3VzO1xuICAgIHN0YXJ0ID0gaW50ZXJ2YWwuY2VpbChzdGFydCk7XG4gICAgc3RlcCA9IHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApO1xuICAgIGlmICghKHN0YXJ0IDwgc3RvcCkgfHwgIShzdGVwID4gMCkpIHJldHVybiByYW5nZTsgLy8gYWxzbyBoYW5kbGVzIEludmFsaWQgRGF0ZVxuICAgIGRvIHJhbmdlLnB1c2gocHJldmlvdXMgPSBuZXcgRGF0ZSgrc3RhcnQpKSwgb2Zmc2V0aShzdGFydCwgc3RlcCksIGZsb29yaShzdGFydCk7XG4gICAgd2hpbGUgKHByZXZpb3VzIDwgc3RhcnQgJiYgc3RhcnQgPCBzdG9wKTtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgaW50ZXJ2YWwuZmlsdGVyID0gZnVuY3Rpb24odGVzdCkge1xuICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB3aGlsZSAoZmxvb3JpKGRhdGUpLCAhdGVzdChkYXRlKSkgZGF0ZS5zZXRUaW1lKGRhdGUgLSAxKTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB7XG4gICAgICAgIGlmIChzdGVwIDwgMCkgd2hpbGUgKCsrc3RlcCA8PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgLTEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9IGVsc2Ugd2hpbGUgKC0tc3RlcCA+PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgKzEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgaWYgKGNvdW50KSB7XG4gICAgaW50ZXJ2YWwuY291bnQgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICB0MC5zZXRUaW1lKCtzdGFydCksIHQxLnNldFRpbWUoK2VuZCk7XG4gICAgICBmbG9vcmkodDApLCBmbG9vcmkodDEpO1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoY291bnQodDAsIHQxKSk7XG4gICAgfTtcblxuICAgIGludGVydmFsLmV2ZXJ5ID0gZnVuY3Rpb24oc3RlcCkge1xuICAgICAgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgICByZXR1cm4gIWlzRmluaXRlKHN0ZXApIHx8ICEoc3RlcCA+IDApID8gbnVsbFxuICAgICAgICAgIDogIShzdGVwID4gMSkgPyBpbnRlcnZhbFxuICAgICAgICAgIDogaW50ZXJ2YWwuZmlsdGVyKGZpZWxkXG4gICAgICAgICAgICAgID8gZnVuY3Rpb24oZCkgeyByZXR1cm4gZmllbGQoZCkgJSBzdGVwID09PSAwOyB9XG4gICAgICAgICAgICAgIDogZnVuY3Rpb24oZCkgeyByZXR1cm4gaW50ZXJ2YWwuY291bnQoMCwgZCkgJSBzdGVwID09PSAwOyB9KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGludGVydmFsO1xufVxuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciB5ZWFyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbnllYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB5ZWFyO1xuZXhwb3J0IHZhciB5ZWFycyA9IHllYXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIG1vbnRoID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldERhdGUoMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0TW9udGgoZGF0ZS5nZXRNb250aCgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0TW9udGgoKSAtIHN0YXJ0LmdldE1vbnRoKCkgKyAoZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpKSAqIDEyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNb250aCgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1vbnRoO1xuZXhwb3J0IHZhciBtb250aHMgPSBtb250aC5yYW5nZTtcbiIsImV4cG9ydCB2YXIgZHVyYXRpb25TZWNvbmQgPSAxZTM7XG5leHBvcnQgdmFyIGR1cmF0aW9uTWludXRlID0gNmU0O1xuZXhwb3J0IHZhciBkdXJhdGlvbkhvdXIgPSAzNmU1O1xuZXhwb3J0IHZhciBkdXJhdGlvbkRheSA9IDg2NGU1O1xuZXhwb3J0IHZhciBkdXJhdGlvbldlZWsgPSA2MDQ4ZTU7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uV2Vla30gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxuZnVuY3Rpb24gd2Vla2RheShpKSB7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gKGRhdGUuZ2V0RGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25XZWVrO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciBzdW5kYXkgPSB3ZWVrZGF5KDApO1xuZXhwb3J0IHZhciBtb25kYXkgPSB3ZWVrZGF5KDEpO1xuZXhwb3J0IHZhciB0dWVzZGF5ID0gd2Vla2RheSgyKTtcbmV4cG9ydCB2YXIgd2VkbmVzZGF5ID0gd2Vla2RheSgzKTtcbmV4cG9ydCB2YXIgdGh1cnNkYXkgPSB3ZWVrZGF5KDQpO1xuZXhwb3J0IHZhciBmcmlkYXkgPSB3ZWVrZGF5KDUpO1xuZXhwb3J0IHZhciBzYXR1cmRheSA9IHdlZWtkYXkoNik7XG5cbmV4cG9ydCB2YXIgc3VuZGF5cyA9IHN1bmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgbW9uZGF5cyA9IG1vbmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdHVlc2RheXMgPSB0dWVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB3ZWRuZXNkYXlzID0gd2VkbmVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB0aHVyc2RheXMgPSB0aHVyc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgZnJpZGF5cyA9IGZyaWRheS5yYW5nZTtcbmV4cG9ydCB2YXIgc2F0dXJkYXlzID0gc2F0dXJkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXksIGR1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgZGF5ID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25EYXk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldERhdGUoKSAtIDE7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGF5O1xuZXhwb3J0IHZhciBkYXlzID0gZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91ciwgZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgaG91ciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKGRhdGUgLSBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZS5nZXRTZWNvbmRzKCkgKiBkdXJhdGlvblNlY29uZCAtIGRhdGUuZ2V0TWludXRlcygpICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgaG91cjtcbmV4cG9ydCB2YXIgaG91cnMgPSBob3VyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlLCBkdXJhdGlvblNlY29uZH0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIG1pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKGRhdGUgLSBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZS5nZXRTZWNvbmRzKCkgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldE1pbnV0ZXMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtaW51dGU7XG5leHBvcnQgdmFyIG1pbnV0ZXMgPSBtaW51dGUucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciBzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQ7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzZWNvbmQ7XG5leHBvcnQgdmFyIHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIG1pbGxpc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gIC8vIG5vb3Bcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQgLSBzdGFydDtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG5taWxsaXNlY29uZC5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgayA9IE1hdGguZmxvb3Ioayk7XG4gIGlmICghaXNGaW5pdGUoaykgfHwgIShrID4gMCkpIHJldHVybiBudWxsO1xuICBpZiAoIShrID4gMSkpIHJldHVybiBtaWxsaXNlY29uZDtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gaykgKiBrKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBrKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gaztcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtaWxsaXNlY29uZDtcbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiB1dGNXZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSAoZGF0ZS5nZXRVVENEYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgdXRjU3VuZGF5ID0gdXRjV2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgdXRjTW9uZGF5ID0gdXRjV2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdXRjVHVlc2RheSA9IHV0Y1dlZWtkYXkoMik7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheSA9IHV0Y1dlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5ID0gdXRjV2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgdXRjRnJpZGF5ID0gdXRjV2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgdXRjU2F0dXJkYXkgPSB1dGNXZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHV0Y1N1bmRheXMgPSB1dGNTdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y01vbmRheXMgPSB1dGNNb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjV2VkbmVzZGF5cyA9IHV0Y1dlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjVGh1cnNkYXlzID0gdXRjVGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheXMgPSB1dGNGcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5cyA9IHV0Y1NhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5fSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgdXRjRGF5ID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNEYXk7XG5leHBvcnQgdmFyIHV0Y0RheXMgPSB1dGNEYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIHV0Y1llYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxudXRjWWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y1llYXI7XG5leHBvcnQgdmFyIHV0Y1llYXJzID0gdXRjWWVhci5yYW5nZTtcbiIsImltcG9ydCB7XG4gIHRpbWVEYXksXG4gIHRpbWVTdW5kYXksXG4gIHRpbWVNb25kYXksXG4gIHRpbWVUaHVyc2RheSxcbiAgdGltZVllYXIsXG4gIHV0Y0RheSxcbiAgdXRjU3VuZGF5LFxuICB1dGNNb25kYXksXG4gIHV0Y1RodXJzZGF5LFxuICB1dGNZZWFyXG59IGZyb20gXCJkMy10aW1lXCI7XG5cbmZ1bmN0aW9uIGxvY2FsRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG59XG5cbmZ1bmN0aW9uIHV0Y0RhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQygtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG59XG5cbmZ1bmN0aW9uIG5ld0RhdGUoeSwgbSwgZCkge1xuICByZXR1cm4ge3k6IHksIG06IG0sIGQ6IGQsIEg6IDAsIE06IDAsIFM6IDAsIEw6IDB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2NhbGUobG9jYWxlKSB7XG4gIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsXG4gICAgICBsb2NhbGVfZGF0ZSA9IGxvY2FsZS5kYXRlLFxuICAgICAgbG9jYWxlX3RpbWUgPSBsb2NhbGUudGltZSxcbiAgICAgIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsXG4gICAgICBsb2NhbGVfd2Vla2RheXMgPSBsb2NhbGUuZGF5cyxcbiAgICAgIGxvY2FsZV9zaG9ydFdlZWtkYXlzID0gbG9jYWxlLnNob3J0RGF5cyxcbiAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxuICAgICAgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXG4gIHZhciBwZXJpb2RSZSA9IGZvcm1hdFJlKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHBlcmlvZExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfcGVyaW9kcyksXG4gICAgICB3ZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgd2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgbW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9tb250aHMpLFxuICAgICAgbW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksXG4gICAgICBzaG9ydE1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRNb250aHMpLFxuICAgICAgc2hvcnRNb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRNb250aHMpO1xuXG4gIHZhciBmb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFdlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFNob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdE1vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdEhvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0SG91cjEyLFxuICAgIFwialwiOiBmb3JtYXREYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdE1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0TW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdE1pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFBlcmlvZCxcbiAgICBcInFcIjogZm9ybWF0UXVhcnRlcixcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFNlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFdlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFllYXIsXG4gICAgXCJZXCI6IGZvcm1hdEZ1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciB1dGNGb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRVVENTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFVUQ1dlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFVUQ1Nob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdFVUQ01vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRVVENNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdFVUQ0hvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0VVRDSG91cjEyLFxuICAgIFwialwiOiBmb3JtYXRVVENEYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdFVUQ01pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0VVRDTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdFVUQ01pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFVUQ1BlcmlvZCxcbiAgICBcInFcIjogZm9ybWF0VVRDUXVhcnRlcixcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFVUQ1NlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFVUQ1llYXIsXG4gICAgXCJZXCI6IGZvcm1hdFVUQ0Z1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRVVENab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciBwYXJzZXMgPSB7XG4gICAgXCJhXCI6IHBhcnNlU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBwYXJzZVdlZWtkYXksXG4gICAgXCJiXCI6IHBhcnNlU2hvcnRNb250aCxcbiAgICBcIkJcIjogcGFyc2VNb250aCxcbiAgICBcImNcIjogcGFyc2VMb2NhbGVEYXRlVGltZSxcbiAgICBcImRcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJmXCI6IHBhcnNlTWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBwYXJzZUhvdXIyNCxcbiAgICBcIklcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJqXCI6IHBhcnNlRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBwYXJzZU1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogcGFyc2VNb250aE51bWJlcixcbiAgICBcIk1cIjogcGFyc2VNaW51dGVzLFxuICAgIFwicFwiOiBwYXJzZVBlcmlvZCxcbiAgICBcInFcIjogcGFyc2VRdWFydGVyLFxuICAgIFwiUVwiOiBwYXJzZVVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IHBhcnNlU2Vjb25kcyxcbiAgICBcInVcIjogcGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBwYXJzZVdlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IHBhcnNlV2Vla051bWJlcklTTyxcbiAgICBcIndcIjogcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBwYXJzZVdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IHBhcnNlTG9jYWxlRGF0ZSxcbiAgICBcIlhcIjogcGFyc2VMb2NhbGVUaW1lLFxuICAgIFwieVwiOiBwYXJzZVllYXIsXG4gICAgXCJZXCI6IHBhcnNlRnVsbFllYXIsXG4gICAgXCJaXCI6IHBhcnNlWm9uZSxcbiAgICBcIiVcIjogcGFyc2VMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIC8vIFRoZXNlIHJlY3Vyc2l2ZSBkaXJlY3RpdmUgZGVmaW5pdGlvbnMgbXVzdCBiZSBkZWZlcnJlZC5cbiAgZm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCBmb3JtYXRzKTtcbiAgZm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCBmb3JtYXRzKTtcbiAgZm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgZm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgdXRjRm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgdXRjRm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIHV0Y0Zvcm1hdHMpO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIsIGZvcm1hdHMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgdmFyIHN0cmluZyA9IFtdLFxuICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICBqID0gMCxcbiAgICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcbiAgICAgICAgICBjLFxuICAgICAgICAgIHBhZCxcbiAgICAgICAgICBmb3JtYXQ7XG5cbiAgICAgIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSkgZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKTtcblxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKHNwZWNpZmllci5jaGFyQ29kZUF0KGkpID09PSAzNykge1xuICAgICAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICAgICAgaWYgKChwYWQgPSBwYWRzW2MgPSBzcGVjaWZpZXIuY2hhckF0KCsraSldKSAhPSBudWxsKSBjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpO1xuICAgICAgICAgIGVsc2UgcGFkID0gYyA9PT0gXCJlXCIgPyBcIiBcIiA6IFwiMFwiO1xuICAgICAgICAgIGlmIChmb3JtYXQgPSBmb3JtYXRzW2NdKSBjID0gZm9ybWF0KGRhdGUsIHBhZCk7XG4gICAgICAgICAgc3RyaW5nLnB1c2goYyk7XG4gICAgICAgICAgaiA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICByZXR1cm4gc3RyaW5nLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5ld1BhcnNlKHNwZWNpZmllciwgWikge1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciBkID0gbmV3RGF0ZSgxOTAwLCB1bmRlZmluZWQsIDEpLFxuICAgICAgICAgIGkgPSBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZyArPSBcIlwiLCAwKSxcbiAgICAgICAgICB3ZWVrLCBkYXk7XG4gICAgICBpZiAoaSAhPSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuICAgICAgLy8gSWYgYSBVTklYIHRpbWVzdGFtcCBpcyBzcGVjaWZpZWQsIHJldHVybiBpdC5cbiAgICAgIGlmIChcIlFcIiBpbiBkKSByZXR1cm4gbmV3IERhdGUoZC5RKTtcbiAgICAgIGlmIChcInNcIiBpbiBkKSByZXR1cm4gbmV3IERhdGUoZC5zICogMTAwMCArIChcIkxcIiBpbiBkID8gZC5MIDogMCkpO1xuXG4gICAgICAvLyBJZiB0aGlzIGlzIHV0Y1BhcnNlLCBuZXZlciB1c2UgdGhlIGxvY2FsIHRpbWV6b25lLlxuICAgICAgaWYgKFogJiYgIShcIlpcIiBpbiBkKSkgZC5aID0gMDtcblxuICAgICAgLy8gVGhlIGFtLXBtIGZsYWcgaXMgMCBmb3IgQU0sIGFuZCAxIGZvciBQTS5cbiAgICAgIGlmIChcInBcIiBpbiBkKSBkLkggPSBkLkggJSAxMiArIGQucCAqIDEyO1xuXG4gICAgICAvLyBJZiB0aGUgbW9udGggd2FzIG5vdCBzcGVjaWZpZWQsIGluaGVyaXQgZnJvbSB0aGUgcXVhcnRlci5cbiAgICAgIGlmIChkLm0gPT09IHVuZGVmaW5lZCkgZC5tID0gXCJxXCIgaW4gZCA/IGQucSA6IDA7XG5cbiAgICAgIC8vIENvbnZlcnQgZGF5LW9mLXdlZWsgYW5kIHdlZWstb2YteWVhciB0byBkYXktb2YteWVhci5cbiAgICAgIGlmIChcIlZcIiBpbiBkKSB7XG4gICAgICAgIGlmIChkLlYgPCAxIHx8IGQuViA+IDUzKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IDE7XG4gICAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgICAgd2VlayA9IHV0Y0RhdGUobmV3RGF0ZShkLnksIDAsIDEpKSwgZGF5ID0gd2Vlay5nZXRVVENEYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyB1dGNNb25kYXkuY2VpbCh3ZWVrKSA6IHV0Y01vbmRheSh3ZWVrKTtcbiAgICAgICAgICB3ZWVrID0gdXRjRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRVVENNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0VVRDRGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3ZWVrID0gbG9jYWxEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSksIGRheSA9IHdlZWsuZ2V0RGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdGltZU1vbmRheS5jZWlsKHdlZWspIDogdGltZU1vbmRheSh3ZWVrKTtcbiAgICAgICAgICB3ZWVrID0gdGltZURheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0TW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldERhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXCJXXCIgaW4gZCB8fCBcIlVcIiBpbiBkKSB7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSBcInVcIiBpbiBkID8gZC51ICUgNyA6IFwiV1wiIGluIGQgPyAxIDogMDtcbiAgICAgICAgZGF5ID0gXCJaXCIgaW4gZCA/IHV0Y0RhdGUobmV3RGF0ZShkLnksIDAsIDEpKS5nZXRVVENEYXkoKSA6IGxvY2FsRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLmdldERheSgpO1xuICAgICAgICBkLm0gPSAwO1xuICAgICAgICBkLmQgPSBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF5ICsgNSkgJSA3IDogZC53ICsgZC5VICogNyAtIChkYXkgKyA2KSAlIDc7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGEgdGltZSB6b25lIGlzIHNwZWNpZmllZCwgYWxsIGZpZWxkcyBhcmUgaW50ZXJwcmV0ZWQgYXMgVVRDIGFuZCB0aGVuXG4gICAgICAvLyBvZmZzZXQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgdGltZSB6b25lLlxuICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgZC5IICs9IGQuWiAvIDEwMCB8IDA7XG4gICAgICAgIGQuTSArPSBkLlogJSAxMDA7XG4gICAgICAgIHJldHVybiB1dGNEYXRlKGQpO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UsIGFsbCBmaWVsZHMgYXJlIGluIGxvY2FsIHRpbWUuXG4gICAgICByZXR1cm4gbG9jYWxEYXRlKGQpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZywgaikge1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgIG0gPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICBjLFxuICAgICAgICBwYXJzZTtcblxuICAgIHdoaWxlIChpIDwgbikge1xuICAgICAgaWYgKGogPj0gbSkgcmV0dXJuIC0xO1xuICAgICAgYyA9IHNwZWNpZmllci5jaGFyQ29kZUF0KGkrKyk7XG4gICAgICBpZiAoYyA9PT0gMzcpIHtcbiAgICAgICAgYyA9IHNwZWNpZmllci5jaGFyQXQoaSsrKTtcbiAgICAgICAgcGFyc2UgPSBwYXJzZXNbYyBpbiBwYWRzID8gc3BlY2lmaWVyLmNoYXJBdChpKyspIDogY107XG4gICAgICAgIGlmICghcGFyc2UgfHwgKChqID0gcGFyc2UoZCwgc3RyaW5nLCBqKSkgPCAwKSkgcmV0dXJuIC0xO1xuICAgICAgfSBlbHNlIGlmIChjICE9IHN0cmluZy5jaGFyQ29kZUF0KGorKykpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBqO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VQZXJpb2QoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBwZXJpb2RSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5wID0gcGVyaW9kTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRXZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHNob3J0V2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSB3ZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydE1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRNb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBzaG9ydE1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBtb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBtb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZVRpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfdGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFF1YXJ0ZXIoZCkge1xuICAgIHJldHVybiAxICsgfn4oZC5nZXRNb250aCgpIC8gMyk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1BlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRVVENIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENRdWFydGVyKGQpIHtcbiAgICByZXR1cm4gMSArIH5+KGQuZ2V0VVRDTW9udGgoKSAvIDMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIGZvcm1hdHMpO1xuICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSxcbiAgICBwYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciArPSBcIlwiLCBmYWxzZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9LFxuICAgIHV0Y0Zvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgdXRjRm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIHRydWUpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9O1xufVxuXG52YXIgcGFkcyA9IHtcIi1cIjogXCJcIiwgXCJfXCI6IFwiIFwiLCBcIjBcIjogXCIwXCJ9LFxuICAgIG51bWJlclJlID0gL15cXHMqXFxkKy8sIC8vIG5vdGU6IGlnbm9yZXMgbmV4dCBkaXJlY3RpdmVcbiAgICBwZXJjZW50UmUgPSAvXiUvLFxuICAgIHJlcXVvdGVSZSA9IC9bXFxcXF4kKis/fFtcXF0oKS57fV0vZztcblxuZnVuY3Rpb24gcGFkKHZhbHVlLCBmaWxsLCB3aWR0aCkge1xuICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIixcbiAgICAgIHN0cmluZyA9IChzaWduID8gLXZhbHVlIDogdmFsdWUpICsgXCJcIixcbiAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVvdGUocykge1xuICByZXR1cm4gcy5yZXBsYWNlKHJlcXVvdGVSZSwgXCJcXFxcJCZcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJlKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKHJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TG9va3VwKG5hbWVzKSB7XG4gIHZhciBtYXAgPSB7fSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbWFwW25hbWVzW2ldLnRvTG93ZXJDYXNlKCldID0gaTtcbiAgcmV0dXJuIG1hcDtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLnUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVySVNPKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuViA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZ1bGxZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA0KSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSArICgrblswXSA+IDY4ID8gMTkwMCA6IDIwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWm9uZShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSAvXihaKXwoWystXVxcZFxcZCkoPzo6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuWiA9IG5bMV0gPyAwIDogLShuWzJdICsgKG5bM10gfHwgXCIwMFwiKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VRdWFydGVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQucSA9IG5bMF0gKiAzIC0gMywgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1vbnRoTnVtYmVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQubSA9IG5bMF0gLSAxLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLm0gPSAwLCBkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUhvdXIyNChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLkggPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbnV0ZXMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5NID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuUyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWlsbGlzZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQuTCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWljcm9zZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuTCA9IE1hdGguZmxvb3IoblswXSAvIDEwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTGl0ZXJhbFBlcmNlbnQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gcGVyY2VudFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gaSArIG5bMF0ubGVuZ3RoIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQuUSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLnMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZk1vbnRoKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldERhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjEyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoMSArIHRpbWVEYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgcmV0dXJuIGRheSA9PT0gMCA/IDcgOiBkYXk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVTdW5kYXkuY291bnQodGltZVllYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdGltZVRodXJzZGF5KGQpIDogdGltZVRodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQodGltZVRodXJzZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSArICh0aW1lWWVhcihkKS5nZXREYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0RGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVNb25kYXkuY291bnQodGltZVllYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFpvbmUoZCkge1xuICB2YXIgeiA9IGQuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgcmV0dXJuICh6ID4gMCA/IFwiLVwiIDogKHogKj0gLTEsIFwiK1wiKSlcbiAgICAgICsgcGFkKHogLyA2MCB8IDAsIFwiMFwiLCAyKVxuICAgICAgKyBwYWQoeiAlIDYwLCBcIjBcIiwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDSG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0hvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgdXRjRGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ1NlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZG93ID0gZC5nZXRVVENEYXkoKTtcbiAgcmV0dXJuIGRvdyA9PT0gMCA/IDcgOiBkb3c7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y1N1bmRheS5jb3VudCh1dGNZZWFyKGQpIC0gMSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0VVRDRGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHV0Y1RodXJzZGF5KGQpIDogdXRjVGh1cnNkYXkuY2VpbChkKTtcbiAgcmV0dXJuIHBhZCh1dGNUaHVyc2RheS5jb3VudCh1dGNZZWFyKGQpLCBkKSArICh1dGNZZWFyKGQpLmdldFVUQ0RheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXRVVENEYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjTW9uZGF5LmNvdW50KHV0Y1llYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1llYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0Z1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1pvbmUoKSB7XG4gIHJldHVybiBcIiswMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExpdGVyYWxQZXJjZW50KCkge1xuICByZXR1cm4gXCIlXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXAoZCkge1xuICByZXR1cm4gK2Q7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzKGQpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoK2QgLyAxMDAwKTtcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlLmpzXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIHRpbWVGb3JtYXQ7XG5leHBvcnQgdmFyIHRpbWVQYXJzZTtcbmV4cG9ydCB2YXIgdXRjRm9ybWF0O1xuZXhwb3J0IHZhciB1dGNQYXJzZTtcblxuZGVmYXVsdExvY2FsZSh7XG4gIGRhdGVUaW1lOiBcIiV4LCAlWFwiLFxuICBkYXRlOiBcIiUtbS8lLWQvJVlcIixcbiAgdGltZTogXCIlLUk6JU06JVMgJXBcIixcbiAgcGVyaW9kczogW1wiQU1cIiwgXCJQTVwiXSxcbiAgZGF5czogW1wiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIl0sXG4gIHNob3J0RGF5czogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuICBtb250aHM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxuICBzaG9ydE1vbnRoczogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgdGltZUZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIHRpbWVQYXJzZSA9IGxvY2FsZS5wYXJzZTtcbiAgdXRjRm9ybWF0ID0gbG9jYWxlLnV0Y0Zvcm1hdDtcbiAgdXRjUGFyc2UgPSBsb2NhbGUudXRjUGFyc2U7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCJpbXBvcnQge2Jpc2VjdG9yLCB0aWNrU3RlcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3RpbWVZZWFyLCB0aW1lTW9udGgsIHRpbWVXZWVrLCB0aW1lRGF5LCB0aW1lSG91ciwgdGltZU1pbnV0ZSwgdGltZVNlY29uZCwgdGltZU1pbGxpc2Vjb25kfSBmcm9tIFwiZDMtdGltZVwiO1xuaW1wb3J0IHt0aW1lRm9ybWF0fSBmcm9tIFwiZDMtdGltZS1mb3JtYXRcIjtcbmltcG9ydCB7bWFwfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGNvbnRpbnVvdXMsIHtjb3B5LCBpZGVudGl0eX0gZnJvbSBcIi4vY29udGludW91c1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcbmltcG9ydCBuaWNlIGZyb20gXCIuL25pY2VcIjtcblxudmFyIGR1cmF0aW9uU2Vjb25kID0gMTAwMCxcbiAgICBkdXJhdGlvbk1pbnV0ZSA9IGR1cmF0aW9uU2Vjb25kICogNjAsXG4gICAgZHVyYXRpb25Ib3VyID0gZHVyYXRpb25NaW51dGUgKiA2MCxcbiAgICBkdXJhdGlvbkRheSA9IGR1cmF0aW9uSG91ciAqIDI0LFxuICAgIGR1cmF0aW9uV2VlayA9IGR1cmF0aW9uRGF5ICogNyxcbiAgICBkdXJhdGlvbk1vbnRoID0gZHVyYXRpb25EYXkgKiAzMCxcbiAgICBkdXJhdGlvblllYXIgPSBkdXJhdGlvbkRheSAqIDM2NTtcblxuZnVuY3Rpb24gZGF0ZSh0KSB7XG4gIHJldHVybiBuZXcgRGF0ZSh0KTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyKHQpIHtcbiAgcmV0dXJuIHQgaW5zdGFuY2VvZiBEYXRlID8gK3QgOiArbmV3IERhdGUoK3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsZW5kYXIoeWVhciwgbW9udGgsIHdlZWssIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kLCBmb3JtYXQpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhpZGVudGl0eSwgaWRlbnRpdHkpLFxuICAgICAgaW52ZXJ0ID0gc2NhbGUuaW52ZXJ0LFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gIHZhciBmb3JtYXRNaWxsaXNlY29uZCA9IGZvcm1hdChcIi4lTFwiKSxcbiAgICAgIGZvcm1hdFNlY29uZCA9IGZvcm1hdChcIjolU1wiKSxcbiAgICAgIGZvcm1hdE1pbnV0ZSA9IGZvcm1hdChcIiVJOiVNXCIpLFxuICAgICAgZm9ybWF0SG91ciA9IGZvcm1hdChcIiVJICVwXCIpLFxuICAgICAgZm9ybWF0RGF5ID0gZm9ybWF0KFwiJWEgJWRcIiksXG4gICAgICBmb3JtYXRXZWVrID0gZm9ybWF0KFwiJWIgJWRcIiksXG4gICAgICBmb3JtYXRNb250aCA9IGZvcm1hdChcIiVCXCIpLFxuICAgICAgZm9ybWF0WWVhciA9IGZvcm1hdChcIiVZXCIpO1xuXG4gIHZhciB0aWNrSW50ZXJ2YWxzID0gW1xuICAgIFtzZWNvbmQsICAxLCAgICAgIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbc2Vjb25kLCAgNSwgIDUgKiBkdXJhdGlvblNlY29uZF0sXG4gICAgW3NlY29uZCwgMTUsIDE1ICogZHVyYXRpb25TZWNvbmRdLFxuICAgIFtzZWNvbmQsIDMwLCAzMCAqIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbbWludXRlLCAgMSwgICAgICBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgW21pbnV0ZSwgIDUsICA1ICogZHVyYXRpb25NaW51dGVdLFxuICAgIFttaW51dGUsIDE1LCAxNSAqIGR1cmF0aW9uTWludXRlXSxcbiAgICBbbWludXRlLCAzMCwgMzAgKiBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgWyAgaG91ciwgIDEsICAgICAgZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgIGhvdXIsICAzLCAgMyAqIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICBob3VyLCAgNiwgIDYgKiBkdXJhdGlvbkhvdXIgIF0sXG4gICAgWyAgaG91ciwgMTIsIDEyICogZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgICBkYXksICAxLCAgICAgIGR1cmF0aW9uRGF5ICAgXSxcbiAgICBbICAgZGF5LCAgMiwgIDIgKiBkdXJhdGlvbkRheSAgIF0sXG4gICAgWyAgd2VlaywgIDEsICAgICAgZHVyYXRpb25XZWVrICBdLFxuICAgIFsgbW9udGgsICAxLCAgICAgIGR1cmF0aW9uTW9udGggXSxcbiAgICBbIG1vbnRoLCAgMywgIDMgKiBkdXJhdGlvbk1vbnRoIF0sXG4gICAgWyAgeWVhciwgIDEsICAgICAgZHVyYXRpb25ZZWFyICBdXG4gIF07XG5cbiAgZnVuY3Rpb24gdGlja0Zvcm1hdChkYXRlKSB7XG4gICAgcmV0dXJuIChzZWNvbmQoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TWlsbGlzZWNvbmRcbiAgICAgICAgOiBtaW51dGUoZGF0ZSkgPCBkYXRlID8gZm9ybWF0U2Vjb25kXG4gICAgICAgIDogaG91cihkYXRlKSA8IGRhdGUgPyBmb3JtYXRNaW51dGVcbiAgICAgICAgOiBkYXkoZGF0ZSkgPCBkYXRlID8gZm9ybWF0SG91clxuICAgICAgICA6IG1vbnRoKGRhdGUpIDwgZGF0ZSA/ICh3ZWVrKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdERheSA6IGZvcm1hdFdlZWspXG4gICAgICAgIDogeWVhcihkYXRlKSA8IGRhdGUgPyBmb3JtYXRNb250aFxuICAgICAgICA6IGZvcm1hdFllYXIpKGRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGlja0ludGVydmFsKGludGVydmFsLCBzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIGlmIChpbnRlcnZhbCA9PSBudWxsKSBpbnRlcnZhbCA9IDEwO1xuXG4gICAgLy8gSWYgYSBkZXNpcmVkIHRpY2sgY291bnQgaXMgc3BlY2lmaWVkLCBwaWNrIGEgcmVhc29uYWJsZSB0aWNrIGludGVydmFsXG4gICAgLy8gYmFzZWQgb24gdGhlIGV4dGVudCBvZiB0aGUgZG9tYWluIGFuZCBhIHJvdWdoIGVzdGltYXRlIG9mIHRpY2sgc2l6ZS5cbiAgICAvLyBPdGhlcndpc2UsIGFzc3VtZSBpbnRlcnZhbCBpcyBhbHJlYWR5IGEgdGltZSBpbnRlcnZhbCBhbmQgdXNlIGl0LlxuICAgIGlmICh0eXBlb2YgaW50ZXJ2YWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gaW50ZXJ2YWwsXG4gICAgICAgICAgaSA9IGJpc2VjdG9yKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIGlbMl07IH0pLnJpZ2h0KHRpY2tJbnRlcnZhbHMsIHRhcmdldCk7XG4gICAgICBpZiAoaSA9PT0gdGlja0ludGVydmFscy5sZW5ndGgpIHtcbiAgICAgICAgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0IC8gZHVyYXRpb25ZZWFyLCBzdG9wIC8gZHVyYXRpb25ZZWFyLCBpbnRlcnZhbCk7XG4gICAgICAgIGludGVydmFsID0geWVhcjtcbiAgICAgIH0gZWxzZSBpZiAoaSkge1xuICAgICAgICBpID0gdGlja0ludGVydmFsc1t0YXJnZXQgLyB0aWNrSW50ZXJ2YWxzW2kgLSAxXVsyXSA8IHRpY2tJbnRlcnZhbHNbaV1bMl0gLyB0YXJnZXQgPyBpIC0gMSA6IGldO1xuICAgICAgICBzdGVwID0gaVsxXTtcbiAgICAgICAgaW50ZXJ2YWwgPSBpWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RlcCA9IE1hdGgubWF4KHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBpbnRlcnZhbCksIDEpO1xuICAgICAgICBpbnRlcnZhbCA9IG1pbGxpc2Vjb25kO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdGVwID09IG51bGwgPyBpbnRlcnZhbCA6IGludGVydmFsLmV2ZXJ5KHN0ZXApO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShpbnZlcnQoeSkpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGRvbWFpbihtYXAuY2FsbChfLCBudW1iZXIpKSA6IGRvbWFpbigpLm1hcChkYXRlKTtcbiAgfTtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGludGVydmFsLCBzdGVwKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgdDAgPSBkWzBdLFxuICAgICAgICB0MSA9IGRbZC5sZW5ndGggLSAxXSxcbiAgICAgICAgciA9IHQxIDwgdDAsXG4gICAgICAgIHQ7XG4gICAgaWYgKHIpIHQgPSB0MCwgdDAgPSB0MSwgdDEgPSB0O1xuICAgIHQgPSB0aWNrSW50ZXJ2YWwoaW50ZXJ2YWwsIHQwLCB0MSwgc3RlcCk7XG4gICAgdCA9IHQgPyB0LnJhbmdlKHQwLCB0MSArIDEpIDogW107IC8vIGluY2x1c2l2ZSBzdG9wXG4gICAgcmV0dXJuIHIgPyB0LnJldmVyc2UoKSA6IHQ7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICByZXR1cm4gc3BlY2lmaWVyID09IG51bGwgPyB0aWNrRm9ybWF0IDogZm9ybWF0KHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGludGVydmFsLCBzdGVwKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gKGludGVydmFsID0gdGlja0ludGVydmFsKGludGVydmFsLCBkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIHN0ZXApKVxuICAgICAgICA/IGRvbWFpbihuaWNlKGQsIGludGVydmFsKSlcbiAgICAgICAgOiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIGNhbGVuZGFyKHllYXIsIG1vbnRoLCB3ZWVrLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCwgZm9ybWF0KSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShjYWxlbmRhcih0aW1lWWVhciwgdGltZU1vbnRoLCB0aW1lV2VlaywgdGltZURheSwgdGltZUhvdXIsIHRpbWVNaW51dGUsIHRpbWVTZWNvbmQsIHRpbWVNaWxsaXNlY29uZCwgdGltZUZvcm1hdCkuZG9tYWluKFtuZXcgRGF0ZSgyMDAwLCAwLCAxKSwgbmV3IERhdGUoMjAwMCwgMCwgMildKSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgdXRjTW9udGggPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZSgxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENNb250aChkYXRlLmdldFVUQ01vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01vbnRoKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTW9udGg7XG5leHBvcnQgdmFyIHV0Y01vbnRocyA9IHV0Y01vbnRoLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91cn0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIHV0Y0hvdXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTWludXRlcygwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENIb3VycygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y0hvdXI7XG5leHBvcnQgdmFyIHV0Y0hvdXJzID0gdXRjSG91ci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIHV0Y01pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENTZWNvbmRzKDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTWludXRlO1xuZXhwb3J0IHZhciB1dGNNaW51dGVzID0gdXRjTWludXRlLnJhbmdlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24gY29uc3RhbnQoKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgdmFyIGFicyA9IE1hdGguYWJzO1xuZXhwb3J0IHZhciBhdGFuMiA9IE1hdGguYXRhbjI7XG5leHBvcnQgdmFyIGNvcyA9IE1hdGguY29zO1xuZXhwb3J0IHZhciBtYXggPSBNYXRoLm1heDtcbmV4cG9ydCB2YXIgbWluID0gTWF0aC5taW47XG5leHBvcnQgdmFyIHNpbiA9IE1hdGguc2luO1xuZXhwb3J0IHZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuXG5leHBvcnQgdmFyIGVwc2lsb24gPSAxZS0xMjtcbmV4cG9ydCB2YXIgcGkgPSBNYXRoLlBJO1xuZXhwb3J0IHZhciBoYWxmUGkgPSBwaSAvIDI7XG5leHBvcnQgdmFyIHRhdSA9IDIgKiBwaTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFjb3MoeCkge1xuICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gcGkgOiBNYXRoLmFjb3MoeCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc2luKHgpIHtcbiAgcmV0dXJuIHggPj0gMSA/IGhhbGZQaSA6IHggPD0gLTEgPyAtaGFsZlBpIDogTWF0aC5hc2luKHgpO1xufVxuIiwiaW1wb3J0IHtwYXRofSBmcm9tIFwiZDMtcGF0aFwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQge2FicywgYWNvcywgYXNpbiwgYXRhbjIsIGNvcywgZXBzaWxvbiwgaGFsZlBpLCBtYXgsIG1pbiwgcGksIHNpbiwgc3FydCwgdGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5cbmZ1bmN0aW9uIGFyY0lubmVyUmFkaXVzKGQpIHtcbiAgcmV0dXJuIGQuaW5uZXJSYWRpdXM7XG59XG5cbmZ1bmN0aW9uIGFyY091dGVyUmFkaXVzKGQpIHtcbiAgcmV0dXJuIGQub3V0ZXJSYWRpdXM7XG59XG5cbmZ1bmN0aW9uIGFyY1N0YXJ0QW5nbGUoZCkge1xuICByZXR1cm4gZC5zdGFydEFuZ2xlO1xufVxuXG5mdW5jdGlvbiBhcmNFbmRBbmdsZShkKSB7XG4gIHJldHVybiBkLmVuZEFuZ2xlO1xufVxuXG5mdW5jdGlvbiBhcmNQYWRBbmdsZShkKSB7XG4gIHJldHVybiBkICYmIGQucGFkQW5nbGU7IC8vIE5vdGU6IG9wdGlvbmFsIVxufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3QoeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgeDMsIHkzKSB7XG4gIHZhciB4MTAgPSB4MSAtIHgwLCB5MTAgPSB5MSAtIHkwLFxuICAgICAgeDMyID0geDMgLSB4MiwgeTMyID0geTMgLSB5MixcbiAgICAgIHQgPSB5MzIgKiB4MTAgLSB4MzIgKiB5MTA7XG4gIGlmICh0ICogdCA8IGVwc2lsb24pIHJldHVybjtcbiAgdCA9ICh4MzIgKiAoeTAgLSB5MikgLSB5MzIgKiAoeDAgLSB4MikpIC8gdDtcbiAgcmV0dXJuIFt4MCArIHQgKiB4MTAsIHkwICsgdCAqIHkxMF07XG59XG5cbi8vIENvbXB1dGUgcGVycGVuZGljdWxhciBvZmZzZXQgbGluZSBvZiBsZW5ndGggcmMuXG4vLyBodHRwOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL0NpcmNsZS1MaW5lSW50ZXJzZWN0aW9uLmh0bWxcbmZ1bmN0aW9uIGNvcm5lclRhbmdlbnRzKHgwLCB5MCwgeDEsIHkxLCByMSwgcmMsIGN3KSB7XG4gIHZhciB4MDEgPSB4MCAtIHgxLFxuICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgIGxvID0gKGN3ID8gcmMgOiAtcmMpIC8gc3FydCh4MDEgKiB4MDEgKyB5MDEgKiB5MDEpLFxuICAgICAgb3ggPSBsbyAqIHkwMSxcbiAgICAgIG95ID0gLWxvICogeDAxLFxuICAgICAgeDExID0geDAgKyBveCxcbiAgICAgIHkxMSA9IHkwICsgb3ksXG4gICAgICB4MTAgPSB4MSArIG94LFxuICAgICAgeTEwID0geTEgKyBveSxcbiAgICAgIHgwMCA9ICh4MTEgKyB4MTApIC8gMixcbiAgICAgIHkwMCA9ICh5MTEgKyB5MTApIC8gMixcbiAgICAgIGR4ID0geDEwIC0geDExLFxuICAgICAgZHkgPSB5MTAgLSB5MTEsXG4gICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgciA9IHIxIC0gcmMsXG4gICAgICBEID0geDExICogeTEwIC0geDEwICogeTExLFxuICAgICAgZCA9IChkeSA8IDAgPyAtMSA6IDEpICogc3FydChtYXgoMCwgciAqIHIgKiBkMiAtIEQgKiBEKSksXG4gICAgICBjeDAgPSAoRCAqIGR5IC0gZHggKiBkKSAvIGQyLFxuICAgICAgY3kwID0gKC1EICogZHggLSBkeSAqIGQpIC8gZDIsXG4gICAgICBjeDEgPSAoRCAqIGR5ICsgZHggKiBkKSAvIGQyLFxuICAgICAgY3kxID0gKC1EICogZHggKyBkeSAqIGQpIC8gZDIsXG4gICAgICBkeDAgPSBjeDAgLSB4MDAsXG4gICAgICBkeTAgPSBjeTAgLSB5MDAsXG4gICAgICBkeDEgPSBjeDEgLSB4MDAsXG4gICAgICBkeTEgPSBjeTEgLSB5MDA7XG5cbiAgLy8gUGljayB0aGUgY2xvc2VyIG9mIHRoZSB0d28gaW50ZXJzZWN0aW9uIHBvaW50cy5cbiAgLy8gVE9ETyBJcyB0aGVyZSBhIGZhc3RlciB3YXkgdG8gZGV0ZXJtaW5lIHdoaWNoIGludGVyc2VjdGlvbiB0byB1c2U/XG4gIGlmIChkeDAgKiBkeDAgKyBkeTAgKiBkeTAgPiBkeDEgKiBkeDEgKyBkeTEgKiBkeTEpIGN4MCA9IGN4MSwgY3kwID0gY3kxO1xuXG4gIHJldHVybiB7XG4gICAgY3g6IGN4MCxcbiAgICBjeTogY3kwLFxuICAgIHgwMTogLW94LFxuICAgIHkwMTogLW95LFxuICAgIHgxMTogY3gwICogKHIxIC8gciAtIDEpLFxuICAgIHkxMTogY3kwICogKHIxIC8gciAtIDEpXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgaW5uZXJSYWRpdXMgPSBhcmNJbm5lclJhZGl1cyxcbiAgICAgIG91dGVyUmFkaXVzID0gYXJjT3V0ZXJSYWRpdXMsXG4gICAgICBjb3JuZXJSYWRpdXMgPSBjb25zdGFudCgwKSxcbiAgICAgIHBhZFJhZGl1cyA9IG51bGwsXG4gICAgICBzdGFydEFuZ2xlID0gYXJjU3RhcnRBbmdsZSxcbiAgICAgIGVuZEFuZ2xlID0gYXJjRW5kQW5nbGUsXG4gICAgICBwYWRBbmdsZSA9IGFyY1BhZEFuZ2xlLFxuICAgICAgY29udGV4dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gYXJjKCkge1xuICAgIHZhciBidWZmZXIsXG4gICAgICAgIHIsXG4gICAgICAgIHIwID0gK2lubmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHIxID0gK291dGVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIGEwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZlBpLFxuICAgICAgICBhMSA9IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBoYWxmUGksXG4gICAgICAgIGRhID0gYWJzKGExIC0gYTApLFxuICAgICAgICBjdyA9IGExID4gYTA7XG5cbiAgICBpZiAoIWNvbnRleHQpIGNvbnRleHQgPSBidWZmZXIgPSBwYXRoKCk7XG5cbiAgICAvLyBFbnN1cmUgdGhhdCB0aGUgb3V0ZXIgcmFkaXVzIGlzIGFsd2F5cyBsYXJnZXIgdGhhbiB0aGUgaW5uZXIgcmFkaXVzLlxuICAgIGlmIChyMSA8IHIwKSByID0gcjEsIHIxID0gcjAsIHIwID0gcjtcblxuICAgIC8vIElzIGl0IGEgcG9pbnQ/XG4gICAgaWYgKCEocjEgPiBlcHNpbG9uKSkgY29udGV4dC5tb3ZlVG8oMCwgMCk7XG5cbiAgICAvLyBPciBpcyBpdCBhIGNpcmNsZSBvciBhbm51bHVzP1xuICAgIGVsc2UgaWYgKGRhID4gdGF1IC0gZXBzaWxvbikge1xuICAgICAgY29udGV4dC5tb3ZlVG8ocjEgKiBjb3MoYTApLCByMSAqIHNpbihhMCkpO1xuICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjEsIGEwLCBhMSwgIWN3KTtcbiAgICAgIGlmIChyMCA+IGVwc2lsb24pIHtcbiAgICAgICAgY29udGV4dC5tb3ZlVG8ocjAgKiBjb3MoYTEpLCByMCAqIHNpbihhMSkpO1xuICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMCwgYTEsIGEwLCBjdyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gT3IgaXMgaXQgYSBjaXJjdWxhciBvciBhbm51bGFyIHNlY3Rvcj9cbiAgICBlbHNlIHtcbiAgICAgIHZhciBhMDEgPSBhMCxcbiAgICAgICAgICBhMTEgPSBhMSxcbiAgICAgICAgICBhMDAgPSBhMCxcbiAgICAgICAgICBhMTAgPSBhMSxcbiAgICAgICAgICBkYTAgPSBkYSxcbiAgICAgICAgICBkYTEgPSBkYSxcbiAgICAgICAgICBhcCA9IHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLyAyLFxuICAgICAgICAgIHJwID0gKGFwID4gZXBzaWxvbikgJiYgKHBhZFJhZGl1cyA/ICtwYWRSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNxcnQocjAgKiByMCArIHIxICogcjEpKSxcbiAgICAgICAgICByYyA9IG1pbihhYnMocjEgLSByMCkgLyAyLCArY29ybmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICAgIHJjMCA9IHJjLFxuICAgICAgICAgIHJjMSA9IHJjLFxuICAgICAgICAgIHQwLFxuICAgICAgICAgIHQxO1xuXG4gICAgICAvLyBBcHBseSBwYWRkaW5nPyBOb3RlIHRoYXQgc2luY2UgcjEg4omlIHIwLCBkYTEg4omlIGRhMC5cbiAgICAgIGlmIChycCA+IGVwc2lsb24pIHtcbiAgICAgICAgdmFyIHAwID0gYXNpbihycCAvIHIwICogc2luKGFwKSksXG4gICAgICAgICAgICBwMSA9IGFzaW4ocnAgLyByMSAqIHNpbihhcCkpO1xuICAgICAgICBpZiAoKGRhMCAtPSBwMCAqIDIpID4gZXBzaWxvbikgcDAgKj0gKGN3ID8gMSA6IC0xKSwgYTAwICs9IHAwLCBhMTAgLT0gcDA7XG4gICAgICAgIGVsc2UgZGEwID0gMCwgYTAwID0gYTEwID0gKGEwICsgYTEpIC8gMjtcbiAgICAgICAgaWYgKChkYTEgLT0gcDEgKiAyKSA+IGVwc2lsb24pIHAxICo9IChjdyA/IDEgOiAtMSksIGEwMSArPSBwMSwgYTExIC09IHAxO1xuICAgICAgICBlbHNlIGRhMSA9IDAsIGEwMSA9IGExMSA9IChhMCArIGExKSAvIDI7XG4gICAgICB9XG5cbiAgICAgIHZhciB4MDEgPSByMSAqIGNvcyhhMDEpLFxuICAgICAgICAgIHkwMSA9IHIxICogc2luKGEwMSksXG4gICAgICAgICAgeDEwID0gcjAgKiBjb3MoYTEwKSxcbiAgICAgICAgICB5MTAgPSByMCAqIHNpbihhMTApO1xuXG4gICAgICAvLyBBcHBseSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICBpZiAocmMgPiBlcHNpbG9uKSB7XG4gICAgICAgIHZhciB4MTEgPSByMSAqIGNvcyhhMTEpLFxuICAgICAgICAgICAgeTExID0gcjEgKiBzaW4oYTExKSxcbiAgICAgICAgICAgIHgwMCA9IHIwICogY29zKGEwMCksXG4gICAgICAgICAgICB5MDAgPSByMCAqIHNpbihhMDApLFxuICAgICAgICAgICAgb2M7XG5cbiAgICAgICAgLy8gUmVzdHJpY3QgdGhlIGNvcm5lciByYWRpdXMgYWNjb3JkaW5nIHRvIHRoZSBzZWN0b3IgYW5nbGUuXG4gICAgICAgIGlmIChkYSA8IHBpICYmIChvYyA9IGludGVyc2VjdCh4MDEsIHkwMSwgeDAwLCB5MDAsIHgxMSwgeTExLCB4MTAsIHkxMCkpKSB7XG4gICAgICAgICAgdmFyIGF4ID0geDAxIC0gb2NbMF0sXG4gICAgICAgICAgICAgIGF5ID0geTAxIC0gb2NbMV0sXG4gICAgICAgICAgICAgIGJ4ID0geDExIC0gb2NbMF0sXG4gICAgICAgICAgICAgIGJ5ID0geTExIC0gb2NbMV0sXG4gICAgICAgICAgICAgIGtjID0gMSAvIHNpbihhY29zKChheCAqIGJ4ICsgYXkgKiBieSkgLyAoc3FydChheCAqIGF4ICsgYXkgKiBheSkgKiBzcXJ0KGJ4ICogYnggKyBieSAqIGJ5KSkpIC8gMiksXG4gICAgICAgICAgICAgIGxjID0gc3FydChvY1swXSAqIG9jWzBdICsgb2NbMV0gKiBvY1sxXSk7XG4gICAgICAgICAgcmMwID0gbWluKHJjLCAocjAgLSBsYykgLyAoa2MgLSAxKSk7XG4gICAgICAgICAgcmMxID0gbWluKHJjLCAocjEgLSBsYykgLyAoa2MgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSXMgdGhlIHNlY3RvciBjb2xsYXBzZWQgdG8gYSBsaW5lP1xuICAgICAgaWYgKCEoZGExID4gZXBzaWxvbikpIGNvbnRleHQubW92ZVRvKHgwMSwgeTAxKTtcblxuICAgICAgLy8gRG9lcyB0aGUgc2VjdG9y4oCZcyBvdXRlciByaW5nIGhhdmUgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgZWxzZSBpZiAocmMxID4gZXBzaWxvbikge1xuICAgICAgICB0MCA9IGNvcm5lclRhbmdlbnRzKHgwMCwgeTAwLCB4MDEsIHkwMSwgcjEsIHJjMSwgY3cpO1xuICAgICAgICB0MSA9IGNvcm5lclRhbmdlbnRzKHgxMSwgeTExLCB4MTAsIHkxMCwgcjEsIHJjMSwgY3cpO1xuXG4gICAgICAgIGNvbnRleHQubW92ZVRvKHQwLmN4ICsgdDAueDAxLCB0MC5jeSArIHQwLnkwMSk7XG5cbiAgICAgICAgLy8gSGF2ZSB0aGUgY29ybmVycyBtZXJnZWQ/XG4gICAgICAgIGlmIChyYzEgPCByYykgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzEsIGF0YW4yKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgZHJhdyB0aGUgdHdvIGNvcm5lcnMgYW5kIHRoZSByaW5nLlxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMSwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MC55MTEsIHQwLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjEsIGF0YW4yKHQwLmN5ICsgdDAueTExLCB0MC5jeCArIHQwLngxMSksIGF0YW4yKHQxLmN5ICsgdDEueTExLCB0MS5jeCArIHQxLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmModDEuY3gsIHQxLmN5LCByYzEsIGF0YW4yKHQxLnkxMSwgdDEueDExKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE9yIGlzIHRoZSBvdXRlciByaW5nIGp1c3QgYSBjaXJjdWxhciBhcmM/XG4gICAgICBlbHNlIGNvbnRleHQubW92ZVRvKHgwMSwgeTAxKSwgY29udGV4dC5hcmMoMCwgMCwgcjEsIGEwMSwgYTExLCAhY3cpO1xuXG4gICAgICAvLyBJcyB0aGVyZSBubyBpbm5lciByaW5nLCBhbmQgaXTigJlzIGEgY2lyY3VsYXIgc2VjdG9yP1xuICAgICAgLy8gT3IgcGVyaGFwcyBpdOKAmXMgYW4gYW5udWxhciBzZWN0b3IgY29sbGFwc2VkIGR1ZSB0byBwYWRkaW5nP1xuICAgICAgaWYgKCEocjAgPiBlcHNpbG9uKSB8fCAhKGRhMCA+IGVwc2lsb24pKSBjb250ZXh0LmxpbmVUbyh4MTAsIHkxMCk7XG5cbiAgICAgIC8vIERvZXMgdGhlIHNlY3RvcuKAmXMgaW5uZXIgcmluZyAob3IgcG9pbnQpIGhhdmUgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgZWxzZSBpZiAocmMwID4gZXBzaWxvbikge1xuICAgICAgICB0MCA9IGNvcm5lclRhbmdlbnRzKHgxMCwgeTEwLCB4MTEsIHkxMSwgcjAsIC1yYzAsIGN3KTtcbiAgICAgICAgdDEgPSBjb3JuZXJUYW5nZW50cyh4MDEsIHkwMSwgeDAwLCB5MDAsIHIwLCAtcmMwLCBjdyk7XG5cbiAgICAgICAgY29udGV4dC5saW5lVG8odDAuY3ggKyB0MC54MDEsIHQwLmN5ICsgdDAueTAxKTtcblxuICAgICAgICAvLyBIYXZlIHRoZSBjb3JuZXJzIG1lcmdlZD9cbiAgICAgICAgaWYgKHJjMCA8IHJjKSBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMCwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IHRoZSB0d28gY29ybmVycyBhbmQgdGhlIHJpbmcuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMwLCBhdGFuMih0MC55MDEsIHQwLngwMSksIGF0YW4yKHQwLnkxMSwgdDAueDExKSwgIWN3KTtcbiAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMCwgYXRhbjIodDAuY3kgKyB0MC55MTEsIHQwLmN4ICsgdDAueDExKSwgYXRhbjIodDEuY3kgKyB0MS55MTEsIHQxLmN4ICsgdDEueDExKSwgY3cpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQxLmN4LCB0MS5jeSwgcmMwLCBhdGFuMih0MS55MTEsIHQxLngxMSksIGF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBPciBpcyB0aGUgaW5uZXIgcmluZyBqdXN0IGEgY2lyY3VsYXIgYXJjP1xuICAgICAgZWxzZSBjb250ZXh0LmFyYygwLCAwLCByMCwgYTEwLCBhMDAsIGN3KTtcbiAgICB9XG5cbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBhcmMuY2VudHJvaWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgciA9ICgraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIsXG4gICAgICAgIGEgPSAoK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIgLSBwaSAvIDI7XG4gICAgcmV0dXJuIFtjb3MoYSkgKiByLCBzaW4oYSkgKiByXTtcbiAgfTtcblxuICBhcmMuaW5uZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW5uZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IGlubmVyUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5vdXRlclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvdXRlclJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogb3V0ZXJSYWRpdXM7XG4gIH07XG5cbiAgYXJjLmNvcm5lclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb3JuZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IGNvcm5lclJhZGl1cztcbiAgfTtcblxuICBhcmMucGFkUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZFJhZGl1cyA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IHBhZFJhZGl1cztcbiAgfTtcblxuICBhcmMuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdGFydEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBzdGFydEFuZ2xlO1xuICB9O1xuXG4gIGFyYy5lbmRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChlbmRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogZW5kQW5nbGU7XG4gIH07XG5cbiAgYXJjLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBwYWRBbmdsZTtcbiAgfTtcblxuICBhcmMuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfKSwgYXJjKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGFyYztcbn1cbiIsImZ1bmN0aW9uIExpbmVhcihjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5MaW5lYXIucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpOyBicmVhaztcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBMaW5lYXIoY29udGV4dCk7XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9jdXJ2ZS9saW5lYXJcIjtcbmltcG9ydCB7eCBhcyBwb2ludFgsIHkgYXMgcG9pbnRZfSBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSBwb2ludFgsXG4gICAgICB5ID0gcG9pbnRZLFxuICAgICAgZGVmaW5lZCA9IGNvbnN0YW50KHRydWUpLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgb3V0cHV0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBsaW5lKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXI7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIGVsc2Ugb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkgb3V0cHV0LnBvaW50KCt4KGQsIGksIGRhdGEpLCAreShkLCBpLCBkYXRhKSk7XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmUueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmUpIDogeDtcbiAgfTtcblxuICBsaW5lLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHk7XG4gIH07XG5cbiAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGxpbmUpIDogZGVmaW5lZDtcbiAgfTtcblxuICBsaW5lLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGxpbmUpIDogY3VydmU7XG4gIH07XG5cbiAgbGluZS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBsaW5lKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBiIDwgYSA/IC0xIDogYiA+IGEgPyAxIDogYiA+PSBhID8gMCA6IE5hTjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGQpIHtcbiAgcmV0dXJuIGQ7XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBkZXNjZW5kaW5nIGZyb20gXCIuL2Rlc2NlbmRpbmdcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eVwiO1xuaW1wb3J0IHt0YXV9IGZyb20gXCIuL21hdGhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB2YWx1ZSA9IGlkZW50aXR5LFxuICAgICAgc29ydFZhbHVlcyA9IGRlc2NlbmRpbmcsXG4gICAgICBzb3J0ID0gbnVsbCxcbiAgICAgIHN0YXJ0QW5nbGUgPSBjb25zdGFudCgwKSxcbiAgICAgIGVuZEFuZ2xlID0gY29uc3RhbnQodGF1KSxcbiAgICAgIHBhZEFuZ2xlID0gY29uc3RhbnQoMCk7XG5cbiAgZnVuY3Rpb24gcGllKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBqLFxuICAgICAgICBrLFxuICAgICAgICBzdW0gPSAwLFxuICAgICAgICBpbmRleCA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYXJjcyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYTAgPSArc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBkYSA9IE1hdGgubWluKHRhdSwgTWF0aC5tYXgoLXRhdSwgZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGEwKSksXG4gICAgICAgIGExLFxuICAgICAgICBwID0gTWF0aC5taW4oTWF0aC5hYnMoZGEpIC8gbiwgcGFkQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSksXG4gICAgICAgIHBhID0gcCAqIChkYSA8IDAgPyAtMSA6IDEpLFxuICAgICAgICB2O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCh2ID0gYXJjc1tpbmRleFtpXSA9IGldID0gK3ZhbHVlKGRhdGFbaV0sIGksIGRhdGEpKSA+IDApIHtcbiAgICAgICAgc3VtICs9IHY7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gT3B0aW9uYWxseSBzb3J0IHRoZSBhcmNzIGJ5IHByZXZpb3VzbHktY29tcHV0ZWQgdmFsdWVzIG9yIGJ5IGRhdGEuXG4gICAgaWYgKHNvcnRWYWx1ZXMgIT0gbnVsbCkgaW5kZXguc29ydChmdW5jdGlvbihpLCBqKSB7IHJldHVybiBzb3J0VmFsdWVzKGFyY3NbaV0sIGFyY3Nbal0pOyB9KTtcbiAgICBlbHNlIGlmIChzb3J0ICE9IG51bGwpIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gc29ydChkYXRhW2ldLCBkYXRhW2pdKTsgfSk7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBhcmNzISBUaGV5IGFyZSBzdG9yZWQgaW4gdGhlIG9yaWdpbmFsIGRhdGEncyBvcmRlci5cbiAgICBmb3IgKGkgPSAwLCBrID0gc3VtID8gKGRhIC0gbiAqIHBhKSAvIHN1bSA6IDA7IGkgPCBuOyArK2ksIGEwID0gYTEpIHtcbiAgICAgIGogPSBpbmRleFtpXSwgdiA9IGFyY3Nbal0sIGExID0gYTAgKyAodiA+IDAgPyB2ICogayA6IDApICsgcGEsIGFyY3Nbal0gPSB7XG4gICAgICAgIGRhdGE6IGRhdGFbal0sXG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgICB2YWx1ZTogdixcbiAgICAgICAgc3RhcnRBbmdsZTogYTAsXG4gICAgICAgIGVuZEFuZ2xlOiBhMSxcbiAgICAgICAgcGFkQW5nbGU6IHBcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyY3M7XG4gIH1cblxuICBwaWUudmFsdWUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmFsdWUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcGllKSA6IHZhbHVlO1xuICB9O1xuXG4gIHBpZS5zb3J0VmFsdWVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnRWYWx1ZXMgPSBfLCBzb3J0ID0gbnVsbCwgcGllKSA6IHNvcnRWYWx1ZXM7XG4gIH07XG5cbiAgcGllLnNvcnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydCA9IF8sIHNvcnRWYWx1ZXMgPSBudWxsLCBwaWUpIDogc29ydDtcbiAgfTtcblxuICBwaWUuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdGFydEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHBpZSkgOiBzdGFydEFuZ2xlO1xuICB9O1xuXG4gIHBpZS5lbmRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChlbmRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBwaWUpIDogZW5kQW5nbGU7XG4gIH07XG5cbiAgcGllLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHBpZSkgOiBwYWRBbmdsZTtcbiAgfTtcblxuICByZXR1cm4gcGllO1xufVxuIiwiaW1wb3J0IGN1cnZlTGluZWFyIGZyb20gXCIuL2xpbmVhclwiO1xuXG5leHBvcnQgdmFyIGN1cnZlUmFkaWFsTGluZWFyID0gY3VydmVSYWRpYWwoY3VydmVMaW5lYXIpO1xuXG5mdW5jdGlvbiBSYWRpYWwoY3VydmUpIHtcbiAgdGhpcy5fY3VydmUgPSBjdXJ2ZTtcbn1cblxuUmFkaWFsLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jdXJ2ZS5hcmVhU3RhcnQoKTtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUuYXJlYUVuZCgpO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnZlLmxpbmVTdGFydCgpO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jdXJ2ZS5saW5lRW5kKCk7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbihhLCByKSB7XG4gICAgdGhpcy5fY3VydmUucG9pbnQociAqIE1hdGguc2luKGEpLCByICogLU1hdGguY29zKGEpKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3VydmVSYWRpYWwoY3VydmUpIHtcblxuICBmdW5jdGlvbiByYWRpYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgUmFkaWFsKGN1cnZlKGNvbnRleHQpKTtcbiAgfVxuXG4gIHJhZGlhbC5fY3VydmUgPSBjdXJ2ZTtcblxuICByZXR1cm4gcmFkaWFsO1xufVxuIiwiZXhwb3J0IHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiIsInZhciB0YW4zMCA9IE1hdGguc3FydCgxIC8gMyksXG4gICAgdGFuMzBfMiA9IHRhbjMwICogMjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHkgPSBNYXRoLnNxcnQoc2l6ZSAvIHRhbjMwXzIpLFxuICAgICAgICB4ID0geSAqIHRhbjMwO1xuICAgIGNvbnRleHQubW92ZVRvKDAsIC15KTtcbiAgICBjb250ZXh0LmxpbmVUbyh4LCAwKTtcbiAgICBjb250ZXh0LmxpbmVUbygwLCB5KTtcbiAgICBjb250ZXh0LmxpbmVUbygteCwgMCk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsImltcG9ydCB7cGksIHRhdX0gZnJvbSBcIi4uL21hdGhcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIHBpKTtcbiAgICBjb250ZXh0Lm1vdmVUbyhyLCAwKTtcbiAgICBjb250ZXh0LmFyYygwLCAwLCByLCAwLCB0YXUpO1xuICB9XG59O1xuIiwiaW1wb3J0IHtwaSwgdGF1fSBmcm9tIFwiLi4vbWF0aFwiO1xuXG52YXIga2EgPSAwLjg5MDgxMzA5MTUyOTI4NTIyODEwLFxuICAgIGtyID0gTWF0aC5zaW4ocGkgLyAxMCkgLyBNYXRoLnNpbig3ICogcGkgLyAxMCksXG4gICAga3ggPSBNYXRoLnNpbih0YXUgLyAxMCkgKiBrcixcbiAgICBreSA9IC1NYXRoLmNvcyh0YXUgLyAxMCkgKiBrcjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAqIGthKSxcbiAgICAgICAgeCA9IGt4ICogcixcbiAgICAgICAgeSA9IGt5ICogcjtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCA1OyArK2kpIHtcbiAgICAgIHZhciBhID0gdGF1ICogaSAvIDUsXG4gICAgICAgICAgYyA9IE1hdGguY29zKGEpLFxuICAgICAgICAgIHMgPSBNYXRoLnNpbihhKTtcbiAgICAgIGNvbnRleHQubGluZVRvKHMgKiByLCAtYyAqIHIpO1xuICAgICAgY29udGV4dC5saW5lVG8oYyAqIHggLSBzICogeSwgcyAqIHggKyBjICogeSk7XG4gICAgfVxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHt9XG4iLCJ2YXIgc3FydDMgPSBNYXRoLnNxcnQoMyk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciB5ID0gLU1hdGguc3FydChzaXplIC8gKHNxcnQzICogMykpO1xuICAgIGNvbnRleHQubW92ZVRvKDAsIHkgKiAyKTtcbiAgICBjb250ZXh0LmxpbmVUbygtc3FydDMgKiB5LCAteSk7XG4gICAgY29udGV4dC5saW5lVG8oc3FydDMgKiB5LCAteSk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsInZhciBjID0gLTAuNSxcbiAgICBzID0gTWF0aC5zcXJ0KDMpIC8gMixcbiAgICBrID0gMSAvIE1hdGguc3FydCgxMiksXG4gICAgYSA9IChrIC8gMiArIDEpICogMztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIGEpLFxuICAgICAgICB4MCA9IHIgLyAyLFxuICAgICAgICB5MCA9IHIgKiBrLFxuICAgICAgICB4MSA9IHgwLFxuICAgICAgICB5MSA9IHIgKiBrICsgcixcbiAgICAgICAgeDIgPSAteDEsXG4gICAgICAgIHkyID0geTE7XG4gICAgY29udGV4dC5tb3ZlVG8oeDAsIHkwKTtcbiAgICBjb250ZXh0LmxpbmVUbyh4MSwgeTEpO1xuICAgIGNvbnRleHQubGluZVRvKHgyLCB5Mik7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgwIC0gcyAqIHkwLCBzICogeDAgKyBjICogeTApO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MSAtIHMgKiB5MSwgcyAqIHgxICsgYyAqIHkxKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDIgLSBzICogeTIsIHMgKiB4MiArIGMgKiB5Mik7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgwICsgcyAqIHkwLCBjICogeTAgLSBzICogeDApO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MSArIHMgKiB5MSwgYyAqIHkxIC0gcyAqIHgxKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDIgKyBzICogeTIsIGMgKiB5MiAtIHMgKiB4Mik7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsImV4cG9ydCBmdW5jdGlvbiBwb2ludCh0aGF0LCB4LCB5KSB7XG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyhcbiAgICAoMiAqIHRoYXQuX3gwICsgdGhhdC5feDEpIC8gMyxcbiAgICAoMiAqIHRoYXQuX3kwICsgdGhhdC5feTEpIC8gMyxcbiAgICAodGhhdC5feDAgKyAyICogdGhhdC5feDEpIC8gMyxcbiAgICAodGhhdC5feTAgKyAyICogdGhhdC5feTEpIC8gMyxcbiAgICAodGhhdC5feDAgKyA0ICogdGhhdC5feDEgKyB4KSAvIDYsXG4gICAgKHRoYXQuX3kwICsgNCAqIHRoYXQuX3kxICsgeSkgLyA2XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCYXNpcyhjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5CYXNpcy5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMzogcG9pbnQodGhpcywgdGhpcy5feDEsIHRoaXMuX3kxKTsgLy8gcHJvY2VlZFxuICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2NvbnRleHQubGluZVRvKCg1ICogdGhpcy5feDAgKyB0aGlzLl94MSkgLyA2LCAoNSAqIHRoaXMuX3kwICsgdGhpcy5feTEpIC8gNik7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IEJhc2lzKGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3BcIjtcbmltcG9ydCB7cG9pbnR9IGZyb20gXCIuL2Jhc2lzXCI7XG5cbmZ1bmN0aW9uIEJhc2lzQ2xvc2VkKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkJhc2lzQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBub29wLFxuICBhcmVhRW5kOiBub29wLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9IHRoaXMuX3gzID0gdGhpcy5feDQgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDE6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDI6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8oKHRoaXMuX3gyICsgMiAqIHRoaXMuX3gzKSAvIDMsICh0aGlzLl95MiArIDIgKiB0aGlzLl95MykgLyAzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oKHRoaXMuX3gzICsgMiAqIHRoaXMuX3gyKSAvIDMsICh0aGlzLl95MyArIDIgKiB0aGlzLl95MikgLyAzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDM6IHtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MiwgdGhpcy5feTIpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl94MiA9IHgsIHRoaXMuX3kyID0geTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g0ID0geCwgdGhpcy5feTQgPSB5OyB0aGlzLl9jb250ZXh0Lm1vdmVUbygodGhpcy5feDAgKyA0ICogdGhpcy5feDEgKyB4KSAvIDYsICh0aGlzLl95MCArIDQgKiB0aGlzLl95MSArIHkpIC8gNik7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgQmFzaXNDbG9zZWQoY29udGV4dCk7XG59XG4iLCJpbXBvcnQge3BvaW50fSBmcm9tIFwiLi9iYXNpc1wiO1xuXG5mdW5jdGlvbiBCYXNpc09wZW4oY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuQmFzaXNPcGVuLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDMpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdmFyIHgwID0gKHRoaXMuX3gwICsgNCAqIHRoaXMuX3gxICsgeCkgLyA2LCB5MCA9ICh0aGlzLl95MCArIDQgKiB0aGlzLl95MSArIHkpIC8gNjsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgwLCB5MCkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4MCwgeTApOyBicmVhaztcbiAgICAgIGNhc2UgMzogdGhpcy5fcG9pbnQgPSA0OyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBCYXNpc09wZW4oY29udGV4dCk7XG59XG4iLCJpbXBvcnQge0Jhc2lzfSBmcm9tIFwiLi9iYXNpc1wiO1xuXG5mdW5jdGlvbiBCdW5kbGUoY29udGV4dCwgYmV0YSkge1xuICB0aGlzLl9iYXNpcyA9IG5ldyBCYXNpcyhjb250ZXh0KTtcbiAgdGhpcy5fYmV0YSA9IGJldGE7XG59XG5cbkJ1bmRsZS5wcm90b3R5cGUgPSB7XG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feCA9IFtdO1xuICAgIHRoaXMuX3kgPSBbXTtcbiAgICB0aGlzLl9iYXNpcy5saW5lU3RhcnQoKTtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHggPSB0aGlzLl94LFxuICAgICAgICB5ID0gdGhpcy5feSxcbiAgICAgICAgaiA9IHgubGVuZ3RoIC0gMTtcblxuICAgIGlmIChqID4gMCkge1xuICAgICAgdmFyIHgwID0geFswXSxcbiAgICAgICAgICB5MCA9IHlbMF0sXG4gICAgICAgICAgZHggPSB4W2pdIC0geDAsXG4gICAgICAgICAgZHkgPSB5W2pdIC0geTAsXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIHQ7XG5cbiAgICAgIHdoaWxlICgrK2kgPD0gaikge1xuICAgICAgICB0ID0gaSAvIGo7XG4gICAgICAgIHRoaXMuX2Jhc2lzLnBvaW50KFxuICAgICAgICAgIHRoaXMuX2JldGEgKiB4W2ldICsgKDEgLSB0aGlzLl9iZXRhKSAqICh4MCArIHQgKiBkeCksXG4gICAgICAgICAgdGhpcy5fYmV0YSAqIHlbaV0gKyAoMSAtIHRoaXMuX2JldGEpICogKHkwICsgdCAqIGR5KVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3ggPSB0aGlzLl95ID0gbnVsbDtcbiAgICB0aGlzLl9iYXNpcy5saW5lRW5kKCk7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5feC5wdXNoKCt4KTtcbiAgICB0aGlzLl95LnB1c2goK3kpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKGJldGEpIHtcblxuICBmdW5jdGlvbiBidW5kbGUoY29udGV4dCkge1xuICAgIHJldHVybiBiZXRhID09PSAxID8gbmV3IEJhc2lzKGNvbnRleHQpIDogbmV3IEJ1bmRsZShjb250ZXh0LCBiZXRhKTtcbiAgfVxuXG4gIGJ1bmRsZS5iZXRhID0gZnVuY3Rpb24oYmV0YSkge1xuICAgIHJldHVybiBjdXN0b20oK2JldGEpO1xuICB9O1xuXG4gIHJldHVybiBidW5kbGU7XG59KSgwLjg1KTtcbiIsImV4cG9ydCBmdW5jdGlvbiBwb2ludCh0aGF0LCB4LCB5KSB7XG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyhcbiAgICB0aGF0Ll94MSArIHRoYXQuX2sgKiAodGhhdC5feDIgLSB0aGF0Ll94MCksXG4gICAgdGhhdC5feTEgKyB0aGF0Ll9rICogKHRoYXQuX3kyIC0gdGhhdC5feTApLFxuICAgIHRoYXQuX3gyICsgdGhhdC5fayAqICh0aGF0Ll94MSAtIHgpLFxuICAgIHRoYXQuX3kyICsgdGhhdC5fayAqICh0aGF0Ll95MSAtIHkpLFxuICAgIHRoYXQuX3gyLFxuICAgIHRoYXQuX3kyXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDYXJkaW5hbChjb250ZXh0LCB0ZW5zaW9uKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG59XG5cbkNhcmRpbmFsLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5feDEgPSB4LCB0aGlzLl95MSA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2FyZGluYWwoY29udGV4dCwgdGVuc2lvbik7XG4gIH1cblxuICBjYXJkaW5hbC50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xuICAgIHJldHVybiBjdXN0b20oK3RlbnNpb24pO1xuICB9O1xuXG4gIHJldHVybiBjYXJkaW5hbDtcbn0pKDApO1xuIiwiaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3BcIjtcbmltcG9ydCB7cG9pbnR9IGZyb20gXCIuL2NhcmRpbmFsXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDYXJkaW5hbENsb3NlZChjb250ZXh0LCB0ZW5zaW9uKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG59XG5cbkNhcmRpbmFsQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBub29wLFxuICBhcmVhRW5kOiBub29wLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9IHRoaXMuX3gzID0gdGhpcy5feDQgPSB0aGlzLl94NSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gdGhpcy5feTMgPSB0aGlzLl95NCA9IHRoaXMuX3k1ID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g1LCB0aGlzLl95NSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3g0ID0geCwgdGhpcy5feTQgPSB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5feDUgPSB4LCB0aGlzLl95NSA9IHk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICBmdW5jdGlvbiBjYXJkaW5hbChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBDYXJkaW5hbENsb3NlZChjb250ZXh0LCB0ZW5zaW9uKTtcbiAgfVxuXG4gIGNhcmRpbmFsLnRlbnNpb24gPSBmdW5jdGlvbih0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XG4gIH07XG5cbiAgcmV0dXJuIGNhcmRpbmFsO1xufSkoMCk7XG4iLCJpbXBvcnQge3BvaW50fSBmcm9tIFwiLi9jYXJkaW5hbFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ2FyZGluYWxPcGVuKGNvbnRleHQsIHRlbnNpb24pIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2sgPSAoMSAtIHRlbnNpb24pIC8gNjtcbn1cblxuQ2FyZGluYWxPcGVuLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHRoaXMuX3BvaW50ID0gNDsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICBmdW5jdGlvbiBjYXJkaW5hbChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBDYXJkaW5hbE9wZW4oY29udGV4dCwgdGVuc2lvbik7XG4gIH1cblxuICBjYXJkaW5hbC50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xuICAgIHJldHVybiBjdXN0b20oK3RlbnNpb24pO1xuICB9O1xuXG4gIHJldHVybiBjYXJkaW5hbDtcbn0pKDApO1xuIiwiaW1wb3J0IHtlcHNpbG9ufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHtDYXJkaW5hbH0gZnJvbSBcIi4vY2FyZGluYWxcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50KHRoYXQsIHgsIHkpIHtcbiAgdmFyIHgxID0gdGhhdC5feDEsXG4gICAgICB5MSA9IHRoYXQuX3kxLFxuICAgICAgeDIgPSB0aGF0Ll94MixcbiAgICAgIHkyID0gdGhhdC5feTI7XG5cbiAgaWYgKHRoYXQuX2wwMV9hID4gZXBzaWxvbikge1xuICAgIHZhciBhID0gMiAqIHRoYXQuX2wwMV8yYSArIDMgKiB0aGF0Ll9sMDFfYSAqIHRoYXQuX2wxMl9hICsgdGhhdC5fbDEyXzJhLFxuICAgICAgICBuID0gMyAqIHRoYXQuX2wwMV9hICogKHRoYXQuX2wwMV9hICsgdGhhdC5fbDEyX2EpO1xuICAgIHgxID0gKHgxICogYSAtIHRoYXQuX3gwICogdGhhdC5fbDEyXzJhICsgdGhhdC5feDIgKiB0aGF0Ll9sMDFfMmEpIC8gbjtcbiAgICB5MSA9ICh5MSAqIGEgLSB0aGF0Ll95MCAqIHRoYXQuX2wxMl8yYSArIHRoYXQuX3kyICogdGhhdC5fbDAxXzJhKSAvIG47XG4gIH1cblxuICBpZiAodGhhdC5fbDIzX2EgPiBlcHNpbG9uKSB7XG4gICAgdmFyIGIgPSAyICogdGhhdC5fbDIzXzJhICsgMyAqIHRoYXQuX2wyM19hICogdGhhdC5fbDEyX2EgKyB0aGF0Ll9sMTJfMmEsXG4gICAgICAgIG0gPSAzICogdGhhdC5fbDIzX2EgKiAodGhhdC5fbDIzX2EgKyB0aGF0Ll9sMTJfYSk7XG4gICAgeDIgPSAoeDIgKiBiICsgdGhhdC5feDEgKiB0aGF0Ll9sMjNfMmEgLSB4ICogdGhhdC5fbDEyXzJhKSAvIG07XG4gICAgeTIgPSAoeTIgKiBiICsgdGhhdC5feTEgKiB0aGF0Ll9sMjNfMmEgLSB5ICogdGhhdC5fbDEyXzJhKSAvIG07XG4gIH1cblxuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oeDEsIHkxLCB4MiwgeTIsIHRoYXQuX3gyLCB0aGF0Ll95Mik7XG59XG5cbmZ1bmN0aW9uIENhdG11bGxSb20oY29udGV4dCwgYWxwaGEpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2FscGhhID0gYWxwaGE7XG59XG5cbkNhdG11bGxSb20ucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYSA9XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhID1cbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHRoaXMucG9pbnQodGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG5cbiAgICBpZiAodGhpcy5fcG9pbnQpIHtcbiAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXG4gICAgICAgICAgeTIzID0gdGhpcy5feTIgLSB5O1xuICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhLCB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmE7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShhbHBoYSkge1xuXG4gIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xuICAgIHJldHVybiBhbHBoYSA/IG5ldyBDYXRtdWxsUm9tKGNvbnRleHQsIGFscGhhKSA6IG5ldyBDYXJkaW5hbChjb250ZXh0LCAwKTtcbiAgfVxuXG4gIGNhdG11bGxSb20uYWxwaGEgPSBmdW5jdGlvbihhbHBoYSkge1xuICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgfTtcblxuICByZXR1cm4gY2F0bXVsbFJvbTtcbn0pKDAuNSk7XG4iLCJpbXBvcnQge0NhcmRpbmFsQ2xvc2VkfSBmcm9tIFwiLi9jYXJkaW5hbENsb3NlZFwiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3BcIjtcbmltcG9ydCB7cG9pbnR9IGZyb20gXCIuL2NhdG11bGxSb21cIjtcblxuZnVuY3Rpb24gQ2F0bXVsbFJvbUNsb3NlZChjb250ZXh0LCBhbHBoYSkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbn1cblxuQ2F0bXVsbFJvbUNsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID0gdGhpcy5feDUgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSB0aGlzLl95NSA9IE5hTjtcbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPVxuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDE6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDI6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDM6IHtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g0LCB0aGlzLl95NCk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDUsIHRoaXMuX3k1KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxuICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3g0ID0geCwgdGhpcy5feTQgPSB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5feDUgPSB4LCB0aGlzLl95NSA9IHk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhLCB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmE7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShhbHBoYSkge1xuXG4gIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xuICAgIHJldHVybiBhbHBoYSA/IG5ldyBDYXRtdWxsUm9tQ2xvc2VkKGNvbnRleHQsIGFscGhhKSA6IG5ldyBDYXJkaW5hbENsb3NlZChjb250ZXh0LCAwKTtcbiAgfVxuXG4gIGNhdG11bGxSb20uYWxwaGEgPSBmdW5jdGlvbihhbHBoYSkge1xuICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgfTtcblxuICByZXR1cm4gY2F0bXVsbFJvbTtcbn0pKDAuNSk7XG4iLCJpbXBvcnQge0NhcmRpbmFsT3Blbn0gZnJvbSBcIi4vY2FyZGluYWxPcGVuXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9jYXRtdWxsUm9tXCI7XG5cbmZ1bmN0aW9uIENhdG11bGxSb21PcGVuKGNvbnRleHQsIGFscGhhKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9hbHBoYSA9IGFscGhhO1xufVxuXG5DYXRtdWxsUm9tT3Blbi5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPVxuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDMpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgIGlmICh0aGlzLl9wb2ludCkge1xuICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICB0aGlzLl9sMjNfYSA9IE1hdGguc3FydCh0aGlzLl9sMjNfMmEgPSBNYXRoLnBvdyh4MjMgKiB4MjMgKyB5MjMgKiB5MjMsIHRoaXMuX2FscGhhKSk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHRoaXMuX3BvaW50ID0gNDsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhLCB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmE7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShhbHBoYSkge1xuXG4gIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xuICAgIHJldHVybiBhbHBoYSA/IG5ldyBDYXRtdWxsUm9tT3Blbihjb250ZXh0LCBhbHBoYSkgOiBuZXcgQ2FyZGluYWxPcGVuKGNvbnRleHQsIDApO1xuICB9XG5cbiAgY2F0bXVsbFJvbS5hbHBoYSA9IGZ1bmN0aW9uKGFscGhhKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrYWxwaGEpO1xuICB9O1xuXG4gIHJldHVybiBjYXRtdWxsUm9tO1xufSkoMC41KTtcbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5cbmZ1bmN0aW9uIExpbmVhckNsb3NlZChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5MaW5lYXJDbG9zZWQucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IG5vb3AsXG4gIGFyZWFFbmQ6IG5vb3AsXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fcG9pbnQpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgaWYgKHRoaXMuX3BvaW50KSB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICBlbHNlIHRoaXMuX3BvaW50ID0gMSwgdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBMaW5lYXJDbG9zZWQoY29udGV4dCk7XG59XG4iLCJmdW5jdGlvbiBzaWduKHgpIHtcbiAgcmV0dXJuIHggPCAwID8gLTEgOiAxO1xufVxuXG4vLyBDYWxjdWxhdGUgdGhlIHNsb3BlcyBvZiB0aGUgdGFuZ2VudHMgKEhlcm1pdGUtdHlwZSBpbnRlcnBvbGF0aW9uKSBiYXNlZCBvblxuLy8gdGhlIGZvbGxvd2luZyBwYXBlcjogU3RlZmZlbiwgTS4gMTk5MC4gQSBTaW1wbGUgTWV0aG9kIGZvciBNb25vdG9uaWNcbi8vIEludGVycG9sYXRpb24gaW4gT25lIERpbWVuc2lvbi4gQXN0cm9ub215IGFuZCBBc3Ryb3BoeXNpY3MsIFZvbC4gMjM5LCBOTy5cbi8vIE5PVihJSSksIFAuIDQ0MywgMTk5MC5cbmZ1bmN0aW9uIHNsb3BlMyh0aGF0LCB4MiwgeTIpIHtcbiAgdmFyIGgwID0gdGhhdC5feDEgLSB0aGF0Ll94MCxcbiAgICAgIGgxID0geDIgLSB0aGF0Ll94MSxcbiAgICAgIHMwID0gKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gKGgwIHx8IGgxIDwgMCAmJiAtMCksXG4gICAgICBzMSA9ICh5MiAtIHRoYXQuX3kxKSAvIChoMSB8fCBoMCA8IDAgJiYgLTApLFxuICAgICAgcCA9IChzMCAqIGgxICsgczEgKiBoMCkgLyAoaDAgKyBoMSk7XG4gIHJldHVybiAoc2lnbihzMCkgKyBzaWduKHMxKSkgKiBNYXRoLm1pbihNYXRoLmFicyhzMCksIE1hdGguYWJzKHMxKSwgMC41ICogTWF0aC5hYnMocCkpIHx8IDA7XG59XG5cbi8vIENhbGN1bGF0ZSBhIG9uZS1zaWRlZCBzbG9wZS5cbmZ1bmN0aW9uIHNsb3BlMih0aGF0LCB0KSB7XG4gIHZhciBoID0gdGhhdC5feDEgLSB0aGF0Ll94MDtcbiAgcmV0dXJuIGggPyAoMyAqICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIGggLSB0KSAvIDIgOiB0O1xufVxuXG4vLyBBY2NvcmRpbmcgdG8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3ViaWNfSGVybWl0ZV9zcGxpbmUjUmVwcmVzZW50YXRpb25zXG4vLyBcInlvdSBjYW4gZXhwcmVzcyBjdWJpYyBIZXJtaXRlIGludGVycG9sYXRpb24gaW4gdGVybXMgb2YgY3ViaWMgQsOpemllciBjdXJ2ZXNcbi8vIHdpdGggcmVzcGVjdCB0byB0aGUgZm91ciB2YWx1ZXMgcDAsIHAwICsgbTAgLyAzLCBwMSAtIG0xIC8gMywgcDFcIi5cbmZ1bmN0aW9uIHBvaW50KHRoYXQsIHQwLCB0MSkge1xuICB2YXIgeDAgPSB0aGF0Ll94MCxcbiAgICAgIHkwID0gdGhhdC5feTAsXG4gICAgICB4MSA9IHRoYXQuX3gxLFxuICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgIGR4ID0gKHgxIC0geDApIC8gMztcbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwICsgZHgsIHkwICsgZHggKiB0MCwgeDEgLSBkeCwgeTEgLSBkeCAqIHQxLCB4MSwgeTEpO1xufVxuXG5mdW5jdGlvbiBNb25vdG9uZVgoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTW9ub3RvbmVYLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID1cbiAgICB0aGlzLl90MCA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3QwLCBzbG9wZTIodGhpcywgdGhpcy5fdDApKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHQxID0gTmFOO1xuXG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgaWYgKHggPT09IHRoaXMuX3gxICYmIHkgPT09IHRoaXMuX3kxKSByZXR1cm47IC8vIElnbm9yZSBjb2luY2lkZW50IHBvaW50cy5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHBvaW50KHRoaXMsIHNsb3BlMih0aGlzLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSksIHQxKTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB0aGlzLl90MCwgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICAgIHRoaXMuX3QwID0gdDE7XG4gIH1cbn1cblxuZnVuY3Rpb24gTW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IG5ldyBSZWZsZWN0Q29udGV4dChjb250ZXh0KTtcbn1cblxuKE1vbm90b25lWS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1vbm90b25lWC5wcm90b3R5cGUpKS5wb2ludCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgTW9ub3RvbmVYLnByb3RvdHlwZS5wb2ludC5jYWxsKHRoaXMsIHksIHgpO1xufTtcblxuZnVuY3Rpb24gUmVmbGVjdENvbnRleHQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuUmVmbGVjdENvbnRleHQucHJvdG90eXBlID0ge1xuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5tb3ZlVG8oeSwgeCk7IH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7IHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7IH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLl9jb250ZXh0LmxpbmVUbyh5LCB4KTsgfSxcbiAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHsgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHkxLCB4MSwgeTIsIHgyLCB5LCB4KTsgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1vbm90b25lWChjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTW9ub3RvbmVYKGNvbnRleHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBNb25vdG9uZVkoY29udGV4dCk7XG59XG4iLCJmdW5jdGlvbiBOYXR1cmFsKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbk5hdHVyYWwucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3ggPSBbXTtcbiAgICB0aGlzLl95ID0gW107XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB4ID0gdGhpcy5feCxcbiAgICAgICAgeSA9IHRoaXMuX3ksXG4gICAgICAgIG4gPSB4Lmxlbmd0aDtcblxuICAgIGlmIChuKSB7XG4gICAgICB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeFswXSwgeVswXSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4WzBdLCB5WzBdKTtcbiAgICAgIGlmIChuID09PSAyKSB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHhbMV0sIHlbMV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHB4ID0gY29udHJvbFBvaW50cyh4KSxcbiAgICAgICAgICAgIHB5ID0gY29udHJvbFBvaW50cyh5KTtcbiAgICAgICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDE7IGkxIDwgbjsgKytpMCwgKytpMSkge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyhweFswXVtpMF0sIHB5WzBdW2kwXSwgcHhbMV1baTBdLCBweVsxXVtpMF0sIHhbaTFdLCB5W2kxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiBuID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gICAgdGhpcy5feCA9IHRoaXMuX3kgPSBudWxsO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuX3gucHVzaCgreCk7XG4gICAgdGhpcy5feS5wdXNoKCt5KTtcbiAgfVxufTtcblxuLy8gU2VlIGh0dHBzOi8vd3d3LnBhcnRpY2xlaW5jZWxsLmNvbS8yMDEyL2Jlemllci1zcGxpbmVzLyBmb3IgZGVyaXZhdGlvbi5cbmZ1bmN0aW9uIGNvbnRyb2xQb2ludHMoeCkge1xuICB2YXIgaSxcbiAgICAgIG4gPSB4Lmxlbmd0aCAtIDEsXG4gICAgICBtLFxuICAgICAgYSA9IG5ldyBBcnJheShuKSxcbiAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICByID0gbmV3IEFycmF5KG4pO1xuICBhWzBdID0gMCwgYlswXSA9IDIsIHJbMF0gPSB4WzBdICsgMiAqIHhbMV07XG4gIGZvciAoaSA9IDE7IGkgPCBuIC0gMTsgKytpKSBhW2ldID0gMSwgYltpXSA9IDQsIHJbaV0gPSA0ICogeFtpXSArIDIgKiB4W2kgKyAxXTtcbiAgYVtuIC0gMV0gPSAyLCBiW24gLSAxXSA9IDcsIHJbbiAtIDFdID0gOCAqIHhbbiAtIDFdICsgeFtuXTtcbiAgZm9yIChpID0gMTsgaSA8IG47ICsraSkgbSA9IGFbaV0gLyBiW2kgLSAxXSwgYltpXSAtPSBtLCByW2ldIC09IG0gKiByW2kgLSAxXTtcbiAgYVtuIC0gMV0gPSByW24gLSAxXSAvIGJbbiAtIDFdO1xuICBmb3IgKGkgPSBuIC0gMjsgaSA+PSAwOyAtLWkpIGFbaV0gPSAocltpXSAtIGFbaSArIDFdKSAvIGJbaV07XG4gIGJbbiAtIDFdID0gKHhbbl0gKyBhW24gLSAxXSkgLyAyO1xuICBmb3IgKGkgPSAwOyBpIDwgbiAtIDE7ICsraSkgYltpXSA9IDIgKiB4W2kgKyAxXSAtIGFbaSArIDFdO1xuICByZXR1cm4gW2EsIGJdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTmF0dXJhbChjb250ZXh0KTtcbn1cbiIsImZ1bmN0aW9uIFN0ZXAoY29udGV4dCwgdCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fdCA9IHQ7XG59XG5cblN0ZXAucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3ggPSB0aGlzLl95ID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKDAgPCB0aGlzLl90ICYmIHRoaXMuX3QgPCAxICYmIHRoaXMuX3BvaW50ID09PSAyKSB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94LCB0aGlzLl95KTtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgaWYgKHRoaXMuX2xpbmUgPj0gMCkgdGhpcy5fdCA9IDEgLSB0aGlzLl90LCB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGlmICh0aGlzLl90IDw9IDApIHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94LCB5KTtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgeDEgPSB0aGlzLl94ICogKDEgLSB0aGlzLl90KSArIHggKiB0aGlzLl90O1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgxLCB0aGlzLl95KTtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MSwgeSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3ggPSB4LCB0aGlzLl95ID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IFN0ZXAoY29udGV4dCwgMC41KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0ZXBCZWZvcmUoY29udGV4dCkge1xuICByZXR1cm4gbmV3IFN0ZXAoY29udGV4dCwgMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGVwQWZ0ZXIoY29udGV4dCkge1xuICByZXR1cm4gbmV3IFN0ZXAoY29udGV4dCwgMSk7XG59XG4iLCJmdW5jdGlvbiBSZWRCbGFja1RyZWUoKSB7XG4gIHRoaXMuXyA9IG51bGw7IC8vIHJvb3Qgbm9kZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVkQmxhY2tOb2RlKG5vZGUpIHtcbiAgbm9kZS5VID0gLy8gcGFyZW50IG5vZGVcbiAgbm9kZS5DID0gLy8gY29sb3IgLSB0cnVlIGZvciByZWQsIGZhbHNlIGZvciBibGFja1xuICBub2RlLkwgPSAvLyBsZWZ0IG5vZGVcbiAgbm9kZS5SID0gLy8gcmlnaHQgbm9kZVxuICBub2RlLlAgPSAvLyBwcmV2aW91cyBub2RlXG4gIG5vZGUuTiA9IG51bGw7IC8vIG5leHQgbm9kZVxufVxuXG5SZWRCbGFja1RyZWUucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUmVkQmxhY2tUcmVlLFxuXG4gIGluc2VydDogZnVuY3Rpb24oYWZ0ZXIsIG5vZGUpIHtcbiAgICB2YXIgcGFyZW50LCBncmFuZHBhLCB1bmNsZTtcblxuICAgIGlmIChhZnRlcikge1xuICAgICAgbm9kZS5QID0gYWZ0ZXI7XG4gICAgICBub2RlLk4gPSBhZnRlci5OO1xuICAgICAgaWYgKGFmdGVyLk4pIGFmdGVyLk4uUCA9IG5vZGU7XG4gICAgICBhZnRlci5OID0gbm9kZTtcbiAgICAgIGlmIChhZnRlci5SKSB7XG4gICAgICAgIGFmdGVyID0gYWZ0ZXIuUjtcbiAgICAgICAgd2hpbGUgKGFmdGVyLkwpIGFmdGVyID0gYWZ0ZXIuTDtcbiAgICAgICAgYWZ0ZXIuTCA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZnRlci5SID0gbm9kZTtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IGFmdGVyO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fKSB7XG4gICAgICBhZnRlciA9IFJlZEJsYWNrRmlyc3QodGhpcy5fKTtcbiAgICAgIG5vZGUuUCA9IG51bGw7XG4gICAgICBub2RlLk4gPSBhZnRlcjtcbiAgICAgIGFmdGVyLlAgPSBhZnRlci5MID0gbm9kZTtcbiAgICAgIHBhcmVudCA9IGFmdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLlAgPSBub2RlLk4gPSBudWxsO1xuICAgICAgdGhpcy5fID0gbm9kZTtcbiAgICAgIHBhcmVudCA9IG51bGw7XG4gICAgfVxuICAgIG5vZGUuTCA9IG5vZGUuUiA9IG51bGw7XG4gICAgbm9kZS5VID0gcGFyZW50O1xuICAgIG5vZGUuQyA9IHRydWU7XG5cbiAgICBhZnRlciA9IG5vZGU7XG4gICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuQykge1xuICAgICAgZ3JhbmRwYSA9IHBhcmVudC5VO1xuICAgICAgaWYgKHBhcmVudCA9PT0gZ3JhbmRwYS5MKSB7XG4gICAgICAgIHVuY2xlID0gZ3JhbmRwYS5SO1xuICAgICAgICBpZiAodW5jbGUgJiYgdW5jbGUuQykge1xuICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xuICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgYWZ0ZXIgPSBncmFuZHBhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChhZnRlciA9PT0gcGFyZW50LlIpIHtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgYWZ0ZXIgPSBwYXJlbnQ7XG4gICAgICAgICAgICBwYXJlbnQgPSBhZnRlci5VO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXJlbnQuQyA9IGZhbHNlO1xuICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBncmFuZHBhKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdW5jbGUgPSBncmFuZHBhLkw7XG4gICAgICAgIGlmICh1bmNsZSAmJiB1bmNsZS5DKSB7XG4gICAgICAgICAgcGFyZW50LkMgPSB1bmNsZS5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBhZnRlciA9IGdyYW5kcGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFmdGVyID09PSBwYXJlbnQuTCkge1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgYWZ0ZXIgPSBwYXJlbnQ7XG4gICAgICAgICAgICBwYXJlbnQgPSBhZnRlci5VO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXJlbnQuQyA9IGZhbHNlO1xuICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIGdyYW5kcGEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBhZnRlci5VO1xuICAgIH1cbiAgICB0aGlzLl8uQyA9IGZhbHNlO1xuICB9LFxuXG4gIHJlbW92ZTogZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChub2RlLk4pIG5vZGUuTi5QID0gbm9kZS5QO1xuICAgIGlmIChub2RlLlApIG5vZGUuUC5OID0gbm9kZS5OO1xuICAgIG5vZGUuTiA9IG5vZGUuUCA9IG51bGw7XG5cbiAgICB2YXIgcGFyZW50ID0gbm9kZS5VLFxuICAgICAgICBzaWJsaW5nLFxuICAgICAgICBsZWZ0ID0gbm9kZS5MLFxuICAgICAgICByaWdodCA9IG5vZGUuUixcbiAgICAgICAgbmV4dCxcbiAgICAgICAgcmVkO1xuXG4gICAgaWYgKCFsZWZ0KSBuZXh0ID0gcmlnaHQ7XG4gICAgZWxzZSBpZiAoIXJpZ2h0KSBuZXh0ID0gbGVmdDtcbiAgICBlbHNlIG5leHQgPSBSZWRCbGFja0ZpcnN0KHJpZ2h0KTtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQuTCA9PT0gbm9kZSkgcGFyZW50LkwgPSBuZXh0O1xuICAgICAgZWxzZSBwYXJlbnQuUiA9IG5leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuXyA9IG5leHQ7XG4gICAgfVxuXG4gICAgaWYgKGxlZnQgJiYgcmlnaHQpIHtcbiAgICAgIHJlZCA9IG5leHQuQztcbiAgICAgIG5leHQuQyA9IG5vZGUuQztcbiAgICAgIG5leHQuTCA9IGxlZnQ7XG4gICAgICBsZWZ0LlUgPSBuZXh0O1xuICAgICAgaWYgKG5leHQgIT09IHJpZ2h0KSB7XG4gICAgICAgIHBhcmVudCA9IG5leHQuVTtcbiAgICAgICAgbmV4dC5VID0gbm9kZS5VO1xuICAgICAgICBub2RlID0gbmV4dC5SO1xuICAgICAgICBwYXJlbnQuTCA9IG5vZGU7XG4gICAgICAgIG5leHQuUiA9IHJpZ2h0O1xuICAgICAgICByaWdodC5VID0gbmV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHQuVSA9IHBhcmVudDtcbiAgICAgICAgcGFyZW50ID0gbmV4dDtcbiAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVkID0gbm9kZS5DO1xuICAgICAgbm9kZSA9IG5leHQ7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUpIG5vZGUuVSA9IHBhcmVudDtcbiAgICBpZiAocmVkKSByZXR1cm47XG4gICAgaWYgKG5vZGUgJiYgbm9kZS5DKSB7IG5vZGUuQyA9IGZhbHNlOyByZXR1cm47IH1cblxuICAgIGRvIHtcbiAgICAgIGlmIChub2RlID09PSB0aGlzLl8pIGJyZWFrO1xuICAgICAgaWYgKG5vZGUgPT09IHBhcmVudC5MKSB7XG4gICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgaWYgKHNpYmxpbmcuQykge1xuICAgICAgICAgIHNpYmxpbmcuQyA9IGZhbHNlO1xuICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzaWJsaW5nLkwgJiYgc2libGluZy5MLkMpXG4gICAgICAgICAgICB8fCAoc2libGluZy5SICYmIHNpYmxpbmcuUi5DKSkge1xuICAgICAgICAgIGlmICghc2libGluZy5SIHx8ICFzaWJsaW5nLlIuQykge1xuICAgICAgICAgICAgc2libGluZy5MLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHRydWU7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHNpYmxpbmcpO1xuICAgICAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzaWJsaW5nLkMgPSBwYXJlbnQuQztcbiAgICAgICAgICBwYXJlbnQuQyA9IHNpYmxpbmcuUi5DID0gZmFsc2U7XG4gICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgbm9kZSA9IHRoaXMuXztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2libGluZyA9IHBhcmVudC5MO1xuICAgICAgICBpZiAoc2libGluZy5DKSB7XG4gICAgICAgICAgc2libGluZy5DID0gZmFsc2U7XG4gICAgICAgICAgcGFyZW50LkMgPSB0cnVlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzaWJsaW5nLkwgJiYgc2libGluZy5MLkMpXG4gICAgICAgICAgfHwgKHNpYmxpbmcuUiAmJiBzaWJsaW5nLlIuQykpIHtcbiAgICAgICAgICBpZiAoIXNpYmxpbmcuTCB8fCAhc2libGluZy5MLkMpIHtcbiAgICAgICAgICAgIHNpYmxpbmcuUi5DID0gZmFsc2U7XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHNpYmxpbmcpO1xuICAgICAgICAgICAgc2libGluZyA9IHBhcmVudC5MO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzaWJsaW5nLkMgPSBwYXJlbnQuQztcbiAgICAgICAgICBwYXJlbnQuQyA9IHNpYmxpbmcuTC5DID0gZmFsc2U7XG4gICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIG5vZGUgPSB0aGlzLl87XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNpYmxpbmcuQyA9IHRydWU7XG4gICAgICBub2RlID0gcGFyZW50O1xuICAgICAgcGFyZW50ID0gcGFyZW50LlU7XG4gICAgfSB3aGlsZSAoIW5vZGUuQyk7XG5cbiAgICBpZiAobm9kZSkgbm9kZS5DID0gZmFsc2U7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFJlZEJsYWNrUm90YXRlTGVmdCh0cmVlLCBub2RlKSB7XG4gIHZhciBwID0gbm9kZSxcbiAgICAgIHEgPSBub2RlLlIsXG4gICAgICBwYXJlbnQgPSBwLlU7XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQuTCA9PT0gcCkgcGFyZW50LkwgPSBxO1xuICAgIGVsc2UgcGFyZW50LlIgPSBxO1xuICB9IGVsc2Uge1xuICAgIHRyZWUuXyA9IHE7XG4gIH1cblxuICBxLlUgPSBwYXJlbnQ7XG4gIHAuVSA9IHE7XG4gIHAuUiA9IHEuTDtcbiAgaWYgKHAuUikgcC5SLlUgPSBwO1xuICBxLkwgPSBwO1xufVxuXG5mdW5jdGlvbiBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRyZWUsIG5vZGUpIHtcbiAgdmFyIHAgPSBub2RlLFxuICAgICAgcSA9IG5vZGUuTCxcbiAgICAgIHBhcmVudCA9IHAuVTtcblxuICBpZiAocGFyZW50KSB7XG4gICAgaWYgKHBhcmVudC5MID09PSBwKSBwYXJlbnQuTCA9IHE7XG4gICAgZWxzZSBwYXJlbnQuUiA9IHE7XG4gIH0gZWxzZSB7XG4gICAgdHJlZS5fID0gcTtcbiAgfVxuXG4gIHEuVSA9IHBhcmVudDtcbiAgcC5VID0gcTtcbiAgcC5MID0gcS5SO1xuICBpZiAocC5MKSBwLkwuVSA9IHA7XG4gIHEuUiA9IHA7XG59XG5cbmZ1bmN0aW9uIFJlZEJsYWNrRmlyc3Qobm9kZSkge1xuICB3aGlsZSAobm9kZS5MKSBub2RlID0gbm9kZS5MO1xuICByZXR1cm4gbm9kZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVkQmxhY2tUcmVlO1xuIiwiaW1wb3J0IHtjZWxscywgZWRnZXMsIGVwc2lsb259IGZyb20gXCIuL0RpYWdyYW1cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVkZ2UobGVmdCwgcmlnaHQsIHYwLCB2MSkge1xuICB2YXIgZWRnZSA9IFtudWxsLCBudWxsXSxcbiAgICAgIGluZGV4ID0gZWRnZXMucHVzaChlZGdlKSAtIDE7XG4gIGVkZ2UubGVmdCA9IGxlZnQ7XG4gIGVkZ2UucmlnaHQgPSByaWdodDtcbiAgaWYgKHYwKSBzZXRFZGdlRW5kKGVkZ2UsIGxlZnQsIHJpZ2h0LCB2MCk7XG4gIGlmICh2MSkgc2V0RWRnZUVuZChlZGdlLCByaWdodCwgbGVmdCwgdjEpO1xuICBjZWxsc1tsZWZ0LmluZGV4XS5oYWxmZWRnZXMucHVzaChpbmRleCk7XG4gIGNlbGxzW3JpZ2h0LmluZGV4XS5oYWxmZWRnZXMucHVzaChpbmRleCk7XG4gIHJldHVybiBlZGdlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQm9yZGVyRWRnZShsZWZ0LCB2MCwgdjEpIHtcbiAgdmFyIGVkZ2UgPSBbdjAsIHYxXTtcbiAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgcmV0dXJuIGVkZ2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRFZGdlRW5kKGVkZ2UsIGxlZnQsIHJpZ2h0LCB2ZXJ0ZXgpIHtcbiAgaWYgKCFlZGdlWzBdICYmICFlZGdlWzFdKSB7XG4gICAgZWRnZVswXSA9IHZlcnRleDtcbiAgICBlZGdlLmxlZnQgPSBsZWZ0O1xuICAgIGVkZ2UucmlnaHQgPSByaWdodDtcbiAgfSBlbHNlIGlmIChlZGdlLmxlZnQgPT09IHJpZ2h0KSB7XG4gICAgZWRnZVsxXSA9IHZlcnRleDtcbiAgfSBlbHNlIHtcbiAgICBlZGdlWzBdID0gdmVydGV4O1xuICB9XG59XG5cbi8vIExpYW5n4oCTQmFyc2t5IGxpbmUgY2xpcHBpbmcuXG5mdW5jdGlvbiBjbGlwRWRnZShlZGdlLCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgYSA9IGVkZ2VbMF0sXG4gICAgICBiID0gZWRnZVsxXSxcbiAgICAgIGF4ID0gYVswXSxcbiAgICAgIGF5ID0gYVsxXSxcbiAgICAgIGJ4ID0gYlswXSxcbiAgICAgIGJ5ID0gYlsxXSxcbiAgICAgIHQwID0gMCxcbiAgICAgIHQxID0gMSxcbiAgICAgIGR4ID0gYnggLSBheCxcbiAgICAgIGR5ID0gYnkgLSBheSxcbiAgICAgIHI7XG5cbiAgciA9IHgwIC0gYXg7XG4gIGlmICghZHggJiYgciA+IDApIHJldHVybjtcbiAgciAvPSBkeDtcbiAgaWYgKGR4IDwgMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfVxuXG4gIHIgPSB4MSAtIGF4O1xuICBpZiAoIWR4ICYmIHIgPCAwKSByZXR1cm47XG4gIHIgLz0gZHg7XG4gIGlmIChkeCA8IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH1cblxuICByID0geTAgLSBheTtcbiAgaWYgKCFkeSAmJiByID4gMCkgcmV0dXJuO1xuICByIC89IGR5O1xuICBpZiAoZHkgPCAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9XG5cbiAgciA9IHkxIC0gYXk7XG4gIGlmICghZHkgJiYgciA8IDApIHJldHVybjtcbiAgciAvPSBkeTtcbiAgaWYgKGR5IDwgMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfVxuXG4gIGlmICghKHQwID4gMCkgJiYgISh0MSA8IDEpKSByZXR1cm4gdHJ1ZTsgLy8gVE9ETyBCZXR0ZXIgY2hlY2s/XG5cbiAgaWYgKHQwID4gMCkgZWRnZVswXSA9IFtheCArIHQwICogZHgsIGF5ICsgdDAgKiBkeV07XG4gIGlmICh0MSA8IDEpIGVkZ2VbMV0gPSBbYXggKyB0MSAqIGR4LCBheSArIHQxICogZHldO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29ubmVjdEVkZ2UoZWRnZSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIHYxID0gZWRnZVsxXTtcbiAgaWYgKHYxKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgdjAgPSBlZGdlWzBdLFxuICAgICAgbGVmdCA9IGVkZ2UubGVmdCxcbiAgICAgIHJpZ2h0ID0gZWRnZS5yaWdodCxcbiAgICAgIGx4ID0gbGVmdFswXSxcbiAgICAgIGx5ID0gbGVmdFsxXSxcbiAgICAgIHJ4ID0gcmlnaHRbMF0sXG4gICAgICByeSA9IHJpZ2h0WzFdLFxuICAgICAgZnggPSAobHggKyByeCkgLyAyLFxuICAgICAgZnkgPSAobHkgKyByeSkgLyAyLFxuICAgICAgZm0sXG4gICAgICBmYjtcblxuICBpZiAocnkgPT09IGx5KSB7XG4gICAgaWYgKGZ4IDwgeDAgfHwgZnggPj0geDEpIHJldHVybjtcbiAgICBpZiAobHggPiByeCkge1xuICAgICAgaWYgKCF2MCkgdjAgPSBbZngsIHkwXTtcbiAgICAgIGVsc2UgaWYgKHYwWzFdID49IHkxKSByZXR1cm47XG4gICAgICB2MSA9IFtmeCwgeTFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXYwKSB2MCA9IFtmeCwgeTFdO1xuICAgICAgZWxzZSBpZiAodjBbMV0gPCB5MCkgcmV0dXJuO1xuICAgICAgdjEgPSBbZngsIHkwXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm0gPSAobHggLSByeCkgLyAocnkgLSBseSk7XG4gICAgZmIgPSBmeSAtIGZtICogZng7XG4gICAgaWYgKGZtIDwgLTEgfHwgZm0gPiAxKSB7XG4gICAgICBpZiAobHggPiByeCkge1xuICAgICAgICBpZiAoIXYwKSB2MCA9IFsoeTAgLSBmYikgLyBmbSwgeTBdO1xuICAgICAgICBlbHNlIGlmICh2MFsxXSA+PSB5MSkgcmV0dXJuO1xuICAgICAgICB2MSA9IFsoeTEgLSBmYikgLyBmbSwgeTFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbKHkxIC0gZmIpIC8gZm0sIHkxXTtcbiAgICAgICAgZWxzZSBpZiAodjBbMV0gPCB5MCkgcmV0dXJuO1xuICAgICAgICB2MSA9IFsoeTAgLSBmYikgLyBmbSwgeTBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobHkgPCByeSkge1xuICAgICAgICBpZiAoIXYwKSB2MCA9IFt4MCwgZm0gKiB4MCArIGZiXTtcbiAgICAgICAgZWxzZSBpZiAodjBbMF0gPj0geDEpIHJldHVybjtcbiAgICAgICAgdjEgPSBbeDEsIGZtICogeDEgKyBmYl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXYwKSB2MCA9IFt4MSwgZm0gKiB4MSArIGZiXTtcbiAgICAgICAgZWxzZSBpZiAodjBbMF0gPCB4MCkgcmV0dXJuO1xuICAgICAgICB2MSA9IFt4MCwgZm0gKiB4MCArIGZiXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlZGdlWzBdID0gdjA7XG4gIGVkZ2VbMV0gPSB2MTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGlwRWRnZXMoeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIGkgPSBlZGdlcy5sZW5ndGgsXG4gICAgICBlZGdlO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAoIWNvbm5lY3RFZGdlKGVkZ2UgPSBlZGdlc1tpXSwgeDAsIHkwLCB4MSwgeTEpXG4gICAgICAgIHx8ICFjbGlwRWRnZShlZGdlLCB4MCwgeTAsIHgxLCB5MSlcbiAgICAgICAgfHwgIShNYXRoLmFicyhlZGdlWzBdWzBdIC0gZWRnZVsxXVswXSkgPiBlcHNpbG9uXG4gICAgICAgICAgICB8fCBNYXRoLmFicyhlZGdlWzBdWzFdIC0gZWRnZVsxXVsxXSkgPiBlcHNpbG9uKSkge1xuICAgICAgZGVsZXRlIGVkZ2VzW2ldO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHtjcmVhdGVCb3JkZXJFZGdlfSBmcm9tIFwiLi9FZGdlXCI7XG5pbXBvcnQge2NlbGxzLCBlZGdlcywgZXBzaWxvbn0gZnJvbSBcIi4vRGlhZ3JhbVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2VsbChzaXRlKSB7XG4gIHJldHVybiBjZWxsc1tzaXRlLmluZGV4XSA9IHtcbiAgICBzaXRlOiBzaXRlLFxuICAgIGhhbGZlZGdlczogW11cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2VsbEhhbGZlZGdlQW5nbGUoY2VsbCwgZWRnZSkge1xuICB2YXIgc2l0ZSA9IGNlbGwuc2l0ZSxcbiAgICAgIHZhID0gZWRnZS5sZWZ0LFxuICAgICAgdmIgPSBlZGdlLnJpZ2h0O1xuICBpZiAoc2l0ZSA9PT0gdmIpIHZiID0gdmEsIHZhID0gc2l0ZTtcbiAgaWYgKHZiKSByZXR1cm4gTWF0aC5hdGFuMih2YlsxXSAtIHZhWzFdLCB2YlswXSAtIHZhWzBdKTtcbiAgaWYgKHNpdGUgPT09IHZhKSB2YSA9IGVkZ2VbMV0sIHZiID0gZWRnZVswXTtcbiAgZWxzZSB2YSA9IGVkZ2VbMF0sIHZiID0gZWRnZVsxXTtcbiAgcmV0dXJuIE1hdGguYXRhbjIodmFbMF0gLSB2YlswXSwgdmJbMV0gLSB2YVsxXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlKSB7XG4gIHJldHVybiBlZGdlWysoZWRnZS5sZWZ0ICE9PSBjZWxsLnNpdGUpXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNlbGxIYWxmZWRnZUVuZChjZWxsLCBlZGdlKSB7XG4gIHJldHVybiBlZGdlWysoZWRnZS5sZWZ0ID09PSBjZWxsLnNpdGUpXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRDZWxsSGFsZmVkZ2VzKCkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGNlbGxzLmxlbmd0aCwgY2VsbCwgaGFsZmVkZ2VzLCBqLCBtOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKChjZWxsID0gY2VsbHNbaV0pICYmIChtID0gKGhhbGZlZGdlcyA9IGNlbGwuaGFsZmVkZ2VzKS5sZW5ndGgpKSB7XG4gICAgICB2YXIgaW5kZXggPSBuZXcgQXJyYXkobSksXG4gICAgICAgICAgYXJyYXkgPSBuZXcgQXJyYXkobSk7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSBpbmRleFtqXSA9IGosIGFycmF5W2pdID0gY2VsbEhhbGZlZGdlQW5nbGUoY2VsbCwgZWRnZXNbaGFsZmVkZ2VzW2pdXSk7XG4gICAgICBpbmRleC5zb3J0KGZ1bmN0aW9uKGksIGopIHsgcmV0dXJuIGFycmF5W2pdIC0gYXJyYXlbaV07IH0pO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgYXJyYXlbal0gPSBoYWxmZWRnZXNbaW5kZXhbal1dO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgaGFsZmVkZ2VzW2pdID0gYXJyYXlbal07XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGlwQ2VsbHMoeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIG5DZWxscyA9IGNlbGxzLmxlbmd0aCxcbiAgICAgIGlDZWxsLFxuICAgICAgY2VsbCxcbiAgICAgIHNpdGUsXG4gICAgICBpSGFsZmVkZ2UsXG4gICAgICBoYWxmZWRnZXMsXG4gICAgICBuSGFsZmVkZ2VzLFxuICAgICAgc3RhcnQsXG4gICAgICBzdGFydFgsXG4gICAgICBzdGFydFksXG4gICAgICBlbmQsXG4gICAgICBlbmRYLFxuICAgICAgZW5kWSxcbiAgICAgIGNvdmVyID0gdHJ1ZTtcblxuICBmb3IgKGlDZWxsID0gMDsgaUNlbGwgPCBuQ2VsbHM7ICsraUNlbGwpIHtcbiAgICBpZiAoY2VsbCA9IGNlbGxzW2lDZWxsXSkge1xuICAgICAgc2l0ZSA9IGNlbGwuc2l0ZTtcbiAgICAgIGhhbGZlZGdlcyA9IGNlbGwuaGFsZmVkZ2VzO1xuICAgICAgaUhhbGZlZGdlID0gaGFsZmVkZ2VzLmxlbmd0aDtcblxuICAgICAgLy8gUmVtb3ZlIGFueSBkYW5nbGluZyBjbGlwcGVkIGVkZ2VzLlxuICAgICAgd2hpbGUgKGlIYWxmZWRnZS0tKSB7XG4gICAgICAgIGlmICghZWRnZXNbaGFsZmVkZ2VzW2lIYWxmZWRnZV1dKSB7XG4gICAgICAgICAgaGFsZmVkZ2VzLnNwbGljZShpSGFsZmVkZ2UsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEluc2VydCBhbnkgYm9yZGVyIGVkZ2VzIGFzIG5lY2Vzc2FyeS5cbiAgICAgIGlIYWxmZWRnZSA9IDAsIG5IYWxmZWRnZXMgPSBoYWxmZWRnZXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGlIYWxmZWRnZSA8IG5IYWxmZWRnZXMpIHtcbiAgICAgICAgZW5kID0gY2VsbEhhbGZlZGdlRW5kKGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1tpSGFsZmVkZ2VdXSksIGVuZFggPSBlbmRbMF0sIGVuZFkgPSBlbmRbMV07XG4gICAgICAgIHN0YXJ0ID0gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZXNbaGFsZmVkZ2VzWysraUhhbGZlZGdlICUgbkhhbGZlZGdlc11dKSwgc3RhcnRYID0gc3RhcnRbMF0sIHN0YXJ0WSA9IHN0YXJ0WzFdO1xuICAgICAgICBpZiAoTWF0aC5hYnMoZW5kWCAtIHN0YXJ0WCkgPiBlcHNpbG9uIHx8IE1hdGguYWJzKGVuZFkgLSBzdGFydFkpID4gZXBzaWxvbikge1xuICAgICAgICAgIGhhbGZlZGdlcy5zcGxpY2UoaUhhbGZlZGdlLCAwLCBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSwgZW5kLFxuICAgICAgICAgICAgICBNYXRoLmFicyhlbmRYIC0geDApIDwgZXBzaWxvbiAmJiB5MSAtIGVuZFkgPiBlcHNpbG9uID8gW3gwLCBNYXRoLmFicyhzdGFydFggLSB4MCkgPCBlcHNpbG9uID8gc3RhcnRZIDogeTFdXG4gICAgICAgICAgICAgIDogTWF0aC5hYnMoZW5kWSAtIHkxKSA8IGVwc2lsb24gJiYgeDEgLSBlbmRYID4gZXBzaWxvbiA/IFtNYXRoLmFicyhzdGFydFkgLSB5MSkgPCBlcHNpbG9uID8gc3RhcnRYIDogeDEsIHkxXVxuICAgICAgICAgICAgICA6IE1hdGguYWJzKGVuZFggLSB4MSkgPCBlcHNpbG9uICYmIGVuZFkgLSB5MCA+IGVwc2lsb24gPyBbeDEsIE1hdGguYWJzKHN0YXJ0WCAtIHgxKSA8IGVwc2lsb24gPyBzdGFydFkgOiB5MF1cbiAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRZIC0geTApIDwgZXBzaWxvbiAmJiBlbmRYIC0geDAgPiBlcHNpbG9uID8gW01hdGguYWJzKHN0YXJ0WSAtIHkwKSA8IGVwc2lsb24gPyBzdGFydFggOiB4MCwgeTBdXG4gICAgICAgICAgICAgIDogbnVsbCkpIC0gMSk7XG4gICAgICAgICAgKytuSGFsZmVkZ2VzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChuSGFsZmVkZ2VzKSBjb3ZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIHRoZXJlIHdlcmVu4oCZdCBhbnkgZWRnZXMsIGhhdmUgdGhlIGNsb3Nlc3Qgc2l0ZSBjb3ZlciB0aGUgZXh0ZW50LlxuICAvLyBJdCBkb2VzbuKAmXQgbWF0dGVyIHdoaWNoIGNvcm5lciBvZiB0aGUgZXh0ZW50IHdlIG1lYXN1cmUhXG4gIGlmIChjb3Zlcikge1xuICAgIHZhciBkeCwgZHksIGQyLCBkYyA9IEluZmluaXR5O1xuXG4gICAgZm9yIChpQ2VsbCA9IDAsIGNvdmVyID0gbnVsbDsgaUNlbGwgPCBuQ2VsbHM7ICsraUNlbGwpIHtcbiAgICAgIGlmIChjZWxsID0gY2VsbHNbaUNlbGxdKSB7XG4gICAgICAgIHNpdGUgPSBjZWxsLnNpdGU7XG4gICAgICAgIGR4ID0gc2l0ZVswXSAtIHgwO1xuICAgICAgICBkeSA9IHNpdGVbMV0gLSB5MDtcbiAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgICAgaWYgKGQyIDwgZGMpIGRjID0gZDIsIGNvdmVyID0gY2VsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY292ZXIpIHtcbiAgICAgIHZhciB2MDAgPSBbeDAsIHkwXSwgdjAxID0gW3gwLCB5MV0sIHYxMSA9IFt4MSwgeTFdLCB2MTAgPSBbeDEsIHkwXTtcbiAgICAgIGNvdmVyLmhhbGZlZGdlcy5wdXNoKFxuICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSA9IGNvdmVyLnNpdGUsIHYwMCwgdjAxKSkgLSAxLFxuICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSwgdjAxLCB2MTEpKSAtIDEsXG4gICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MTEsIHYxMCkpIC0gMSxcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIHYxMCwgdjAwKSkgLSAxXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8vIExhc3RseSBkZWxldGUgYW55IGNlbGxzIHdpdGggbm8gZWRnZXM7IHRoZXNlIHdlcmUgZW50aXJlbHkgY2xpcHBlZC5cbiAgZm9yIChpQ2VsbCA9IDA7IGlDZWxsIDwgbkNlbGxzOyArK2lDZWxsKSB7XG4gICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcbiAgICAgIGlmICghY2VsbC5oYWxmZWRnZXMubGVuZ3RoKSB7XG4gICAgICAgIGRlbGV0ZSBjZWxsc1tpQ2VsbF07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge1JlZEJsYWNrTm9kZX0gZnJvbSBcIi4vUmVkQmxhY2tUcmVlXCI7XG5pbXBvcnQge2NpcmNsZXMsIGVwc2lsb24yfSBmcm9tIFwiLi9EaWFncmFtXCI7XG5cbnZhciBjaXJjbGVQb29sID0gW107XG5cbmV4cG9ydCB2YXIgZmlyc3RDaXJjbGU7XG5cbmZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgUmVkQmxhY2tOb2RlKHRoaXMpO1xuICB0aGlzLnggPVxuICB0aGlzLnkgPVxuICB0aGlzLmFyYyA9XG4gIHRoaXMuc2l0ZSA9XG4gIHRoaXMuY3kgPSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXR0YWNoQ2lyY2xlKGFyYykge1xuICB2YXIgbEFyYyA9IGFyYy5QLFxuICAgICAgckFyYyA9IGFyYy5OO1xuXG4gIGlmICghbEFyYyB8fCAhckFyYykgcmV0dXJuO1xuXG4gIHZhciBsU2l0ZSA9IGxBcmMuc2l0ZSxcbiAgICAgIGNTaXRlID0gYXJjLnNpdGUsXG4gICAgICByU2l0ZSA9IHJBcmMuc2l0ZTtcblxuICBpZiAobFNpdGUgPT09IHJTaXRlKSByZXR1cm47XG5cbiAgdmFyIGJ4ID0gY1NpdGVbMF0sXG4gICAgICBieSA9IGNTaXRlWzFdLFxuICAgICAgYXggPSBsU2l0ZVswXSAtIGJ4LFxuICAgICAgYXkgPSBsU2l0ZVsxXSAtIGJ5LFxuICAgICAgY3ggPSByU2l0ZVswXSAtIGJ4LFxuICAgICAgY3kgPSByU2l0ZVsxXSAtIGJ5O1xuXG4gIHZhciBkID0gMiAqIChheCAqIGN5IC0gYXkgKiBjeCk7XG4gIGlmIChkID49IC1lcHNpbG9uMikgcmV0dXJuO1xuXG4gIHZhciBoYSA9IGF4ICogYXggKyBheSAqIGF5LFxuICAgICAgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSxcbiAgICAgIHggPSAoY3kgKiBoYSAtIGF5ICogaGMpIC8gZCxcbiAgICAgIHkgPSAoYXggKiBoYyAtIGN4ICogaGEpIC8gZDtcblxuICB2YXIgY2lyY2xlID0gY2lyY2xlUG9vbC5wb3AoKSB8fCBuZXcgQ2lyY2xlO1xuICBjaXJjbGUuYXJjID0gYXJjO1xuICBjaXJjbGUuc2l0ZSA9IGNTaXRlO1xuICBjaXJjbGUueCA9IHggKyBieDtcbiAgY2lyY2xlLnkgPSAoY2lyY2xlLmN5ID0geSArIGJ5KSArIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTsgLy8geSBib3R0b21cblxuICBhcmMuY2lyY2xlID0gY2lyY2xlO1xuXG4gIHZhciBiZWZvcmUgPSBudWxsLFxuICAgICAgbm9kZSA9IGNpcmNsZXMuXztcblxuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChjaXJjbGUueSA8IG5vZGUueSB8fCAoY2lyY2xlLnkgPT09IG5vZGUueSAmJiBjaXJjbGUueCA8PSBub2RlLngpKSB7XG4gICAgICBpZiAobm9kZS5MKSBub2RlID0gbm9kZS5MO1xuICAgICAgZWxzZSB7IGJlZm9yZSA9IG5vZGUuUDsgYnJlYWs7IH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5vZGUuUikgbm9kZSA9IG5vZGUuUjtcbiAgICAgIGVsc2UgeyBiZWZvcmUgPSBub2RlOyBicmVhazsgfVxuICAgIH1cbiAgfVxuXG4gIGNpcmNsZXMuaW5zZXJ0KGJlZm9yZSwgY2lyY2xlKTtcbiAgaWYgKCFiZWZvcmUpIGZpcnN0Q2lyY2xlID0gY2lyY2xlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGV0YWNoQ2lyY2xlKGFyYykge1xuICB2YXIgY2lyY2xlID0gYXJjLmNpcmNsZTtcbiAgaWYgKGNpcmNsZSkge1xuICAgIGlmICghY2lyY2xlLlApIGZpcnN0Q2lyY2xlID0gY2lyY2xlLk47XG4gICAgY2lyY2xlcy5yZW1vdmUoY2lyY2xlKTtcbiAgICBjaXJjbGVQb29sLnB1c2goY2lyY2xlKTtcbiAgICBSZWRCbGFja05vZGUoY2lyY2xlKTtcbiAgICBhcmMuY2lyY2xlID0gbnVsbDtcbiAgfVxufVxuIiwiaW1wb3J0IHtSZWRCbGFja05vZGV9IGZyb20gXCIuL1JlZEJsYWNrVHJlZVwiO1xuaW1wb3J0IHtjcmVhdGVDZWxsfSBmcm9tIFwiLi9DZWxsXCI7XG5pbXBvcnQge2F0dGFjaENpcmNsZSwgZGV0YWNoQ2lyY2xlfSBmcm9tIFwiLi9DaXJjbGVcIjtcbmltcG9ydCB7Y3JlYXRlRWRnZSwgc2V0RWRnZUVuZH0gZnJvbSBcIi4vRWRnZVwiO1xuaW1wb3J0IHtiZWFjaGVzLCBlcHNpbG9ufSBmcm9tIFwiLi9EaWFncmFtXCI7XG5cbnZhciBiZWFjaFBvb2wgPSBbXTtcblxuZnVuY3Rpb24gQmVhY2goKSB7XG4gIFJlZEJsYWNrTm9kZSh0aGlzKTtcbiAgdGhpcy5lZGdlID1cbiAgdGhpcy5zaXRlID1cbiAgdGhpcy5jaXJjbGUgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVCZWFjaChzaXRlKSB7XG4gIHZhciBiZWFjaCA9IGJlYWNoUG9vbC5wb3AoKSB8fCBuZXcgQmVhY2g7XG4gIGJlYWNoLnNpdGUgPSBzaXRlO1xuICByZXR1cm4gYmVhY2g7XG59XG5cbmZ1bmN0aW9uIGRldGFjaEJlYWNoKGJlYWNoKSB7XG4gIGRldGFjaENpcmNsZShiZWFjaCk7XG4gIGJlYWNoZXMucmVtb3ZlKGJlYWNoKTtcbiAgYmVhY2hQb29sLnB1c2goYmVhY2gpO1xuICBSZWRCbGFja05vZGUoYmVhY2gpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQmVhY2goYmVhY2gpIHtcbiAgdmFyIGNpcmNsZSA9IGJlYWNoLmNpcmNsZSxcbiAgICAgIHggPSBjaXJjbGUueCxcbiAgICAgIHkgPSBjaXJjbGUuY3ksXG4gICAgICB2ZXJ0ZXggPSBbeCwgeV0sXG4gICAgICBwcmV2aW91cyA9IGJlYWNoLlAsXG4gICAgICBuZXh0ID0gYmVhY2guTixcbiAgICAgIGRpc2FwcGVhcmluZyA9IFtiZWFjaF07XG5cbiAgZGV0YWNoQmVhY2goYmVhY2gpO1xuXG4gIHZhciBsQXJjID0gcHJldmlvdXM7XG4gIHdoaWxlIChsQXJjLmNpcmNsZVxuICAgICAgJiYgTWF0aC5hYnMoeCAtIGxBcmMuY2lyY2xlLngpIDwgZXBzaWxvblxuICAgICAgJiYgTWF0aC5hYnMoeSAtIGxBcmMuY2lyY2xlLmN5KSA8IGVwc2lsb24pIHtcbiAgICBwcmV2aW91cyA9IGxBcmMuUDtcbiAgICBkaXNhcHBlYXJpbmcudW5zaGlmdChsQXJjKTtcbiAgICBkZXRhY2hCZWFjaChsQXJjKTtcbiAgICBsQXJjID0gcHJldmlvdXM7XG4gIH1cblxuICBkaXNhcHBlYXJpbmcudW5zaGlmdChsQXJjKTtcbiAgZGV0YWNoQ2lyY2xlKGxBcmMpO1xuXG4gIHZhciByQXJjID0gbmV4dDtcbiAgd2hpbGUgKHJBcmMuY2lyY2xlXG4gICAgICAmJiBNYXRoLmFicyh4IC0gckFyYy5jaXJjbGUueCkgPCBlcHNpbG9uXG4gICAgICAmJiBNYXRoLmFicyh5IC0gckFyYy5jaXJjbGUuY3kpIDwgZXBzaWxvbikge1xuICAgIG5leHQgPSByQXJjLk47XG4gICAgZGlzYXBwZWFyaW5nLnB1c2gockFyYyk7XG4gICAgZGV0YWNoQmVhY2gockFyYyk7XG4gICAgckFyYyA9IG5leHQ7XG4gIH1cblxuICBkaXNhcHBlYXJpbmcucHVzaChyQXJjKTtcbiAgZGV0YWNoQ2lyY2xlKHJBcmMpO1xuXG4gIHZhciBuQXJjcyA9IGRpc2FwcGVhcmluZy5sZW5ndGgsXG4gICAgICBpQXJjO1xuICBmb3IgKGlBcmMgPSAxOyBpQXJjIDwgbkFyY3M7ICsraUFyYykge1xuICAgIHJBcmMgPSBkaXNhcHBlYXJpbmdbaUFyY107XG4gICAgbEFyYyA9IGRpc2FwcGVhcmluZ1tpQXJjIC0gMV07XG4gICAgc2V0RWRnZUVuZChyQXJjLmVkZ2UsIGxBcmMuc2l0ZSwgckFyYy5zaXRlLCB2ZXJ0ZXgpO1xuICB9XG5cbiAgbEFyYyA9IGRpc2FwcGVhcmluZ1swXTtcbiAgckFyYyA9IGRpc2FwcGVhcmluZ1tuQXJjcyAtIDFdO1xuICByQXJjLmVkZ2UgPSBjcmVhdGVFZGdlKGxBcmMuc2l0ZSwgckFyYy5zaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuXG4gIGF0dGFjaENpcmNsZShsQXJjKTtcbiAgYXR0YWNoQ2lyY2xlKHJBcmMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkQmVhY2goc2l0ZSkge1xuICB2YXIgeCA9IHNpdGVbMF0sXG4gICAgICBkaXJlY3RyaXggPSBzaXRlWzFdLFxuICAgICAgbEFyYyxcbiAgICAgIHJBcmMsXG4gICAgICBkeGwsXG4gICAgICBkeHIsXG4gICAgICBub2RlID0gYmVhY2hlcy5fO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgZHhsID0gbGVmdEJyZWFrUG9pbnQobm9kZSwgZGlyZWN0cml4KSAtIHg7XG4gICAgaWYgKGR4bCA+IGVwc2lsb24pIG5vZGUgPSBub2RlLkw7IGVsc2Uge1xuICAgICAgZHhyID0geCAtIHJpZ2h0QnJlYWtQb2ludChub2RlLCBkaXJlY3RyaXgpO1xuICAgICAgaWYgKGR4ciA+IGVwc2lsb24pIHtcbiAgICAgICAgaWYgKCFub2RlLlIpIHtcbiAgICAgICAgICBsQXJjID0gbm9kZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZS5SO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGR4bCA+IC1lcHNpbG9uKSB7XG4gICAgICAgICAgbEFyYyA9IG5vZGUuUDtcbiAgICAgICAgICByQXJjID0gbm9kZTtcbiAgICAgICAgfSBlbHNlIGlmIChkeHIgPiAtZXBzaWxvbikge1xuICAgICAgICAgIGxBcmMgPSBub2RlO1xuICAgICAgICAgIHJBcmMgPSBub2RlLk47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbEFyYyA9IHJBcmMgPSBub2RlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUNlbGwoc2l0ZSk7XG4gIHZhciBuZXdBcmMgPSBjcmVhdGVCZWFjaChzaXRlKTtcbiAgYmVhY2hlcy5pbnNlcnQobEFyYywgbmV3QXJjKTtcblxuICBpZiAoIWxBcmMgJiYgIXJBcmMpIHJldHVybjtcblxuICBpZiAobEFyYyA9PT0gckFyYykge1xuICAgIGRldGFjaENpcmNsZShsQXJjKTtcbiAgICByQXJjID0gY3JlYXRlQmVhY2gobEFyYy5zaXRlKTtcbiAgICBiZWFjaGVzLmluc2VydChuZXdBcmMsIHJBcmMpO1xuICAgIG5ld0FyYy5lZGdlID0gckFyYy5lZGdlID0gY3JlYXRlRWRnZShsQXJjLnNpdGUsIG5ld0FyYy5zaXRlKTtcbiAgICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gICAgYXR0YWNoQ2lyY2xlKHJBcmMpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghckFyYykgeyAvLyAmJiBsQXJjXG4gICAgbmV3QXJjLmVkZ2UgPSBjcmVhdGVFZGdlKGxBcmMuc2l0ZSwgbmV3QXJjLnNpdGUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGVsc2UgbEFyYyAhPT0gckFyY1xuICBkZXRhY2hDaXJjbGUobEFyYyk7XG4gIGRldGFjaENpcmNsZShyQXJjKTtcblxuICB2YXIgbFNpdGUgPSBsQXJjLnNpdGUsXG4gICAgICBheCA9IGxTaXRlWzBdLFxuICAgICAgYXkgPSBsU2l0ZVsxXSxcbiAgICAgIGJ4ID0gc2l0ZVswXSAtIGF4LFxuICAgICAgYnkgPSBzaXRlWzFdIC0gYXksXG4gICAgICByU2l0ZSA9IHJBcmMuc2l0ZSxcbiAgICAgIGN4ID0gclNpdGVbMF0gLSBheCxcbiAgICAgIGN5ID0gclNpdGVbMV0gLSBheSxcbiAgICAgIGQgPSAyICogKGJ4ICogY3kgLSBieSAqIGN4KSxcbiAgICAgIGhiID0gYnggKiBieCArIGJ5ICogYnksXG4gICAgICBoYyA9IGN4ICogY3ggKyBjeSAqIGN5LFxuICAgICAgdmVydGV4ID0gWyhjeSAqIGhiIC0gYnkgKiBoYykgLyBkICsgYXgsIChieCAqIGhjIC0gY3ggKiBoYikgLyBkICsgYXldO1xuXG4gIHNldEVkZ2VFbmQockFyYy5lZGdlLCBsU2l0ZSwgclNpdGUsIHZlcnRleCk7XG4gIG5ld0FyYy5lZGdlID0gY3JlYXRlRWRnZShsU2l0ZSwgc2l0ZSwgbnVsbCwgdmVydGV4KTtcbiAgckFyYy5lZGdlID0gY3JlYXRlRWRnZShzaXRlLCByU2l0ZSwgbnVsbCwgdmVydGV4KTtcbiAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xuICBhdHRhY2hDaXJjbGUockFyYyk7XG59XG5cbmZ1bmN0aW9uIGxlZnRCcmVha1BvaW50KGFyYywgZGlyZWN0cml4KSB7XG4gIHZhciBzaXRlID0gYXJjLnNpdGUsXG4gICAgICByZm9jeCA9IHNpdGVbMF0sXG4gICAgICByZm9jeSA9IHNpdGVbMV0sXG4gICAgICBwYnkyID0gcmZvY3kgLSBkaXJlY3RyaXg7XG5cbiAgaWYgKCFwYnkyKSByZXR1cm4gcmZvY3g7XG5cbiAgdmFyIGxBcmMgPSBhcmMuUDtcbiAgaWYgKCFsQXJjKSByZXR1cm4gLUluZmluaXR5O1xuXG4gIHNpdGUgPSBsQXJjLnNpdGU7XG4gIHZhciBsZm9jeCA9IHNpdGVbMF0sXG4gICAgICBsZm9jeSA9IHNpdGVbMV0sXG4gICAgICBwbGJ5MiA9IGxmb2N5IC0gZGlyZWN0cml4O1xuXG4gIGlmICghcGxieTIpIHJldHVybiBsZm9jeDtcblxuICB2YXIgaGwgPSBsZm9jeCAtIHJmb2N4LFxuICAgICAgYWJ5MiA9IDEgLyBwYnkyIC0gMSAvIHBsYnkyLFxuICAgICAgYiA9IGhsIC8gcGxieTI7XG5cbiAgaWYgKGFieTIpIHJldHVybiAoLWIgKyBNYXRoLnNxcnQoYiAqIGIgLSAyICogYWJ5MiAqIChobCAqIGhsIC8gKC0yICogcGxieTIpIC0gbGZvY3kgKyBwbGJ5MiAvIDIgKyByZm9jeSAtIHBieTIgLyAyKSkpIC8gYWJ5MiArIHJmb2N4O1xuXG4gIHJldHVybiAocmZvY3ggKyBsZm9jeCkgLyAyO1xufVxuXG5mdW5jdGlvbiByaWdodEJyZWFrUG9pbnQoYXJjLCBkaXJlY3RyaXgpIHtcbiAgdmFyIHJBcmMgPSBhcmMuTjtcbiAgaWYgKHJBcmMpIHJldHVybiBsZWZ0QnJlYWtQb2ludChyQXJjLCBkaXJlY3RyaXgpO1xuICB2YXIgc2l0ZSA9IGFyYy5zaXRlO1xuICByZXR1cm4gc2l0ZVsxXSA9PT0gZGlyZWN0cml4ID8gc2l0ZVswXSA6IEluZmluaXR5O1xufVxuIiwiaW1wb3J0IHthZGRCZWFjaCwgcmVtb3ZlQmVhY2h9IGZyb20gXCIuL0JlYWNoXCI7XG5pbXBvcnQge3NvcnRDZWxsSGFsZmVkZ2VzLCBjZWxsSGFsZmVkZ2VTdGFydCwgY2xpcENlbGxzfSBmcm9tIFwiLi9DZWxsXCI7XG5pbXBvcnQge2ZpcnN0Q2lyY2xlfSBmcm9tIFwiLi9DaXJjbGVcIjtcbmltcG9ydCB7Y2xpcEVkZ2VzfSBmcm9tIFwiLi9FZGdlXCI7XG5pbXBvcnQgUmVkQmxhY2tUcmVlIGZyb20gXCIuL1JlZEJsYWNrVHJlZVwiO1xuXG5leHBvcnQgdmFyIGVwc2lsb24gPSAxZS02O1xuZXhwb3J0IHZhciBlcHNpbG9uMiA9IDFlLTEyO1xuZXhwb3J0IHZhciBiZWFjaGVzO1xuZXhwb3J0IHZhciBjZWxscztcbmV4cG9ydCB2YXIgY2lyY2xlcztcbmV4cG9ydCB2YXIgZWRnZXM7XG5cbmZ1bmN0aW9uIHRyaWFuZ2xlQXJlYShhLCBiLCBjKSB7XG4gIHJldHVybiAoYVswXSAtIGNbMF0pICogKGJbMV0gLSBhWzFdKSAtIChhWzBdIC0gYlswXSkgKiAoY1sxXSAtIGFbMV0pO1xufVxuXG5mdW5jdGlvbiBsZXhpY29ncmFwaGljKGEsIGIpIHtcbiAgcmV0dXJuIGJbMV0gLSBhWzFdXG4gICAgICB8fCBiWzBdIC0gYVswXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRGlhZ3JhbShzaXRlcywgZXh0ZW50KSB7XG4gIHZhciBzaXRlID0gc2l0ZXMuc29ydChsZXhpY29ncmFwaGljKS5wb3AoKSxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgY2lyY2xlO1xuXG4gIGVkZ2VzID0gW107XG4gIGNlbGxzID0gbmV3IEFycmF5KHNpdGVzLmxlbmd0aCk7XG4gIGJlYWNoZXMgPSBuZXcgUmVkQmxhY2tUcmVlO1xuICBjaXJjbGVzID0gbmV3IFJlZEJsYWNrVHJlZTtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNpcmNsZSA9IGZpcnN0Q2lyY2xlO1xuICAgIGlmIChzaXRlICYmICghY2lyY2xlIHx8IHNpdGVbMV0gPCBjaXJjbGUueSB8fCAoc2l0ZVsxXSA9PT0gY2lyY2xlLnkgJiYgc2l0ZVswXSA8IGNpcmNsZS54KSkpIHtcbiAgICAgIGlmIChzaXRlWzBdICE9PSB4IHx8IHNpdGVbMV0gIT09IHkpIHtcbiAgICAgICAgYWRkQmVhY2goc2l0ZSk7XG4gICAgICAgIHggPSBzaXRlWzBdLCB5ID0gc2l0ZVsxXTtcbiAgICAgIH1cbiAgICAgIHNpdGUgPSBzaXRlcy5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKGNpcmNsZSkge1xuICAgICAgcmVtb3ZlQmVhY2goY2lyY2xlLmFyYyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHNvcnRDZWxsSGFsZmVkZ2VzKCk7XG5cbiAgaWYgKGV4dGVudCkge1xuICAgIHZhciB4MCA9ICtleHRlbnRbMF1bMF0sXG4gICAgICAgIHkwID0gK2V4dGVudFswXVsxXSxcbiAgICAgICAgeDEgPSArZXh0ZW50WzFdWzBdLFxuICAgICAgICB5MSA9ICtleHRlbnRbMV1bMV07XG4gICAgY2xpcEVkZ2VzKHgwLCB5MCwgeDEsIHkxKTtcbiAgICBjbGlwQ2VsbHMoeDAsIHkwLCB4MSwgeTEpO1xuICB9XG5cbiAgdGhpcy5lZGdlcyA9IGVkZ2VzO1xuICB0aGlzLmNlbGxzID0gY2VsbHM7XG5cbiAgYmVhY2hlcyA9XG4gIGNpcmNsZXMgPVxuICBlZGdlcyA9XG4gIGNlbGxzID0gbnVsbDtcbn1cblxuRGlhZ3JhbS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBEaWFncmFtLFxuXG4gIHBvbHlnb25zOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZWRnZXMgPSB0aGlzLmVkZ2VzO1xuXG4gICAgcmV0dXJuIHRoaXMuY2VsbHMubWFwKGZ1bmN0aW9uKGNlbGwpIHtcbiAgICAgIHZhciBwb2x5Z29uID0gY2VsbC5oYWxmZWRnZXMubWFwKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIGNlbGxIYWxmZWRnZVN0YXJ0KGNlbGwsIGVkZ2VzW2ldKTsgfSk7XG4gICAgICBwb2x5Z29uLmRhdGEgPSBjZWxsLnNpdGUuZGF0YTtcbiAgICAgIHJldHVybiBwb2x5Z29uO1xuICAgIH0pO1xuICB9LFxuXG4gIHRyaWFuZ2xlczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRyaWFuZ2xlcyA9IFtdLFxuICAgICAgICBlZGdlcyA9IHRoaXMuZWRnZXM7XG5cbiAgICB0aGlzLmNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCwgaSkge1xuICAgICAgaWYgKCEobSA9IChoYWxmZWRnZXMgPSBjZWxsLmhhbGZlZGdlcykubGVuZ3RoKSkgcmV0dXJuO1xuICAgICAgdmFyIHNpdGUgPSBjZWxsLnNpdGUsXG4gICAgICAgICAgaGFsZmVkZ2VzLFxuICAgICAgICAgIGogPSAtMSxcbiAgICAgICAgICBtLFxuICAgICAgICAgIHMwLFxuICAgICAgICAgIGUxID0gZWRnZXNbaGFsZmVkZ2VzW20gLSAxXV0sXG4gICAgICAgICAgczEgPSBlMS5sZWZ0ID09PSBzaXRlID8gZTEucmlnaHQgOiBlMS5sZWZ0O1xuXG4gICAgICB3aGlsZSAoKytqIDwgbSkge1xuICAgICAgICBzMCA9IHMxO1xuICAgICAgICBlMSA9IGVkZ2VzW2hhbGZlZGdlc1tqXV07XG4gICAgICAgIHMxID0gZTEubGVmdCA9PT0gc2l0ZSA/IGUxLnJpZ2h0IDogZTEubGVmdDtcbiAgICAgICAgaWYgKHMwICYmIHMxICYmIGkgPCBzMC5pbmRleCAmJiBpIDwgczEuaW5kZXggJiYgdHJpYW5nbGVBcmVhKHNpdGUsIHMwLCBzMSkgPCAwKSB7XG4gICAgICAgICAgdHJpYW5nbGVzLnB1c2goW3NpdGUuZGF0YSwgczAuZGF0YSwgczEuZGF0YV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdHJpYW5nbGVzO1xuICB9LFxuXG4gIGxpbmtzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5lZGdlcy5maWx0ZXIoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgcmV0dXJuIGVkZ2UucmlnaHQ7XG4gICAgfSkubWFwKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZTogZWRnZS5sZWZ0LmRhdGEsXG4gICAgICAgIHRhcmdldDogZWRnZS5yaWdodC5kYXRhXG4gICAgICB9O1xuICAgIH0pO1xuICB9LFxuXG4gIGZpbmQ6IGZ1bmN0aW9uKHgsIHksIHJhZGl1cykge1xuICAgIHZhciB0aGF0ID0gdGhpcywgaTAsIGkxID0gdGhhdC5fZm91bmQgfHwgMCwgbiA9IHRoYXQuY2VsbHMubGVuZ3RoLCBjZWxsO1xuXG4gICAgLy8gVXNlIHRoZSBwcmV2aW91c2x5LWZvdW5kIGNlbGwsIG9yIHN0YXJ0IHdpdGggYW4gYXJiaXRyYXJ5IG9uZS5cbiAgICB3aGlsZSAoIShjZWxsID0gdGhhdC5jZWxsc1tpMV0pKSBpZiAoKytpMSA+PSBuKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgZHggPSB4IC0gY2VsbC5zaXRlWzBdLCBkeSA9IHkgLSBjZWxsLnNpdGVbMV0sIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG5cbiAgICAvLyBUcmF2ZXJzZSB0aGUgaGFsZi1lZGdlcyB0byBmaW5kIGEgY2xvc2VyIGNlbGwsIGlmIGFueS5cbiAgICBkbyB7XG4gICAgICBjZWxsID0gdGhhdC5jZWxsc1tpMCA9IGkxXSwgaTEgPSBudWxsO1xuICAgICAgY2VsbC5oYWxmZWRnZXMuZm9yRWFjaChmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBlZGdlID0gdGhhdC5lZGdlc1tlXSwgdiA9IGVkZ2UubGVmdDtcbiAgICAgICAgaWYgKCh2ID09PSBjZWxsLnNpdGUgfHwgIXYpICYmICEodiA9IGVkZ2UucmlnaHQpKSByZXR1cm47XG4gICAgICAgIHZhciB2eCA9IHggLSB2WzBdLCB2eSA9IHkgLSB2WzFdLCB2MiA9IHZ4ICogdnggKyB2eSAqIHZ5O1xuICAgICAgICBpZiAodjIgPCBkMikgZDIgPSB2MiwgaTEgPSB2LmluZGV4O1xuICAgICAgfSk7XG4gICAgfSB3aGlsZSAoaTEgIT09IG51bGwpO1xuXG4gICAgdGhhdC5fZm91bmQgPSBpMDtcblxuICAgIHJldHVybiByYWRpdXMgPT0gbnVsbCB8fCBkMiA8PSByYWRpdXMgKiByYWRpdXMgPyBjZWxsLnNpdGUgOiBudWxsO1xuICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gVHJhbnNmb3JtKGssIHgsIHkpIHtcbiAgdGhpcy5rID0gaztcbiAgdGhpcy54ID0geDtcbiAgdGhpcy55ID0geTtcbn1cblxuVHJhbnNmb3JtLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRyYW5zZm9ybSxcbiAgc2NhbGU6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gayA9PT0gMSA/IHRoaXMgOiBuZXcgVHJhbnNmb3JtKHRoaXMuayAqIGssIHRoaXMueCwgdGhpcy55KTtcbiAgfSxcbiAgdHJhbnNsYXRlOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIHggPT09IDAgJiB5ID09PSAwID8gdGhpcyA6IG5ldyBUcmFuc2Zvcm0odGhpcy5rLCB0aGlzLnggKyB0aGlzLmsgKiB4LCB0aGlzLnkgKyB0aGlzLmsgKiB5KTtcbiAgfSxcbiAgYXBwbHk6IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIFtwb2ludFswXSAqIHRoaXMuayArIHRoaXMueCwgcG9pbnRbMV0gKiB0aGlzLmsgKyB0aGlzLnldO1xuICB9LFxuICBhcHBseVg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geCAqIHRoaXMuayArIHRoaXMueDtcbiAgfSxcbiAgYXBwbHlZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIHkgKiB0aGlzLmsgKyB0aGlzLnk7XG4gIH0sXG4gIGludmVydDogZnVuY3Rpb24obG9jYXRpb24pIHtcbiAgICByZXR1cm4gWyhsb2NhdGlvblswXSAtIHRoaXMueCkgLyB0aGlzLmssIChsb2NhdGlvblsxXSAtIHRoaXMueSkgLyB0aGlzLmtdO1xuICB9LFxuICBpbnZlcnRYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuICh4IC0gdGhpcy54KSAvIHRoaXMuaztcbiAgfSxcbiAgaW52ZXJ0WTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiAoeSAtIHRoaXMueSkgLyB0aGlzLms7XG4gIH0sXG4gIHJlc2NhbGVYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHguY29weSgpLmRvbWFpbih4LnJhbmdlKCkubWFwKHRoaXMuaW52ZXJ0WCwgdGhpcykubWFwKHguaW52ZXJ0LCB4KSk7XG4gIH0sXG4gIHJlc2NhbGVZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIHkuY29weSgpLmRvbWFpbih5LnJhbmdlKCkubWFwKHRoaXMuaW52ZXJ0WSwgdGhpcykubWFwKHkuaW52ZXJ0LCB5KSk7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLnggKyBcIixcIiArIHRoaXMueSArIFwiKSBzY2FsZShcIiArIHRoaXMuayArIFwiKVwiO1xuICB9XG59O1xuXG5leHBvcnQgdmFyIGlkZW50aXR5ID0gbmV3IFRyYW5zZm9ybSgxLCAwLCAwKTtcblxudHJhbnNmb3JtLnByb3RvdHlwZSA9IFRyYW5zZm9ybS5wcm90b3R5cGU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zZm9ybShub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX3pvb20pIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHJldHVybiBub2RlLl9fem9vbTtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtkcmFnRGlzYWJsZSwgZHJhZ0VuYWJsZX0gZnJvbSBcImQzLWRyYWdcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVab29tfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7ZXZlbnQsIGN1c3RvbUV2ZW50LCBzZWxlY3QsIG1vdXNlLCB0b3VjaH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtpbnRlcnJ1cHR9IGZyb20gXCJkMy10cmFuc2l0aW9uXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBab29tRXZlbnQgZnJvbSBcIi4vZXZlbnQuanNcIjtcbmltcG9ydCB7VHJhbnNmb3JtLCBpZGVudGl0eX0gZnJvbSBcIi4vdHJhbnNmb3JtLmpzXCI7XG5pbXBvcnQgbm9ldmVudCwge25vcHJvcGFnYXRpb259IGZyb20gXCIuL25vZXZlbnQuanNcIjtcblxuLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyKCkge1xuICByZXR1cm4gIWV2ZW50LmN0cmxLZXkgJiYgIWV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEV4dGVudCgpIHtcbiAgdmFyIGUgPSB0aGlzO1xuICBpZiAoZSBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpIHtcbiAgICBlID0gZS5vd25lclNWR0VsZW1lbnQgfHwgZTtcbiAgICBpZiAoZS5oYXNBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIpKSB7XG4gICAgICBlID0gZS52aWV3Qm94LmJhc2VWYWw7XG4gICAgICByZXR1cm4gW1tlLngsIGUueV0sIFtlLnggKyBlLndpZHRoLCBlLnkgKyBlLmhlaWdodF1dO1xuICAgIH1cbiAgICByZXR1cm4gW1swLCAwXSwgW2Uud2lkdGguYmFzZVZhbC52YWx1ZSwgZS5oZWlnaHQuYmFzZVZhbC52YWx1ZV1dO1xuICB9XG4gIHJldHVybiBbWzAsIDBdLCBbZS5jbGllbnRXaWR0aCwgZS5jbGllbnRIZWlnaHRdXTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRyYW5zZm9ybSgpIHtcbiAgcmV0dXJuIHRoaXMuX196b29tIHx8IGlkZW50aXR5O1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0V2hlZWxEZWx0YSgpIHtcbiAgcmV0dXJuIC1ldmVudC5kZWx0YVkgKiAoZXZlbnQuZGVsdGFNb2RlID09PSAxID8gMC4wNSA6IGV2ZW50LmRlbHRhTW9kZSA/IDEgOiAwLjAwMik7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcyk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb25zdHJhaW4odHJhbnNmb3JtLCBleHRlbnQsIHRyYW5zbGF0ZUV4dGVudCkge1xuICB2YXIgZHgwID0gdHJhbnNmb3JtLmludmVydFgoZXh0ZW50WzBdWzBdKSAtIHRyYW5zbGF0ZUV4dGVudFswXVswXSxcbiAgICAgIGR4MSA9IHRyYW5zZm9ybS5pbnZlcnRYKGV4dGVudFsxXVswXSkgLSB0cmFuc2xhdGVFeHRlbnRbMV1bMF0sXG4gICAgICBkeTAgPSB0cmFuc2Zvcm0uaW52ZXJ0WShleHRlbnRbMF1bMV0pIC0gdHJhbnNsYXRlRXh0ZW50WzBdWzFdLFxuICAgICAgZHkxID0gdHJhbnNmb3JtLmludmVydFkoZXh0ZW50WzFdWzFdKSAtIHRyYW5zbGF0ZUV4dGVudFsxXVsxXTtcbiAgcmV0dXJuIHRyYW5zZm9ybS50cmFuc2xhdGUoXG4gICAgZHgxID4gZHgwID8gKGR4MCArIGR4MSkgLyAyIDogTWF0aC5taW4oMCwgZHgwKSB8fCBNYXRoLm1heCgwLCBkeDEpLFxuICAgIGR5MSA+IGR5MCA/IChkeTAgKyBkeTEpIC8gMiA6IE1hdGgubWluKDAsIGR5MCkgfHwgTWF0aC5tYXgoMCwgZHkxKVxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICBleHRlbnQgPSBkZWZhdWx0RXh0ZW50LFxuICAgICAgY29uc3RyYWluID0gZGVmYXVsdENvbnN0cmFpbixcbiAgICAgIHdoZWVsRGVsdGEgPSBkZWZhdWx0V2hlZWxEZWx0YSxcbiAgICAgIHRvdWNoYWJsZSA9IGRlZmF1bHRUb3VjaGFibGUsXG4gICAgICBzY2FsZUV4dGVudCA9IFswLCBJbmZpbml0eV0sXG4gICAgICB0cmFuc2xhdGVFeHRlbnQgPSBbWy1JbmZpbml0eSwgLUluZmluaXR5XSwgW0luZmluaXR5LCBJbmZpbml0eV1dLFxuICAgICAgZHVyYXRpb24gPSAyNTAsXG4gICAgICBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlWm9vbSxcbiAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJ6b29tXCIsIFwiZW5kXCIpLFxuICAgICAgdG91Y2hzdGFydGluZyxcbiAgICAgIHRvdWNoZW5kaW5nLFxuICAgICAgdG91Y2hEZWxheSA9IDUwMCxcbiAgICAgIHdoZWVsRGVsYXkgPSAxNTAsXG4gICAgICBjbGlja0Rpc3RhbmNlMiA9IDA7XG5cbiAgZnVuY3Rpb24gem9vbShzZWxlY3Rpb24pIHtcbiAgICBzZWxlY3Rpb25cbiAgICAgICAgLnByb3BlcnR5KFwiX196b29tXCIsIGRlZmF1bHRUcmFuc2Zvcm0pXG4gICAgICAgIC5vbihcIndoZWVsLnpvb21cIiwgd2hlZWxlZClcbiAgICAgICAgLm9uKFwibW91c2Vkb3duLnpvb21cIiwgbW91c2Vkb3duZWQpXG4gICAgICAgIC5vbihcImRibGNsaWNrLnpvb21cIiwgZGJsY2xpY2tlZClcbiAgICAgIC5maWx0ZXIodG91Y2hhYmxlKVxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0Lnpvb21cIiwgdG91Y2hzdGFydGVkKVxuICAgICAgICAub24oXCJ0b3VjaG1vdmUuem9vbVwiLCB0b3VjaG1vdmVkKVxuICAgICAgICAub24oXCJ0b3VjaGVuZC56b29tIHRvdWNoY2FuY2VsLnpvb21cIiwgdG91Y2hlbmRlZClcbiAgICAgICAgLnN0eWxlKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpO1xuICB9XG5cbiAgem9vbS50cmFuc2Zvcm0gPSBmdW5jdGlvbihjb2xsZWN0aW9uLCB0cmFuc2Zvcm0sIHBvaW50KSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IGNvbGxlY3Rpb24uc2VsZWN0aW9uID8gY29sbGVjdGlvbi5zZWxlY3Rpb24oKSA6IGNvbGxlY3Rpb247XG4gICAgc2VsZWN0aW9uLnByb3BlcnR5KFwiX196b29tXCIsIGRlZmF1bHRUcmFuc2Zvcm0pO1xuICAgIGlmIChjb2xsZWN0aW9uICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgIHNjaGVkdWxlKGNvbGxlY3Rpb24sIHRyYW5zZm9ybSwgcG9pbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3Rpb24uaW50ZXJydXB0KCkuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgICAgICAuc3RhcnQoKVxuICAgICAgICAgICAgLnpvb20obnVsbCwgdHlwZW9mIHRyYW5zZm9ybSA9PT0gXCJmdW5jdGlvblwiID8gdHJhbnNmb3JtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB0cmFuc2Zvcm0pXG4gICAgICAgICAgICAuZW5kKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgem9vbS5zY2FsZUJ5ID0gZnVuY3Rpb24oc2VsZWN0aW9uLCBrLCBwKSB7XG4gICAgem9vbS5zY2FsZVRvKHNlbGVjdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgazAgPSB0aGlzLl9fem9vbS5rLFxuICAgICAgICAgIGsxID0gdHlwZW9mIGsgPT09IFwiZnVuY3Rpb25cIiA/IGsuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGs7XG4gICAgICByZXR1cm4gazAgKiBrMTtcbiAgICB9LCBwKTtcbiAgfTtcblxuICB6b29tLnNjYWxlVG8gPSBmdW5jdGlvbihzZWxlY3Rpb24sIGssIHApIHtcbiAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGUgPSBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICB0MCA9IHRoaXMuX196b29tLFxuICAgICAgICAgIHAwID0gcCA9PSBudWxsID8gY2VudHJvaWQoZSkgOiB0eXBlb2YgcCA9PT0gXCJmdW5jdGlvblwiID8gcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogcCxcbiAgICAgICAgICBwMSA9IHQwLmludmVydChwMCksXG4gICAgICAgICAgazEgPSB0eXBlb2YgayA9PT0gXCJmdW5jdGlvblwiID8gay5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogaztcbiAgICAgIHJldHVybiBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQwLCBrMSksIHAwLCBwMSksIGUsIHRyYW5zbGF0ZUV4dGVudCk7XG4gICAgfSwgcCk7XG4gIH07XG5cbiAgem9vbS50cmFuc2xhdGVCeSA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgeCwgeSkge1xuICAgIHpvb20udHJhbnNmb3JtKHNlbGVjdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gY29uc3RyYWluKHRoaXMuX196b29tLnRyYW5zbGF0ZShcbiAgICAgICAgdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHguYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHgsXG4gICAgICAgIHR5cGVvZiB5ID09PSBcImZ1bmN0aW9uXCIgPyB5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB5XG4gICAgICApLCBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdHJhbnNsYXRlRXh0ZW50KTtcbiAgICB9KTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZVRvID0gZnVuY3Rpb24oc2VsZWN0aW9uLCB4LCB5LCBwKSB7XG4gICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlID0gZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdCA9IHRoaXMuX196b29tLFxuICAgICAgICAgIHAwID0gcCA9PSBudWxsID8gY2VudHJvaWQoZSkgOiB0eXBlb2YgcCA9PT0gXCJmdW5jdGlvblwiID8gcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogcDtcbiAgICAgIHJldHVybiBjb25zdHJhaW4oaWRlbnRpdHkudHJhbnNsYXRlKHAwWzBdLCBwMFsxXSkuc2NhbGUodC5rKS50cmFuc2xhdGUoXG4gICAgICAgIHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyAteC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogLXgsXG4gICAgICAgIHR5cGVvZiB5ID09PSBcImZ1bmN0aW9uXCIgPyAteS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogLXlcbiAgICAgICksIGUsIHRyYW5zbGF0ZUV4dGVudCk7XG4gICAgfSwgcCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc2NhbGUodHJhbnNmb3JtLCBrKSB7XG4gICAgayA9IE1hdGgubWF4KHNjYWxlRXh0ZW50WzBdLCBNYXRoLm1pbihzY2FsZUV4dGVudFsxXSwgaykpO1xuICAgIHJldHVybiBrID09PSB0cmFuc2Zvcm0uayA/IHRyYW5zZm9ybSA6IG5ldyBUcmFuc2Zvcm0oaywgdHJhbnNmb3JtLngsIHRyYW5zZm9ybS55KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh0cmFuc2Zvcm0sIHAwLCBwMSkge1xuICAgIHZhciB4ID0gcDBbMF0gLSBwMVswXSAqIHRyYW5zZm9ybS5rLCB5ID0gcDBbMV0gLSBwMVsxXSAqIHRyYW5zZm9ybS5rO1xuICAgIHJldHVybiB4ID09PSB0cmFuc2Zvcm0ueCAmJiB5ID09PSB0cmFuc2Zvcm0ueSA/IHRyYW5zZm9ybSA6IG5ldyBUcmFuc2Zvcm0odHJhbnNmb3JtLmssIHgsIHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWQoZXh0ZW50KSB7XG4gICAgcmV0dXJuIFsoK2V4dGVudFswXVswXSArICtleHRlbnRbMV1bMF0pIC8gMiwgKCtleHRlbnRbMF1bMV0gKyArZXh0ZW50WzFdWzFdKSAvIDJdO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUodHJhbnNpdGlvbiwgdHJhbnNmb3JtLCBwb2ludCkge1xuICAgIHRyYW5zaXRpb25cbiAgICAgICAgLm9uKFwic3RhcnQuem9vbVwiLCBmdW5jdGlvbigpIHsgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLnN0YXJ0KCk7IH0pXG4gICAgICAgIC5vbihcImludGVycnVwdC56b29tIGVuZC56b29tXCIsIGZ1bmN0aW9uKCkgeyBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cykuZW5kKCk7IH0pXG4gICAgICAgIC50d2VlbihcInpvb21cIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICBnID0gZ2VzdHVyZSh0aGF0LCBhcmdzKSxcbiAgICAgICAgICAgICAgZSA9IGV4dGVudC5hcHBseSh0aGF0LCBhcmdzKSxcbiAgICAgICAgICAgICAgcCA9IHBvaW50ID09IG51bGwgPyBjZW50cm9pZChlKSA6IHR5cGVvZiBwb2ludCA9PT0gXCJmdW5jdGlvblwiID8gcG9pbnQuYXBwbHkodGhhdCwgYXJncykgOiBwb2ludCxcbiAgICAgICAgICAgICAgdyA9IE1hdGgubWF4KGVbMV1bMF0gLSBlWzBdWzBdLCBlWzFdWzFdIC0gZVswXVsxXSksXG4gICAgICAgICAgICAgIGEgPSB0aGF0Ll9fem9vbSxcbiAgICAgICAgICAgICAgYiA9IHR5cGVvZiB0cmFuc2Zvcm0gPT09IFwiZnVuY3Rpb25cIiA/IHRyYW5zZm9ybS5hcHBseSh0aGF0LCBhcmdzKSA6IHRyYW5zZm9ybSxcbiAgICAgICAgICAgICAgaSA9IGludGVycG9sYXRlKGEuaW52ZXJ0KHApLmNvbmNhdCh3IC8gYS5rKSwgYi5pbnZlcnQocCkuY29uY2F0KHcgLyBiLmspKTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgaWYgKHQgPT09IDEpIHQgPSBiOyAvLyBBdm9pZCByb3VuZGluZyBlcnJvciBvbiBlbmQuXG4gICAgICAgICAgICBlbHNlIHsgdmFyIGwgPSBpKHQpLCBrID0gdyAvIGxbMl07IHQgPSBuZXcgVHJhbnNmb3JtKGssIHBbMF0gLSBsWzBdICogaywgcFsxXSAtIGxbMV0gKiBrKTsgfVxuICAgICAgICAgICAgZy56b29tKG51bGwsIHQpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VzdHVyZSh0aGF0LCBhcmdzLCBjbGVhbikge1xuICAgIHJldHVybiAoIWNsZWFuICYmIHRoYXQuX196b29taW5nKSB8fCBuZXcgR2VzdHVyZSh0aGF0LCBhcmdzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEdlc3R1cmUodGhhdCwgYXJncykge1xuICAgIHRoaXMudGhhdCA9IHRoYXQ7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gICAgdGhpcy5leHRlbnQgPSBleHRlbnQuYXBwbHkodGhhdCwgYXJncyk7XG4gICAgdGhpcy50YXBzID0gMDtcbiAgfVxuXG4gIEdlc3R1cmUucHJvdG90eXBlID0ge1xuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgrK3RoaXMuYWN0aXZlID09PSAxKSB7XG4gICAgICAgIHRoaXMudGhhdC5fX3pvb21pbmcgPSB0aGlzO1xuICAgICAgICB0aGlzLmVtaXQoXCJzdGFydFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgem9vbTogZnVuY3Rpb24oa2V5LCB0cmFuc2Zvcm0pIHtcbiAgICAgIGlmICh0aGlzLm1vdXNlICYmIGtleSAhPT0gXCJtb3VzZVwiKSB0aGlzLm1vdXNlWzFdID0gdHJhbnNmb3JtLmludmVydCh0aGlzLm1vdXNlWzBdKTtcbiAgICAgIGlmICh0aGlzLnRvdWNoMCAmJiBrZXkgIT09IFwidG91Y2hcIikgdGhpcy50b3VjaDBbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMudG91Y2gwWzBdKTtcbiAgICAgIGlmICh0aGlzLnRvdWNoMSAmJiBrZXkgIT09IFwidG91Y2hcIikgdGhpcy50b3VjaDFbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMudG91Y2gxWzBdKTtcbiAgICAgIHRoaXMudGhhdC5fX3pvb20gPSB0cmFuc2Zvcm07XG4gICAgICB0aGlzLmVtaXQoXCJ6b29tXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGhpcy5hY3RpdmUgPT09IDApIHtcbiAgICAgICAgZGVsZXRlIHRoaXMudGhhdC5fX3pvb21pbmc7XG4gICAgICAgIHRoaXMuZW1pdChcImVuZFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW1pdDogZnVuY3Rpb24odHlwZSkge1xuICAgICAgY3VzdG9tRXZlbnQobmV3IFpvb21FdmVudCh6b29tLCB0eXBlLCB0aGlzLnRoYXQuX196b29tKSwgbGlzdGVuZXJzLmFwcGx5LCBsaXN0ZW5lcnMsIFt0eXBlLCB0aGlzLnRoYXQsIHRoaXMuYXJnc10pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiB3aGVlbGVkKCkge1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgdCA9IHRoaXMuX196b29tLFxuICAgICAgICBrID0gTWF0aC5tYXgoc2NhbGVFeHRlbnRbMF0sIE1hdGgubWluKHNjYWxlRXh0ZW50WzFdLCB0LmsgKiBNYXRoLnBvdygyLCB3aGVlbERlbHRhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpKSksXG4gICAgICAgIHAgPSBtb3VzZSh0aGlzKTtcblxuICAgIC8vIElmIHRoZSBtb3VzZSBpcyBpbiB0aGUgc2FtZSBsb2NhdGlvbiBhcyBiZWZvcmUsIHJldXNlIGl0LlxuICAgIC8vIElmIHRoZXJlIHdlcmUgcmVjZW50IHdoZWVsIGV2ZW50cywgcmVzZXQgdGhlIHdoZWVsIGlkbGUgdGltZW91dC5cbiAgICBpZiAoZy53aGVlbCkge1xuICAgICAgaWYgKGcubW91c2VbMF1bMF0gIT09IHBbMF0gfHwgZy5tb3VzZVswXVsxXSAhPT0gcFsxXSkge1xuICAgICAgICBnLm1vdXNlWzFdID0gdC5pbnZlcnQoZy5tb3VzZVswXSA9IHApO1xuICAgICAgfVxuICAgICAgY2xlYXJUaW1lb3V0KGcud2hlZWwpO1xuICAgIH1cblxuICAgIC8vIElmIHRoaXMgd2hlZWwgZXZlbnQgd29u4oCZdCB0cmlnZ2VyIGEgdHJhbnNmb3JtIGNoYW5nZSwgaWdub3JlIGl0LlxuICAgIGVsc2UgaWYgKHQuayA9PT0gaykgcmV0dXJuO1xuXG4gICAgLy8gT3RoZXJ3aXNlLCBjYXB0dXJlIHRoZSBtb3VzZSBwb2ludCBhbmQgbG9jYXRpb24gYXQgdGhlIHN0YXJ0LlxuICAgIGVsc2Uge1xuICAgICAgZy5tb3VzZSA9IFtwLCB0LmludmVydChwKV07XG4gICAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgICBnLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgbm9ldmVudCgpO1xuICAgIGcud2hlZWwgPSBzZXRUaW1lb3V0KHdoZWVsaWRsZWQsIHdoZWVsRGVsYXkpO1xuICAgIGcuem9vbShcIm1vdXNlXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodCwgayksIGcubW91c2VbMF0sIGcubW91c2VbMV0pLCBnLmV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSk7XG5cbiAgICBmdW5jdGlvbiB3aGVlbGlkbGVkKCkge1xuICAgICAgZy53aGVlbCA9IG51bGw7XG4gICAgICBnLmVuZCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlZG93bmVkKCkge1xuICAgIGlmICh0b3VjaGVuZGluZyB8fCAhZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzLCB0cnVlKSxcbiAgICAgICAgdiA9IHNlbGVjdChldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS56b29tXCIsIG1vdXNlbW92ZWQsIHRydWUpLm9uKFwibW91c2V1cC56b29tXCIsIG1vdXNldXBwZWQsIHRydWUpLFxuICAgICAgICBwID0gbW91c2UodGhpcyksXG4gICAgICAgIHgwID0gZXZlbnQuY2xpZW50WCxcbiAgICAgICAgeTAgPSBldmVudC5jbGllbnRZO1xuXG4gICAgZHJhZ0Rpc2FibGUoZXZlbnQudmlldyk7XG4gICAgbm9wcm9wYWdhdGlvbigpO1xuICAgIGcubW91c2UgPSBbcCwgdGhpcy5fX3pvb20uaW52ZXJ0KHApXTtcbiAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgZy5zdGFydCgpO1xuXG4gICAgZnVuY3Rpb24gbW91c2Vtb3ZlZCgpIHtcbiAgICAgIG5vZXZlbnQoKTtcbiAgICAgIGlmICghZy5tb3ZlZCkge1xuICAgICAgICB2YXIgZHggPSBldmVudC5jbGllbnRYIC0geDAsIGR5ID0gZXZlbnQuY2xpZW50WSAtIHkwO1xuICAgICAgICBnLm1vdmVkID0gZHggKiBkeCArIGR5ICogZHkgPiBjbGlja0Rpc3RhbmNlMjtcbiAgICAgIH1cbiAgICAgIGcuem9vbShcIm1vdXNlXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUoZy50aGF0Ll9fem9vbSwgZy5tb3VzZVswXSA9IG1vdXNlKGcudGhhdCksIGcubW91c2VbMV0pLCBnLmV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW91c2V1cHBlZCgpIHtcbiAgICAgIHYub24oXCJtb3VzZW1vdmUuem9vbSBtb3VzZXVwLnpvb21cIiwgbnVsbCk7XG4gICAgICBkcmFnRW5hYmxlKGV2ZW50LnZpZXcsIGcubW92ZWQpO1xuICAgICAgbm9ldmVudCgpO1xuICAgICAgZy5lbmQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkYmxjbGlja2VkKCkge1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgdDAgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgcDAgPSBtb3VzZSh0aGlzKSxcbiAgICAgICAgcDEgPSB0MC5pbnZlcnQocDApLFxuICAgICAgICBrMSA9IHQwLmsgKiAoZXZlbnQuc2hpZnRLZXkgPyAwLjUgOiAyKSxcbiAgICAgICAgdDEgPSBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQwLCBrMSksIHAwLCBwMSksIGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0cmFuc2xhdGVFeHRlbnQpO1xuXG4gICAgbm9ldmVudCgpO1xuICAgIGlmIChkdXJhdGlvbiA+IDApIHNlbGVjdCh0aGlzKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oZHVyYXRpb24pLmNhbGwoc2NoZWR1bGUsIHQxLCBwMCk7XG4gICAgZWxzZSBzZWxlY3QodGhpcykuY2FsbCh6b29tLnRyYW5zZm9ybSwgdDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hzdGFydGVkKCkge1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LnRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCxcbiAgICAgICAgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzLCBldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPT09IG4pLFxuICAgICAgICBzdGFydGVkLCBpLCB0LCBwO1xuXG4gICAgbm9wcm9wYWdhdGlvbigpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHQgPSB0b3VjaGVzW2ldLCBwID0gdG91Y2godGhpcywgdG91Y2hlcywgdC5pZGVudGlmaWVyKTtcbiAgICAgIHAgPSBbcCwgdGhpcy5fX3pvb20uaW52ZXJ0KHApLCB0LmlkZW50aWZpZXJdO1xuICAgICAgaWYgKCFnLnRvdWNoMCkgZy50b3VjaDAgPSBwLCBzdGFydGVkID0gdHJ1ZSwgZy50YXBzID0gMSArICEhdG91Y2hzdGFydGluZztcbiAgICAgIGVsc2UgaWYgKCFnLnRvdWNoMSAmJiBnLnRvdWNoMFsyXSAhPT0gcFsyXSkgZy50b3VjaDEgPSBwLCBnLnRhcHMgPSAwO1xuICAgIH1cblxuICAgIGlmICh0b3VjaHN0YXJ0aW5nKSB0b3VjaHN0YXJ0aW5nID0gY2xlYXJUaW1lb3V0KHRvdWNoc3RhcnRpbmcpO1xuXG4gICAgaWYgKHN0YXJ0ZWQpIHtcbiAgICAgIGlmIChnLnRhcHMgPCAyKSB0b3VjaHN0YXJ0aW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hzdGFydGluZyA9IG51bGw7IH0sIHRvdWNoRGVsYXkpO1xuICAgICAgaW50ZXJydXB0KHRoaXMpO1xuICAgICAgZy5zdGFydCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNobW92ZWQoKSB7XG4gICAgaWYgKCF0aGlzLl9fem9vbWluZykgcmV0dXJuO1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgdCwgcCwgbDtcblxuICAgIG5vZXZlbnQoKTtcbiAgICBpZiAodG91Y2hzdGFydGluZykgdG91Y2hzdGFydGluZyA9IGNsZWFyVGltZW91dCh0b3VjaHN0YXJ0aW5nKTtcbiAgICBnLnRhcHMgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHQgPSB0b3VjaGVzW2ldLCBwID0gdG91Y2godGhpcywgdG91Y2hlcywgdC5pZGVudGlmaWVyKTtcbiAgICAgIGlmIChnLnRvdWNoMCAmJiBnLnRvdWNoMFsyXSA9PT0gdC5pZGVudGlmaWVyKSBnLnRvdWNoMFswXSA9IHA7XG4gICAgICBlbHNlIGlmIChnLnRvdWNoMSAmJiBnLnRvdWNoMVsyXSA9PT0gdC5pZGVudGlmaWVyKSBnLnRvdWNoMVswXSA9IHA7XG4gICAgfVxuICAgIHQgPSBnLnRoYXQuX196b29tO1xuICAgIGlmIChnLnRvdWNoMSkge1xuICAgICAgdmFyIHAwID0gZy50b3VjaDBbMF0sIGwwID0gZy50b3VjaDBbMV0sXG4gICAgICAgICAgcDEgPSBnLnRvdWNoMVswXSwgbDEgPSBnLnRvdWNoMVsxXSxcbiAgICAgICAgICBkcCA9IChkcCA9IHAxWzBdIC0gcDBbMF0pICogZHAgKyAoZHAgPSBwMVsxXSAtIHAwWzFdKSAqIGRwLFxuICAgICAgICAgIGRsID0gKGRsID0gbDFbMF0gLSBsMFswXSkgKiBkbCArIChkbCA9IGwxWzFdIC0gbDBbMV0pICogZGw7XG4gICAgICB0ID0gc2NhbGUodCwgTWF0aC5zcXJ0KGRwIC8gZGwpKTtcbiAgICAgIHAgPSBbKHAwWzBdICsgcDFbMF0pIC8gMiwgKHAwWzFdICsgcDFbMV0pIC8gMl07XG4gICAgICBsID0gWyhsMFswXSArIGwxWzBdKSAvIDIsIChsMFsxXSArIGwxWzFdKSAvIDJdO1xuICAgIH1cbiAgICBlbHNlIGlmIChnLnRvdWNoMCkgcCA9IGcudG91Y2gwWzBdLCBsID0gZy50b3VjaDBbMV07XG4gICAgZWxzZSByZXR1cm47XG4gICAgZy56b29tKFwidG91Y2hcIiwgY29uc3RyYWluKHRyYW5zbGF0ZSh0LCBwLCBsKSwgZy5leHRlbnQsIHRyYW5zbGF0ZUV4dGVudCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZCgpIHtcbiAgICBpZiAoIXRoaXMuX196b29taW5nKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCB0O1xuXG4gICAgbm9wcm9wYWdhdGlvbigpO1xuICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgdG91Y2hEZWxheSk7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdCA9IHRvdWNoZXNbaV07XG4gICAgICBpZiAoZy50b3VjaDAgJiYgZy50b3VjaDBbMl0gPT09IHQuaWRlbnRpZmllcikgZGVsZXRlIGcudG91Y2gwO1xuICAgICAgZWxzZSBpZiAoZy50b3VjaDEgJiYgZy50b3VjaDFbMl0gPT09IHQuaWRlbnRpZmllcikgZGVsZXRlIGcudG91Y2gxO1xuICAgIH1cbiAgICBpZiAoZy50b3VjaDEgJiYgIWcudG91Y2gwKSBnLnRvdWNoMCA9IGcudG91Y2gxLCBkZWxldGUgZy50b3VjaDE7XG4gICAgaWYgKGcudG91Y2gwKSBnLnRvdWNoMFsxXSA9IHRoaXMuX196b29tLmludmVydChnLnRvdWNoMFswXSk7XG4gICAgZWxzZSB7XG4gICAgICBnLmVuZCgpO1xuICAgICAgLy8gSWYgdGhpcyB3YXMgYSBkYmx0YXAsIHJlcm91dGUgdG8gdGhlIChvcHRpb25hbCkgZGJsY2xpY2suem9vbSBoYW5kbGVyLlxuICAgICAgaWYgKGcudGFwcyA9PT0gMikge1xuICAgICAgICB2YXIgcCA9IHNlbGVjdCh0aGlzKS5vbihcImRibGNsaWNrLnpvb21cIik7XG4gICAgICAgIGlmIChwKSBwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgem9vbS53aGVlbERlbHRhID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHdoZWVsRGVsdGEgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgem9vbSkgOiB3aGVlbERlbHRhO1xuICB9O1xuXG4gIHpvb20uZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgem9vbSkgOiBmaWx0ZXI7XG4gIH07XG5cbiAgem9vbS50b3VjaGFibGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodG91Y2hhYmxlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCB6b29tKSA6IHRvdWNoYWJsZTtcbiAgfTtcblxuICB6b29tLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dKSwgem9vbSkgOiBleHRlbnQ7XG4gIH07XG5cbiAgem9vbS5zY2FsZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzY2FsZUV4dGVudFswXSA9ICtfWzBdLCBzY2FsZUV4dGVudFsxXSA9ICtfWzFdLCB6b29tKSA6IFtzY2FsZUV4dGVudFswXSwgc2NhbGVFeHRlbnRbMV1dO1xuICB9O1xuXG4gIHpvb20udHJhbnNsYXRlRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zbGF0ZUV4dGVudFswXVswXSA9ICtfWzBdWzBdLCB0cmFuc2xhdGVFeHRlbnRbMV1bMF0gPSArX1sxXVswXSwgdHJhbnNsYXRlRXh0ZW50WzBdWzFdID0gK19bMF1bMV0sIHRyYW5zbGF0ZUV4dGVudFsxXVsxXSA9ICtfWzFdWzFdLCB6b29tKSA6IFtbdHJhbnNsYXRlRXh0ZW50WzBdWzBdLCB0cmFuc2xhdGVFeHRlbnRbMF1bMV1dLCBbdHJhbnNsYXRlRXh0ZW50WzFdWzBdLCB0cmFuc2xhdGVFeHRlbnRbMV1bMV1dXTtcbiAgfTtcblxuICB6b29tLmNvbnN0cmFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb25zdHJhaW4gPSBfLCB6b29tKSA6IGNvbnN0cmFpbjtcbiAgfTtcblxuICB6b29tLmR1cmF0aW9uID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR1cmF0aW9uID0gK18sIHpvb20pIDogZHVyYXRpb247XG4gIH07XG5cbiAgem9vbS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0ZSA9IF8sIHpvb20pIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgem9vbS5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyB6b29tIDogdmFsdWU7XG4gIH07XG5cbiAgem9vbS5jbGlja0Rpc3RhbmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsaWNrRGlzdGFuY2UyID0gKF8gPSArXykgKiBfLCB6b29tKSA6IE1hdGguc3FydChjbGlja0Rpc3RhbmNlMik7XG4gIH07XG5cbiAgcmV0dXJuIHpvb207XG59XG4iLCIvKiBGaWxlOiBjb2xvcnMudHNcbiAqIEF1dGhvcjogU3RldmVuIEhpbGxlcm1hblxuICogRGF0ZTogMTAvMzEvMjAxOVxuICogLS0tLS0tLS0tLS0tLS0tLVxuICogVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBjb2xvciBjb2RlcyBmb3IgdGhlIGRpc3BsYXkuXG4gKi9cblxuY29uc3QgREFSS19CRyA9IFwiIzMzMzMzM1wiOyAvLyBNYWluIGJhY2tncm91bmQgY29sb3JcbmNvbnN0IExJR0hURVJfQkcgPSBcIiM1RjVGNUZcIjsgLy8gTmF2aWdhdGlvbiBiYXIgYmFja2dyb3VuZCBjb2xvclxuY29uc3QgTElHSFRfR1JFWSA9IFwiI0FDQUNBQ1wiOyAvLyBHcmV5IHVzZWQgaW4gZ3JhcGhzIHRvIHN0YW5kIG91dFxuY29uc3QgVElUTEVfV0hJVEUgPSBcIiNEQURBREFcIjsgLy8gQnJpZ2h0IGdyZXkgdXNlZCBpbiB0aGUgdGl0bGUgb2YgZWFjaCB2aXNcbmNvbnN0IFRFQUwgPSBcIiMwMEM4OURcIjsgLy8gVGVhbCB1c2VkIGFzIGFuIGFjY2VudCBvciBoaWdobGlnaHRcbmNvbnN0IFNFTEVDVElPTl9HUkVFTiA9IFwiI0EwQzI5RVwiOyAvLyBVc2VkIHRvIG1hcmsgd2hpY2ggdmlldyBpcyBzZWxlY3RlZCBpbiB0aGUgbmF2aWdhdGlvbiBiYXJcbmNvbnN0IFRFRF9SRUQgPSBcIiNFNjJCMUVcIjsgLy8gVXNlZCBpbiB0aGUgY2lyY2xlIHBhY2tpbmcgY2hhcnRzIGFzIGNpcmNsZSBmaWxsIChMSUdIVF9HUkVZIHRleHQgYW5kIG91dGxpbmVzKVxuY29uc3QgQlJJR0hUX0dSRUVOID0gXCIjMTNCMTAwXCI7IC8vIEdvb2QgcmF0aW5ncyBpbiB0aGUgcmF0aW5ncyBicmVha2Rvd25cbmNvbnN0IEJSSUdIVF9SRUQgPSBcIiNCMTAwMDdcIjsgLy8gQmFkIHJhdGluZ3MgaW4gdGhlIHJhdGluZ3MgYnJlYWtkb3duXG5jb25zdCBCUklHSFRfT1JBTkdFID0gXCIjQjE3RDAwXCI7IC8vIE1lZGlvY3JlIHJhdGluZ3MgaW4gcmF0aW5ncyBicmVha2Rvd25cblxuY29uc3QgQ09MT1JTID0geyBEQVJLX0JHLCBMSUdIVEVSX0JHLCBMSUdIVF9HUkVZLCBUSVRMRV9XSElURSwgVEVBTCwgU0VMRUNUSU9OX0dSRUVOLCBURURfUkVELCBCUklHSFRfR1JFRU4sIEJSSUdIVF9SRUQsIEJSSUdIVF9PUkFOR0UgfTtcblxuZXhwb3J0IGRlZmF1bHQgQ09MT1JTO1xuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG5cbmZ1bmN0aW9uIGZ1bmN0b3Iodikge1xuICByZXR1cm4gdHlwZW9mIHYgPT0gXCJmdW5jdGlvblwiXG4gICAgPyB2XG4gICAgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gaW5pdE5vZGUoKSB7XG4gICAgY29uc3Qgbm9kZSA9IGQzLnNlbGVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTtcbiAgICBub2RlXG4gICAgICAuc3R5bGUoXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpXG4gICAgICAuc3R5bGUoXCJ0b3BcIiwgMClcbiAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMClcbiAgICAgIC5zdHlsZShcInBvaW50ZXItZXZlbnRzXCIsIFwibm9uZVwiKVxuICAgICAgLnN0eWxlKFwiYm94LXNpemluZ1wiLCBcImJvcmRlci1ib3hcIik7XG5cbiAgICByZXR1cm4gbm9kZS5ub2RlKCk7XG4gIH1cblxuICBsZXQgZGlyZWN0aW9uID0gXCJuXCI7XG4gIGxldCBvZmZzZXQgPSBbMCwgMF07XG4gIGxldCBodG1sID0gXCIgXCI7XG4gIGxldCBub2RlID0gaW5pdE5vZGUoKTtcbiAgbGV0IHN2ZyA9IG51bGw7XG4gIGxldCBwb2ludCA9IG51bGw7XG4gIGxldCB0YXJnZXQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGdldFNWR05vZGUoZWwpIHtcbiAgICBlbCA9IGVsLm5vZGUoKTtcbiAgICBpZiAoZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInN2Z1wiKSByZXR1cm4gZWw7XG4gICAgcmV0dXJuIGVsLm93bmVyU1ZHRWxlbWVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpcCh2aXMpIHtcbiAgICBpZiAodmlzLm5vZGUoKSAhPSBudWxsKSB7XG4gICAgICBzdmcgPSBnZXRTVkdOb2RlKHZpcyk7XG4gICAgICBwb2ludCA9IHN2Zy5jcmVhdGVTVkdQb2ludCgpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChub2RlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXROb2RlRWwoKSB7XG4gICAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgICAgbm9kZSA9IGluaXROb2RlKCk7XG4gICAgICAvLyByZS1hZGQgbm9kZSB0byBET01cbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBkMy5zZWxlY3Qobm9kZSk7XG4gIH1cblxuICAvLyBQcml2YXRlIC0gZ2V0cyB0aGUgc2NyZWVuIGNvb3JkaW5hdGVzIG9mIGEgc2hhcGVcbiAgLy9cbiAgLy8gR2l2ZW4gYSBzaGFwZSBvbiB0aGUgc2NyZWVuLCB3aWxsIHJldHVybiBhbiBTVkdQb2ludCBmb3IgdGhlIGRpcmVjdGlvbnNcbiAgLy8gbihub3J0aCksIHMoc291dGgpLCBlKGVhc3QpLCB3KHdlc3QpLCBuZShub3J0aGVhc3QpLCBzZShzb3V0aGVhc3QpLCBudyhub3J0aHdlc3QpLFxuICAvLyBzdyhzb3V0aHdlc3QpLlxuICAvL1xuICAvLyAgICArLSstK1xuICAvLyAgICB8ICAgfFxuICAvLyAgICArICAgK1xuICAvLyAgICB8ICAgfFxuICAvLyAgICArLSstK1xuICAvL1xuICAvLyBSZXR1cm5zIGFuIE9iamVjdCB7biwgcywgZSwgdywgbncsIHN3LCBuZSwgc2V9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIGZ1bmN0aW9uIGdldFNjcmVlbkJCb3goKSB7XG4gICAgbGV0IHRhcmdldGVsID0gdGFyZ2V0IHx8IGQzLmV2ZW50LnRhcmdldDtcblxuICAgIHdoaWxlIChcInVuZGVmaW5lZFwiID09PSB0eXBlb2YgdGFyZ2V0ZWwuZ2V0U2NyZWVuQ1RNICYmIFwidW5kZWZpbmVkXCIgPT09IHRhcmdldGVsLnBhcmVudE5vZGUpIHtcbiAgICAgIHRhcmdldGVsID0gdGFyZ2V0ZWwucGFyZW50Tm9kZTtcbiAgICB9XG5cbiAgICBjb25zdCBtYXRyaXggPSB0YXJnZXRlbC5nZXRTY3JlZW5DVE0oKSxcbiAgICAgIHRiYm94ID0gdGFyZ2V0ZWwuZ2V0QkJveCgpLFxuICAgICAgd2lkdGggPSB0YmJveC53aWR0aCxcbiAgICAgIGhlaWdodCA9IHRiYm94LmhlaWdodCxcbiAgICAgIHkgPSB0YmJveC55LFxuICAgICAgYmJveCA9IHtcbiAgICAgICAgbnc6IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShtYXRyaXgpLFxuICAgICAgICBuZTogcG9pbnQubWF0cml4VHJhbnNmb3JtKG1hdHJpeCksXG4gICAgICAgIHNlOiBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KSxcbiAgICAgICAgdzogcG9pbnQubWF0cml4VHJhbnNmb3JtKG1hdHJpeCksXG4gICAgICAgIGU6IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShtYXRyaXgpLFxuICAgICAgICBuOiBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KSxcbiAgICAgICAgczogcG9pbnQubWF0cml4VHJhbnNmb3JtKG1hdHJpeCksXG4gICAgICAgIHN3OiBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KSxcbiAgICAgIH07XG5cbiAgICBwb2ludC54ID0gdGJib3gueDtcbiAgICBwb2ludC55ID0geTtcbiAgICBiYm94Lm53ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG1hdHJpeCk7XG4gICAgcG9pbnQueCArPSB3aWR0aDtcbiAgICBiYm94Lm53ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG1hdHJpeCk7XG4gICAgcG9pbnQueSArPSBoZWlnaHQ7XG4gICAgYmJveC5zZSA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShtYXRyaXgpO1xuICAgIHBvaW50LnggLT0gd2lkdGg7XG4gICAgYmJveC5udyA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShtYXRyaXgpO1xuICAgIHBvaW50LnkgLT0gaGVpZ2h0IC8gMjtcbiAgICBiYm94LncgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KTtcbiAgICBwb2ludC54ICs9IHdpZHRoO1xuICAgIGJib3guZSA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShtYXRyaXgpO1xuICAgIHBvaW50LnggLT0gd2lkdGggLyAyO1xuICAgIHBvaW50LnkgLT0gaGVpZ2h0IC8gMjtcbiAgICBiYm94Lm4gPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KTtcbiAgICBwb2ludC55ICs9IGhlaWdodDtcbiAgICBiYm94LnMgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KTtcblxuICAgIHJldHVybiBiYm94O1xuICB9XG5cbiAgZnVuY3Rpb24gZGlyZWN0aW9uTigpIHtcbiAgICBjb25zdCBiYm94ID0gZ2V0U2NyZWVuQkJveCgpO1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGJib3gubi55IC0gbm9kZS5vZmZzZXRIZWlnaHQsXG4gICAgICBsZWZ0OiBiYm94Lm4ueCAtIG5vZGUub2Zmc2V0V2lkdGggLyAyLFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkaXJlY3Rpb25TKCkge1xuICAgIGNvbnN0IGJib3ggPSBnZXRTY3JlZW5CQm94KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogYmJveC5zLnksXG4gICAgICBsZWZ0OiBiYm94LnMueCAtIG5vZGUub2Zmc2V0V2lkdGggLyAyLFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkaXJlY3Rpb25FKCkge1xuICAgIGNvbnN0IGJib3ggPSBnZXRTY3JlZW5CQm94KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogYmJveC5lLnkgLSBub2RlLm9mZnNldEhlaWdodCAvIDIsXG4gICAgICBsZWZ0OiBiYm94LmUueCxcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZGlyZWN0aW9uVygpIHtcbiAgICBjb25zdCBiYm94ID0gZ2V0U2NyZWVuQkJveCgpO1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGJib3gudy55IC0gbm9kZS5vZmZzZXRIZWlnaHQgLyAyLFxuICAgICAgbGVmdDogYmJveC53LnggLSBub2RlLm9mZnNldFdpZHRoLFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkaXJlY3Rpb25OVygpIHtcbiAgICBjb25zdCBiYm94ID0gZ2V0U2NyZWVuQkJveCgpO1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGJib3gubncueSAtIG5vZGUub2Zmc2V0SGVpZ2h0LFxuICAgICAgbGVmdDogYmJveC5udy54IC0gbm9kZS5vZmZzZXRXaWR0aCxcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZGlyZWN0aW9uTmUoKSB7XG4gICAgY29uc3QgYmJveCA9IGdldFNjcmVlbkJCb3goKTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBiYm94Lm5lLnkgLSBub2RlLm9mZnNldEhlaWdodCxcbiAgICAgIGxlZnQ6IGJib3gubmUueCxcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZGlyZWN0aW9uU3coKSB7XG4gICAgY29uc3QgYmJveCA9IGdldFNjcmVlbkJCb3goKTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBiYm94LnN3LnksXG4gICAgICBsZWZ0OiBiYm94LnN3LnggLSBub2RlLm9mZnNldFdpZHRoLFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkaXJlY3Rpb25TZSgpIHtcbiAgICBjb25zdCBiYm94ID0gZ2V0U2NyZWVuQkJveCgpO1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGJib3guc2UueSxcbiAgICAgIGxlZnQ6IGJib3guZS54LFxuICAgIH07XG4gIH1cblxuICBjb25zdCBkaXJlY3Rpb25DYWxsYmFja3MgPSB7XG4gICAgbjogZGlyZWN0aW9uTixcbiAgICBzOiBkaXJlY3Rpb25TLFxuICAgIGU6IGRpcmVjdGlvbkUsXG4gICAgdzogZGlyZWN0aW9uVyxcbiAgICBudzogZGlyZWN0aW9uTlcsXG4gICAgbmU6IGRpcmVjdGlvbk5lLFxuICAgIHN3OiBkaXJlY3Rpb25TdyxcbiAgICBzZTogZGlyZWN0aW9uU2UsXG4gIH07XG5cbiAgY29uc3QgZGlyZWN0aW9ucyA9IE9iamVjdC5rZXlzKGRpcmVjdGlvbkNhbGxiYWNrcyk7XG5cbiAgLy8gUHVibGljIC0gc2hvdyB0aGUgdG9vbHRpcCBvbiB0aGUgc2NyZWVuXG4gIC8vXG4gIC8vIFJldHVybnMgYSB0aXBcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgdGlwLnNob3cgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgY29uc3QgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgaWYgKGFyZ3NbYXJncy5sZW5ndGggLSAxXSBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpIHRhcmdldCA9IGFyZ3MucG9wKCk7XG4gICAgLy9jb25zdCBjb250ZW50ID0gaHRtbDtcbiAgICBjb25zdCBjb250ZW50ID0gaHRtbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICBjb25zdCBwb2Zmc2V0ID0gb2Zmc2V0O1xuICAgIC8vY29uc3QgcG9mZnNldCA9IChvZmZzZXQgYXMgYW55KS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICBjb25zdCBkaXIgPSBkaXJlY3Rpb247XG4gICAgY29uc3Qgbm9kZWwgPSBnZXROb2RlRWwoKTtcbiAgICBsZXQgaSA9IGRpcmVjdGlvbnMubGVuZ3RoO1xuICAgIGNvbnN0IHNjcm9sbFRvcCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AsXG4gICAgICBzY3JvbGxMZWZ0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0O1xuXG4gICAgbm9kZWxcbiAgICAgIC5odG1sKGNvbnRlbnQpXG4gICAgICAuc3R5bGUoXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpXG4gICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDEpXG4gICAgICAuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKTtcblxuICAgIHdoaWxlIChpLS0pIG5vZGVsLmNsYXNzZWQoZGlyZWN0aW9uc1tpXSwgZmFsc2UpO1xuICAgIGxldCBjb29yZHM7XG4gICAgc3dpdGNoIChkaXIpIHtcbiAgICAgIGNhc2UgXCJuXCI6XG4gICAgICAgIGNvb3JkcyA9IGRpcmVjdGlvbkNhbGxiYWNrcy5uLmFwcGx5KHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJzXCI6XG4gICAgICAgIGNvb3JkcyA9IGRpcmVjdGlvbkNhbGxiYWNrcy5zLmFwcGx5KHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJlXCI6XG4gICAgICAgIGNvb3JkcyA9IGRpcmVjdGlvbkNhbGxiYWNrcy5lLmFwcGx5KHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJ3XCI6XG4gICAgICAgIGNvb3JkcyA9IGRpcmVjdGlvbkNhbGxiYWNrcy53LmFwcGx5KHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJud1wiOlxuICAgICAgICBjb29yZHMgPSBkaXJlY3Rpb25DYWxsYmFja3MubncuYXBwbHkodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInN3XCI6XG4gICAgICAgIGNvb3JkcyA9IGRpcmVjdGlvbkNhbGxiYWNrcy5zdy5hcHBseSh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibmVcIjpcbiAgICAgICAgY29vcmRzID0gZGlyZWN0aW9uQ2FsbGJhY2tzLm5lLmFwcGx5KHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJzZVwiOlxuICAgICAgICBjb29yZHMgPSBkaXJlY3Rpb25DYWxsYmFja3Muc2UuYXBwbHkodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBub2RlbFxuICAgICAgLmNsYXNzZWQoZGlyLCB0cnVlKVxuICAgICAgLnN0eWxlKFwidG9wXCIsIGNvb3Jkcy50b3AgKyBwb2Zmc2V0WzBdICsgc2Nyb2xsVG9wICsgXCJweFwiKVxuICAgICAgLnN0eWxlKFwibGVmdFwiLCBjb29yZHMubGVmdCArIHBvZmZzZXRbMV0gKyBzY3JvbGxMZWZ0ICsgXCJweFwiKTtcblxuICAgIHJldHVybiB0aXA7XG4gIH07XG5cbiAgLy8gUHVibGljIC0gaGlkZSB0aGUgdG9vbHRpcFxuICAvL1xuICAvLyBSZXR1cm5zIGEgdGlwXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHRpcC5oaWRlID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3Qgbm9kZWwgPSBnZXROb2RlRWwoKTtcbiAgICBub2RlbC5zdHlsZShcIm9wYWNpdHlcIiwgMCkuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIik7XG4gICAgcmV0dXJuIHRpcDtcbiAgfTtcblxuICAvLyBQdWJsaWM6IFByb3h5IGF0dHIgY2FsbHMgdG8gdGhlIGQzIHRpcCBjb250YWluZXIuICBTZXRzIG9yIGdldHMgYXR0cmlidXRlIHZhbHVlLlxuICAvL1xuICAvLyBuIC0gbmFtZSBvZiB0aGUgYXR0cmlidXRlXG4gIC8vIHYgLSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlXG4gIC8vXG4gIC8vIFJldHVybnMgdGlwIG9yIGF0dHJpYnV0ZSB2YWx1ZVxuICB0aXAuYXR0ciA9IGZ1bmN0aW9uKG4sIHYpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIgJiYgdHlwZW9mIG4gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBnZXROb2RlRWwoKS5hdHRyKG4pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICBjb25zdCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgIGQzLnNlbGVjdGlvbi5wcm90b3R5cGUuYXR0ci5hcHBseShnZXROb2RlRWwoKSwgYXJncyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRpcDtcbiAgfTtcblxuICAvLyBQdWJsaWM6IFByb3h5IHN0eWxlIGNhbGxzIHRvIHRoZSBkMyB0aXAgY29udGFpbmVyLiAgU2V0cyBvciBnZXRzIGEgc3R5bGUgdmFsdWUuXG4gIC8vXG4gIC8vIG4gLSBuYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAvLyB2IC0gdmFsdWUgb2YgdGhlIHByb3BlcnR5XG4gIC8vXG4gIC8vIFJldHVybnMgdGlwIG9yIHN0eWxlIHByb3BlcnR5IHZhbHVlXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICB0aXAuc3R5bGUgPSBmdW5jdGlvbihuLCB2KSB7XG4gICAgLy8gZGVidWdnZXI7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyICYmIHR5cGVvZiBuID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gZ2V0Tm9kZUVsKCkuc3R5bGUobik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlcyA9IGFyZ3NbMF07XG4gICAgICAgIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICByZXR1cm4gZDMuc2VsZWN0aW9uLnByb3RvdHlwZS5zdHlsZS5hcHBseShnZXROb2RlRWwoKSwgW2tleSwgc3R5bGVzW2tleV1dKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRpcDtcbiAgfTtcblxuICAvLyBQdWJsaWM6IFNldCBvciBnZXQgdGhlIGRpcmVjdGlvbiBvZiB0aGUgdG9vbHRpcFxuICAvL1xuICAvLyB2IC0gT25lIG9mIG4obm9ydGgpLCBzKHNvdXRoKSwgZShlYXN0KSwgb3Igdyh3ZXN0KSwgbncobm9ydGh3ZXN0KSxcbiAgLy8gICAgIHN3KHNvdXRod2VzdCksIG5lKG5vcnRoZWFzdCkgb3Igc2Uoc291dGhlYXN0KVxuICAvL1xuICAvLyBSZXR1cm5zIHRpcCBvciBkaXJlY3Rpb25cbiAgdGlwLmRpcmVjdGlvbiA9IGZ1bmN0aW9uKHYpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkaXJlY3Rpb247XG4gICAgZGlyZWN0aW9uID0gdiA9PSBudWxsID8gdiA6IGZ1bmN0b3Iodik7XG5cbiAgICByZXR1cm4gdGlwO1xuICB9O1xuXG4gIC8vIFB1YmxpYzogU2V0cyBvciBnZXRzIHRoZSBvZmZzZXQgb2YgdGhlIHRpcFxuICAvL1xuICAvLyB2IC0gQXJyYXkgb2YgW3gsIHldIG9mZnNldFxuICAvL1xuICAvLyBSZXR1cm5zIG9mZnNldCBvclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICB0aXAub2Zmc2V0ID0gZnVuY3Rpb24odikge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG9mZnNldDtcbiAgICBvZmZzZXQgPSB2ID09IG51bGwgPyB2IDogZnVuY3Rvcih2KTtcblxuICAgIHJldHVybiB0aXA7XG4gIH07XG5cbiAgLy8gUHVibGljOiBzZXRzIG9yIGdldHMgdGhlIGh0bWwgdmFsdWUgb2YgdGhlIHRvb2x0aXBcbiAgLy9cbiAgLy8gdiAtIFN0cmluZyB2YWx1ZSBvZiB0aGUgdGlwXG4gIC8vXG4gIC8vIFJldHVybnMgaHRtbCB2YWx1ZSBvciB0aXBcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgdGlwLmh0bWwgPSBmdW5jdGlvbih2KSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaHRtbDtcbiAgICBodG1sID0gdiA9PSBudWxsID8gdiA6IGZ1bmN0b3Iodik7XG5cbiAgICByZXR1cm4gdGlwO1xuICB9O1xuXG4gIC8vIFB1YmxpYzogZGVzdHJveXMgdGhlIHRvb2x0aXAgYW5kIHJlbW92ZXMgaXQgZnJvbSB0aGUgRE9NXG4gIC8vXG4gIC8vIFJldHVybnMgYSB0aXBcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgdGlwLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAobm9kZSkge1xuICAgICAgZ2V0Tm9kZUVsKCkucmVtb3ZlKCk7XG4gICAgICBub2RlID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRpcDtcbiAgfTtcblxuICByZXR1cm4gdGlwO1xufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG5pbXBvcnQgeyBCYXNlVHlwZSB9IGZyb20gXCJkM1wiO1xuaW1wb3J0IENPTE9SUyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgVG9vbFRpcCBmcm9tIFwiLi9Ub29sVGlwXCI7XG5cbi8vIEFjY2VwdHMgYSBkMy5TZWxlY3Rpb24gYXMgYSBwYXJhbWV0ZXIgYW5kIG1vZGlmaWVzIGl0LlxuLy8gVGhpcyBmdW5jdGlvbiBleHBlY3RzIHRoZSBkMy5TZWxlY3Rpb24gdG8gYmUgYW4gU1ZHLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3ZnLCBkYXRhKSB7XG4gIC8vY29uc29sZS5sb2coZGF0YSk7XG5cbiAgLy8gU2V0IGRpbWVuc2lvbnMgYW5kIG1hcmdpbnMgb2Ygc3ZnICsgZ3JhcGhcbiAgY29uc3QgbWFyZ2luID0ge1xuICAgIHRvcDogMTAsXG4gICAgcmlnaHQ6IDMwLFxuICAgIGJvdHRvbTogODAsXG4gICAgbGVmdDogODAsXG4gIH07XG4gIGNvbnN0IHN2Z1dpZHRoID0gODAwO1xuICBjb25zdCBzdmdIZWlnaHQgPSA1MDA7XG4gIGNvbnN0IHdpZHRoID0gc3ZnV2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgY29uc3QgaGVpZ2h0ID0gc3ZnSGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG5cbiAgLy8gU2V0IHdpZHRoIGFuZCBoZWlnaHQgb2Ygc3ZnXG4gIC8vIHN2Zy5hdHRyKFwid2lkdGhcIiwgc3ZnV2lkdGgpO1xuICAvLyBzdmcuYXR0cihcImhlaWdodFwiLCBzdmdIZWlnaHQpO1xuICBzdmcuYXR0cihcInZpZXdCb3hcIiwgYDAgMCAke3N2Z1dpZHRofSAke3N2Z0hlaWdodH1gKTtcbiAgLy8gSW5uZXIgZ3JvdXBcbiAgY29uc3QgZyA9IHN2Zy5hcHBlbmQoXCJnXCIpO1xuICBnLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKTtcblxuICAvLyBHZXQgbWluIGFuZCBtYXggeWVhclxuICBjb25zdCBwYXJzZVRpbWUgPSBkMy50aW1lUGFyc2UoXCIlc1wiKTtcbiAgY29uc3QgZGF0ZVJhbmdlID0gZDMuZXh0ZW50KGRhdGEsIGQgPT4gcGFyc2VUaW1lKGRbXCJmaWxtX2RhdGVcIl0pKTtcbiAgLy9jb25zb2xlLmxvZyhcIkRhdGUgUmFuZ2U6IFwiICsgZGF0ZVJhbmdlKTtcblxuICAvLyBYIGF4aXMgc2NhbGVcbiAgY29uc3QgeCA9IGQzXG4gICAgLnNjYWxlVGltZSgpXG4gICAgLmRvbWFpbihkYXRlUmFuZ2UpXG4gICAgLnJhbmdlKFswLCB3aWR0aF0pO1xuXG4gIC8vIFggYXhpc1xuICBjb25zdCB4QXhpcyA9IGQzLmF4aXNCb3R0b20oeCkudGlja0Zvcm1hdChkMy50aW1lRm9ybWF0KFwiJVlcIikpO1xuXG4gIGcuYXBwZW5kKFwiZ1wiKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAuY2FsbCh4QXhpcyk7XG5cbiAgLy8gQ29tcHV0ZSB5IGF4aXNcbiAgY29uc3QgeUV4dGVudCA9IGQzLmV4dGVudChkYXRhLCBkID0+IHtcbiAgICByZXR1cm4gK2RbXCJ2aWV3c1wiXTtcbiAgfSk7XG5cbiAgY29uc3QgeSA9IGQzXG4gICAgLnNjYWxlTGluZWFyKClcbiAgICAuZG9tYWluKHlFeHRlbnQpXG4gICAgLnJhbmdlKFtoZWlnaHQsIDBdKTtcbiAgZy5hcHBlbmQoXCJnXCIpLmNhbGwoZDMuYXhpc0xlZnQoeSkudGlja0Zvcm1hdChkMy5mb3JtYXQoXCJ+c1wiKSkpO1xuXG4gIGNvbnN0IHRpcCA9IFRvb2xUaXAoKVxuICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkMy10aXBcIilcbiAgICAuaHRtbChmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gYCR7ZC5uYW1lfTogJHtkLnZpZXdzfSB2aWV3c2A7XG4gICAgfSk7XG5cbiAgLy8gQXBwZW5kIHRoZSByZWN0YW5nbGVzXG4gIGcuc2VsZWN0QWxsKFwiY2lyY2xlXCIpXG4gICAgLmRhdGEoZGF0YSlcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB4KHBhcnNlVGltZShkW1wiZmlsbV9kYXRlXCJdKSkgKyBcIixcIiArIHkoK2RbXCJ2aWV3c1wiXSkgKyBcIilcIjtcbiAgICB9KVxuICAgIC5hdHRyKFwiclwiLCAyKVxuICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgXCIwLjc1XCIpXG4gICAgLnN0eWxlKFwiZmlsbFwiLCBDT0xPUlMuVEVBTClcbiAgICAuY2FsbCh0aXApXG4gICAgLm9uKFwibW91c2VvdmVyXCIsIHRpcC5zaG93KVxuICAgIC5vbihcIm1vdXNlb3V0XCIsIHRpcC5oaWRlKTs7XG5cbiAgLy8gQXBwZW5kIGF4aXMgbGFiZWxzXG4gIGcuYXBwZW5kKFwidGV4dFwiKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKC01MCwgMjUwKSByb3RhdGUoLTkwKVwiKVxuICAgIC5hdHRyKFwiZmlsbFwiLCBDT0xPUlMuVElUTEVfV0hJVEUpXG4gICAgLnRleHQoXCJOdW1iZXIgb2YgVmlld3NcIik7XG4gIGcuYXBwZW5kKFwidGV4dFwiKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDMyMCwgNDUwKVwiKVxuICAgIC5hdHRyKFwiZmlsbFwiLCBDT0xPUlMuVElUTEVfV0hJVEUpXG4gICAgLnRleHQoXCJZZWFyXCIpO1xufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG5pbXBvcnQgQ09MT1JTIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCBjaXJjbGVQYWNrUHJvZmVzc2lvbnMgZnJvbSBcIi4vY2lyY2xlUGFja1Byb2Zlc3Npb25zXCI7XG5pbXBvcnQgdHJlZW1hcFByb2Zlc3Npb25zIGZyb20gXCIuL3RyZWVtYXBQcm9mZXNzaW9uc1wiO1xuXG4vLyBBY2NlcHRzIGEgZDMuU2VsZWN0aW9uIGFzIGEgcGFyYW1ldGVyIGFuZCBtb2RpZmllcyBpdC5cbi8vIFRoaXMgZnVuY3Rpb24gZXhwZWN0cyB0aGUgZDMuU2VsZWN0aW9uIHRvIGJlIGEgZGl2LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGl2LCBkYXRhKSB7XG4gIC8vIFNldCBkaW1lbnNpb25zIGFuZCBtYXJnaW5zIG9mIHN2ZyArIGdyYXBoXG4gIGNvbnN0IG1hcmdpbiA9IHtcbiAgICB0b3A6IDEwLFxuICAgIHJpZ2h0OiAzMCxcbiAgICBib3R0b206IDgwLFxuICAgIGxlZnQ6IDgwLFxuICB9O1xuICBjb25zdCBzdmdXaWR0aCA9IDgwMDtcbiAgY29uc3Qgc3ZnSGVpZ2h0ID0gNTAwO1xuICBjb25zdCB3aWR0aCA9IHN2Z1dpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gIGNvbnN0IGhlaWdodCA9IHN2Z0hlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuXG4gIC8vIFNldCB2aXMgdGl0bGVcbiAgZGl2LmFwcGVuZChcImgyXCIpLnRleHQoXCJXaGF0IERvIFRFRCBUYWxrZXJzIERvIEZvciBhIExpdmluZz9cIik7XG4gIGRpdi5hcHBlbmQoXCJoclwiKS5hdHRyKFwiY29sb3JcIiwgQ09MT1JTLkxJR0hUX0dSRVkpO1xuXG4gIC8vIEVuYWJsZXMgdGhlIGRyb3Bkb3duIG1lbnUgdG8gY2hhbmdlIHRoZSB2aWV3LlxuICBmdW5jdGlvbiBvblByb2Zlc3Npb25WaWV3Q2hhbmdlZCgpIHtcbiAgICBjb25zdCBkcm9wZG93biA9IGQzLnNlbGVjdChcIiN2aWV3U2VsZWN0XCIpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtaWdub3JlXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGNhdGVnb3J5ID0gZHJvcGRvd24uX2dyb3Vwc1swXVswXS5vcHRpb25zW2Ryb3Bkb3duLl9ncm91cHNbMF1bMF0uc2VsZWN0ZWRJbmRleF0udmFsdWU7XG5cbiAgICBjb25zb2xlLmxvZyhjYXRlZ29yeSk7XG5cbiAgICBpZiAoY2F0ZWdvcnkgPT0gXCJDaXJjbGUgUGFja2luZ1wiKSB7XG4gICAgICBkMy5zZWxlY3RBbGwoXCIuY2lyY2xlUGFja05vZGVcIikuc3R5bGUoXCJvcGFjaXR5XCIsIFwiMVwiKTtcbiAgICAgIGQzLnNlbGVjdEFsbChcIi50cmVlbWFwTm9kZVwiKS5zdHlsZShcIm9wYWNpdHlcIiwgXCIwXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkMy5zZWxlY3RBbGwoXCIuY2lyY2xlUGFja05vZGVcIikuc3R5bGUoXCJvcGFjaXR5XCIsIFwiMFwiKTtcbiAgICAgIGQzLnNlbGVjdEFsbChcIi50cmVlbWFwTm9kZVwiKS5zdHlsZShcIm9wYWNpdHlcIiwgXCIxXCIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCB2aWV3IHNlbGVjdG9yXG4gIGNvbnN0IHZpZXdTZWxlY3RvciA9IGRpdi5hcHBlbmQoXCJzZWxlY3RcIikuYXR0cihcImlkXCIsIFwidmlld1NlbGVjdFwiKTtcbiAgdmlld1NlbGVjdG9yXG4gICAgLmFwcGVuZChcIm9wdGlvblwiKVxuICAgIC50ZXh0KFwiQ2lyY2xlIFBhY2tpbmdcIilcbiAgICAuYXR0cihcInZhbHVlXCIsIFwiQ2lyY2xlIFBhY2tpbmdcIik7XG4gIHZpZXdTZWxlY3RvclxuICAgIC5hcHBlbmQoXCJvcHRpb25cIilcbiAgICAudGV4dChcIlRyZWVtYXBcIilcbiAgICAuYXR0cihcInZhbHVlXCIsIFwiVHJlZW1hcFwiKTtcbiAgdmlld1NlbGVjdG9yLm9uKFwiY2hhbmdlXCIsIG9uUHJvZmVzc2lvblZpZXdDaGFuZ2VkKTtcblxuICBjb25zdCBzdmcgPSBkaXYuYXBwZW5kKFwic3ZnXCIpLmF0dHIoXCJpZFwiLCBcInByb2Zlc3Npb25zVmlld1wiKTtcblxuICAvLyBTZXQgd2lkdGggYW5kIGhlaWdodCBvZiBzdmdcbiAgLy8gc3ZnLmF0dHIoXCJ3aWR0aFwiLCBzdmdXaWR0aCk7XG4gIC8vIHN2Zy5hdHRyKFwiaGVpZ2h0XCIsIHN2Z0hlaWdodCk7XG4gIHN2Zy5hdHRyKFwidmlld0JveFwiLCBgMCAwICR7c3ZnV2lkdGh9ICR7c3ZnSGVpZ2h0fWApO1xuICAvLyBJbm5lciBncm91cFxuICBjb25zdCBnID0gc3ZnLmFwcGVuZChcImdcIik7XG4gIGcuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpO1xuXG4gIC8vIENvbnZlcnQgZGF0YSB0byBoaWVyYXJjaGljYWwgZm9ybVxuICBjb25zdCByb290ID0gZDNcbiAgICAuc3RyYXRpZnkoKVxuICAgIC5pZChkID0+IGQucHJvZmVzc2lvbilcbiAgICAucGFyZW50SWQoZCA9PiB7XG4gICAgICBpZiAoZC5wcm9mZXNzaW9uICE9IFwiUm9vdFwiKSByZXR1cm4gXCJSb290XCI7XG4gICAgICBlbHNlIHJldHVybiBcIlwiO1xuICAgIH0pKGRhdGEpXG4gICAgLnN1bShkID0+ICtkLmNvdW50KVxuICAgIC5zb3J0KChhLCBiKSA9PiArYi5kYXRhLmNvdW50IC0gK2EuZGF0YS5jb3VudCk7XG5cbiAgLy8gQWRkIGJvdGggdGhlIGNpcmNsZSBwYWNraW5nIGFuZCB0cmVlbWFwIHBsb3RzIHRvIHRoZSBzdmdcbiAgY2lyY2xlUGFja1Byb2Zlc3Npb25zKHN2Zywgcm9vdCwgc3ZnV2lkdGgsIHN2Z0hlaWdodCAtIG1hcmdpbi50b3AgKiAyKTtcbiAgdHJlZW1hcFByb2Zlc3Npb25zKHN2Zywgcm9vdCwgd2lkdGgsIGhlaWdodCk7XG59XG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tIFwiZDNcIjtcbmltcG9ydCB7IEJhc2VUeXBlLCBIaWVyYXJjaHlDaXJjdWxhck5vZGUgfSBmcm9tIFwiZDNcIjtcbmltcG9ydCBDT0xPUlMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG4vLyBBY2NlcHRzIGEgZDMuU2VsZWN0aW9uIGFzIGEgcGFyYW1ldGVyIGFuZCBtb2RpZmllcyBpdC5cbi8vIFRoaXMgZnVuY3Rpb24gZXhwZWN0cyB0aGUgZDMuU2VsZWN0aW9uIHRvIGJlIGFuIFNWRy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNpcmNsZVBhY2tQcm9mZXNzaW9ucyhcbiAgc3ZnLFxuICByb290LFxuICB3aWR0aCxcbiAgaGVpZ2h0LFxuKSB7XG4gIC8vIENhbGN1bGF0ZSBjaXJjbGUgcGFja2luZyBkYXRhXG4gIGNvbnN0IGNpcmNsZVBhY2sgPSBkM1xuICAgIC5wYWNrKClcbiAgICAuc2l6ZShbd2lkdGgsIGhlaWdodF0pXG4gICAgLnBhZGRpbmcoMykocm9vdCk7XG5cbiAgY29uc3Qgbm9kZXMgPSBzdmdcbiAgICAuc2VsZWN0QWxsKFwiLmNpcmNsZVBhY2tOb2RlXCIpXG4gICAgLmRhdGEoY2lyY2xlUGFjay5sZWF2ZXMoKSlcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZCA9PiBgdHJhbnNsYXRlKCR7ZC54ICsgMX0sJHtkLnkgKyAxfSlgKVxuICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjaXJjbGVQYWNrTm9kZVwiKVxuICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgXCIxXCIpO1xuXG4gIG5vZGVzXG4gICAgLmFwcGVuZChcImNpcmNsZVwiKVxuICAgIC5hdHRyKFwiclwiLCBkID0+IGQucilcbiAgICAuYXR0cihcImZpbGxcIiwgQ09MT1JTLlRFRF9SRUQpXG4gICAgLmF0dHIoXCJzdHJva2VcIiwgQ09MT1JTLkxJR0hUX0dSRVkpXG4gICAgLmF0dHIoXCJzdHJva2Utd2VpZ2h0XCIsIDUpO1xuXG4gIGZ1bmN0aW9uIGdldFNpemUoZCkge1xuICAgIGNvbnN0IGJib3ggPSB0aGlzLmdldEJCb3goKSxcbiAgICAgIGNiYm94ID0gdGhpcy5wYXJlbnROb2RlLmdldEJCb3goKTtcbiAgICBkLmRhdGFbXCJzY2FsZVwiXSA9IE1hdGgubWluKGNiYm94LndpZHRoIC8gYmJveC53aWR0aCwgY2Jib3guaGVpZ2h0IC8gYmJveC5oZWlnaHQpO1xuICB9XG5cbiAgbm9kZXNcbiAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgIC50ZXh0KGQgPT4gKGQuZGF0YSkucHJvZmVzc2lvbilcbiAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgXCIxcHhcIilcbiAgICAuZWFjaChnZXRTaXplKVxuICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gKGQuZGF0YSlbXCJzY2FsZVwiXSArIFwicHhcIjtcbiAgICB9KVxuICAgIC5hdHRyKFwiZmlsbFwiLCBDT0xPUlMuTElHSFRfR1JFWSlcbiAgICAuYXR0cihcImNsYXNzXCIsIFwicHJvZmVzc2lvbkxhYmVsXCIpO1xuXG4gIHJldHVybiBub2Rlcztcbn1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xuaW1wb3J0IENPTE9SUyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbi8vIEFjY2VwdHMgYSBkMy5TZWxlY3Rpb24gYXMgYSBwYXJhbWV0ZXIgYW5kIG1vZGlmaWVzIGl0LlxuLy8gVGhpcyBmdW5jdGlvbiBleHBlY3RzIHRoZSBkMy5TZWxlY3Rpb24gdG8gYmUgYW4gU1ZHLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJlZW1hcFByb2Zlc3Npb25zKHN2Zywgcm9vdCwgd2lkdGgsIGhlaWdodCkge1xuICAvLyBDYWxjdWxhdGUgY2lyY2xlIHBhY2tpbmcgZGF0YVxuICBjb25zdCB0cmVlbWFwID0gZDNcbiAgICAudHJlZW1hcCgpXG4gICAgLnNpemUoW3dpZHRoLCBoZWlnaHRdKVxuICAgIC5wYWRkaW5nKDMpKHJvb3QpO1xuXG4gIGNvbnN0IG5vZGVzID0gc3ZnXG4gICAgLnNlbGVjdEFsbChcIi50cmVlbWFwTm9kZVwiKVxuICAgIC5kYXRhKHRyZWVtYXAubGVhdmVzKCkpXG4gICAgLmVudGVyKClcbiAgICAuYXBwZW5kKFwiZ1wiKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGQgPT4gYHRyYW5zbGF0ZSgke2QueDAgKyAxfSwke2QueTAgKyAxfSlgKVxuICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0cmVlbWFwTm9kZVwiKVxuICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgXCIwXCIpO1xuXG4gIG5vZGVzXG4gICAgLmFwcGVuZChcInJlY3RcIilcbiAgICAuYXR0cihcIndpZHRoXCIsIGQgPT4gZC54MSAtIGQueDApXG4gICAgLmF0dHIoXCJoZWlnaHRcIiwgZCA9PiBkLnkxIC0gZC55MClcbiAgICAuYXR0cihcImZpbGxcIiwgQ09MT1JTLkxJR0hUX0dSRVkpXG4gICAgLmF0dHIoXCJzdHJva2VcIiwgQ09MT1JTLkxJR0hURVJfQkcpXG4gICAgLmF0dHIoXCJzdHJva2Utd2VpZ2h0XCIsIDUpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIGZ1bmN0aW9uIGdldFNpemUoZCkge1xuICAgIGNvbnN0IGJib3ggPSB0aGlzLmdldEJCb3goKSxcbiAgICAgIGNiYm94ID0gdGhpcy5wYXJlbnROb2RlLmdldEJCb3goKTtcbiAgICBkLmRhdGFbXCJzY2FsZVwiXSA9IE1hdGgubWluKGNiYm94LndpZHRoIC8gYmJveC53aWR0aCwgY2Jib3guaGVpZ2h0IC8gYmJveC5oZWlnaHQpO1xuICB9XG5cbiAgbm9kZXNcbiAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgIC50ZXh0KGQgPT4gZC5kYXRhLnByb2Zlc3Npb24pXG4gICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIFwiMXB4XCIpXG4gICAgLmVhY2goZ2V0U2l6ZSlcbiAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIGQuZGF0YVtcInNjYWxlXCJdICsgXCJweFwiO1xuICAgIH0pXG4gICAgLmF0dHIoXCJmaWxsXCIsIENPTE9SUy5EQVJLX0JHKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGQgPT4gXCJ0cmFuc2xhdGUoXCIgKyAoZC54MSAtIGQueDApIC8gMiArIFwiLFwiICsgKGQueTEgLSBkLnkwKSAvIDIgKyBcIilcIilcbiAgICAuYXR0cihcImNsYXNzXCIsIFwicHJvZmVzc2lvbkxhYmVsXCIpO1xuXG4gIHJldHVybiBub2Rlcztcbn1cbiIsIi8vIFJldHVybnMgYSBwYXRoIHRvIGFuIGljb24gaW1hZ2UgYmFzZWQgb24gdGhlIGlucHV0IHN0cmluZy4gIERlZmF1bHRzIHRvIGEgcXVlc3Rpb24gbWFyayBvbiBiYWQgaW5wdXQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyYXRpbmcpIHtcbiAgcmF0aW5nID0gcmF0aW5nLnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IHBhdGggPSBcIi4vaW1hZ2VzL2ljb25fc3Zncy9pY29uX1wiICsgcmF0aW5nICsgXCIuc3ZnXCI7XG4gIHJldHVybiBwYXRoO1xufVxuIiwiaW1wb3J0IFwiYm9vdHN0cmFwXCI7XG5pbXBvcnQgKiBhcyBkMyBmcm9tIFwiZDNcIjtcbmltcG9ydCBTY3JvbGxNYWdpYyBmcm9tIFwic2Nyb2xsbWFnaWNcIjtcbmltcG9ydCB0YWxrRGF0ZSBmcm9tIFwiLi90cy90YWxrRGF0ZVwiO1xuaW1wb3J0IHRlZFNpdGVWaWV3cyBmcm9tIFwiLi90cy90ZWRTaXRlVmlld3NcIjtcbmltcG9ydCByZWFkaW5nTGV2ZWwgZnJvbSBcIi4vdHMvcmVhZGluZ0xldmVsXCI7XG5pbXBvcnQgcHJvZmVzc2lvbnMgZnJvbSBcIi4vdHMvcHJvZmVzc2lvbnNcIjtcbmltcG9ydCByYXRpbmdzQnJlYWtkb3duIGZyb20gXCIuL3RzL3JhdGluZ3NCcmVha2Rvd25cIjtcbmltcG9ydCB0b3BpY1JlbGF0aW9ucyBmcm9tIFwiLi90cy90b3BpY1JlbGF0aW9uc1wiO1xuXG5cbmNvbnNvbGUubG9nKFNjcm9sbE1hZ2ljKTtcblxuLy8gR2l2ZSBlYWNoIHN2ZyBhIHZhcmlhYmxlIG5hbWVcbmNvbnN0IHN2ZzEgPSBkMy5zZWxlY3QoXCJzdmcuZmlndXJlMVwiKTtcbmNvbnN0IHN2ZzIgPSBkMy5zZWxlY3QoXCJzdmcuZmlndXJlMlwiKTtcbmNvbnN0IHN2ZzMgPSBkMy5zZWxlY3QoXCJzdmcuZmlndXJlM1wiKTtcbmNvbnN0IGRpdjQgPSBkMy5zZWxlY3QoXCJkaXYuZmlndXJlNFwiKTtcbmNvbnN0IHJhdGluZ3NEaXYgPSBkMy5zZWxlY3QoXCJkaXYucmF0aW5nc0RpdlwiKTtcbmNvbnN0IHRvcGljc0RpdiA9IGQzLnNlbGVjdChcImRpdi50b3BpY3NEaXZcIik7XG5cbi8vIERlZmluZSBkYXRhIGNsZWFuZXIgZnVuY3Rpb25cbmZ1bmN0aW9uIGRhdGFDbGVhbmVyKGRhdGEpIHtcbiAgLy8gQ2FsY3VsYXRlIHllYXIgZnJvbSBVTklYIFRpbWVzdGFtcFxuICBkYXRhLmZvckVhY2godGFsayA9PiB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHBhcnNlSW50KHRhbGtbXCJmaWxtX2RhdGVcIl0sIDEwKSAqIDEwMDApO1xuICAgIHRhbGsueWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKS50b1N0cmluZygpO1xuICB9KTtcbn1cblxuLy8gTG9hZCBkYXRhXG5kMy5jc3YoXCIuL2RhdGEvdGVkX21haW5fZ3JvdXBlZF9wcm9mZXNzaW9ucy5jc3ZcIikudGhlbihkYXRhID0+IHtcbiAgLy8gUGFzcyBkYXRhIHRocm91Z2ggZGF0YUNsZWFuZXIoKVxuICBkYXRhQ2xlYW5lcihkYXRhKTtcblxuICB0YWxrRGF0ZShzdmcxLCBkYXRhKTtcbiAgdGVkU2l0ZVZpZXdzKHN2ZzIsIGRhdGEpO1xuICByYXRpbmdzQnJlYWtkb3duKHJhdGluZ3NEaXYsIGRhdGEpO1xufSk7XG5cbmQzLmNzdihcIi4vZGF0YS9ma19zY29yZXMuY3N2XCIpLnRoZW4oZGF0YSA9PiB7XG4gIC8vY29uc29sZS5sb2coZGF0YSk7XG4gIHJlYWRpbmdMZXZlbChzdmczLCBkYXRhKTtcbn0pO1xuXG5kMy5qc29uKFwiLi9kYXRhL3Byb2Zlc3Npb25fY291bnRzLmpzb25cIikudGhlbihkYXRhID0+IHtcbiAgcHJvZmVzc2lvbnMoZGl2NCwgZGF0YSk7XG59KTtcblxuZDMuanNvbihcIi4vZGF0YS90b3BpY19yZWxhdGlvbnNoaXBzLmpzb25cIikudGhlbihkYXRhID0+IHtcbiAgdG9waWNSZWxhdGlvbnModG9waWNzRGl2LCBkYXRhKTtcbn0pO1xuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG5pbXBvcnQgQ09MT1JTIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuLy8gQWNjZXB0cyBhIGQzLlNlbGVjdGlvbiBhcyBhIHBhcmFtZXRlciBhbmQgbW9kaWZpZXMgaXQuXG4vLyBUaGlzIGZ1bmN0aW9uIGV4cGVjdHMgdGhlIGQzLlNlbGVjdGlvbiB0byBiZSBhbiBTVkcuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdmcsIGRhdGEpIHtcbiAgLy9jb25zb2xlLmxvZyhkYXRhKTtcblxuICAvLyBTZXQgZGltZW5zaW9ucyBhbmQgbWFyZ2lucyBvZiBzdmcgKyBncmFwaFxuICBjb25zdCBtYXJnaW4gPSB7XG4gICAgdG9wOiAxMCxcbiAgICByaWdodDogMzAsXG4gICAgYm90dG9tOiA4MCxcbiAgICBsZWZ0OiA4MCxcbiAgfTtcbiAgY29uc3Qgc3ZnV2lkdGggPSA4MDA7XG4gIGNvbnN0IHN2Z0hlaWdodCA9IDUwMDtcbiAgY29uc3Qgd2lkdGggPSBzdmdXaWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICBjb25zdCBoZWlnaHQgPSBzdmdIZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcblxuICAvLyBTZXQgd2lkdGggYW5kIGhlaWdodCBvZiBzdmdcbiAgLy8gc3ZnLmF0dHIoXCJ3aWR0aFwiLCBzdmdXaWR0aCk7XG4gIC8vIHN2Zy5hdHRyKFwiaGVpZ2h0XCIsIHN2Z0hlaWdodCk7XG4gIHN2Zy5hdHRyKFwidmlld0JveFwiLCBgMCAwICR7c3ZnV2lkdGh9ICR7c3ZnSGVpZ2h0fWApO1xuICAvLyBJbm5lciBncm91cFxuICBjb25zdCBnID0gc3ZnLmFwcGVuZChcImdcIik7XG4gIGcuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpO1xuXG4gIC8vIEdldCBtaW4gYW5kIG1heCB5ZWFyXG4gIGNvbnN0IHllYXJSYW5nZSA9IGQzLmV4dGVudChkYXRhLCBkID0+IHBhcnNlSW50KGRbXCJ5ZWFyXCJdLCAxMCkpO1xuICAvL2NvbnNvbGUubG9nKHllYXJSYW5nZSk7XG5cbiAgLy8gWCBheGlzXG4gIGNvbnN0IHggPSBkM1xuICAgIC5zY2FsZUxpbmVhcigpXG4gICAgLmRvbWFpbih5ZWFyUmFuZ2UpXG4gICAgLnJhbmdlKFswLCB3aWR0aF0pO1xuXG4gIGcuYXBwZW5kKFwiZ1wiKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAuY2FsbChkMy5heGlzQm90dG9tKHgpLnRpY2tGb3JtYXQoZDMuZm9ybWF0KFwiZFwiKSkpO1xuXG4gIC8vIHNldCB0aGUgcGFyYW1ldGVycyBmb3IgdGhlIGhpc3RvZ3JhbVxuICBjb25zdCBoaXN0b2dyYW0gPSBkM1xuICAgIC5oaXN0b2dyYW0oKVxuICAgIC5kb21haW4oeC5kb21haW4oKSkgLy8gVHlwZSBhc3NlcnRpb24uIHguZG9tYWluKCkgcmV0dXJucyBudW1iZXJbXSwgYnV0IGQzLmhpc3RvZ3JhbSgpLmRvbWFpbigpIGV4cGVjdHMgW251bWJlciwgbnVtYmVyXVxuICAgIC50aHJlc2hvbGRzKHgudGlja3MoeWVhclJhbmdlWzFdIC0geWVhclJhbmdlWzBdKSk7XG5cbiAgLy8gR2V0IGhpc3RvZ3JhbSBkYXRhIGluIE51bWJlciB0eXBlLlxuICBjb25zdCB5ZWFyTGlzdCA9IGRhdGEubWFwKHRhbGsgPT4gcGFyc2VJbnQodGFsa1tcInllYXJcIl0sIDEwKSk7XG4gIC8vY29uc29sZS5sb2coeWVhckxpc3QpO1xuXG4gIC8vIFVzZSBoaXN0b2dyYW0oKSB0byBjb21wdXRlIGJpbnNcbiAgY29uc3QgYmlucyA9IGhpc3RvZ3JhbSh5ZWFyTGlzdCk7XG5cbiAgLy8gQ29tcHV0ZSB5IGF4aXMgbm93IHRoYXQgd2UgaGF2ZSBjb3VudHNcbiAgY29uc3QgeSA9IGQzXG4gICAgLnNjYWxlTGluZWFyKClcbiAgICAuZG9tYWluKFswLCBkMy5tYXgoYmlucywgZCA9PiBkLmxlbmd0aCldKVxuICAgIC5yYW5nZShbaGVpZ2h0LCAwXSk7XG4gIGcuYXBwZW5kKFwiZ1wiKS5jYWxsKGQzLmF4aXNMZWZ0KHkpKTtcblxuICAvLyBBcHBlbmQgcmVjdGFuZ2xlc1xuICBnLnNlbGVjdEFsbChcInJlY3RcIilcbiAgICAuZGF0YShiaW5zKVxuICAgIC5lbnRlcigpXG4gICAgLmFwcGVuZChcInJlY3RcIilcbiAgICAuYXR0cihcInhcIiwgMSlcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB4KGQueDApICsgXCIsXCIgKyB5KGQubGVuZ3RoKSArIFwiKVwiO1xuICAgIH0pXG4gICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4geChkLngxKSAtIHgoZC54MCkgLSAxO1xuICAgIH0pXG4gICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIGhlaWdodCAtIHkoZC5sZW5ndGgpO1xuICAgIH0pXG4gICAgLnN0eWxlKFwiZmlsbFwiLCBDT0xPUlMuVEVEX1JFRCk7XG5cbiAgLy8gQXBwZW5kIGF4aXMgbGFiZWxzXG4gIGcuYXBwZW5kKFwidGV4dFwiKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKC01MCwgMjUwKSByb3RhdGUoLTkwKVwiKVxuICAgIC5hdHRyKFwiZmlsbFwiLCBDT0xPUlMuVElUTEVfV0hJVEUpXG4gICAgLnRleHQoXCJOdW1iZXIgb2YgdGFsa3NcIik7XG4gIGcuYXBwZW5kKFwidGV4dFwiKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDMyMCwgNDUwKVwiKVxuICAgIC5hdHRyKFwiZmlsbFwiLCBDT0xPUlMuVElUTEVfV0hJVEUpXG4gICAgLnRleHQoXCJZZWFyXCIpO1xufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG5pbXBvcnQgQ09MT1JTIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCBpbWFnZVNlbGVjdG9yIGZyb20gXCIuL2ltYWdlU2VsZWN0b3JcIjtcbmltcG9ydCBUb29sVGlwIGZyb20gXCIuL1Rvb2xUaXBcIjtcblxuXG4vLyBSZXR1cm5zIHBhdGggZGF0YSBmb3IgYSByZWN0YW5nbGUgd2l0aCByb3VuZGVkIHRvcCBjb3JuZXJzLlxuLy8gVGhlIGJvdHRvbS1sZWZ0IGNvcm5lciBpcyDin6h4LHnin6kuXG5mdW5jdGlvbiB0b3BSb3VuZGVkUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMpIHtcbiAgbGV0IHBhdGggPSBcIk1cIiArIHggKyBcIixcIiArIHkgKyBcInZcIiArICgtaGVpZ2h0ICsgcmFkaXVzKTtcbiAgcGF0aCArPSBcImFcIiArIHJhZGl1cyArIFwiLFwiICsgcmFkaXVzICsgXCIgMCAwIDEgXCIgKyByYWRpdXMgKyBcIixcIiArIC1yYWRpdXM7XG4gIHBhdGggKz0gXCJoXCIgKyAod2lkdGggLSByYWRpdXMgKiAyKTtcbiAgcGF0aCArPSBcImFcIiArIHJhZGl1cyArIFwiLFwiICsgcmFkaXVzICsgXCIgMCAwIDEgXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cztcbiAgcGF0aCArPSBcInZcIiArIChoZWlnaHQgLSByYWRpdXMpICsgXCJ6XCI7XG4gIHJldHVybiBwYXRoO1xufVxuXG4vLyBBY2NlcHRzIGEgZDMuU2VsZWN0aW9uIGFzIGEgcGFyYW1ldGVyIGFuZCBtb2RpZmllcyBpdC5cbi8vIFRoaXMgZnVuY3Rpb24gZXhwZWN0cyB0aGUgZDMuU2VsZWN0aW9uIHRvIGJlIGEgZGl2LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGl2LCBkYXRhKSB7XG4gIC8vIFNldCBkaW1lbnNpb25zIGFuZCBtYXJnaW5zIG9mIHN2ZyArIGdyYXBoXG4gIGNvbnN0IG1hcmdpbiA9IHtcbiAgICB0b3A6IDEwLFxuICAgIHJpZ2h0OiAzMCxcbiAgICBib3R0b206IDgwLFxuICAgIGxlZnQ6IDgwLFxuICB9O1xuICBjb25zdCBzdmdXaWR0aCA9IDgwMDtcbiAgY29uc3Qgc3ZnSGVpZ2h0ID0gNTAwO1xuICBjb25zdCB3aWR0aCA9IHN2Z1dpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gIGNvbnN0IGhlaWdodCA9IHN2Z0hlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuICBjb25zdCBiYXJIZWlnaHQgPSBzdmdXaWR0aCAvIDMwO1xuICBjb25zdCBpY29uSGVpZ2h0ID0gYmFySGVpZ2h0ICogMC44O1xuICBjb25zdCByYXRpbmdCYXJXaWR0aCA9IGljb25IZWlnaHQ7XG4gIGNvbnN0IGljb25PZmZzZXQgPSAoYmFySGVpZ2h0IC0gaWNvbkhlaWdodCkgLyAyO1xuICBjb25zdCBwaWVPdXRlclJhZGl1cyA9IGhlaWdodCAqIDAuMjI7XG4gIGNvbnN0IHBpZUlubmVyUmFkaXVzID0gcGllT3V0ZXJSYWRpdXMgKiAwLjc4O1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNoYXJ0KCkge1xuICAgIC8vIEdldCByYXRpbmdzIGZvciBzZWxlY3RlZCB0YWxrIG9yIHRhbGtzXG4gICAgY29uc3QgZHJvcGRvd24gPSBkMy5zZWxlY3QoXCIjdGFsa1NlbGVjdG9yXCIpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWlnbm9yZVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBzZWxlY3RlZFRhbGtOYW1lID0gZHJvcGRvd24uX2dyb3Vwc1swXVswXS5vcHRpb25zW2Ryb3Bkb3duLl9ncm91cHNbMF1bMF0uc2VsZWN0ZWRJbmRleF0udmFsdWU7XG5cbiAgICAvLyBGaW5kIHNlbGVjdGVkIHJvd1xuICAgIGxldCBzZWxlY3RlZFJvdyA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZGF0YVtpXVtcIm5hbWVcIl0gPT0gc2VsZWN0ZWRUYWxrTmFtZSkge1xuICAgICAgICBzZWxlY3RlZFJvdyA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdldCByYXRpbmdzIGF0IHNlbGVjdGVkIHJvd1xuICAgIGNvbnN0IHJhd1N0cmluZyA9IGRhdGFbc2VsZWN0ZWRSb3ddW1wicmF0aW5nc1wiXTtcbiAgICBjb25zdCByYXRpbmdzU3RyaW5nID0gcmF3U3RyaW5nLnJlcGxhY2UoLycvZywgJ1wiJyk7XG4gICAgY29uc3QgcmF0aW5ncyA9IEpTT04ucGFyc2UocmF0aW5nc1N0cmluZyk7XG4gICAgcmF0aW5ncy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHJldHVybiArYltcImNvdW50XCJdIC0gK2FbXCJjb3VudFwiXTtcbiAgICB9KTtcbiAgICBjb25zdCBudW1SYXRpbmdDYXRlZ29yaWVzID0gcmF0aW5ncy5sZW5ndGg7XG4gICAgY29uc3QgcmF0aW5nc1NwYWNpbmcgPSAoc3ZnV2lkdGggLSBpY29uSGVpZ2h0ICogbnVtUmF0aW5nQ2F0ZWdvcmllcykgLyAobnVtUmF0aW5nQ2F0ZWdvcmllcyArIDEpO1xuICAgIGNvbnN0IHJhdGluZ0RvbWFpbiA9IGQzLmV4dGVudChyYXRpbmdzLCBkID0+ICsoZClbXCJjb3VudFwiXSk7XG4gICAgY29uc3QgYmFyRyA9IGQzLnNlbGVjdChcIiNyYXRpbmdzSWNvbkJhckdyb3VwXCIpO1xuICAgIGNvbnN0IHlTY2FsZSA9IGQzXG4gICAgICAuc2NhbGVMaW5lYXIoKVxuICAgICAgLmRvbWFpbihbMCwgcmF0aW5nRG9tYWluWzFdXSlcbiAgICAgIC5yYW5nZShbMCwgaGVpZ2h0IC0gaWNvbkhlaWdodCAvIDJdKTtcblxuICAgIGNvbnN0IHRpcCA9IFRvb2xUaXAoKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImQzLXRpcFwiKVxuICAgICAgLmh0bWwoZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gYCR7ZC5uYW1lfTogJHtkLmNvdW50fWA7XG4gICAgICB9KTtcblxuICAgIC8vIEFkZCBiYXJzXG4gICAgY29uc3QgcmF0aW5nc0cgPSBiYXJHLnNlbGVjdEFsbChcIi5yYXRpbmdzR1wiKS5kYXRhKHJhdGluZ3MsIGQgPT4gKGQpW1wibmFtZVwiXSk7XG5cbiAgICBjb25zdCByYXRpbmdzRW50ZXIgPSByYXRpbmdzR1xuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsIFwicmF0aW5nc0dcIilcbiAgICAgIC5jYWxsKHRpcClcbiAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCB0aXAuc2hvdylcbiAgICAgIC5vbihcIm1vdXNlb3V0XCIsIHRpcC5oaWRlKTtcblxuICAgIHJhdGluZ3NFbnRlclxuICAgICAgLmFwcGVuZChcInBhdGhcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJyYXRpbmdCYXJcIilcbiAgICAgIC5hdHRyKFwiZmlsbFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHN3aXRjaCAoKGQpW1wibmFtZVwiXS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgY2FzZSBcImNvbmZ1c2luZ1wiOlxuICAgICAgICAgIGNhc2UgXCJsb25nd2luZGVkXCI6XG4gICAgICAgICAgY2FzZSBcInVuY29udmluY2luZ1wiOlxuICAgICAgICAgICAgcmV0dXJuIENPTE9SUy5CUklHSFRfUkVEO1xuICAgICAgICAgIGNhc2UgXCJvYm5veGlvdXNcIjpcbiAgICAgICAgICBjYXNlIFwib2tcIjpcbiAgICAgICAgICAgIHJldHVybiBDT0xPUlMuQlJJR0hUX09SQU5HRTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIENPTE9SUy5CUklHSFRfR1JFRU47XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgcmF0aW5nc0VudGVyXG4gICAgICAuYXBwZW5kKFwiaW1hZ2VcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJpY29uLWltYWdlXCIpXG4gICAgICAuYXR0cihcImhyZWZcIiwgZCA9PiBpbWFnZVNlbGVjdG9yKChkKVtcIm5hbWVcIl0pKVxuICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBpY29uSGVpZ2h0KVxuICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaWNvbkhlaWdodClcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBpY29uT2Zmc2V0ICsgXCIpXCIpO1xuXG4gICAgcmF0aW5nc0dcbiAgICAgIC5tZXJnZShyYXRpbmdzRW50ZXIpXG4gICAgICAudHJhbnNpdGlvbigpXG4gICAgICAuZHVyYXRpb24oNzUwKVxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQsIGkpID0+IFwidHJhbnNsYXRlKFwiICsgKHJhdGluZ3NTcGFjaW5nICogKGkgKyAxKSArIGljb25IZWlnaHQgKiBpKSArIFwiLDApXCIpXG4gICAgICAuc2VsZWN0KFwiLnJhdGluZ0JhclwiKVxuICAgICAgLmF0dHIoXCJkXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0geVNjYWxlKCsoZClbXCJjb3VudFwiXSk7XG4gICAgICAgIHJldHVybiB0b3BSb3VuZGVkUmVjdCgwLCAwLCByYXRpbmdCYXJXaWR0aCwgaGVpZ2h0LCBiYXJIZWlnaHQgLyA2KTtcbiAgICAgIH0pO1xuXG4gICAgLy8gQWRkIGN1bXVsYXRpdmUgcGllIGNoYXJ0XG4gICAgLy8gQ29uc29saWRhdGUgZGF0YVxuICAgIGNvbnN0IHBpZURhdGFSYXcgPSB7IGdvb2Q6IDAsIGJhZDogMCwgb2s6IDAgfTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhdGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN3aXRjaCAoKHJhdGluZ3NbaV0pW1wibmFtZVwiXS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIGNhc2UgXCJjb25mdXNpbmdcIjpcbiAgICAgICAgY2FzZSBcImxvbmd3aW5kZWRcIjpcbiAgICAgICAgY2FzZSBcInVuY29udmluY2luZ1wiOlxuICAgICAgICAgIHBpZURhdGFSYXcuYmFkICs9ICsocmF0aW5nc1tpXSlbXCJjb3VudFwiXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm9ibm94aW91c1wiOlxuICAgICAgICBjYXNlIFwib2tcIjpcbiAgICAgICAgICBwaWVEYXRhUmF3Lm9rICs9ICsocmF0aW5nc1tpXSlbXCJjb3VudFwiXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBwaWVEYXRhUmF3Lmdvb2QgKz0gKyhyYXRpbmdzW2ldKVtcImNvdW50XCJdO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB2b3RlVG90YWwgPSBwaWVEYXRhUmF3Lmdvb2QgKyBwaWVEYXRhUmF3LmJhZCArIHBpZURhdGFSYXcub2s7XG5cbiAgICBjb25zdCBwaWVUaXAgPSBUb29sVGlwKClcbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkMy10aXBcIilcbiAgICAgIC5odG1sKChkKSA9PiB7XG4gICAgICAgIHJldHVybiBgJHtkLmRhdGEua2V5LnRvVXBwZXJDYXNlKCl9OiAkeygoK2QuZGF0YS52YWx1ZSAvIGQudm90ZVRvdGFsKSAqIDEwMCkudG9GaXhlZCgxKX0lYDtcbiAgICAgIH0pO1xuXG4gICAgLy8gc2V0IHRoZSBjb2xvciBzY2FsZVxuICAgIGNvbnN0IGNvbG9yID0gZDNcbiAgICAgIC5zY2FsZU9yZGluYWwoKVxuICAgICAgLmRvbWFpbihbXCJnb29kXCIsIFwiYmFkXCIsIFwib2tcIl0pXG4gICAgICAucmFuZ2UoW0NPTE9SUy5CUklHSFRfR1JFRU4sIENPTE9SUy5CUklHSFRfUkVELCBDT0xPUlMuQlJJR0hUX09SQU5HRV0pO1xuXG4gICAgY29uc3QgcGllID0gZDMucGllKCkudmFsdWUoZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIGQudmFsdWU7XG4gICAgfSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtaWdub3JlXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IHBpZURhdGEgPSBwaWUoZDMuZW50cmllcyhwaWVEYXRhUmF3KSk7XG4gICAgcGllRGF0YS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICBkLnZvdGVUb3RhbCA9IHZvdGVUb3RhbDtcbiAgICB9KTtcblxuICAgIGNvbnN0IHBpZUVudGVyID0gZDNcbiAgICAgIC5zZWxlY3QoXCIucmF0aW5nc1NWR1wiKVxuICAgICAgLnNlbGVjdEFsbChcIi5waWVDaGFydFwiKVxuICAgICAgLmRhdGEocGllRGF0YSwgZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gZC5kYXRhLmtleTtcbiAgICAgIH0pXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZChcInBhdGhcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJwaWVDaGFydFwiKVxuICAgICAgLmF0dHIoXCJmaWxsXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGNvbG9yKGQuZGF0YS5rZXkpO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgKHN2Z1dpZHRoIC0gbWFyZ2luLnJpZ2h0IC0gcGllT3V0ZXJSYWRpdXMpICsgXCIsXCIgKyAobWFyZ2luLnRvcCAqIDMgKyBwaWVPdXRlclJhZGl1cykgKyBcIilcIilcbiAgICAgIC5jYWxsKHBpZVRpcClcbiAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBwaWVUaXAuc2hvdylcbiAgICAgIC5vbihcIm1vdXNlb3V0XCIsIHBpZVRpcC5oaWRlKTtcblxuICAgIGNvbnN0IHBpZVVwZGF0ZSA9IGQzXG4gICAgICAuc2VsZWN0KFwiLnJhdGluZ3NTVkdcIilcbiAgICAgIC5zZWxlY3RBbGwoXCIucGllQ2hhcnRcIilcbiAgICAgIC5kYXRhKHBpZURhdGEsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGQuZGF0YS5rZXk7XG4gICAgICB9KTtcblxuICAgIHBpZVVwZGF0ZVxuICAgICAgLm1lcmdlKHBpZUVudGVyKVxuICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgLmR1cmF0aW9uKDc1MClcbiAgICAgIC5hdHRyKFxuICAgICAgICBcImRcIixcbiAgICAgICAgZDNcbiAgICAgICAgICAuYXJjKClcbiAgICAgICAgICAuaW5uZXJSYWRpdXMocGllSW5uZXJSYWRpdXMpXG4gICAgICAgICAgLm91dGVyUmFkaXVzKHBpZU91dGVyUmFkaXVzKSxcbiAgICAgICk7XG4gIH1cblxuICAvLyBTZXQgdmlzIHRpdGxlXG4gIGRpdi5hcHBlbmQoXCJoMlwiKS50ZXh0KFwiVGFsayBSYXRpbmdzXCIpO1xuICBkaXYuYXBwZW5kKFwiaHJcIikuYXR0cihcImNvbG9yXCIsIENPTE9SUy5MSUdIVF9HUkVZKTtcblxuICAvLyBBZGQgdGFsayBzZWxlY3RvclxuICBjb25zdCB0YWxrU2VsZWN0b3IgPSBkaXZcbiAgICAuYXBwZW5kKFwic2VsZWN0XCIpXG4gICAgLmF0dHIoXCJpZFwiLCBcInRhbGtTZWxlY3RvclwiKVxuICAgIC5zdHlsZShcIndpZHRoXCIsIHdpZHRoICsgXCJweFwiKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgdGFsa1NlbGVjdG9yXG4gICAgICAuYXBwZW5kKFwib3B0aW9uXCIpXG4gICAgICAuYXR0cihcInZhbHVlXCIsIGRhdGFbaV1bXCJuYW1lXCJdKVxuICAgICAgLnRleHQoZGF0YVtpXVtcIm5hbWVcIl0pO1xuICB9XG4gIHRhbGtTZWxlY3Rvci5vbihcImNoYW5nZVwiLCB1cGRhdGVDaGFydCk7XG5cbiAgLy8gQ3JlYXRlIHN2Z1xuICBjb25zdCBzdmcgPSBkaXZcbiAgICAuYXBwZW5kKFwic3ZnXCIpXG4gICAgLmF0dHIoXCJ2aWV3Qm94XCIsIGAwIDAgJHtzdmdXaWR0aH0gJHtzdmdIZWlnaHR9YClcbiAgICAuYXR0cihcImNsYXNzXCIsIFwicmF0aW5nc1NWR1wiKTtcblxuICAvLyBDcmVhdGUgYmxhbmsgcmF0aW5ncyBiYXJcbiAgY29uc3QgYmFyID0gc3ZnXG4gICAgLmFwcGVuZChcImdcIilcbiAgICAuYXR0cihcImlkXCIsIFwicmF0aW5nc0ljb25CYXJHcm91cFwiKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyAoc3ZnSGVpZ2h0IC0gbWFyZ2luLmJvdHRvbSkgKyBcIilcIik7XG4gIGJhclxuICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgLmF0dHIoXCJpZFwiLCBcImljb25CYXJcIilcbiAgICAuYXR0cihcIndpZHRoXCIsIHN2Z1dpZHRoKVxuICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGJhckhlaWdodClcbiAgICAuYXR0cihcImZpbGxcIiwgQ09MT1JTLkxJR0hUX0dSRVkpXG4gICAgLmF0dHIoXCJyeFwiLCBiYXJIZWlnaHQgLyA2KTtcblxuICB1cGRhdGVDaGFydCgpO1xufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG5pbXBvcnQgQ09MT1JTIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuLy8gQWNjZXB0cyBhIGQzLlNlbGVjdGlvbiBhcyBhIHBhcmFtZXRlciBhbmQgbW9kaWZpZXMgaXQuXG4vLyBUaGlzIGZ1bmN0aW9uIGV4cGVjdHMgdGhlIGQzLlNlbGVjdGlvbiB0byBiZSBhbiBTVkcuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdmcsIGRhdGEpIHtcbiAgLy9jb25zb2xlLmxvZyhkYXRhKTtcblxuICAvLyBTZXQgZGltZW5zaW9ucyBhbmQgbWFyZ2lucyBvZiBzdmcgKyBncmFwaFxuICBjb25zdCBtYXJnaW4gPSB7XG4gICAgdG9wOiAxMCxcbiAgICByaWdodDogMzAsXG4gICAgYm90dG9tOiA4MCxcbiAgICBsZWZ0OiA4MCxcbiAgfTtcbiAgY29uc3Qgc3ZnV2lkdGggPSA4MDA7XG4gIGNvbnN0IHN2Z0hlaWdodCA9IDUwMDtcbiAgY29uc3Qgd2lkdGggPSBzdmdXaWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICBjb25zdCBoZWlnaHQgPSBzdmdIZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcblxuICAvLyBTZXQgd2lkdGggYW5kIGhlaWdodCBvZiBzdmdcbiAgLy8gc3ZnLmF0dHIoXCJ3aWR0aFwiLCBzdmdXaWR0aCk7XG4gIC8vIHN2Zy5hdHRyKFwiaGVpZ2h0XCIsIHN2Z0hlaWdodCk7XG4gIHN2Zy5hdHRyKFwidmlld0JveFwiLCBgMCAwICR7c3ZnV2lkdGh9ICR7c3ZnSGVpZ2h0fWApO1xuICAvLyBJbm5lciBncm91cFxuICBjb25zdCBnID0gc3ZnLmFwcGVuZChcImdcIik7XG4gIGcuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpO1xuXG4gIC8vIEdldCBtaW4gYW5kIG1heCB5ZWFyXG4gIGNvbnN0IHllYXJSYW5nZSA9IGQzLmV4dGVudChkYXRhLCBkID0+IHBhcnNlSW50KGRbXCJsZXZlbFwiXSwgMTApKTtcbiAgLy9jb25zb2xlLmxvZyh5ZWFyUmFuZ2UpO1xuXG4gIC8vIFggYXhpc1xuICBjb25zdCB4ID0gZDNcbiAgICAuc2NhbGVMaW5lYXIoKVxuICAgIC5kb21haW4oeWVhclJhbmdlKVxuICAgIC5yYW5nZShbMCwgd2lkdGhdKTtcblxuICBnLmFwcGVuZChcImdcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICsgXCIpXCIpXG4gICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4KS50aWNrRm9ybWF0KGQzLmZvcm1hdChcImRcIikpKTtcblxuICAvLyBzZXQgdGhlIHBhcmFtZXRlcnMgZm9yIHRoZSBoaXN0b2dyYW1cbiAgY29uc3QgaGlzdG9ncmFtID0gZDNcbiAgICAuaGlzdG9ncmFtKClcbiAgICAuZG9tYWluKHguZG9tYWluKCkpIC8vIFR5cGUgYXNzZXJ0aW9uLiB4LmRvbWFpbigpIHJldHVybnMgbnVtYmVyW10sIGJ1dCBkMy5oaXN0b2dyYW0oKS5kb21haW4oKSBleHBlY3RzIFtudW1iZXIsIG51bWJlcl1cbiAgICAudGhyZXNob2xkcyh4LnRpY2tzKDQwKSk7XG5cbiAgLy8gR2V0IGhpc3RvZ3JhbSBkYXRhIGluIE51bWJlciB0eXBlLlxuICBjb25zdCB5ZWFyTGlzdCA9IGRhdGEubWFwKHRhbGsgPT4gcGFyc2VJbnQodGFsa1tcImxldmVsXCJdLCAxMCkpO1xuICAvL2NvbnNvbGUubG9nKHllYXJMaXN0KTtcblxuICAvLyBVc2UgaGlzdG9ncmFtKCkgdG8gY29tcHV0ZSBiaW5zXG4gIGNvbnN0IGJpbnMgPSBoaXN0b2dyYW0oeWVhckxpc3QpO1xuXG4gIC8vIENvbXB1dGUgeSBheGlzIG5vdyB0aGF0IHdlIGhhdmUgY291bnRzXG4gIGNvbnN0IHkgPSBkM1xuICAgIC5zY2FsZUxpbmVhcigpXG4gICAgLmRvbWFpbihbMCwgZDMubWF4KGJpbnMsIGQgPT4gZC5sZW5ndGgpXSlcbiAgICAucmFuZ2UoW2hlaWdodCwgMF0pO1xuICBnLmFwcGVuZChcImdcIikuY2FsbChkMy5heGlzTGVmdCh5KSk7XG5cbiAgLy8gQXBwZW5kIHJlY3RhbmdsZXNcbiAgZy5zZWxlY3RBbGwoXCJyZWN0XCIpXG4gICAgLmRhdGEoYmlucylcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgLmF0dHIoXCJ4XCIsIDEpXG4gICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgeChkLngwKSArIFwiLFwiICsgeShkLmxlbmd0aCkgKyBcIilcIjtcbiAgICB9KVxuICAgIC5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIHgoZC54MSkgLSB4KGQueDApIC0gMTtcbiAgICB9KVxuICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiBoZWlnaHQgLSB5KGQubGVuZ3RoKTtcbiAgICB9KVxuICAgIC5zdHlsZShcImZpbGxcIiwgQ09MT1JTLlRFRF9SRUQpO1xuXG4gIC8vIEFwcGVuZCBheGlzIGxhYmVsc1xuICBnLmFwcGVuZChcInRleHRcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgtNTAsIDI1MCkgcm90YXRlKC05MClcIilcbiAgICAuYXR0cihcImZpbGxcIiwgQ09MT1JTLlRJVExFX1dISVRFKVxuICAgIC50ZXh0KFwiTnVtYmVyIG9mIHRhbGtzXCIpO1xuICBnLmFwcGVuZChcInRleHRcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgzMjAsIDQ1MClcIilcbiAgICAuYXR0cihcImZpbGxcIiwgQ09MT1JTLlRJVExFX1dISVRFKVxuICAgIC50ZXh0KFwiUmVhZGluZyBMZXZlbFwiKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=
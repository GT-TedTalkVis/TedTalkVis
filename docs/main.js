!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=10)}([,,,,,,function(t,e,n){
/*!
  * Bootstrap v4.3.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){o(t,e,n[e])}))}return t}e=e&&e.hasOwnProperty("default")?e.default:e,n=n&&n.hasOwnProperty("default")?n.default:n;var s="transitionend";function u(t){var n=this,r=!1;return e(this).one(l.TRANSITION_END,(function(){r=!0})),setTimeout((function(){r||l.triggerTransitionEnd(n)}),t),this}var l={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");if(!e||"#"===e){var n=t.getAttribute("href");e=n&&"#"!==n?n.trim():""}try{return document.querySelector(e)?e:null}catch(t){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var n=e(t).css("transition-duration"),r=e(t).css("transition-delay"),i=parseFloat(n),o=parseFloat(r);return i||o?(n=n.split(",")[0],r=r.split(",")[0],1e3*(parseFloat(n)+parseFloat(r))):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){e(t).trigger(s)},supportsTransitionEnd:function(){return Boolean(s)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var i=n[r],o=e[r],a=o&&l.isElement(o)?"element":(s=o,{}.toString.call(s).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(i).test(a))throw new Error(t.toUpperCase()+': Option "'+r+'" provided type "'+a+'" but expected type "'+i+'".')}var s},findShadowRoot:function(t){if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){var e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?l.findShadowRoot(t.parentNode):null}};e.fn.emulateTransitionEnd=u,e.event.special[l.TRANSITION_END]={bindType:s,delegateType:s,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}};var c=e.fn.alert,f={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},h="alert",p="fade",d="show",g=function(){function t(t){this._element=t}var n=t.prototype;return n.close=function(t){var e=this._element;t&&(e=this._getRootElement(t)),this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},n.dispose=function(){e.removeData(this._element,"bs.alert"),this._element=null},n._getRootElement=function(t){var n=l.getSelectorFromElement(t),r=!1;return n&&(r=document.querySelector(n)),r||(r=e(t).closest("."+h)[0]),r},n._triggerCloseEvent=function(t){var n=e.Event(f.CLOSE);return e(t).trigger(n),n},n._removeElement=function(t){var n=this;if(e(t).removeClass(d),e(t).hasClass(p)){var r=l.getTransitionDurationFromElement(t);e(t).one(l.TRANSITION_END,(function(e){return n._destroyElement(t,e)})).emulateTransitionEnd(r)}else this._destroyElement(t)},n._destroyElement=function(t){e(t).detach().trigger(f.CLOSED).remove()},t._jQueryInterface=function(n){return this.each((function(){var r=e(this),i=r.data("bs.alert");i||(i=new t(this),r.data("bs.alert",i)),"close"===n&&i[n](this)}))},t._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),t}();e(document).on(f.CLICK_DATA_API,'[data-dismiss="alert"]',g._handleDismiss(new g)),e.fn.alert=g._jQueryInterface,e.fn.alert.Constructor=g,e.fn.alert.noConflict=function(){return e.fn.alert=c,g._jQueryInterface};var m=e.fn.button,v="active",_="btn",y="focus",x='[data-toggle^="button"]',b='[data-toggle="buttons"]',w='input:not([type="hidden"])',T=".active",E=".btn",C={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},A=function(){function t(t){this._element=t}var n=t.prototype;return n.toggle=function(){var t=!0,n=!0,r=e(this._element).closest(b)[0];if(r){var i=this._element.querySelector(w);if(i){if("radio"===i.type)if(i.checked&&this._element.classList.contains(v))t=!1;else{var o=r.querySelector(T);o&&e(o).removeClass(v)}if(t){if(i.hasAttribute("disabled")||r.hasAttribute("disabled")||i.classList.contains("disabled")||r.classList.contains("disabled"))return;i.checked=!this._element.classList.contains(v),e(i).trigger("change")}i.focus(),n=!1}}n&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(v)),t&&e(this._element).toggleClass(v)},n.dispose=function(){e.removeData(this._element,"bs.button"),this._element=null},t._jQueryInterface=function(n){return this.each((function(){var r=e(this).data("bs.button");r||(r=new t(this),e(this).data("bs.button",r)),"toggle"===n&&r[n]()}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),t}();e(document).on(C.CLICK_DATA_API,x,(function(t){t.preventDefault();var n=t.target;e(n).hasClass(_)||(n=e(n).closest(E)),A._jQueryInterface.call(e(n),"toggle")})).on(C.FOCUS_BLUR_DATA_API,x,(function(t){var n=e(t.target).closest(E)[0];e(n).toggleClass(y,/^focus(in)?$/.test(t.type))})),e.fn.button=A._jQueryInterface,e.fn.button.Constructor=A,e.fn.button.noConflict=function(){return e.fn.button=m,A._jQueryInterface};var S="carousel",N=".bs.carousel",D=e.fn[S],k={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},M={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},I="next",O="prev",L="left",P="right",j={SLIDE:"slide.bs.carousel",SLID:"slid.bs.carousel",KEYDOWN:"keydown.bs.carousel",MOUSEENTER:"mouseenter.bs.carousel",MOUSELEAVE:"mouseleave.bs.carousel",TOUCHSTART:"touchstart.bs.carousel",TOUCHMOVE:"touchmove.bs.carousel",TOUCHEND:"touchend.bs.carousel",POINTERDOWN:"pointerdown.bs.carousel",POINTERUP:"pointerup.bs.carousel",DRAG_START:"dragstart.bs.carousel",LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},R="carousel",H="active",q="slide",F="carousel-item-right",U="carousel-item-left",B="carousel-item-next",W="carousel-item-prev",Y="pointer-event",V={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",ITEM_IMG:".carousel-item img",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},$={TOUCH:"touch",PEN:"pen"},z=function(){function t(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._element=t,this._indicatorsElement=this._element.querySelector(V.INDICATORS),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}var n=t.prototype;return n.next=function(){this._isSliding||this._slide(I)},n.nextWhenVisible=function(){!document.hidden&&e(this._element).is(":visible")&&"hidden"!==e(this._element).css("visibility")&&this.next()},n.prev=function(){this._isSliding||this._slide(O)},n.pause=function(t){t||(this._isPaused=!0),this._element.querySelector(V.NEXT_PREV)&&(l.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},n.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},n.to=function(t){var n=this;this._activeElement=this._element.querySelector(V.ACTIVE_ITEM);var r=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)e(this._element).one(j.SLID,(function(){return n.to(t)}));else{if(r===t)return this.pause(),void this.cycle();var i=t>r?I:O;this._slide(i,this._items[t])}},n.dispose=function(){e(this._element).off(N),e.removeData(this._element,"bs.carousel"),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},n._getConfig=function(t){return t=a({},k,t),l.typeCheckConfig(S,t,M),t},n._handleSwipe=function(){var t=Math.abs(this.touchDeltaX);if(!(t<=40)){var e=t/this.touchDeltaX;e>0&&this.prev(),e<0&&this.next()}},n._addEventListeners=function(){var t=this;this._config.keyboard&&e(this._element).on(j.KEYDOWN,(function(e){return t._keydown(e)})),"hover"===this._config.pause&&e(this._element).on(j.MOUSEENTER,(function(e){return t.pause(e)})).on(j.MOUSELEAVE,(function(e){return t.cycle(e)})),this._config.touch&&this._addTouchEventListeners()},n._addTouchEventListeners=function(){var t=this;if(this._touchSupported){var n=function(e){t._pointerEvent&&$[e.originalEvent.pointerType.toUpperCase()]?t.touchStartX=e.originalEvent.clientX:t._pointerEvent||(t.touchStartX=e.originalEvent.touches[0].clientX)},r=function(e){t._pointerEvent&&$[e.originalEvent.pointerType.toUpperCase()]&&(t.touchDeltaX=e.originalEvent.clientX-t.touchStartX),t._handleSwipe(),"hover"===t._config.pause&&(t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout((function(e){return t.cycle(e)}),500+t._config.interval))};e(this._element.querySelectorAll(V.ITEM_IMG)).on(j.DRAG_START,(function(t){return t.preventDefault()})),this._pointerEvent?(e(this._element).on(j.POINTERDOWN,(function(t){return n(t)})),e(this._element).on(j.POINTERUP,(function(t){return r(t)})),this._element.classList.add(Y)):(e(this._element).on(j.TOUCHSTART,(function(t){return n(t)})),e(this._element).on(j.TOUCHMOVE,(function(e){return function(e){e.originalEvent.touches&&e.originalEvent.touches.length>1?t.touchDeltaX=0:t.touchDeltaX=e.originalEvent.touches[0].clientX-t.touchStartX}(e)})),e(this._element).on(j.TOUCHEND,(function(t){return r(t)})))}},n._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},n._getItemIndex=function(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(V.ITEM)):[],this._items.indexOf(t)},n._getItemByDirection=function(t,e){var n=t===I,r=t===O,i=this._getItemIndex(e),o=this._items.length-1;if((r&&0===i||n&&i===o)&&!this._config.wrap)return e;var a=(i+(t===O?-1:1))%this._items.length;return-1===a?this._items[this._items.length-1]:this._items[a]},n._triggerSlideEvent=function(t,n){var r=this._getItemIndex(t),i=this._getItemIndex(this._element.querySelector(V.ACTIVE_ITEM)),o=e.Event(j.SLIDE,{relatedTarget:t,direction:n,from:i,to:r});return e(this._element).trigger(o),o},n._setActiveIndicatorElement=function(t){if(this._indicatorsElement){var n=[].slice.call(this._indicatorsElement.querySelectorAll(V.ACTIVE));e(n).removeClass(H);var r=this._indicatorsElement.children[this._getItemIndex(t)];r&&e(r).addClass(H)}},n._slide=function(t,n){var r,i,o,a=this,s=this._element.querySelector(V.ACTIVE_ITEM),u=this._getItemIndex(s),c=n||s&&this._getItemByDirection(t,s),f=this._getItemIndex(c),h=Boolean(this._interval);if(t===I?(r=U,i=B,o=L):(r=F,i=W,o=P),c&&e(c).hasClass(H))this._isSliding=!1;else if(!this._triggerSlideEvent(c,o).isDefaultPrevented()&&s&&c){this._isSliding=!0,h&&this.pause(),this._setActiveIndicatorElement(c);var p=e.Event(j.SLID,{relatedTarget:c,direction:o,from:u,to:f});if(e(this._element).hasClass(q)){e(c).addClass(i),l.reflow(c),e(s).addClass(r),e(c).addClass(r);var d=parseInt(c.getAttribute("data-interval"),10);d?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=d):this._config.interval=this._config.defaultInterval||this._config.interval;var g=l.getTransitionDurationFromElement(s);e(s).one(l.TRANSITION_END,(function(){e(c).removeClass(r+" "+i).addClass(H),e(s).removeClass(H+" "+i+" "+r),a._isSliding=!1,setTimeout((function(){return e(a._element).trigger(p)}),0)})).emulateTransitionEnd(g)}else e(s).removeClass(H),e(c).addClass(H),this._isSliding=!1,e(this._element).trigger(p);h&&this.cycle()}},t._jQueryInterface=function(n){return this.each((function(){var r=e(this).data("bs.carousel"),i=a({},k,e(this).data());"object"==typeof n&&(i=a({},i,n));var o="string"==typeof n?n:i.slide;if(r||(r=new t(this,i),e(this).data("bs.carousel",r)),"number"==typeof n)r.to(n);else if("string"==typeof o){if(void 0===r[o])throw new TypeError('No method named "'+o+'"');r[o]()}else i.interval&&i.ride&&(r.pause(),r.cycle())}))},t._dataApiClickHandler=function(n){var r=l.getSelectorFromElement(this);if(r){var i=e(r)[0];if(i&&e(i).hasClass(R)){var o=a({},e(i).data(),e(this).data()),s=this.getAttribute("data-slide-to");s&&(o.interval=!1),t._jQueryInterface.call(e(i),o),s&&e(i).data("bs.carousel").to(s),n.preventDefault()}}},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return k}}]),t}();e(document).on(j.CLICK_DATA_API,V.DATA_SLIDE,z._dataApiClickHandler),e(window).on(j.LOAD_DATA_API,(function(){for(var t=[].slice.call(document.querySelectorAll(V.DATA_RIDE)),n=0,r=t.length;n<r;n++){var i=e(t[n]);z._jQueryInterface.call(i,i.data())}})),e.fn[S]=z._jQueryInterface,e.fn[S].Constructor=z,e.fn[S].noConflict=function(){return e.fn[S]=D,z._jQueryInterface};var G="collapse",X=e.fn[G],K={toggle:!0,parent:""},Q={toggle:"boolean",parent:"(string|element)"},Z={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},J="show",tt="collapse",et="collapsing",nt="collapsed",rt="width",it="height",ot={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},at=function(){function t(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(ot.DATA_TOGGLE)),r=0,i=n.length;r<i;r++){var o=n[r],a=l.getSelectorFromElement(o),s=[].slice.call(document.querySelectorAll(a)).filter((function(e){return e===t}));null!==a&&s.length>0&&(this._selector=a,this._triggerArray.push(o))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var n=t.prototype;return n.toggle=function(){e(this._element).hasClass(J)?this.hide():this.show()},n.show=function(){var n,r,i=this;if(!(this._isTransitioning||e(this._element).hasClass(J)||(this._parent&&0===(n=[].slice.call(this._parent.querySelectorAll(ot.ACTIVES)).filter((function(t){return"string"==typeof i._config.parent?t.getAttribute("data-parent")===i._config.parent:t.classList.contains(tt)}))).length&&(n=null),n&&(r=e(n).not(this._selector).data("bs.collapse"))&&r._isTransitioning))){var o=e.Event(Z.SHOW);if(e(this._element).trigger(o),!o.isDefaultPrevented()){n&&(t._jQueryInterface.call(e(n).not(this._selector),"hide"),r||e(n).data("bs.collapse",null));var a=this._getDimension();e(this._element).removeClass(tt).addClass(et),this._element.style[a]=0,this._triggerArray.length&&e(this._triggerArray).removeClass(nt).attr("aria-expanded",!0),this.setTransitioning(!0);var s="scroll"+(a[0].toUpperCase()+a.slice(1)),u=l.getTransitionDurationFromElement(this._element);e(this._element).one(l.TRANSITION_END,(function(){e(i._element).removeClass(et).addClass(tt).addClass(J),i._element.style[a]="",i.setTransitioning(!1),e(i._element).trigger(Z.SHOWN)})).emulateTransitionEnd(u),this._element.style[a]=this._element[s]+"px"}}},n.hide=function(){var t=this;if(!this._isTransitioning&&e(this._element).hasClass(J)){var n=e.Event(Z.HIDE);if(e(this._element).trigger(n),!n.isDefaultPrevented()){var r=this._getDimension();this._element.style[r]=this._element.getBoundingClientRect()[r]+"px",l.reflow(this._element),e(this._element).addClass(et).removeClass(tt).removeClass(J);var i=this._triggerArray.length;if(i>0)for(var o=0;o<i;o++){var a=this._triggerArray[o],s=l.getSelectorFromElement(a);null!==s&&(e([].slice.call(document.querySelectorAll(s))).hasClass(J)||e(a).addClass(nt).attr("aria-expanded",!1))}this.setTransitioning(!0),this._element.style[r]="";var u=l.getTransitionDurationFromElement(this._element);e(this._element).one(l.TRANSITION_END,(function(){t.setTransitioning(!1),e(t._element).removeClass(et).addClass(tt).trigger(Z.HIDDEN)})).emulateTransitionEnd(u)}}},n.setTransitioning=function(t){this._isTransitioning=t},n.dispose=function(){e.removeData(this._element,"bs.collapse"),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},n._getConfig=function(t){return(t=a({},K,t)).toggle=Boolean(t.toggle),l.typeCheckConfig(G,t,Q),t},n._getDimension=function(){return e(this._element).hasClass(rt)?rt:it},n._getParent=function(){var n,r=this;l.isElement(this._config.parent)?(n=this._config.parent,void 0!==this._config.parent.jquery&&(n=this._config.parent[0])):n=document.querySelector(this._config.parent);var i='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',o=[].slice.call(n.querySelectorAll(i));return e(o).each((function(e,n){r._addAriaAndCollapsedClass(t._getTargetFromElement(n),[n])})),n},n._addAriaAndCollapsedClass=function(t,n){var r=e(t).hasClass(J);n.length&&e(n).toggleClass(nt,!r).attr("aria-expanded",r)},t._getTargetFromElement=function(t){var e=l.getSelectorFromElement(t);return e?document.querySelector(e):null},t._jQueryInterface=function(n){return this.each((function(){var r=e(this),i=r.data("bs.collapse"),o=a({},K,r.data(),"object"==typeof n&&n?n:{});if(!i&&o.toggle&&/show|hide/.test(n)&&(o.toggle=!1),i||(i=new t(this,o),r.data("bs.collapse",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return K}}]),t}();e(document).on(Z.CLICK_DATA_API,ot.DATA_TOGGLE,(function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var n=e(this),r=l.getSelectorFromElement(this),i=[].slice.call(document.querySelectorAll(r));e(i).each((function(){var t=e(this),r=t.data("bs.collapse")?"toggle":n.data();at._jQueryInterface.call(t,r)}))})),e.fn[G]=at._jQueryInterface,e.fn[G].Constructor=at,e.fn[G].noConflict=function(){return e.fn[G]=X,at._jQueryInterface};var st="dropdown",ut=e.fn[st],lt=new RegExp("38|40|27"),ct={HIDE:"hide.bs.dropdown",HIDDEN:"hidden.bs.dropdown",SHOW:"show.bs.dropdown",SHOWN:"shown.bs.dropdown",CLICK:"click.bs.dropdown",CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},ft="disabled",ht="show",pt="dropup",dt="dropright",gt="dropleft",mt="dropdown-menu-right",vt="position-static",_t='[data-toggle="dropdown"]',yt=".dropdown form",xt=".dropdown-menu",bt=".navbar-nav",wt=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",Tt="top-start",Et="top-end",Ct="bottom-start",At="bottom-end",St="right-start",Nt="left-start",Dt={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},kt={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},Mt=function(){function t(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var r=t.prototype;return r.toggle=function(){if(!this._element.disabled&&!e(this._element).hasClass(ft)){var r=t._getParentFromElement(this._element),i=e(this._menu).hasClass(ht);if(t._clearMenus(),!i){var o={relatedTarget:this._element},a=e.Event(ct.SHOW,o);if(e(r).trigger(a),!a.isDefaultPrevented()){if(!this._inNavbar){if(void 0===n)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var s=this._element;"parent"===this._config.reference?s=r:l.isElement(this._config.reference)&&(s=this._config.reference,void 0!==this._config.reference.jquery&&(s=this._config.reference[0])),"scrollParent"!==this._config.boundary&&e(r).addClass(vt),this._popper=new n(s,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===e(r).closest(bt).length&&e(document.body).children().on("mouseover",null,e.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),e(this._menu).toggleClass(ht),e(r).toggleClass(ht).trigger(e.Event(ct.SHOWN,o))}}}},r.show=function(){if(!(this._element.disabled||e(this._element).hasClass(ft)||e(this._menu).hasClass(ht))){var n={relatedTarget:this._element},r=e.Event(ct.SHOW,n),i=t._getParentFromElement(this._element);e(i).trigger(r),r.isDefaultPrevented()||(e(this._menu).toggleClass(ht),e(i).toggleClass(ht).trigger(e.Event(ct.SHOWN,n)))}},r.hide=function(){if(!this._element.disabled&&!e(this._element).hasClass(ft)&&e(this._menu).hasClass(ht)){var n={relatedTarget:this._element},r=e.Event(ct.HIDE,n),i=t._getParentFromElement(this._element);e(i).trigger(r),r.isDefaultPrevented()||(e(this._menu).toggleClass(ht),e(i).toggleClass(ht).trigger(e.Event(ct.HIDDEN,n)))}},r.dispose=function(){e.removeData(this._element,"bs.dropdown"),e(this._element).off(".bs.dropdown"),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},r.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},r._addEventListeners=function(){var t=this;e(this._element).on(ct.CLICK,(function(e){e.preventDefault(),e.stopPropagation(),t.toggle()}))},r._getConfig=function(t){return t=a({},this.constructor.Default,e(this._element).data(),t),l.typeCheckConfig(st,t,this.constructor.DefaultType),t},r._getMenuElement=function(){if(!this._menu){var e=t._getParentFromElement(this._element);e&&(this._menu=e.querySelector(xt))}return this._menu},r._getPlacement=function(){var t=e(this._element.parentNode),n=Ct;return t.hasClass(pt)?(n=Tt,e(this._menu).hasClass(mt)&&(n=Et)):t.hasClass(dt)?n=St:t.hasClass(gt)?n=Nt:e(this._menu).hasClass(mt)&&(n=At),n},r._detectNavbar=function(){return e(this._element).closest(".navbar").length>0},r._getOffset=function(){var t=this,e={};return"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=a({},e.offsets,t._config.offset(e.offsets,t._element)||{}),e}:e.offset=this._config.offset,e},r._getPopperConfig=function(){var t={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(t.modifiers.applyStyle={enabled:!1}),t},t._jQueryInterface=function(n){return this.each((function(){var r=e(this).data("bs.dropdown");if(r||(r=new t(this,"object"==typeof n?n:null),e(this).data("bs.dropdown",r)),"string"==typeof n){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}}))},t._clearMenus=function(n){if(!n||3!==n.which&&("keyup"!==n.type||9===n.which))for(var r=[].slice.call(document.querySelectorAll(_t)),i=0,o=r.length;i<o;i++){var a=t._getParentFromElement(r[i]),s=e(r[i]).data("bs.dropdown"),u={relatedTarget:r[i]};if(n&&"click"===n.type&&(u.clickEvent=n),s){var l=s._menu;if(e(a).hasClass(ht)&&!(n&&("click"===n.type&&/input|textarea/i.test(n.target.tagName)||"keyup"===n.type&&9===n.which)&&e.contains(a,n.target))){var c=e.Event(ct.HIDE,u);e(a).trigger(c),c.isDefaultPrevented()||("ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),r[i].setAttribute("aria-expanded","false"),e(l).removeClass(ht),e(a).removeClass(ht).trigger(e.Event(ct.HIDDEN,u)))}}}},t._getParentFromElement=function(t){var e,n=l.getSelectorFromElement(t);return n&&(e=document.querySelector(n)),e||t.parentNode},t._dataApiKeydownHandler=function(n){if((/input|textarea/i.test(n.target.tagName)?!(32===n.which||27!==n.which&&(40!==n.which&&38!==n.which||e(n.target).closest(xt).length)):lt.test(n.which))&&(n.preventDefault(),n.stopPropagation(),!this.disabled&&!e(this).hasClass(ft))){var r=t._getParentFromElement(this),i=e(r).hasClass(ht);if(i&&(!i||27!==n.which&&32!==n.which)){var o=[].slice.call(r.querySelectorAll(wt));if(0!==o.length){var a=o.indexOf(n.target);38===n.which&&a>0&&a--,40===n.which&&a<o.length-1&&a++,a<0&&(a=0),o[a].focus()}}else{if(27===n.which){var s=r.querySelector(_t);e(s).trigger("focus")}e(this).trigger("click")}}},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Dt}},{key:"DefaultType",get:function(){return kt}}]),t}();e(document).on(ct.KEYDOWN_DATA_API,_t,Mt._dataApiKeydownHandler).on(ct.KEYDOWN_DATA_API,xt,Mt._dataApiKeydownHandler).on(ct.CLICK_DATA_API+" "+ct.KEYUP_DATA_API,Mt._clearMenus).on(ct.CLICK_DATA_API,_t,(function(t){t.preventDefault(),t.stopPropagation(),Mt._jQueryInterface.call(e(this),"toggle")})).on(ct.CLICK_DATA_API,yt,(function(t){t.stopPropagation()})),e.fn[st]=Mt._jQueryInterface,e.fn[st].Constructor=Mt,e.fn[st].noConflict=function(){return e.fn[st]=ut,Mt._jQueryInterface};var It=e.fn.modal,Ot={backdrop:!0,keyboard:!0,focus:!0,show:!0},Lt={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},Pt={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},jt="modal-dialog-scrollable",Rt="modal-scrollbar-measure",Ht="modal-backdrop",qt="modal-open",Ft="fade",Ut="show",Bt={DIALOG:".modal-dialog",MODAL_BODY:".modal-body",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top"},Wt=function(){function t(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=t.querySelector(Bt.DIALOG),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}var n=t.prototype;return n.toggle=function(t){return this._isShown?this.hide():this.show(t)},n.show=function(t){var n=this;if(!this._isShown&&!this._isTransitioning){e(this._element).hasClass(Ft)&&(this._isTransitioning=!0);var r=e.Event(Pt.SHOW,{relatedTarget:t});e(this._element).trigger(r),this._isShown||r.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),e(this._element).on(Pt.CLICK_DISMISS,Bt.DATA_DISMISS,(function(t){return n.hide(t)})),e(this._dialog).on(Pt.MOUSEDOWN_DISMISS,(function(){e(n._element).one(Pt.MOUSEUP_DISMISS,(function(t){e(t.target).is(n._element)&&(n._ignoreBackdropClick=!0)}))})),this._showBackdrop((function(){return n._showElement(t)})))}},n.hide=function(t){var n=this;if(t&&t.preventDefault(),this._isShown&&!this._isTransitioning){var r=e.Event(Pt.HIDE);if(e(this._element).trigger(r),this._isShown&&!r.isDefaultPrevented()){this._isShown=!1;var i=e(this._element).hasClass(Ft);if(i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),e(document).off(Pt.FOCUSIN),e(this._element).removeClass(Ut),e(this._element).off(Pt.CLICK_DISMISS),e(this._dialog).off(Pt.MOUSEDOWN_DISMISS),i){var o=l.getTransitionDurationFromElement(this._element);e(this._element).one(l.TRANSITION_END,(function(t){return n._hideModal(t)})).emulateTransitionEnd(o)}else this._hideModal()}}},n.dispose=function(){[window,this._element,this._dialog].forEach((function(t){return e(t).off(".bs.modal")})),e(document).off(Pt.FOCUSIN),e.removeData(this._element,"bs.modal"),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},n.handleUpdate=function(){this._adjustDialog()},n._getConfig=function(t){return t=a({},Ot,t),l.typeCheckConfig("modal",t,Lt),t},n._showElement=function(t){var n=this,r=e(this._element).hasClass(Ft);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),e(this._dialog).hasClass(jt)?this._dialog.querySelector(Bt.MODAL_BODY).scrollTop=0:this._element.scrollTop=0,r&&l.reflow(this._element),e(this._element).addClass(Ut),this._config.focus&&this._enforceFocus();var i=e.Event(Pt.SHOWN,{relatedTarget:t}),o=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,e(n._element).trigger(i)};if(r){var a=l.getTransitionDurationFromElement(this._dialog);e(this._dialog).one(l.TRANSITION_END,o).emulateTransitionEnd(a)}else o()},n._enforceFocus=function(){var t=this;e(document).off(Pt.FOCUSIN).on(Pt.FOCUSIN,(function(n){document!==n.target&&t._element!==n.target&&0===e(t._element).has(n.target).length&&t._element.focus()}))},n._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?e(this._element).on(Pt.KEYDOWN_DISMISS,(function(e){27===e.which&&(e.preventDefault(),t.hide())})):this._isShown||e(this._element).off(Pt.KEYDOWN_DISMISS)},n._setResizeEvent=function(){var t=this;this._isShown?e(window).on(Pt.RESIZE,(function(e){return t.handleUpdate(e)})):e(window).off(Pt.RESIZE)},n._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._isTransitioning=!1,this._showBackdrop((function(){e(document.body).removeClass(qt),t._resetAdjustments(),t._resetScrollbar(),e(t._element).trigger(Pt.HIDDEN)}))},n._removeBackdrop=function(){this._backdrop&&(e(this._backdrop).remove(),this._backdrop=null)},n._showBackdrop=function(t){var n=this,r=e(this._element).hasClass(Ft)?Ft:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=Ht,r&&this._backdrop.classList.add(r),e(this._backdrop).appendTo(document.body),e(this._element).on(Pt.CLICK_DISMISS,(function(t){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())})),r&&l.reflow(this._backdrop),e(this._backdrop).addClass(Ut),!t)return;if(!r)return void t();var i=l.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(l.TRANSITION_END,t).emulateTransitionEnd(i)}else if(!this._isShown&&this._backdrop){e(this._backdrop).removeClass(Ut);var o=function(){n._removeBackdrop(),t&&t()};if(e(this._element).hasClass(Ft)){var a=l.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(l.TRANSITION_END,o).emulateTransitionEnd(a)}else o()}else t&&t()},n._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},n._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},n._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},n._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){var n=[].slice.call(document.querySelectorAll(Bt.FIXED_CONTENT)),r=[].slice.call(document.querySelectorAll(Bt.STICKY_CONTENT));e(n).each((function(n,r){var i=r.style.paddingRight,o=e(r).css("padding-right");e(r).data("padding-right",i).css("padding-right",parseFloat(o)+t._scrollbarWidth+"px")})),e(r).each((function(n,r){var i=r.style.marginRight,o=e(r).css("margin-right");e(r).data("margin-right",i).css("margin-right",parseFloat(o)-t._scrollbarWidth+"px")}));var i=document.body.style.paddingRight,o=e(document.body).css("padding-right");e(document.body).data("padding-right",i).css("padding-right",parseFloat(o)+this._scrollbarWidth+"px")}e(document.body).addClass(qt)},n._resetScrollbar=function(){var t=[].slice.call(document.querySelectorAll(Bt.FIXED_CONTENT));e(t).each((function(t,n){var r=e(n).data("padding-right");e(n).removeData("padding-right"),n.style.paddingRight=r||""}));var n=[].slice.call(document.querySelectorAll(""+Bt.STICKY_CONTENT));e(n).each((function(t,n){var r=e(n).data("margin-right");void 0!==r&&e(n).css("margin-right",r).removeData("margin-right")}));var r=e(document.body).data("padding-right");e(document.body).removeData("padding-right"),document.body.style.paddingRight=r||""},n._getScrollbarWidth=function(){var t=document.createElement("div");t.className=Rt,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},t._jQueryInterface=function(n,r){return this.each((function(){var i=e(this).data("bs.modal"),o=a({},Ot,e(this).data(),"object"==typeof n&&n?n:{});if(i||(i=new t(this,o),e(this).data("bs.modal",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n](r)}else o.show&&i.show(r)}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Ot}}]),t}();e(document).on(Pt.CLICK_DATA_API,Bt.DATA_TOGGLE,(function(t){var n,r=this,i=l.getSelectorFromElement(this);i&&(n=document.querySelector(i));var o=e(n).data("bs.modal")?"toggle":a({},e(n).data(),e(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var s=e(n).one(Pt.SHOW,(function(t){t.isDefaultPrevented()||s.one(Pt.HIDDEN,(function(){e(r).is(":visible")&&r.focus()}))}));Wt._jQueryInterface.call(e(n),o,this)})),e.fn.modal=Wt._jQueryInterface,e.fn.modal.Constructor=Wt,e.fn.modal.noConflict=function(){return e.fn.modal=It,Wt._jQueryInterface};var Yt=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],Vt={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},$t=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,zt=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;function Gt(t,e,n){if(0===t.length)return t;if(n&&"function"==typeof n)return n(t);for(var r=(new window.DOMParser).parseFromString(t,"text/html"),i=Object.keys(e),o=[].slice.call(r.body.querySelectorAll("*")),a=function(t,n){var r=o[t],a=r.nodeName.toLowerCase();if(-1===i.indexOf(r.nodeName.toLowerCase()))return r.parentNode.removeChild(r),"continue";var s=[].slice.call(r.attributes),u=[].concat(e["*"]||[],e[a]||[]);s.forEach((function(t){(function(t,e){var n=t.nodeName.toLowerCase();if(-1!==e.indexOf(n))return-1===Yt.indexOf(n)||Boolean(t.nodeValue.match($t)||t.nodeValue.match(zt));for(var r=e.filter((function(t){return t instanceof RegExp})),i=0,o=r.length;i<o;i++)if(n.match(r[i]))return!0;return!1})(t,u)||r.removeAttribute(t.nodeName)}))},s=0,u=o.length;s<u;s++)a(s);return r.body.innerHTML}var Xt="tooltip",Kt=e.fn.tooltip,Qt=new RegExp("(^|\\s)bs-tooltip\\S+","g"),Zt=["sanitize","whiteList","sanitizeFn"],Jt={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string|function)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)",sanitize:"boolean",sanitizeFn:"(null|function)",whiteList:"object"},te={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},ee={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent",sanitize:!0,sanitizeFn:null,whiteList:Vt},ne="show",re="out",ie={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},oe="fade",ae="show",se=".tooltip-inner",ue=".arrow",le="hover",ce="focus",fe="click",he="manual",pe=function(){function t(t,e){if(void 0===n)throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var r=t.prototype;return r.enable=function(){this._isEnabled=!0},r.disable=function(){this._isEnabled=!1},r.toggleEnabled=function(){this._isEnabled=!this._isEnabled},r.toggle=function(t){if(this._isEnabled)if(t){var n=this.constructor.DATA_KEY,r=e(t.currentTarget).data(n);r||(r=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(n,r)),r._activeTrigger.click=!r._activeTrigger.click,r._isWithActiveTrigger()?r._enter(null,r):r._leave(null,r)}else{if(e(this.getTipElement()).hasClass(ae))return void this._leave(null,this);this._enter(null,this)}},r.dispose=function(){clearTimeout(this._timeout),e.removeData(this.element,this.constructor.DATA_KEY),e(this.element).off(this.constructor.EVENT_KEY),e(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&e(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},r.show=function(){var t=this;if("none"===e(this.element).css("display"))throw new Error("Please use show on visible elements");var r=e.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){e(this.element).trigger(r);var i=l.findShadowRoot(this.element),o=e.contains(null!==i?i:this.element.ownerDocument.documentElement,this.element);if(r.isDefaultPrevented()||!o)return;var a=this.getTipElement(),s=l.getUID(this.constructor.NAME);a.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&e(a).addClass(oe);var u="function"==typeof this.config.placement?this.config.placement.call(this,a,this.element):this.config.placement,c=this._getAttachment(u);this.addAttachmentClass(c);var f=this._getContainer();e(a).data(this.constructor.DATA_KEY,this),e.contains(this.element.ownerDocument.documentElement,this.tip)||e(a).appendTo(f),e(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new n(this.element,a,{placement:c,modifiers:{offset:this._getOffset(),flip:{behavior:this.config.fallbackPlacement},arrow:{element:ue},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){return t._handlePopperPlacementChange(e)}}),e(a).addClass(ae),"ontouchstart"in document.documentElement&&e(document.body).children().on("mouseover",null,e.noop);var h=function(){t.config.animation&&t._fixTransition();var n=t._hoverState;t._hoverState=null,e(t.element).trigger(t.constructor.Event.SHOWN),n===re&&t._leave(null,t)};if(e(this.tip).hasClass(oe)){var p=l.getTransitionDurationFromElement(this.tip);e(this.tip).one(l.TRANSITION_END,h).emulateTransitionEnd(p)}else h()}},r.hide=function(t){var n=this,r=this.getTipElement(),i=e.Event(this.constructor.Event.HIDE),o=function(){n._hoverState!==ne&&r.parentNode&&r.parentNode.removeChild(r),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),e(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),t&&t()};if(e(this.element).trigger(i),!i.isDefaultPrevented()){if(e(r).removeClass(ae),"ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),this._activeTrigger[fe]=!1,this._activeTrigger[ce]=!1,this._activeTrigger[le]=!1,e(this.tip).hasClass(oe)){var a=l.getTransitionDurationFromElement(r);e(r).one(l.TRANSITION_END,o).emulateTransitionEnd(a)}else o();this._hoverState=""}},r.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},r.isWithContent=function(){return Boolean(this.getTitle())},r.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-tooltip-"+t)},r.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},r.setContent=function(){var t=this.getTipElement();this.setElementContent(e(t.querySelectorAll(se)),this.getTitle()),e(t).removeClass(oe+" "+ae)},r.setElementContent=function(t,n){"object"!=typeof n||!n.nodeType&&!n.jquery?this.config.html?(this.config.sanitize&&(n=Gt(n,this.config.whiteList,this.config.sanitizeFn)),t.html(n)):t.text(n):this.config.html?e(n).parent().is(t)||t.empty().append(n):t.text(e(n).text())},r.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},r._getOffset=function(){var t=this,e={};return"function"==typeof this.config.offset?e.fn=function(e){return e.offsets=a({},e.offsets,t.config.offset(e.offsets,t.element)||{}),e}:e.offset=this.config.offset,e},r._getContainer=function(){return!1===this.config.container?document.body:l.isElement(this.config.container)?e(this.config.container):e(document).find(this.config.container)},r._getAttachment=function(t){return te[t.toUpperCase()]},r._setListeners=function(){var t=this;this.config.trigger.split(" ").forEach((function(n){if("click"===n)e(t.element).on(t.constructor.Event.CLICK,t.config.selector,(function(e){return t.toggle(e)}));else if(n!==he){var r=n===le?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,i=n===le?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;e(t.element).on(r,t.config.selector,(function(e){return t._enter(e)})).on(i,t.config.selector,(function(e){return t._leave(e)}))}})),e(this.element).closest(".modal").on("hide.bs.modal",(function(){t.element&&t.hide()})),this.config.selector?this.config=a({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},r._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},r._enter=function(t,n){var r=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(r))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(r,n)),t&&(n._activeTrigger["focusin"===t.type?ce:le]=!0),e(n.getTipElement()).hasClass(ae)||n._hoverState===ne?n._hoverState=ne:(clearTimeout(n._timeout),n._hoverState=ne,n.config.delay&&n.config.delay.show?n._timeout=setTimeout((function(){n._hoverState===ne&&n.show()}),n.config.delay.show):n.show())},r._leave=function(t,n){var r=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(r))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(r,n)),t&&(n._activeTrigger["focusout"===t.type?ce:le]=!1),n._isWithActiveTrigger()||(clearTimeout(n._timeout),n._hoverState=re,n.config.delay&&n.config.delay.hide?n._timeout=setTimeout((function(){n._hoverState===re&&n.hide()}),n.config.delay.hide):n.hide())},r._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},r._getConfig=function(t){var n=e(this.element).data();return Object.keys(n).forEach((function(t){-1!==Zt.indexOf(t)&&delete n[t]})),"number"==typeof(t=a({},this.constructor.Default,n,"object"==typeof t&&t?t:{})).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),l.typeCheckConfig(Xt,t,this.constructor.DefaultType),t.sanitize&&(t.template=Gt(t.template,t.whiteList,t.sanitizeFn)),t},r._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},r._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(Qt);null!==n&&n.length&&t.removeClass(n.join(""))},r._handlePopperPlacementChange=function(t){var e=t.instance;this.tip=e.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},r._fixTransition=function(){var t=this.getTipElement(),n=this.config.animation;null===t.getAttribute("x-placement")&&(e(t).removeClass(oe),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},t._jQueryInterface=function(n){return this.each((function(){var r=e(this).data("bs.tooltip"),i="object"==typeof n&&n;if((r||!/dispose|hide/.test(n))&&(r||(r=new t(this,i),e(this).data("bs.tooltip",r)),"string"==typeof n)){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return ee}},{key:"NAME",get:function(){return Xt}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return ie}},{key:"EVENT_KEY",get:function(){return".bs.tooltip"}},{key:"DefaultType",get:function(){return Jt}}]),t}();e.fn.tooltip=pe._jQueryInterface,e.fn.tooltip.Constructor=pe,e.fn.tooltip.noConflict=function(){return e.fn.tooltip=Kt,pe._jQueryInterface};var de="popover",ge=e.fn.popover,me=new RegExp("(^|\\s)bs-popover\\S+","g"),ve=a({},pe.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),_e=a({},pe.DefaultType,{content:"(string|element|function)"}),ye="fade",xe="show",be=".popover-header",we=".popover-body",Te={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"},Ee=function(t){var n,r;function o(){return t.apply(this,arguments)||this}r=t,(n=o).prototype=Object.create(r.prototype),n.prototype.constructor=n,n.__proto__=r;var a=o.prototype;return a.isWithContent=function(){return this.getTitle()||this._getContent()},a.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-popover-"+t)},a.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},a.setContent=function(){var t=e(this.getTipElement());this.setElementContent(t.find(be),this.getTitle());var n=this._getContent();"function"==typeof n&&(n=n.call(this.element)),this.setElementContent(t.find(we),n),t.removeClass(ye+" "+xe)},a._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},a._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(me);null!==n&&n.length>0&&t.removeClass(n.join(""))},o._jQueryInterface=function(t){return this.each((function(){var n=e(this).data("bs.popover"),r="object"==typeof t?t:null;if((n||!/dispose|hide/.test(t))&&(n||(n=new o(this,r),e(this).data("bs.popover",n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}}))},i(o,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return ve}},{key:"NAME",get:function(){return de}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return Te}},{key:"EVENT_KEY",get:function(){return".bs.popover"}},{key:"DefaultType",get:function(){return _e}}]),o}(pe);e.fn.popover=Ee._jQueryInterface,e.fn.popover.Constructor=Ee,e.fn.popover.noConflict=function(){return e.fn.popover=ge,Ee._jQueryInterface};var Ce="scrollspy",Ae=e.fn[Ce],Se={offset:10,method:"auto",target:""},Ne={offset:"number",method:"string",target:"(string|element)"},De={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},ke="dropdown-item",Me="active",Ie={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},Oe="offset",Le="position",Pe=function(){function t(t,n){var r=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(n),this._selector=this._config.target+" "+Ie.NAV_LINKS+","+this._config.target+" "+Ie.LIST_ITEMS+","+this._config.target+" "+Ie.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,e(this._scrollElement).on(De.SCROLL,(function(t){return r._process(t)})),this.refresh(),this._process()}var n=t.prototype;return n.refresh=function(){var t=this,n=this._scrollElement===this._scrollElement.window?Oe:Le,r="auto"===this._config.method?n:this._config.method,i=r===Le?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map((function(t){var n,o=l.getSelectorFromElement(t);if(o&&(n=document.querySelector(o)),n){var a=n.getBoundingClientRect();if(a.width||a.height)return[e(n)[r]().top+i,o]}return null})).filter((function(t){return t})).sort((function(t,e){return t[0]-e[0]})).forEach((function(e){t._offsets.push(e[0]),t._targets.push(e[1])}))},n.dispose=function(){e.removeData(this._element,"bs.scrollspy"),e(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},n._getConfig=function(t){if("string"!=typeof(t=a({},Se,"object"==typeof t&&t?t:{})).target){var n=e(t.target).attr("id");n||(n=l.getUID(Ce),e(t.target).attr("id",n)),t.target="#"+n}return l.typeCheckConfig(Ce,t,Ne),t},n._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},n._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},n._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},n._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){var r=this._targets[this._targets.length-1];this._activeTarget!==r&&this._activate(r)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var i=this._offsets.length;i--;)this._activeTarget!==this._targets[i]&&t>=this._offsets[i]&&(void 0===this._offsets[i+1]||t<this._offsets[i+1])&&this._activate(this._targets[i])}},n._activate=function(t){this._activeTarget=t,this._clear();var n=this._selector.split(",").map((function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'})),r=e([].slice.call(document.querySelectorAll(n.join(","))));r.hasClass(ke)?(r.closest(Ie.DROPDOWN).find(Ie.DROPDOWN_TOGGLE).addClass(Me),r.addClass(Me)):(r.addClass(Me),r.parents(Ie.NAV_LIST_GROUP).prev(Ie.NAV_LINKS+", "+Ie.LIST_ITEMS).addClass(Me),r.parents(Ie.NAV_LIST_GROUP).prev(Ie.NAV_ITEMS).children(Ie.NAV_LINKS).addClass(Me)),e(this._scrollElement).trigger(De.ACTIVATE,{relatedTarget:t})},n._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter((function(t){return t.classList.contains(Me)})).forEach((function(t){return t.classList.remove(Me)}))},t._jQueryInterface=function(n){return this.each((function(){var r=e(this).data("bs.scrollspy");if(r||(r=new t(this,"object"==typeof n&&n),e(this).data("bs.scrollspy",r)),"string"==typeof n){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Se}}]),t}();e(window).on(De.LOAD_DATA_API,(function(){for(var t=[].slice.call(document.querySelectorAll(Ie.DATA_SPY)),n=t.length;n--;){var r=e(t[n]);Pe._jQueryInterface.call(r,r.data())}})),e.fn[Ce]=Pe._jQueryInterface,e.fn[Ce].Constructor=Pe,e.fn[Ce].noConflict=function(){return e.fn[Ce]=Ae,Pe._jQueryInterface};var je=e.fn.tab,Re={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},He="dropdown-menu",qe="active",Fe="disabled",Ue="fade",Be="show",We=".dropdown",Ye=".nav, .list-group",Ve=".active",$e="> li > .active",ze='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',Ge=".dropdown-toggle",Xe="> .dropdown-menu .active",Ke=function(){function t(t){this._element=t}var n=t.prototype;return n.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&e(this._element).hasClass(qe)||e(this._element).hasClass(Fe))){var n,r,i=e(this._element).closest(Ye)[0],o=l.getSelectorFromElement(this._element);if(i){var a="UL"===i.nodeName||"OL"===i.nodeName?$e:Ve;r=(r=e.makeArray(e(i).find(a)))[r.length-1]}var s=e.Event(Re.HIDE,{relatedTarget:this._element}),u=e.Event(Re.SHOW,{relatedTarget:r});if(r&&e(r).trigger(s),e(this._element).trigger(u),!u.isDefaultPrevented()&&!s.isDefaultPrevented()){o&&(n=document.querySelector(o)),this._activate(this._element,i);var c=function(){var n=e.Event(Re.HIDDEN,{relatedTarget:t._element}),i=e.Event(Re.SHOWN,{relatedTarget:r});e(r).trigger(n),e(t._element).trigger(i)};n?this._activate(n,n.parentNode,c):c()}}},n.dispose=function(){e.removeData(this._element,"bs.tab"),this._element=null},n._activate=function(t,n,r){var i=this,o=(!n||"UL"!==n.nodeName&&"OL"!==n.nodeName?e(n).children(Ve):e(n).find($e))[0],a=r&&o&&e(o).hasClass(Ue),s=function(){return i._transitionComplete(t,o,r)};if(o&&a){var u=l.getTransitionDurationFromElement(o);e(o).removeClass(Be).one(l.TRANSITION_END,s).emulateTransitionEnd(u)}else s()},n._transitionComplete=function(t,n,r){if(n){e(n).removeClass(qe);var i=e(n.parentNode).find(Xe)[0];i&&e(i).removeClass(qe),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!1)}if(e(t).addClass(qe),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),l.reflow(t),t.classList.contains(Ue)&&t.classList.add(Be),t.parentNode&&e(t.parentNode).hasClass(He)){var o=e(t).closest(We)[0];if(o){var a=[].slice.call(o.querySelectorAll(Ge));e(a).addClass(qe)}t.setAttribute("aria-expanded",!0)}r&&r()},t._jQueryInterface=function(n){return this.each((function(){var r=e(this),i=r.data("bs.tab");if(i||(i=new t(this),r.data("bs.tab",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),t}();e(document).on(Re.CLICK_DATA_API,ze,(function(t){t.preventDefault(),Ke._jQueryInterface.call(e(this),"show")})),e.fn.tab=Ke._jQueryInterface,e.fn.tab.Constructor=Ke,e.fn.tab.noConflict=function(){return e.fn.tab=je,Ke._jQueryInterface};var Qe=e.fn.toast,Ze={CLICK_DISMISS:"click.dismiss.bs.toast",HIDE:"hide.bs.toast",HIDDEN:"hidden.bs.toast",SHOW:"show.bs.toast",SHOWN:"shown.bs.toast"},Je="fade",tn="hide",en="show",nn="showing",rn={animation:"boolean",autohide:"boolean",delay:"number"},on={animation:!0,autohide:!0,delay:500},an='[data-dismiss="toast"]',sn=function(){function t(t,e){this._element=t,this._config=this._getConfig(e),this._timeout=null,this._setListeners()}var n=t.prototype;return n.show=function(){var t=this;e(this._element).trigger(Ze.SHOW),this._config.animation&&this._element.classList.add(Je);var n=function(){t._element.classList.remove(nn),t._element.classList.add(en),e(t._element).trigger(Ze.SHOWN),t._config.autohide&&t.hide()};if(this._element.classList.remove(tn),this._element.classList.add(nn),this._config.animation){var r=l.getTransitionDurationFromElement(this._element);e(this._element).one(l.TRANSITION_END,n).emulateTransitionEnd(r)}else n()},n.hide=function(t){var n=this;this._element.classList.contains(en)&&(e(this._element).trigger(Ze.HIDE),t?this._close():this._timeout=setTimeout((function(){n._close()}),this._config.delay))},n.dispose=function(){clearTimeout(this._timeout),this._timeout=null,this._element.classList.contains(en)&&this._element.classList.remove(en),e(this._element).off(Ze.CLICK_DISMISS),e.removeData(this._element,"bs.toast"),this._element=null,this._config=null},n._getConfig=function(t){return t=a({},on,e(this._element).data(),"object"==typeof t&&t?t:{}),l.typeCheckConfig("toast",t,this.constructor.DefaultType),t},n._setListeners=function(){var t=this;e(this._element).on(Ze.CLICK_DISMISS,an,(function(){return t.hide(!0)}))},n._close=function(){var t=this,n=function(){t._element.classList.add(tn),e(t._element).trigger(Ze.HIDDEN)};if(this._element.classList.remove(en),this._config.animation){var r=l.getTransitionDurationFromElement(this._element);e(this._element).one(l.TRANSITION_END,n).emulateTransitionEnd(r)}else n()},t._jQueryInterface=function(n){return this.each((function(){var r=e(this),i=r.data("bs.toast");if(i||(i=new t(this,"object"==typeof n&&n),r.data("bs.toast",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n](this)}}))},i(t,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"DefaultType",get:function(){return rn}},{key:"Default",get:function(){return on}}]),t}();e.fn.toast=sn._jQueryInterface,e.fn.toast.Constructor=sn,e.fn.toast.noConflict=function(){return e.fn.toast=Qe,sn._jQueryInterface},function(){if(void 0===e)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(),t.Util=l,t.Alert=g,t.Button=A,t.Carousel=z,t.Collapse=at,t.Dropdown=Mt,t.Modal=Wt,t.Popover=Ee,t.Scrollspy=Pe,t.Tab=Ke,t.Toast=sn,t.Tooltip=pe,Object.defineProperty(t,"__esModule",{value:!0})}(e,n(7),n(8))},function(t,e,n){var r;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,(function(n,i){"use strict";var o=[],a=n.document,s=Object.getPrototypeOf,u=o.slice,l=o.concat,c=o.push,f=o.indexOf,h={},p=h.toString,d=h.hasOwnProperty,g=d.toString,m=g.call(Object),v={},_=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},y=function(t){return null!=t&&t===t.window},x={type:!0,src:!0,nonce:!0,noModule:!0};function b(t,e,n){var r,i,o=(n=n||a).createElement("script");if(o.text=t,e)for(r in x)(i=e[r]||e.getAttribute&&e.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function w(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?h[p.call(t)]||"object":typeof t}var T=function(t,e){return new T.fn.init(t,e)},E=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(t){var e=!!t&&"length"in t&&t.length,n=w(t);return!_(t)&&!y(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}T.fn=T.prototype={jquery:"3.4.1",constructor:T,length:0,toArray:function(){return u.call(this)},get:function(t){return null==t?u.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=T.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return T.each(this,t)},map:function(t){return this.pushStack(T.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},T.extend=T.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||_(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(t=arguments[s]))for(e in t)r=t[e],"__proto__"!==e&&a!==r&&(l&&r&&(T.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[e],o=i&&!Array.isArray(n)?[]:i||T.isPlainObject(n)?n:{},i=!1,a[e]=T.extend(l,o,r)):void 0!==r&&(a[e]=r));return a},T.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==p.call(t))&&(!(e=s(t))||"function"==typeof(n=d.call(e,"constructor")&&e.constructor)&&g.call(n)===m)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e){b(t,{nonce:e&&e.nonce})},each:function(t,e){var n,r=0;if(C(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},trim:function(t){return null==t?"":(t+"").replace(E,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(C(Object(t))?T.merge(n,"string"==typeof t?[t]:t):c.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:f.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,a=!n;i<o;i++)!e(t[i],i)!==a&&r.push(t[i]);return r},map:function(t,e,n){var r,i,o=0,a=[];if(C(t))for(r=t.length;o<r;o++)null!=(i=e(t[o],o,n))&&a.push(i);else for(o in t)null!=(i=e(t[o],o,n))&&a.push(i);return l.apply([],a)},guid:1,support:v}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=o[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){h["[object "+e+"]"]=e.toLowerCase()}));var A=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(t){var e,n,r,i,o,a,s,u,l,c,f,h,p,d,g,m,v,_,y,x="sizzle"+1*new Date,b=t.document,w=0,T=0,E=ut(),C=ut(),A=ut(),S=ut(),N=function(t,e){return t===e&&(f=!0),0},D={}.hasOwnProperty,k=[],M=k.pop,I=k.push,O=k.push,L=k.slice,P=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},j="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",q="\\["+R+"*("+H+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+R+"*\\]",F=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+q+")*)|.*)\\)|)",U=new RegExp(R+"+","g"),B=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),W=new RegExp("^"+R+"*,"+R+"*"),Y=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),V=new RegExp(R+"|>"),$=new RegExp(F),z=new RegExp("^"+H+"$"),G={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+q),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+j+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},X=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\([\\da-f]{1,6}"+R+"?|("+R+")|.)","ig"),nt=function(t,e,n){var r="0x"+e-65536;return r!=r||n?e:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},rt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,it=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},ot=function(){h()},at=xt((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{O.apply(k=L.call(b.childNodes),b.childNodes),k[b.childNodes.length].nodeType}catch(t){O={apply:k.length?function(t,e){I.apply(t,L.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}function st(t,e,r,i){var o,s,l,c,f,d,v,_=e&&e.ownerDocument,w=e?e.nodeType:9;if(r=r||[],"string"!=typeof t||!t||1!==w&&9!==w&&11!==w)return r;if(!i&&((e?e.ownerDocument||e:b)!==p&&h(e),e=e||p,g)){if(11!==w&&(f=J.exec(t)))if(o=f[1]){if(9===w){if(!(l=e.getElementById(o)))return r;if(l.id===o)return r.push(l),r}else if(_&&(l=_.getElementById(o))&&y(e,l)&&l.id===o)return r.push(l),r}else{if(f[2])return O.apply(r,e.getElementsByTagName(t)),r;if((o=f[3])&&n.getElementsByClassName&&e.getElementsByClassName)return O.apply(r,e.getElementsByClassName(o)),r}if(n.qsa&&!S[t+" "]&&(!m||!m.test(t))&&(1!==w||"object"!==e.nodeName.toLowerCase())){if(v=t,_=e,1===w&&V.test(t)){for((c=e.getAttribute("id"))?c=c.replace(rt,it):e.setAttribute("id",c=x),s=(d=a(t)).length;s--;)d[s]="#"+c+" "+yt(d[s]);v=d.join(","),_=tt.test(t)&&vt(e.parentNode)||e}try{return O.apply(r,_.querySelectorAll(v)),r}catch(e){S(t,!0)}finally{c===x&&e.removeAttribute("id")}}}return u(t.replace(B,"$1"),e,r,i)}function ut(){var t=[];return function e(n,i){return t.push(n+" ")>r.cacheLength&&delete e[t.shift()],e[n+" "]=i}}function lt(t){return t[x]=!0,t}function ct(t){var e=p.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ft(t,e){for(var n=t.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=e}function ht(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function pt(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function dt(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function gt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&at(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function mt(t){return lt((function(e){return e=+e,lt((function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=st.support={},o=st.isXML=function(t){var e=t.namespaceURI,n=(t.ownerDocument||t).documentElement;return!X.test(e||n&&n.nodeName||"HTML")},h=st.setDocument=function(t){var e,i,a=t?t.ownerDocument||t:b;return a!==p&&9===a.nodeType&&a.documentElement?(d=(p=a).documentElement,g=!o(p),b!==p&&(i=p.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",ot,!1):i.attachEvent&&i.attachEvent("onunload",ot)),n.attributes=ct((function(t){return t.className="i",!t.getAttribute("className")})),n.getElementsByTagName=ct((function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length})),n.getElementsByClassName=Z.test(p.getElementsByClassName),n.getById=ct((function(t){return d.appendChild(t).id=x,!p.getElementsByName||!p.getElementsByName(x).length})),n.getById?(r.filter.ID=function(t){var e=t.replace(et,nt);return function(t){return t.getAttribute("id")===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n=e.getElementById(t);return n?[n]:[]}}):(r.filter.ID=function(t){var e=t.replace(et,nt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},v=[],m=[],(n.qsa=Z.test(p.querySelectorAll))&&(ct((function(t){d.appendChild(t).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+R+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+R+"*(?:value|"+j+")"),t.querySelectorAll("[id~="+x+"-]").length||m.push("~="),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]")})),ct((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+R+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),d.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=Z.test(_=d.matches||d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&ct((function(t){n.disconnectedMatch=_.call(t,"*"),_.call(t,"[s!='']:x"),v.push("!=",F)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),e=Z.test(d.compareDocumentPosition),y=e||Z.test(d.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},N=e?function(t,e){if(t===e)return f=!0,0;var r=!t.compareDocumentPosition-!e.compareDocumentPosition;return r||(1&(r=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===r?t===p||t.ownerDocument===b&&y(b,t)?-1:e===p||e.ownerDocument===b&&y(b,e)?1:c?P(c,t)-P(c,e):0:4&r?-1:1)}:function(t,e){if(t===e)return f=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,a=[t],s=[e];if(!i||!o)return t===p?-1:e===p?1:i?-1:o?1:c?P(c,t)-P(c,e):0;if(i===o)return ht(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?ht(a[r],s[r]):a[r]===b?-1:s[r]===b?1:0},p):p},st.matches=function(t,e){return st(t,null,null,e)},st.matchesSelector=function(t,e){if((t.ownerDocument||t)!==p&&h(t),n.matchesSelector&&g&&!S[e+" "]&&(!v||!v.test(e))&&(!m||!m.test(e)))try{var r=_.call(t,e);if(r||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(t){S(e,!0)}return st(e,p,null,[t]).length>0},st.contains=function(t,e){return(t.ownerDocument||t)!==p&&h(t),y(t,e)},st.attr=function(t,e){(t.ownerDocument||t)!==p&&h(t);var i=r.attrHandle[e.toLowerCase()],o=i&&D.call(r.attrHandle,e.toLowerCase())?i(t,e,!g):void 0;return void 0!==o?o:n.attributes||!g?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},st.escape=function(t){return(t+"").replace(rt,it)},st.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},st.uniqueSort=function(t){var e,r=[],i=0,o=0;if(f=!n.detectDuplicates,c=!n.sortStable&&t.slice(0),t.sort(N),f){for(;e=t[o++];)e===t[o]&&(i=r.push(o));for(;i--;)t.splice(r[i],1)}return c=null,t},i=st.getText=function(t){var e,n="",r=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=i(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[r++];)n+=i(e);return n},(r=st.selectors={cacheLength:50,createPseudo:lt,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,nt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,nt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||st.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&st.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return G.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&$.test(n)&&(e=a(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,nt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=E[t+" "];return e||(e=new RegExp("(^|"+R+")"+t+"("+R+"|$)"))&&E(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(r){var i=st.attr(r,t);return null==i?"!="===e:!e||(i+="","="===e?i===n:"!="===e?i!==n:"^="===e?n&&0===i.indexOf(n):"*="===e?n&&i.indexOf(n)>-1:"$="===e?n&&i.slice(-n.length)===n:"~="===e?(" "+i.replace(U," ")+" ").indexOf(n)>-1:"|="===e&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,u){var l,c,f,h,p,d,g=o!==a?"nextSibling":"previousSibling",m=e.parentNode,v=s&&e.nodeName.toLowerCase(),_=!u&&!s,y=!1;if(m){if(o){for(;g;){for(h=e;h=h[g];)if(s?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;d=g="only"===t&&!d&&"nextSibling"}return!0}if(d=[a?m.firstChild:m.lastChild],a&&_){for(y=(p=(l=(c=(f=(h=m)[x]||(h[x]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===w&&l[1])&&l[2],h=p&&m.childNodes[p];h=++p&&h&&h[g]||(y=p=0)||d.pop();)if(1===h.nodeType&&++y&&h===e){c[t]=[w,p,y];break}}else if(_&&(y=p=(l=(c=(f=(h=e)[x]||(h[x]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===w&&l[1]),!1===y)for(;(h=++p&&h&&h[g]||(y=p=0)||d.pop())&&((s?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++y||(_&&((c=(f=h[x]||(h[x]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]=[w,y]),h!==e)););return(y-=i)===r||y%r==0&&y/r>=0}}},PSEUDO:function(t,e){var n,i=r.pseudos[t]||r.setFilters[t.toLowerCase()]||st.error("unsupported pseudo: "+t);return i[x]?i(e):i.length>1?(n=[t,t,"",e],r.setFilters.hasOwnProperty(t.toLowerCase())?lt((function(t,n){for(var r,o=i(t,e),a=o.length;a--;)t[r=P(t,o[a])]=!(n[r]=o[a])})):function(t){return i(t,0,n)}):i}},pseudos:{not:lt((function(t){var e=[],n=[],r=s(t.replace(B,"$1"));return r[x]?lt((function(t,e,n,i){for(var o,a=r(t,null,i,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))})):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}})),has:lt((function(t){return function(e){return st(t,e).length>0}})),contains:lt((function(t){return t=t.replace(et,nt),function(e){return(e.textContent||i(e)).indexOf(t)>-1}})),lang:lt((function(t){return z.test(t||"")||st.error("unsupported lang: "+t),t=t.replace(et,nt).toLowerCase(),function(e){var n;do{if(n=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===d},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!r.pseudos.empty(t)},header:function(t){return Q.test(t.nodeName)},input:function(t){return K.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:mt((function(){return[0]})),last:mt((function(t,e){return[e-1]})),eq:mt((function(t,e,n){return[n<0?n+e:n]})),even:mt((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:mt((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:mt((function(t,e,n){for(var r=n<0?n+e:n>e?e:n;--r>=0;)t.push(r);return t})),gt:mt((function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[e]=pt(e);for(e in{submit:!0,reset:!0})r.pseudos[e]=dt(e);function _t(){}function yt(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function xt(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,s=T++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,u){var l,c,f,h=[w,s];if(u){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,u))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(c=(f=e[x]||(e[x]={}))[e.uniqueID]||(f[e.uniqueID]={}),i&&i===e.nodeName.toLowerCase())e=e[r]||e;else{if((l=c[o])&&l[0]===w&&l[1]===s)return h[2]=l[2];if(c[o]=h,h[2]=t(e,n,u))return!0}return!1}}function bt(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function wt(t,e,n,r,i){for(var o,a=[],s=0,u=t.length,l=null!=e;s<u;s++)(o=t[s])&&(n&&!n(o,r,i)||(a.push(o),l&&e.push(s)));return a}function Tt(t,e,n,r,i,o){return r&&!r[x]&&(r=Tt(r)),i&&!i[x]&&(i=Tt(i,o)),lt((function(o,a,s,u){var l,c,f,h=[],p=[],d=a.length,g=o||function(t,e,n){for(var r=0,i=e.length;r<i;r++)st(t,e[r],n);return n}(e||"*",s.nodeType?[s]:s,[]),m=!t||!o&&e?g:wt(g,h,t,s,u),v=n?i||(o?t:d||r)?[]:a:m;if(n&&n(m,v,s,u),r)for(l=wt(v,p),r(l,[],s,u),c=l.length;c--;)(f=l[c])&&(v[p[c]]=!(m[p[c]]=f));if(o){if(i||t){if(i){for(l=[],c=v.length;c--;)(f=v[c])&&l.push(m[c]=f);i(null,v=[],l,u)}for(c=v.length;c--;)(f=v[c])&&(l=i?P(o,f):h[c])>-1&&(o[l]=!(a[l]=f))}}else v=wt(v===a?v.splice(d,v.length):v),i?i(null,a,v,u):O.apply(a,v)}))}function Et(t){for(var e,n,i,o=t.length,a=r.relative[t[0].type],s=a||r.relative[" "],u=a?1:0,c=xt((function(t){return t===e}),s,!0),f=xt((function(t){return P(e,t)>-1}),s,!0),h=[function(t,n,r){var i=!a&&(r||n!==l)||((e=n).nodeType?c(t,n,r):f(t,n,r));return e=null,i}];u<o;u++)if(n=r.relative[t[u].type])h=[xt(bt(h),n)];else{if((n=r.filter[t[u].type].apply(null,t[u].matches))[x]){for(i=++u;i<o&&!r.relative[t[i].type];i++);return Tt(u>1&&bt(h),u>1&&yt(t.slice(0,u-1).concat({value:" "===t[u-2].type?"*":""})).replace(B,"$1"),n,u<i&&Et(t.slice(u,i)),i<o&&Et(t=t.slice(i)),i<o&&yt(t))}h.push(n)}return bt(h)}return _t.prototype=r.filters=r.pseudos,r.setFilters=new _t,a=st.tokenize=function(t,e){var n,i,o,a,s,u,l,c=C[t+" "];if(c)return e?0:c.slice(0);for(s=t,u=[],l=r.preFilter;s;){for(a in n&&!(i=W.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=Y.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(B," ")}),s=s.slice(n.length)),r.filter)!(i=G[a].exec(s))||l[a]&&!(i=l[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return e?s.length:s?st.error(t):C(t,u).slice(0)},s=st.compile=function(t,e){var n,i=[],o=[],s=A[t+" "];if(!s){for(e||(e=a(t)),n=e.length;n--;)(s=Et(e[n]))[x]?i.push(s):o.push(s);(s=A(t,function(t,e){var n=e.length>0,i=t.length>0,o=function(o,a,s,u,c){var f,d,m,v=0,_="0",y=o&&[],x=[],b=l,T=o||i&&r.find.TAG("*",c),E=w+=null==b?1:Math.random()||.1,C=T.length;for(c&&(l=a===p||a||c);_!==C&&null!=(f=T[_]);_++){if(i&&f){for(d=0,a||f.ownerDocument===p||(h(f),s=!g);m=t[d++];)if(m(f,a||p,s)){u.push(f);break}c&&(w=E)}n&&((f=!m&&f)&&v--,o&&y.push(f))}if(v+=_,n&&_!==v){for(d=0;m=e[d++];)m(y,x,a,s);if(o){if(v>0)for(;_--;)y[_]||x[_]||(x[_]=M.call(u));x=wt(x)}O.apply(u,x),c&&!o&&x.length>0&&v+e.length>1&&st.uniqueSort(u)}return c&&(w=E,l=b),y};return n?lt(o):o}(o,i))).selector=t}return s},u=st.select=function(t,e,n,i){var o,u,l,c,f,h="function"==typeof t&&t,p=!i&&a(t=h.selector||t);if(n=n||[],1===p.length){if((u=p[0]=p[0].slice(0)).length>2&&"ID"===(l=u[0]).type&&9===e.nodeType&&g&&r.relative[u[1].type]){if(!(e=(r.find.ID(l.matches[0].replace(et,nt),e)||[])[0]))return n;h&&(e=e.parentNode),t=t.slice(u.shift().value.length)}for(o=G.needsContext.test(t)?0:u.length;o--&&(l=u[o],!r.relative[c=l.type]);)if((f=r.find[c])&&(i=f(l.matches[0].replace(et,nt),tt.test(u[0].type)&&vt(e.parentNode)||e))){if(u.splice(o,1),!(t=i.length&&yt(u)))return O.apply(n,i),n;break}}return(h||s(t,p))(i,e,!g,n,!e||tt.test(t)&&vt(e.parentNode)||e),n},n.sortStable=x.split("").sort(N).join("")===x,n.detectDuplicates=!!f,h(),n.sortDetached=ct((function(t){return 1&t.compareDocumentPosition(p.createElement("fieldset"))})),ct((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||ft("type|href|height|width",(function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),n.attributes&&ct((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||ft("value",(function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),ct((function(t){return null==t.getAttribute("disabled")}))||ft(j,(function(t,e,n){var r;if(!n)return!0===t[e]?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null})),st}(n);T.find=A,T.expr=A.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=A.uniqueSort,T.text=A.getText,T.isXMLDoc=A.isXML,T.contains=A.contains,T.escapeSelector=A.escape;var S=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&T(t).is(n))break;r.push(t)}return r},N=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},D=T.expr.match.needsContext;function k(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var M=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function I(t,e,n){return _(e)?T.grep(t,(function(t,r){return!!e.call(t,r,t)!==n})):e.nodeType?T.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?T.grep(t,(function(t){return f.call(e,t)>-1!==n})):T.filter(e,t,n)}T.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?T.find.matchesSelector(r,t)?[r]:[]:T.find.matches(t,T.grep(e,(function(t){return 1===t.nodeType})))},T.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(T(t).filter((function(){for(e=0;e<r;e++)if(T.contains(i[e],this))return!0})));for(n=this.pushStack([]),e=0;e<r;e++)T.find(t,i[e],n);return r>1?T.uniqueSort(n):n},filter:function(t){return this.pushStack(I(this,t||[],!1))},not:function(t){return this.pushStack(I(this,t||[],!0))},is:function(t){return!!I(this,"string"==typeof t&&D.test(t)?T(t):t||[],!1).length}});var O,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||O,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:L.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof T?e[0]:e,T.merge(this,T.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:a,!0)),M.test(r[1])&&T.isPlainObject(e))for(r in e)_(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(i=a.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):_(t)?void 0!==n.ready?n.ready(t):t(T):T.makeArray(t,this)}).prototype=T.fn,O=T(a);var P=/^(?:parents|prev(?:Until|All))/,j={children:!0,contents:!0,next:!0,prev:!0};function R(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}T.fn.extend({has:function(t){var e=T(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(T.contains(this,e[t]))return!0}))},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&T(t);if(!D.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&T.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?T.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?f.call(T(t),this[0]):f.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),T.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return S(t,"parentNode")},parentsUntil:function(t,e,n){return S(t,"parentNode",n)},next:function(t){return R(t,"nextSibling")},prev:function(t){return R(t,"previousSibling")},nextAll:function(t){return S(t,"nextSibling")},prevAll:function(t){return S(t,"previousSibling")},nextUntil:function(t,e,n){return S(t,"nextSibling",n)},prevUntil:function(t,e,n){return S(t,"previousSibling",n)},siblings:function(t){return N((t.parentNode||{}).firstChild,t)},children:function(t){return N(t.firstChild)},contents:function(t){return void 0!==t.contentDocument?t.contentDocument:(k(t,"template")&&(t=t.content||t),T.merge([],t.childNodes))}},(function(t,e){T.fn[t]=function(n,r){var i=T.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=T.filter(r,i)),this.length>1&&(j[t]||T.uniqueSort(i),P.test(t)&&i.reverse()),this.pushStack(i)}}));var H=/[^\x20\t\r\n\f]+/g;function q(t){return t}function F(t){throw t}function U(t,e,n,r){var i;try{t&&_(i=t.promise)?i.call(t).done(e).fail(n):t&&_(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}T.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return T.each(t.match(H)||[],(function(t,n){e[n]=!0})),e}(t):T.extend({},t);var e,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||t.once,r=e=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&t.stopOnFalse&&(s=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},l={add:function(){return o&&(n&&!e&&(s=o.length-1,a.push(n)),function e(n){T.each(n,(function(n,r){_(r)?t.unique&&l.has(r)||o.push(r):r&&r.length&&"string"!==w(r)&&e(r)}))}(arguments),n&&!e&&u()),this},remove:function(){return T.each(arguments,(function(t,e){for(var n;(n=T.inArray(e,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(t){return t?T.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=[t,(n=n||[]).slice?n.slice():n],a.push(n),e||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l},T.extend({Deferred:function(t){var e=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return T.Deferred((function(n){T.each(e,(function(e,r){var i=_(t[r[4]])&&t[r[4]];o[r[1]]((function(){var t=i&&i.apply(this,arguments);t&&_(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[t]:arguments)}))})),t=null})).promise()},then:function(t,r,i){var o=0;function a(t,e,r,i){return function(){var s=this,u=arguments,l=function(){var n,l;if(!(t<o)){if((n=r.apply(s,u))===e.promise())throw new TypeError("Thenable self-resolution");l=n&&("object"==typeof n||"function"==typeof n)&&n.then,_(l)?i?l.call(n,a(o,e,q,i),a(o,e,F,i)):(o++,l.call(n,a(o,e,q,i),a(o,e,F,i),a(o,e,q,e.notifyWith))):(r!==q&&(s=void 0,u=[n]),(i||e.resolveWith)(s,u))}},c=i?l:function(){try{l()}catch(n){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(n,c.stackTrace),t+1>=o&&(r!==F&&(s=void 0,u=[n]),e.rejectWith(s,u))}};t?c():(T.Deferred.getStackHook&&(c.stackTrace=T.Deferred.getStackHook()),n.setTimeout(c))}}return T.Deferred((function(n){e[0][3].add(a(0,n,_(i)?i:q,n.notifyWith)),e[1][3].add(a(0,n,_(t)?t:q)),e[2][3].add(a(0,n,_(r)?r:F))})).promise()},promise:function(t){return null!=t?T.extend(t,i):i}},o={};return T.each(e,(function(t,n){var a=n[2],s=n[5];i[n[1]]=a.add,s&&a.add((function(){r=s}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith})),i.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),i=u.call(arguments),o=T.Deferred(),a=function(t){return function(n){r[t]=this,i[t]=arguments.length>1?u.call(arguments):n,--e||o.resolveWith(r,i)}};if(e<=1&&(U(t,o.done(a(n)).resolve,o.reject,!e),"pending"===o.state()||_(i[n]&&i[n].then)))return o.then();for(;n--;)U(i[n],a(n),o.reject);return o.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&B.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},T.readyException=function(t){n.setTimeout((function(){throw t}))};var W=T.Deferred();function Y(){a.removeEventListener("DOMContentLoaded",Y),n.removeEventListener("load",Y),T.ready()}T.fn.ready=function(t){return W.then(t).catch((function(t){T.readyException(t)})),this},T.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--T.readyWait:T.isReady)||(T.isReady=!0,!0!==t&&--T.readyWait>0||W.resolveWith(a,[T]))}}),T.ready.then=W.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(T.ready):(a.addEventListener("DOMContentLoaded",Y),n.addEventListener("load",Y));var V=function(t,e,n,r,i,o,a){var s=0,u=t.length,l=null==n;if("object"===w(n))for(s in i=!0,n)V(t,e,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,_(r)||(a=!0),l&&(a?(e.call(t,r),e=null):(l=e,e=function(t,e,n){return l.call(T(t),n)})),e))for(;s<u;s++)e(t[s],n,a?r:r.call(t[s],s,e(t[s],n)));return i?t:l?e.call(t):u?e(t[0],n):o},$=/^-ms-/,z=/-([a-z])/g;function G(t,e){return e.toUpperCase()}function X(t){return t.replace($,"ms-").replace(z,G)}var K=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function Q(){this.expando=T.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(t){var e=t[this.expando];return e||(e={},K(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[X(e)]=n;else for(r in e)i[X(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][X(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(X):(e=X(e))in r?[e]:e.match(H)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||T.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!T.isEmptyObject(e)}};var Z=new Q,J=new Q,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}J.set(t,e,n)}else n=void 0;return n}T.extend({hasData:function(t){return J.hasData(t)||Z.hasData(t)},data:function(t,e,n){return J.access(t,e,n)},removeData:function(t,e){J.remove(t,e)},_data:function(t,e,n){return Z.access(t,e,n)},_removeData:function(t,e){Z.remove(t,e)}}),T.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=J.get(o),1===o.nodeType&&!Z.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=X(r.slice(5)),nt(o,r,i[r]));Z.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each((function(){J.set(this,t)})):V(this,(function(e){var n;if(o&&void 0===e)return void 0!==(n=J.get(o,t))?n:void 0!==(n=nt(o,t))?n:void 0;this.each((function(){J.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){J.remove(this,t)}))}}),T.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=Z.get(t,e),n&&(!r||Array.isArray(n)?r=Z.access(t,e,T.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=T.queue(t,e),r=n.length,i=n.shift(),o=T._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,(function(){T.dequeue(t,e)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Z.get(t,n)||Z.access(t,n,{empty:T.Callbacks("once memory").add((function(){Z.remove(t,[e+"queue",n])}))})}}),T.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?T.queue(this[0],t):void 0===e?this:this.each((function(){var n=T.queue(this,t,e);T._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&T.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){T.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=T.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=Z.get(o[a],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(e)}});var rt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,it=new RegExp("^(?:([+-])=|)("+rt+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],at=a.documentElement,st=function(t){return T.contains(t.ownerDocument,t)},ut={composed:!0};at.getRootNode&&(st=function(t){return T.contains(t.ownerDocument,t)||t.getRootNode(ut)===t.ownerDocument});var lt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&st(t)&&"none"===T.css(t,"display")},ct=function(t,e,n,r){var i,o,a={};for(o in e)a[o]=t.style[o],t.style[o]=e[o];for(o in i=n.apply(t,r||[]),e)t.style[o]=a[o];return i};function ft(t,e,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return T.css(t,e,"")},u=s(),l=n&&n[3]||(T.cssNumber[e]?"":"px"),c=t.nodeType&&(T.cssNumber[e]||"px"!==l&&+u)&&it.exec(T.css(t,e));if(c&&c[3]!==l){for(u/=2,l=l||c[3],c=+u||1;a--;)T.style(t,e,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,T.style(t,e,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var ht={};function pt(t){var e,n=t.ownerDocument,r=t.nodeName,i=ht[r];return i||(e=n.body.appendChild(n.createElement(r)),i=T.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),ht[r]=i,i)}function dt(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)(r=t[o]).style&&(n=r.style.display,e?("none"===n&&(i[o]=Z.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&lt(r)&&(i[o]=pt(r))):"none"!==n&&(i[o]="none",Z.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}T.fn.extend({show:function(){return dt(this,!0)},hide:function(){return dt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){lt(this)?T(this).show():T(this).hide()}))}});var gt=/^(?:checkbox|radio)$/i,mt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,vt=/^$|^module$|\/(?:java|ecma)script/i,_t={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function yt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&k(t,e)?T.merge([t],n):n}function xt(t,e){for(var n=0,r=t.length;n<r;n++)Z.set(t[n],"globalEval",!e||Z.get(e[n],"globalEval"))}_t.optgroup=_t.option,_t.tbody=_t.tfoot=_t.colgroup=_t.caption=_t.thead,_t.th=_t.td;var bt,wt,Tt=/<|&#?\w+;/;function Et(t,e,n,r,i){for(var o,a,s,u,l,c,f=e.createDocumentFragment(),h=[],p=0,d=t.length;p<d;p++)if((o=t[p])||0===o)if("object"===w(o))T.merge(h,o.nodeType?[o]:o);else if(Tt.test(o)){for(a=a||f.appendChild(e.createElement("div")),s=(mt.exec(o)||["",""])[1].toLowerCase(),u=_t[s]||_t._default,a.innerHTML=u[1]+T.htmlPrefilter(o)+u[2],c=u[0];c--;)a=a.lastChild;T.merge(h,a.childNodes),(a=f.firstChild).textContent=""}else h.push(e.createTextNode(o));for(f.textContent="",p=0;o=h[p++];)if(r&&T.inArray(o,r)>-1)i&&i.push(o);else if(l=st(o),a=yt(f.appendChild(o),"script"),l&&xt(a),n)for(c=0;o=a[c++];)vt.test(o.type||"")&&n.push(o);return f}bt=a.createDocumentFragment().appendChild(a.createElement("div")),(wt=a.createElement("input")).setAttribute("type","radio"),wt.setAttribute("checked","checked"),wt.setAttribute("name","t"),bt.appendChild(wt),v.checkClone=bt.cloneNode(!0).cloneNode(!0).lastChild.checked,bt.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!bt.cloneNode(!0).lastChild.defaultValue;var Ct=/^key/,At=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,St=/^([^.]*)(?:\.(.+)|)/;function Nt(){return!0}function Dt(){return!1}function kt(t,e){return t===function(){try{return a.activeElement}catch(t){}}()==("focus"===e)}function Mt(t,e,n,r,i,o){var a,s;if("object"==typeof e){for(s in"string"!=typeof n&&(r=r||n,n=void 0),e)Mt(t,s,n,r,e[s],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Dt;else if(!i)return t;return 1===o&&(a=i,(i=function(t){return T().off(t),a.apply(this,arguments)}).guid=a.guid||(a.guid=T.guid++)),t.each((function(){T.event.add(this,e,i,r,n)}))}function It(t,e,n){n?(Z.set(t,e,!1),T.event.add(t,e,{namespace:!1,handler:function(t){var r,i,o=Z.get(this,e);if(1&t.isTrigger&&this[e]){if(o.length)(T.event.special[e]||{}).delegateType&&t.stopPropagation();else if(o=u.call(arguments),Z.set(this,e,o),r=n(this,e),this[e](),o!==(i=Z.get(this,e))||r?Z.set(this,e,!1):i={},o!==i)return t.stopImmediatePropagation(),t.preventDefault(),i.value}else o.length&&(Z.set(this,e,{value:T.event.trigger(T.extend(o[0],T.Event.prototype),o.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===Z.get(t,e)&&T.event.add(t,e,Nt)}T.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,h,p,d,g,m=Z.get(t);if(m)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&T.find.matchesSelector(at,i),n.guid||(n.guid=T.guid++),(u=m.events)||(u=m.events={}),(a=m.handle)||(a=m.handle=function(e){return void 0!==T&&T.event.triggered!==e.type?T.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(H)||[""]).length;l--;)p=g=(s=St.exec(e[l])||[])[1],d=(s[2]||"").split(".").sort(),p&&(f=T.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=T.event.special[p]||{},c=T.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&T.expr.match.needsContext.test(i),namespace:d.join(".")},o),(h=u[p])||((h=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,d,a)||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,c):h.push(c),T.event.global[p]=!0)},remove:function(t,e,n,r,i){var o,a,s,u,l,c,f,h,p,d,g,m=Z.hasData(t)&&Z.get(t);if(m&&(u=m.events)){for(l=(e=(e||"").match(H)||[""]).length;l--;)if(p=g=(s=St.exec(e[l])||[])[1],d=(s[2]||"").split(".").sort(),p){for(f=T.event.special[p]||{},h=u[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)c=h[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,f.remove&&f.remove.call(t,c));a&&!h.length&&(f.teardown&&!1!==f.teardown.call(t,d,m.handle)||T.removeEvent(t,p,m.handle),delete u[p])}else for(p in u)T.event.remove(t,p+e[l],n,r,!0);T.isEmptyObject(u)&&Z.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,s=T.event.fix(t),u=new Array(arguments.length),l=(Z.get(this,"events")||{})[s.type]||[],c=T.event.special[s.type]||{};for(u[0]=s,e=1;e<arguments.length;e++)u[e]=arguments[e];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(a=T.event.handlers.call(this,s,l),e=0;(i=a[e++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==o.namespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((T.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(t,e){var n,r,i,o,a,s=[],u=e.delegateCount,l=t.target;if(u&&l.nodeType&&!("click"===t.type&&t.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==t.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=e[n]).selector+" "]&&(a[i]=r.needsContext?T(i,this).index(l)>-1:T.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<e.length&&s.push({elem:l,handlers:e.slice(u)}),s},addProp:function(t,e){Object.defineProperty(T.Event.prototype,t,{enumerable:!0,configurable:!0,get:_(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[T.expando]?t:new T.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return gt.test(e.type)&&e.click&&k(e,"input")&&It(e,"click",Nt),!1},trigger:function(t){var e=this||t;return gt.test(e.type)&&e.click&&k(e,"input")&&It(e,"click"),!0},_default:function(t){var e=t.target;return gt.test(e.type)&&e.click&&k(e,"input")&&Z.get(e,"click")||k(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},T.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},T.Event=function(t,e){if(!(this instanceof T.Event))return new T.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Nt:Dt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&T.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:Dt,isPropagationStopped:Dt,isImmediatePropagationStopped:Dt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Nt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Nt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Nt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Ct.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&At.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},(function(t,e){T.event.special[t]={setup:function(){return It(this,t,kt),!1},trigger:function(){return It(this,t),!0},delegateType:e}})),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){T.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=this,i=t.relatedTarget,o=t.handleObj;return i&&(i===r||T.contains(r,i))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}})),T.fn.extend({on:function(t,e,n,r){return Mt(this,t,e,n,r)},one:function(t,e,n,r){return Mt(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,T(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Dt),this.each((function(){T.event.remove(this,t,n,e)}))}});var Ot=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Lt=/<script|<style|<link/i,Pt=/checked\s*(?:[^=]|=\s*.checked.)/i,jt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Rt(t,e){return k(t,"table")&&k(11!==e.nodeType?e:e.firstChild,"tr")&&T(t).children("tbody")[0]||t}function Ht(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function qt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Ft(t,e){var n,r,i,o,a,s,u,l;if(1===e.nodeType){if(Z.hasData(t)&&(o=Z.access(t),a=Z.set(e,o),l=o.events))for(i in delete a.handle,a.events={},l)for(n=0,r=l[i].length;n<r;n++)T.event.add(e,i,l[i][n]);J.hasData(t)&&(s=J.access(t),u=T.extend({},s),J.set(e,u))}}function Ut(t,e){var n=e.nodeName.toLowerCase();"input"===n&&gt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function Bt(t,e,n,r){e=l.apply([],e);var i,o,a,s,u,c,f=0,h=t.length,p=h-1,d=e[0],g=_(d);if(g||h>1&&"string"==typeof d&&!v.checkClone&&Pt.test(d))return t.each((function(i){var o=t.eq(i);g&&(e[0]=d.call(this,i,o.html())),Bt(o,e,n,r)}));if(h&&(o=(i=Et(e,t[0].ownerDocument,!1,t,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=(a=T.map(yt(i,"script"),Ht)).length;f<h;f++)u=i,f!==p&&(u=T.clone(u,!0,!0),s&&T.merge(a,yt(u,"script"))),n.call(t[f],u,f);if(s)for(c=a[a.length-1].ownerDocument,T.map(a,qt),f=0;f<s;f++)u=a[f],vt.test(u.type||"")&&!Z.access(u,"globalEval")&&T.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?T._evalUrl&&!u.noModule&&T._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")}):b(u.textContent.replace(jt,""),u,c))}return t}function Wt(t,e,n){for(var r,i=e?T.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||T.cleanData(yt(r)),r.parentNode&&(n&&st(r)&&xt(yt(r,"script")),r.parentNode.removeChild(r));return t}T.extend({htmlPrefilter:function(t){return t.replace(Ot,"<$1></$2>")},clone:function(t,e,n){var r,i,o,a,s=t.cloneNode(!0),u=st(t);if(!(v.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||T.isXMLDoc(t)))for(a=yt(s),r=0,i=(o=yt(t)).length;r<i;r++)Ut(o[r],a[r]);if(e)if(n)for(o=o||yt(t),a=a||yt(s),r=0,i=o.length;r<i;r++)Ft(o[r],a[r]);else Ft(t,s);return(a=yt(s,"script")).length>0&&xt(a,!u&&yt(t,"script")),s},cleanData:function(t){for(var e,n,r,i=T.event.special,o=0;void 0!==(n=t[o]);o++)if(K(n)){if(e=n[Z.expando]){if(e.events)for(r in e.events)i[r]?T.event.remove(n,r):T.removeEvent(n,r,e.handle);n[Z.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),T.fn.extend({detach:function(t){return Wt(this,t,!0)},remove:function(t){return Wt(this,t)},text:function(t){return V(this,(function(t){return void 0===t?T.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Bt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Rt(this,t).appendChild(t)}))},prepend:function(){return Bt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Rt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Bt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Bt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(T.cleanData(yt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return T.clone(this,t,e)}))},html:function(t){return V(this,(function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Lt.test(t)&&!_t[(mt.exec(t)||["",""])[1].toLowerCase()]){t=T.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(T.cleanData(yt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Bt(this,arguments,(function(e){var n=this.parentNode;T.inArray(this,t)<0&&(T.cleanData(yt(this)),n&&n.replaceChild(e,this))}),t)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){T.fn[t]=function(t){for(var n,r=[],i=T(t),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),T(i[a])[e](n),c.apply(r,n.get());return this.pushStack(r)}}));var Yt=new RegExp("^("+rt+")(?!px)[a-z%]+$","i"),Vt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},$t=new RegExp(ot.join("|"),"i");function zt(t,e,n){var r,i,o,a,s=t.style;return(n=n||Vt(t))&&(""!==(a=n.getPropertyValue(e)||n[e])||st(t)||(a=T.style(t,e)),!v.pixelBoxStyles()&&Yt.test(a)&&$t.test(e)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function Gt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",at.appendChild(l).appendChild(c);var t=n.getComputedStyle(c);r="1%"!==t.top,u=12===e(t.marginLeft),c.style.right="60%",s=36===e(t.right),i=36===e(t.width),c.style.position="absolute",o=12===e(c.offsetWidth/3),at.removeChild(l),c=null}}function e(t){return Math.round(parseFloat(t))}var r,i,o,s,u,l=a.createElement("div"),c=a.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===c.style.backgroundClip,T.extend(v,{boxSizingReliable:function(){return t(),i},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),r},reliableMarginLeft:function(){return t(),u},scrollboxSize:function(){return t(),o}}))}();var Xt=["Webkit","Moz","ms"],Kt=a.createElement("div").style,Qt={};function Zt(t){var e=T.cssProps[t]||Qt[t];return e||(t in Kt?t:Qt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Xt.length;n--;)if((t=Xt[n]+e)in Kt)return t}(t)||t)}var Jt=/^(none|table(?!-c[ea]).+)/,te=/^--/,ee={position:"absolute",visibility:"hidden",display:"block"},ne={letterSpacing:"0",fontWeight:"400"};function re(t,e,n){var r=it.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function ie(t,e,n,r,i,o){var a="width"===e?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=T.css(t,n+ot[a],!0,i)),r?("content"===n&&(u-=T.css(t,"padding"+ot[a],!0,i)),"margin"!==n&&(u-=T.css(t,"border"+ot[a]+"Width",!0,i))):(u+=T.css(t,"padding"+ot[a],!0,i),"padding"!==n?u+=T.css(t,"border"+ot[a]+"Width",!0,i):s+=T.css(t,"border"+ot[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-u-s-.5))||0),u}function oe(t,e,n){var r=Vt(t),i=(!v.boxSizingReliable()||n)&&"border-box"===T.css(t,"boxSizing",!1,r),o=i,a=zt(t,e,r),s="offset"+e[0].toUpperCase()+e.slice(1);if(Yt.test(a)){if(!n)return a;a="auto"}return(!v.boxSizingReliable()&&i||"auto"===a||!parseFloat(a)&&"inline"===T.css(t,"display",!1,r))&&t.getClientRects().length&&(i="border-box"===T.css(t,"boxSizing",!1,r),(o=s in t)&&(a=t[s])),(a=parseFloat(a)||0)+ie(t,e,n||(i?"border":"content"),o,r,a)+"px"}function ae(t,e,n,r,i){return new ae.prototype.init(t,e,n,r,i)}T.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=zt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,s=X(e),u=te.test(e),l=t.style;if(u||(e=Zt(s)),a=T.cssHooks[e]||T.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:l[e];"string"===(o=typeof n)&&(i=it.exec(n))&&i[1]&&(n=ft(t,e,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(T.cssNumber[s]?"":"px")),v.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(u?l.setProperty(e,n):l[e]=n))}},css:function(t,e,n,r){var i,o,a,s=X(e);return te.test(e)||(e=Zt(s)),(a=T.cssHooks[e]||T.cssHooks[s])&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=zt(t,e,r)),"normal"===i&&e in ne&&(i=ne[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),T.each(["height","width"],(function(t,e){T.cssHooks[e]={get:function(t,n,r){if(n)return!Jt.test(T.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?oe(t,e,r):ct(t,ee,(function(){return oe(t,e,r)}))},set:function(t,n,r){var i,o=Vt(t),a=!v.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===T.css(t,"boxSizing",!1,o),u=r?ie(t,e,r,s,o):0;return s&&a&&(u-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-ie(t,e,"border",!1,o)-.5)),u&&(i=it.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=T.css(t,e)),re(0,n,u)}}})),T.cssHooks.marginLeft=Gt(v.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(zt(t,"marginLeft"))||t.getBoundingClientRect().left-ct(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),T.each({margin:"",padding:"",border:"Width"},(function(t,e){T.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+ot[r]+e]=o[r]||o[r-2]||o[0];return i}},"margin"!==t&&(T.cssHooks[t+e].set=re)})),T.fn.extend({css:function(t,e){return V(this,(function(t,e,n){var r,i,o={},a=0;if(Array.isArray(e)){for(r=Vt(t),i=e.length;a<i;a++)o[e[a]]=T.css(t,e[a],!1,r);return o}return void 0!==n?T.style(t,e,n):T.css(t,e)}),t,e,arguments.length>1)}}),T.Tween=ae,ae.prototype={constructor:ae,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||T.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(T.cssNumber[n]?"":"px")},cur:function(){var t=ae.propHooks[this.prop];return t&&t.get?t.get(this):ae.propHooks._default.get(this)},run:function(t){var e,n=ae.propHooks[this.prop];return this.options.duration?this.pos=e=T.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ae.propHooks._default.set(this),this}},ae.prototype.init.prototype=ae.prototype,ae.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=T.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){T.fx.step[t.prop]?T.fx.step[t.prop](t):1!==t.elem.nodeType||!T.cssHooks[t.prop]&&null==t.elem.style[Zt(t.prop)]?t.elem[t.prop]=t.now:T.style(t.elem,t.prop,t.now+t.unit)}}},ae.propHooks.scrollTop=ae.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},T.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},T.fx=ae.prototype.init,T.fx.step={};var se,ue,le=/^(?:toggle|show|hide)$/,ce=/queueHooks$/;function fe(){ue&&(!1===a.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(fe):n.setTimeout(fe,T.fx.interval),T.fx.tick())}function he(){return n.setTimeout((function(){se=void 0})),se=Date.now()}function pe(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)i["margin"+(n=ot[r])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function de(t,e,n){for(var r,i=(ge.tweeners[e]||[]).concat(ge.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function ge(t,e,n){var r,i,o=0,a=ge.prefilters.length,s=T.Deferred().always((function(){delete u.elem})),u=function(){if(i)return!1;for(var e=se||he(),n=Math.max(0,l.startTime+l.duration-e),r=1-(n/l.duration||0),o=0,a=l.tweens.length;o<a;o++)l.tweens[o].run(r);return s.notifyWith(t,[l,r,n]),r<1&&a?n:(a||s.notifyWith(t,[l,1,0]),s.resolveWith(t,[l]),!1)},l=s.promise({elem:t,props:T.extend({},e),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},n),originalProperties:e,originalOptions:n,startTime:se||he(),duration:n.duration,tweens:[],createTween:function(e,n){var r=T.Tween(t,l.opts,e,n,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(r),r},stop:function(e){var n=0,r=e?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return e?(s.notifyWith(t,[l,1,0]),s.resolveWith(t,[l,e])):s.rejectWith(t,[l,e]),this}}),c=l.props;for(!function(t,e){var n,r,i,o,a;for(n in t)if(i=e[r=X(n)],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(a=T.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete t[r],o)n in t||(t[n]=o[n],e[n]=i);else e[r]=i}(c,l.opts.specialEasing);o<a;o++)if(r=ge.prefilters[o].call(l,t,c,l.opts))return _(r.stop)&&(T._queueHooks(l.elem,l.opts.queue).stop=r.stop.bind(r)),r;return T.map(c,de,l),_(l.opts.start)&&l.opts.start.call(t,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),T.fx.timer(T.extend(u,{elem:t,anim:l,queue:l.opts.queue})),l}T.Animation=T.extend(ge,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ft(n.elem,t,it.exec(e),n),n}]},tweener:function(t,e){_(t)?(e=t,t=["*"]):t=t.match(H);for(var n,r=0,i=t.length;r<i;r++)n=t[r],ge.tweeners[n]=ge.tweeners[n]||[],ge.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,i,o,a,s,u,l,c,f="width"in e||"height"in e,h=this,p={},d=t.style,g=t.nodeType&&lt(t),m=Z.get(t,"fxshow");for(r in n.queue||(null==(a=T._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,h.always((function(){h.always((function(){a.unqueued--,T.queue(t,"fx").length||a.empty.fire()}))}))),e)if(i=e[r],le.test(i)){if(delete e[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;g=!0}p[r]=m&&m[r]||T.style(t,r)}if((u=!T.isEmptyObject(e))||!T.isEmptyObject(p))for(r in f&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(l=m&&m.display)&&(l=Z.get(t,"display")),"none"===(c=T.css(t,"display"))&&(l?c=l:(dt([t],!0),l=t.style.display||l,c=T.css(t,"display"),dt([t]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===T.css(t,"float")&&(u||(h.done((function(){d.display=l})),null==l&&(c=d.display,l="none"===c?"":c)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",h.always((function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}))),u=!1,p)u||(m?"hidden"in m&&(g=m.hidden):m=Z.access(t,"fxshow",{display:l}),o&&(m.hidden=!g),g&&dt([t],!0),h.done((function(){for(r in g||dt([t]),Z.remove(t,"fxshow"),p)T.style(t,r,p[r])}))),u=de(g?m[r]:0,r,h),r in m||(m[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(t,e){e?ge.prefilters.unshift(t):ge.prefilters.push(t)}}),T.speed=function(t,e,n){var r=t&&"object"==typeof t?T.extend({},t):{complete:n||!n&&e||_(t)&&t,duration:t,easing:n&&e||e&&!_(e)&&e};return T.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in T.fx.speeds?r.duration=T.fx.speeds[r.duration]:r.duration=T.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){_(r.old)&&r.old.call(this),r.queue&&T.dequeue(this,r.queue)},r},T.fn.extend({fadeTo:function(t,e,n,r){return this.filter(lt).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=T.isEmptyObject(t),o=T.speed(e,n,r),a=function(){var e=ge(this,T.extend({},t),o);(i||Z.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each((function(){var e=!0,i=null!=t&&t+"queueHooks",o=T.timers,a=Z.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ce.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||T.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=Z.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=T.timers,a=r?r.length:0;for(n.finish=!0,T.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish}))}}),T.each(["toggle","show","hide"],(function(t,e){var n=T.fn[e];T.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(pe(e,!0),t,r,i)}})),T.each({slideDown:pe("show"),slideUp:pe("hide"),slideToggle:pe("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){T.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}})),T.timers=[],T.fx.tick=function(){var t,e=0,n=T.timers;for(se=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||T.fx.stop(),se=void 0},T.fx.timer=function(t){T.timers.push(t),T.fx.start()},T.fx.interval=13,T.fx.start=function(){ue||(ue=!0,fe())},T.fx.stop=function(){ue=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(t,e){return t=T.fx&&T.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,r){var i=n.setTimeout(e,t);r.stop=function(){n.clearTimeout(i)}}))},function(){var t=a.createElement("input"),e=a.createElement("select").appendChild(a.createElement("option"));t.type="checkbox",v.checkOn=""!==t.value,v.optSelected=e.selected,(t=a.createElement("input")).value="t",t.type="radio",v.radioValue="t"===t.value}();var me,ve=T.expr.attrHandle;T.fn.extend({attr:function(t,e){return V(this,T.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){T.removeAttr(this,t)}))}}),T.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?T.prop(t,e,n):(1===o&&T.isXMLDoc(t)||(i=T.attrHooks[e.toLowerCase()]||(T.expr.match.bool.test(e)?me:void 0)),void 0!==n?null===n?void T.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:null==(r=T.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!v.radioValue&&"radio"===e&&k(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(H);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),me={set:function(t,e,n){return!1===e?T.removeAttr(t,n):t.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=ve[e]||T.find.attr;ve[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=ve[a],ve[a]=i,i=null!=n(t,e,r)?a:null,ve[a]=o),i}}));var _e=/^(?:input|select|textarea|button)$/i,ye=/^(?:a|area)$/i;function xe(t){return(t.match(H)||[]).join(" ")}function be(t){return t.getAttribute&&t.getAttribute("class")||""}function we(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(H)||[]}T.fn.extend({prop:function(t,e){return V(this,T.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[T.propFix[t]||t]}))}}),T.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&T.isXMLDoc(t)||(e=T.propFix[e]||e,i=T.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=T.find.attr(t,"tabindex");return e?parseInt(e,10):_e.test(t.nodeName)||ye.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(T.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){T.propFix[this.toLowerCase()]=this})),T.fn.extend({addClass:function(t){var e,n,r,i,o,a,s,u=0;if(_(t))return this.each((function(e){T(this).addClass(t.call(this,e,be(this)))}));if((e=we(t)).length)for(;n=this[u++];)if(i=be(n),r=1===n.nodeType&&" "+xe(i)+" "){for(a=0;o=e[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=xe(r))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,a,s,u=0;if(_(t))return this.each((function(e){T(this).removeClass(t.call(this,e,be(this)))}));if(!arguments.length)return this.attr("class","");if((e=we(t)).length)for(;n=this[u++];)if(i=be(n),r=1===n.nodeType&&" "+xe(i)+" "){for(a=0;o=e[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(s=xe(r))&&n.setAttribute("class",s)}return this},toggleClass:function(t,e){var n=typeof t,r="string"===n||Array.isArray(t);return"boolean"==typeof e&&r?e?this.addClass(t):this.removeClass(t):_(t)?this.each((function(n){T(this).toggleClass(t.call(this,n,be(this),e),e)})):this.each((function(){var e,i,o,a;if(r)for(i=0,o=T(this),a=we(t);e=a[i++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=be(this))&&Z.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Z.get(this,"__className__")||""))}))},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+xe(be(n))+" ").indexOf(e)>-1)return!0;return!1}});var Te=/\r/g;T.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=_(t),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?t.call(this,n,T(this).val()):t)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=T.map(i,(function(t){return null==t?"":t+""}))),(e=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))}))):i?(e=T.valHooks[i.type]||T.valHooks[i.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Te,""):null==n?"":n:void 0}}),T.extend({valHooks:{option:{get:function(t){var e=T.find.attr(t,"value");return null!=e?e:xe(T.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,a="select-one"===t.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!k(n.parentNode,"optgroup"))){if(e=T(n).val(),a)return e;s.push(e)}return s},set:function(t,e){for(var n,r,i=t.options,o=T.makeArray(e),a=i.length;a--;)((r=i[a]).selected=T.inArray(T.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),T.each(["radio","checkbox"],(function(){T.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=T.inArray(T(t).val(),e)>-1}},v.checkOn||(T.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),v.focusin="onfocusin"in n;var Ee=/^(?:focusinfocus|focusoutblur)$/,Ce=function(t){t.stopPropagation()};T.extend(T.event,{trigger:function(t,e,r,i){var o,s,u,l,c,f,h,p,g=[r||a],m=d.call(t,"type")?t.type:t,v=d.call(t,"namespace")?t.namespace.split("."):[];if(s=p=u=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!Ee.test(m+T.event.triggered)&&(m.indexOf(".")>-1&&(v=m.split("."),m=v.shift(),v.sort()),c=m.indexOf(":")<0&&"on"+m,(t=t[T.expando]?t:new T.Event(m,"object"==typeof t&&t)).isTrigger=i?2:3,t.namespace=v.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),e=null==e?[t]:T.makeArray(e,[t]),h=T.event.special[m]||{},i||!h.trigger||!1!==h.trigger.apply(r,e))){if(!i&&!h.noBubble&&!y(r)){for(l=h.delegateType||m,Ee.test(l+m)||(s=s.parentNode);s;s=s.parentNode)g.push(s),u=s;u===(r.ownerDocument||a)&&g.push(u.defaultView||u.parentWindow||n)}for(o=0;(s=g[o++])&&!t.isPropagationStopped();)p=s,t.type=o>1?l:h.bindType||m,(f=(Z.get(s,"events")||{})[t.type]&&Z.get(s,"handle"))&&f.apply(s,e),(f=c&&s[c])&&f.apply&&K(s)&&(t.result=f.apply(s,e),!1===t.result&&t.preventDefault());return t.type=m,i||t.isDefaultPrevented()||h._default&&!1!==h._default.apply(g.pop(),e)||!K(r)||c&&_(r[m])&&!y(r)&&((u=r[c])&&(r[c]=null),T.event.triggered=m,t.isPropagationStopped()&&p.addEventListener(m,Ce),r[m](),t.isPropagationStopped()&&p.removeEventListener(m,Ce),T.event.triggered=void 0,u&&(r[c]=u)),t.result}},simulate:function(t,e,n){var r=T.extend(new T.Event,n,{type:t,isSimulated:!0});T.event.trigger(r,null,e)}}),T.fn.extend({trigger:function(t,e){return this.each((function(){T.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return T.event.trigger(t,e,n,!0)}}),v.focusin||T.each({focus:"focusin",blur:"focusout"},(function(t,e){var n=function(t){T.event.simulate(e,t.target,T.event.fix(t))};T.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=Z.access(r,e);i||r.addEventListener(t,n,!0),Z.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Z.access(r,e)-1;i?Z.access(r,e,i):(r.removeEventListener(t,n,!0),Z.remove(r,e))}}}));var Ae=n.location,Se=Date.now(),Ne=/\?/;T.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+t),e};var De=/\[\]$/,ke=/\r?\n/g,Me=/^(?:submit|button|image|reset|file)$/i,Ie=/^(?:input|select|textarea|keygen)/i;function Oe(t,e,n,r){var i;if(Array.isArray(e))T.each(e,(function(e,i){n||De.test(t)?r(t,i):Oe(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)}));else if(n||"object"!==w(e))r(t,e);else for(i in e)Oe(t+"["+i+"]",e[i],n,r)}T.param=function(t,e){var n,r=[],i=function(t,e){var n=_(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!T.isPlainObject(t))T.each(t,(function(){i(this.name,this.value)}));else for(n in t)Oe(n,t[n],e,i);return r.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=T.prop(this,"elements");return t?T.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!T(this).is(":disabled")&&Ie.test(this.nodeName)&&!Me.test(t)&&(this.checked||!gt.test(t))})).map((function(t,e){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,(function(t){return{name:e.name,value:t.replace(ke,"\r\n")}})):{name:e.name,value:n.replace(ke,"\r\n")}})).get()}});var Le=/%20/g,Pe=/#.*$/,je=/([?&])_=[^&]*/,Re=/^(.*?):[ \t]*([^\r\n]*)$/gm,He=/^(?:GET|HEAD)$/,qe=/^\/\//,Fe={},Ue={},Be="*/".concat("*"),We=a.createElement("a");function Ye(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(H)||[];if(_(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function Ve(t,e,n,r){var i={},o=t===Ue;function a(s){var u;return i[s]=!0,T.each(t[s]||[],(function(t,s){var l=s(e,n,r);return"string"!=typeof l||o||i[l]?o?!(u=l):void 0:(e.dataTypes.unshift(l),a(l),!1)})),u}return a(e.dataTypes[0])||!i["*"]&&a("*")}function $e(t,e){var n,r,i=T.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&T.extend(!0,t,r),t}We.href=Ae.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ae.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ae.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Be,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?$e($e(t,T.ajaxSettings),e):$e(T.ajaxSettings,t)},ajaxPrefilter:Ye(Fe),ajaxTransport:Ye(Ue),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var r,i,o,s,u,l,c,f,h,p,d=T.ajaxSetup({},e),g=d.context||d,m=d.context&&(g.nodeType||g.jquery)?T(g):T.event,v=T.Deferred(),_=T.Callbacks("once memory"),y=d.statusCode||{},x={},b={},w="canceled",E={readyState:0,getResponseHeader:function(t){var e;if(c){if(!s)for(s={};e=Re.exec(o);)s[e[1].toLowerCase()+" "]=(s[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=s[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(t,e){return null==c&&(t=b[t.toLowerCase()]=b[t.toLowerCase()]||t,x[t]=e),this},overrideMimeType:function(t){return null==c&&(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)E.always(t[E.status]);else for(e in t)y[e]=[y[e],t[e]];return this},abort:function(t){var e=t||w;return r&&r.abort(e),C(0,e),this}};if(v.promise(E),d.url=((t||d.url||Ae.href)+"").replace(qe,Ae.protocol+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(H)||[""],null==d.crossDomain){l=a.createElement("a");try{l.href=d.url,l.href=l.href,d.crossDomain=We.protocol+"//"+We.host!=l.protocol+"//"+l.host}catch(t){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=T.param(d.data,d.traditional)),Ve(Fe,d,e,E),c)return E;for(h in(f=T.event&&d.global)&&0==T.active++&&T.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!He.test(d.type),i=d.url.replace(Pe,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(Le,"+")):(p=d.url.slice(i.length),d.data&&(d.processData||"string"==typeof d.data)&&(i+=(Ne.test(i)?"&":"?")+d.data,delete d.data),!1===d.cache&&(i=i.replace(je,"$1"),p=(Ne.test(i)?"&":"?")+"_="+Se+++p),d.url=i+p),d.ifModified&&(T.lastModified[i]&&E.setRequestHeader("If-Modified-Since",T.lastModified[i]),T.etag[i]&&E.setRequestHeader("If-None-Match",T.etag[i])),(d.data&&d.hasContent&&!1!==d.contentType||e.contentType)&&E.setRequestHeader("Content-Type",d.contentType),E.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Be+"; q=0.01":""):d.accepts["*"]),d.headers)E.setRequestHeader(h,d.headers[h]);if(d.beforeSend&&(!1===d.beforeSend.call(g,E,d)||c))return E.abort();if(w="abort",_.add(d.complete),E.done(d.success),E.fail(d.error),r=Ve(Ue,d,e,E)){if(E.readyState=1,f&&m.trigger("ajaxSend",[E,d]),c)return E;d.async&&d.timeout>0&&(u=n.setTimeout((function(){E.abort("timeout")}),d.timeout));try{c=!1,r.send(x,C)}catch(t){if(c)throw t;C(-1,t)}}else C(-1,"No Transport");function C(t,e,a,s){var l,h,p,x,b,w=e;c||(c=!0,u&&n.clearTimeout(u),r=void 0,o=s||"",E.readyState=t>0?4:0,l=t>=200&&t<300||304===t,a&&(x=function(t,e,n){for(var r,i,o,a,s=t.contents,u=t.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||t.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(d,E,a)),x=function(t,e,n,r){var i,o,a,s,u,l={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)l[a.toLowerCase()]=t.converters[a];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!u&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+u+" to "+o}}}return{state:"success",data:e}}(d,x,E,l),l?(d.ifModified&&((b=E.getResponseHeader("Last-Modified"))&&(T.lastModified[i]=b),(b=E.getResponseHeader("etag"))&&(T.etag[i]=b)),204===t||"HEAD"===d.type?w="nocontent":304===t?w="notmodified":(w=x.state,h=x.data,l=!(p=x.error))):(p=w,!t&&w||(w="error",t<0&&(t=0))),E.status=t,E.statusText=(e||w)+"",l?v.resolveWith(g,[h,w,E]):v.rejectWith(g,[E,w,p]),E.statusCode(y),y=void 0,f&&m.trigger(l?"ajaxSuccess":"ajaxError",[E,d,l?h:p]),_.fireWith(g,[E,w]),f&&(m.trigger("ajaxComplete",[E,d]),--T.active||T.event.trigger("ajaxStop")))}return E},getJSON:function(t,e,n){return T.get(t,e,n,"json")},getScript:function(t,e){return T.get(t,void 0,e,"script")}}),T.each(["get","post"],(function(t,e){T[e]=function(t,n,r,i){return _(n)&&(i=i||r,r=n,n=void 0),T.ajax(T.extend({url:t,type:e,dataType:i,data:n,success:r},T.isPlainObject(t)&&t))}})),T._evalUrl=function(t,e){return T.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){T.globalEval(t,e)}})},T.fn.extend({wrapAll:function(t){var e;return this[0]&&(_(t)&&(t=t.call(this[0])),e=T(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return _(t)?this.each((function(e){T(this).wrapInner(t.call(this,e))})):this.each((function(){var e=T(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=_(t);return this.each((function(n){T(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){T(this).replaceWith(this.childNodes)})),this}}),T.expr.pseudos.hidden=function(t){return!T.expr.pseudos.visible(t)},T.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var ze={0:200,1223:204},Ge=T.ajaxSettings.xhr();v.cors=!!Ge&&"withCredentials"in Ge,v.ajax=Ge=!!Ge,T.ajaxTransport((function(t){var e,r;if(v.cors||Ge&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];for(a in t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);e=function(t){return function(){e&&(e=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(ze[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=e(),r=s.onerror=s.ontimeout=e("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){e&&r()}))},e=e("abort");try{s.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),T.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return T.globalEval(t),t}}}),T.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),T.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(r,i){e=T("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),a.head.appendChild(e[0])},abort:function(){n&&n()}}}));var Xe,Ke=[],Qe=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ke.pop()||T.expando+"_"+Se++;return this[t]=!0,t}}),T.ajaxPrefilter("json jsonp",(function(t,e,r){var i,o,a,s=!1!==t.jsonp&&(Qe.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qe.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=_(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Qe,"$1"+i):!1!==t.jsonp&&(t.url+=(Ne.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||T.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always((function(){void 0===o?T(n).removeProp(i):n[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,Ke.push(i)),a&&_(o)&&o(a[0]),a=o=void 0})),"script"})),v.createHTMLDocument=((Xe=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Xe.childNodes.length),T.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(v.createHTMLDocument?((r=(e=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,e.head.appendChild(r)):e=a),o=!n&&[],(i=M.exec(t))?[e.createElement(i[1])]:(i=Et([t],e,o),o&&o.length&&T(o).remove(),T.merge([],i.childNodes)));var r,i,o},T.fn.load=function(t,e,n){var r,i,o,a=this,s=t.indexOf(" ");return s>-1&&(r=xe(t.slice(s)),t=t.slice(0,s)),_(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&T.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done((function(t){o=arguments,a.html(r?T("<div>").append(T.parseHTML(t)).find(r):t)})).always(n&&function(t,e){a.each((function(){n.apply(this,o||[t.responseText,e,t])}))}),this},T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){T.fn[e]=function(t){return this.on(e,t)}})),T.expr.pseudos.animated=function(t){return T.grep(T.timers,(function(e){return t===e.elem})).length},T.offset={setOffset:function(t,e,n){var r,i,o,a,s,u,l=T.css(t,"position"),c=T(t),f={};"static"===l&&(t.style.position="relative"),s=c.offset(),o=T.css(t,"top"),u=T.css(t,"left"),("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),_(e)&&(e=e.call(t,n,T.extend({},s))),null!=e.top&&(f.top=e.top-s.top+a),null!=e.left&&(f.left=e.left-s.left+i),"using"in e?e.using.call(t,f):c.css(f)}},T.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){T.offset.setOffset(this,t,e)}));var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,r=this[0],i={top:0,left:0};if("fixed"===T.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),n=r.ownerDocument,t=r.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===T.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((i=T(t).offset()).top+=T.css(t,"borderTopWidth",!0),i.left+=T.css(t,"borderLeftWidth",!0))}return{top:e.top-i.top-T.css(r,"marginTop",!0),left:e.left-i.left-T.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===T.css(t,"position");)t=t.offsetParent;return t||at}))}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;T.fn[t]=function(r){return V(this,(function(t,r,i){var o;if(y(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[e]:t[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i}),t,r,arguments.length)}})),T.each(["top","left"],(function(t,e){T.cssHooks[e]=Gt(v.pixelPosition,(function(t,n){if(n)return n=zt(t,e),Yt.test(n)?T(t).position()[e]+"px":n}))})),T.each({Height:"height",Width:"width"},(function(t,e){T.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,r){T.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return V(this,(function(e,n,i){var o;return y(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?T.css(e,n,s):T.style(e,n,i,s)}),e,a?i:void 0,a)}}))})),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){T.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}})),T.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),T.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),T.proxy=function(t,e){var n,r,i;if("string"==typeof e&&(n=t[e],e=t,t=n),_(t))return r=u.call(arguments,2),(i=function(){return t.apply(e||this,r.concat(u.call(arguments)))}).guid=t.guid=t.guid||T.guid++,i},T.holdReady=function(t){t?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=k,T.isFunction=_,T.isWindow=y,T.camelCase=X,T.type=w,T.now=Date.now,T.isNumeric=function(t){var e=T.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},void 0===(r=function(){return T}.apply(e,[]))||(t.exports=r);var Ze=n.jQuery,Je=n.$;return T.noConflict=function(t){return n.$===T&&(n.$=Je),t&&n.jQuery===T&&(n.jQuery=Ze),T},i||(n.jQuery=n.$=T),T}))},function(t,e,n){"use strict";n.r(e),function(t){
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.0
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,r=function(){for(var t=["Edge","Trident","Firefox"],e=0;e<t.length;e+=1)if(n&&navigator.userAgent.indexOf(t[e])>=0)return 1;return 0}();var i=n&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then((function(){e=!1,t()})))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout((function(){e=!1,t()}),r))}};function o(t){return t&&"[object Function]"==={}.toString.call(t)}function a(t,e){if(1!==t.nodeType)return[];var n=t.ownerDocument.defaultView.getComputedStyle(t,null);return e?n[e]:n}function s(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function u(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=a(t),n=e.overflow,r=e.overflowX,i=e.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?t:u(s(t))}function l(t){return t&&t.referenceNode?t.referenceNode:t}var c=n&&!(!window.MSInputMethodContext||!document.documentMode),f=n&&/MSIE 10/.test(navigator.userAgent);function h(t){return 11===t?c:10===t?f:c||f}function p(t){if(!t)return document.documentElement;for(var e=h(10)?document.body:null,n=t.offsetParent||null;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===a(n,"position")?p(n):n:t?t.ownerDocument.documentElement:document.documentElement}function d(t){return null!==t.parentNode?d(t.parentNode):t}function g(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?t:e,i=n?e:t,o=document.createRange();o.setStart(r,0),o.setEnd(i,0);var a,s,u=o.commonAncestorContainer;if(t!==u&&e!==u||r.contains(i))return"BODY"===(s=(a=u).nodeName)||"HTML"!==s&&p(a.firstElementChild)!==a?p(u):u;var l=d(t);return l.host?g(l.host,e):g(t,d(e).host)}function m(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var r=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||r)[e]}return t[e]}function v(t,e){var n="x"===e?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+r+"Width"],10)}function _(t,e,n,r){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],h(10)?parseInt(n["offset"+t])+parseInt(r["margin"+("Height"===t?"Top":"Left")])+parseInt(r["margin"+("Height"===t?"Bottom":"Right")]):0)}function y(t){var e=t.body,n=t.documentElement,r=h(10)&&getComputedStyle(n);return{height:_("Height",e,n,r),width:_("Width",e,n,r)}}var x=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},b=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),w=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},T=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function E(t){return T({},t,{right:t.left+t.width,bottom:t.top+t.height})}function C(t){var e={};try{if(h(10)){e=t.getBoundingClientRect();var n=m(t,"top"),r=m(t,"left");e.top+=n,e.left+=r,e.bottom+=n,e.right+=r}else e=t.getBoundingClientRect()}catch(t){}var i={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},o="HTML"===t.nodeName?y(t.ownerDocument):{},s=o.width||t.clientWidth||i.width,u=o.height||t.clientHeight||i.height,l=t.offsetWidth-s,c=t.offsetHeight-u;if(l||c){var f=a(t);l-=v(f,"x"),c-=v(f,"y"),i.width-=l,i.height-=c}return E(i)}function A(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=h(10),i="HTML"===e.nodeName,o=C(t),s=C(e),l=u(t),c=a(e),f=parseFloat(c.borderTopWidth,10),p=parseFloat(c.borderLeftWidth,10);n&&i&&(s.top=Math.max(s.top,0),s.left=Math.max(s.left,0));var d=E({top:o.top-s.top-f,left:o.left-s.left-p,width:o.width,height:o.height});if(d.marginTop=0,d.marginLeft=0,!r&&i){var g=parseFloat(c.marginTop,10),v=parseFloat(c.marginLeft,10);d.top-=f-g,d.bottom-=f-g,d.left-=p-v,d.right-=p-v,d.marginTop=g,d.marginLeft=v}return(r&&!n?e.contains(l):e===l&&"BODY"!==l.nodeName)&&(d=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=m(e,"top"),i=m(e,"left"),o=n?-1:1;return t.top+=r*o,t.bottom+=r*o,t.left+=i*o,t.right+=i*o,t}(d,e)),d}function S(t){if(!t||!t.parentElement||h())return document.documentElement;for(var e=t.parentElement;e&&"none"===a(e,"transform");)e=e.parentElement;return e||document.documentElement}function N(t,e,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},c=i?S(t):g(t,l(e));if("viewport"===r)o=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,r=A(t,n),i=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),a=e?0:m(n),s=e?0:m(n,"left");return E({top:a-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:i,height:o})}(c,i);else{var f=void 0;"scrollParent"===r?"BODY"===(f=u(s(e))).nodeName&&(f=t.ownerDocument.documentElement):f="window"===r?t.ownerDocument.documentElement:r;var h=A(f,c,i);if("HTML"!==f.nodeName||function t(e){var n=e.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===a(e,"position"))return!0;var r=s(e);return!!r&&t(r)}(c))o=h;else{var p=y(t.ownerDocument),d=p.height,v=p.width;o.top+=h.top-h.marginTop,o.bottom=d+h.top,o.left+=h.left-h.marginLeft,o.right=v+h.left}}var _="number"==typeof(n=n||0);return o.left+=_?n:n.left||0,o.top+=_?n:n.top||0,o.right-=_?n:n.right||0,o.bottom-=_?n:n.bottom||0,o}function D(t,e,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var a=N(n,r,o,i),s={top:{width:a.width,height:e.top-a.top},right:{width:a.right-e.right,height:a.height},bottom:{width:a.width,height:a.bottom-e.bottom},left:{width:e.left-a.left,height:a.height}},u=Object.keys(s).map((function(t){return T({key:t},s[t],{area:(e=s[t],e.width*e.height)});var e})).sort((function(t,e){return e.area-t.area})),l=u.filter((function(t){var e=t.width,r=t.height;return e>=n.clientWidth&&r>=n.clientHeight})),c=l.length>0?l[0].key:u[0].key,f=t.split("-")[1];return c+(f?"-"+f:"")}function k(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return A(n,r?S(e):g(e,l(n)),r)}function M(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),n=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),r=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+r,height:t.offsetHeight+n}}function I(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,(function(t){return e[t]}))}function O(t,e,n){n=n.split("-")[0];var r=M(t),i={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",s=o?"left":"top",u=o?"height":"width",l=o?"width":"height";return i[a]=e[a]+e[u]/2-r[u]/2,i[s]=n===s?e[s]-r[l]:e[I(s)],i}function L(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function P(t,e,n){return(void 0===n?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex((function(t){return t[e]===n}));var r=L(t,(function(t){return t[e]===n}));return t.indexOf(r)}(t,"name",n))).forEach((function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&o(n)&&(e.offsets.popper=E(e.offsets.popper),e.offsets.reference=E(e.offsets.reference),e=n(e,t))})),e}function j(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=k(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=D(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=O(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=P(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}function R(t,e){return t.some((function(t){var n=t.name;return t.enabled&&n===e}))}function H(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),r=0;r<e.length;r++){var i=e[r],o=i?""+i+n:t;if(void 0!==document.body.style[o])return o}return null}function q(){return this.state.isDestroyed=!0,R(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function F(t){var e=t.ownerDocument;return e?e.defaultView:window}function U(t,e,n,r){n.updateBound=r,F(t).addEventListener("resize",n.updateBound,{passive:!0});var i=u(t);return function t(e,n,r,i){var o="BODY"===e.nodeName,a=o?e.ownerDocument.defaultView:e;a.addEventListener(n,r,{passive:!0}),o||t(u(a.parentNode),n,r,i),i.push(a)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function B(){this.state.eventsEnabled||(this.state=U(this.reference,this.options,this.state,this.scheduleUpdate))}function W(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,F(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach((function(t){t.removeEventListener("scroll",e.updateBound)})),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function Y(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function V(t,e){Object.keys(e).forEach((function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&Y(e[n])&&(r="px"),t.style[n]=e[n]+r}))}var $=n&&/Firefox/i.test(navigator.userAgent);function z(t,e,n){var r=L(t,(function(t){return t.name===e})),i=!!r&&t.some((function(t){return t.name===n&&t.enabled&&t.order<r.order}));if(!i){var o="`"+e+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var G=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],X=G.slice(3);function K(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=X.indexOf(t),r=X.slice(n+1).concat(X.slice(0,n));return e?r.reverse():r}var Q={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function Z(t,e,n,r){var i=[0,0],o=-1!==["right","left"].indexOf(r),a=t.split(/(\+|\-)/).map((function(t){return t.trim()})),s=a.indexOf(L(a,(function(t){return-1!==t.search(/,|\s/)})));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,l=-1!==s?[a.slice(0,s).concat([a[s].split(u)[0]]),[a[s].split(u)[1]].concat(a.slice(s+1))]:[a];return(l=l.map((function(t,r){var i=(1===r?!o:o)?"height":"width",a=!1;return t.reduce((function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,a=!0,t):a?(t[t.length-1]+=e,a=!1,t):t.concat(e)}),[]).map((function(t){return function(t,e,n,r){var i=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],a=i[2];if(!o)return t;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=r}return E(s)[e]/100*o}if("vh"===a||"vw"===a){return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o}return o}(t,i,e,n)}))}))).forEach((function(t,e){t.forEach((function(n,r){Y(n)&&(i[e]+=n*("-"===t[r-1]?-1:1))}))})),i}var J={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],r=e.split("-")[1];if(r){var i=t.offsets,o=i.reference,a=i.popper,s=-1!==["bottom","top"].indexOf(n),u=s?"left":"top",l=s?"width":"height",c={start:w({},u,o[u]),end:w({},u,o[u]+o[l]-a[l])};t.offsets.popper=T({},a,c[r])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,r=t.placement,i=t.offsets,o=i.popper,a=i.reference,s=r.split("-")[0],u=void 0;return u=Y(+n)?[+n,0]:Z(n,o,a,s),"left"===s?(o.top+=u[0],o.left-=u[1]):"right"===s?(o.top+=u[0],o.left+=u[1]):"top"===s?(o.left+=u[0],o.top-=u[1]):"bottom"===s&&(o.left+=u[0],o.top+=u[1]),t.popper=o,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||p(t.instance.popper);t.instance.reference===n&&(n=p(n));var r=H("transform"),i=t.instance.popper.style,o=i.top,a=i.left,s=i[r];i.top="",i.left="",i[r]="";var u=N(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);i.top=o,i.left=a,i[r]=s,e.boundaries=u;var l=e.priority,c=t.offsets.popper,f={primary:function(t){var n=c[t];return c[t]<u[t]&&!e.escapeWithReference&&(n=Math.max(c[t],u[t])),w({},t,n)},secondary:function(t){var n="right"===t?"left":"top",r=c[n];return c[t]>u[t]&&!e.escapeWithReference&&(r=Math.min(c[n],u[t]-("right"===t?c.width:c.height))),w({},n,r)}};return l.forEach((function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";c=T({},c,f[e](t))})),t.offsets.popper=c,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,r=e.reference,i=t.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(i),s=a?"right":"bottom",u=a?"left":"top",l=a?"width":"height";return n[s]<o(r[u])&&(t.offsets.popper[u]=o(r[u])-n[l]),n[u]>o(r[s])&&(t.offsets.popper[u]=o(r[s])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!z(t.instance.modifiers,"arrow","keepTogether"))return t;var r=e.element;if("string"==typeof r){if(!(r=t.instance.popper.querySelector(r)))return t}else if(!t.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var i=t.placement.split("-")[0],o=t.offsets,s=o.popper,u=o.reference,l=-1!==["left","right"].indexOf(i),c=l?"height":"width",f=l?"Top":"Left",h=f.toLowerCase(),p=l?"left":"top",d=l?"bottom":"right",g=M(r)[c];u[d]-g<s[h]&&(t.offsets.popper[h]-=s[h]-(u[d]-g)),u[h]+g>s[d]&&(t.offsets.popper[h]+=u[h]+g-s[d]),t.offsets.popper=E(t.offsets.popper);var m=u[h]+u[c]/2-g/2,v=a(t.instance.popper),_=parseFloat(v["margin"+f],10),y=parseFloat(v["border"+f+"Width"],10),x=m-t.offsets.popper[h]-_-y;return x=Math.max(Math.min(s[c]-g,x),0),t.arrowElement=r,t.offsets.arrow=(w(n={},h,Math.round(x)),w(n,p,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(R(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=N(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),r=t.placement.split("-")[0],i=I(r),o=t.placement.split("-")[1]||"",a=[];switch(e.behavior){case Q.FLIP:a=[r,i];break;case Q.CLOCKWISE:a=K(r);break;case Q.COUNTERCLOCKWISE:a=K(r,!0);break;default:a=e.behavior}return a.forEach((function(s,u){if(r!==s||a.length===u+1)return t;r=t.placement.split("-")[0],i=I(r);var l=t.offsets.popper,c=t.offsets.reference,f=Math.floor,h="left"===r&&f(l.right)>f(c.left)||"right"===r&&f(l.left)<f(c.right)||"top"===r&&f(l.bottom)>f(c.top)||"bottom"===r&&f(l.top)<f(c.bottom),p=f(l.left)<f(n.left),d=f(l.right)>f(n.right),g=f(l.top)<f(n.top),m=f(l.bottom)>f(n.bottom),v="left"===r&&p||"right"===r&&d||"top"===r&&g||"bottom"===r&&m,_=-1!==["top","bottom"].indexOf(r),y=!!e.flipVariations&&(_&&"start"===o&&p||_&&"end"===o&&d||!_&&"start"===o&&g||!_&&"end"===o&&m),x=!!e.flipVariationsByContent&&(_&&"start"===o&&d||_&&"end"===o&&p||!_&&"start"===o&&m||!_&&"end"===o&&g),b=y||x;(h||v||b)&&(t.flipped=!0,(h||v)&&(r=a[u+1]),b&&(o=function(t){return"end"===t?"start":"start"===t?"end":t}(o)),t.placement=r+(o?"-"+o:""),t.offsets.popper=T({},t.offsets.popper,O(t.instance.popper,t.offsets.reference,t.placement)),t=P(t.instance.modifiers,t,"flip"))})),t},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],r=t.offsets,i=r.popper,o=r.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return i[a?"left":"top"]=o[n]-(s?i[a?"width":"height"]:0),t.placement=I(e),t.offsets.popper=E(i),t}},hide:{order:800,enabled:!0,fn:function(t){if(!z(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=L(t.instance.modifiers,(function(t){return"preventOverflow"===t.name})).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,r=e.y,i=t.offsets.popper,o=L(t.instance.modifiers,(function(t){return"applyStyle"===t.name})).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:e.gpuAcceleration,s=p(t.instance.popper),u=C(s),l={position:i.position},c=function(t,e){var n=t.offsets,r=n.popper,i=n.reference,o=Math.round,a=Math.floor,s=function(t){return t},u=o(i.width),l=o(r.width),c=-1!==["left","right"].indexOf(t.placement),f=-1!==t.placement.indexOf("-"),h=e?c||f||u%2==l%2?o:a:s,p=e?o:s;return{left:h(u%2==1&&l%2==1&&!f&&e?r.left-1:r.left),top:p(r.top),bottom:p(r.bottom),right:h(r.right)}}(t,window.devicePixelRatio<2||!$),f="bottom"===n?"top":"bottom",h="right"===r?"left":"right",d=H("transform"),g=void 0,m=void 0;if(m="bottom"===f?"HTML"===s.nodeName?-s.clientHeight+c.bottom:-u.height+c.bottom:c.top,g="right"===h?"HTML"===s.nodeName?-s.clientWidth+c.right:-u.width+c.right:c.left,a&&d)l[d]="translate3d("+g+"px, "+m+"px, 0)",l[f]=0,l[h]=0,l.willChange="transform";else{var v="bottom"===f?-1:1,_="right"===h?-1:1;l[f]=m*v,l[h]=g*_,l.willChange=f+", "+h}var y={"x-placement":t.placement};return t.attributes=T({},y,t.attributes),t.styles=T({},l,t.styles),t.arrowStyles=T({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return V(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach((function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)})),t.arrowElement&&Object.keys(t.arrowStyles).length&&V(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,r,i){var o=k(i,e,t,n.positionFixed),a=D(n.placement,o,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",a),V(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},tt=function(){function t(e,n){var r=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};x(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=i(this.update.bind(this)),this.options=T({},t.Defaults,a),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(T({},t.Defaults.modifiers,a.modifiers)).forEach((function(e){r.options.modifiers[e]=T({},t.Defaults.modifiers[e]||{},a.modifiers?a.modifiers[e]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(t){return T({name:t},r.options.modifiers[t])})).sort((function(t,e){return t.order-e.order})),this.modifiers.forEach((function(t){t.enabled&&o(t.onLoad)&&t.onLoad(r.reference,r.popper,r.options,t,r.state)})),this.update();var s=this.options.eventsEnabled;s&&this.enableEventListeners(),this.state.eventsEnabled=s}return b(t,[{key:"update",value:function(){return j.call(this)}},{key:"destroy",value:function(){return q.call(this)}},{key:"enableEventListeners",value:function(){return B.call(this)}},{key:"disableEventListeners",value:function(){return W.call(this)}}]),t}();tt.Utils=("undefined"!=typeof window?window:t).PopperUtils,tt.placements=G,tt.Defaults=J,e.default=tt}.call(this,n(9))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";n.r(e);n(6);var r=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},i=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return r(e(t),n)}),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}};var o=i(r),a=o.right,s=(o.left,a);var u=function(t,e){var n,r,i,o=t.length,a=-1;if(null==e){for(;++a<o;)if(null!=(n=t[a])&&n>=n)for(r=i=n;++a<o;)null!=(n=t[a])&&(r>n&&(r=n),i<n&&(i=n))}else for(;++a<o;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=i=n;++a<o;)null!=(n=e(t[a],a,t))&&(r>n&&(r=n),i<n&&(i=n));return[r,i]},l=Array.prototype,c=l.slice,f=(l.map,function(t){return function(){return t}}),h=function(t){return t},p=function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o},d=Math.sqrt(50),g=Math.sqrt(10),m=Math.sqrt(2),v=function(t,e,n){var r,i,o,a,s=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=_(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),o=new Array(i=Math.ceil(t-e+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o};function _(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=d?10:o>=g?5:o>=m?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=d?10:o>=g?5:o>=m?2:1)}function y(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=d?i*=10:o>=g?i*=5:o>=m&&(i*=2),e<t?-i:i}var x=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},b=function(){var t=h,e=u,n=x;function r(r){var i,o,a=r.length,u=new Array(a);for(i=0;i<a;++i)u[i]=t(r[i],i,r);var l=e(u),c=l[0],f=l[1],h=n(u,c,f);Array.isArray(h)||(h=y(c,f,h),h=p(Math.ceil(c/h)*h,f,h));for(var d=h.length;h[0]<=c;)h.shift(),--d;for(;h[d-1]>f;)h.pop(),--d;var g,m=new Array(d+1);for(i=0;i<=d;++i)(g=m[i]=[]).x0=i>0?h[i-1]:c,g.x1=i<d?h[i]:f;for(i=0;i<a;++i)c<=(o=u[i])&&o<=f&&m[s(h,o,0,d)].push(r[i]);return m}return r.value=function(e){return arguments.length?(t="function"==typeof e?e:f(e),r):t},r.domain=function(t){return arguments.length?(e="function"==typeof t?t:f([t[0],t[1]]),r):e},r.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?f(c.call(t)):f(t),r):n},r},w=function(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&n>r&&(r=n);return r};var T=Array.prototype.slice,E=function(t){return t},C=1,A=2,S=3,N=4,D=1e-6;function k(t){return"translate("+(t+.5)+",0)"}function M(t){return"translate(0,"+(t+.5)+")"}function I(t){return function(e){return+t(e)}}function O(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function L(){return!this.__axis}function P(t,e){var n=[],r=null,i=null,o=6,a=6,s=3,u=t===C||t===N?-1:1,l=t===N||t===A?"x":"y",c=t===C||t===S?k:M;function f(f){var h=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,p=null==i?e.tickFormat?e.tickFormat.apply(e,n):E:i,d=Math.max(o,0)+s,g=e.range(),m=+g[0]+.5,v=+g[g.length-1]+.5,_=(e.bandwidth?O:I)(e.copy()),y=f.selection?f.selection():f,x=y.selectAll(".domain").data([null]),b=y.selectAll(".tick").data(h,e).order(),w=b.exit(),T=b.enter().append("g").attr("class","tick"),k=b.select("line"),M=b.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),b=b.merge(T),k=k.merge(T.append("line").attr("stroke","currentColor").attr(l+"2",u*o)),M=M.merge(T.append("text").attr("fill","currentColor").attr(l,u*d).attr("dy",t===C?"0em":t===S?"0.71em":"0.32em")),f!==y&&(x=x.transition(f),b=b.transition(f),k=k.transition(f),M=M.transition(f),w=w.transition(f).attr("opacity",D).attr("transform",(function(t){return isFinite(t=_(t))?c(t):this.getAttribute("transform")})),T.attr("opacity",D).attr("transform",(function(t){var e=this.parentNode.__axis;return c(e&&isFinite(e=e(t))?e:_(t))}))),w.remove(),x.attr("d",t===N||t==A?a?"M"+u*a+","+m+"H0.5V"+v+"H"+u*a:"M0.5,"+m+"V"+v:a?"M"+m+","+u*a+"V0.5H"+v+"V"+u*a:"M"+m+",0.5H"+v),b.attr("opacity",1).attr("transform",(function(t){return c(_(t))})),k.attr(l+"2",u*o),M.attr(l,u*d).text(p),y.filter(L).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===A?"start":t===N?"end":"middle"),y.each((function(){this.__axis=_}))}return f.scale=function(t){return arguments.length?(e=t,f):e},f.ticks=function(){return n=T.call(arguments),f},f.tickArguments=function(t){return arguments.length?(n=null==t?[]:T.call(t),f):n.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:T.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(o=a=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(a=+t,f):a},f.tickPadding=function(t){return arguments.length?(s=+t,f):s},f}function j(t){return P(S,t)}function R(t){return P(N,t)}var H={value:function(){}};function q(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new F(r)}function F(t){this._=t}function U(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function B(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function W(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=H,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}F.prototype=q.prototype={constructor:F,on:function(t,e){var n,r=this._,i=U(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<a;)if(n=(t=i[o]).type)r[n]=W(r[n],t.name,e);else if(null==e)for(n in r)r[n]=W(r[n],t.name,null);return this}for(;++o<a;)if((n=(t=i[o]).type)&&(n=B(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new F(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var Y=q,V="http://www.w3.org/1999/xhtml",$={svg:"http://www.w3.org/2000/svg",xhtml:V,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},z=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),$.hasOwnProperty(e)?{space:$[e],local:t}:t};function G(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===V&&e.documentElement.namespaceURI===V?e.createElement(t):e.createElementNS(n,t)}}function X(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var K=function(t){var e=z(t);return(e.local?X:G)(e)};function Q(){}var Z=function(t){return null==t?Q:function(){return this.querySelector(t)}};function J(){return[]}var tt=function(t){return null==t?J:function(){return this.querySelectorAll(t)}},et=function(t){return function(){return this.matches(t)}},nt=function(t){return new Array(t.length)};function rt(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}rt.prototype={constructor:rt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var it="$";function ot(t,e,n,r,i,o){for(var a,s=0,u=e.length,l=o.length;s<l;++s)(a=e[s])?(a.__data__=o[s],r[s]=a):n[s]=new rt(t,o[s]);for(;s<u;++s)(a=e[s])&&(i[s]=a)}function at(t,e,n,r,i,o,a){var s,u,l,c={},f=e.length,h=o.length,p=new Array(f);for(s=0;s<f;++s)(u=e[s])&&(p[s]=l=it+a.call(u,u.__data__,s,e),l in c?i[s]=u:c[l]=u);for(s=0;s<h;++s)(u=c[l=it+a.call(t,o[s],s,o)])?(r[s]=u,u.__data__=o[s],c[l]=null):n[s]=new rt(t,o[s]);for(s=0;s<f;++s)(u=e[s])&&c[p[s]]===u&&(i[s]=u)}function st(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function ut(t){return function(){this.removeAttribute(t)}}function lt(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ct(t,e){return function(){this.setAttribute(t,e)}}function ft(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function ht(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function pt(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var dt=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function gt(t){return function(){this.style.removeProperty(t)}}function mt(t,e,n){return function(){this.style.setProperty(t,e,n)}}function vt(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function _t(t,e){return t.style.getPropertyValue(e)||dt(t).getComputedStyle(t,null).getPropertyValue(e)}function yt(t){return function(){delete this[t]}}function xt(t,e){return function(){this[t]=e}}function bt(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function wt(t){return t.trim().split(/^|\s+/)}function Tt(t){return t.classList||new Et(t)}function Et(t){this._node=t,this._names=wt(t.getAttribute("class")||"")}function Ct(t,e){for(var n=Tt(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function At(t,e){for(var n=Tt(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function St(t){return function(){Ct(this,t)}}function Nt(t){return function(){At(this,t)}}function Dt(t,e){return function(){(e.apply(this,arguments)?Ct:At)(this,t)}}Et.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function kt(){this.textContent=""}function Mt(t){return function(){this.textContent=t}}function It(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function Ot(){this.innerHTML=""}function Lt(t){return function(){this.innerHTML=t}}function Pt(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function jt(){this.nextSibling&&this.parentNode.appendChild(this)}function Rt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Ht(){return null}function qt(){var t=this.parentNode;t&&t.removeChild(this)}function Ft(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Ut(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Bt={},Wt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Bt={mouseenter:"mouseover",mouseleave:"mouseout"}));function Yt(t,e,n){return t=Vt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function Vt(t,e,n){return function(r){var i=Wt;Wt=r;try{t.call(this,this.__data__,e,n)}finally{Wt=i}}}function $t(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function zt(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function Gt(t,e,n){var r=Bt.hasOwnProperty(t.type)?Yt:Vt;return function(i,o,a){var s,u=this.__on,l=r(e,o,a);if(u)for(var c=0,f=u.length;c<f;++c)if((s=u[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=l,s.capture=n),void(s.value=e);this.addEventListener(t.type,l,n),s={type:t.type,name:t.name,value:e,listener:l,capture:n},u?u.push(s):this.__on=[s]}}function Xt(t,e,n){var r=dt(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function Kt(t,e){return function(){return Xt(this,t,e)}}function Qt(t,e){return function(){return Xt(this,t,e.apply(this,arguments))}}var Zt=[null];function Jt(t,e){this._groups=t,this._parents=e}function te(){return new Jt([[document.documentElement]],Zt)}Jt.prototype=te.prototype={constructor:Jt,select:function(t){"function"!=typeof t&&(t=Z(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,s=e[i],u=s.length,l=r[i]=new Array(u),c=0;c<u;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new Jt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=tt(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var a,s=e[o],u=s.length,l=0;l<u;++l)(a=s[l])&&(r.push(t.call(a,a.__data__,l,s)),i.push(a));return new Jt(r,i)},filter:function(t){"function"!=typeof t&&(t=et(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new Jt(r,this._parents)},data:function(t,e){if(!t)return d=new Array(this.size()),c=-1,this.each((function(t){d[++c]=t})),d;var n,r=e?at:ot,i=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var a=o.length,s=new Array(a),u=new Array(a),l=new Array(a),c=0;c<a;++c){var f=i[c],h=o[c],p=h.length,d=t.call(f,f&&f.__data__,c,i),g=d.length,m=u[c]=new Array(g),v=s[c]=new Array(g);r(f,h,m,v,l[c]=new Array(p),d,e);for(var _,y,x=0,b=0;x<g;++x)if(_=m[x]){for(x>=b&&(b=x+1);!(y=v[b])&&++b<g;);_._next=y||null}}return(s=new Jt(s,i))._enter=u,s._exit=l,s},enter:function(){return new Jt(this._enter||this._groups.map(nt),this._parents)},exit:function(){return new Jt(this._exit||this._groups.map(nt),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=e[s],c=n[s],f=l.length,h=a[s]=new Array(f),p=0;p<f;++p)(u=l[p]||c[p])&&(h[p]=u);for(;s<r;++s)a[s]=e[s];return new Jt(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=st);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],u=s.length,l=i[o]=new Array(u),c=0;c<u;++c)(a=s[c])&&(l[c]=a);l.sort(e)}return new Jt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=z(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?lt:ut:"function"==typeof e?n.local?pt:ht:n.local?ft:ct)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?gt:"function"==typeof e?vt:mt)(t,e,null==n?"":n)):_t(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?yt:"function"==typeof e?bt:xt)(t,e)):this.node()[t]},classed:function(t,e){var n=wt(t+"");if(arguments.length<2){for(var r=Tt(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?Dt:e?St:Nt)(n,e))},text:function(t){return arguments.length?this.each(null==t?kt:("function"==typeof t?It:Mt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Ot:("function"==typeof t?Pt:Lt)(t)):this.node().innerHTML},raise:function(){return this.each(jt)},lower:function(){return this.each(Rt)},append:function(t){var e="function"==typeof t?t:K(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:K(t),r=null==e?Ht:"function"==typeof e?e:Z(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(qt)},clone:function(t){return this.select(t?Ut:Ft)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=$t(t+""),a=o.length;if(!(arguments.length<2)){for(s=e?Gt:zt,null==n&&(n=!1),r=0;r<a;++r)this.each(s(o[r],e,n));return this}var s=this.node().__on;if(s)for(var u,l=0,c=s.length;l<c;++l)for(r=0,u=s[l];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?Qt:Kt)(t,e))}};var ee=te,ne=function(t){return"string"==typeof t?new Jt([[document.querySelector(t)]],[document.documentElement]):new Jt([[t]],Zt)},re=0;function ie(){this._="@"+(++re).toString(36)}ie.prototype=function(){return new ie}.prototype={constructor:ie,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var oe=function(t){return"string"==typeof t?new Jt([document.querySelectorAll(t)],[document.documentElement]):new Jt([null==t?[]:t],Zt)};function ae(t,e,n,r,i,o,a,s,u,l){this.target=t,this.type=e,this.subject=n,this.identifier=r,this.active=i,this.x=o,this.y=a,this.dx=s,this.dy=u,this._=l}ae.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var se=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function ue(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function le(){}var ce="\\s*([+-]?\\d+)\\s*",fe="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",he="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",pe=/^#([0-9a-f]{3,8})$/,de=new RegExp("^rgb\\("+[ce,ce,ce]+"\\)$"),ge=new RegExp("^rgb\\("+[he,he,he]+"\\)$"),me=new RegExp("^rgba\\("+[ce,ce,ce,fe]+"\\)$"),ve=new RegExp("^rgba\\("+[he,he,he,fe]+"\\)$"),_e=new RegExp("^hsl\\("+[fe,he,he]+"\\)$"),ye=new RegExp("^hsla\\("+[fe,he,he,fe]+"\\)$"),xe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function be(){return this.rgb().formatHex()}function we(){return this.rgb().formatRgb()}function Te(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=pe.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Ee(e):3===n?new Ne(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?new Ne(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?new Ne(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=de.exec(t))?new Ne(e[1],e[2],e[3],1):(e=ge.exec(t))?new Ne(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=me.exec(t))?Ce(e[1],e[2],e[3],e[4]):(e=ve.exec(t))?Ce(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=_e.exec(t))?Ie(e[1],e[2]/100,e[3]/100,1):(e=ye.exec(t))?Ie(e[1],e[2]/100,e[3]/100,e[4]):xe.hasOwnProperty(t)?Ee(xe[t]):"transparent"===t?new Ne(NaN,NaN,NaN,0):null}function Ee(t){return new Ne(t>>16&255,t>>8&255,255&t,1)}function Ce(t,e,n,r){return r<=0&&(t=e=n=NaN),new Ne(t,e,n,r)}function Ae(t){return t instanceof le||(t=Te(t)),t?new Ne((t=t.rgb()).r,t.g,t.b,t.opacity):new Ne}function Se(t,e,n,r){return 1===arguments.length?Ae(t):new Ne(t,e,n,null==r?1:r)}function Ne(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function De(){return"#"+Me(this.r)+Me(this.g)+Me(this.b)}function ke(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Me(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Ie(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Pe(t,e,n,r)}function Oe(t){if(t instanceof Pe)return new Pe(t.h,t.s,t.l,t.opacity);if(t instanceof le||(t=Te(t)),!t)return new Pe;if(t instanceof Pe)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=e===o?(n-r)/s+6*(n<r):n===o?(r-e)/s+2:(e-n)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new Pe(a,s,u,t.opacity)}function Le(t,e,n,r){return 1===arguments.length?Oe(t):new Pe(t,e,n,null==r?1:r)}function Pe(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function je(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Re(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}se(le,Te,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:be,formatHex:be,formatHsl:function(){return Oe(this).formatHsl()},formatRgb:we,toString:we}),se(Ne,Se,ue(le,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ne(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ne(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:De,formatHex:De,formatRgb:ke,toString:ke})),se(Pe,Le,ue(le,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Pe(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Pe(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new Ne(je(t>=240?t-240:t+120,i,r),je(t,i,r),je(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var He=function(t){return function(){return t}};function qe(t,e){return function(n){return t+n*e}}function Fe(t,e){var n=e-t;return n?qe(t,n>180||n<-180?n-360*Math.round(n/360):n):He(isNaN(t)?e:t)}function Ue(t){return 1==(t=+t)?Be:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):He(isNaN(e)?n:e)}}function Be(t,e){var n=e-t;return n?qe(t,n):He(isNaN(t)?e:t)}var We=function t(e){var n=Ue(e);function r(t,e){var r=n((t=Se(t)).r,(e=Se(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=Be(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function Ye(t){return function(e){var n,r,i=e.length,o=new Array(i),a=new Array(i),s=new Array(i);for(n=0;n<i;++n)r=Se(e[n]),o[n]=r.r||0,a[n]=r.g||0,s[n]=r.b||0;return o=t(o),a=t(a),s=t(s),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=s(t),r+""}}}Ye((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<e-1?t[r+2]:2*o-i;return Re((n-r/e)*e,a,i,o,s)}})),Ye((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],a=t[(r+1)%e],s=t[(r+2)%e];return Re((n-r/e)*e,i,o,a,s)}}));var Ve=function(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=nn(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}},$e=function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}},ze=function(t,e){return e-=t=+t,function(n){return t+e*n}},Ge=function(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=nn(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}},Xe=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ke=new RegExp(Xe.source,"g");var Qe,Ze,Je,tn,en=function(t,e){var n,r,i,o=Xe.lastIndex=Ke.lastIndex=0,a=-1,s=[],u=[];for(t+="",e+="";(n=Xe.exec(t))&&(r=Ke.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:ze(n,r)})),o=Ke.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)s[(n=u[r]).i]=n.x(t);return s.join("")})},nn=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?He(e):("number"===r?ze:"string"===r?(n=Te(e))?(e=n,We):en:e instanceof Te?We:e instanceof Date?$e:Array.isArray(e)?Ve:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Ge:ze)(t,e)},rn=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},on=180/Math.PI,an={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},sn=function(t,e,n,r,i,o){var a,s,u;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,u/=s),t*r<e*n&&(t=-t,e=-e,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*on,skewX:Math.atan(u)*on,scaleX:a,scaleY:s}};function un(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],u=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var u=a.push("translate(",null,e,null,n);s.push({i:u-4,x:ze(t,i)},{i:u-2,x:ze(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:ze(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,s,u),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:ze(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,s,u),function(t,e,n,r,o,a){if(t!==n||e!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:ze(t,n)},{i:s-2,x:ze(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(t){for(var e,n=-1,r=u.length;++n<r;)s[(e=u[n]).i]=e.x(t);return s.join("")}}}var ln=un((function(t){return"none"===t?an:(Qe||(Qe=document.createElement("DIV"),Ze=document.documentElement,Je=document.defaultView),Qe.style.transform=t,t=Je.getComputedStyle(Ze.appendChild(Qe),null).getPropertyValue("transform"),Ze.removeChild(Qe),t=t.slice(7,-1).split(","),sn(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),cn=un((function(t){return null==t?an:(tn||(tn=document.createElementNS("http://www.w3.org/2000/svg","g")),tn.setAttribute("transform",t),(t=tn.transform.baseVal.consolidate())?(t=t.matrix,sn(t.a,t.b,t.c,t.d,t.e,t.f)):an)}),", ",")",")");Math.SQRT2;function fn(t){return function(e,n){var r=t((e=Le(e)).h,(n=Le(n)).h),i=Be(e.s,n.s),o=Be(e.l,n.l),a=Be(e.opacity,n.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=o(t),e.opacity=a(t),e+""}}}fn(Fe),fn(Be);var hn=Math.PI/180,pn=180/Math.PI,dn=.96422,gn=1,mn=.82521,vn=4/29,_n=6/29,yn=3*_n*_n,xn=_n*_n*_n;function bn(t){if(t instanceof Tn)return new Tn(t.l,t.a,t.b,t.opacity);if(t instanceof kn)return Mn(t);t instanceof Ne||(t=Ae(t));var e,n,r=Sn(t.r),i=Sn(t.g),o=Sn(t.b),a=En((.2225045*r+.7168786*i+.0606169*o)/gn);return r===i&&i===o?e=n=a:(e=En((.4360747*r+.3850649*i+.1430804*o)/dn),n=En((.0139322*r+.0971045*i+.7141733*o)/mn)),new Tn(116*a-16,500*(e-a),200*(a-n),t.opacity)}function wn(t,e,n,r){return 1===arguments.length?bn(t):new Tn(t,e,n,null==r?1:r)}function Tn(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function En(t){return t>xn?Math.pow(t,1/3):t/yn+vn}function Cn(t){return t>_n?t*t*t:yn*(t-vn)}function An(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Sn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Nn(t){if(t instanceof kn)return new kn(t.h,t.c,t.l,t.opacity);if(t instanceof Tn||(t=bn(t)),0===t.a&&0===t.b)return new kn(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*pn;return new kn(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Dn(t,e,n,r){return 1===arguments.length?Nn(t):new kn(t,e,n,null==r?1:r)}function kn(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function Mn(t){if(isNaN(t.h))return new Tn(t.l,0,0,t.opacity);var e=t.h*hn;return new Tn(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}function In(t){return function(e,n){var r=t((e=Dn(e)).h,(n=Dn(n)).h),i=Be(e.c,n.c),o=Be(e.l,n.l),a=Be(e.opacity,n.opacity);return function(t){return e.h=r(t),e.c=i(t),e.l=o(t),e.opacity=a(t),e+""}}}se(Tn,wn,ue(le,{brighter:function(t){return new Tn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Tn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Ne(An(3.1338561*(e=dn*Cn(e))-1.6168667*(t=gn*Cn(t))-.4906146*(n=mn*Cn(n))),An(-.9787684*e+1.9161415*t+.033454*n),An(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),se(kn,Dn,ue(le,{brighter:function(t){return new kn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new kn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Mn(this).rgb()}}));In(Fe),In(Be);var On=-.14861,Ln=-.29227,Pn=-.90649,jn=1.97294,Rn=jn*Pn,Hn=1.78277*jn,qn=1.78277*Ln-Pn*On;function Fn(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Un)return new Un(t.h,t.s,t.l,t.opacity);t instanceof Ne||(t=Ae(t));var e=t.r/255,n=t.g/255,r=t.b/255,i=(qn*r+Rn*e-Hn*n)/(qn+Rn-Hn),o=r-i,a=(jn*(n-i)-Ln*o)/Pn,s=Math.sqrt(a*a+o*o)/(jn*i*(1-i)),u=s?Math.atan2(a,o)*pn-120:NaN;return new Un(u<0?u+360:u,s,i,t.opacity)}(t):new Un(t,e,n,null==r?1:r)}function Un(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Bn(t){return function e(n){function r(e,r){var i=t((e=Fn(e)).h,(r=Fn(r)).h),o=Be(e.s,r.s),a=Be(e.l,r.l),s=Be(e.opacity,r.opacity);return function(t){return e.h=i(t),e.s=o(t),e.l=a(Math.pow(t,n)),e.opacity=s(t),e+""}}return n=+n,r.gamma=e,r}(1)}se(Un,Fn,ue(le,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Un(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Un(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*hn,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),i=Math.sin(t);return new Ne(255*(e+n*(On*r+1.78277*i)),255*(e+n*(Ln*r+Pn*i)),255*(e+n*(jn*r)),this.opacity)}}));Bn(Fe),Bn(Be);var Wn,Yn,Vn=0,$n=0,zn=0,Gn=1e3,Xn=0,Kn=0,Qn=0,Zn="object"==typeof performance&&performance.now?performance:Date,Jn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function tr(){return Kn||(Jn(er),Kn=Zn.now()+Qn)}function er(){Kn=0}function nr(){this._call=this._time=this._next=null}function rr(t,e,n){var r=new nr;return r.restart(t,e,n),r}function ir(){Kn=(Xn=Zn.now())+Qn,Vn=$n=0;try{!function(){tr(),++Vn;for(var t,e=Wn;e;)(t=Kn-e._time)>=0&&e._call.call(null,t),e=e._next;--Vn}()}finally{Vn=0,function(){var t,e,n=Wn,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Wn=e);Yn=t,ar(r)}(),Kn=0}}function or(){var t=Zn.now(),e=t-Xn;e>Gn&&(Qn-=e,Xn=t)}function ar(t){Vn||($n&&($n=clearTimeout($n)),t-Kn>24?(t<1/0&&($n=setTimeout(ir,t-Zn.now()-Qn)),zn&&(zn=clearInterval(zn))):(zn||(Xn=Zn.now(),zn=setInterval(or,Gn)),Vn=1,Jn(ir)))}nr.prototype=rr.prototype={constructor:nr,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?tr():+n)+(null==e?0:+e),this._next||Yn===this||(Yn?Yn._next=this:Wn=this,Yn=this),this._call=t,this._time=n,ar()},stop:function(){this._call&&(this._call=null,this._time=1/0,ar())}};var sr=function(t,e,n){var r=new nr;return e=null==e?0:+e,r.restart((function(n){r.stop(),t(n+e)}),e,n),r},ur=Y("start","end","cancel","interrupt"),lr=[],cr=0,fr=1,hr=2,pr=3,dr=4,gr=5,mr=6,vr=function(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(u){var l,c,f,h;if(n.state!==fr)return s();for(l in i)if((h=i[l]).name===n.name){if(h.state===pr)return sr(o);h.state===dr?(h.state=mr,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[l]):+l<e&&(h.state=mr,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[l])}if(sr((function(){n.state===pr&&(n.state=dr,n.timer.restart(a,n.delay,n.time),a(u))})),n.state=hr,n.on.call("start",t,t.__data__,n.index,n.group),n.state===hr){for(n.state=pr,r=new Array(f=n.tween.length),l=0,c=-1;l<f;++l)(h=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=h);r.length=c+1}}function a(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(s),n.state=gr,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);n.state===gr&&(n.on.call("end",t,t.__data__,n.index,n.group),s())}function s(){for(var r in n.state=mr,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=rr((function(t){n.state=fr,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:i,on:ur,tween:lr,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:cr})};function _r(t,e){var n=xr(t,e);if(n.state>cr)throw new Error("too late; already scheduled");return n}function yr(t,e){var n=xr(t,e);if(n.state>pr)throw new Error("too late; already running");return n}function xr(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var br=function(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>hr&&n.state<gr,n.state=mr,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}};function wr(t,e){var n,r;return function(){var i=yr(this,t),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function Tr(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=yr(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:e,value:n},u=0,l=i.length;u<l;++u)if(i[u].name===e){i[u]=s;break}u===l&&i.push(s)}o.tween=i}}function Er(t,e,n){var r=t._id;return t.each((function(){var t=yr(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return xr(t,r).value[e]}}var Cr=function(t,e){var n;return("number"==typeof e?ze:e instanceof Te?We:(n=Te(e))?(e=n,We):en)(t,e)};function Ar(t){return function(){this.removeAttribute(t)}}function Sr(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Nr(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function Dr(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function kr(t,e,n){var r,i,o;return function(){var a,s,u=n(this);if(null!=u)return(a=this.getAttribute(t))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,u));this.removeAttribute(t)}}function Mr(t,e,n){var r,i,o;return function(){var a,s,u=n(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,u));this.removeAttributeNS(t.space,t.local)}}function Ir(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e(n))}}(t,i)),n}return i._value=e,i}function Or(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttribute(t,e(n))}}(t,i)),n}return i._value=e,i}function Lr(t,e){return function(){_r(this,t).delay=+e.apply(this,arguments)}}function Pr(t,e){return e=+e,function(){_r(this,t).delay=e}}function jr(t,e){return function(){yr(this,t).duration=+e.apply(this,arguments)}}function Rr(t,e){return e=+e,function(){yr(this,t).duration=e}}function Hr(t,e){if("function"!=typeof e)throw new Error;return function(){yr(this,t).ease=e}}function qr(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?_r:yr;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(e,n),a.on=i}}var Fr=ee.prototype.constructor;function Ur(t){return function(){this.style.removeProperty(t)}}function Br(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,e,n){return function(r){this.style.setProperty(t,e(r),n)}}(t,o,n)),r}return o._value=e,o}var Wr=0;function Yr(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Vr(){return++Wr}var $r=ee.prototype;Yr.prototype=function(t){return ee().transition(t)}.prototype={constructor:Yr,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Z(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,u,l=r[a],c=l.length,f=o[a]=new Array(c),h=0;h<c;++h)(s=l[h])&&(u=t.call(s,s.__data__,h,l))&&("__data__"in s&&(u.__data__=s.__data__),f[h]=u,vr(f[h],e,n,h,f,xr(s,n)));return new Yr(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=tt(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var u,l=r[s],c=l.length,f=0;f<c;++f)if(u=l[f]){for(var h,p=t.call(u,u.__data__,f,l),d=xr(u,n),g=0,m=p.length;g<m;++g)(h=p[g])&&vr(h,e,n,g,p,d);o.push(p),a.push(u)}return new Yr(o,a,e,n)},filter:function(t){"function"!=typeof t&&(t=et(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new Yr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=e[s],c=n[s],f=l.length,h=a[s]=new Array(f),p=0;p<f;++p)(u=l[p]||c[p])&&(h[p]=u);for(;s<r;++s)a[s]=e[s];return new Yr(a,this._parents,this._name,this._id)},selection:function(){return new Fr(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Vr(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)if(a=s[l]){var c=xr(a,e);vr(a,t,n,l,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Yr(r,this._parents,t,n)},call:$r.call,nodes:$r.nodes,node:$r.node,size:$r.size,empty:$r.empty,each:$r.each,on:function(t,e){var n=this._id;return arguments.length<2?xr(this.node(),n).on.on(t):this.each(qr(n,t,e))},attr:function(t,e){var n=z(t),r="transform"===n?cn:Cr;return this.attrTween(t,"function"==typeof e?(n.local?Mr:kr)(n,r,Er(this,"attr."+t,e)):null==e?(n.local?Sr:Ar)(n):(n.local?Dr:Nr)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=z(t);return this.tween(n,(r.local?Ir:Or)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?ln:Cr;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=_t(this,t),a=(this.style.removeProperty(t),_t(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,Ur(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=_t(this,t),s=n(this),u=s+"";return null==s&&(this.style.removeProperty(t),u=s=_t(this,t)),a===u?null:a===r&&u===i?o:(i=u,o=e(r=a,s))}}(t,r,Er(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,s="end."+a;return function(){var u=yr(this,t),l=u.on,c=null==u.value[a]?o||(o=Ur(e)):void 0;l===n&&i===c||(r=(n=l).copy()).on(s,i=c),u.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=_t(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,Br(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Er(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=xr(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?wr:Tr)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Lr:Pr)(e,t)):xr(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?jr:Rr)(e,t)):xr(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(Hr(e,t)):xr(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},u={value:function(){0==--i&&o()}};n.each((function(){var n=yr(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(u)),n.on=e}))}))}};(function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n})(3),function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),Math.PI;(function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n})(1.70158),function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158);var zr=2*Math.PI,Gr=(function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=zr);function i(t){return e*Math.pow(2,10*--t)*Math.sin((r-t)/n)}return i.amplitude=function(e){return t(e,n*zr)},i.period=function(n){return t(e,n)},i}(1,.3),function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=zr);function i(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/n)}return i.amplitude=function(e){return t(e,n*zr)},i.period=function(n){return t(e,n)},i}(1,.3),function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=zr);function i(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((r-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((r+t)/n))/2}return i.amplitude=function(e){return t(e,n*zr)},i.period=function(n){return t(e,n)},i}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function Xr(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Gr.time=tr(),Gr;return n}ee.prototype.interrupt=function(t){return this.each((function(){br(this,t)}))},ee.prototype.transition=function(t){var e,n;t instanceof Yr?(e=t._id,t=t._name):(e=Vr(),(n=Gr).time=tr(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)(a=s[l])&&vr(a,t,e,l,s,n||Xr(a,e));return new Yr(r,this._parents,t,e)};function Kr(t){return[+t[0],+t[1]]}function Qr(t){return[Kr(t[0]),Kr(t[1])]}["w","e"].map(Zr),["n","s"].map(Zr),["n","w","e","s","nw","ne","sw","se"].map(Zr);function Zr(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Jr=Math.PI,ti=2*Jr,ei=ti-1e-6;function ni(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ri(){return new ni}ni.prototype=ri.prototype={constructor:ni,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,s=n-t,u=r-e,l=o-t,c=a-e,f=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>1e-6)if(Math.abs(c*s-u*l)>1e-6&&i){var h=n-o,p=r-a,d=s*s+u*u,g=h*h+p*p,m=Math.sqrt(d),v=Math.sqrt(f),_=i*Math.tan((Jr-Math.acos((d+f-g)/(2*m*v)))/2),y=_/v,x=_/m;Math.abs(y-1)>1e-6&&(this._+="L"+(t+y*l)+","+(e+y*c)),this._+="A"+i+","+i+",0,0,"+ +(c*h>l*p)+","+(this._x1=t+x*s)+","+(this._y1=e+x*u)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var a=(n=+n)*Math.cos(r),s=n*Math.sin(r),u=t+a,l=e+s,c=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+l:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+u+","+l),n&&(f<0&&(f=f%ti+ti),f>ei?this._+="A"+n+","+n+",0,1,"+c+","+(t-a)+","+(e-s)+"A"+n+","+n+",0,1,"+c+","+(this._x1=u)+","+(this._y1=l):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=Jr)+","+c+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var ii=ri;function oi(){}function ai(t,e){var n=new oi;if(t instanceof oi)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==e)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e(r=t[i],i,t),r)}else if(t)for(var a in t)n.set(a,t[a]);return n}oi.prototype=ai.prototype={constructor:oi,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var si=ai;function ui(){}var li=si.prototype;function ci(t,e){var n=new ui;if(t instanceof ui)t.each((function(t){n.add(t)}));else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}ui.prototype=ci.prototype={constructor:ui,has:li.has,add:function(t){return this["$"+(t+="")]=t,this},remove:li.remove,clear:li.clear,values:li.keys,size:li.size,empty:li.empty,each:li.each};var fi=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e};Array.prototype.slice;var hi={},pi={},di=34,gi=10,mi=13;function vi(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+"]"})).join(",")+"}")}function _i(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var r in t)r in e||n.push(e[r]=r)})),n}function yi(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function xi(t){var e,n=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+yi(-e,6):e>9999?"+"+yi(e,6):yi(e,4))+"-"+yi(t.getUTCMonth()+1,2)+"-"+yi(t.getUTCDate(),2)+(o?"T"+yi(n,2)+":"+yi(r,2)+":"+yi(i,2)+"."+yi(o,3)+"Z":i?"T"+yi(n,2)+":"+yi(r,2)+":"+yi(i,2)+"Z":r||n?"T"+yi(n,2)+":"+yi(r,2)+"Z":"")}var bi=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,i=[],o=t.length,a=0,s=0,u=o<=0,l=!1;function c(){if(u)return pi;if(l)return l=!1,hi;var e,r,i=a;if(t.charCodeAt(i)===di){for(;a++<o&&t.charCodeAt(a)!==di||t.charCodeAt(++a)===di;);return(e=a)>=o?u=!0:(r=t.charCodeAt(a++))===gi?l=!0:r===mi&&(l=!0,t.charCodeAt(a)===gi&&++a),t.slice(i+1,e-1).replace(/""/g,'"')}for(;a<o;){if((r=t.charCodeAt(e=a++))===gi)l=!0;else if(r===mi)l=!0,t.charCodeAt(a)===gi&&++a;else if(r!==n)continue;return t.slice(i,e)}return u=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===gi&&--o,t.charCodeAt(o-1)===mi&&--o;(r=c())!==pi;){for(var f=[];r!==hi&&r!==pi;)f.push(r),r=c();e&&null==(f=e(f,s++))||i.push(f)}return i}function i(e,n){return e.map((function(e){return n.map((function(t){return a(e[t])})).join(t)}))}function o(e){return e.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?xi(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,i,o=r(t,(function(t,r){if(n)return n(t,r-1);i=t,n=e?function(t,e){var n=vi(t);return function(r,i){return e(n(r),i,t)}}(t,e):vi(t)}));return o.columns=i||[],o},parseRows:r,format:function(e,n){return null==n&&(n=_i(e)),[n.map(a).join(t)].concat(i(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=_i(t)),i(t,e).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},wi=bi(","),Ti=wi.parse,Ei=(wi.parseRows,wi.format,wi.formatBody,wi.formatRows,bi("\t")),Ci=Ei.parse;Ei.parseRows,Ei.format,Ei.formatBody,Ei.formatRows;function Ai(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Si=function(t,e){return fetch(t,e).then(Ai)};function Ni(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),Si(e,n).then((function(e){return t(e,r)}))}}var Di=Ni(Ti);Ni(Ci);function ki(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function Mi(t){return function(e,n){return Si(e,n).then((function(e){return(new DOMParser).parseFromString(e,t)}))}}Mi("application/xml"),Mi("text/html"),Mi("image/svg+xml");function Ii(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var i,o,a,s,u,l,c,f,h,p=t._root,d={data:r},g=t._x0,m=t._y0,v=t._x1,_=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((l=e>=(o=(g+v)/2))?g=o:v=o,(c=n>=(a=(m+_)/2))?m=a:_=a,i=p,!(p=p[f=c<<1|l]))return i[f]=d,t;if(s=+t._x.call(null,p.data),u=+t._y.call(null,p.data),e===s&&n===u)return d.next=p,i?i[f]=d:t._root=d,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(l=e>=(o=(g+v)/2))?g=o:v=o,(c=n>=(a=(m+_)/2))?m=a:_=a}while((f=c<<1|l)==(h=(u>=a)<<1|s>=o));return i[h]=p,i[f]=d,t}var Oi=function(t,e,n,r,i){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=i};function Li(t){return t[0]}function Pi(t){return t[1]}function ji(t,e,n){var r=new Ri(null==e?Li:e,null==n?Pi:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Ri(t,e,n,r,i,o){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Hi(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var qi=ji.prototype=Ri.prototype;qi.copy=function(){var t,e,n=new Ri(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=Hi(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(e=r.source[i])&&(e.length?t.push({source:e,target:r.target[i]=new Array(4)}):r.target[i]=Hi(e));return n},qi.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return Ii(this.cover(e,n),e,n,t)},qi.addAll=function(t){var e,n,r,i,o=t.length,a=new Array(o),s=new Array(o),u=1/0,l=1/0,c=-1/0,f=-1/0;for(n=0;n<o;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(i=+this._y.call(null,e))||(a[n]=r,s[n]=i,r<u&&(u=r),r>c&&(c=r),i<l&&(l=i),i>f&&(f=i));if(u>c||l>f)return this;for(this.cover(u,l).cover(c,f),n=0;n<o;++n)Ii(this,a[n],s[n],t[n]);return this},qi.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(n))i=(n=Math.floor(t))+1,o=(r=Math.floor(e))+1;else{for(var a,s,u=i-n,l=this._root;n>t||t>=i||r>e||e>=o;)switch(s=(e<r)<<1|t<n,(a=new Array(4))[s]=l,l=a,u*=2,s){case 0:i=n+u,o=r+u;break;case 1:n=i-u,o=r+u;break;case 2:i=n+u,r=o-u;break;case 3:n=i-u,r=o-u}this._root&&this._root.length&&(this._root=l)}return this._x0=n,this._y0=r,this._x1=i,this._y1=o,this},qi.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},qi.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},qi.find=function(t,e,n){var r,i,o,a,s,u,l,c=this._x0,f=this._y0,h=this._x1,p=this._y1,d=[],g=this._root;for(g&&d.push(new Oi(g,c,f,h,p)),null==n?n=1/0:(c=t-n,f=e-n,h=t+n,p=e+n,n*=n);u=d.pop();)if(!(!(g=u.node)||(i=u.x0)>h||(o=u.y0)>p||(a=u.x1)<c||(s=u.y1)<f))if(g.length){var m=(i+a)/2,v=(o+s)/2;d.push(new Oi(g[3],m,v,a,s),new Oi(g[2],i,v,m,s),new Oi(g[1],m,o,a,v),new Oi(g[0],i,o,m,v)),(l=(e>=v)<<1|t>=m)&&(u=d[d.length-1],d[d.length-1]=d[d.length-1-l],d[d.length-1-l]=u)}else{var _=t-+this._x.call(null,g.data),y=e-+this._y.call(null,g.data),x=_*_+y*y;if(x<n){var b=Math.sqrt(n=x);c=t-b,f=e-b,h=t+b,p=e+b,r=g.data}}return r},qi.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var e,n,r,i,o,a,s,u,l,c,f,h,p=this._root,d=this._x0,g=this._y0,m=this._x1,v=this._y1;if(!p)return this;if(p.length)for(;;){if((l=o>=(s=(d+m)/2))?d=s:m=s,(c=a>=(u=(g+v)/2))?g=u:v=u,e=p,!(p=p[f=c<<1|l]))return this;if(!p.length)break;(e[f+1&3]||e[f+2&3]||e[f+3&3])&&(n=e,h=f)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):e?(i?e[f]=i:delete e[f],(p=e[0]||e[1]||e[2]||e[3])&&p===(e[3]||e[2]||e[1]||e[0])&&!p.length&&(n?n[h]=p:this._root=p),this):(this._root=i,this)},qi.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},qi.root=function(){return this._root},qi.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},qi.visit=function(t){var e,n,r,i,o,a,s=[],u=this._root;for(u&&s.push(new Oi(u,this._x0,this._y0,this._x1,this._y1));e=s.pop();)if(!t(u=e.node,r=e.x0,i=e.y0,o=e.x1,a=e.y1)&&u.length){var l=(r+o)/2,c=(i+a)/2;(n=u[3])&&s.push(new Oi(n,l,c,o,a)),(n=u[2])&&s.push(new Oi(n,r,c,l,a)),(n=u[1])&&s.push(new Oi(n,l,i,o,c)),(n=u[0])&&s.push(new Oi(n,r,i,l,c))}return this},qi.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new Oi(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var i=e.node;if(i.length){var o,a=e.x0,s=e.y0,u=e.x1,l=e.y1,c=(a+u)/2,f=(s+l)/2;(o=i[0])&&n.push(new Oi(o,a,s,c,f)),(o=i[1])&&n.push(new Oi(o,c,s,u,f)),(o=i[2])&&n.push(new Oi(o,a,f,c,l)),(o=i[3])&&n.push(new Oi(o,c,f,u,l))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},qi.x=function(t){return arguments.length?(this._x=t,this):this._x},qi.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Fi=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},Ui=function(t){return(t=Fi(Math.abs(t)))?t[1]:NaN},Bi=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Wi(t){if(!(e=Bi.exec(t)))throw new Error("invalid format: "+t);var e;return new Yi({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Yi(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}Wi.prototype=Yi.prototype,Yi.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Vi,$i,zi,Gi,Xi=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(e+1):t},Ki=function(t,e){var n=Fi(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Qi={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Ki(100*t,e)},r:Ki,s:function(t,e){var n=Fi(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(Vi=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Fi(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Zi=function(t){return t},Ji=Array.prototype.map,to=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];$i=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?Zi:(e=Ji.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=e[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?Zi:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(Ji.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=Wi(t)).fill,n=t.align,f=t.sign,h=t.symbol,p=t.zero,d=t.width,g=t.comma,m=t.precision,v=t.trim,_=t.type;"n"===_?(g=!0,_="g"):Qi[_]||(void 0===m&&(m=12),v=!0,_="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var y="$"===h?i:"#"===h&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",x="$"===h?o:/[%p]/.test(_)?u:"",b=Qi[_],w=/[defgprs%]/.test(_);function T(t){var i,o,u,h=y,T=x;if("c"===_)T=b(t)+T,t="";else{var E=(t=+t)<0;if(t=isNaN(t)?c:b(Math.abs(t),m),v&&(t=Xi(t)),E&&0==+t&&(E=!1),h=(E?"("===f?f:l:"-"===f||"("===f?"":f)+h,T=("s"===_?to[8+Vi/3]:"")+T+(E&&"("===f?")":""),w)for(i=-1,o=t.length;++i<o;)if(48>(u=t.charCodeAt(i))||u>57){T=(46===u?a+t.slice(i+1):t.slice(i))+T,t=t.slice(0,i);break}}g&&!p&&(t=r(t,1/0));var C=h.length+t.length+T.length,A=C<d?new Array(d-C+1).join(e):"";switch(g&&p&&(t=r(A+t,A.length?d-T.length:1/0),A=""),n){case"<":t=h+t+T+A;break;case"=":t=h+A+t+T;break;case"^":t=A.slice(0,C=A.length>>1)+h+t+T+A.slice(C);break;default:t=A+h+t+T}return s(t)}return m=void 0===m?6:/[gprs]/.test(_)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),T.toString=function(){return t+""},T}return{format:f,formatPrefix:function(t,e){var n=f(((t=Wi(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Ui(e)/3))),i=Math.pow(10,-r),o=to[8+r/3];return function(t){return n(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),zi=$i.format,Gi=$i.formatPrefix;function eo(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function no(t,e){var n,r,i,o,a,s=new ao(t),u=+t.value&&(s.value=t.value),l=[s];for(null==e&&(e=ro);n=l.pop();)if(u&&(n.value=+n.data.value),(i=e(n.data))&&(a=i.length))for(n.children=new Array(a),o=a-1;o>=0;--o)l.push(r=n.children[o]=new ao(i[o])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(oo)}function ro(t){return t.children}function io(t){t.data=t.data.data}function oo(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function ao(t){this.data=t,this.depth=this.height=0,this.parent=null}ao.prototype=no.prototype={constructor:ao,count:function(){return this.eachAfter(eo)},each:function(t){var e,n,r,i,o=this,a=[o];do{for(e=a.reverse(),a=[];o=e.pop();)if(t(o),n=o.children)for(r=0,i=n.length;r<i;++r)a.push(n[r])}while(a.length);return this},eachAfter:function(t){for(var e,n,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),e=i.children)for(n=0,r=e.length;n<r;++n)o.push(e[n]);for(;i=a.pop();)t(i);return this},eachBefore:function(t){for(var e,n,r=this,i=[r];r=i.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)i.push(e[n]);return this},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;t=n.pop(),e=r.pop();for(;t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return no(this).eachBefore(io)}};var so=Array.prototype.slice;var uo=function(t){for(var e,n,r=0,i=(t=function(t){for(var e,n,r=t.length;r;)n=Math.random()*r--|0,e=t[r],t[r]=t[n],t[n]=e;return t}(so.call(t))).length,o=[];r<i;)e=t[r],n&&fo(n,e)?++r:(n=po(o=lo(o,e)),r=0);return n};function lo(t,e){var n,r;if(ho(e,t))return[e];for(n=0;n<t.length;++n)if(co(e,t[n])&&ho(go(t[n],e),t))return[t[n],e];for(n=0;n<t.length-1;++n)for(r=n+1;r<t.length;++r)if(co(go(t[n],t[r]),e)&&co(go(t[n],e),t[r])&&co(go(t[r],e),t[n])&&ho(mo(t[n],t[r],e),t))return[t[n],t[r],e];throw new Error}function co(t,e){var n=t.r-e.r,r=e.x-t.x,i=e.y-t.y;return n<0||n*n<r*r+i*i}function fo(t,e){var n=t.r-e.r+1e-6,r=e.x-t.x,i=e.y-t.y;return n>0&&n*n>r*r+i*i}function ho(t,e){for(var n=0;n<e.length;++n)if(!fo(t,e[n]))return!1;return!0}function po(t){switch(t.length){case 1:return{x:(e=t[0]).x,y:e.y,r:e.r};case 2:return go(t[0],t[1]);case 3:return mo(t[0],t[1],t[2])}var e}function go(t,e){var n=t.x,r=t.y,i=t.r,o=e.x,a=e.y,s=e.r,u=o-n,l=a-r,c=s-i,f=Math.sqrt(u*u+l*l);return{x:(n+o+u/f*c)/2,y:(r+a+l/f*c)/2,r:(f+i+s)/2}}function mo(t,e,n){var r=t.x,i=t.y,o=t.r,a=e.x,s=e.y,u=e.r,l=n.x,c=n.y,f=n.r,h=r-a,p=r-l,d=i-s,g=i-c,m=u-o,v=f-o,_=r*r+i*i-o*o,y=_-a*a-s*s+u*u,x=_-l*l-c*c+f*f,b=p*d-h*g,w=(d*x-g*y)/(2*b)-r,T=(g*m-d*v)/b,E=(p*y-h*x)/(2*b)-i,C=(h*v-p*m)/b,A=T*T+C*C-1,S=2*(o+w*T+E*C),N=w*w+E*E-o*o,D=-(A?(S+Math.sqrt(S*S-4*A*N))/(2*A):N/S);return{x:r+w+T*D,y:i+E+C*D,r:D}}function vo(t,e,n){var r,i,o,a,s=t.x-e.x,u=t.y-e.y,l=s*s+u*u;l?(i=e.r+n.r,i*=i,a=t.r+n.r,i>(a*=a)?(r=(l+a-i)/(2*l),o=Math.sqrt(Math.max(0,a/l-r*r)),n.x=t.x-r*s-o*u,n.y=t.y-r*u+o*s):(r=(l+i-a)/(2*l),o=Math.sqrt(Math.max(0,i/l-r*r)),n.x=e.x+r*s-o*u,n.y=e.y+r*u+o*s)):(n.x=e.x+n.r,n.y=e.y)}function _o(t,e){var n=t.r+e.r-1e-6,r=e.x-t.x,i=e.y-t.y;return n>0&&n*n>r*r+i*i}function yo(t){var e=t._,n=t.next._,r=e.r+n.r,i=(e.x*n.r+n.x*e.r)/r,o=(e.y*n.r+n.y*e.r)/r;return i*i+o*o}function xo(t){this._=t,this.next=null,this.previous=null}function bo(t){if(!(i=t.length))return 0;var e,n,r,i,o,a,s,u,l,c,f;if((e=t[0]).x=0,e.y=0,!(i>1))return e.r;if(n=t[1],e.x=-n.r,n.x=e.r,n.y=0,!(i>2))return e.r+n.r;vo(n,e,r=t[2]),e=new xo(e),n=new xo(n),r=new xo(r),e.next=r.previous=n,n.next=e.previous=r,r.next=n.previous=e;t:for(s=3;s<i;++s){vo(e._,n._,r=t[s]),r=new xo(r),u=n.next,l=e.previous,c=n._.r,f=e._.r;do{if(c<=f){if(_o(u._,r._)){n=u,e.next=n,n.previous=e,--s;continue t}c+=u._.r,u=u.next}else{if(_o(l._,r._)){(e=l).next=n,n.previous=e,--s;continue t}f+=l._.r,l=l.previous}}while(u!==l.next);for(r.previous=e,r.next=n,e.next=n.previous=n=r,o=yo(e);(r=r.next)!==n;)(a=yo(r))<o&&(e=r,o=a);n=e.next}for(e=[n._],r=n;(r=r.next)!==n;)e.push(r._);for(r=uo(e),s=0;s<i;++s)(e=t[s]).x-=r.x,e.y-=r.y;return r.r}function wo(t){return null==t?null:To(t)}function To(t){if("function"!=typeof t)throw new Error;return t}function Eo(){return 0}var Co=function(t){return function(){return t}};function Ao(t){return Math.sqrt(t.value)}var So=function(){var t=null,e=1,n=1,r=Eo;function i(i){return i.x=e/2,i.y=n/2,t?i.eachBefore(No(t)).eachAfter(Do(r,.5)).eachBefore(ko(1)):i.eachBefore(No(Ao)).eachAfter(Do(Eo,1)).eachAfter(Do(r,i.r/Math.min(e,n))).eachBefore(ko(Math.min(e,n)/(2*i.r))),i}return i.radius=function(e){return arguments.length?(t=wo(e),i):t},i.size=function(t){return arguments.length?(e=+t[0],n=+t[1],i):[e,n]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:Co(+t),i):r},i};function No(t){return function(e){e.children||(e.r=Math.max(0,+t(e)||0))}}function Do(t,e){return function(n){if(r=n.children){var r,i,o,a=r.length,s=t(n)*e||0;if(s)for(i=0;i<a;++i)r[i].r+=s;if(o=bo(r),s)for(i=0;i<a;++i)r[i].r-=s;n.r=o+s}}}function ko(t){return function(e){var n=e.parent;e.r*=t,n&&(e.x=n.x+t*e.x,e.y=n.y+t*e.y)}}var Mo=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},Io=function(t,e,n,r,i){for(var o,a=t.children,s=-1,u=a.length,l=t.value&&(r-e)/t.value;++s<u;)(o=a[s]).y0=n,o.y1=i,o.x0=e,o.x1=e+=o.value*l},Oo="$",Lo={depth:-1},Po={};function jo(t){return t.id}function Ro(t){return t.parentId}function Ho(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}Ho.prototype=Object.create(ao.prototype);var qo=function(t,e,n,r,i){for(var o,a=t.children,s=-1,u=a.length,l=t.value&&(i-n)/t.value;++s<u;)(o=a[s]).x0=e,o.x1=r,o.y0=n,o.y1=n+=o.value*l},Fo=(1+Math.sqrt(5))/2;function Uo(t,e,n,r,i,o){for(var a,s,u,l,c,f,h,p,d,g,m,v=[],_=e.children,y=0,x=0,b=_.length,w=e.value;y<b;){u=i-n,l=o-r;do{c=_[x++].value}while(!c&&x<b);for(f=h=c,m=c*c*(g=Math.max(l/u,u/l)/(w*t)),d=Math.max(h/m,m/f);x<b;++x){if(c+=s=_[x].value,s<f&&(f=s),s>h&&(h=s),m=c*c*g,(p=Math.max(h/m,m/f))>d){c-=s;break}d=p}v.push(a={value:c,dice:u<l,children:_.slice(y,x)}),a.dice?Io(a,n,r,i,w?r+=l*c/w:o):qo(a,n,r,w?n+=u*c/w:i,o),w-=c,y=x}return v}var Bo=function t(e){function n(t,n,r,i,o){Uo(e,t,n,r,i,o)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(Fo),Wo=function(){var t=Bo,e=!1,n=1,r=1,i=[0],o=Eo,a=Eo,s=Eo,u=Eo,l=Eo;function c(t){return t.x0=t.y0=0,t.x1=n,t.y1=r,t.eachBefore(f),i=[0],e&&t.eachBefore(Mo),t}function f(e){var n=i[e.depth],r=e.x0+n,c=e.y0+n,f=e.x1-n,h=e.y1-n;f<r&&(r=f=(r+f)/2),h<c&&(c=h=(c+h)/2),e.x0=r,e.y0=c,e.x1=f,e.y1=h,e.children&&(n=i[e.depth+1]=o(e)/2,r+=l(e)-n,c+=a(e)-n,(f-=s(e)-n)<r&&(r=f=(r+f)/2),(h-=u(e)-n)<c&&(c=h=(c+h)/2),t(e,r,c,f,h))}return c.round=function(t){return arguments.length?(e=!!t,c):e},c.size=function(t){return arguments.length?(n=+t[0],r=+t[1],c):[n,r]},c.tile=function(e){return arguments.length?(t=To(e),c):t},c.padding=function(t){return arguments.length?c.paddingInner(t).paddingOuter(t):c.paddingInner()},c.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:Co(+t),c):o},c.paddingOuter=function(t){return arguments.length?c.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):c.paddingTop()},c.paddingTop=function(t){return arguments.length?(a="function"==typeof t?t:Co(+t),c):a},c.paddingRight=function(t){return arguments.length?(s="function"==typeof t?t:Co(+t),c):s},c.paddingBottom=function(t){return arguments.length?(u="function"==typeof t?t:Co(+t),c):u},c.paddingLeft=function(t){return arguments.length?(l="function"==typeof t?t:Co(+t),c):l},c};(function t(e){function n(t,n,r,i,o){if((a=t._squarify)&&a.ratio===e)for(var a,s,u,l,c,f=-1,h=a.length,p=t.value;++f<h;){for(u=(s=a[f]).children,l=s.value=0,c=u.length;l<c;++l)s.value+=u[l].value;s.dice?Io(s,n,r,i,r+=(o-r)*s.value/p):qo(s,n,r,n+=(i-n)*s.value/p,o),p-=s.value}else t._squarify=a=Uo(e,t,n,r,i,o),a.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n})(Fo);var Yo=function(){return Math.random()},Vo=(function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(Yo),function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*e()-1,o=2*e()-1,i=r*r+o*o}while(!i||i>1);return t+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(Yo)),$o=(function t(e){function n(){var t=Vo.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(Yo),function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(Yo));(function t(e){function n(t){var n=$o.source(e)(t);return function(){return n()/t}}return n.source=t,n})(Yo),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(Yo);function zo(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}var Go=Array.prototype,Xo=Go.map,Ko=Go.slice,Qo={name:"implicit"};function Zo(){var t=si(),e=[],n=[],r=Qo;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==Qo)return r;t.set(o,a=e.push(i))}return n[(a-1)%n.length]}return i.domain=function(n){if(!arguments.length)return e.slice();e=[],t=si();for(var r,o,a=-1,s=n.length;++a<s;)t.has(o=(r=n[a])+"")||t.set(o,e.push(r));return i},i.range=function(t){return arguments.length?(n=Ko.call(t),i):n.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Zo(e,n).unknown(r)},zo.apply(i,arguments),i}var Jo=function(t){return function(){return t}},ta=function(t){return+t},ea=[0,1];function na(t){return t}function ra(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:Jo(isNaN(e)?NaN:.5)}function ia(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function oa(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=ra(i,r),o=n(a,o)):(r=ra(r,i),o=n(o,a)),function(t){return o(r(t))}}function aa(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=ra(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=s(t,e,1,r)-1;return o[n](i[n](e))}}function sa(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function ua(){var t,e,n,r,i,o,a=ea,s=ea,u=nn,l=na;function c(){return r=Math.min(a.length,s.length)>2?aa:oa,i=o=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),s,u)))(t(l(e)))}return f.invert=function(n){return l(e((o||(o=r(s,a.map(t),ze)))(n)))},f.domain=function(t){return arguments.length?(a=Xo.call(t,ta),l===na||(l=ia(a)),c()):a.slice()},f.range=function(t){return arguments.length?(s=Ko.call(t),c()):s.slice()},f.rangeRound=function(t){return s=Ko.call(t),u=rn,c()},f.clamp=function(t){return arguments.length?(l=t?ia(a):na,f):l!==na},f.interpolate=function(t){return arguments.length?(u=t,c()):u},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}function la(t,e){return ua()(t,e)}var ca=function(t,e,n,r){var i,o=y(t,e,n);switch((r=Wi(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Ui(e)/3)))-Ui(Math.abs(t)))}(o,a))||(r.precision=i),Gi(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Ui(e)-Ui(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Ui(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return zi(r)};function fa(t){var e=t.domain;return t.ticks=function(t){var n=e();return v(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return ca(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),o=0,a=i.length-1,s=i[o],u=i[a];return u<s&&(r=s,s=u,u=r,r=o,o=a,a=r),(r=_(s,u,n))>0?r=_(s=Math.floor(s/r)*r,u=Math.ceil(u/r)*r,n):r<0&&(r=_(s=Math.ceil(s*r)/r,u=Math.floor(u*r)/r,n)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(u/r)*r,e(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(u*r)/r,e(i)),t},t}function ha(){var t=la(na,na);return t.copy=function(){return sa(t,ha())},zo.apply(t,arguments),fa(t)}var pa=function(t,e){var n,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(n=r,r=i,i=n,n=o,o=a,a=n),t[r]=e.floor(o),t[i]=e.ceil(a),t};var da=new Date,ga=new Date;function ma(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=function(e){return t(e=new Date(+e)),e},i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,o){var a,s=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return s;do{s.push(a=new Date(+n)),e(n,o),t(n)}while(a<n&&n<r);return s},i.filter=function(n){return ma((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(i.count=function(e,r){return da.setTime(+e),ga.setTime(+r),t(da),t(ga),Math.floor(n(da,ga))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var va=ma((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));va.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ma((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var _a=va,ya=(va.range,ma((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),xa=ya,ba=(ya.range,6e4),wa=6048e5;function Ta(t){return ma((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*ba)/wa}))}var Ea=Ta(0),Ca=Ta(1),Aa=Ta(2),Sa=Ta(3),Na=Ta(4),Da=Ta(5),ka=Ta(6),Ma=(Ea.range,Ca.range,Aa.range,Sa.range,Na.range,Da.range,ka.range,ma((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*ba)/864e5}),(function(t){return t.getDate()-1}))),Ia=Ma,Oa=(Ma.range,ma((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*ba)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()}))),La=Oa,Pa=(Oa.range,ma((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+e*ba)}),(function(t,e){return(e-t)/ba}),(function(t){return t.getMinutes()}))),ja=Pa,Ra=(Pa.range,ma((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Ha=Ra,qa=(Ra.range,ma((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t})));qa.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ma((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):qa:null};var Fa=qa;qa.range;function Ua(t){return ma((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/wa}))}var Ba=Ua(0),Wa=Ua(1),Ya=Ua(2),Va=Ua(3),$a=Ua(4),za=Ua(5),Ga=Ua(6),Xa=(Ba.range,Wa.range,Ya.range,Va.range,$a.range,za.range,Ga.range,ma((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Ka=Xa,Qa=(Xa.range,ma((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));Qa.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ma((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var Za=Qa;Qa.range;function Ja(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function ts(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function es(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var ns,rs,is,os={"-":"",_:" ",0:"0"},as=/^\s*\d+/,ss=/^%/,us=/[\\^$*+?|[\]().{}]/g;function ls(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function cs(t){return t.replace(us,"\\$&")}function fs(t){return new RegExp("^(?:"+t.map(cs).join("|")+")","i")}function hs(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function ps(t,e,n){var r=as.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function ds(t,e,n){var r=as.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function gs(t,e,n){var r=as.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function ms(t,e,n){var r=as.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function vs(t,e,n){var r=as.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function _s(t,e,n){var r=as.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function ys(t,e,n){var r=as.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function xs(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function bs(t,e,n){var r=as.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function ws(t,e,n){var r=as.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function Ts(t,e,n){var r=as.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Es(t,e,n){var r=as.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Cs(t,e,n){var r=as.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function As(t,e,n){var r=as.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Ss(t,e,n){var r=as.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Ns(t,e,n){var r=as.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Ds(t,e,n){var r=as.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function ks(t,e,n){var r=ss.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Ms(t,e,n){var r=as.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Is(t,e,n){var r=as.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function Os(t,e){return ls(t.getDate(),e,2)}function Ls(t,e){return ls(t.getHours(),e,2)}function Ps(t,e){return ls(t.getHours()%12||12,e,2)}function js(t,e){return ls(1+Ia.count(_a(t),t),e,3)}function Rs(t,e){return ls(t.getMilliseconds(),e,3)}function Hs(t,e){return Rs(t,e)+"000"}function qs(t,e){return ls(t.getMonth()+1,e,2)}function Fs(t,e){return ls(t.getMinutes(),e,2)}function Us(t,e){return ls(t.getSeconds(),e,2)}function Bs(t){var e=t.getDay();return 0===e?7:e}function Ws(t,e){return ls(Ea.count(_a(t)-1,t),e,2)}function Ys(t,e){var n=t.getDay();return t=n>=4||0===n?Na(t):Na.ceil(t),ls(Na.count(_a(t),t)+(4===_a(t).getDay()),e,2)}function Vs(t){return t.getDay()}function $s(t,e){return ls(Ca.count(_a(t)-1,t),e,2)}function zs(t,e){return ls(t.getFullYear()%100,e,2)}function Gs(t,e){return ls(t.getFullYear()%1e4,e,4)}function Xs(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+ls(e/60|0,"0",2)+ls(e%60,"0",2)}function Ks(t,e){return ls(t.getUTCDate(),e,2)}function Qs(t,e){return ls(t.getUTCHours(),e,2)}function Zs(t,e){return ls(t.getUTCHours()%12||12,e,2)}function Js(t,e){return ls(1+Ka.count(Za(t),t),e,3)}function tu(t,e){return ls(t.getUTCMilliseconds(),e,3)}function eu(t,e){return tu(t,e)+"000"}function nu(t,e){return ls(t.getUTCMonth()+1,e,2)}function ru(t,e){return ls(t.getUTCMinutes(),e,2)}function iu(t,e){return ls(t.getUTCSeconds(),e,2)}function ou(t){var e=t.getUTCDay();return 0===e?7:e}function au(t,e){return ls(Ba.count(Za(t)-1,t),e,2)}function su(t,e){var n=t.getUTCDay();return t=n>=4||0===n?$a(t):$a.ceil(t),ls($a.count(Za(t),t)+(4===Za(t).getUTCDay()),e,2)}function uu(t){return t.getUTCDay()}function lu(t,e){return ls(Wa.count(Za(t)-1,t),e,2)}function cu(t,e){return ls(t.getUTCFullYear()%100,e,2)}function fu(t,e){return ls(t.getUTCFullYear()%1e4,e,4)}function hu(){return"+0000"}function pu(){return"%"}function du(t){return+t}function gu(t){return Math.floor(+t/1e3)}!function(t){ns=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,s=t.months,u=t.shortMonths,l=fs(i),c=hs(i),f=fs(o),h=hs(o),p=fs(a),d=hs(a),g=fs(s),m=hs(s),v=fs(u),_=hs(u),y={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:Os,e:Os,f:Hs,H:Ls,I:Ps,j:js,L:Rs,m:qs,M:Fs,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:du,s:gu,S:Us,u:Bs,U:Ws,V:Ys,w:Vs,W:$s,x:null,X:null,y:zs,Y:Gs,Z:Xs,"%":pu},x={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:Ks,e:Ks,f:eu,H:Qs,I:Zs,j:Js,L:tu,m:nu,M:ru,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:du,s:gu,S:iu,u:ou,U:au,V:su,w:uu,W:lu,x:null,X:null,y:cu,Y:fu,Z:hu,"%":pu},b={a:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=h[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=v.exec(e.slice(n));return r?(t.m=_[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.m=m[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return E(t,e,n,r)},d:Ts,e:Ts,f:Ds,H:Cs,I:Cs,j:Es,L:Ns,m:ws,M:As,p:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.p=c[r[0].toLowerCase()],n+r[0].length):-1},q:bs,Q:Ms,s:Is,S:Ss,u:ds,U:gs,V:ms,w:ps,W:vs,x:function(t,e,r){return E(t,n,e,r)},X:function(t,e,n){return E(t,r,e,n)},y:ys,Y:_s,Z:xs,"%":ks};function w(t,e){return function(n){var r,i,o,a=[],s=-1,u=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++s<l;)37===t.charCodeAt(s)&&(a.push(t.slice(u,s)),null!=(i=os[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(o=e[r])&&(r=o(n,i)),a.push(r),u=s+1);return a.push(t.slice(u,s)),a.join("")}}function T(t,e){return function(n){var r,i,o=es(1900,void 0,1);if(E(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(!e||"Z"in o||(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=ts(es(o.y,0,1))).getUTCDay(),r=i>4||0===i?Wa.ceil(r):Wa(r),r=Ka.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=Ja(es(o.y,0,1))).getDay(),r=i>4||0===i?Ca.ceil(r):Ca(r),r=Ia.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?ts(es(o.y,0,1)).getUTCDay():Ja(es(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,ts(o)):Ja(o)}}function E(t,e,n,r){for(var i,o,a=0,s=e.length,u=n.length;a<s;){if(r>=u)return-1;if(37===(i=e.charCodeAt(a++))){if(i=e.charAt(a++),!(o=b[i in os?e.charAt(a++):i])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return(y.x=w(n,y),y.X=w(r,y),y.c=w(e,y),x.x=w(n,x),x.X=w(r,x),x.c=w(e,x),{format:function(t){var e=w(t+="",y);return e.toString=function(){return t},e},parse:function(t){var e=T(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=w(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=T(t+="",!0);return e.toString=function(){return t},e}})}(t),rs=ns.format,is=ns.parse,ns.utcFormat,ns.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var mu=1e3,vu=60*mu,_u=60*vu,yu=24*_u,xu=7*yu,bu=30*yu,wu=365*yu;function Tu(t){return new Date(t)}function Eu(t){return t instanceof Date?+t:+new Date(+t)}function Cu(t,e,n,r,o,a,s,u,l){var c=la(na,na),f=c.invert,h=c.domain,p=l(".%L"),d=l(":%S"),g=l("%I:%M"),m=l("%I %p"),v=l("%a %d"),_=l("%b %d"),x=l("%B"),b=l("%Y"),w=[[s,1,mu],[s,5,5*mu],[s,15,15*mu],[s,30,30*mu],[a,1,vu],[a,5,5*vu],[a,15,15*vu],[a,30,30*vu],[o,1,_u],[o,3,3*_u],[o,6,6*_u],[o,12,12*_u],[r,1,yu],[r,2,2*yu],[n,1,xu],[e,1,bu],[e,3,3*bu],[t,1,wu]];function T(i){return(s(i)<i?p:a(i)<i?d:o(i)<i?g:r(i)<i?m:e(i)<i?n(i)<i?v:_:t(i)<i?x:b)(i)}function E(e,n,r,o){if(null==e&&(e=10),"number"==typeof e){var a=Math.abs(r-n)/e,s=i((function(t){return t[2]})).right(w,a);s===w.length?(o=y(n/wu,r/wu,e),e=t):s?(o=(s=w[a/w[s-1][2]<w[s][2]/a?s-1:s])[1],e=s[0]):(o=Math.max(y(n,r,e),1),e=u)}return null==o?e:e.every(o)}return c.invert=function(t){return new Date(f(t))},c.domain=function(t){return arguments.length?h(Xo.call(t,Eu)):h().map(Tu)},c.ticks=function(t,e){var n,r=h(),i=r[0],o=r[r.length-1],a=o<i;return a&&(n=i,i=o,o=n),n=(n=E(t,i,o,e))?n.range(i,o+1):[],a?n.reverse():n},c.tickFormat=function(t,e){return null==e?T:l(e)},c.nice=function(t,e){var n=h();return(t=E(t,n[0],n[n.length-1],e))?h(pa(n,t)):c},c.copy=function(){return sa(c,Cu(t,e,n,r,o,a,s,u,l))},c}var Au=ma((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),Su=(Au.range,ma((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}))),Nu=(Su.range,ma((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+e*ba)}),(function(t,e){return(e-t)/ba}),(function(t){return t.getUTCMinutes()})));Nu.range;var Du=function(t){return function(){return t}},ku=Math.abs,Mu=Math.atan2,Iu=Math.cos,Ou=Math.max,Lu=Math.min,Pu=Math.sin,ju=Math.sqrt,Ru=1e-12,Hu=Math.PI,qu=Hu/2,Fu=2*Hu;function Uu(t){return t>=1?qu:t<=-1?-qu:Math.asin(t)}function Bu(t){return t.innerRadius}function Wu(t){return t.outerRadius}function Yu(t){return t.startAngle}function Vu(t){return t.endAngle}function $u(t){return t&&t.padAngle}function zu(t,e,n,r,i,o,a){var s=t-n,u=e-r,l=(a?o:-o)/ju(s*s+u*u),c=l*u,f=-l*s,h=t+c,p=e+f,d=n+c,g=r+f,m=(h+d)/2,v=(p+g)/2,_=d-h,y=g-p,x=_*_+y*y,b=i-o,w=h*g-d*p,T=(y<0?-1:1)*ju(Ou(0,b*b*x-w*w)),E=(w*y-_*T)/x,C=(-w*_-y*T)/x,A=(w*y+_*T)/x,S=(-w*_+y*T)/x,N=E-m,D=C-v,k=A-m,M=S-v;return N*N+D*D>k*k+M*M&&(E=A,C=S),{cx:E,cy:C,x01:-c,y01:-f,x11:E*(i/b-1),y11:C*(i/b-1)}}var Gu=function(){var t=Bu,e=Wu,n=Du(0),r=null,i=Yu,o=Vu,a=$u,s=null;function u(){var u,l,c,f=+t.apply(this,arguments),h=+e.apply(this,arguments),p=i.apply(this,arguments)-qu,d=o.apply(this,arguments)-qu,g=ku(d-p),m=d>p;if(s||(s=u=ii()),h<f&&(l=h,h=f,f=l),h>Ru)if(g>Fu-Ru)s.moveTo(h*Iu(p),h*Pu(p)),s.arc(0,0,h,p,d,!m),f>Ru&&(s.moveTo(f*Iu(d),f*Pu(d)),s.arc(0,0,f,d,p,m));else{var v,_,y=p,x=d,b=p,w=d,T=g,E=g,C=a.apply(this,arguments)/2,A=C>Ru&&(r?+r.apply(this,arguments):ju(f*f+h*h)),S=Lu(ku(h-f)/2,+n.apply(this,arguments)),N=S,D=S;if(A>Ru){var k=Uu(A/f*Pu(C)),M=Uu(A/h*Pu(C));(T-=2*k)>Ru?(b+=k*=m?1:-1,w-=k):(T=0,b=w=(p+d)/2),(E-=2*M)>Ru?(y+=M*=m?1:-1,x-=M):(E=0,y=x=(p+d)/2)}var I=h*Iu(y),O=h*Pu(y),L=f*Iu(w),P=f*Pu(w);if(S>Ru){var j,R=h*Iu(x),H=h*Pu(x),q=f*Iu(b),F=f*Pu(b);if(g<Hu&&(j=function(t,e,n,r,i,o,a,s){var u=n-t,l=r-e,c=a-i,f=s-o,h=f*u-c*l;if(!(h*h<Ru))return[t+(h=(c*(e-o)-f*(t-i))/h)*u,e+h*l]}(I,O,q,F,R,H,L,P))){var U=I-j[0],B=O-j[1],W=R-j[0],Y=H-j[1],V=1/Pu(((c=(U*W+B*Y)/(ju(U*U+B*B)*ju(W*W+Y*Y)))>1?0:c<-1?Hu:Math.acos(c))/2),$=ju(j[0]*j[0]+j[1]*j[1]);N=Lu(S,(f-$)/(V-1)),D=Lu(S,(h-$)/(V+1))}}E>Ru?D>Ru?(v=zu(q,F,I,O,h,D,m),_=zu(R,H,L,P,h,D,m),s.moveTo(v.cx+v.x01,v.cy+v.y01),D<S?s.arc(v.cx,v.cy,D,Mu(v.y01,v.x01),Mu(_.y01,_.x01),!m):(s.arc(v.cx,v.cy,D,Mu(v.y01,v.x01),Mu(v.y11,v.x11),!m),s.arc(0,0,h,Mu(v.cy+v.y11,v.cx+v.x11),Mu(_.cy+_.y11,_.cx+_.x11),!m),s.arc(_.cx,_.cy,D,Mu(_.y11,_.x11),Mu(_.y01,_.x01),!m))):(s.moveTo(I,O),s.arc(0,0,h,y,x,!m)):s.moveTo(I,O),f>Ru&&T>Ru?N>Ru?(v=zu(L,P,R,H,f,-N,m),_=zu(I,O,q,F,f,-N,m),s.lineTo(v.cx+v.x01,v.cy+v.y01),N<S?s.arc(v.cx,v.cy,N,Mu(v.y01,v.x01),Mu(_.y01,_.x01),!m):(s.arc(v.cx,v.cy,N,Mu(v.y01,v.x01),Mu(v.y11,v.x11),!m),s.arc(0,0,f,Mu(v.cy+v.y11,v.cx+v.x11),Mu(_.cy+_.y11,_.cx+_.x11),m),s.arc(_.cx,_.cy,N,Mu(_.y11,_.x11),Mu(_.y01,_.x01),!m))):s.arc(0,0,f,w,b,m):s.lineTo(L,P)}else s.moveTo(0,0);if(s.closePath(),u)return s=null,u+""||null}return u.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-Hu/2;return[Iu(r)*n,Pu(r)*n]},u.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:Du(+e),u):t},u.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Du(+t),u):e},u.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Du(+t),u):n},u.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Du(+t),u):r},u.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:Du(+t),u):i},u.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:Du(+t),u):o},u.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:Du(+t),u):a},u.context=function(t){return arguments.length?(s=null==t?null:t,u):s},u};function Xu(t){this._context=t}Xu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Ku=function(t){return new Xu(t)};var Qu=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},Zu=function(t){return t},Ju=function(){var t=Zu,e=Qu,n=null,r=Du(0),i=Du(Fu),o=Du(0);function a(a){var s,u,l,c,f,h=a.length,p=0,d=new Array(h),g=new Array(h),m=+r.apply(this,arguments),v=Math.min(Fu,Math.max(-Fu,i.apply(this,arguments)-m)),_=Math.min(Math.abs(v)/h,o.apply(this,arguments)),y=_*(v<0?-1:1);for(s=0;s<h;++s)(f=g[d[s]=s]=+t(a[s],s,a))>0&&(p+=f);for(null!=e?d.sort((function(t,n){return e(g[t],g[n])})):null!=n&&d.sort((function(t,e){return n(a[t],a[e])})),s=0,l=p?(v-h*y)/p:0;s<h;++s,m=c)u=d[s],c=m+((f=g[u])>0?f*l:0)+y,g[u]={data:a[u],index:s,value:f,startAngle:m,endAngle:c,padAngle:_};return g}return a.value=function(e){return arguments.length?(t="function"==typeof e?e:Du(+e),a):t},a.sortValues=function(t){return arguments.length?(e=t,n=null,a):e},a.sort=function(t){return arguments.length?(n=t,e=null,a):n},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Du(+t),a):r},a.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Du(+t),a):i},a.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:Du(+t),a):o},a};el(Ku);function tl(t){this._curve=t}function el(t){function e(e){return new tl(t(e))}return e._curve=t,e}tl.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var nl=Math.sin(Hu/10)/Math.sin(7*Hu/10),rl=(Math.sin(Fu/10),Math.cos(Fu/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function il(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function ol(t){this._context=t}ol.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:il(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:il(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function al(t){this._context=t}al.prototype={areaStart:rl,areaEnd:rl,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:il(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function sl(t){this._context=t}sl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:il(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function ul(t,e){this._basis=new ol(t),this._beta=e}ul.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,i=t[0],o=e[0],a=t[n]-i,s=e[n]-o,u=-1;++u<=n;)r=u/n,this._basis.point(this._beta*t[u]+(1-this._beta)*(i+r*a),this._beta*e[u]+(1-this._beta)*(o+r*s));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};(function t(e){function n(t){return 1===e?new ol(t):new ul(t,e)}return n.beta=function(e){return t(+e)},n})(.85);function ll(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function cl(t,e){this._context=t,this._k=(1-e)/6}cl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:ll(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:ll(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new cl(t,e)}return n.tension=function(e){return t(+e)},n})(0);function fl(t,e){this._context=t,this._k=(1-e)/6}fl.prototype={areaStart:rl,areaEnd:rl,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:ll(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new fl(t,e)}return n.tension=function(e){return t(+e)},n})(0);function hl(t,e){this._context=t,this._k=(1-e)/6}hl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:ll(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new hl(t,e)}return n.tension=function(e){return t(+e)},n})(0);function pl(t,e,n){var r=t._x1,i=t._y1,o=t._x2,a=t._y2;if(t._l01_a>Ru){var s=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,u=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*s-t._x0*t._l12_2a+t._x2*t._l01_2a)/u,i=(i*s-t._y0*t._l12_2a+t._y2*t._l01_2a)/u}if(t._l23_a>Ru){var l=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*l+t._x1*t._l23_2a-e*t._l12_2a)/c,a=(a*l+t._y1*t._l23_2a-n*t._l12_2a)/c}t._context.bezierCurveTo(r,i,o,a,t._x2,t._y2)}function dl(t,e){this._context=t,this._alpha=e}dl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:pl(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new dl(t,e):new cl(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function gl(t,e){this._context=t,this._alpha=e}gl.prototype={areaStart:rl,areaEnd:rl,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:pl(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new gl(t,e):new fl(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function ml(t,e){this._context=t,this._alpha=e}ml.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:pl(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new ml(t,e):new hl(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function vl(t){this._context=t}vl.prototype={areaStart:rl,areaEnd:rl,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};function _l(t){return t<0?-1:1}function yl(t,e,n){var r=t._x1-t._x0,i=e-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(n-t._y1)/(i||r<0&&-0),s=(o*i+a*r)/(r+i);return(_l(o)+_l(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(s))||0}function xl(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function bl(t,e,n){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,s=(o-r)/3;t._context.bezierCurveTo(r+s,i+s*e,o-s,a-s*n,o,a)}function wl(t){this._context=t}function Tl(t){this._context=new El(t)}function El(t){this._context=t}function Cl(t){this._context=t}function Al(t){var e,n,r=t.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=t[0]+2*t[1],e=1;e<r-1;++e)i[e]=1,o[e]=4,a[e]=4*t[e]+2*t[e+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=i[e]/o[e-1],o[e]-=n,a[e]-=n*a[e-1];for(i[r-1]=a[r-1]/o[r-1],e=r-2;e>=0;--e)i[e]=(a[e]-i[e+1])/o[e];for(o[r-1]=(t[r]+i[r-1])/2,e=0;e<r-1;++e)o[e]=2*t[e+1]-i[e+1];return[i,o]}wl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:bl(this,this._t0,xl(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,bl(this,xl(this,n=yl(this,t,e)),n);break;default:bl(this,this._t0,n=yl(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(Tl.prototype=Object.create(wl.prototype)).point=function(t,e){wl.prototype.point.call(this,e,t)},El.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,o){this._context.bezierCurveTo(e,t,r,n,o,i)}},Cl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=Al(t),i=Al(e),o=0,a=1;a<n;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[a],e[a]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};function Sl(t,e){this._context=t,this._t=e}Sl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};function Nl(){this._=null}function Dl(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function kl(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Ml(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Il(t){for(;t.L;)t=t.L;return t}Nl.prototype={constructor:Nl,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Il(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(kl(this,n),n=(t=n).U),n.C=!1,r.C=!0,Ml(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(Ml(this,n),n=(t=n).U),n.C=!1,r.C=!0,kl(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,a=t.R;if(n=o?a?Il(a):o:a,i?i.L===t?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=a,a.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,kl(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,Ml(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,kl(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,Ml(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,kl(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,Ml(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Ol=Nl;function Ll(t,e,n,r){var i=[null,null],o=ic.push(i)-1;return i.left=t,i.right=e,n&&jl(i,t,e,n),r&&jl(i,e,t,r),nc[t.index].halfedges.push(o),nc[e.index].halfedges.push(o),i}function Pl(t,e,n){var r=[e,n];return r.left=t,r}function jl(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function Rl(t,e,n,r,i){var o,a=t[0],s=t[1],u=a[0],l=a[1],c=0,f=1,h=s[0]-u,p=s[1]-l;if(o=e-u,h||!(o>0)){if(o/=h,h<0){if(o<c)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>c&&(c=o)}if(o=r-u,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>c&&(c=o)}else if(h>0){if(o<c)return;o<f&&(f=o)}if(o=n-l,p||!(o>0)){if(o/=p,p<0){if(o<c)return;o<f&&(f=o)}else if(p>0){if(o>f)return;o>c&&(c=o)}if(o=i-l,p||!(o<0)){if(o/=p,p<0){if(o>f)return;o>c&&(c=o)}else if(p>0){if(o<c)return;o<f&&(f=o)}return!(c>0||f<1)||(c>0&&(t[0]=[u+c*h,l+c*p]),f<1&&(t[1]=[u+f*h,l+f*p]),!0)}}}}}function Hl(t,e,n,r,i){var o=t[1];if(o)return!0;var a,s,u=t[0],l=t.left,c=t.right,f=l[0],h=l[1],p=c[0],d=c[1],g=(f+p)/2,m=(h+d)/2;if(d===h){if(g<e||g>=r)return;if(f>p){if(u){if(u[1]>=i)return}else u=[g,n];o=[g,i]}else{if(u){if(u[1]<n)return}else u=[g,i];o=[g,n]}}else if(s=m-(a=(f-p)/(d-h))*g,a<-1||a>1)if(f>p){if(u){if(u[1]>=i)return}else u=[(n-s)/a,n];o=[(i-s)/a,i]}else{if(u){if(u[1]<n)return}else u=[(i-s)/a,i];o=[(n-s)/a,n]}else if(h<d){if(u){if(u[0]>=r)return}else u=[e,a*e+s];o=[r,a*r+s]}else{if(u){if(u[0]<e)return}else u=[r,a*r+s];o=[e,a*e+s]}return t[0]=u,t[1]=o,!0}function ql(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Fl(t,e){return e[+(e.left!==t.site)]}function Ul(t,e){return e[+(e.left===t.site)]}var Bl,Wl=[];function Yl(){Dl(this),this.x=this.y=this.arc=this.site=this.cy=null}function Vl(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var a=i[0],s=i[1],u=r[0]-a,l=r[1]-s,c=o[0]-a,f=o[1]-s,h=2*(u*f-l*c);if(!(h>=-ac)){var p=u*u+l*l,d=c*c+f*f,g=(f*p-l*d)/h,m=(u*d-c*p)/h,v=Wl.pop()||new Yl;v.arc=t,v.site=i,v.x=g+a,v.y=(v.cy=m+s)+Math.sqrt(g*g+m*m),t.circle=v;for(var _=null,y=rc._;y;)if(v.y<y.y||v.y===y.y&&v.x<=y.x){if(!y.L){_=y.P;break}y=y.L}else{if(!y.R){_=y;break}y=y.R}rc.insert(_,v),_||(Bl=v)}}}}function $l(t){var e=t.circle;e&&(e.P||(Bl=e.N),rc.remove(e),Wl.push(e),Dl(e),t.circle=null)}var zl=[];function Gl(){Dl(this),this.edge=this.site=this.circle=null}function Xl(t){var e=zl.pop()||new Gl;return e.site=t,e}function Kl(t){$l(t),ec.remove(t),zl.push(t),Dl(t)}function Ql(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],o=t.P,a=t.N,s=[t];Kl(t);for(var u=o;u.circle&&Math.abs(n-u.circle.x)<oc&&Math.abs(r-u.circle.cy)<oc;)o=u.P,s.unshift(u),Kl(u),u=o;s.unshift(u),$l(u);for(var l=a;l.circle&&Math.abs(n-l.circle.x)<oc&&Math.abs(r-l.circle.cy)<oc;)a=l.N,s.push(l),Kl(l),l=a;s.push(l),$l(l);var c,f=s.length;for(c=1;c<f;++c)l=s[c],u=s[c-1],jl(l.edge,u.site,l.site,i);u=s[0],(l=s[f-1]).edge=Ll(u.site,l.site,null,i),Vl(u),Vl(l)}function Zl(t){for(var e,n,r,i,o=t[0],a=t[1],s=ec._;s;)if((r=Jl(s,a)-o)>oc)s=s.L;else{if(!((i=o-tc(s,a))>oc)){r>-oc?(e=s.P,n=s):i>-oc?(e=s,n=s.N):e=n=s;break}if(!s.R){e=s;break}s=s.R}!function(t){nc[t.index]={site:t,halfedges:[]}}(t);var u=Xl(t);if(ec.insert(e,u),e||n){if(e===n)return $l(e),n=Xl(e.site),ec.insert(u,n),u.edge=n.edge=Ll(e.site,u.site),Vl(e),void Vl(n);if(n){$l(e),$l(n);var l=e.site,c=l[0],f=l[1],h=t[0]-c,p=t[1]-f,d=n.site,g=d[0]-c,m=d[1]-f,v=2*(h*m-p*g),_=h*h+p*p,y=g*g+m*m,x=[(m*_-p*y)/v+c,(h*y-g*_)/v+f];jl(n.edge,l,d,x),u.edge=Ll(l,t,null,x),n.edge=Ll(t,d,null,x),Vl(e),Vl(n)}else u.edge=Ll(e.site,u.site)}}function Jl(t,e){var n=t.site,r=n[0],i=n[1],o=i-e;if(!o)return r;var a=t.P;if(!a)return-1/0;var s=(n=a.site)[0],u=n[1],l=u-e;if(!l)return s;var c=s-r,f=1/o-1/l,h=c/l;return f?(-h+Math.sqrt(h*h-2*f*(c*c/(-2*l)-u+l/2+i-o/2)))/f+r:(r+s)/2}function tc(t,e){var n=t.N;if(n)return Jl(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var ec,nc,rc,ic,oc=1e-6,ac=1e-12;function sc(t,e){return e[1]-t[1]||e[0]-t[0]}function uc(t,e){var n,r,i,o=t.sort(sc).pop();for(ic=[],nc=new Array(t.length),ec=new Ol,rc=new Ol;;)if(i=Bl,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(Zl(o),n=o[0],r=o[1]),o=t.pop();else{if(!i)break;Ql(i.arc)}if(function(){for(var t,e,n,r,i=0,o=nc.length;i<o;++i)if((t=nc[i])&&(r=(e=t.halfedges).length)){var a=new Array(r),s=new Array(r);for(n=0;n<r;++n)a[n]=n,s[n]=ql(t,ic[e[n]]);for(a.sort((function(t,e){return s[e]-s[t]})),n=0;n<r;++n)s[n]=e[a[n]];for(n=0;n<r;++n)e[n]=s[n]}}(),e){var a=+e[0][0],s=+e[0][1],u=+e[1][0],l=+e[1][1];!function(t,e,n,r){for(var i,o=ic.length;o--;)Hl(i=ic[o],t,e,n,r)&&Rl(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>oc||Math.abs(i[0][1]-i[1][1])>oc)||delete ic[o]}(a,s,u,l),function(t,e,n,r){var i,o,a,s,u,l,c,f,h,p,d,g,m=nc.length,v=!0;for(i=0;i<m;++i)if(o=nc[i]){for(a=o.site,s=(u=o.halfedges).length;s--;)ic[u[s]]||u.splice(s,1);for(s=0,l=u.length;s<l;)d=(p=Ul(o,ic[u[s]]))[0],g=p[1],f=(c=Fl(o,ic[u[++s%l]]))[0],h=c[1],(Math.abs(d-f)>oc||Math.abs(g-h)>oc)&&(u.splice(s,0,ic.push(Pl(a,p,Math.abs(d-t)<oc&&r-g>oc?[t,Math.abs(f-t)<oc?h:r]:Math.abs(g-r)<oc&&n-d>oc?[Math.abs(h-r)<oc?f:n,r]:Math.abs(d-n)<oc&&g-e>oc?[n,Math.abs(f-n)<oc?h:e]:Math.abs(g-e)<oc&&d-t>oc?[Math.abs(h-e)<oc?f:t,e]:null))-1),++l);l&&(v=!1)}if(v){var _,y,x,b=1/0;for(i=0,v=null;i<m;++i)(o=nc[i])&&(x=(_=(a=o.site)[0]-t)*_+(y=a[1]-e)*y)<b&&(b=x,v=o);if(v){var w=[t,e],T=[t,r],E=[n,r],C=[n,e];v.halfedges.push(ic.push(Pl(a=v.site,w,T))-1,ic.push(Pl(a,T,E))-1,ic.push(Pl(a,E,C))-1,ic.push(Pl(a,C,w))-1)}}for(i=0;i<m;++i)(o=nc[i])&&(o.halfedges.length||delete nc[i])}(a,s,u,l)}this.edges=ic,this.cells=nc,ec=rc=ic=nc=null}uc.prototype={constructor:uc,polygons:function(){var t=this.edges;return this.cells.map((function(e){var n=e.halfedges.map((function(n){return Fl(e,t[n])}));return n.data=e.site.data,n}))},triangles:function(){var t=[],e=this.edges;return this.cells.forEach((function(n,r){if(o=(i=n.halfedges).length)for(var i,o,a,s,u,l,c=n.site,f=-1,h=e[i[o-1]],p=h.left===c?h.right:h.left;++f<o;)a=p,p=(h=e[i[f]]).left===c?h.right:h.left,a&&p&&r<a.index&&r<p.index&&(u=a,l=p,((s=c)[0]-l[0])*(u[1]-s[1])-(s[0]-u[0])*(l[1]-s[1])<0)&&t.push([c.data,a.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,e,n){for(var r,i,o=this,a=o._found||0,s=o.cells.length;!(i=o.cells[a]);)if(++a>=s)return null;var u=t-i.site[0],l=e-i.site[1],c=u*u+l*l;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(n){var r=o.edges[n],s=r.left;if(s!==i.site&&s||(s=r.right)){var u=t-s[0],l=e-s[1],f=u*u+l*l;f<c&&(c=f,a=s.index)}}))}while(null!==a);return o._found=r,null==n||c<=n*n?i.site:null}};function lc(t,e,n){this.k=t,this.x=e,this.y=n}lc.prototype={constructor:lc,scale:function(t){return 1===t?this:new lc(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new lc(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new lc(1,0,0);lc.prototype;var cc={DARK_BG:"#333333",LIGHTER_BG:"#5F5F5F",LIGHT_GREY:"#ACACAC",TITLE_WHITE:"#DADADA",TEAL:"#00C89D",SELECTION_GREEN:"#A0C29E",TED_RED:"#E62B1E",BRIGHT_GREEN:"#13B100",BRIGHT_RED:"#B10007",BRIGHT_ORANGE:"#B17D00"};function fc(t){return"function"==typeof t?t:function(){return t}}var hc=function(){function t(){const t=ne(document.createElement("div"));return t.style("position","absolute").style("top",0).style("opacity",0).style("pointer-events","none").style("box-sizing","border-box"),t.node()}let e="n",n=[0,0],r=" ",i=t(),o=null,a=null,s=null;function u(t){var e;null!=t.node()&&(o="svg"===(e=(e=t).node()).tagName.toLowerCase()?e:e.ownerSVGElement,a=o.createSVGPoint(),document.body.appendChild(i))}function l(){return null==i&&(i=t(),document.body.appendChild(i)),ne(i)}function c(){let t=s||Wt.target;for(;void 0===t.getScreenCTM&&"undefined"===t.parentNode;)t=t.parentNode;const e=t.getScreenCTM(),n=t.getBBox(),r=n.width,i=n.height,o=n.y,u={nw:a.matrixTransform(e),ne:a.matrixTransform(e),se:a.matrixTransform(e),w:a.matrixTransform(e),e:a.matrixTransform(e),n:a.matrixTransform(e),s:a.matrixTransform(e),sw:a.matrixTransform(e)};return a.x=n.x,a.y=o,u.nw=a.matrixTransform(e),a.x+=r,u.nw=a.matrixTransform(e),a.y+=i,u.se=a.matrixTransform(e),a.x-=r,u.nw=a.matrixTransform(e),a.y-=i/2,u.w=a.matrixTransform(e),a.x+=r,u.e=a.matrixTransform(e),a.x-=r/2,a.y-=i/2,u.n=a.matrixTransform(e),a.y+=i,u.s=a.matrixTransform(e),u}const f={n:function(){const t=c();return{top:t.n.y-i.offsetHeight,left:t.n.x-i.offsetWidth/2}},s:function(){const t=c();return{top:t.s.y,left:t.s.x-i.offsetWidth/2}},e:function(){const t=c();return{top:t.e.y-i.offsetHeight/2,left:t.e.x}},w:function(){const t=c();return{top:t.w.y-i.offsetHeight/2,left:t.w.x-i.offsetWidth}},nw:function(){const t=c();return{top:t.nw.y-i.offsetHeight,left:t.nw.x-i.offsetWidth}},ne:function(){const t=c();return{top:t.ne.y-i.offsetHeight,left:t.ne.x}},sw:function(){const t=c();return{top:t.sw.y,left:t.sw.x-i.offsetWidth}},se:function(){const t=c();return{top:t.se.y,left:t.e.x}}},h=Object.keys(f);return u.show=function(){const t=Array.prototype.slice.call(arguments);t[t.length-1]instanceof SVGElement&&(s=t.pop());const i=r.apply(this,t),o=n,a=e,c=l();let p=h.length;const d=document.documentElement.scrollTop||document.body.scrollTop,g=document.documentElement.scrollLeft||document.body.scrollLeft;for(c.html(i).style("position","absolute").style("opacity",1).style("pointer-events","all");p--;)c.classed(h[p],!1);let m;switch(a){case"n":m=f.n.apply(this);break;case"s":m=f.s.apply(this);break;case"e":m=f.e.apply(this);break;case"w":m=f.w.apply(this);break;case"nw":m=f.nw.apply(this);break;case"sw":m=f.sw.apply(this);break;case"ne":m=f.ne.apply(this);break;case"se":m=f.se.apply(this)}return c.classed(a,!0).style("top",m.top+o[0]+d+"px").style("left",m.left+o[1]+g+"px"),u},u.hide=function(){return l().style("opacity",0).style("pointer-events","none"),u},u.attr=function(t,e){if(arguments.length<2&&"string"==typeof t)return l().attr(t);{const t=Array.prototype.slice.call(arguments);ee.prototype.attr.apply(l(),t)}return u},u.style=function(t,e){if(arguments.length<2&&"string"==typeof t)return l().style(t);{const t=Array.prototype.slice.call(arguments);if(1===t.length){const e=t[0];Object.keys(e).forEach((function(t){return ee.prototype.style.apply(l(),[t,e[t]])}))}}return u},u.direction=function(t){return arguments.length?(e=null==t?t:fc(t),u):e},u.offset=function(t){return arguments.length?(n=null==t?t:fc(t),u):n},u.html=function(t){return arguments.length?(r=null==t?t:fc(t),u):r},u.destroy=function(){return i&&(l().remove(),i=null),u},u},pc=function(t,e){const n=10,r=80,i=800-r-30,o=500-n-80;t.attr("viewBox","0 0 800 500");const a=t.append("g");a.attr("transform","translate("+r+","+n+")");const s=is("%s"),l=u(e,t=>s(t.film_date)),c=function(){return zo.apply(Cu(_a,xa,Ea,Ia,La,ja,Ha,Fa,rs).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}().domain(l).range([0,i]),f=j(c).tickFormat(rs("%Y"));a.append("g").attr("transform","translate(0,"+o+")").call(f);const h=u(e,t=>+t.views),p=ha().domain(h).range([o,0]);a.append("g").call(R(p).tickFormat(zi("~s")));const d=hc().attr("class","d3-tip").html((function(t){return`${t.name}: ${t.views} views`}));a.selectAll("circle").data(e).enter().append("circle").attr("transform",(function(t){return"translate("+c(s(t.film_date))+","+p(+t.views)+")"})).attr("r",2).style("opacity","0.75").style("fill",cc.TEAL).call(d).on("mouseover",d.show).on("mouseout",d.hide),a.append("text").attr("transform","translate(-50, 250) rotate(-90)").attr("fill",cc.TITLE_WHITE).text("Number of Views"),a.append("text").attr("transform","translate(320, 450)").attr("fill",cc.TITLE_WHITE).text("Year")};var dc=function(t,e){const n=10,r=80,i=800-r-30,o=500-n-80;t.append("h2").text("What Do TED Talkers Do For a Living?"),t.append("hr").attr("color",cc.LIGHT_GREY);const a=t.append("select").attr("id","viewSelect");a.append("option").text("Circle Packing").attr("value","Circle Packing"),a.append("option").text("Treemap").attr("value","Treemap"),a.on("change",(function(){const t=ne("#viewSelect"),e=t._groups[0][0].options[t._groups[0][0].selectedIndex].value;console.log(e),"Circle Packing"==e?(oe(".circlePackNode").style("opacity","1"),oe(".treemapNode").style("opacity","0")):(oe(".circlePackNode").style("opacity","0"),oe(".treemapNode").style("opacity","1"))}));const s=t.append("svg").attr("id","professionsView");s.attr("viewBox","0 0 800 500"),s.append("g").attr("transform","translate("+r+","+n+")");const u=function(){var t=jo,e=Ro;function n(n){var r,i,o,a,s,u,l,c=n.length,f=new Array(c),h={};for(i=0;i<c;++i)r=n[i],s=f[i]=new ao(r),null!=(u=t(r,i,n))&&(u+="")&&(h[l=Oo+(s.id=u)]=l in h?Po:s);for(i=0;i<c;++i)if(s=f[i],null!=(u=e(n[i],i,n))&&(u+="")){if(!(a=h[Oo+u]))throw new Error("missing: "+u);if(a===Po)throw new Error("ambiguous: "+u);a.children?a.children.push(s):a.children=[s],s.parent=a}else{if(o)throw new Error("multiple roots");o=s}if(!o)throw new Error("no root");if(o.parent=Lo,o.eachBefore((function(t){t.depth=t.parent.depth+1,--c})).eachBefore(oo),o.parent=null,c>0)throw new Error("cycle");return o}return n.id=function(e){return arguments.length?(t=To(e),n):t},n.parentId=function(t){return arguments.length?(e=To(t),n):e},n}().id(t=>t.profession).parentId(t=>"Root"!=t.profession?"Root":"")(e).sum(t=>+t.count).sort((t,e)=>+e.data.count-+t.data.count);!function(t,e,n,r){const i=So().size([n,r]).padding(3)(e),o=t.selectAll(".circlePackNode").data(i.leaves()).enter().append("g").attr("transform",t=>`translate(${t.x+1},${t.y+1})`).attr("class","circlePackNode").style("opacity","1");o.append("circle").attr("r",t=>t.r).attr("fill",cc.TED_RED).attr("stroke",cc.LIGHT_GREY).attr("stroke-weight",5),o.append("text").text(t=>t.data.profession).style("font-size","1px").each((function(t){const e=this.getBBox(),n=this.parentNode.getBBox();t.data.scale=Math.min(n.width/e.width,n.height/e.height)})).style("font-size",(function(t){return t.data.scale+"px"})).attr("fill",cc.LIGHT_GREY).attr("class","professionLabel")}(s,u,800,500-2*n),function(t,e,n,r){const i=Wo().size([n,r]).padding(3)(e),o=t.selectAll(".treemapNode").data(i.leaves()).enter().append("g").attr("transform",t=>`translate(${t.x0+1},${t.y0+1})`).attr("class","treemapNode").style("opacity","0");o.append("rect").attr("width",t=>t.x1-t.x0).attr("height",t=>t.y1-t.y0).attr("fill",cc.LIGHT_GREY).attr("stroke",cc.LIGHTER_BG).attr("stroke-weight",5),o.append("text").text(t=>t.data.profession).style("font-size","1px").each((function(t){const e=this.getBBox(),n=this.parentNode.getBBox();t.data.scale=Math.min(n.width/e.width,n.height/e.height)})).style("font-size",(function(t){return t.data.scale+"px"})).attr("fill",cc.DARK_BG).attr("transform",t=>"translate("+(t.x1-t.x0)/2+","+(t.y1-t.y0)/2+")").attr("class","professionLabel")}(s,u,i,o)},gc=function(t){return"./images/icon_svgs/icon_"+(t=t.toLowerCase())+".svg"};const mc=ne("svg.figure1"),vc=ne("svg.figure2"),_c=ne("svg.figure3"),yc=ne("div.figure4"),xc=ne("div.ratingsDiv");var bc,wc;Di("./data/ted_main_grouped_professions.csv").then(t=>{!function(t){t.forEach(t=>{const e=new Date(1e3*parseInt(t.film_date,10));t.year=e.getFullYear().toString()})}(t),function(t,e){const n=10,r=80,i=800-r-30,o=500-n-80;t.attr("viewBox","0 0 800 500");const a=t.append("g");a.attr("transform","translate("+r+","+n+")");const s=u(e,t=>parseInt(t.year,10)),l=ha().domain(s).range([0,i]);a.append("g").attr("transform","translate(0,"+o+")").call(j(l).tickFormat(zi("d")));const c=b().domain(l.domain()).thresholds(l.ticks(s[1]-s[0]))(e.map(t=>parseInt(t.year,10))),f=ha().domain([0,w(c,t=>t.length)]).range([o,0]);a.append("g").call(R(f)),a.selectAll("rect").data(c).enter().append("rect").attr("x",1).attr("transform",(function(t){return"translate("+l(t.x0)+","+f(t.length)+")"})).attr("width",(function(t){return l(t.x1)-l(t.x0)-1})).attr("height",(function(t){return o-f(t.length)})).style("fill",cc.TED_RED),a.append("text").attr("transform","translate(-50, 250) rotate(-90)").attr("fill",cc.TITLE_WHITE).text("Number of talks"),a.append("text").attr("transform","translate(320, 450)").attr("fill",cc.TITLE_WHITE).text("Year")}(mc,t),pc(vc,t),function(t,e){const n={top:10,right:30,bottom:80,left:80},r=800,i=r-n.left-n.right,o=500-n.top-n.bottom,a=r/30,s=.8*a,l=s,c=(a-s)/2,f=.22*o,h=.78*f;function p(){const t=ne("#talkSelector"),i=t._groups[0][0].options[t._groups[0][0].selectedIndex].value;let p=0;for(let t=0;t<e.length;t++)if(e[t].name==i){p=t;break}const d=e[p].ratings.replace(/'/g,'"'),g=JSON.parse(d);g.sort((function(t,e){return+e.count-+t.count}));const m=g.length,v=(r-s*m)/(m+1),_=u(g,t=>+t.count),y=ne("#ratingsIconBarGroup"),x=ha().domain([0,_[1]]).range([s/2,o-s/2]),b=hc().attr("class","d3-tip").html((function(t){return`${t.name}: ${t.count}`})),w=y.selectAll(".ratingsG").data(g,t=>t.name),T=w.enter().append("g").attr("class","ratingsG").call(b).on("mouseover",b.show).on("mouseout",b.hide);T.append("path").attr("class","ratingBar").attr("fill",(function(t){switch(t.name.toLowerCase()){case"confusing":case"longwinded":case"unconvincing":return cc.BRIGHT_RED;case"obnoxious":case"ok":return cc.BRIGHT_ORANGE;default:return cc.BRIGHT_GREEN}})),T.append("image").attr("class","icon-image").attr("href",t=>gc(t.name)).attr("width",s).attr("height",s).attr("transform","translate(0,"+c+")"),w.merge(T).transition().duration(750).attr("transform",(t,e)=>"translate("+(v*(e+1)+s*e)+",0)").select(".ratingBar").attr("d",(function(t){const e=x(+t.count);return function(t,e,n,r,i){let o="M"+t+","+e+"v"+(-r+i);return o+="a"+i+","+i+" 0 0 1 "+i+","+-i,o+="h"+(n-2*i),o+="a"+i+","+i+" 0 0 1 "+i+","+i,o+="v"+(r-i)+"z"}(0,0,l,e,a/6)}));const E={good:0,bad:0,ok:0};for(let t=0;t<g.length;t++)switch(g[t].name.toLowerCase()){case"confusing":case"longwinded":case"unconvincing":E.bad+=+g[t].count;break;case"obnoxious":case"ok":E.ok+=+g[t].count;break;default:E.good+=+g[t].count}const C=E.good+E.bad+E.ok,A=hc().attr("class","d3-tip").html(t=>`${t.data.key.toUpperCase()}: ${(+t.data.value/t.voteTotal*100).toFixed(1)}%`),S=Zo().domain(["good","bad","ok"]).range([cc.BRIGHT_GREEN,cc.BRIGHT_RED,cc.BRIGHT_ORANGE]),N=Ju().value((function(t){return t.value}))(fi(E));N.forEach(t=>{t.voteTotal=C});const D=ne(".ratingsSVG").selectAll(".pieChart").data(N,(function(t){return t.data.key})).enter().append("path").attr("class","pieChart").attr("fill",(function(t){return S(t.data.key)})).attr("transform","translate("+(r-n.right-f)+","+(3*n.top+f)+")").call(A).on("mouseover",A.show).on("mouseout",A.hide);ne(".ratingsSVG").selectAll(".pieChart").data(N,(function(t){return t.data.key})).merge(D).transition().duration(750).attr("d",Gu().innerRadius(h).outerRadius(f))}t.append("h2").text("Talk Ratings"),t.append("hr").attr("color",cc.LIGHT_GREY);const d=t.append("select").attr("id","talkSelector").style("width",i+"px");for(let t=0;t<e.length;t++)d.append("option").attr("value",e[t].name).text(e[t].name);d.on("change",p),t.append("svg").attr("viewBox",`0 0 ${r} 500`).attr("class","ratingsSVG").append("g").attr("id","ratingsIconBarGroup").attr("transform","translate(0,"+(500-n.bottom)+")").append("rect").attr("id","iconBar").attr("width",r).attr("height",a).attr("fill",cc.LIGHT_GREY).attr("rx",a/6),p()}(xc,t)}),Di("./data/fk_scores.csv").then(t=>{!function(t,e){const n=10,r=80,i=800-r-30,o=500-n-80;t.attr("viewBox","0 0 800 500");const a=t.append("g");a.attr("transform","translate("+r+","+n+")");const s=u(e,t=>parseInt(t.level,10)),l=ha().domain(s).range([0,i]);a.append("g").attr("transform","translate(0,"+o+")").call(j(l).tickFormat(zi("d")));const c=b().domain(l.domain()).thresholds(l.ticks(40))(e.map(t=>parseInt(t.level,10))),f=ha().domain([0,w(c,t=>t.length)]).range([o,0]);a.append("g").call(R(f)),a.selectAll("rect").data(c).enter().append("rect").attr("x",1).attr("transform",(function(t){return"translate("+l(t.x0)+","+f(t.length)+")"})).attr("width",(function(t){return l(t.x1)-l(t.x0)-1})).attr("height",(function(t){return o-f(t.length)})).style("fill",cc.TED_RED),a.append("text").attr("transform","translate(-50, 250) rotate(-90)").attr("fill",cc.TITLE_WHITE).text("Number of talks"),a.append("text").attr("transform","translate(320, 450)").attr("fill",cc.TITLE_WHITE).text("Reading Level")}(_c,t)}),(bc="./data/profession_counts.json",fetch(bc,wc).then(ki)).then(t=>{dc(yc,t)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,